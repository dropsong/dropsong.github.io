<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>正则表达式</title>
      <link href="/posts/2f57a694.html"/>
      <url>/posts/2f57a694.html</url>
      
        <content type="html"><![CDATA[<p>正则表达式快速参考：<br><a href="https://learn.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference">https://learn.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference</a></p><div class="note info flat"><p>版权声明：本文为博主原创文章，遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.en">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_28087491/article/details/107608569">https://blog.csdn.net/qq_28087491/article/details/107608569</a></p></div><p>本文对原文的改编如下：<br>修订了一些错误。例如 CSDN 将原博主的<code>*</code>识别为 markdown 标记，导致<code>*</code>丢失，部分字体变为斜体。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在编写处理字符串的程序或网页时，经常会有查找某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。</p><p>很可能你使用过Win/Dos下用于文件查找的<strong>通配符(wildcard)</strong>，也就是<code>?</code>和<code>*</code>。如果你想要查找某个目录下的所有Word文档的话，你会搜索<code>*.doc</code>。在这里，<code>*</code>会被解释成任意的字符串。</p><p>和通配符类似，<strong>正则表达式</strong>也是用来进行文本匹配的工具，只不过比起通配符，它能更精确地描述你的需求。当然，代价是更复杂。比如，可以编写一个正则表达式，用来查找所有以 0 开头，后面跟着 2~3 个数字，然后是一个连字号<code>-</code>，最后是7或8位数字的字符串（像010-12345678或0376-7654321）。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>假设你在一篇英文小说里查找 hi，你可以使用正则表达式<code>hi</code>。</p><p>这几乎是最简单的正则表达式了，它可以精确匹配这样的字符串：由两个字符组成，前一个字符是<code>h</code>，后一个是<code>i</code>。通常，处理正则表达式的工具会提供一个忽略大小写的选项，如果选中了这个选项，它可以匹配hi, HI, Hi, hI这四种中的任意一种。</p><p>不幸的是，很多单词里包含 hi 这两个连续的字符，比如 him, history, high 等等。用<code>hi</code>来查找的话，这里面的 hi 也会被找出来。如果要精确地查找 hi 这个单词的话，我们应该使用<code>\bhi\b</code>。</p><p><code>\b</code>是正则表达式规定的一个特殊代码（被称为<strong>元字符 metacharacter</strong>），代表着单词的开头或结尾，也就是单词的分界处。虽然通常英文的单词是由空格，标点符号或者换行来分隔的，但是<code>\b</code>并不匹配这些单词分隔字符中的任何一个，它只匹配一个位置。</p><p>假如你要找的是 hi 后面不远处跟着的一个 Lucy，你应该用<code>\bhi\b.*\bLucy\b</code>。</p><p>这里，<code>.</code>是另一个元字符，匹配除了换行符以外的任意字符。<code>*</code>同样是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定前边的内容可以连续重复出现任意次以使整个表达式得到匹配。因此，<code>.*</code>连在一起就意味着任意数量的不包含换行的字符。现在<code>\bhi\b.*\bLucy\b</code>的意思就很明显了：先是一个单词hi，然后是任意个字符（但不能换行），最后是Lucy这个单词。</p><p>如果同时使用其它元字符，我们就能构造出功能更强大的正则表达式。比如下面这个例子：<code>0\d\d-\d\d\d\d\d\d\d\d</code>匹配这样的字符串：以0开头，然后是两个数字，然后是一个连字号“-”，最后是8个数字（也就是中国的电话号码。当然，这个例子只能匹配区号为3位的情形）。</p><p>这里的<code>\d</code>是个新的元字符，匹配一位数字（0或1或2… …）。<code>-</code>不是元字符，只匹配它本身——连字符或者减号。</p><p>为了避免那么多烦人的重复，我们也可以这样写这个表达式：<code>0\d&#123;2&#125;-\d&#123;8&#125;</code>。这里 \d 后面的 {2}({8}) 的意思是前面的 \d 必须连续重复匹配2次（8次）。</p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>现在已经知道了几个很有用的元字符了，正则表达式里还有更多的元字符，比如<code>\s</code>匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等。<code>\w</code>匹配字母或数字或下划线或汉字等。</p><p>下面看看更多的例子。</p><p><code>\ba\w*\b</code>匹配以字母a开头的单词——先是某个单词开始处（\b），然后是字母a，然后是任意数量的字母或数字（\w*）,最后是单词结束处（\b）。</p><p><code>\d+</code>匹配 1 个或更多连续的数字。这里的<code>+</code>是和<code>*</code>类似的元字符，不同的是<code>*</code>匹配重复任意次（可能是0次），而<code>+</code>则匹配重复 1 次或更多次。</p><p><code>\b\w&#123;6&#125;\b</code>匹配刚好 6 个字母/数字的单词。</p><p>元字符<code>^</code>和<code>$$``都匹配一个位置，这和``\b``有点类似。``^``匹配要用来查找的字符串的开头，``$$</code>匹配结尾。这两个代码在验证输入的内容时非常有用，比如一个网站如果要求你填写的QQ号必须为5到12位的数字时，可以使用：<code>^\d&#123;5,12&#125;$</code>。</p><p>这里的{5,12}和前面介绍过的{2}是类似的，只不过{2}匹配只能不多不少重复2次，{5,12}则是重复的次数不能少于5次，不能多于12次，否则都不匹配。</p><p>因为使用了<code>^</code>和<code>$</code>，所以输入的整个字符串都要用来和<code>\d&#123;5,12&#125;</code>来匹配，也就是说整个输出必须是5到12个数字，因此如果输入的QQ号能匹配这个正则表达式的话，那就符合要求了。</p><p>和忽略大小写的选项类似，有些正则表达式处理工具还有一个处理多行的选项。<strong>如果选中了这个选项，<code>^</code>和<code>$</code>的意义就变成了匹配行的开始处和结束处。</strong></p><h2 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h2><p>如果想查找元字符本身的话，比如查找<code>.</code>，或者<code>*</code>，就会出现问题：没有办法去指定它们，因为它们会被解释成别的意思。这时候就得使用<code>\</code>来取消这些字符的特殊意义。因此，应该使用<code>\.</code>和<code>\*</code>。当然，要查找<code>\</code>本身，则使用<code>\\</code>。</p><h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><p>要想查找数字、字母或数字、空白是很简单的，因为已经有了对应这些字符集合的元字符，但是如果你想匹配没有预定义元字符的字符集合（比如元音字母a,e,i,o,u）,应该怎么办？</p><p>很简单，你只需要在方括号里列出它们就行了，像<code>[aeiou]</code>就匹配任何一个英文元音字母，<code>[.?!]</code>匹配标点符号(.或?或!)。</p><p>我们也可以轻松地指定一个字符范围，像<code>[0-9]</code>代表的含意与<code>\d</code>就是完全一致的：一位数字。同理<code>[a-z0-9A-Z_]</code>也完全等同于<code>\w</code>（如果只考虑英文的话）。</p><p>下面是一个更复杂的表达式：<code>\(?0\d&#123;2&#125;[) -]?\d&#123;8&#125;</code>。</p><p>这个表达式可以匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等。我们对它进行一些分析吧：首先使用转义字符表示<code>(</code>,它能出现0次或1次(即 ? 的含义)，然后是一个<code>0</code>，后面跟着<code>2个数字</code>（即 \d{2} 的含义），然后是<code>)</code>或<code>-</code>或<code>空格</code>中的一个，它出现1次或不出现，最后是<code>8个数字</code>。</p><h2 id="分枝条件"><a href="#分枝条件" class="headerlink" title="分枝条件"></a>分枝条件</h2><p>不幸的是，刚才那个表达式也能匹配 010)12345678 或 (022-87654321 这样的“不正确”的格式。要解决这个问题，我们需要用到分枝条件。正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用<code>|</code>把不同的规则分隔开。</p><p><code>0\d&#123;2&#125;-\d&#123;8&#125;|0\d&#123;3&#125;-\d&#123;7&#125;</code>这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号（如 010-12345678 ），一种是4位区号，7位本地号（0376-2233445）。</p><p><code>\d&#123;5&#125;-\d&#123;4&#125;|\d&#123;5&#125;</code>这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。之所以要给出这个例子是因为它能说明一个问题： <strong>使用分枝条件时，要注意各个条件的顺序。</strong> 如果你把它改成<code>\d&#123;5&#125;|\d&#123;5&#125;-\d&#123;4&#125;</code>的话，那么就只会匹配5位的邮编（以及9位邮编的前5位）。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。</p><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>上文中已经提到了怎么重复单个字符（直接在字符后面加上限定符就行了），但如果想要重复多个字符又该怎么办？</p><p>可以使用小括号来指定<strong>子表达式</strong>（也叫作<strong>分组</strong>），然后就可以指定这个子表达式的重复次数了。</p><p><code>(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;</code>是一个简单的 IP 地址匹配表达式。要理解这个表达式，请按下列顺序分析它：<code>\d&#123;1,3&#125;</code>匹配1到3位的数字，<code>(\d&#123;1,3&#125;\.)&#123;3&#125;</code>匹配三位数字加上一个英文句号重复三次，最后再加上一个一到三位的数字<code>\d&#123;1,3&#125;</code>。</p><h2 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h2><p>有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到反义：</p><table>  <tbody>    <tr>      <td><strong>语法</strong></td>      <td><strong>说明</strong></td>    </tr>    <tr>      <td>\W</td>      <td>匹配任意不是字母，数字，下划线，汉字的字符</td>    </tr>    <tr>      <td>\S</td>      <td>匹配任意不是空白符的字符</td>    </tr>    <tr>      <td>\D</td>      <td>匹配任意非数字的字符</td>    </tr>    <tr>      <td>\B</td>      <td>匹配不是单词开头或结束的位置</td>    </tr>    <tr>      <td>[^x]</td>      <td>匹配除了x以外的任意字符</td>    </tr>    <tr>      <td>[^aeiou]</td>      <td>匹配除了aeiou这几个字母以外的任意字符</td>    </tr>  </tbody>  <colgroup>    <col>    <col>  </colgroup></table><p>例如，用<code>&lt;a[^&gt;]+&gt;</code>匹配用尖括号括起来的以a开头的字符串。</p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>to do…</p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>烟花三月下扬州</title>
      <link href="/posts/19141e40.html"/>
      <url>/posts/19141e40.html</url>
      
        <content type="html"><![CDATA[<p>仍旧是随手拍。</p><p>出了车站直取鉴真路，可惜花期已过，是今年太热了吗？</p><p>瘦西湖离鉴真路不远，遂步行。</p><p><img src="https://bu.dusays.com/2024/04/12/66188ffbc9a96.jpg" alt="71-1.jpg"></p><p>路过一个小餐馆，正是饭点，点了一碗卤肉饭，不是很好吃。</p><p>平山堂东路路边有鉴真的雕像，北边便是大明寺。</p><p>往寺庙去的台阶上有个算命的，门口有开光物件的广告。</p><p>墙体金黄，寺内香火旺盛。</p><p>佛像和罗汉像并未给人很特别的印象，若移驾去别的小寺，恐怕也难有大驾光临之感。</p><p>倒是背后的一墙小神仙的雕塑，生动活泼。</p><p>此地设有欧阳文忠纪念馆，亦与梁思成颇有渊源。</p><p>有康熙乾隆的笔墨，还有一些雅致的小建筑。</p><p><img src="https://bu.dusays.com/2024/04/10/66167e36f0f6a.jpg" alt="71-2.jpg"></p><p><img src="https://bu.dusays.com/2024/04/12/6618903e5e746.jpg" alt="71-3.jpg"></p><p>广场前有一处洗手池，总之大约是吉利的意思，我便舀来洗了。但这水并不十分干净，黏黏的，后来在洗手间重又洗了一回。</p><p>来到广场，便是很远处就可看见的塔，钟楼和鼓楼拱卫其下。</p><p>出了大明寺，沿平山堂东路继续走不远，是一处江泽民题字的烈士陵园。</p><p>我路过的时候，正值一群老干部神气的人，穿着正式、谈笑风生地走下来，大约刚结束了什么团建活动。</p><p>大门敞开着，我便直接走进。终于爬了上去，视野比较开阔，然而回头却发现大门紧闭，才知道今天并不对外开放，却放我从正门大摇大摆地进来。我赶紧往回走，和保安吱了一声，大门开了一条小缝放我出去。</p><p>接下来直接去瘦西湖。</p><p><img src="https://bu.dusays.com/2024/04/10/66167e49033bc.jpg" alt="71-4.jpg"></p><p>瘦西湖很大，我也并未逛全，只是随着人流瞎玩。</p><p>盆景很值得一看，有户外展出的，也有室内博物馆。</p><p><img src="https://bu.dusays.com/2024/04/12/6618907a462ff.jpg" alt="71-5.jpg"></p><p><img src="https://bu.dusays.com/2024/04/10/66167e52aa2e2.jpg" alt="71-6.jpg"></p><p>洛春堂：黄昏花影二分月，细雨春林一半烟。</p><p><img src="https://bu.dusays.com/2024/04/12/661890d4d2651.jpg" alt="71-7.jpg"></p><p>二十四桥人挤人。</p><p>出了瘦西湖景区，正好外面有卖酸奶的，随手挑了一个扬大酸奶，不知道和扬州大学有没有关系。</p><p>光速打卡了文昌阁、钟书阁、四望亭，出发去东关街。</p><p>东关街看着像是现代商业炮制出来的街道，甚至还有塔罗咨询，实际上深入巷子里发现还是有土著住在里面的，大约只是面向游客的那一面商业化了。</p><p>东关街边正好挨着个园，它真好看。</p><p><img src="https://bu.dusays.com/2024/04/12/661891039b049.jpg" alt="71-8.jpg"></p><p><img src="https://bu.dusays.com/2024/04/12/6618913267391.jpg" alt="71-9.jpg"></p><p><img src="https://bu.dusays.com/2024/04/12/6618916beed5a.jpg" alt="71-10.jpg"></p><p><img src="https://bu.dusays.com/2024/04/10/66167effb769d.jpg" alt="71-11.jpg"></p><p><img src="https://bu.dusays.com/2024/04/10/66167f004e223.jpg" alt="71-12.jpg"></p><p><img src="https://bu.dusays.com/2024/04/10/661693346a73f.jpg" alt="71-13.jpg"></p><p>据说是小姐抛绣球的地方：<del>糟糕，好像有什么前世记忆苏醒了</del></p><p><img src="https://s2.loli.net/2024/04/10/apXZLtenfNWk5yu.jpg" alt="71-13dot5.jpg"></p><p>出了个园之后，买了两个糕点。</p><p><img src="https://s2.loli.net/2024/04/10/dhxz7Ab6CLoIDJO.jpg" alt="71-14.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摄影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人力资源知识存档</title>
      <link href="/posts/22d6c38e.html"/>
      <url>/posts/22d6c38e.html</url>
      
        <content type="html"><![CDATA[<p>以前的知识存档。其实我个人倾向于认为这是八股文。</p><h2 id="为什么在开展培训前要先进行培训需求分析？"><a href="#为什么在开展培训前要先进行培训需求分析？" class="headerlink" title="为什么在开展培训前要先进行培训需求分析？"></a>为什么在开展培训前要先进行培训需求分析？</h2><p>培训需求分析是整个培训开发工作的起始点，决定着培训活动的方向，对培训的质量起着决定性作用，如果前期的培训需求分析出现了偏差，那么培训工作的实施可能就会“南辕北辙”，达不到预期的目的。</p><h2 id="对学校的应届毕业生如何进行培训需求分析？"><a href="#对学校的应届毕业生如何进行培训需求分析？" class="headerlink" title="对学校的应届毕业生如何进行培训需求分析？"></a>对学校的应届毕业生如何进行培训需求分析？</h2><p>一般来说，可从组织分析、任务分析、人员分析三个方面入手。组织分析是在组织层面展开的，通过对组织的目标、资源、特质、环境等因素，对未来发展方向分析确定今后的培训重点和方向；另一方面对整体绩效做出评价，找出问题以便确定培训重点。 任务分析确定各职位的工作任务及完成它们所需的知识技能等。 人员分析关注员工个体现有状况与应有状况间的差距，一是根据绩效找出问题以确定培训需求，二是根据其职位变动计划比较现有状况与未来职业要求以确定将来问题的培训需求，通过人员分析，确定组织中哪些人需要接受怎样的培训。</p><p>具体到应届毕业生的培训需求分析，除上述要点外，还要关注其身份的特点。应届毕业生初入社会对职场包括生活的各方面比较生疏，学校教育与职场需求有脱节的可能。因此，应届毕业生的培训包含以下几个方面的培训：</p><ul><li>首先是介绍式培训，让应届毕业生尽快了解企业。</li><li>其次是适应性培训，让应届毕业生适应企业的工作。例如工作的规范和流程，企业的规章制度，安全生产制度等。</li><li>再次是转型培训，帮助应届毕业生完成从学生到员工、从学习到工作的转变。</li></ul><h2 id="实施培训前重点要进行哪些方面的准备工作？"><a href="#实施培训前重点要进行哪些方面的准备工作？" class="headerlink" title="实施培训前重点要进行哪些方面的准备工作？"></a>实施培训前重点要进行哪些方面的准备工作？</h2><p>对个体培训意向的特点和培训项目的要求进行综合分析，同时兼顾具体的情景因素，如项目类型、培训预算、领导支持等。</p><p>在培训前做好培训计划。针对不同的参训人员最好有量身的培训计划，退而求其次，至少也要分层次进行培训。</p><p>必要时跟进配套的工作：</p><ul><li>确保参训人员做好准备。</li><li>选择培训场地。</li><li>严肃培训纪律。</li><li>编制培训准备工作清单。</li></ul><h2 id="结合现实，谈谈为什么现代企业十分重视员工的培训？"><a href="#结合现实，谈谈为什么现代企业十分重视员工的培训？" class="headerlink" title="结合现实，谈谈为什么现代企业十分重视员工的培训？"></a>结合现实，谈谈为什么现代企业十分重视员工的培训？</h2><p>万佳泓不锈钢重视员工的全方位培训，每次有新的员工加入时，都会参加所谓的“6s”培训：安全操作培训、成品仓排序、品质培训、平板车间培训、色板炉培训、营销产品培训等一系列培训。有效的提高了企业凝集力和竞争力。</p><p>现代企业重视员工培训是因为：</p><ul><li>培训对员工有激励作用，是有价值的双赢投资。培训不仅使员工积极性、创造性提高，达到增加企业产出的效率和价值，使企业直接受益的目的，而且还能增强员工本人的素质和能力。</li><li>企业培训使员工了解企业的价值观通过培训，可以增强员工对企业的认同感，增强凝聚力及团队精神。</li><li>企业培训可以提升员工技术、能力水准。</li><li>企业培训是为员工建立学习型组织，使企业时刻有新的血液注入，通过不断学习和创新来提高效率。</li></ul><h2 id="员工培训的方法主要有哪些？各自有什么优缺点？"><a href="#员工培训的方法主要有哪些？各自有什么优缺点？" class="headerlink" title="员工培训的方法主要有哪些？各自有什么优缺点？"></a>员工培训的方法主要有哪些？各自有什么优缺点？</h2><p>方法：演示法与团队建设法、专家传授培训法。</p><p>其中<strong>演示法</strong>包括：</p><ul><li>讲座法</li><li>远程学习法</li><li>视听教学法</li></ul><p>优缺点：受训者作为信息的被动接受者</p><p><strong>团队建设法</strong>包括：</p><ul><li>探险性学习</li><li>团队培训</li><li>行动学习</li></ul><p>优缺点：提高团队成员技能、提高团队的有效性、知行合一</p><p><strong>专家传授法</strong>包括：</p><ul><li>在职培训</li><li>情景模拟</li><li>商业游戏（例如沙盘等）</li><li>个案研究</li><li>交互式培训</li><li>互联网培训</li><li>…（等）…</li></ul><p>优缺点：要求受训者积极参与学习、主要目的是开发特定技能</p><h2 id="员工培训与开发的步骤有哪些？"><a href="#员工培训与开发的步骤有哪些？" class="headerlink" title="员工培训与开发的步骤有哪些？"></a>员工培训与开发的步骤有哪些？</h2><p>员工培训的步骤：</p><ul><li>培训需求分析</li><li>培训项目设计</li><li>培训准备工作</li><li>培训效果评估</li></ul><p>员工开发的基本过程：（例如）根据绩效找出问题以确定开发需求；根据其职位变动计划比较现有状况与未来职业要求以确定将来问题的开发需求；…（等）…</p><h2 id="在实施员工培训过程中，企业应做好哪几个方面的工作？"><a href="#在实施员工培训过程中，企业应做好哪几个方面的工作？" class="headerlink" title="在实施员工培训过程中，企业应做好哪几个方面的工作？"></a>在实施员工培训过程中，企业应做好哪几个方面的工作？</h2><p><strong>营造积极的培训氛围。</strong></p><p>衡量新员工培训效果的一个重要标志是通过培训能否让新员工产生对企业的认同感和归属感，愿意为企业奉献。如果能够在培训中营造良好氛围，引导得当，让他们以企业为豪，产生强烈的为企业工作和奉献的愿望，那么企业将来就可能获得巨大收益。让新员工感受到同事之间的融洽气氛，能为良好氛围的营造打下基础。</p><p><strong>注意进行培训需求分析和培训效果评估。</strong></p><p>培训是一个流程，需要需求分析、制订方案、教学安排、实施培训、效果分析一步步实施。如果不注重培训需求分析，则培训效果会出现一定的偏差。具体来说，培训需求分析既包括企业的需求，也包括培训人员的需求。</p><h2 id="上司安排你给新入职的员工开展培训，你打算制定哪些课程内容？为什么？"><a href="#上司安排你给新入职的员工开展培训，你打算制定哪些课程内容？为什么？" class="headerlink" title="上司安排你给新入职的员工开展培训，你打算制定哪些课程内容？为什么？"></a>上司安排你给新入职的员工开展培训，你打算制定哪些课程内容？为什么？</h2><p>针对进入企业的新员工的岗前培训，其首要目的是使他们成为企业的一名合格员工，此外，还要针对他们的需要，帮助他们完成从新人到熟练员工的转型。因此，我打算制定以下几个方面的培训：</p><ul><li>首先是介绍式培训，让新员工尽快了解企业。要让他们消除紧张和不适，一开始必须让他们对企业有一个初步的了解，尽快熟悉环境。所以培训的开始阶段要进行企业基本情况的介绍，包括企业组织结构、各部门地理分布、人员构成、企业产品知识等内容。</li><li>其次是适应性培训，让他们适应企业的工作，知道工作的规范和流程，要求新员工适应本企业工作的特点。了解企业的规章制度，如员工行为规范、人力资源管理制度、安全生产制度等；熟悉企业产品和技术方面的管理制度，如目标管理制度、成本管理制度、全面质量管理制度等。</li><li>再次是转型培训，帮助他们完成从新手到熟练员工的转变。安排一系列培训课程帮助他们进行转型。具体培训内容包括自我管理、交流和沟通技巧、职业道德和爱岗敬业精神，团队精神培训等。</li><li>最后一点，通过使其认同组织文化来重新塑造员工的培训。宣传企业的文化非常重要。企业文化的培训可以通过多种方式来进行，如介绍企业发展史和成功事例，请老员工谈感受，也可以做一些小游戏让他们加深对企业文化的认识和理解。</li></ul><h2 id="在你的教育经历中，你如何看待考试起到的作用"><a href="#在你的教育经历中，你如何看待考试起到的作用" class="headerlink" title="在你的教育经历中，你如何看待考试起到的作用"></a>在你的教育经历中，你如何看待考试起到的作用</h2><p><strong>积极作用：</strong></p><ul><li>考试是检验所学知识掌握程度的一种方法。考生通过考试的反馈可以制定下一阶段学习的计划，并相应地调整学习态度、改进学习方法。</li><li>考试形成的正向压力是学习的动力之一。</li><li>考试有其选拔性。通过考试，考生可以走向更大的平台。</li></ul><p><strong>消极作用：</strong></p><ul><li>考试可能带来焦虑。</li><li>考试的结果有偶然性。</li></ul><h2 id="如果你是受训者，你最喜欢哪种培训方式？如果你是课程设计者，你最喜欢哪种培训方式？为什么？"><a href="#如果你是受训者，你最喜欢哪种培训方式？如果你是课程设计者，你最喜欢哪种培训方式？为什么？" class="headerlink" title="如果你是受训者，你最喜欢哪种培训方式？如果你是课程设计者，你最喜欢哪种培训方式？为什么？"></a>如果你是受训者，你最喜欢哪种培训方式？如果你是课程设计者，你最喜欢哪种培训方式？为什么？</h2><p>受训者：团队建设法-探险性学习。比较有趣，寓教于乐。在与团队成员的互动中，磨合团队，增进友谊。探险性学习可以提高团队成员技能、提高团队的有效性、知行合一。</p><p>课程设计者：讲座法。虽然受训者作为信息的被动接受者，但在合适的条件下，例如受训者思想集中、学习效率高，那么教学培训将会非常高效。另外，讲座法安全风险低，相对于探索性学习等。</p><h2 id="简述培训效果评估的四个层次"><a href="#简述培训效果评估的四个层次" class="headerlink" title="简述培训效果评估的四个层次"></a>简述培训效果评估的四个层次</h2><p>传统的培训效果评估主要是根据柯克帕特里克的四层次框架体系来进行的，它的内容是：</p><div class="table-container"><table><thead><tr><th style="text-align:center">评估级别</th><th style="text-align:center">主要内容</th><th style="text-align:center">可询问的问题</th><th style="text-align:center">衡量方法</th></tr></thead><tbody><tr><td style="text-align:center">反应层评估</td><td style="text-align:center">观察学员的反应</td><td style="text-align:center">学员喜欢该课程吗</td><td style="text-align:center">问卷、评估访谈</td></tr><tr><td style="text-align:center">学习层评估</td><td style="text-align:center">检查学员的学习效果</td><td style="text-align:center">培训项目中学到了什么</td><td style="text-align:center">笔试、绩效</td></tr><tr><td style="text-align:center">行为层反应</td><td style="text-align:center">衡量培训后的工作表现</td><td style="text-align:center">学员在学习后有无改变行为</td><td style="text-align:center">由上级、同事等考核观察</td></tr><tr><td style="text-align:center">结果层评估</td><td style="text-align:center">衡量组织经营业绩变化</td><td style="text-align:center">行为改变对组织的影响是否积极</td><td style="text-align:center">考察事故率、生产率、士气等</td></tr></tbody></table></div><h2 id="简述培训与开发的区别与联系"><a href="#简述培训与开发的区别与联系" class="headerlink" title="简述培训与开发的区别与联系"></a>简述培训与开发的区别与联系</h2><p>培训是有助于员工学习和工作相关能力的活动；开发是为员工的未来发展开展的正规教育、在职教育、人际互动等活动。</p><p>培训与开发的导向性不同。培训是当前或短期导向；开发是未来和长期导向。</p><p>关注点不同。培训关注工作技能；开发关注管理技能。</p><p>对象不同。培训的对象是员工与技术人员；开发的对象是管理人员。</p><p>培训与开发也有紧密的联系，它们的界限日益模糊。因为全员需要培训，全员需要开发。开发是目的，培训是手段。</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人力资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复试八股</title>
      <link href="/posts/1cbfb5dc.html"/>
      <url>/posts/1cbfb5dc.html</url>
      
        <content type="html"><![CDATA[<h2 id="专业课问题"><a href="#专业课问题" class="headerlink" title="专业课问题"></a>专业课问题</h2><h3 id="介绍一下大数据，有什么相关的应用"><a href="#介绍一下大数据，有什么相关的应用" class="headerlink" title="介绍一下大数据，有什么相关的应用"></a>介绍一下大数据，有什么相关的应用</h3><p>大数据是指规模庞大、类型多样且以高速增长的数据集合。这些数据集合通常难以使用传统的数据处理技术进行捕获、管理和处理。大数据的特点包括“3V”：Volume（大量）、Velocity（高速）、Variety（多样性），有时候还会包括Veracity（真实性）和Value（价值）。</p><p>大数据在各个领域都有广泛的应用。</p><p>大数据可以用在<strong>商业智能和数据分析</strong>方面：企业可以利用大数据分析来进行销售预测、市场营销优化、客户行为分析等。</p><p>大数据还可以用于<strong>互联网搜索和推荐系统</strong>：搜索引擎和推荐系统利用大数据技术来处理和分析海量的网络数据，以提供更准确的搜索结果和个性化的推荐服务。</p><p>在高并发的情况的情况下，对数据处理的要求也会提高。例如，引入 NoSQL 技术，这是一种基于内存的数据库，并且提供一定的持久化功能。例如基于键值对 key-value 的 Redis，是当前最热门的 NoSQL 数据库之一。</p><h3 id="人工智能有哪些应用"><a href="#人工智能有哪些应用" class="headerlink" title="人工智能有哪些应用"></a>人工智能有哪些应用</h3><p>人工智能有很多应用，例如医疗、金融、数据分析等方面。</p><p>最近比较火的当属 OpenAI 的一系列 AI 产品，如 chatGPT ，一个大语言模型，还有文字生成视频模型 Sora. 国内的相关产品有百度的文心一言等。前一阵子 AI 绘画也大火了一把。</p><p>大语言模型 large language model, 是一种人工智能模型，旨在理解和生成人类语言。它们在大量的文本数据上进行训练，可以执行广泛的任务，包括文本总结、翻译、情感分析等等。LLM的特点是规模庞大，参数巨多，需要相当多的算力。</p><p>这些 AI 应用在最近不仅带动了互联网公司的新一轮发展和竞争，也带动了上下游相关企业。例如提供算力的英伟达公司，在这一轮 AI 热潮中赚取了大量利润。</p><h3 id="什么是-黑盒白盒、瀑布模型"><a href="#什么是-黑盒白盒、瀑布模型" class="headerlink" title="什么是 黑盒白盒、瀑布模型"></a>什么是 黑盒白盒、瀑布模型</h3><p>黑盒测试和白盒测试是软件测试中的两种常见方法，它们针对测试者所知道的关于软件内部结构和功能的程度不同而有所区别。</p><ol><li><p><strong>黑盒测试（Black Box Testing）</strong>：</p><ul><li>黑盒测试是一种测试方法，测试者不需要知道被测试软件的内部结构、实现细节或编程代码，而是将软件看作一个黑盒子，只关注其输入和输出之间的关系。</li><li>黑盒测试更加关注软件的功能性、用户界面和用户体验等方面，常用于功能测试、集成测试和验收测试等阶段。</li></ul></li><li><p><strong>白盒测试（White Box Testing）</strong>：</p><ul><li>白盒测试是一种测试方法，测试者需要了解被测试软件的内部结构、实现细节和编程代码，以便设计更全面的测试用例和验证逻辑。</li><li>白盒测试更加关注软件的内部逻辑、代码覆盖率和程序结构等方面，常用于单元测试、集成测试和系统测试等阶段。</li></ul></li></ol><p><strong>瀑布模型（Waterfall Model）</strong>是软件开发过程中的一种经典的<strong>线性顺序模型</strong>，它将软件开发过程分为一系列严格顺序的阶段，并要求在<strong>一个阶段完成后才能开始下一个阶段</strong>。瀑布模型的阶段通常包括<strong>需求分析、系统设计、编码、测试和维护</strong>等，每个阶段都有明确的输入和输出。开发团队按照瀑布模型的顺序依次完成各个阶段的工作，每个阶段的输出作为下一个阶段的输入，直到整个软件开发过程完成。瀑布模型适用于对需求变化要求不频繁、项目范围和时间预算比较明确的项目，但也存在刚性和高风险的缺点，难以适应需求变化和反馈延迟等问题。</p><h3 id="计算机组成原理的寻址方式有哪些"><a href="#计算机组成原理的寻址方式有哪些" class="headerlink" title="计算机组成原理的寻址方式有哪些"></a>计算机组成原理的寻址方式有哪些</h3><p>立即寻址、隐含寻址、直接寻址、间接寻址、相对寻址、基址寻址、变址寻址、寄存器寻址、寄存器间接寻址。</p><p>（用自己的话再简要说说）</p><h3 id="DBMS-数据库管理系统-的功能"><a href="#DBMS-数据库管理系统-的功能" class="headerlink" title="DBMS(数据库管理系统)的功能"></a>DBMS(数据库管理系统)的功能</h3><p>数据定义、数据操作、数据库的运行管理、数据组织存储与管理、数据表的保护、数据库的维护。</p><h3 id="C和Java区别"><a href="#C和Java区别" class="headerlink" title="C和Java区别"></a>C和Java区别</h3><p>(三五点就行)</p><p>语法不同；单文件的编译时间java比C语言快；C语言可以直接操作内存，java不能直接操作；C语言可以封装动态库，java不行；C语言的代码不容易跨平台，java的代码容易跨平台；C语言有指针，java没有指针；C语言可以直接操作串口，java需要第三方jar包支持；C语言的线程更加灵活，java的线程都已经封装好了；C语言做单独功能，可以增加效率，java适用做web应用开发；</p><h3 id="数据库建立过程-数据库设计总体流程"><a href="#数据库建立过程-数据库设计总体流程" class="headerlink" title="数据库建立过程(数据库设计总体流程)"></a>数据库建立过程(数据库设计总体流程)</h3><p>需求分析、概要设计、逻辑结构设计、物理设计阶段、数据库实施阶段、数据库运行和维护阶段。</p><h3 id="信息安全用到的工具"><a href="#信息安全用到的工具" class="headerlink" title="信息安全用到的工具"></a>信息安全用到的工具</h3><p>病毒防护技术、入侵检测技术、安全扫描技术、认证签名技术、应用安全技术。</p><h3 id="什么是SRAM"><a href="#什么是SRAM" class="headerlink" title="什么是SRAM"></a>什么是SRAM</h3><p>静态随机存取存储器(Static Random-Access Memory，SRAM)是随机存取存储器的一种。所谓的“静态”，是指这种存储器只要保持通电，里面储存的数据就可以恒常保持。相对之下，动态随机存取存储器(DRAM)里面所储存的数据就需要周期性地更新。</p><p>SRAM 是采用双稳态触发器实现的，读出数据时，触发器状态稳定，是<strong>非破坏性读出</strong>，无需重写，因此速度比栅极电容快，SRAM 常用作 Cache，而栅极电容制作的 DRAM 常用作内存。</p><p>但是，因为 SRAM 电路更复杂、使用了更多的 MOS 管，所以成本更高。</p><h3 id="智能家居用到了什么物联网技术"><a href="#智能家居用到了什么物联网技术" class="headerlink" title="智能家居用到了什么物联网技术"></a>智能家居用到了什么物联网技术</h3><p>智能家居利用物联网（Internet of Things，IoT）技术实现设备之间的互联互通，从而实现远程控制、自动化操作和数据交互。一些物联网技术有：</p><ol><li><strong>传感器技术</strong>：智能家居常配备各种传感器，如温度、湿度、光线传感器等，用于实时监测环境参数。</li><li>采用<strong>无线通信技术</strong>进行数据传输，如Wi-Fi、蓝牙、Zigbee、Z-Wave等。这些无线技术使设备之间互联。</li><li><strong>云计算和大数据分析</strong>：将采集到的数据上传到云端服务器进行存储和分析。通过云计算和大数据分析技术，用户可以获取更多的智能化服务，如个性化的智能推荐、智能能源管理等。</li><li><strong>人机交互技术</strong>：智能家居设备通常配备人机交互界面，如语音识别、手势识别、触摸屏等。这些技术使得用户可以通过语音命令或手势控制设备，实现更便捷的操作体验。</li><li><strong>安全和隐私保护技术</strong>：如数据加密、访问控制、安全认证等。这些技术可以保护用户的个人信息和设备安全，防止被未经授权的访问和攻击。</li></ol><h3 id="计算机网络中IPV4和IPV6有什么区别"><a href="#计算机网络中IPV4和IPV6有什么区别" class="headerlink" title="计算机网络中IPV4和IPV6有什么区别"></a>计算机网络中IPV4和IPV6有什么区别</h3><ol><li>地址空间不同，IPv4中规IP地址长度为32位，而IPv6中IP地址的长度为128。</li><li>路由表大小不同，IPv6的路由表比IPv4小。IPv6的组播支持以及对流的支持要强于IPv4。</li><li>安全性不同，IPv6的安全性高，在使用IPv6的网络时，用户可对网络层的数据进行加密。</li><li>协议扩充不同，IPv6允许协议进行扩充而IPv4不允许。</li></ol><h3 id="介绍一下区块链、云计算"><a href="#介绍一下区块链、云计算" class="headerlink" title="介绍一下区块链、云计算"></a>介绍一下区块链、云计算</h3><p>// to do…</p><h3 id="Flash-存储器的原理是什么"><a href="#Flash-存储器的原理是什么" class="headerlink" title="Flash 存储器的原理是什么"></a>Flash 存储器的原理是什么</h3><p>flash 存储器又称闪存(快闪存储器)，是一种<strong>电可擦可编程只读存储器</strong>的形式，允许在操作中被多次擦或写，EEPROM与高速RAM成为当前最常用且发展最快的两种存储技术。计算机的BIOS、数字照相机等的存储卡中都使用闪存。flash存储器的主要特点是在不加电的情况下能长期保持存储的信息。就其本质而言，flash存储器属于EEPROM(电擦除可编程只读存储器)类型。它既有ROM的特点，又有很高的存取速度，而且易于擦除和重写，功耗很小。</p><h3 id="网络搜索时是直接从服务器获取的吗"><a href="#网络搜索时是直接从服务器获取的吗" class="headerlink" title="网络搜索时是直接从服务器获取的吗"></a>网络搜索时是直接从服务器获取的吗</h3><p>// to do…</p><h3 id="计算机科学中的语法、语义的区别是"><a href="#计算机科学中的语法、语义的区别是" class="headerlink" title="计算机科学中的语法、语义的区别是"></a>计算机科学中的语法、语义的区别是</h3><p>语法关注的是<strong>代码的结构和组织形式</strong>是否正确，而语义关注的是<strong>代码的含义和行为</strong>是否符合预期。正确的语法是编程语言的基础，而正确的语义是确保代码功能正确和可靠的关键。</p><ol><li><strong>语法（Syntax）</strong>：<ul><li>语法指的是编程语言中的规则和结构，用于定义合法的代码格式和组织方式。它关注的是代码的表面形式。</li><li>编程语言的编译器或解释器会根据语法规则对代码进行词法分析和语法分析，以确定代码的结构是否正确。</li></ul></li><li><strong>语义（Semantics）</strong>：<ul><li>语义指的是编程语言中的含义和逻辑，用于描述代码的功能和行为。它关注的是代码的含义、逻辑和执行结果。</li><li>语义规定了代码中各个元素之间的关系和作用，包括变量的赋值、运算符的操作、函数的调用等。</li></ul></li></ol><p>在数理逻辑中，也有类似的概念，例如<strong>语法推出</strong>、<strong>语义推出</strong>等。更一般地，有：</p><blockquote><p>太阳是黑的. ——语法正确,语义错误.<br>太阳是红的. ——语法正确,语义正确.</p></blockquote><h3 id="传感器在物联网中的应用"><a href="#传感器在物联网中的应用" class="headerlink" title="传感器在物联网中的应用"></a>传感器在物联网中的应用</h3><p>（稍微看看就行）</p><p>物联网类型的传感器有温度传感器、光传感器、运动传感器、图像传感器、陀螺仪传感器、距离传感器和心律传感器等。传感器可以采集大量信息，它是许多装备和信息系统必备的信息摄取手段，若无传感器对最初信息的检测、交替和捕获，所有控制与测试都不能实现，所以说，传感器是物联网的基础。</p><h3 id="操作系统中的调度有哪些"><a href="#操作系统中的调度有哪些" class="headerlink" title="操作系统中的调度有哪些"></a>操作系统中的调度有哪些</h3><p>操作系统中的调度分三个层次：高级调度、中级调度、低级调度。</p><p>其中，高级调度又叫<strong>作业调度</strong>。<br>按一定的原则从外存的作业后备队列中挑选一个作业调入内存，并创建进程。每个作业只调入一次，调出一次。作业调入时会建立PCB，调出时才撤销PCB。</p><p>中级调度又叫<strong>内存调度</strong>。<br>内存不够时，可将某些进程的数据调出外存。等内存空闲或者进程需要运行时再重新调入内存。暂时调到外存等待的进程状态为<strong>挂起状态</strong>。被挂起的进程PCB会被组织成<strong>挂起队列</strong>。<br>中级调度会按照某种策略决定将哪个处于挂起状态的进程重新调入内存。一个进程可能会被多次调出、调入内存。</p><p>低级调度又叫<strong>进程调度</strong>。<br>按照某种策略从就绪队列中选取一个进程，将处理机分配给它。进程调度是操作系统中最基本的一种调度，在一般的操作系统中都必须配置进程调度。</p><h3 id="什么是ARP协议"><a href="#什么是ARP协议" class="headerlink" title="什么是ARP协议"></a>什么是ARP协议</h3><p>//to do…<br>地址解析协议，即ARP(Address Resolution Protocol)，是根据 IP 地址获取 MAC 地址的一个 TCP/IP 协议。</p><h3 id="介绍一下bios是什么"><a href="#介绍一下bios是什么" class="headerlink" title="介绍一下bios是什么"></a>介绍一下bios是什么</h3><p>//to do…<br>BIOS 是英文 Basic Input Output System 的缩略词，直译过来后中文名称就是”基本输入输出系统”</p><h3 id="正逻辑和负逻辑的区别"><a href="#正逻辑和负逻辑的区别" class="headerlink" title="正逻辑和负逻辑的区别"></a>正逻辑和负逻辑的区别</h3><p>以高低电平表示两种不同逻辑状态时，有两种定义方法。如果以<strong>高电平表示逻辑1，低电平表示逻辑0</strong>，则称这种表示方法为<strong>正逻辑</strong>。反之，若以高电平表示逻辑0，而以低电平表示逻辑1，则称这种表示方法为负逻辑。</p><h3 id="操作系统提供的功能"><a href="#操作系统提供的功能" class="headerlink" title="操作系统提供的功能"></a>操作系统提供的功能</h3><p>CPU 管理、存储器管理、文件管理、设备管理</p><h3 id="什么是计算机网络"><a href="#什么是计算机网络" class="headerlink" title="什么是计算机网络"></a>什么是计算机网络</h3><p>简单来说，计算机网络是指<strong>一些互相连接的、自治的计算机的集合</strong>。</p><p>或者我们也可以说：</p><blockquote><p>计算机网络主要是由一些<strong>通用的、可编程的硬件互连</strong>而成的，用来<strong>传送多种不同类型的数据</strong>，并能<strong>支持广泛的和日益增长的应用</strong>。</p></blockquote><h3 id="擅长哪个编程语言和编程环境"><a href="#擅长哪个编程语言和编程环境" class="headerlink" title="擅长哪个编程语言和编程环境"></a>擅长哪个编程语言和编程环境</h3><p>不敢说擅长，不过我使用最多的是 C++ 和 Python，Windows 和 Linux 均可。编辑器使用 vscode，plus vim 插件。</p><h3 id="解释一下数据库中的索引"><a href="#解释一下数据库中的索引" class="headerlink" title="解释一下数据库中的索引"></a>解释一下数据库中的索引</h3><p>索引（Index）是高效获取数据的数据结构。</p><p>假设我们现在在一张表上有一个索引，这个索引可以加快查询，具体来说是这样做的：这个索引的属性会按照一定规则排序，然后我们在查找某个具体的元组时就可以使用二分查找加速。</p><p>索引可以提高数据检索效率，降低数据库 IO 成本。但同时也需要额外占用空间。有时候索引占用的空间甚至比数据占用的空间还多。此外，降低更新表的速度。因为数据库不仅要更新数据，还要更新对应的索引信息。</p><p>索引分为<strong>主键索引</strong>和<strong>非主键索引</strong>。以主键创建的索引，叫主键索引。以非主键创建的索引叫非主键索引。</p><p>在 MySQL 中，非主键索引包括<strong>普通索引、唯一索引、全文索引、组合索引</strong>。</p><p>值得一提的是组合索引，在 MySQL 中，组合索引有“最左前缀”的概念。如果处理不当，组合索引将失效。举例来说，我们有组合索引 abc，请想象一颗四层的树，（后略…临场发挥…）</p><p>另外，存在一种叫做“回表”的现象，使用辅助索引查询时，若查询的列在辅助索引树上没有，那么就需要通过该条信息对应的主键，在主键索引树上继续查找。即在两个索引树上进行查找，磁盘 IO 增多，查询速度变慢。（尽量避免回表）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> citizen <span class="keyword">where</span> id_card <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>; <span class="operator">/</span><span class="operator">/</span>回表</span><br></pre></td></tr></table></figure><h3 id="GPS定位技术怎么实现的"><a href="#GPS定位技术怎么实现的" class="headerlink" title="GPS定位技术怎么实现的?"></a>GPS定位技术怎么实现的?</h3><p>GPS 的工作原理，简单来说，是利用几何与物理上一些基本的原理。首先，我们假定卫星的位置已知，而我们又能准确测定我们所在地点A至卫星间的距离，那么A点一定是位于以卫星为中心、所测得距离为半径的圆球上。然后我们又测得点A至另一卫星的距离，则A点一定处在前后两个圆球相交的圆环上（因为两球相交得到一个圆环）。我们还可测得与第三个卫星的距离，就可以确定A点只能是在三个圆球相交的两个点，根据一些地理知识，很容易排除其中一个不合理的位置。当然也可以如法炮制，再测量A点到另一个卫星的距离，也能精确进行定位。因此，要实现精确定位，要解决两个问题</p><ul><li>卫星的准确位置</li><li>卫星至地球上我们所在地的距离</li></ul><h3 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h3><p>（自己组织语言）</p><p>高中生都能理解的公式出发：</p><script type="math/tex; mode=display">\begin{pmatrix}n\\m\end{pmatrix}=\begin{pmatrix}n-1\\m-1\end{pmatrix}+\begin{pmatrix}n-1\\m\end{pmatrix}</script><p>子问题…</p><p>其实按照我个人的经验，编写递归代码就是<strong>把没有发生过的事当作已经发生了</strong>…</p><p>（手撕记忆化搜索）</p><p>针对 AOE，给出一个基于 DAG 上动态规划的算法：</p><script type="math/tex; mode=display">S_i= \begin{cases}\underset{(i,j)\in E}{\overset{}{\mathrm{MAX}}}(S_j+\mathrm{len}(i,j)) & i \ne \mathrm{end} \\0 &i=\mathrm{end}\end{cases}</script><p>汉诺塔…</p><h3 id="总线是什么"><a href="#总线是什么" class="headerlink" title="总线是什么"></a>总线是什么</h3><p>总线(Bus)是计算机<strong>各种功能部件之间传送信息的公共通信干线</strong>，它是由导线组成的传输线束，按照计算机所传输的息种类，计算机的总线可以划分为<strong>数据总线</strong>、<strong>地址总线</strong>和<strong>控制总线</strong>，分别用来传输数据、数据地址和控制信号。总线是一种内部结构，它是cpu、内存、输入、输出设备传递信息的公用通道，主机的各个部件通过总线相连接，<strong>外部设备通过相应的接口电路再与总线相连接</strong>，从而形成了计算机硬件系统。</p><h3 id="文件系统的功能作用"><a href="#文件系统的功能作用" class="headerlink" title="文件系统的功能作用"></a>文件系统的功能作用</h3><p>管理和调度文件的存储空间，提供文件的逻辑结构、物理结构和存储方法；实现文件从标识到实际地址的映射，实现文件的控制操作和存取操作，实现文件信息的共享并提供可靠的文件保密和保护措施，提供文件的安全措施。</p><h3 id="什么是背包算法"><a href="#什么是背包算法" class="headerlink" title="什么是背包算法"></a>什么是背包算法</h3><p>参见背包九讲。</p><h3 id="P问题、NP问题、NP完全问题、NP难问题"><a href="#P问题、NP问题、NP完全问题、NP难问题" class="headerlink" title="P问题、NP问题、NP完全问题、NP难问题"></a>P问题、NP问题、NP完全问题、NP难问题</h3><p>参见： <a href="https://zhuanlan.zhihu.com/p/73953567">https://zhuanlan.zhihu.com/p/73953567</a></p><p>注意，链接文章有一些疏漏，评论区已指出。</p><h3 id="人工智能和机器学习有什么关系"><a href="#人工智能和机器学习有什么关系" class="headerlink" title="人工智能和机器学习有什么关系"></a>人工智能和机器学习有什么关系</h3><p>机器学习是实现人工智能的一种技术手段。人工智能可以利用多种方法和技术来实现，而机器学习是其中一种非常重要的方法。通过机器学习，人工智能系统可以从数据中学习，从而提高自己的性能和智能水平，使其能够更好地执行各种任务。</p><h3 id="对计算机哪个领域方向感兴趣"><a href="#对计算机哪个领域方向感兴趣" class="headerlink" title="对计算机哪个领域方向感兴趣"></a>对计算机哪个领域方向感兴趣</h3><p>其实我个人认为，在有深入的了解前谈兴趣可能会沦为一种“空谈”。</p><p>作为一个跨考生，我接触和做过的大概只有一些基础的算法，做过自己的网页，了解过数据库的知识，并且在备考的过程中学习了网络、计算机组成、操作系统的知识。</p><p>我个人在之前可能会对图像方面比较感兴趣，写过柏林噪声之类的代码。我也从以前的同学那了解到有计算机视觉这个分支领域，据说非常艰深而且竞争激烈。</p><p>我现在的状态的话应该是对各方面都愿意尝试。</p><h3 id="TCP-IP模型有哪些层，每层的协议有什么"><a href="#TCP-IP模型有哪些层，每层的协议有什么" class="headerlink" title="TCP/IP模型有哪些层，每层的协议有什么"></a>TCP/IP模型有哪些层，每层的协议有什么</h3><p>TCP/IP 模型将网络通信分为多个层次，每个层次都有不同的功能和协议。TCP/IP 模型包括四个层次：应用层、运输层、网际层、网络接口层。</p><p>应用层的协议有：HTTP协议、SMTP协议、DNS协议、RTP协议等。<br>运输层的协议有：TCP 和 UDP 协议。<br>网际层的协议有 IP 协议、ARP 协议等。<br>由于 TCP/IP 体系结构为了将不同的网络接口进行互连，因此它的网络接口层并没有规定什么具体的内容，而是旨在提供灵活性，以适应各种网络类型。</p><p><img src="https://bu.dusays.com/2024/03/25/660171080ae17.png" alt="69-1.png"></p><p>IP 协议可以将不同的网络接口互联，并向其上的 TCP 协议和 UDP 协议提供网络互联服务。而 TCP 协议在享受 IP 协议提供的网络互联服务的基础上，可向应用层的相应协议提供可靠传输的服务。UDP 协议在享受 IP 协议提供的网络互联服务的基础上，可向应用层的相应协议提供不可靠传输的服务。IP 协议作为 TCP/IP 体系结构中的核心协议，一方面负责互连不同的网络接口，也就是 IP over Everything；另一方面，为各种网络应用提供服务，也就是 Everything over IP. 在 TCP/IP 协议体系中包含有大量协议，IP 协议和 TCP 协议是其中非常重要的两个协议，因此，用 TCP 和 IP 这两个协议来表示整个协议大家族，常称为 TCP/IP 协议族。</p><p><img src="https://s2.loli.net/2024/03/25/Pujl8QtYdNy2o9f.png" alt="69-2.png"></p><h3 id="简单解释一下编译原理"><a href="#简单解释一下编译原理" class="headerlink" title="简单解释一下编译原理"></a>简单解释一下编译原理</h3><p>编译原理的内容包括编译程序构造的一般原理和基本方法。内容包括语言和文法、词法分析、语法分析、语法制导翻译、中间代码生战、存储管理、代码优化和目标代码生成。</p><h3 id="编译执行和解释执行的区别"><a href="#编译执行和解释执行的区别" class="headerlink" title="编译执行和解释执行的区别"></a>编译执行和解释执行的区别</h3><p>从启动效率来看，解释执行不需要进行编译操作，而编译执行，要经过编译过程。解释执行启动速度更快。</p><p>从运行效率来看，因为编译执行只需要编译一次，以后再运行就无需编译，而解释执行每次都要经过解释过程，所以编译执行效率更高。</p><p>从内存使用方面来看，编译执行需要生成编译后的机器码文件，而解释执行时逐句解释执行，所以解释执行对内存占用更少。</p><p>从跨平台的角度来看，因为解释执行每次可以根据不同的平台进行解释，例如js在linux和windows都可以运行，而C语言在windows下编译后的文件，只能在windows下执行。</p><h3 id="交换机和路由器的区别"><a href="#交换机和路由器的区别" class="headerlink" title="交换机和路由器的区别"></a>交换机和路由器的区别</h3><p>路由器在网络层，路由器根据IP地址寻址，路由器可以处理TCP/IP协议，交换机不可以。交换机根据MAC地址寻址。</p><p>路由器可以把一个IP分配给很多个主机使用，这些主机对外只表现出一个IP。交换机可以把很多主机连起来，这些主机对外各有各的IP.</p><p>集线器、交换机是做端口扩展的，就是扩大局域网(通常都是以太网)的接入点，让局域网可以连进更多的电脑。路由器是用来做网间连接，用来连接不同的网络。</p><h3 id="解释一下云计算"><a href="#解释一下云计算" class="headerlink" title="解释一下云计算"></a>解释一下云计算</h3><p>云计算(cloud computing)是分布式计算的一种，指的是通过网络“云”将巨大的数据计算处理程序分解成无数个小程序，然后，通过多部服务器组成的系统进行处理和分析这些小程序得到结果并返回给用户。</p><h3 id="设计一个存储器需要注意什么"><a href="#设计一个存储器需要注意什么" class="headerlink" title="设计一个存储器需要注意什么"></a>设计一个存储器需要注意什么</h3><p>存储速度、存储容量、CAS延迟时间、内存带宽</p><h3 id="什么是摩尔定律"><a href="#什么是摩尔定律" class="headerlink" title="什么是摩尔定律"></a>什么是摩尔定律</h3><blockquote><p>每隔18至24个月，集成电路中可容纳的晶体管数量将翻一番，而成本却保持不变。</p></blockquote><p>（其他解释，相同的价钱，能买到的…）</p><p>然而，随着技术的不断进步，摩尔定律也面临着一些挑战。由于电子元件尺寸接近原子尺度，制程工艺面临着物理限制，晶体管数量的增长速度已经开始放缓。</p><h3 id="敏捷开发是什么"><a href="#敏捷开发是什么" class="headerlink" title="敏捷开发是什么"></a>敏捷开发是什么</h3><p>敏捷开发以用户的需求进化为核心，采用迭代、循序渐进的方法进行软件开发。在敏捷开发中，软件项目在构建初期被切分成多个子项目，各个子项目的成果都经过测试，具备可视、可集成和可运行使用的特征。<strong>换言之，就是把一个大项目分为多个相互联系，但也可独立运行的小项目，并分别完成，在此过程中软件一直处于可使用状态。</strong></p><h3 id="解释下计算机网络的三握手"><a href="#解释下计算机网络的三握手" class="headerlink" title="解释下计算机网络的三握手"></a>解释下计算机网络的三握手</h3><p>所谓的“三次握手”:为了对每次发送的数据量进行跟踪与协商，确保数据段的发送和接收同步，根据所接收到的数据量而确认数据发送、接收完毕后何时撤消联系，并建立虚连接。</p><h3 id="程序的三个组成部分"><a href="#程序的三个组成部分" class="headerlink" title="程序的三个组成部分"></a>程序的三个组成部分</h3><p>程序号、程序内容、程序结束</p><h3 id="计组中流水线的作用"><a href="#计组中流水线的作用" class="headerlink" title="计组中流水线的作用"></a>计组中流水线的作用</h3><p>（用自己的话讲两句）</p><p>这种工作方式与工厂中的生产流水线十分相似，因此称为流水线技术。</p><p>从本质上讲，流水线技术是一种时间并行技术。</p><h3 id="列举几个机器学习的算法"><a href="#列举几个机器学习的算法" class="headerlink" title="列举几个机器学习的算法"></a>列举几个机器学习的算法</h3><p>决策树算法 · 朴素贝叶斯算法 · 支持向量机算法 · 随机森林算法 · 人工神经网络算法 · Boosting与Bagging算法 · 关联规则算法 </p><h3 id="面向对象和面向过程的区别。"><a href="#面向对象和面向过程的区别。" class="headerlink" title="面向对象和面向过程的区别。"></a>面向对象和面向过程的区别。</h3><p>面向过程<br>优点: 性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源；比如单片机、嵌入式开发、Linux/Unix 等一般采用面向过程开发，性能是最重要的因素。<br>缺点:没有面向对象易维护、易复用、易扩展。</p><p>面向对象<br>优点: 易维护、易复用、易扩展，由于面向对象有封装、继承、多态的特性，可以设计出低耦合的系统，使系统更加灵活、更易于维护。<br>缺点: 性能比面向过程低。</p><h3 id="排序算法相关"><a href="#排序算法相关" class="headerlink" title="排序算法相关"></a>排序算法相关</h3><p>（我真服了初试考过算法为什么复试还要准备啊）</p><p><img src="https://bu.dusays.com/2024/03/26/6602946494542.png" alt="69-6.png"></p><h3 id="冯诺依曼计算机特点"><a href="#冯诺依曼计算机特点" class="headerlink" title="冯诺依曼计算机特点"></a>冯诺依曼计算机特点</h3><p>冯诺依曼机的组成: 存储器+运算器+控制器+输入设备+输出设备。<br>其主要特征为: 数制采用二进制；存储程序；计算机应该按照程序顺序执行。</p><h3 id="对搜索引擎有什么了解，举例"><a href="#对搜索引擎有什么了解，举例" class="headerlink" title="对搜索引擎有什么了解，举例"></a>对搜索引擎有什么了解，举例</h3><p>所谓搜索引擎，就是<strong>根据用户需求与一定算法</strong>，运用<strong>特定策略从互联网检索出制定信息反馈给用户</strong>的一门<strong>检索技术</strong>。搜索引擎依托于多种技术，如爬虫技术、检索排序技术、网页处理技术、大数据处理技术、自然语言处理技术等，为信息检索用户提供快速、高相关性的信息服务。搜索引擎技术的核心模块一般包括爬虫、索引、检索和排序等，同时可添加其他一系列辅助模块，以为用户创造更好的网络使用环境。百度、谷歌等。</p><h3 id="软件的组成部分有什么"><a href="#软件的组成部分有什么" class="headerlink" title="软件的组成部分有什么"></a>软件的组成部分有什么</h3><p>软件由程序、数据和文档三部分组成</p><h3 id="顺序表和链表的区别"><a href="#顺序表和链表的区别" class="headerlink" title="顺序表和链表的区别"></a>顺序表和链表的区别</h3><p>顺序表(顺序存储)<br>优点:支持随机存取、存储密度高<br>缺点:大片连续空间分配不方便，改变容量不方便</p><p>链表(链式存储)<br>优点:离散的小空间分配方便,改变容量方便<br>缺点:不可随机存取，存储密度低</p><h3 id="操作系统中为什么要引入文件管理"><a href="#操作系统中为什么要引入文件管理" class="headerlink" title="操作系统中为什么要引入文件管理"></a>操作系统中为什么要引入文件管理</h3><p>文件管理是操作系统五大职能之一，主要涉及文件的逻辑组织和物理组织，目录的结构和管理。所谓文件管理，就是操作系统中实现文件统一管理的一组软件、被管理的文件以及为实施文件管理所需要的一些数据结构的总称(是操作系统中负责存取和管理文件信息的机构)从系统角度来看，文件系统是对文件存储器的存储空间进行组织，分配和回收，负责文件的存储检索，共享和保护。从用户角度来看，文件系统主要是实现”按名取存”，文件系统的用户只要知道所需文件的文件名，就可存取文件中的信息，而无需知道这些文件究竟存放在什么地方。</p><p>（上面看着有些碍眼。。。）</p><ol><li>实现按文件名存取文件信息</li><li>为用户提供统一友好的接口</li><li>实施对文件和文件目录的管理</li><li>文件存储器空间的分配与回收</li><li>提供有关文件的共享和保护。</li></ol><h3 id="说下软件工程的生命周期"><a href="#说下软件工程的生命周期" class="headerlink" title="说下软件工程的生命周期"></a>说下软件工程的生命周期</h3><p>是软件的产生直到报废或停止使用的生命周期。软件生命周期内有<strong>问题定义、可行性分析、总体描述、系统设计、编码、调试和测试、验收与运行、维护升级到废弃</strong>等阶段，也有将以上阶段的活动组合在内的迭代阶段，即迭代作为生命周期的阶段。</p><h3 id="什么是多继承"><a href="#什么是多继承" class="headerlink" title="什么是多继承"></a>什么是多继承</h3><p>多继承即一个子类可以有多个父类，它继承了多个父类的特性。</p><h3 id="简述指令周期的数据流"><a href="#简述指令周期的数据流" class="headerlink" title="简述指令周期的数据流"></a>简述指令周期的数据流</h3><p>取指周期:<br>（从主存中取出指令代码并交到IR）<br>PC-&gt;MAR<br>MAR -&gt; 地址总线<br>地址总线 -&gt; 主存<br>CU -&gt; 主存<br>主存 -&gt; 数据总线<br>数据总线 -&gt; MDR<br>MDR -&gt; IR</p><p>间址周期：<br>取操作数的有效地址</p><p>执行周期：<br>数据流形态各异，具体问题具体分析</p><p>中断周期：<br>核心任务是处理中断请求</p><h3 id="时钟周期、机器周期、指令周期"><a href="#时钟周期、机器周期、指令周期" class="headerlink" title="时钟周期、机器周期、指令周期"></a>时钟周期、机器周期、指令周期</h3><p><img src="https://s2.loli.net/2024/03/26/TdO9EPvw5gzesRV.png" alt="69-7.png"></p><h3 id="进程之间的高级通信"><a href="#进程之间的高级通信" class="headerlink" title="进程之间的高级通信"></a>进程之间的高级通信</h3><p><strong>共享存储</strong>：<br>在通信的进程之间存在一块可<strong>直接访问的内存空间</strong>，通过对这片共享空间进行读/写操作实现进程之间的信息交换，共享存储分为<strong>基于数据结构的</strong>共享和基于<strong>存储区</strong>的共享。</p><p><strong>消息传递</strong>：<br>进程间的数据交换是以格式化的消息(Message)为单位。进程通过系统提供的<strong>发送消息和接收消息两个原语</strong>进行数据交换。进程可以通过<strong>消息缓冲队列</strong>直接通信，也可以通过中间<strong>实体信箱</strong>进行间接通信。</p><p><strong>管道通信</strong>：<br>管道是指用于连接一个读进程和一个写进程以实现它们之间的通信的一个共享文件，又名pipe文件。管道机制必须提供互斥，同步和确定对方存在的能力。管道只能采用<strong>半双工通信</strong>，要实现父子进程双方互动通信，需要定义两个管道。</p><h3 id="什么是操作系统里的‘锁’"><a href="#什么是操作系统里的‘锁’" class="headerlink" title="什么是操作系统里的‘锁’"></a>什么是操作系统里的‘锁’</h3><p>为了保证数据的一致性，在多线程编程中我们会用到锁，使得在某一时间点，只有一个线程进入临界区代码。信号量机制就是实现进程同步与互斥的机制。通过PV操作。</p><h3 id="说说文件的逻辑结构"><a href="#说说文件的逻辑结构" class="headerlink" title="说说文件的逻辑结构"></a>说说文件的逻辑结构</h3><p>无结构文件(流式文件):将数据按顺序组织记录,以字节为单位。</p><p>有结构文件(记录式文件):</p><ul><li>顺序文件:可以顺序存储或以链表形式存储。</li><li>索引文件:索引表本身是定长记录的顺序文件。</li><li>索引顺序文件:将顺序文件中的记录分为若干组，为文件建立一张索引表，一组记录对应一个索引表项。可根据需要建立多级索引。</li></ul><h3 id="根据网络的覆盖范围将网络分类"><a href="#根据网络的覆盖范围将网络分类" class="headerlink" title="根据网络的覆盖范围将网络分类"></a>根据网络的覆盖范围将网络分类</h3><p>计算机网络按覆盖范围分类可分为广域网、城域网、局域网。</p><ol><li>局域网是将小区域内的各种通信设备互连在一起的通信网络。使用广播技术</li><li>广域网特点(使用交换技术,是点对点式网络)<ul><li>覆盖的地理区域大，通常在几公里至几千、几万公里，网络可跨越市、地区、省、国家、洲洋乃至全球。</li><li>广域网连接常借用公用网络</li><li>传输速率比较低</li><li>网络拓扑结构复杂</li></ul></li><li>城域网特点<br>是在一个城市范围内所建立的计算机通信网，简称MAN。这是80年代末，在LAN的发展基础上提出的，在技术上与LAN有许多相似之处，而与广域网(WAN)区别较大。<ul><li>传输速率高</li><li>用户投入少，接入简单</li><li>技术先进、安全</li><li>大多采用以太网技术</li></ul></li></ol><p>是否采用分组存储转发与路由选择机制是点对点式网络与广播式网络的重要区别。</p><h3 id="拥塞控制在哪层-具体说明。"><a href="#拥塞控制在哪层-具体说明。" class="headerlink" title="拥塞控制在哪层?具体说明。"></a>拥塞控制在哪层?具体说明。</h3><p><strong>拥塞控制在传输层</strong>，而且是在使用TCP协议的情况下。拥塞控制是指<strong>防止过多的数据注入网络</strong>，以使网络中的路由器或链路不致过载。拥塞控制主要是使用<strong>慢开始</strong>和<strong>拥塞避免</strong>组合和<strong>快重传</strong>和<strong>快恢复</strong>组合。</p><p>慢开始是<strong>避免新建立的连接一开始就大量发送数据包，只能根据网络情况逐步增加每次发送的数据量</strong>。当新建连接时，拥塞窗口初始化为1个最大报文段(MSS)大小，发送端开始按照拥塞窗口大小发送数据，每当有一个报文段被确认，cwnd就增加至多1个MSS大小。用这样的方法来逐步增大拥塞窗口。</p><p>拥塞避免是当拥塞窗口增大到一个规定的<strong>慢开始门限</strong>，然后改用拥塞避免算法，拥塞窗口每经过一个往返时延就增加一个MSS大小而不是加倍，使拥塞窗口按线性规律缓慢增长。当出现一次超时，令慢开始门限等于当前拥塞窗口一半，然后把拥塞窗口重新设置为1。</p><p>快重传和快恢复算法是对慢开始和拥塞算法的改进。</p><p>快重传是当<strong>发送方连续收到三个重复的ACK报文时，直接重传对方尚未收到的报文段</strong>，而不必等待那个报文段设置的重传计时器超时。</p><p>快恢复是当<strong>发送方连续收到三个重复的ACK报文时，把慢开始门限设置为出现拥塞时发送方拥塞窗口一半，然后拥塞窗口开始线性增长</strong>。</p><p>这几种算法是同时应用在拥塞控制机制之中的，当发送方检测到超时时，就采用慢开始和拥塞避免，当发送方接收到冗余ACK时，就采用快重传和快恢复。</p><h3 id="OSI模型中流量控制在哪些层实现"><a href="#OSI模型中流量控制在哪些层实现" class="headerlink" title="OSI模型中流量控制在哪些层实现"></a>OSI模型中流量控制在哪些层实现</h3><p>数据链路层，网络层，传输层。</p><h3 id="解释PPP协议-在哪一层的"><a href="#解释PPP协议-在哪一层的" class="headerlink" title="解释PPP协议,在哪一层的"></a>解释PPP协议,在哪一层的</h3><p>PPP协议是使用<strong>串行线路通信的面向字节</strong>的协议，该协议应用在直接连接两个结点的链路上。是从SLIP协议的基础上发展而来的，既可以在异步线路上传输，也可以在同步线路上使用。在数据链路层。</p><h3 id="奈式准则和香农定理说明什么"><a href="#奈式准则和香农定理说明什么" class="headerlink" title="奈式准则和香农定理说明什么"></a>奈式准则和香农定理说明什么</h3><p>在假定的理想条件下，为避免码间串扰，码元传输速率是有极限的。</p><p><img src="https://bu.dusays.com/2024/03/26/6602c823aa134.png" alt="69-8.png"></p><p>香农定理得出信道的极限数据传输速率与带宽，信噪比有关。</p><h3 id="系统调用的过程"><a href="#系统调用的过程" class="headerlink" title="系统调用的过程"></a>系统调用的过程</h3><p>系统调用把应用程序的请求传给内核，调用相应的的内核函数完成所需的处理，将处理结果返回给应用程序。</p><h2 id="人文、心理、开放性问题"><a href="#人文、心理、开放性问题" class="headerlink" title="人文、心理、开放性问题"></a>人文、心理、开放性问题</h2><p>1、你对团队精神有什么看法。</p><p>2、你读过哪些书,除了专业课的。</p><blockquote><p>课外闲书吗？当然四大名著是看过的，水浒三国，红楼西游，都看过，另外还有比如《三侠五义》《巴黎圣母院》《月亮与六便士》《局外人》？大学里我记得，看过余华的一些，还有…《海边的卡夫卡》《维荣之妻》《斜阳》？要说最影响我审美的，应该是初中小学时候，看的曹文轩的书，《草房子》和《青铜葵花》，《根鸟》，印象都蛮深的。<br>最近有在读的是《都柏林人》和一本西域绘画的本子，上面是敦煌藏经洞里的一些画。里面的一些内容回答了我多年的疑惑，地藏十王图，上面有一七、二七、…一直到六七的过程，什么“一七过秦广王”，后来了解到传说中秦广王和南京的紫金山也有很多联系。</p></blockquote><p>3、研究生阶段的计划是什么。</p><p>4、大学有什么遗憾?</p><p>5、家里最重要的人是谁?</p><p>6、你对未来生活的规划是什么?</p><p>7、怎么看待成绩不如你的人奖学金比你高?</p><p>8、在学术中你觉得什么是最重要的?</p><p>9、考上研究生之后你有什么计划?</p><p>10、大学里最遗憾的事情是什么?</p><p>11、说下大学参加的社会实践和科技实践。</p><p>12、你为什么选择考□大学?</p><p>13、你觉得□□这个城市怎么样?</p><p>14、你参加过什么有关于计算机方面的比赛?</p><p>15、你本科的研究方向是什么?</p><p>16、你的本科毕业设计方向是什么?</p><p>17、如果专业跨度比较大,你该怎么面对?</p><p>18、你在编码过程中遇到 bug 或者困难你是怎么解决的?</p><blockquote><p>对于短的代码，我主要是看、在草稿纸上想。当然我知道有 debugger 之类的东西，但可能是高中遗留下来的习惯，我倾向于自己先检查是不是哪里的代码逻辑有问题。对于长的代码，一般可以采用增量开发的方法，写一段代码就编译测试一下，这样可以避免很多 bug 一齐爆发。</p></blockquote><h2 id="英语问题"><a href="#英语问题" class="headerlink" title="英语问题"></a>英语问题</h2><p>你知道什么传统文化?</p><p>数据库有什么功能?</p><p>什么是AR技术?</p><p>什么是数据结构?</p><p>中国社会面临哪些挑战?</p><p>c与java有什么区别?</p><p>互联网对生活的改变?</p><p>你想去哪里旅行?</p><p>你最喜欢的书是什么?</p><p>你对网上购物有什么看法?</p><p>本科期间学过什么技术?</p><p>大学里最难忘的经历?</p><p>你最崇拜的人?</p><p>你怎么看待网上阅读?</p><p>你对图灵有什么了解?</p><p>什么是面向对象的方法(Object-Oriented Method)?</p><p>你羡慕的品格是什么?</p><p>你怎么面对批评?</p><p>专业自己选的还是父母选的?</p><p>用英语介绍一下你的专业。</p><p>在你的专业方面有什么计划?</p><p>你对人工智能有什么了解?</p><p>请你解释一下深度学习。</p><p>为什么有的人喜欢收集邮票?</p><p>描述一下TCP/IP协议?</p><p>保护环境有什么方法?</p><h2 id="计网杂项知识点"><a href="#计网杂项知识点" class="headerlink" title="计网杂项知识点"></a>计网杂项知识点</h2><p><img src="https://bu.dusays.com/2024/03/25/66018ed740336.png" alt="69-3.png"></p><p><img src="https://bu.dusays.com/2024/03/25/66018ed37cfa7.png" alt="69-4.png"></p><p><img src="https://bu.dusays.com/2024/03/25/66018ed7143ac.png" alt="69-5.png"></p><h2 id="后日谈"><a href="#后日谈" class="headerlink" title="后日谈"></a>后日谈</h2><p>评价：盲人摸象。</p><p>首先（也是最重要的一点），并没有问所谓的“人文、心理问题”，都是问的专业问题。每个面试考生的时间是有限的。</p><p>桌子上一堆题，装在袋子里让你随便选一个。</p><p>我抽的题目是计算机组成原理的，没有计网的。亏我过了两遍计网知识点。</p><p>此外还有一些别的问题，问了我 C++ 和离散数学、云计算相关的东西。云计算的问题我就直接背的八股。</p><p>英语问题问了 what is operating system ? 我整个愣住，总不能说 operating system is a system to operate your computer 吧？后来换了一个问题，总算答上来。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理（续）</title>
      <link href="/posts/60249dd6.html"/>
      <url>/posts/60249dd6.html</url>
      
        <content type="html"><![CDATA[<p>前情提要：因为 <a href="https://loveofpeach.github.io/posts/aae04aa8.html">计算机组成原理笔记</a> 页面内容太多了，会把平板手机卡崩，故需要迁移一部分内容到新的文章。</p><h2 id="主存储器与-CPU-的连接"><a href="#主存储器与-CPU-的连接" class="headerlink" title="主存储器与 CPU 的连接"></a>主存储器与 CPU 的连接</h2><div class="row"><iframe src="https://drive.google.com/file/d/1BWTx3WuHkZi5HVfQCjAEdpgcvdYsOPQG/preview" style="width:100%; height:550px"></iframe></div><h2 id="双端口-RAM-和多模块存储器"><a href="#双端口-RAM-和多模块存储器" class="headerlink" title="双端口 RAM 和多模块存储器"></a>双端口 RAM 和多模块存储器</h2><div class="row"><iframe src="https://drive.google.com/file/d/1mS5W_kXsHYv4HzKXw1bvLb4fopaJr4SC/preview" style="width:100%; height:550px"></iframe></div><h2 id="磁盘存储器"><a href="#磁盘存储器" class="headerlink" title="磁盘存储器"></a>磁盘存储器</h2><div class="row"><iframe src="https://drive.google.com/file/d/1qgxBUYVMg0lM0AhSG59-OhbPeb48rKRu/preview" style="width:100%; height:550px"></iframe></div><h2 id="固态硬盘SSD"><a href="#固态硬盘SSD" class="headerlink" title="固态硬盘SSD"></a>固态硬盘SSD</h2><div class="row"><iframe src="https://drive.google.com/file/d/1B5SUZXO2_WQ3MTK4H-Q6mOUrd6cDL_2r/preview" style="width:100%; height:550px"></iframe></div><h2 id="Cache的基本概念和原理"><a href="#Cache的基本概念和原理" class="headerlink" title="Cache的基本概念和原理"></a>Cache的基本概念和原理</h2><div class="row"><iframe src="https://drive.google.com/file/d/1rvS6lf3WPzXW_5hmpkYPdjcm8hJ_G4jD/preview" style="width:100%; height:550px"></iframe></div><h2 id="Cache和主存的映射方式"><a href="#Cache和主存的映射方式" class="headerlink" title="Cache和主存的映射方式"></a>Cache和主存的映射方式</h2><div class="row"><iframe src="https://drive.google.com/file/d/1SY1xcgw2cOMOQk6kCgm8_WlYJu1heQEP/preview" style="width:100%; height:550px"></iframe></div><h2 id="Cache替换算法"><a href="#Cache替换算法" class="headerlink" title="Cache替换算法"></a>Cache替换算法</h2><div class="row"><iframe src="https://drive.google.com/file/d/13Hg5u2orlNqmmng84XNqhVpSWQ5nJ51i/preview" style="width:100%; height:550px"></iframe></div><h2 id="Cache写策略"><a href="#Cache写策略" class="headerlink" title="Cache写策略"></a>Cache写策略</h2><div class="row"><iframe src="https://drive.google.com/file/d/1Wk5Z7auWNqxuXbQB1btoNkEUzGGC9I_c/preview" style="width:100%; height:550px"></iframe></div><h2 id="页式存储"><a href="#页式存储" class="headerlink" title="页式存储"></a>页式存储</h2><div class="row"><iframe src="https://drive.google.com/file/d/137WPNTx58o9FGx_EszOrEpDtLyXwzcEG/preview" style="width:100%; height:550px"></iframe></div><h2 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h2><div class="row"><iframe src="https://drive.google.com/file/d/1zBuqftRjNMsWyTuufPXMAjoEa5LHkgYF/preview" style="width:100%; height:550px"></iframe></div><h2 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h2><div class="row"><iframe src="https://drive.google.com/file/d/1JVn83ZOEKRO_SLa6w2wx8UHTPGOlplwX/preview" style="width:100%; height:550px"></iframe></div><h2 id="拓展操作码指令格式"><a href="#拓展操作码指令格式" class="headerlink" title="拓展操作码指令格式"></a>拓展操作码指令格式</h2><div class="row"><iframe src="https://drive.google.com/file/d/1hLkg2BpR69raxxC-neaOnqtzS_B4_tGV/preview" style="width:100%; height:550px"></iframe></div><h2 id="指令寻址"><a href="#指令寻址" class="headerlink" title="指令寻址"></a>指令寻址</h2><div class="row"><iframe src="https://drive.google.com/file/d/1yiOMO0JGQk65hQcRaZl9c-uPpQr2GI_t/preview" style="width:100%; height:550px"></iframe></div><h2 id="数据寻址"><a href="#数据寻址" class="headerlink" title="数据寻址"></a>数据寻址</h2><div class="row"><iframe src="https://drive.google.com/file/d/174_mKKWe0tHTwdDJrB81YfYNIrNydla7/preview" style="width:100%; height:550px"></iframe></div><h2 id="数据寻址2-偏移寻址"><a href="#数据寻址2-偏移寻址" class="headerlink" title="数据寻址2_偏移寻址"></a>数据寻址2_偏移寻址</h2><div class="row"><iframe src="https://drive.google.com/file/d/1M3eYizAc5-u3ZG6ebwnsy7dAmicFvvrm/preview" style="width:100%; height:550px"></iframe></div><h2 id="数据寻址3-堆栈寻址"><a href="#数据寻址3-堆栈寻址" class="headerlink" title="数据寻址3_堆栈寻址"></a>数据寻址3_堆栈寻址</h2><p><img src="https://bu.dusays.com/2024/03/24/6600343b427af.jpg" alt="4.2_4_数据寻址3_堆栈寻址-1.jpg"></p><p><img src="https://bu.dusays.com/2024/03/24/6600343ba41cb.jpg" alt="4.2_4_数据寻址3_堆栈寻址-2.jpg"></p><p><img src="https://bu.dusays.com/2024/03/24/6600343bc15d8.jpg" alt="4.2_4_数据寻址3_堆栈寻址-3.jpg"></p><p><img src="https://bu.dusays.com/2024/03/24/6600343bcdb3b.jpg" alt="4.2_4_数据寻址3_堆栈寻址-4.jpg"></p><p><img src="https://bu.dusays.com/2024/03/24/6600343bc899b.jpg" alt="4.2_4_数据寻址3_堆栈寻址-5.jpg"></p><h2 id="高级语言与机器级代码之间的对应"><a href="#高级语言与机器级代码之间的对应" class="headerlink" title="高级语言与机器级代码之间的对应"></a>高级语言与机器级代码之间的对应</h2><div class="row"><iframe src="https://drive.google.com/file/d/10gUeyOGBntKlpobW8bDlkTQCCOmqsFZj/preview" style="width:100%; height:550px"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库应试笔记</title>
      <link href="/posts/3beded87.html"/>
      <url>/posts/3beded87.html</url>
      
        <content type="html"><![CDATA[<p>大意了，没有闪。</p><p>之前学习的数据库偏实践，还不足以应付考试。</p><p>另外应该是能进复试的。</p><p><img src="https://bu.dusays.com/2024/02/28/65df581912988.gif" alt="67-1.gif"></p><h2 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h2><div class="row"><iframe src="https://drive.google.com/file/d/1MgKC66v1yFREuq8J9-ZNsv2sw7nBug5n/preview" style="width:100%; height:550px"></iframe></div><h2 id="关系模型、关系代数"><a href="#关系模型、关系代数" class="headerlink" title="关系模型、关系代数"></a>关系模型、关系代数</h2><div class="row"><iframe src="https://drive.google.com/file/d/1T0zobWPekLkp-Meae_NZfCVm4f9ysnuM/preview" style="width:100%; height:550px"></iframe></div><h2 id="关系代数的形式定义"><a href="#关系代数的形式定义" class="headerlink" title="关系代数的形式定义"></a>关系代数的形式定义</h2><div class="row"><iframe src="https://drive.google.com/file/d/1fQdEWNRhrZ2jRcscnzKz3ynzPH60Hyqy/preview" style="width:100%; height:550px"></iframe></div><p>订正：PDF 的最后，教材上的答案没有疏漏，是我看不仔细。⋈符号下面没有东西，则默认为自然连接。</p><h2 id="函数依赖及范式"><a href="#函数依赖及范式" class="headerlink" title="函数依赖及范式"></a>函数依赖及范式</h2><div class="row"><iframe src="https://drive.google.com/file/d/1lWuvR8Jq0V0peF1rKsqzmcB1RqIb75Yx/preview" style="width:100%; height:550px"></iframe></div><h2 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h2><iframe  id="ppt"  width="100%"  onload="autoChange()"  src="https://onedrive.live.com/embed?resid=C7419D744EAAFF4C%214404&authkey=!AK_wSBOdDiSxrVg&em=2"  frameborder="0"></iframe><script>  function autoChange() {    let ifm = document.getElementById("ppt");    ifm.height = (ifm.clientWidth / 16) * 9 + 24;  }  window.onresize = autoChange;</script><h2 id="存储过程和触发器"><a href="#存储过程和触发器" class="headerlink" title="存储过程和触发器"></a>存储过程和触发器</h2><iframe  id="ppt2"  width="100%"  onload="autoChange2()"  src="https://onedrive.live.com/embed?resid=C7419D744EAAFF4C%214405&authkey=!AJBmC8YOG80Huj8&em=2"  frameborder="0"></iframe><script>  function autoChange2() {    let ifm = document.getElementById("ppt2");    ifm.height = (ifm.clientWidth / 16) * 9 + 24;  }  window.onresize = autoChange;</script><center><font color="red">- - - - - AIGC - - - - -</font></center><p><strong>问：</strong><br>sqlserver有存储过程的概念，mysql有吗</p><p><strong>答：</strong><br>是的，MySQL也有存储过程的概念，类似于SQL Server。存储过程是一组经过预编译并存储在数据库中的SQL语句，它们可以被视为一种数据库对象。存储过程可以接受参数、执行SQL查询、包含条件逻辑和循环，还可以在应用程序和数据库之间提供更高的安全性和性能。</p><p>在MySQL中，你可以使用<code>CREATE PROCEDURE</code>语句来定义存储过程。存储过程的创建和调用与其他关系型数据库系统中的类似。</p><p>一个简单的MySQL存储过程创建示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sample_procedure()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 存储过程的SQL语句</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> your_table;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>要调用存储过程，可以使用<code>CALL</code>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> sample_procedure();</span><br></pre></td></tr></table></figure><p>这是一个简单的例子，实际上，存储过程可以包含更复杂的逻辑和多个SQL语句。</p><p><strong>问：</strong><br>上面的代码中，DELIMITER 是什么</p><p><strong>答：</strong><br>在MySQL中，<code>DELIMITER</code>是一个指令，用于更改语句的结束符。默认情况下，MySQL使用分号<code>;</code>作为语句的结束符。但是，在存储过程和触发器等复合语句中，会包含多个SQL语句，因此需要使用<code>DELIMITER</code>来更改结束符，以便正确解析整个存储过程或触发器的定义。</p><p>在上面的例子中，<code>DELIMITER //</code> 表示将语句结束符更改为双斜杠<code>//</code>。这样，在存储过程的定义中，就可以使用分号作为每个SQL语句的结束符，而不会导致MySQL在存储过程体中认为分号是语句结束。</p><p><code>DELIMITER ;</code>表示将结束符还原为默认的分号。这样，后续的SQL语句在执行时将再次使用分号作为结束符。</p><center><font color="red">- - - - - AIGC END - - - - -</font></center><p>接下来验证上述 AIGC ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0</span> <span class="operator">|</span> March7th   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Natasha    <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> silverwolf <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> xiaomei    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lumine     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> huohuo     <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> ai         <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> Kafka      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">procedure</span> my_procedure()</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">begin</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> delimiter ;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">call</span> my_procedure();</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0</span> <span class="operator">|</span> March7th   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Natasha    <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> silverwolf <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> xiaomei    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lumine     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> huohuo     <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> ai         <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> Kafka      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><center><font color="red">- - - - - AIGC - - - - -</font></center><p><strong>问：</strong><br>介绍一下sqlserver的触发器机制</p><p><strong>答：</strong><br>在 SQL Server 中，触发器是一种特殊类型的存储过程，它会在数据库表上的特定事件（例如插入、更新或删除操作）发生时自动执行。触发器允许开发者在数据库中实现某些自动化的行为，无需手动触发。以下是 SQL Server 触发器的一般特性：</p><ol><li><strong>事件触发：</strong> 触发器与特定的数据库表相关联，并在该表上的特定事件（INSERT、UPDATE、DELETE）发生时被触发。</li><li><strong>逐行操作：</strong> 触发器通常逐行操作，即对每一行的变化都触发一次，以执行相关的逻辑。</li><li><strong>分为两类：</strong> SQL Server 触发器分为两类：AFTER触发器（在触发事件之后执行）和INSTEAD OF触发器（代替触发事件的默认行为执行）。</li><li><strong>多事件支持：</strong> 一个表可以拥有多个触发器，每个触发器关联到表的不同事件，如INSERT、UPDATE、DELETE。</li><li><strong>嵌套触发器：</strong> 触发器可以是嵌套的，即一个触发器的执行可以导致另一个触发器的调用。</li><li><strong>引用关键字：</strong> 触发器可以使用<code>INSERTED</code>和<code>DELETED</code>虚拟表，这些表包含了由触发事件引起的行的新值和旧值。</li></ol><p>一个简单的示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> example_trigger</span><br><span class="line"><span class="keyword">ON</span> your_table</span><br><span class="line">AFTER <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 触发器逻辑，可以引用 INSERTED 和 DELETED 表</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>此触发器在<code>your_table</code>表上的任何插入、更新或删除后触发，允许你执行相应的逻辑。触发器提供了一种有效的方法，通过在数据库引擎级别执行代码，对表上的事件作出响应。</p><p><strong>问：</strong><br>详细介绍一下sqlserver 的INSTEAD OF触发器</p><p><strong>答：</strong><br>在 SQL Server 中，<code>INSTEAD OF</code>触发器是一种特殊类型的触发器，与<code>AFTER</code>和<code>BEFORE</code>触发器不同，它不是在触发事件之前或之后执行，而是代替触发事件的默认行为执行。主要应用于视图上的INSERT、UPDATE、DELETE等操作，允许自定义逻辑来替代默认的数据操作行为。</p><p>以下是<code>INSTEAD OF</code>触发器的主要特性：</p><ol><li><p><strong>替代默认操作：</strong><code>INSTEAD OF</code>触发器允许在触发事件发生时代替默认的数据操作行为，例如，替代视图上的INSERT、UPDATE、DELETE操作。</p></li><li><p><strong>对视图的支持：</strong> 通常，<code>INSTEAD OF</code>触发器常用于与视图关联的表，以允许在视图上执行的数据修改操作。</p></li><li><p><strong>自定义逻辑：</strong> 可以在<code>INSTEAD OF</code>触发器中包含自定义的逻辑，例如插入、更新、删除数据之前的验证、转换等。</p></li><li><p><strong>使用<code>INSERTED</code>和<code>DELETED</code>：</strong> 与<code>AFTER</code>和<code>BEFORE</code>触发器类似，<code>INSTEAD OF</code>触发器也可以使用<code>INSERTED</code>和<code>DELETED</code>虚拟表来引用新插入和被删除的数据。</p></li></ol><p>一个简单的<code>INSTEAD OF</code>触发器的示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> instead_of_trigger</span><br><span class="line"><span class="keyword">ON</span> your_view</span><br><span class="line">INSTEAD <span class="keyword">OF</span> <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 自定义逻辑，替代默认的数据操作</span></span><br><span class="line">    <span class="comment">-- 使用 INSERTED 表引用新插入的数据</span></span><br><span class="line">    <span class="comment">-- 使用 DELETED 表引用被删除的数据</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>此触发器在<code>your_view</code>视图上的插入、更新或删除操作时执行，允许你根据需要完全自定义数据修改的行为。</p><center><font color="red">- - - - - AIGC END - - - - -</font></center><p><br></p><center><font color="red">- - - - - AIGC - - - - -</font></center><p><strong>问：</strong><br>介绍一下mysql的触发器机制</p><p><strong>答：</strong><br>MySQL的触发器（Triggers）是与表相关联的一种特殊的存储过程，它会在表上的特定事件（INSERT、UPDATE、DELETE）发生时自动执行。以下是MySQL触发器的一般特性：</p><ol><li><p><strong>事件触发：</strong> 触发器与特定表关联，并在表上的特定事件发生时被触发，例如INSERT、UPDATE、DELETE。</p></li><li><p><strong>逐行操作：</strong> 触发器通常逐行操作，即对每一行的变化都触发一次，执行相关的逻辑。</p></li><li><p><strong>BEFORE和AFTER触发器：</strong> MySQL支持BEFORE和AFTER触发器。BEFORE触发器在触发事件执行之前执行，而AFTER触发器在触发事件执行之后执行。</p></li><li><p><strong>OLD和NEW别名：</strong> 触发器可以使用OLD和NEW别名引用旧值和新值。比如，在UPDATE触发器中，OLD表示原始值，NEW表示更新后的值。</p></li><li><p><strong>多事件支持：</strong> 一个表可以有多个触发器，每个触发器可以关联到表的不同事件。</p></li><li><p><strong>不支持INSTEAD OF触发器：</strong> 不像某些数据库系统（如SQL Server），MySQL不支持INSTEAD OF触发器。MySQL中的BEFORE触发器在事件发生前执行，AFTER触发器在事件发生后执行。</p></li></ol><p>一个简单的MySQL触发器的创建示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> example_trigger</span><br><span class="line">AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> your_table</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 触发器逻辑，可以使用NEW别名引用新插入的行</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>此触发器在<code>your_table</code>表上的任何插入后触发，允许你执行相关的逻辑。触发器提供了在数据库引擎级别执行代码以响应表上事件的手段。</p><center><font color="red">- - - - - AIGC END - - - - -</font></center><p>下面放一个很长的例子，演示 mysql 的触发器。</p><p>设计一个触发器，当在member表中插入或更新记录时，自动将math列的值限制在0到100之间。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0</span> <span class="operator">|</span> March7th   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Natasha    <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> silverwolf <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> xiaomei    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lumine     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> huohuo     <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> ai         <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> Kafka      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field  <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> math   <span class="operator">|</span> <span class="type">float</span>       <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> e_date <span class="operator">|</span> datetime    <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> triggers;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="comment">-- 创建 BEFORE INSERT 触发器</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> before_insert_trigger</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> <span class="keyword">member</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     IF NEW.math <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">AND</span> (NEW.math <span class="operator">&lt;</span> <span class="number">0</span> <span class="keyword">OR</span> NEW.math <span class="operator">&gt;</span> <span class="number">100</span>) <span class="keyword">THEN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>         SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;45000&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>         <span class="keyword">SET</span> MESSAGE_TEXT <span class="operator">=</span> <span class="string">&#x27;Math score must be between 0 and 100&#x27;</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     <span class="keyword">END</span> IF;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> </span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="comment">-- 创建 BEFORE UPDATE 触发器</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> before_update_trigger</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> BEFORE <span class="keyword">UPDATE</span> <span class="keyword">ON</span> <span class="keyword">member</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     IF NEW.math <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">AND</span> (NEW.math <span class="operator">&lt;</span> <span class="number">0</span> <span class="keyword">OR</span> NEW.math <span class="operator">&gt;</span> <span class="number">100</span>) <span class="keyword">THEN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>         SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;45000&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>         <span class="keyword">SET</span> MESSAGE_TEXT <span class="operator">=</span> <span class="string">&#x27;Math score must be between 0 and 100&#x27;</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     <span class="keyword">END</span> IF;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span>; </span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> delimiter ;</span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> (id, name, math) <span class="keyword">values</span> (<span class="number">9</span>, <span class="string">&#x27;nozomi&#x27;</span>, <span class="number">80</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> (id, name, math) <span class="keyword">values</span> (<span class="number">10</span>, <span class="string">&#x27;xiangling&#x27;</span>, <span class="number">150</span>);</span><br><span class="line">ERROR <span class="number">1644</span> (<span class="number">45000</span>): Math score must be <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">100</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0</span> <span class="operator">|</span> March7th   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Natasha    <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> silverwolf <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> xiaomei    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lumine     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> huohuo     <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> ai         <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> Kafka      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span> nozomi     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">80</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> math <span class="operator">=</span> <span class="number">70</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> math <span class="operator">=</span> <span class="number">101</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">ERROR <span class="number">1644</span> (<span class="number">45000</span>): Math score must be <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">100</span></span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0</span> <span class="operator">|</span> March7th   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Natasha    <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> silverwolf <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> xiaomei    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lumine     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> huohuo     <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> ai         <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> Kafka      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span> nozomi     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">70</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>FOR EACH ROW</code>：</p><blockquote><p>在MySQL触发器中，FOR EACH ROW 是用来指定触发器的执行频率的一部分。这个短语表示触发器将逐行执行，即对每一行受到影响的行执行一次触发器的逻辑。<br>请注意，FOR EACH ROW 在 MySQL 触发器中是一个必需的元素，因为 MySQL 触发器默认就是逐行执行的，因此在触发器定义中省略这个短语是允许的。</p></blockquote><h2 id="行业黑话"><a href="#行业黑话" class="headerlink" title="行业黑话"></a>行业黑话</h2><center><font color="red">- - - - - AIGC - - - - -</font></center><p><strong>问：</strong><br>什么是数据库的数据模型和概念模型</p><p><strong>答：</strong><br>数据库的数据模型是描述数据组织、存储和操作方式的抽象表示，常见的数据模型包括关系型、面向对象、层次型等。概念模型则是用户对数据库中信息的认知和理解，通常以实体-关系图等方式展现，有助于沟通数据库设计的概念和结构。</p><p><strong>问：</strong><br>数据库系统的三级模式结构是什么</p><p><strong>答：</strong><br>数据库系统的三级模式结构包括：</p><ol><li><strong>外部模式（视图层）</strong>： 这一层描述了用户或应用程序所看到的数据视图，即用户如何看待和访问数据。每个用户可能有自己的外部模式，以满足其特定需求。</li><li><strong>概念模式（逻辑层）</strong>： 这是整个数据库的逻辑结构，描述了数据之间的关系、约束和完整性规则。概念模式是整个数据库的逻辑模型，是数据库管理员和数据库设计者关注的层次。</li><li><strong>内部模式（物理层）</strong>： 内部模式描述了数据在存储介质上的实际存储方式和存储结构，涉及到物理存储的细节，如存储引擎、索引等。通常，数据库管理系统（DBMS）负责处理内部模式的实现和管理。</li></ol><p>这三个层次的模式结构有助于实现数据的抽象和独立性，使用户和应用程序能够更方便地使用数据库系统，而不必关心底层的物理实现。</p><p><strong>问：</strong><br>什么是数据库的两级映像功能</p><p><strong>答：</strong><br>数据库的两级映像功能通常指外部模式与概念模式之间的映像和概念模式与内部模式之间的映像，这体现了数据库系统的数据独立性。</p><ol><li><strong>外部模式与概念模式的映像</strong>： 外部模式是用户或应用程序看到的数据视图，而概念模式是整个数据库的逻辑结构。两者之间的映像确保了用户可以通过其定义的外部模式访问数据库，而不受数据库内部结构的影响。这提供了逻辑数据独立性，允许数据库管理员对数据库的概念模式进行调整，而不影响用户的应用程序。</li><li><strong>概念模式与内部模式的映像</strong>： 概念模式是逻辑层次上的数据库结构，而内部模式涉及数据在物理存储上的具体实现。映像功能确保了对数据库的逻辑设计变更不会对物理存储产生负面影响，从而提供了物理数据独立性。这使得数据库管理员能够优化内部存储结构，而不影响用户和应用程序的逻辑视图。</li></ol><p>这两级映像功能带来了数据独立性，使数据库系统更加灵活、可维护，并减少了对数据库结构变更的影响。</p><p><strong>问：</strong><br>什么是数据库的视图？</p><p><strong>答：</strong><br>数据库的视图是一种虚拟表，它是由一个或多个基本表的列组成的查询结果。视图是数据库中的一种逻辑结构，而不是实际存储数据的表。通过视图，用户可以定义一个虚拟表，该表包含特定条件下的数据，而不需要实际创建物理表。</p><p>主要作用包括：</p><ol><li>简化数据访问： 视图允许用户以更简单、更易理解的方式访问数据，通过隐藏表的复杂性，只暴露出用户感兴趣的部分数据。</li><li>控制数据访问： 视图可以限制用户对数据的访问，只暴露他们需要的信息，从而提高数据库的安全性和隐私性。</li><li>简化查询： 可以通过视图将复杂的查询逻辑封装起来，用户只需直接查询视图而不必关心底层的表结构和连接。</li><li>提高数据独立性： 视图可以作为概念模式与外部模式之间的桥梁，使数据库系统更具弹性，可以更轻松地调整表结构而不影响用户的数据访问。</li></ol><p>总的来说，数据库的视图提供了一种抽象层，使用户能够以更方便、安全的方式访问和操作数据。</p><p><strong>问：</strong><br><code>select * from customer cross join order_table;</code>我可以理解为这句创建了一个视图吗</p><p><strong>答：</strong><br>不完全正确。这SQL查询语句是一个交叉连接（cross join）操作，它返回两个表（customer 和 order_table）的所有可能的组合，而不考虑它们之间的任何匹配条件。这不是创建视图的语句，而是一个返回结果的查询。</p><p>如果你希望将这个查询的结果保存为一个虚拟表，你可以使用以下语句创建一个视图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> your_view_name <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customer <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> order_table;</span><br></pre></td></tr></table></figure><p>这样，你就创建了一个名为 your_view_name 的视图，该视图包含了 customer 表和 order_table 表的交叉连接的结果。随后，你可以通过查询这个视图来获取这个结果，就好像查询一个普通的表一样。</p><p>请注意，视图本身并不存储数据，只是一个定义好的查询，每次查询视图时都会动态地生成相应的结果。</p><p><strong>问：</strong><br>上面是mysql的语法吗？如果重启mysql这个视图会消失吗</p><p><strong>答：</strong><br>是的，上述语法是MySQL的语法。在MySQL中，你可以使用CREATE VIEW语句来创建视图。</p><p>关于视图的消失问题，视图是数据库中的元数据（metadata），而不是实际存储数据的地方。因此，当你重启MySQL服务时，已创建的视图不会消失，因为它们的定义存储在数据库中。只有在你显式删除视图或删除整个数据库的情况下，相关的视图才会被移除。</p><p>所以，一般情况下，重启MySQL服务不会导致已创建的视图消失。</p><center><font color="red">- - - - - AIGC END - - - - -</font></center><p>以上 AIGC 已经过实操验证。</p><h2 id="查询处理、查询优化"><a href="#查询处理、查询优化" class="headerlink" title="查询处理、查询优化"></a>查询处理、查询优化</h2><p>查询处理可分为4个阶段：查询分析、查询检查、查询优化、查询执行。</p><p><img src="https://s2.loli.net/2024/03/03/gUzxOPHNK3X4qiR.jpg" alt="67-2.jpg"></p><p>查询检查：<br>对合法的查询语句进行语义检查，即根据数据字典中有关的模式定义检查语句中的数据库对象，如关系名、属性名是否存在和有效。如果是对视图的操作，则要用视图消解方法把对视图的操作转换成对基本表的操作。还要根据数据字典中的用户权限和完整性约束定义对用户的存取权限进行检查。如果该用户没有相应的访问权限或违反了完整性约束，就拒绝执行该查询。当然，<strong>这时的完整性检查是初步的、静态的检查。</strong>检查通过后便把SQL查询语句转换成内部表示，即等价的<strong>关系代数表达式</strong>。这个过程中要把数据库对象的外部名称转换为内部表示。关系数据库管理系统一般都用<strong>查询树（query tree）</strong>，也称为<strong>语法分析树（syntax tree）</strong>来表示扩展的关系代数表达式。</p><p>查询优化：按照优化的层次一般可将查询优化分为<strong>代数优化</strong>和<strong>物理优化</strong>。</p><p>查询优化的优点在于：用户不必考虑如何写出最好的查询，因为系统可以做得更好。这是因为:</p><ul><li><strong>优化器可以从数据字典中获取许多统计信息</strong>，例如每个关系表中的元组数、关系中每个属性值的分布情况、哪些属性上已经建立了索引等。优化器可以根据这些信息做出正确的估算，选择高效的执行计划，而用户程序则难以获得这些信息。</li><li><strong>若数据库的物理统计信息改变，系统可以自动对查询重新优化，以选择相适应的执行计划</strong>。在非关系系统中则必须重写程序，而重写程序在实际应用中往往是不太可能的。</li><li><strong>优化器可以考虑数百种不同的执行计划</strong>。</li><li><strong>优化器中包括了很多复杂的优化技术</strong>。</li></ul><p>目前关系型数据库管理系统通过某种代价模型计算各种查询执行策略的代价，然后选取代价最小的执行方案。</p><p>集中式数据库中，查询执行开销主要包括：I/O代价、CPU代价、内存开销。在分布式数据库中还有通信代价，即：</p><p>总代价 = I/O代价 + CPU代价 + 内存代价 + 通信代价</p><p>磁盘I/O涉及机械动作，时间比内存操作高几个数量级，因此，计算查询代价时一般用该操作读写的块数作为衡量单位。</p><h2 id="代数优化"><a href="#代数优化" class="headerlink" title="代数优化"></a>代数优化</h2><p>关系代数表达式的等价变换规则：</p><p><img src="https://s2.loli.net/2024/03/03/8RhrvbzSpQuEeL7.jpg" alt="67-3.jpg"></p><p><img src="https://bu.dusays.com/2024/03/03/65e46bd7b9b77.jpg" alt="67-4.jpg"></p><p>对查询树进行代数优化：</p><div class="row"><iframe src="https://drive.google.com/file/d/150B0pTWhkJntlpLD5YdM-idpTlMzT5HS/preview" style="width:100%; height:550px"></iframe></div><h2 id="模式分解、Armstrong公理系统"><a href="#模式分解、Armstrong公理系统" class="headerlink" title="模式分解、Armstrong公理系统"></a>模式分解、Armstrong公理系统</h2><p>这部分内容和实践有些脱节。而且就应试的目的来说，模式分解很多时候凭着直觉就行了。很后悔花了大力气去学一个包装精致、难以理解的形式系统。</p><div class="row"><iframe src="https://drive.google.com/file/d/1_n7I3HeXoajgyAq29FiX2XNFiI_Ki7dq/preview" style="width:100%; height:550px"></iframe></div><h2 id="数据库安全性"><a href="#数据库安全性" class="headerlink" title="数据库安全性"></a>数据库安全性</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>数据库的安全性：保护数据库，防止非法使用造成的数据泄露、更改、破坏。</p><p>数据库的不安全因素：</p><ul><li><strong>非授权用户对数据库的恶意存取和破坏。</strong>数据库管理系统提供的安全措施主要包括<strong>用户身份鉴别</strong>、<strong>存取控制</strong>和<strong>视图</strong>等技术。</li><li><strong>数据库中重要或敏感的数据被泄露。</strong>数据库管理系统提供的主要技术有<strong>强制存取控制</strong>、<strong>数据加密存储</strong>和<strong>加密传输</strong>等。此外，在安全性要求较高的部门提供审计功能，通过分析审计日志，可以对潜在的威胁提前采取措施加以防范，对非授权用户的入侵行为及信息破坏情况能够进行跟踪，防止对数据库安全责任的否认。</li><li><strong>安全环境的脆弱性。</strong>数据库的安全性与计算机系统的安全性，包括计算机硬件、操作系统、网络系统等的安全性是紧密联系的。</li></ul><p>计算机安全技术方面逐步发展了一套可信（trusted）计算机系统的概念和标准。</p><p>计算机以及信息安全技术方面有一系列的安全标准，最有影响的当推 TCSEC 和 CC 这两个标准。</p><p>CC 基本取代了 TCSEC ，成为评估信息产品安全性的主要标准。</p><p>TCSEC/TDI 安全级别划分：</p><table>  <tbody>    <tr>      <td>安全级别</td>      <td>定义</td>    </tr>    <tr>      <td>A1</td>      <td>验证设计(verified design)</td>    </tr>    <tr>      <td>B3</td>      <td>安全域(security domains)</td>    </tr>    <tr>      <td>B2</td>      <td>结构化保护(structural protection)</td>    </tr>    <tr>      <td>B1</td>      <td>标记安全保护(labeled security protection)</td>    </tr>    <tr>      <td>C2</td>      <td>受控的存取保护(controlled access protection)</td>    </tr>    <tr>      <td>C1</td>      <td>自主安全保护(discretionary security protection)</td>    </tr>    <tr>      <td>D</td>      <td>最小保护(minimal protection)</td>    </tr>  </tbody>  <colgroup>    <col>    <col>  </colgroup></table><p>与数据库有关的安全性，主要包括<strong>用户身份鉴别</strong>、<strong>多层存取控制</strong>、<strong>审计</strong>、<strong>视图</strong>和<strong>数据加密</strong>等安全技术。</p><p><img src="https://bu.dusays.com/2024/03/05/65e70d81534d5.jpg" alt="67-5.jpg"></p><p>上图是数据库安全保护的存取控制流程。<br>首先，数据库管理系统对提出 SQL 访问请求的数据库用户进行身份鉴别，防止不可信用户使用系统；然后，在 SQL 处理层进行自主存取控制和强制存取控制，进一步还可以进行推理控制。为监控恶意访问，可根据具体安全需求配置审计规则，对用户访问行为和系统关键操作进行审计。通过设置简单入侵检测规则，对异常用户行为进行检测和处理。在数据存储层，数据库管理系统不仅存放用户数据，还存储与安全有关的标记和信息(称为安全数据)，提供存储加密功能等。</p><h3 id="用户身份鉴别"><a href="#用户身份鉴别" class="headerlink" title="用户身份鉴别"></a>用户身份鉴别</h3><p>方法：<strong>静态口令鉴别</strong><br>当前常用的鉴别方法。静态口令一般由用户自己设定，这些口令是静态不变的。这种方式虽然<strong>简单</strong>，但<strong>容易被攻击，安全性较低</strong>。数据库管理系统会从口令的复杂度，口令的管理、存储及传输等多方面来保障口令的安全可靠。</p><p>方法：<strong>动态口令鉴别</strong><br>目前较为安全的鉴别方式。这种方式的口令是动态变化的，每次鉴别时均需使用动态产生的新口令登录数据库管理系统，即采用一次一密的方法。常用的方式如<strong>短信密码</strong>和<strong>动态令牌</strong>方式，每次鉴别时要求用户使用通过短信或令牌等途径获取的新口令登录数据库管理系统。与静态口令鉴别相比，这种认证方式增加了口令被窃取或破解的难度，安全性相对高一些。</p><p>方法：<strong>生物特征鉴别</strong><br>它是一种通过生物特征进行认证的技术，其中，生物特征是指生物体唯一具有的，可测量、识别和验证的稳定生物特征，如指纹、虹膜和掌纹等。这种方式通过采用图像处理和模式识别等技术实现了基于生物特征的认证，与传统的口令鉴别相比，无疑产生了质的飞跃，安全性较高。</p><p>方法：<strong>智能卡鉴别</strong><br>智能卡是一种不可复制的硬件，内置集成电路的芯片，具有硬件加密功能。智能卡由用户随身携带，登录数据库管理系统时用户将智能卡插入专用的读卡器进行身份验证。由于每次从智能卡中读取的数据是静态的，通过内存扫描或网络监听等技术还是可能截取到用户的身份验证信息，存在安全隐患。因此，实际应用中一般采用个人身份识别码（PIN）和智能卡相结合的方式。这样，即使PIN或智能卡中有一种被窃取，用户身份仍不会被冒充。</p><h3 id="存取控制"><a href="#存取控制" class="headerlink" title="存取控制"></a>存取控制</h3><p>存取控制机制主要包括<strong>定义用户权限</strong>和<strong>合法权限检查</strong>两部分。</p><ol><li>定义用户权限，并将用户权限登记到数据字典中<ul><li>数据库管理系统必须提供适当的语言来定义用户权限，这些定义经过编译后存储在数据字典中，被称做安全规则或授权规则。</li></ul></li><li>合法权限检查<ul><li>每当用户发出存取数据库的操作请求后（请求一般应包括操作类型、操作对象和操作用户等信息），数据库管理系统查找数据字典，根据安全规则进行合法权限检查，若用户的操作请求超出了定义的权限，系统将拒绝执行此操作。</li><li><strong>定义用户权限</strong>和<strong>合法权限检查机制</strong>一起组成了数据库管理系统的<strong>存取控制子系统</strong>。</li></ul></li></ol><p>C2 级的数据库管理系统支持自主存取控制（Discretionary Access Control, DAC），B1 级的数据库管理系统支持强制存取控制（Mandatory Access Control, MAC）。</p><p>在<strong>自主存取控制</strong>方法中，用户对于不同的数据库对象有不同的存取权限，不同的用户对同一对象也有不同的权限，而且用户还可将其拥有的存取权限转授给其他用户。因此自主存取控制非常灵活。</p><p>在<strong>强制存取控制</strong>方法中，每一个数据库对象被标以一定的密级，每一个用户也被授予某一个级别的许可证。对于任意一个对象，只有具有合法许可证的用户才可以存取。强制存取控制因此相对比较严格。</p><h3 id="自主存取控制"><a href="#自主存取控制" class="headerlink" title="自主存取控制"></a>自主存取控制</h3><p>大型数据库管理系统都支持自主存取控制，SQL标准也对自主存取控制提供支持，这主要通过SQL的 GRANT 语句和 REVOKE 语句来实现。</p><p>用户权限由两个要素组成：<strong>数据库对象</strong>和<strong>操作类型</strong>。在数据库系统中，定义存取权限称为授权（authorization）。</p><p>在非关系系统中，用户只能对数据进行操作，存取控制的数据库对象也仅限于数据本身。</p><p>在关系数据库系统中，存取控制的对象不仅有数据本身（基本表中的数据、属性列上的数据），还有数据库模式（包括数据库、基本表、视图和索引的创建等）。</p><h3 id="数据库角色"><a href="#数据库角色" class="headerlink" title="数据库角色"></a>数据库角色</h3><p>数据库角色是被命名的一组与数据库操作相关的权限，<strong>角色是权限的集合</strong>。因此，可以为一组具有相同权限的用户创建一个角色，使用角色来管理数据库权限可以简化授权的过程。</p><p>在SQL中首先用CREATE ROLE语句创建角色，然后用 GRANT 语句给角色授权，用 REVOKE 语句收回授予角色的权限。</p><h3 id="强制存取控制"><a href="#强制存取控制" class="headerlink" title="强制存取控制"></a>强制存取控制</h3><p>强制存取控制适用于那些对数据有严格而固定密级分类的部门，例如军事部门或政府部门。强制存取控制不为用户直接感知、控制。</p><p>在强制存取控制中，数据库管理系统所管理的全部实体被分为<strong>主体</strong>和<strong>客体</strong>。</p><p>主体是系统中的活动实体，既包括数据库管理系统所管理的实际用户，也包括代表用户的各进程。客体是系统中的被动实体，是受主体操纵的，包括文件、基本表、索引、视图等。对于主体和客体，数据库管理系统为它们每个实例（值）指派一个敏感度标记（label）。</p><p>敏感度标记被分成若干级别，例如绝密（Top Secret，TS）、机密（Secret，S）、可信（Confidential，C）、公开（Public，P）等。密级的次序是 TS&gt;=S&gt;=C&gt;=P 。主体的敏感度标记称为许可证级别（clearance level），客体的敏感度标记称为密级（classification level）。强制存取控制机制就是通过对比主体的敏感度标记和客体的敏感度标记，最终确定主体是否能够存取客体。</p><p>当某一用户（或某一主体）以标记label注册入系统时，系统要求他对任何客体的存取必须遵循如下规则：</p><ol><li>仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体。</li><li>仅当主体的许可证级别小于或等于客体的密级时，该主体才能写相应的客体。</li></ol><p>规则(1)的意义是明显的，而规则(2)需要解释一下。按照规则(2)，用户可以为写入的数据对象赋予高于自己的许可证级别的密级。这样一旦数据被写入，该用户自己也不能再读该数据对象了。<strong>如果违反了规则(2)，就有可能把数据的密级从高流向低，造成数据的泄漏。</strong>例如，某个TS密级的主体把一个密级为TS的数据恶意地降低为P，然后把它写回。这样原来是TS密级的数据大家都可以读到了，造成了TS密级数据的泄漏。</p><p><img src="https://s2.loli.net/2024/03/05/os9mgOTFERUrKWS.jpg" alt="67-6.jpg"></p><h2 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h2><p>封锁协议（locking protocol）：约定的一些规则，如何时申请 X 锁或 S 锁、持锁时间、何时释放等。</p><p><strong>一级封锁协议</strong>：事务T在修改数据R之前必须先对其加X锁，直到事务结束才释放。事务结束包括正常结束（COMMIT）和非正常结束（ROLLBACK）。解决了<strong>丢失修改（脏写）</strong>的问题。</p><p><strong>二级封锁协议</strong>：在一级封锁协议基础上增加事务T在读取数据R之前必须先对其加S锁，读完后即可释放S锁。解决了<strong>脏读</strong>问题。</p><p><strong>三级封锁协议</strong>：在一级封锁协议的基础上增加事务T在读取数据R之前必须先对其加S锁，直到事务结束才释放。解决了<strong>不可重复读</strong>、<strong>幻读</strong>的问题。</p><p><strong>活锁</strong>：<br>如果事务 T1 封锁了数据 R，事务 T2 又请求封锁 R，于是 T2 等待；T3 也请求封锁 R，当 T1 释放了 R 上的封锁之后系统首先批准了 T3 的请求，T2 仍然等待；然后 T4 又请求封锁 R，当 T3 释放了 R 上的封锁之后系统又批准了 T4 的请求…… T2 有可能永远等待，这就是活锁的情形，如图11.5(a)所示。</p><p><img src="https://bu.dusays.com/2024/03/06/65e86b56c4307.jpg" alt="67-7.jpg"></p><p><strong>避免活锁的简单方法是采用先来先服务的策略</strong>。</p><p><strong>死锁</strong>：<br>如果事务 T1 封锁了数据 R1，T2 封锁了数据 R2，然后 T1 又请求封锁 R2，因 T2 已封锁了 R2，于是 T1 等待 T2 释放 R2 上的锁；接着 T2 又申请封锁 R1，因 T1 已封锁了 R1，T2 也只能等待 T1 释放 R1 上的锁。这样就出现了 T1 在等待 T2，而 T2 又在等待 T1 的局面，T1 和 T2 两个事务永远不能结束，形成死锁。如图11.5(b)所示。</p><p>OS 中广为采用的预防死锁策略不适合数据库，因此数据库在死锁问题上普遍采用<strong>诊断并解除死锁</strong>的方法。</p><p>诊断死锁的方法，有<strong>超时法</strong>、<strong>事务等待图法</strong>。</p><p>超时法：<br>如果一个事务的等待时间超过了规定的时限，就认为发生了死锁。超时法实现简单，但其不足也很明显，一是有可能误判死锁，如事务因为其他原因而使等待时间超过时限，系统会误认为发生了死锁；二是时限若设置得太长，死锁发生后不能及时发现。</p><p><img src="https://s2.loli.net/2024/03/06/MiDNfhdRPV7cAy8.jpg" alt="67-8.jpg"></p><p>事务等待图动态地反映了所有事务的等待情况。并发控制子系统周期性地（比如每隔数秒）生成事务等待图，并进行检测。如果发现图中存在回路，则表示系统中出现了死锁。</p><p>多个事务的并发执行是<strong>正确</strong>的，当且仅当其结果与按某一次序串行地执行这些事务时的结果相同，称这种调度策略为<strong>可串行化(serializable)调度</strong>。</p><p>【例】现在有两个事务,分别包含下列操作:<br>事务T1: 读B; A=B+1; 写回A;<br>事务T2: 读A; B=A+1; 写回B。</p><p><img src="https://bu.dusays.com/2024/03/06/65e876fc50f6f.png" alt="67-9.png"></p><p><strong>两段锁协议</strong>指所有事务必须分两个阶段对数据项加锁和解锁：</p><ul><li>在对任何数据进行读、写操作之前，首先要申请并获得对该数据的封锁</li><li>在释放一个封锁之后，事务不再申请和获得任何其他封锁</li></ul><p>“两段”锁的含义是，事务分为两个阶段，<strong>第一阶段是获得封锁，也称为扩展阶段</strong>，在这个阶段，事务可以申请获得任何数据项上的任何类型的锁，但是不能释放任何锁；<strong>第二阶段是释放封锁，也称为收缩阶段</strong>，在这个阶段，事务可以释放任何数据项上的任何类型的锁，但是不能再申请任何锁。</p><p>可以证明，<strong>若并发执行的所有事务均遵守两段锁协议，则对这些事务的任何并发调度策略都是可串行化的。</strong></p><p>事务遵守两段锁协议是<strong>可串行化调度的充分条件</strong>，而不是必要条件。</p><p>两段锁协议并不要求事务必须一次将所有要使用的数据全部加锁，因此遵守两段锁协议的事务可能发生死锁。</p><p>在一个系统中同时支持多种封锁粒度供不同的事务选择是比较理想的，这种封锁方法称为<strong>多粒度封锁(multiple granularity locking)</strong>。选择封锁粒度时应该同时考虑封锁开销和并发度两个因素，适当选择封锁粒度以求得最优的效果。<strong>一般说来</strong>，需要处理某个关系的大量元组的事务可以以关系为封锁粒度；需要处理多个关系的大量元组的事务可以以数据库为封锁粒度；而对于一个处理少量元组的用户事务，以元组为封锁粒度就比较合适了。</p><p>下面讨论<strong>多粒度封锁</strong>，首先定义<strong>多粒度树</strong>。多粒度树的根结点是整个数据库，表示最大的数据粒度。叶结点表示最小的数据粒度。</p><p>一个三级粒度树，根结点为数据库，数据库的子结点为关系，关系的子结点为元组。也可以定义4级粒度树，例如数据库、数据分区、数据文件、数据记录。</p><p><strong>多粒度封锁协议</strong>允许多粒度树中的每个结点被独立地加锁。对一个结点加锁意味着这个结点的所有后裔结点也被加以同样类型的锁。因此，在多粒度封锁中一个数据对象可能以两种方式封锁，显式封锁和隐式封锁。</p><p><strong>显式封锁</strong>是应事务的要求直接加到数据对象上的锁；<strong>隐式封锁</strong>是该数据对象没有被独立加锁，是由于其上级结点加锁而使该数据对象加上了锁。</p><p>多粒度封锁方法中，显式封锁和隐式封锁的效果是一样的，因此系统检查封锁冲突时不仅要检查显式封锁还要检查隐式封锁。例如事务T要对关系R1加X锁，系统必须搜索其上级结点数据库、关系R1以及R1的下级结点，即R1中的每一个元组，上下搜索。如果其中某一个数据对象已经加了不相容锁，则T必须等待。</p><p>一般地，对某个数据对象加锁，系统要检查该数据对象上有无显式封锁与之冲突；再检查其所有上级结点，看本事务的显式封锁是否与该数据对象上的隐式封锁（即由于上级结点已加的封锁造成的）冲突；还要检查其所有下级结点，看它们的显式封锁是否与本事务的隐式封锁（将加到下级结点的封锁）冲突。显然，这样的检查方法效率很低。为此人们引进了一种新型锁，称为<strong>意向锁（intention lock）</strong>。</p><p>意向锁的含义是如果对一个结点加意向锁，则说明该结点的下层结点正在被加锁；对任一结点加锁时，必须先对它的上层结点加意向锁。</p><p><strong>意向共享锁（Intent Share Lock，IS锁）</strong>：<br>如果对一个数据对象加IS锁，表示它的后裔结点拟(意向)加S锁。<br>例如，事务T1要对R1中某个元组加S锁，则要首先对关系R1和数据库加IS锁。</p><p><strong>意向排他锁（IntentExclusive Lock， IX 锁）</strong>：<br>如果对一个数据对象加IX锁，表示它的后裔结点拟(意向)加X锁。例如，事务T1要对R1 中某个元组加X锁，则要首先对关系R1 和数据库加IX锁。</p><p><strong>共享意向排他锁（Share Intent Exclusive Lock，SIX锁）</strong>：<br>如果对一个数据对象加SIX锁，表示对它加S锁，再加IX锁，即SIX=S+IX。例如对某个表加SIX锁，则表示该事务要读整个表（所以要对该表加S锁），同时会更新个别元组（所以要对该表加IX锁）。</p><p><strong>锁的强度</strong>是指它对其他锁的排斥程度。一个事务在申请封锁时以强锁代替弱锁是安全的，反之则不然。</p><p>在具有意向锁的多粒度封锁方法中，任意事务T要对一个数据对象加锁，必须先对它的上层结点加意向锁。申请封锁时应该按自上而下的次序进行，释放封锁时则应该按自下而上的次序进行。</p><p><img src="https://s2.loli.net/2024/03/07/4ynuJ7wVeG2pFsX.jpg" alt="67-10.jpg"></p><p>例如，事务T1要对关系R1加S锁，则要首先对数据库加IS锁。检查数据库和R1是否已加了不相容的锁（X或IX）。不再需要搜索和检查R1中的元组是否加了不相容的锁（X锁）。</p><h2 id="故障与恢复"><a href="#故障与恢复" class="headerlink" title="故障与恢复"></a>故障与恢复</h2><p>故障的种类：</p><ol><li><strong>事务内部的故障</strong><ul><li>有的可以通过事务程序本身发现的。</li><li><strong>事务内部更多的故障是非预期的</strong>，不能由应用程序处理。如运算溢出、并发事务发生死锁而被选中撤销该事务、违反某些完整性限制而被终止等。后续内容中，事务障故仅指这类非预期的故障。</li><li>事务故障意味着事务没有达到预期终点（COMMIT或显式的ROLLBACK），因此，数据库可能处于不正确状态。恢复程序要在不影响其他事务运行的情况下，强行回滚该事务，即撤销该事务已作出的修改，使得该事务好像根本没有启动一样。这类恢复操作称为<strong>事务撤销（UNDO）</strong>。</li></ul></li><li><strong>系统故障</strong><ul><li>系统故障是指造成系统停止运转的任何事件，使得系统要重新启动。例如，特定类型的硬件错误（CPU故障）、操作系统故障、DBMS代码错误、系统断电等。这类故障影响正在运行的所有事务，但不破坏数据库。此时主存内容，尤其是数据库缓冲区（在内存）中的内容都被丢失，所有运行事务都非正常终止。发生系统故障时，一些尚未完成的事务的结果可能已送入物理数据库，从而造成数据库可能处于不正确的状态。为保证数据一致性，需要清除这些事务对数据库的所有修改。</li><li>恢复子系统必须在系统重新启动时让所有非正常终止的事务回滚，强行撤销所有未完成事务。</li><li>另一方面，发生系统故障时，有些已完成的事务可能有一部分甚至全部留在缓冲区，尚未写回到磁盘上的物理数据库中，系统故障使得这些事务对数据库的修改部分或全部丢失，这也会使数据库处于不一致状态，因此应将这些事务已提交的结果重新写入数据库。所以系统重新启动后，恢复子系统除需要撤销所有未完成的事务外，还需要<strong>重做（REDO）</strong>所有已提交的事务，以将数据库真正恢复到一致状态。</li></ul></li><li><strong>介质故障</strong><ul><li>系统故障常称为<strong>软故障（soft crash）</strong>，介质故障称为<strong>硬故障（hard crash）</strong>。硬故障指外存故障，如磁盘损坏、磁头碰撞，瞬时强磁场干扰等。</li></ul></li><li><strong>计算机病毒</strong></li></ol><p>恢复的基本原理：冗余。</p><p>建立冗余数据最常用的技术是<strong>数据转储</strong>和<strong>登记日志文件(logging)</strong>。</p><p>转储十分耗费时间和资源，不能频繁进行。</p><p>转储可分为静态转储和动态转储。</p><p><strong>静态转储</strong>是在系统中无运行事务时进行的转储操作。静态转储简单，但转储必须等待正运行的用户事务结束才能进行。同样，新的事务必须等待转储结束才能执行。</p><p><strong>动态转储</strong>在转储期间允许对数据库存取或修改。必须把转储期间各事务对数据库的修改活动登记下来，建立<strong>日志文件(log file)</strong>。这样，后援副本加上日志文件就能把数据库恢复到某一时刻的正确状态。</p><p>转储还可分为<strong>海量转储</strong>和<strong>增量转储</strong>两种方式。</p><p>综上，数据转储方法可以分为 4 类：<strong>动态海量转储</strong>、<strong>动态增量转储</strong>、<strong>静态海量转储</strong>和<strong>静态增量转储</strong>。</p><p>日志文件主要有两种格式：<strong>以记录为单位的日志文件</strong>和<strong>以数据块为单位的日志文件</strong>。</p><p>对于以记录为单位的日志文件，日志文件中需要登记的内容包括：</p><ul><li>各个事务的开始(BEGIN TRANSACTION)标记</li><li>各个事务的结束(COMMIT或ROLLBACK)标记</li><li>各个事务的所有更新操作。</li></ul><p>这里每个事务的开始标记、每个事务的结束标记和每个更新操作均作为日志文件中的一个<strong>日志记录(log record)</strong>。</p><p>每个日志记录的内容主要包括：</p><ul><li>事务标识(标明是哪个事务)</li><li>操作的类型(插入、删除或修改)</li><li>操作对象(记录内部标识)</li><li>更新前数据的旧值(对插入操作而言,此项为空值)</li><li>更新后数据的新值(对删除操作而言,此项为空值)</li></ul><p>对于以数据块为单位的日志文件，日志记录的内容包括事务标识和被更新的数据块。由于将更新前的整个块和更新后的整个块都放入日志文件中，操作类型和操作对象等信息就不必放入日志记录中了。</p><p>事务故障恢复和系统故障恢复必须用日志文件。</p><p>在动态转储方式中必须建立日志文件，后备副本和日志文件结合起来才能有效地恢复数据库。</p><p>在静态转储方式中也可以建立日志文件，当数据库毁坏后可重新装入后援副本把数据库恢复到转储结束时刻的正确状态，然后利用日志文件把已完成的事务进行重做处理，对故障发生时尚未完成的事务进行撤销处理。</p><p>为保证数据库是可恢复的，登记日志文件时必须遵循两条原则：</p><ul><li>登记的次序严格按并发事务执行的时间次序。</li><li>必须先写日志文件，后写数据库。</li></ul><center><font color="red">- - - - - 事务故障的恢复 - - - - -</font></center><p>事务故障是指事务在运行至正常终止点前被终止，这时恢复子系统应利用日志文件撤销(UNDO)此事务已对数据库进行的修改。事务故障的恢复是由系统自动完成的，对用户是透明的。系统的恢复步骤是:</p><ol><li>反向扫描日志文件(即从最后向前扫描日志文件)，查找该事务的更新操作。</li><li>对该事务的更新操作执行逆操作，即将日志记录中“更新前的值”写入数据库。这样，如果记录中是插入操作，则相当于做删除操作(因此时“更新前的值”为空)；若记录中是删除操作，则做插入操作；若是修改操作，则相当于用修改前值代替修改后值。</li><li>继续反向扫描日志文件，查找该事务的其他更新操作，并做同样处理。</li><li>如此处理下去，直至读到此事务的开始标记，事务故障恢复就完成了。</li></ol><center><font color="red">- - - - - 事务故障的恢复 END - - - - -</font></center><p><br></p><center><font color="red">- - - - - 系统故障的恢复 - - - - -</font></center><p>系统故障造成数据库不一致状态的原因有两个，一是未完成事务对数据库的更新可能已写入数据库，二是已提交事务对数据库的更新可能还留在缓冲区没来得及写入数据库。因此恢复操作就是要撤销故障发生时未完成的事务，重做已完成的事务。</p><p>系统故障的恢复是由系统在重新启动时自动完成的，不需要用户干预。</p><p>系统的恢复步骤是:</p><ol><li>正向扫描日志文件(即从头扫描日志文件)，找出在故障发生前已经提交的事务(这些事务既有BEGIN TRANSACTION记录，也有COMMIT记录)，将其事务标识记入重做队列(REDO-LIST)。同时找出故障发生时尚未完成的事务(这些事务只有 BEGIN TRANSACTION 记录，无相应的 COMMIT 记录)，将其事务标识记入撤销队列(UNDO-LIST).</li><li>对撤销队列中的各个事务进行撤销(UNDO)处理。进行撤销处理的方法是，反向扫描日志文件，对每个撤销事务的更新操作执行逆操作，即将日志记录中“更新前的值”写入数据库。</li><li>对重做队列中的各个事务进行重做处理。进行重做处理的方法是:正向扫描日志文件，对每个重做事务重新执行日志文件登记的操作，即将日志记录中“更新后的值”写入数据库。</li></ol><center><font color="red">- - - - - 系统故障的恢复 END - - - - -</font></center><p><br></p><center><font color="red">- - - - - 介质故障的恢复 - - - - -</font></center><p>发生介质故障后，磁盘上的物理数据和日志文件被破坏，这是最严重的一种故障，恢复方法是重装数据库，然后重做已完成的事务。</p><ol><li>装入最新的数据库后备副本(离故障发生时刻最近的转储副本)，使数据库恢复到最近一次转储时的一致性状态。对于动态转储的数据库副本，还需同时装入转储开始时刻的日志文件副本，利用恢复系统故障的方法(即REDO+UNDO)，才能将数据库恢复到一致性状态。</li><li>装入相应的日志文件副本(转储结束时刻的日志文件副本)，重做已完成的事务。即首先扫描日志文件，找出故障发生时已提交的事务的标识，将其记入重做队列；然后正向扫描日志文件，对重做队列中的所有事务进行重做处理。即将日志记录中“更新后的值”写入数据库。</li></ol><p>介质故障的恢复需要数据库管理员介入，但数据库管理员只需要重装最近转储的数据库副本和有关的各日志文件副本，然后执行系统提供的恢复命令即可，具体的恢复操作仍由数据库管理系统完成。</p><center><font color="red">- - - - - 介质故障的恢复 END - - - - -</font></center><p>利用日志技术进行数据库恢复时，恢复子系统必须搜索日志，确定哪些事务需要重做，哪些事务需要撤销。一般来说，需要检查所有日志记录。这样做有两个问题，一是搜索整个日志将耗费大量的时间，二是很多需要重做处理的事务实际上已经将它们的更新操作结果写到了数据库中，然而恢复子系统又重新执行了这些操作，浪费了大量时间。为了解决这些问题，又发展了具有检查点的恢复技术。这种技术在日志文件中增加一类新的记录——<strong>检查点(checkpoint)</strong>记录，增加一个重新开始文件，并让恢复子系统在登录日志文件期间动态地维护日志。</p><p>检查点记录的内容包括:</p><ul><li>建立检查点时刻所有正在执行的事务清单。</li><li>这些事务最近一个日志记录的地址。</li></ul><p>重新开始文件用来记录各个检查点记录在日志文件中的地址。图10.3说明了建立检查点Ci时对应的日志文件和重新开始文件。</p><p><img src="https://bu.dusays.com/2024/03/09/65eb4e38c648c.png" alt="67-11.png"></p><p>在上图中，检查点处的数据库是合法状态。若不然，则可以通过“这些事务最近一个日志记录的地址”达到合法状态。</p><p>动态维护日志文件的方法是，周期性地执行建立检查点、保存数据库状态的操作。具体步骤是：</p><ol><li>将当前日志缓冲区中的所有日志记录写入磁盘的日志文件上。</li><li>在日志文件中写入一个检查点记录。</li><li>将当前数据缓冲区的所有数据记录写入磁盘的数据库中。</li><li>把检查点记录在日志文件中的地址写入一个重新开始文件。恢复子系统可以定期或不定期地建立检查点，保存数据库状态。检查点可以按照预定的一个时间间隔建立，如每隔一小时建立一个检查点;也可以按照某种规则建立检查点，如日志文件已写满一半建立一个检查点。</li></ol><p><strong>使用检查点方法可以改善恢复效率</strong>。当事务T在一个检查点之前提交，T对数据库所做的修改一定都已写入数据库，写入时间是在这个检查点建立之前或在这个检查点建立之时。这样，在进行恢复处理时，没有必要对事务T执行重做操作。</p><p>系统出现故障时，恢复子系统将根据事务的不同状态采取不同的恢复策略：</p><p><img src="https://s2.loli.net/2024/03/09/onHGLfsqVixYRjv.jpg" alt="67-12.jpg"></p><p>T3和T5在故障发生时还未完成，所以予以撤销；T2和T4在检查点之后才提交，它们对数据库所做的修改在故障发生时可能还在缓冲区中，尚未写入数据库，所以要重做；T1在检查点之前已提交，所以不必执行重做操作。</p><p><strong>系统使用检查点方法进行恢复的步骤是：</strong></p><ol><li>从重新开始文件中找到最后一个检查点记录在日志文件中的地址，由该地址在日志文件中找到最后一个检查点记录。</li><li>由该检查点记录得到检查点建立时刻所有正在执行的事务清单ACTIVE-LIST。这里建立两个事务队列:<ul><li>UNDO-LIST: 需要执行UNDO操作的事务集合</li><li>REDO-LIST: 需要执行REDO操作的事务集合<br>把 ACTIVE-LIST 暂时放入 UNDO-LIST 队列，REDO 队列暂为空。</li></ul></li><li>从检查点开始正向扫描日志文件。<ul><li>如有新开始的事务Ti,把Ti暂时放入UNDO-LIST队列;</li><li>如有提交的事务Tj,把Tj从UNDO-LIST队列移到REDO-LIST队列；直到日志文件结束。</li></ul></li><li>对UNDO-LIST中的每个事务执行UNDO操作，对REDO-LIST中的每个事务执行REDO操作。</li></ol><p>数据库镜像：</p><p><img src="https://bu.dusays.com/2024/03/09/65eb5ee8071d9.jpg" alt="67-13.jpg"></p><h2 id="数据库的实施与维护"><a href="#数据库的实施与维护" class="headerlink" title="数据库的实施与维护"></a>数据库的实施与维护</h2><p>数据库应用程序的设计应该与数据库设计同时进行，因此在组织数据入库的同时还要调试应用程序。</p><p>在原有系统的数据有一小部分已输入数据库后，就可以开始对数据库系统进行联合调试了，这又称为数据库的<strong>试运行</strong>。</p><p>这一阶段要实际运行数据库应用程序，执行对数据库的各种操作，测试应用程序的功能是否满足设计要求。如果不满足，对应用程序部分则要修改、调整，直到达到设计要求为止。</p><p>在数据库试运行时，还要测试系统的性能指标，分析其是否达到设计目标。</p><p>这里特别要强调两点。第一，上面已经讲到组织数据入库是十分费时、费力的事，如果试运行后还要修改数据库的设计，还要重新组织数据入库。因此应分期分批地组织数据入库，<strong>先输入小批量数据做调试用，待试运行基本合格后再大批量输入数据，逐步增加数据量，逐步完成运行评价。</strong>第二，在数据库试运行阶段，由于系统还不稳定，硬、软件故障随时都可能发生；而系统的操作人员对新系统还不熟悉，误操作也不可避免，因此要<strong>做好数据库的转储和恢复工作</strong>。一旦故障发生，能使数据库尽快恢复，尽量减少对数据库的破坏。</p><p>在运行阶段，数据库的维护工作主要包括以下几方面：</p><ol><li><strong>数据库的转储和恢复</strong>：数据库管理员要针对不同的应用要求制定不同的转储计划。</li><li><strong>数据库的安全性、完整性控制</strong></li><li><strong>数据库性能的监督、分析和改造</strong></li><li><strong>数据库的重组织与重构造</strong><br>数据库运行一段时间后，由于记录不断增、删、改，将会使数据库的物理存储情况变坏，降低数据的存取效率，使数据库性能下降，这时数据库管理员就要对数据库进行重组织或部分重组织(只对频繁增、删的表进行重组织)。关系数据库管理系统一般都提供数据重组织用的实用程序。在重组织的过程中，按原设计要求重新安排存储位置、回收垃圾、减少指针链等，提高系统性能。<br><strong>数据库的重组织并不修改原设计的逻辑和物理结构，而数据库的重构造则不同，它是指部分修改数据库的模式和内模式。</strong><br>由于数据库应用环境发生变化，增加了新的应用或新的实体，取消了某些应用，有的实体与实体间的联系也发生了变化等，使原有的数据库设计不能满足新的需求，需要调整数据库的模式和内模式。例如，在表中增加或删除某些数据项，改变数据项的类型，增加或删除某个表，改变数据库的容量，增加或删除某些索引等。当然数据库的重构也是有限的，只能做部分修改。如果应用变化太大，重构也无济于事，说明此数据库应用系统的生命周期已经结束，应该设计新的数据库应用系统了。</li></ol><h2 id="了解内容"><a href="#了解内容" class="headerlink" title="了解内容"></a>了解内容</h2><h3 id="面向对象数据库模型"><a href="#面向对象数据库模型" class="headerlink" title="面向对象数据库模型"></a>面向对象数据库模型</h3><p>一系列面向对象核心概念构成了<strong>面向对象数据模型(Object Oriented Data Model，OO模型)</strong>的基础，主要包括以下一些概念:</p><ol><li>现实世界中的任何事物都被建模为对象。每个对象具有一个唯一的对象标识(OID)。</li><li>对象是其状态和行为的封装，其中状态是对象属性值的集合，行为是变更对象状态的方法集合。</li><li>具有相同属性和方法的对象的全体构成了类，类中的对象称为类的实例。</li><li>类的属性的定义域也可以是类，从而构成了类的复合。类具有继承性，一个类可以继承另一个类的属性与方法，被继承类和继承类也称为超类和子类。类与类之间的复合与继承关系形成了一个有向无环图，称为类层次。</li><li>对象是被封装起来的，它的状态和行为在对象外部不可见，从外部只能通过对象显式定义的消息传递对对象进行操作。</li></ol><h3 id="分布式数据库系统"><a href="#分布式数据库系统" class="headerlink" title="分布式数据库系统"></a>分布式数据库系统</h3><p>分布式数据库系统是在集中式数据库系统和计算机网络的基础上发展起来的，它是分布式数据处理的关键技术之一。分布式数据库由一组数据组成，这组数据分布在计算机网络的不同计算机上，网络中的每个结点具有独立处理的能力(称为<strong>场地自治</strong>)，可以执行局部应用。同时，每个结点也能通过网络通信系统执行全局应用。</p><p>这个定义强调了分布式数据库系统的<strong>场地自治性</strong>以及<strong>自治场地之间的协作性</strong>。这就是说，每个场地是独立的数据库系统，它有自己的数据库、自己的用户、自己的服务器，运行自己的DBMS，执行局部应用，具有高度的自治性。同时各个场地的数据库系统又相互协作组成一个整体。<strong>这种整体性的含义是，对于用户来说，一个分布式数据库系统逻辑上看如同一个集中式数据库系统一样，用户可以在任何一个场地执行全局应用。</strong></p><p>因此，分布式数据库系统不是简单地把集中式数据库连网就能实现的。分布式数据库系统具有自己的性质和特征。集中式数据库的许多概念和技术，如数据独立性、数据共享和数据冗余、并发控制、完整性、安全性和恢复等，在分布式数据库系统中都有了新的更加丰富的内容。</p><p>分布式数据库系统的<strong>本地自治性(local autonomy)</strong>是指局部场地的数据库系统可以自已决定本地数据库的设计、使用以及与其他节点的数据库系统的通信。分布式数据库系统的<strong>分布透明性(distributed transparency)</strong>是指分布式数据库管理系统将数据的分布封装起来，<strong>用户访问分布式数据库就像与集中式数据库打交道一样</strong>，不必知道也不必关心数据的存放和操作位置等细节。</p><p>分布式数据库系统在集中式数据库系统的组成基础上增加了三个部分: DDBMS、全局字典和分布目录、网络访问进程。全局字典和分布目录为DDBMS提供了数据定位的元信息，网络访问进程使用高级协议来执行局部站点和分布式数据库之间的通信。</p><h2 id="应试练习"><a href="#应试练习" class="headerlink" title="应试练习"></a>应试练习</h2><div class="row"><iframe src="https://drive.google.com/file/d/1wtxl_PD1cNFLSYNnSvMXSn2Q0noS9OW1/preview" style="width:100%; height:550px"></iframe></div><p>在上面的练习中，发现一类复杂的 SQL 查询可以转化成类似下面的便于理解的查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0</span> <span class="operator">|</span> March7th   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Natasha    <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> silverwolf <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> xiaomei    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lumine     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> huohuo     <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> ai         <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> Kafka      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span> nozomi     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">70</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(age), age, <span class="built_in">avg</span>(math) <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">group</span> <span class="keyword">by</span> age) <span class="keyword">as</span> c;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(age) <span class="operator">|</span> age  <span class="operator">|</span> <span class="built_in">avg</span>(math) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>        <span class="number">70</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>        <span class="number">71</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>        <span class="number">99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>      <span class="number">80.5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>        <span class="number">99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>        <span class="number">59</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>        <span class="number">99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+-----------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> tmpcntage <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(age) <span class="keyword">as</span> tmpcntage, age, <span class="built_in">avg</span>(math) <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">group</span> <span class="keyword">by</span> age) <span class="keyword">as</span> c;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> tmpcntage <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>数据库我卷卷卷：</p><div class="row"><iframe src="https://drive.google.com/file/d/1m7x-SzMYKug1a-NEMGOwN8-RTToCXf8w/preview" style="width:100%; height:550px"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 关系代数 </tag>
            
            <tag> SQLServer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CppNote3</title>
      <link href="/posts/555ef888.html"/>
      <url>/posts/555ef888.html</url>
      
        <content type="html"><![CDATA[<p>前情提要： <a href="https://loveofpeach.github.io/posts/2249c81f.html">CppNote2</a></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>类对象与其他类型的转换：</p><ul><li>由其他类型向自定义类型转换，一般称为<strong>隐式转换</strong></li><li>由自定义类型向其他类型转换</li></ul><p>由自定义类型向其他类型转换是由<strong>类型转换函数</strong>完成的，这是一个特殊的成员函数。形式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">operator</span> 目标类型()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由自定义类型向其他类型转换的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Complex&amp; rhs);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> dreal = <span class="number">0</span>, <span class="type">double</span> dimag = <span class="number">0</span>)</span><br><span class="line">    :_dreal(dreal), _dimag(dimag) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex(double = 0, double = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Complex</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _dreal;</span><br><span class="line">    <span class="type">double</span> _dimag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Complex&amp; rhs) &#123;</span><br><span class="line">    os &lt;&lt; rhs._dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; rhs._dimag &lt;&lt; <span class="string">&quot;i&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">point</span>(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>):<span class="built_in">ix</span>(x),<span class="built_in">iy</span>(y) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;point(int = 0, int = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">point</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;point(const point&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ix + iy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">Complex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(ix, iy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs)&#123;</span><br><span class="line">    os &lt;&lt; rhs.ix &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; rhs.iy &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">point <span class="title">pt4</span><span class="params">(<span class="number">4</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;pt4 = &quot;</span> &lt;&lt; pt4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ix = pt4;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ix = &quot;</span> &lt;&lt; ix &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> dx = pt4;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;dx = &quot;</span> &lt;&lt; dx &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Complex cx = pt4;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;cx = &quot;</span> &lt;&lt; cx &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">point(int = 0, int = 0)</span></span><br><span class="line"><span class="comment">pt4 = 4 5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ix = 9</span></span><br><span class="line"><span class="comment">dx = 9</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">cx = 4 + 5i</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h2><p>一个类可以写在另一个类中，即<strong>嵌套类</strong>，又称<strong>内部类</strong>。</p><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Line</span>(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span><br><span class="line">    :_pt1(x1, y1), _pt2(x2, y2) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Line(int, int, int, int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Line</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Line()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        _pt1.<span class="built_in">print</span>();</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; ---&gt; &quot;</span>;</span><br><span class="line">        _pt2.<span class="built_in">print</span>();</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">point</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">point</span>(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>):<span class="built_in">ix</span>(x),<span class="built_in">iy</span>(y) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;point(int = 0, int = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">            std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                      &lt;&lt; iy ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ~<span class="built_in">point</span>() &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> ix;</span><br><span class="line">        <span class="type">int</span> iy;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    point _pt1;</span><br><span class="line">    point _pt2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Line <span class="title">line</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;line = &quot;</span>;</span><br><span class="line">    line.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">point(int = 0, int = 0)</span></span><br><span class="line"><span class="comment">point(int = 0, int = 0)</span></span><br><span class="line"><span class="comment">Line(int, int, int, int)</span></span><br><span class="line"><span class="comment">line = 1 2 ---&gt; 3 4</span></span><br><span class="line"><span class="comment">~Line()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="设计模式-Pimpl"><a href="#设计模式-Pimpl" class="headerlink" title="设计模式 Pimpl"></a>设计模式 Pimpl</h3><p>通过一个私有的成员指针，隐藏指针所指向类的内部实现。该设计模式有以下优点：</p><ul><li>提高编译速度</li><li>信息隐藏</li><li>减小编译依赖，以小代价平滑升级库文件</li><li>接口与实现解耦</li><li>移动语义友好</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Line.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Line</span>(<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>);</span><br><span class="line">    ~<span class="built_in">Line</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printLine</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">LineImpl</span>; <span class="comment">//类的前向声明</span></span><br><span class="line">    LineImple* _pimpl;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Line.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Line.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span>::LineImpl &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LineImpl</span>(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printLineImpl</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Point</span>(<span class="type">int</span> x = <span class="number">0</span>, <span class="type">int</span> y = <span class="number">0</span>): _x(x), _y(y) &#123;&#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> _x;</span><br><span class="line">        <span class="type">int</span> _y;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Point _pt1;</span><br><span class="line">    Point _pt2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Line::LineImpl::<span class="built_in">LineImpl</span>(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span><br><span class="line">                        : _pt1(x1, y1) ,_pt2(x2, y2) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> Line::LineImpl::<span class="built_in">printLineImpl</span>() <span class="type">const</span> &#123;</span><br><span class="line">    _pt1.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; ---&gt; &quot;</span>;</span><br><span class="line">    _pt2.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Line::<span class="built_in">Line</span>(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span><br><span class="line">          : _pimpl(<span class="keyword">new</span> <span class="built_in">LineImpl</span>(x1, y1, x2, y2)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">Line::~<span class="built_in">Line</span>() &#123;</span><br><span class="line">    <span class="keyword">delete</span> _pimpl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Line::printLine</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    pimpl-&gt;<span class="built_in">printLineImpl</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存泄露的检测"><a href="#内存泄露的检测" class="headerlink" title="内存泄露的检测"></a>内存泄露的检测</h2><p>安装内存泄露检测工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install valgrind</span><br></pre></td></tr></table></figure><p>写一段有泄露的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* pInt = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 terminal 中使用工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ g++ testtmp.cc -o <span class="built_in">test</span> -g</span><br><span class="line">wanko@wanko:~/mycode$ <span class="built_in">ls</span></span><br><span class="line">a.out  exam_log4cpp   example_reids  guoba.py  testtmp</span><br><span class="line">dict   example_mysql  for.sh         <span class="built_in">test</span>      testtmp.cc</span><br><span class="line">wanko@wanko:~/mycode$ valgrind --tool=memcheck --leak-check=full ./test</span><br><span class="line">==84862== Memcheck, a memory error detector</span><br><span class="line">==84862== Copyright (C) 2002-2017, and GNU GPL<span class="string">&#x27;d, by Julian Seward et al.</span></span><br><span class="line"><span class="string">==84862== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info</span></span><br><span class="line"><span class="string">==84862== Command: ./test</span></span><br><span class="line"><span class="string">==84862== </span></span><br><span class="line"><span class="string">==84862== </span></span><br><span class="line"><span class="string">==84862== HEAP SUMMARY:</span></span><br><span class="line"><span class="string">==84862==     in use at exit: 4 bytes in 1 blocks</span></span><br><span class="line"><span class="string">==84862==   total heap usage: 2 allocs, 1 frees, 72,708 bytes allocated</span></span><br><span class="line"><span class="string">==84862== </span></span><br><span class="line"><span class="string">==84862== 4 bytes in 1 blocks are definitely lost in loss record 1 of 1</span></span><br><span class="line"><span class="string">==84862==    at 0x4849013: operator new(unsigned long) (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)</span></span><br><span class="line"><span class="string">==84862==    by 0x10915E: main (testtmp.cc:2)</span></span><br><span class="line"><span class="string">==84862== </span></span><br><span class="line"><span class="string">==84862== LEAK SUMMARY:</span></span><br><span class="line"><span class="string">==84862==    definitely lost: 4 bytes in 1 blocks</span></span><br><span class="line"><span class="string">==84862==    indirectly lost: 0 bytes in 0 blocks</span></span><br><span class="line"><span class="string">==84862==      possibly lost: 0 bytes in 0 blocks</span></span><br><span class="line"><span class="string">==84862==    still reachable: 0 bytes in 0 blocks</span></span><br><span class="line"><span class="string">==84862==         suppressed: 0 bytes in 0 blocks</span></span><br><span class="line"><span class="string">==84862== </span></span><br><span class="line"><span class="string">==84862== For lists of detected and suppressed errors, rerun with: -s</span></span><br><span class="line"><span class="string">==84862== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)</span></span><br></pre></td></tr></table></figure><p>再写一段没有泄露的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* pInt = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">delete</span> pInt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则工具输出为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ g++ tmptest.cc -o <span class="built_in">test</span> -g</span><br><span class="line">wanko@wanko:~/mycode$ <span class="built_in">ls</span></span><br><span class="line">dict          example_mysql  for.sh    <span class="built_in">test</span></span><br><span class="line">exam_log4cpp  example_reids  guoba.py  tmptest.cc</span><br><span class="line">wanko@wanko:~/mycode$ valgrind --tool=memcheck --leak-check=full ./test</span><br><span class="line">==90126== Memcheck, a memory error detector</span><br><span class="line">==90126== Copyright (C) 2002-2017, and GNU GPL<span class="string">&#x27;d, by Julian Seward et al.</span></span><br><span class="line"><span class="string">==90126== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info</span></span><br><span class="line"><span class="string">==90126== Command: ./test</span></span><br><span class="line"><span class="string">==90126== </span></span><br><span class="line"><span class="string">==90126== </span></span><br><span class="line"><span class="string">==90126== HEAP SUMMARY:</span></span><br><span class="line"><span class="string">==90126==     in use at exit: 0 bytes in 0 blocks</span></span><br><span class="line"><span class="string">==90126==   total heap usage: 2 allocs, 2 frees, 72,708 bytes allocated</span></span><br><span class="line"><span class="string">==90126== </span></span><br><span class="line"><span class="string">==90126== All heap blocks were freed -- no leaks are possible</span></span><br><span class="line"><span class="string">==90126== </span></span><br><span class="line"><span class="string">==90126== For lists of detected and suppressed errors, rerun with: -s</span></span><br><span class="line"><span class="string">==90126== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)</span></span><br></pre></td></tr></table></figure><h2 id="单例模式的自动释放"><a href="#单例模式的自动释放" class="headerlink" title="单例模式的自动释放"></a>单例模式的自动释放</h2><h3 id="使用友元形式进行设计"><a href="#使用友元形式进行设计" class="headerlink" title="使用友元形式进行设计"></a>使用友元形式进行设计</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">AutoRelease</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> A* <span class="title">myCreateObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            _ptmp = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _ptmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ~<span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">static</span> A* _ptmp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_ptmp = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AutoRelease</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">AutoRelease</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;AutoRelease()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">AutoRelease</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~AutoRelease()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(A::_ptmp == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">delete</span> A::_ptmp;</span><br><span class="line">        A::_ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A* ps1 = A::<span class="built_in">myCreateObj</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ps1 = &quot;</span> &lt;&lt; ps1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    AutoRelease ar;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">ps1 = 0x563e22a51eb0</span></span><br><span class="line"><span class="comment">AutoRelease()</span></span><br><span class="line"><span class="comment">~AutoRelease()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="内部类加静态数据成员形式"><a href="#内部类加静态数据成员形式" class="headerlink" title="内部类加静态数据成员形式"></a>内部类加静态数据成员形式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> A* <span class="title">myCreateObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            _ptmp = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _ptmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">AutoRelease</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">AutoRelease</span>() &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;AutoRelease()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ~<span class="built_in">AutoRelease</span>() &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;~AutoRelease()&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">delete</span> _ptmp;</span><br><span class="line">            _ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> A* _ptmp;</span><br><span class="line">    <span class="type">static</span> AutoRelease _ar;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">A::AutoRelease A::_ar;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A* ps1 = A::<span class="built_in">myCreateObj</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ps1 = &quot;</span> &lt;&lt; ps1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">AutoRelease()</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">ps1 = 0x5572fd4e72c0</span></span><br><span class="line"><span class="comment">~AutoRelease()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="atexit方式"><a href="#atexit方式" class="headerlink" title="atexit方式"></a>atexit方式</h3><p>首先了解一下<code>atexit()</code>函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;void func()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;begin main...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">atexit</span>(func);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;end main...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">begin main...</span></span><br><span class="line"><span class="comment">end main...</span></span><br><span class="line"><span class="comment">void func()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>atexit()</code>函数会注册给定函数类型（参数是 void，返回类型是 void），注册的函数在进程正常结束的时候被调用。函数注册几次就会执行几次。</p><p>那么可以考虑使用该函数进行单例模式的自动释放：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> A* <span class="title">myCreateObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            _ptmp = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">            <span class="built_in">atexit</span>(destroy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _ptmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">delete</span> _ptmp;</span><br><span class="line">        _ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ~<span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">static</span> A* _ptmp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_ptmp = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A* ps1 = A::<span class="built_in">myCreateObj</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ps1 = &quot;</span> &lt;&lt; ps1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">ps1 = 0x563474c77eb0</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在之前的代码中，若处于多线程环境，可能会创建不止一个实例，违背单例模式的初衷。因此可以采用 atexit + 饿汉模式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> A* <span class="title">myCreateObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            _ptmp = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">            <span class="built_in">atexit</span>(destroy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _ptmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void destory()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">delete</span> _ptmp;</span><br><span class="line">        _ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ~<span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">static</span> A* _ptmp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_ptmp = <span class="built_in">myCreateObj</span>(); <span class="comment">// 饿汉模式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A* ps1 = A::<span class="built_in">myCreateObj</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ps1 = &quot;</span> &lt;&lt; ps1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">ps1 = 0x560be12b7eb0</span></span><br><span class="line"><span class="comment">void destory()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="pthread-once-形式"><a href="#pthread-once-形式" class="headerlink" title="pthread_once 形式"></a>pthread_once 形式</h3><p><code>pthread_once</code>函数：在多线程编程环境下，由<code>pthread_once()</code>指定的函数执行且仅执行一次。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> A* <span class="title">myCreateObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">pthread_once</span>(&amp;_once, init);</span><br><span class="line">        <span class="keyword">return</span> _ptmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        _ptmp = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">        <span class="built_in">atexit</span>(destroy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void destory()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">delete</span> _ptmp;</span><br><span class="line">        _ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ~<span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">static</span> A* _ptmp;</span><br><span class="line">    <span class="type">static</span> <span class="type">pthread_once_t</span> _once;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_ptmp = <span class="built_in">myCreateObj</span>(); <span class="comment">// 饿汉模式</span></span><br><span class="line"><span class="type">pthread_once_t</span> A::_once = PTHREAD_ONCE_INIT;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A* ps1 = A::<span class="built_in">myCreateObj</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ps1 = &quot;</span> &lt;&lt; ps1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ g++ tmptest.cc -lpthread</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ ./a.out</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">ps1 = 0x5578fad56eb0</span></span><br><span class="line"><span class="comment">void destory()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面的代码用饿汉模式或是饱汉模式都 OK.</p><p><strong>注意</strong>：上面代码中的<code>&lt;pthread.h&gt;</code>库只能在 linux 下使用。</p><h2 id="string-的底层实现"><a href="#string-的底层实现" class="headerlink" title="string 的底层实现"></a>string 的底层实现</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>三种基本方式：</p><ul><li>Eager Copy（深拷贝）</li><li>COW（写时复制）</li><li>SSO（Short String Optimization 短字符串优化）</li></ul><p><img src="https://s2.loli.net/2024/02/21/a4ZvEIRQKJwtSTf.png" alt="66-1.png"></p><p>COW：只是进行读操作时，浅拷贝；如果需要写操作，再深拷贝。</p><p>写时复制的体现（注意：以下图片是在<strong>较旧的环境</strong>下）：</p><p><img src="https://s2.loli.net/2024/02/21/OcWMwSKpZ9QVeGq.png" alt="66-2.png" title="浅拷贝"></p><p>需要写操作，进行深拷贝：</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/hnI4zYyu_dJD2f" alt="66-3"></p><p>注意在较新环境下并不使用写时复制，而是使用 sso .<br>当字符串的长度小于 16 字节时，放在<strong>栈上</strong>。否则放在<strong>堆上</strong>。</p><p>注意以下代码输出结果的地址前几位：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span>* pInt = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    string s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    string s2 = <span class="string">&quot;helloworldwanko&quot;</span>;</span><br><span class="line">    string s3 = <span class="string">&quot;Welcome to Uptown Berloberg, Hooker.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1&#x27; address = %p\n&quot;</span>, s1.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2&#x27; address = %p\n&quot;</span>, s2.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3&#x27; address = %p\n&quot;</span>, s3.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a = %p\n&quot;</span>, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;pInt = %p\n&quot;</span>, &amp;pInt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pInt = %p\n&quot;</span>, pInt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pInt;</span><br><span class="line">    pInt = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s2 = helloworldwanko</span></span><br><span class="line"><span class="comment">s3 = Welcome to Uptown Berloberg, Hooker.</span></span><br><span class="line"><span class="comment">s1&#x27; address = 0x7ffe48ba02b0</span></span><br><span class="line"><span class="comment">s2&#x27; address = 0x7ffe48ba02d0</span></span><br><span class="line"><span class="comment">s3&#x27; address = 0x558f62abaed0</span></span><br><span class="line"><span class="comment">&amp;a = 0x7ffe48ba0294</span></span><br><span class="line"><span class="comment">&amp;pInt = 0x7ffe48ba0298</span></span><br><span class="line"><span class="comment">pInt = 0x558f62abaeb0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>通常，一个程序里的字符串大都很短小，而在64位机器上，一个 char* 指针就占用了8个字节，所以 SSO 就出现了。其思想是：发生拷贝时要需复制一个指针，但对小字符串来说，直接复制整个字符串比较划算。实现示意图如下：</p><p><img src="https://s2.loli.net/2024/02/21/c3YB2jeCMdb6nsf.png" alt="66-4.png"></p><p>更多细节参考：</p><div class="row"><iframe src="https://drive.google.com/file/d/1tdKtonD6rRBT-UvWMFHrjSmPrFRpYWf9/preview" style="width:100%; height:550px"></iframe></div><h3 id="实现写时复制"><a href="#实现写时复制" class="headerlink" title="实现写时复制"></a>实现写时复制</h3><p>大致写出写时复制的逻辑。大体思路：</p><p><img src="https://s2.loli.net/2024/02/21/R12D7ptInwiuEBd.png" alt="66-5.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::ostream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="type">const</span> String&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>():_pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="number">5</span>]()+<span class="number">4</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">initRefCount</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* pstr)</span><br><span class="line">    :_pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pstr)+<span class="number">5</span>]()+<span class="number">4</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr, pstr);</span><br><span class="line">        <span class="built_in">initRefCount</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; rhs):_pstr(rhs._pstr) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">increseRefCount</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String&amp; <span class="keyword">operator</span> = (<span class="type">const</span> String&amp; rhs) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String&amp; operator = (const String&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == &amp;rhs) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">decreseRefCount</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">getRefCount</span>()) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] (_pstr<span class="number">-4</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _pstr = rhs._pstr; <span class="comment">// 浅拷贝</span></span><br><span class="line">        <span class="built_in">increseRefCount</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRefCount</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> *(<span class="type">int</span>*)(_pstr<span class="number">-4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _pstr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">CharProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">CharProxy</span>(String&amp; self, <span class="type">size_t</span> idx)</span><br><span class="line">                 : _self(self), _idx(idx) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>&amp; <span class="keyword">operator</span> = (<span class="type">const</span> <span class="type">char</span>&amp; ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="type">const</span> CharProxy&amp; rhs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        String&amp; _self;</span><br><span class="line">        <span class="type">size_t</span> _idx;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CharProxy <span class="keyword">operator</span> [] (<span class="type">size_t</span> idx) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">CharProxy</span>(*<span class="keyword">this</span>, idx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">String</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">decreseRefCount</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">getRefCount</span>()) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] (_pstr<span class="number">-4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 双重友元</span></span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="type">const</span> String::CharProxy&amp; rhs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initRefCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        *(<span class="type">int</span>*)(_pstr<span class="number">-4</span>) = <span class="number">1</span>; <span class="comment">// 引用计数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">increseRefCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ++ *(<span class="type">int</span>*)(_pstr<span class="number">-4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">decreseRefCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        -- *(<span class="type">int</span>*)(_pstr<span class="number">-4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">strlen</span>(_pstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* _pstr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="type">const</span> String&amp; rhs) &#123;</span><br><span class="line">    <span class="keyword">if</span>(rhs._pstr) &#123;</span><br><span class="line">        os &lt;&lt; rhs._pstr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="type">char</span>&amp; String::CharProxy::<span class="keyword">operator</span> = (<span class="type">const</span> <span class="type">char</span>&amp; ch) &#123;</span><br><span class="line">    <span class="keyword">if</span>(_idx &gt;= _self.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">char</span> charNull = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> charNull;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(_self.<span class="built_in">getRefCount</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">char</span>* tmp = <span class="keyword">new</span> <span class="type">char</span>[_self.<span class="built_in">size</span>()+<span class="number">5</span>]()+<span class="number">4</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(tmp, _self._pstr);</span><br><span class="line">        _self.<span class="built_in">decreseRefCount</span>();</span><br><span class="line"></span><br><span class="line">        _self._pstr = tmp;</span><br><span class="line">        _self.<span class="built_in">initRefCount</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    _self._pstr[_idx] = ch;  <span class="comment">// 进行写操作</span></span><br><span class="line">    <span class="keyword">return</span> _self._pstr[_idx];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="type">const</span> String::CharProxy&amp; rhs) &#123;</span><br><span class="line">    os &lt;&lt; rhs._self._pstr[rhs._idx];</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">s1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.getRefCount = &quot;</span> &lt;&lt; s1.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1&#x27; address = %p\n&quot;</span>, s1.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    String s2 = s1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.getRefCount = &quot;</span> &lt;&lt; s1.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2.getRefCount = &quot;</span> &lt;&lt; s2.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1&#x27; address = %p\n&quot;</span>, s1.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2&#x27; address = %p\n&quot;</span>, s2.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">String <span class="title">s3</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3.getRefCount = &quot;</span> &lt;&lt; s3.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3&#x27; address = %p\n&quot;</span>, s3.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    s3 = s1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.getRefCount = &quot;</span> &lt;&lt; s1.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2.getRefCount = &quot;</span> &lt;&lt; s2.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3.getRefCount = &quot;</span> &lt;&lt; s3.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1&#x27; address = %p\n&quot;</span>, s1.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2&#x27; address = %p\n&quot;</span>, s2.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3&#x27; address = %p\n&quot;</span>, s3.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;对 s3[0] 执行写操作&quot;</span> &lt;&lt; endl;</span><br><span class="line">    s3[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.getRefCount = &quot;</span> &lt;&lt; s1.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2.getRefCount = &quot;</span> &lt;&lt; s2.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3.getRefCount = &quot;</span> &lt;&lt; s3.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1&#x27; address = %p\n&quot;</span>, s1.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2&#x27; address = %p\n&quot;</span>, s2.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3&#x27; address = %p\n&quot;</span>, s3.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;对 s1[0] 执行读操作&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1[0] = &quot;</span> &lt;&lt; s1[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.getRefCount = &quot;</span> &lt;&lt; s1.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2.getRefCount = &quot;</span> &lt;&lt; s2.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3.getRefCount = &quot;</span> &lt;&lt; s3.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1&#x27; address = %p\n&quot;</span>, s1.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2&#x27; address = %p\n&quot;</span>, s2.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3&#x27; address = %p\n&quot;</span>, s3.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String(const char*)</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s1.getRefCount = 1</span></span><br><span class="line"><span class="comment">s1&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String(const String&amp;)</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s2 = hello</span></span><br><span class="line"><span class="comment">s1.getRefCount = 2</span></span><br><span class="line"><span class="comment">s2.getRefCount = 2</span></span><br><span class="line"><span class="comment">s1&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s2&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String(const char*)</span></span><br><span class="line"><span class="comment">s3 = world</span></span><br><span class="line"><span class="comment">s3.getRefCount = 1</span></span><br><span class="line"><span class="comment">s3&#x27; address = 0x558bc073b2e4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String&amp; operator = (const String&amp;)</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s2 = hello</span></span><br><span class="line"><span class="comment">s3 = hello</span></span><br><span class="line"><span class="comment">s1.getRefCount = 3</span></span><br><span class="line"><span class="comment">s2.getRefCount = 3</span></span><br><span class="line"><span class="comment">s3.getRefCount = 3</span></span><br><span class="line"><span class="comment">s1&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s2&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s3&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对 s3[0] 执行写操作</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s2 = hello</span></span><br><span class="line"><span class="comment">s3 = Hello</span></span><br><span class="line"><span class="comment">s1.getRefCount = 2</span></span><br><span class="line"><span class="comment">s2.getRefCount = 2</span></span><br><span class="line"><span class="comment">s3.getRefCount = 1</span></span><br><span class="line"><span class="comment">s1&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s2&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s3&#x27; address = 0x558bc073b2e4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对 s1[0] 执行读操作</span></span><br><span class="line"><span class="comment">s1[0] = h</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s2 = hello</span></span><br><span class="line"><span class="comment">s3 = Hello</span></span><br><span class="line"><span class="comment">s1.getRefCount = 2</span></span><br><span class="line"><span class="comment">s2.getRefCount = 2</span></span><br><span class="line"><span class="comment">s3.getRefCount = 1</span></span><br><span class="line"><span class="comment">s1&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s2&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s3&#x27; address = 0x558bc073b2e4</span></span><br><span class="line"><span class="comment">~String()</span></span><br><span class="line"><span class="comment">~String()</span></span><br><span class="line"><span class="comment">~String()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>值得一提的是，在使用下标运算符<code>[]</code>时，写时复制要求在 读/写 两种不同的操作下有不同的行为，因此考虑自定义一个新类型，然后重载<code>=</code>和<code>&lt;&lt;</code>。</p><p>这份代码细节拉满，需要细细品味。</p><h2 id="派生类对象的创建与销毁"><a href="#派生类对象的创建与销毁" class="headerlink" title="派生类对象的创建与销毁"></a>派生类对象的创建与销毁</h2><table>  <tbody>    <tr>      <td><strong>继承方式</strong></td>      <td><strong>基类成员访问权限</strong></td>      <td><strong>在派生类中访问权限</strong></td>      <td><strong>派生类对象访问</strong></td>    </tr>    <tr>      <td>公有继承</td>      <td>public<br>protected<br>private</td>      <td>public<br>protected<br>不可直接访问</td>      <td>可直接访问<br>不可直接访问<br>不可直接访问</td>    </tr>    <tr>      <td>保护继承</td>      <td>public<br>protected<br>private</td>      <td>protected<br>protected<br>不可直接访问</td>      <td>不可直接访问</td>    </tr>    <tr>      <td>私有继承</td>      <td>public<br>protected<br>private</td>      <td>private<br>private<br>不可直接访问</td>      <td>不可直接访问</td>    </tr>  </tbody>  <colgroup>    <col>    <col>    <col>    <col>  </colgroup></table><center><font color = red>- - - - - 创建 - - - - -</font></center><p>一、若派生类显式定义构造函数，而基类没有显示定义构造函数，则创建派生类对象时，派生类相应的构造函数会被自动调用，且自动调用基类缺省的无参构造函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>() : _base(<span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">int</span> derived) : _derived(derived) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived(int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _derived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Derived <span class="title">d1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Base()</span></span><br><span class="line"><span class="comment">Derived(int)</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>二、如果派生类没有显式定义构造函数而基类有显示定义构造函数，则基类必须拥有默认构造函数。</p><p>三、如果派生类有构造函数，基类有默认构造函数，则创建派生类的对象时，基类的默认构造函数会自动调用。如果想调用基类的有参构造函数，必须要在派生类构造函数的初始化列表中显示调用基类的有参构造函数。</p><p>四、如果派生类和基类都有构造函数，但基类没有默认的无参构造函数，即基类的构造函数均带有参数，则派生类的每一个构造函数必须在其初始化列表中显示地去调用基类的某个带参的构造函数。</p><center><font color = red>- - - - - 创建END - - - - -</font></center><p><br></p><center><font color = red>- - - - - 销毁 - - - - -</font></center><p>当派生类对象被删除时，派生类的析构函数被执行。析构函数同样不能继承，因此，在执行派生类析构函数时，基类析构函数会被自动调用。执行顺序是先执行派生类的析构函数，再执行基类的析构函数。</p><p>当考虑对象成员时，继承机制下析构函数的调用顺序：</p><ol><li>先调用派生类的析构函数</li><li>再调用派生类中对象成员的析构函数</li><li>最后调用普通基类的析构函数</li></ol><center><font color = red>- - - - - 销毁END - - - - -</font></center><h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void A::show() const&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void B::display() const&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">C</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;C()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void C::print() const&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">C</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~C()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> A, <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">D</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;D()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">D</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~D()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    D d;</span><br><span class="line">    d.<span class="built_in">show</span>();</span><br><span class="line">    d.<span class="built_in">display</span>();</span><br><span class="line">    d.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">B()</span></span><br><span class="line"><span class="comment">C()</span></span><br><span class="line"><span class="comment">D()</span></span><br><span class="line"><span class="comment">void A::show() const</span></span><br><span class="line"><span class="comment">void B::display() const</span></span><br><span class="line"><span class="comment">void C::print() const</span></span><br><span class="line"><span class="comment">~D()</span></span><br><span class="line"><span class="comment">~C()</span></span><br><span class="line"><span class="comment">~B()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>多继承下，基类构造函数的执行顺序与其在派生类构造函数初始化列表中的顺序无关，而与基类被继承的顺序有关。</p><h3 id="成员名冲突的二义性"><a href="#成员名冲突的二义性" class="headerlink" title="成员名冲突的二义性"></a>成员名冲突的二义性</h3><p>解决多继承下函数名字冲突的方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void A::print() const&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void B::print() const&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">C</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;C()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void C::print() const&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">C</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~C()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> A, <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">D</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;D()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">D</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~D()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    D d;</span><br><span class="line">    d.A::<span class="built_in">print</span>();</span><br><span class="line">    d.B::<span class="built_in">print</span>();</span><br><span class="line">    d.C::<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">B()</span></span><br><span class="line"><span class="comment">C()</span></span><br><span class="line"><span class="comment">D()</span></span><br><span class="line"><span class="comment">void A::print() const</span></span><br><span class="line"><span class="comment">void B::print() const</span></span><br><span class="line"><span class="comment">void C::print() const</span></span><br><span class="line"><span class="comment">~D()</span></span><br><span class="line"><span class="comment">~C()</span></span><br><span class="line"><span class="comment">~B()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="菱形继承的二义性"><a href="#菱形继承的二义性" class="headerlink" title="菱形继承的二义性"></a>菱形继承的二义性</h3><p>多基派生中，如果在多条继承路径上有一个共同的基类，如下图所示，不难看出，在D类对象中，会有来自两条不同路径的共同基类（类A）的双重拷贝。</p><p><img src="https://bu.dusays.com/2024/02/23/65d898f824dfd.png" alt="66-6.png"></p><p>菱形继承会导致数据成员的存储二义性，解决方法：使 B 和 C 虚拟继承 A .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下面展示问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dummy code</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">long</span> lx = <span class="number">0</span>):_lx(lx) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A(long = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;lx = &quot;</span> &lt;&lt; _lx &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setVal</span><span class="params">(<span class="type">long</span> value)</span> </span>&#123;</span><br><span class="line">        _lx = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">long</span> _lx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(A) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(A) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(B) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(B) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(C) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(C) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(D) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(D) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    D d;</span><br><span class="line">    d.B::<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    d.C::<span class="built_in">setVal</span>(<span class="number">23</span>);</span><br><span class="line">    d.B::<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    d.C::<span class="built_in">print</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(A) = 8</span></span><br><span class="line"><span class="comment">sizeof(B) = 8</span></span><br><span class="line"><span class="comment">sizeof(C) = 8</span></span><br><span class="line"><span class="comment">sizeof(D) = 16</span></span><br><span class="line"><span class="comment">A(long = 0)</span></span><br><span class="line"><span class="comment">A(long = 0)</span></span><br><span class="line"><span class="comment">lx = 0</span></span><br><span class="line"><span class="comment">lx = 0</span></span><br><span class="line"><span class="comment">lx = 23</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>下面展示解决方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">long</span> lx = <span class="number">0</span>):_lx(lx) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A(long = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;lx = &quot;</span> &lt;&lt; _lx &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setVal</span><span class="params">(<span class="type">long</span> value)</span> </span>&#123;</span><br><span class="line">        _lx = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">long</span> _lx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(A) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(A) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(B) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(B) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(C) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(C) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(D) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(D) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    D d;</span><br><span class="line">    d.B::<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    d.C::<span class="built_in">setVal</span>(<span class="number">23</span>);</span><br><span class="line">    d.B::<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    d.C::<span class="built_in">print</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(A) = 8</span></span><br><span class="line"><span class="comment">sizeof(B) = 16</span></span><br><span class="line"><span class="comment">sizeof(C) = 16</span></span><br><span class="line"><span class="comment">sizeof(D) = 24</span></span><br><span class="line"><span class="comment">A(long = 0)</span></span><br><span class="line"><span class="comment">lx = 0</span></span><br><span class="line"><span class="comment">lx = 23</span></span><br><span class="line"><span class="comment">lx = 23</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面的代码中 sizeof 大小出现变化是由于<strong>虚基指针</strong>。</p><p>或者也可以：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">long</span> lx = <span class="number">0</span>):_lx(lx) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A(long = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;lx = &quot;</span> &lt;&lt; _lx &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setVal</span><span class="params">(<span class="type">long</span> value)</span> </span>&#123;</span><br><span class="line">        _lx = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">long</span> _lx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(A) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(A) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(B) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(B) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(C) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(C) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(D) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(D) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    D d;</span><br><span class="line">    d.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    d.<span class="built_in">setVal</span>(<span class="number">23</span>);</span><br><span class="line">    d.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(A) = 8</span></span><br><span class="line"><span class="comment">sizeof(B) = 16</span></span><br><span class="line"><span class="comment">sizeof(C) = 16</span></span><br><span class="line"><span class="comment">sizeof(D) = 24</span></span><br><span class="line"><span class="comment">A(long = 0)</span></span><br><span class="line"><span class="comment">lx = 0</span></span><br><span class="line"><span class="comment">lx = 23</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>关于虚基指针的图示（转自<a href="https://blog.csdn.net/qq_41431406/article/details/84933450">一颗程序媛0915想上岸</a>）：</p><p><img src="https://bu.dusays.com/2024/04/07/661286c98f852.png" alt="66-6dot1.png"></p><p>若为多继承时，内存布局如下：</p><p><img src="https://bu.dusays.com/2024/04/07/6612871ee1731.png" alt="66-6dot2.png"></p><p>虚继承的内存布局如下：</p><p><img src="https://bu.dusays.com/2024/04/07/6612875b08204.png" alt="66-6dot3.png"></p><p>来看另一种情况：</p><p><img src="https://bu.dusays.com/2024/04/07/661288238ec5f.png" alt="66-6dot6.png"></p><p>若为多继承时，内存布局如下：</p><p><img src="https://bu.dusays.com/2024/04/07/6612887a088ec.png" alt="66-6dot7.png"></p><p>虚继承的内存布局如下：<br>第一个vbptr 存放3个数据，因为指针合并，向距离作用域最近的指针内层合并</p><p><img src="https://bu.dusays.com/2024/04/07/661288c356499.png" alt="66-6dot8.png"></p><h2 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h2><p>杂项知识点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::pair;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    pair&lt;<span class="type">int</span>, string&gt; aka = &#123;<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>&#125;;</span><br><span class="line">    cout &lt;&lt; aka.first &lt;&lt; <span class="string">&quot;   &quot;</span> &lt;&lt; aka.second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1   hello</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="基类与派生类间的转换"><a href="#基类与派生类间的转换" class="headerlink" title="基类与派生类间的转换"></a>基类与派生类间的转换</h2><p>“类型适应”指类型间的关系。“A类适应B类”，意味着 A 类对象能直接用于需要 B 类对象的场合，在这种意义下，<strong>派生类适应基类</strong>，派生类对象适应基类对象，派生类对象的指针和引用也适应基类对象的指针和引用。例如：</p><ul><li>可以把派生类的对象赋值给基类的对象</li><li>可以把基类的引用绑定到派生类的对象</li><li>可以声明基类的指针指向派生类的对象 (向上转型)</li></ul><h2 id="派生类对象间的复制控制"><a href="#派生类对象间的复制控制" class="headerlink" title="派生类对象间的复制控制"></a>派生类对象间的复制控制</h2><p>基类的拷贝构造函数和 operator= 运算符函数不能被继承，因此需要注意:</p><ol><li>如果用户定义了基类的拷贝构造函数，而<strong>没有定义派生类的</strong>拷贝构造函数，那么在用一个派生类对象初始化新的派生类对象时，两对象间的<strong>派生类部分执行缺省</strong>的行为，而两对象间的<strong>基类部分执行用户定义的</strong>基类拷贝构造函数。</li><li>如果用户重载了基类的赋值运算符函数，而<strong>没有重载派生类的</strong>赋值运算符函数，那么在用一个派生类对象给另一个已经存在的派生类对象赋值时，两对象间的<strong>派生类部分执行缺省</strong>的赋值行为，而两对象间的<strong>基类部分执行用户定义的</strong>重载赋值函数。</li><li>如果用户<strong>定义了</strong>派生类的拷贝构造函数或者<strong>重载了</strong>派生类的对象赋值运算符=，则在用已有派生类对象初始化新的派生类对象时，或者在派生类对象间赋值时，将会执行用户定义的派生类的拷贝构造函数或者重载赋值函数，而<strong>不会再自动调用基类的</strong>拷贝构造函数和基类的重载对象赋值运算符，这时，通常需要用户在派生类的拷贝构造函数或者派生类的赋值函数中<strong>显式调用基类的</strong>拷贝构造或赋值运算符函数。</li></ol><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="概念、分类"><a href="#概念、分类" class="headerlink" title="概念、分类"></a>概念、分类</h3><p>多态：对于同一指令，不同对象产生不同行为。</p><p>多态的分类：</p><ul><li>静态多态<ul><li>例如：函数重载、运算符重载、模板</li><li>发生在编译时</li></ul></li><li>动态多态<ul><li>例如：虚函数</li><li>发生在运行时</li></ul></li></ul><p>多态的其他细节例子参考 <a href="https://loveofpeach.github.io/posts/54b4d7a2.html">CppNote</a> .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">double</span> base = <span class="number">0.0</span>): _base(base) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base::_base = &quot;</span> &lt;&lt; _base &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">double</span> base = <span class="number">0.0</span>, <span class="type">double</span> derived = <span class="number">0.0</span>)</span><br><span class="line">          : <span class="built_in">Base</span>(base), _derived(derived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived(double = 0.0, double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::_derived = &quot;</span> &lt;&lt; _derived &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _derived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(Base* pb)</span> </span>&#123;</span><br><span class="line">    pb-&gt;<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Base) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Base) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Derived) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Derived) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">Base <span class="title">base</span><span class="params">(<span class="number">11.11</span>)</span></span>;</span><br><span class="line">    <span class="function">Derived <span class="title">derived</span><span class="params">(<span class="number">22.22</span>, <span class="number">33.33</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">func</span>(&amp;base);</span><br><span class="line">    <span class="built_in">func</span>(&amp;derived);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(Base) = 16</span></span><br><span class="line"><span class="comment">sizeof(Derived) = 24</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Derived(double = 0.0, double = 0.0)</span></span><br><span class="line"><span class="comment">Base::_base = 11.11</span></span><br><span class="line"><span class="comment">Derived::_derived = 33.33</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，sizeof 的大小是虚函数指针的体现。</p><h3 id="虚函数的原理、条件"><a href="#虚函数的原理、条件" class="headerlink" title="虚函数的原理、条件"></a>虚函数的原理、条件</h3><p>虚函数的实现原理：</p><p><img src="https://bu.dusays.com/2024/02/25/65daf6417310d.png" alt="66-7.png"></p><p>虚函数机制的激活条件：</p><ol><li>基类定义虚函数</li><li>派生类重写该虚函数</li><li>创建派生类的对象</li><li>用基类的指针指向（引用绑定）派生类的对象</li><li>使用基类的指针（引用）调用该虚函数</li></ol><p>不能设置为虚函数的函数：</p><ul><li>普通函数（自由函数、全局函数）</li><li>内联成员函数</li><li>静态成员函数</li><li>友元函数（分情况）<ul><li>若该友元函数本身是一个普通函数，则不能被设置为虚函数</li><li>若该友元函数本身是另外一个类的成员函数，则可以被设置为虚函数</li></ul></li><li>构造函数</li></ul><h3 id="虚函数的访问"><a href="#虚函数的访问" class="headerlink" title="虚函数的访问"></a>虚函数的访问</h3><p>一、指针访问</p><p>即上例。</p><p>二、引用访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">double</span> base = <span class="number">0.0</span>): _base(base) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base::_base = &quot;</span> &lt;&lt; _base &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">double</span> base = <span class="number">0.0</span>, <span class="type">double</span> derived = <span class="number">0.0</span>)</span><br><span class="line">          : <span class="built_in">Base</span>(base), _derived(derived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived(double = 0.0, double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::_derived = &quot;</span> &lt;&lt; _derived &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _derived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(Base&amp; pb)</span> </span>&#123;</span><br><span class="line">    pb.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Base) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Base) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Derived) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Derived) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">Base <span class="title">base</span><span class="params">(<span class="number">11.11</span>)</span></span>;</span><br><span class="line">    <span class="function">Derived <span class="title">derived</span><span class="params">(<span class="number">22.22</span>, <span class="number">33.33</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">func</span>(base);</span><br><span class="line">    <span class="built_in">func</span>(derived);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(Base) = 16</span></span><br><span class="line"><span class="comment">sizeof(Derived) = 24</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Derived(double = 0.0, double = 0.0)</span></span><br><span class="line"><span class="comment">Base::_base = 11.11</span></span><br><span class="line"><span class="comment">Derived::_derived = 33.33</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>三、对象访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">double</span> base = <span class="number">0.0</span>): _base(base) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base::_base = &quot;</span> &lt;&lt; _base &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">double</span> base = <span class="number">0.0</span>, <span class="type">double</span> derived = <span class="number">0.0</span>)</span><br><span class="line">          : <span class="built_in">Base</span>(base), _derived(derived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived(double = 0.0, double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::_derived = &quot;</span> &lt;&lt; _derived &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _derived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Base) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Base) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Derived) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Derived) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">Base <span class="title">base</span><span class="params">(<span class="number">11.11</span>)</span></span>;</span><br><span class="line">    <span class="function">Derived <span class="title">derived</span><span class="params">(<span class="number">22.22</span>, <span class="number">33.33</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    base.<span class="built_in">print</span>();</span><br><span class="line">    derived.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(Base) = 16</span></span><br><span class="line"><span class="comment">sizeof(Derived) = 24</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Derived(double = 0.0, double = 0.0)</span></span><br><span class="line"><span class="comment">Base::_base = 11.11</span></span><br><span class="line"><span class="comment">Derived::_derived = 33.33</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>注意，这里并没有体现出多态。</p><p>和普通函数一样，虚函数一样可以通过对象名来调用，此时编译器采用的是<strong>静态联编</strong>。</p><p>四、成员函数中访问</p><p>例子不难理解，耐心看：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">double</span> base = <span class="number">0.0</span>): _base(base) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base::_base = &quot;</span> &lt;&lt; _base &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Base::<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">double</span> base = <span class="number">0.0</span>, <span class="type">double</span> derived = <span class="number">0.0</span>)</span><br><span class="line">          : <span class="built_in">Base</span>(base), _derived(derived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived(double = 0.0, double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::_derived = &quot;</span> &lt;&lt; _derived &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _derived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Base) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Base) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Derived) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Derived) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">Base <span class="title">base</span><span class="params">(<span class="number">11.11</span>)</span></span>;</span><br><span class="line">    <span class="function">Derived <span class="title">derived</span><span class="params">(<span class="number">22.22</span>, <span class="number">33.33</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    Base* pbase = &amp;base;</span><br><span class="line">    pbase-&gt;<span class="built_in">func1</span>();</span><br><span class="line">    pbase-&gt;<span class="built_in">func2</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    Base* pbase2 = &amp;derived;</span><br><span class="line">    pbase2-&gt;<span class="built_in">func1</span>();</span><br><span class="line">    pbase2-&gt;<span class="built_in">func2</span>();    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(Base) = 16</span></span><br><span class="line"><span class="comment">sizeof(Derived) = 24</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Derived(double = 0.0, double = 0.0)</span></span><br><span class="line"><span class="comment">Base::_base = 11.11</span></span><br><span class="line"><span class="comment">Base::_base = 11.11</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Derived::_derived = 33.33</span></span><br><span class="line"><span class="comment">Base::_base = 22.22</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>五、构造函数和析构函数中访问</p><p>它们所调用的虚函数是自己类中定义的函数，如果在自己的类中没有实现该函数，则调用的是基类中的虚函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Grandpa</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Grandpa</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Grandpa()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Grandpa</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Grandpa()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Grandpa::func1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Grandpa::func2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span></span><br><span class="line">    : <span class="keyword">public</span> Grandpa</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Father</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Father()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">func1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Father</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Father()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">func2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Father::func1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Father::func2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span></span><br><span class="line">    : <span class="keyword">public</span> Father</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Son</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Son</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Son()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son::func1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son::func2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Son son;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Grandpa()</span></span><br><span class="line"><span class="comment">Father()</span></span><br><span class="line"><span class="comment">Father::func1()</span></span><br><span class="line"><span class="comment">Son()</span></span><br><span class="line"><span class="comment">~Son()</span></span><br><span class="line"><span class="comment">~Father()</span></span><br><span class="line"><span class="comment">Father::func2()</span></span><br><span class="line"><span class="comment">~Grandpa()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>参见 <a href="https://loveofpeach.github.io/posts/54b4d7a2.html">CppNote</a> .</p><p>构造函数用<code>protected</code>修饰的类，也称为抽象类。</p><h2 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h2><p>虽然构造函数不能被定义成虚函数，但<strong>析构函数可以定义为虚函数</strong>，一般来说，如果类中定义了虚函数，析构函数也应被定义为虚析构函数，尤其是类内有申请的动态内存，需要清理和释放的时候。</p><p>来看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">const</span> <span class="type">char</span>* pbase)</span><br><span class="line">        :_pbase(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pbase)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pbase, pbase);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pbase) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Base::_pbase = &quot;</span> &lt;&lt; _pbase &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pbase) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pbase;</span><br><span class="line">            _pbase = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pbase;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">const</span> <span class="type">char</span>* pbase, <span class="type">const</span> <span class="type">char</span>* pderived)</span><br><span class="line">           :<span class="built_in">Base</span>(pbase), _pderived(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pderived)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived(const char*, const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pderived, pderived);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pderived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived::_pderived = &quot;</span> &lt;&lt; _pderived &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pderived) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pderived;</span><br><span class="line">            _pderived = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pderived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Base* pbase = <span class="keyword">new</span> <span class="built_in">Derived</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">    pbase-&gt;<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pbase;</span><br><span class="line">    pbase = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Base(const char*)</span></span><br><span class="line"><span class="comment">Derived(const char*, const char*)</span></span><br><span class="line"><span class="comment">Derived::_pderived = world</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>~Derived()</code>没有执行，内存泄露。</p><p>可以采用的不优雅的方法是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">const</span> <span class="type">char</span>* pbase)</span><br><span class="line">        :_pbase(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pbase)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pbase, pbase);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pbase) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Base::_pbase = &quot;</span> &lt;&lt; _pbase &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pbase) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pbase;</span><br><span class="line">            _pbase = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pbase;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">const</span> <span class="type">char</span>* pbase, <span class="type">const</span> <span class="type">char</span>* pderived)</span><br><span class="line">           :<span class="built_in">Base</span>(pbase), _pderived(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pderived)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived(const char*, const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pderived, pderived);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pderived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived::_pderived = &quot;</span> &lt;&lt; _pderived &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pderived) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pderived;</span><br><span class="line">            _pderived = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pderived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Base* pbase = <span class="keyword">new</span> <span class="built_in">Derived</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">    pbase-&gt;<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">dynamic_cast</span>&lt;Derived*&gt;(pbase);</span><br><span class="line">    pbase = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Base(const char*)</span></span><br><span class="line"><span class="comment">Derived(const char*, const char*)</span></span><br><span class="line"><span class="comment">Derived::_pderived = world</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>另一种方法是，使用虚析构函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">const</span> <span class="type">char</span>* pbase)</span><br><span class="line">        :_pbase(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pbase)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pbase, pbase);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pbase) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Base::_pbase = &quot;</span> &lt;&lt; _pbase &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pbase) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pbase;</span><br><span class="line">            _pbase = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pbase;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">const</span> <span class="type">char</span>* pbase, <span class="type">const</span> <span class="type">char</span>* pderived)</span><br><span class="line">           :<span class="built_in">Base</span>(pbase), _pderived(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pderived)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived(const char*, const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pderived, pderived);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pderived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived::_pderived = &quot;</span> &lt;&lt; _pderived &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pderived) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pderived;</span><br><span class="line">            _pderived = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pderived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Base* pbase = <span class="keyword">new</span> <span class="built_in">Derived</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">    pbase-&gt;<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pbase;  <span class="comment">// 体现多态</span></span><br><span class="line">    pbase = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Base(const char*)</span></span><br><span class="line"><span class="comment">Derived(const char*, const char*)</span></span><br><span class="line"><span class="comment">Derived::_pderived = world</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="重载、隐藏、覆盖"><a href="#重载、隐藏、覆盖" class="headerlink" title="重载、隐藏、覆盖"></a>重载、隐藏、覆盖</h2><p>重载：在同一个作用域中，函数的名字相同，但是参数列表不一样（包括参数的个数、参数类型、参数顺序）</p><p>重定义（重写、覆盖）：发生在基类与派生类中，<strong>必须是虚函数</strong>，函数名字相同，参数列表也相同。</p><p>隐藏：发生在基类与派生类中，派生中的函数与基类中的函数<strong>名字相同</strong>。（至于是不是虚函数，至于参数列表是不是一样的没有关系），派生类的数据成员也可以隐藏基类中的同名数据成员。</p><p>看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">double</span> mem = <span class="number">0.0</span>)</span><br><span class="line">    : _member(mem)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base::_member = &quot;</span> &lt;&lt; _member &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _member;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">double</span> mem = <span class="number">0.0</span>):<span class="built_in">Base</span>(mem)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived(double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::x = &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Derived <span class="title">d</span><span class="params">(<span class="number">11.11</span>)</span></span>;</span><br><span class="line">    <span class="comment">// d.print();  // 不ok</span></span><br><span class="line">    d.<span class="built_in">print</span>(<span class="number">1</span>);  <span class="comment">// ok</span></span><br><span class="line">    d.Base::<span class="built_in">print</span>(); <span class="comment">// ok</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="虚表存在性的验证"><a href="#虚表存在性的验证" class="headerlink" title="虚表存在性的验证"></a>虚表存在性的验证</h2><p>参见 66-7.png</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">long</span> base = <span class="number">0</span>):_base(base) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(long = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void Base::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void Base::g()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void Base::h()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">long</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>:<span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">long</span> base = <span class="number">0</span>, <span class="type">long</span> derived = <span class="number">0</span>)</span><br><span class="line">    :<span class="built_in">Base</span>(base), _derived(derived) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived(long = 0, long = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void Derived::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void Derived::g()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">h</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void Derived::h()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">long</span> _derived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Derived <span class="title">myDerived</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;对象 myDerived 的地址：%p\n&quot;</span>, &amp;myDerived);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;对象 myDerived 的地址：%p\n&quot;</span>, (<span class="type">long</span>*)&amp;myDerived);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;虚表的地址：%p\n&quot;</span>,(<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第一个虚函数的入口地址：%p\n&quot;</span>,(<span class="type">long</span>*)*(<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*pFunc)</span> <span class="params">(<span class="type">void</span>)</span></span>; <span class="comment">// 函数指针</span></span><br><span class="line">    pFunc pf = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    pf = (pFunc)*((<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived);</span><br><span class="line">    <span class="built_in">pf</span>(); <span class="comment">// 调用</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第一个虚函数的入口地址：%p\n&quot;</span>,pf);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    pf = (pFunc)*((<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">pf</span>(); <span class="comment">// 调用</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第二个虚函数的入口地址：%p\n&quot;</span>,pf);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    pf = (pFunc)*((<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived + <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">pf</span>(); <span class="comment">// 调用</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第三个虚函数的入口地址：%p\n&quot;</span>,pf);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">Derived <span class="title">myDerived2</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;对象 myDerived2 的地址：%p\n&quot;</span>, &amp;myDerived2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;对象 myDerived2 的地址：%p\n&quot;</span>, (<span class="type">long</span>*)&amp;myDerived2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;虚表的地址：%p\n&quot;</span>,(<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第一个虚函数的入口地址：%p\n&quot;</span>,(<span class="type">long</span>*)*(<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Base(long = 0)</span></span><br><span class="line"><span class="comment">Derived(long = 0, long = 0)</span></span><br><span class="line"><span class="comment">对象 myDerived 的地址：0x7ffe729314c0</span></span><br><span class="line"><span class="comment">对象 myDerived 的地址：0x7ffe729314c0</span></span><br><span class="line"><span class="comment">虚表的地址：0x55da8aeb5d00</span></span><br><span class="line"><span class="comment">第一个虚函数的入口地址：0x55da8aeb3778</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void Derived::f()</span></span><br><span class="line"><span class="comment">第一个虚函数的入口地址：0x55da8aeb3778</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void Derived::g()</span></span><br><span class="line"><span class="comment">第二个虚函数的入口地址：0x55da8aeb37b6</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void Derived::h()</span></span><br><span class="line"><span class="comment">第三个虚函数的入口地址：0x55da8aeb37f4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Base(long = 0)</span></span><br><span class="line"><span class="comment">Derived(long = 0, long = 0)</span></span><br><span class="line"><span class="comment">对象 myDerived2 的地址：0x7ffe729314e0</span></span><br><span class="line"><span class="comment">对象 myDerived2 的地址：0x7ffe729314e0</span></span><br><span class="line"><span class="comment">虚表的地址：0x55da8aeb5d00</span></span><br><span class="line"><span class="comment">第一个虚函数的入口地址：0x55da8aeb3778</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面代码可以看出，对于普通单继承，虚表只有一张，位于只读段。</p><h2 id="作业-词频统计"><a href="#作业-词频统计" class="headerlink" title="作业-词频统计"></a>作业-词频统计</h2><p>之前的作业，再用 map 实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::cerr;</span><br><span class="line"><span class="keyword">using</span> std::ifstream;</span><br><span class="line"><span class="keyword">using</span> std::ofstream;</span><br><span class="line"><span class="keyword">using</span> std::istringstream;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dictionary</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Dictionary</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">readFile</span><span class="params">(<span class="type">const</span> string&amp; ifileName)</span> </span>&#123;</span><br><span class="line">        <span class="function">ifstream <span class="title">ifs</span><span class="params">(ifileName)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(!ifs.<span class="built_in">good</span>()) &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;file &quot;</span> &lt;&lt; ifileName &lt;&lt; <span class="string">&quot;open failed.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        string line;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(ifs, line)) &#123;</span><br><span class="line">            string word;</span><br><span class="line">            <span class="function">istringstream <span class="title">iss</span><span class="params">(line)</span></span>;</span><br><span class="line">            <span class="keyword">while</span>(iss &gt;&gt; word) &#123;</span><br><span class="line">                string new_word = <span class="built_in">process_word</span>(word);</span><br><span class="line">                <span class="built_in">updmap</span>(new_word);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ifs.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">store</span><span class="params">(<span class="type">const</span> string&amp; ofileName)</span> </span>&#123;</span><br><span class="line">        <span class="function">ofstream <span class="title">ofs</span><span class="params">(ofileName)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(!ofs.<span class="built_in">good</span>()) &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;file &quot;</span> &lt;&lt; ofileName &lt;&lt; <span class="string">&quot;open failed.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = word_cnt.<span class="built_in">cbegin</span>();</span><br><span class="line">        <span class="keyword">for</span>(; it != word_cnt.<span class="built_in">cend</span>(); it++) &#123;</span><br><span class="line">            ofs &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        ofs.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    map&lt;string,<span class="type">unsigned</span> <span class="type">long</span>&gt; word_cnt;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">process_word</span><span class="params">(<span class="type">const</span> string&amp; word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; word.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">isalpha</span>(word[i])) <span class="keyword">return</span> <span class="built_in">string</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> word;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">updmap</span><span class="params">(<span class="type">const</span> string&amp; tobeInsert)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tobeInsert == <span class="built_in">string</span>()) <span class="keyword">return</span>;</span><br><span class="line">        word_cnt[tobeInsert] ++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Dictionary myDic;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;before reading...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">time_t</span> beg = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">    myDic.<span class="built_in">readFile</span>(<span class="string">&quot;The_Holy_Bible.txt&quot;</span>);</span><br><span class="line">    <span class="type">time_t</span> end  = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;time : &quot;</span> &lt;&lt; (end - beg) &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;after reading...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    myDic.<span class="built_in">store</span>(<span class="string">&quot;dictMap.dat&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="作业-文本查询"><a href="#作业-文本查询" class="headerlink" title="作业-文本查询"></a>作业-文本查询</h2><p>该程序将读取用户指定的任意文本文件【当前目录下的china_daily.txt】，然后允许用户从该文件中查找单词。查询的结果是该单词出现的次数，并列出每次出现所在的行。如果某单词在同一行中多次出现，程序将只显示该行一次。行号按升序显示。</p><p>要求：<br>a、它必须允许用户指明要处理的文件名字。<br>b、程序将存储该文件的内容，以便输出每个单词所在的原始行。<br>c、它必须将每一行分解为各个单词，并记录每个单词所在的所有行。在输出行号时，应保证以升序输出，并且不重复。<br>d、对特定单词的查询将返回出现该单词的所有行的行号。<br>e、输出某单词所在的行文本时，程序必须能根据给定的行号从输入文件中获取相应的行。</p><p>文本内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">1.Shenzhen-HK stock link &#x27;likely in second quarter&#x27;: UBS</span><br><span class="line"></span><br><span class="line">The Chinese mainland will likely announce the launch of the much-anticipated </span><br><span class="line">stock trading link between the Shenzhen and Hong Kong exchanges in the second </span><br><span class="line">quarter of the year, further opening the mainland&#x27;s stock market to overseas </span><br><span class="line">investors, a senior analyst at UBS Securities said on Wednesday.</span><br><span class="line"></span><br><span class="line">If the link is launched this year, it would mean that about 70 percent of market </span><br><span class="line">capitalization of the A shares will be available to overseas investors who already </span><br><span class="line">gained access to the mainland market through the existing Shanghai-Hong Kong </span><br><span class="line">Stock Connect, said Gao Ting, chief China equities strategist at UBS Securities.</span><br><span class="line"></span><br><span class="line">The link will broaden investors&#x27; stock selection in the mainland as the Shenzhen </span><br><span class="line">market, unlike Shanghai, is home to many high-tech, innovative companies and </span><br><span class="line">private firms with high growth potential, Gao said.</span><br><span class="line"></span><br><span class="line">&quot;The trading link will increase the investment opportunities for overseas investors </span><br><span class="line">in sectors including healthcare, consumption, material and information technology,&quot; </span><br><span class="line">he said at a news conference in Beijing.</span><br><span class="line"></span><br><span class="line">Premier Li Keqiang said in March that the central government will seek to launch the </span><br><span class="line">Shenzhen-Hong Kong Stock Connect this year.</span><br><span class="line"></span><br><span class="line">Bloomberg reported earlier citing people familiar with the matter that the launch </span><br><span class="line">of the trading link may be announced before July. It quoted a spokesman for the </span><br><span class="line">Hong Kong Exchanges &amp; Clearing Ltd as saying that a preparatory period of three to </span><br><span class="line">four months will be needed following the announcement of regulatory approval.</span><br><span class="line"></span><br><span class="line">While overseas investors can already invest in the mainland&#x27;s stock market under the </span><br><span class="line">Qualified Foreign Institutional Investors program, the launch of the Shenzhen-Hong </span><br><span class="line">Kong Stock Connect still holds symbolic significance as it will signal a further</span><br><span class="line"> opening of the capital market, analysts said.</span><br><span class="line"></span><br><span class="line">Zhao Wenli, an analyst at China Merchants Securities (HK) Co Ltd, said in a </span><br><span class="line">research note that good quality and reasonably priced small and mid-cap stocks </span><br><span class="line">under the trading link will attract greater attention from foreign investors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.Going abroad? Don&#x27;t forget your instant noodles</span><br><span class="line"></span><br><span class="line">Chinese travelers like to take instant noodles with them while travelling abroad, </span><br><span class="line">according to a report by Hong Kong Economic Times.</span><br><span class="line">And the favorite items travelers like to bring with them in their luggage differed </span><br><span class="line">greatly depending on their nationalities, according to a survey conducted by travel </span><br><span class="line">website Lowcost Holidays, which sampled 7,500 travelers from 29 countries and regions.</span><br><span class="line"></span><br><span class="line">Most of the items were edible, partially because travelers want a taste of home </span><br><span class="line">wherever they go, such as kimchi for 55 percent of South Koreans, cheese for 53 </span><br><span class="line">percent of French, coffee for 64 percent of Italians, tea bags for 48 percent of </span><br><span class="line">British, and miso soup (a very popular soup) for 56 percent of Japanese.</span><br><span class="line"></span><br><span class="line">Others choices were somewhat surprising. Sixty-six percent of Belgians brought bath </span><br><span class="line">towels for scrubbing their body, 32 percent of Americans brought toilet paper, </span><br><span class="line">37 percent of Russians packed cards, and 30 percent of Swiss, their Swiss knives.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.Popular eatery&#x27;s duck tastes flight online</span><br><span class="line"></span><br><span class="line">Quanjude, China&#x27;s iconic restaurant chain for original Peking roast duck with a </span><br><span class="line">history since 1864, has embraced the nation&#x27;s &quot;Internet Plus&quot; strategy, with a new </span><br><span class="line">online platform that features duck rolls and about 30 other dishes.</span><br><span class="line">&quot;Internet Plus&quot; has sparked integration of the Internet with traditional industries, </span><br><span class="line">and the food and beverage business has been no exception. In the catering and </span><br><span class="line">dining industry, the past year has witnessed a speedy market increase in online </span><br><span class="line">ordering, delivery and payment.</span><br><span class="line"></span><br><span class="line">&quot;Chinese people say life is all about clothing, eating, housing and traffic. </span><br><span class="line">The Internet has changed all the other three industries before it started to change </span><br><span class="line">dining and catering industry very recently, and Quanjude has been adapting into the new environment to make most out of it,&quot; says Xu Jia, chief accounting officer </span><br><span class="line">with Quanjude and chairman of a new joint-venture company that is pursuing the online takeout and e-commerce market.</span><br><span class="line"></span><br><span class="line">Recently, the State-owned restaurant chain announced in Beijing that it established </span><br><span class="line">the company, Yage Technology Inc, in October 2015 with Chongqing Kuangcao Technology </span><br><span class="line">Inc, an online-service company based in Chongqing.</span><br><span class="line"></span><br><span class="line">&quot;We believe with our time-honored brand image, experienced artisan cooking skills, </span><br><span class="line">detail-oriented service and superb supply chain, we will succeed in this new sector,</span><br><span class="line">&quot; Xu says, &quot;because even in the era of the Internet, what matters most in the </span><br><span class="line">industry is still the food and service.&quot;</span><br><span class="line"></span><br><span class="line">After more than a year&#x27;s research and development, the new company has developed patented </span><br><span class="line">techniques to make high-quality Peking roast duck rolls available for takeout diners, </span><br><span class="line">testing the product in a six-month pilot project in Chongqing.</span><br><span class="line"></span><br><span class="line">Under the brand name Xiaoyage, literally &quot;little duck brother&quot;, the online-ordered </span><br><span class="line">duck rolls are made in Quanjude restaurants, with the same recipe and ingredients </span><br><span class="line">as rolls served in Quanjude restaurants.</span><br><span class="line"></span><br><span class="line">At home or work, diners can reheat the duck rolls to 65 C in six minutes, using </span><br><span class="line">a special bag that generates steam when water is poured on it.</span><br><span class="line"></span><br><span class="line">The takeout duck rolls taste almost the same as those served in a Quanjude restaurant, </span><br><span class="line">according to Yang Aixiang, general manager with Yage Technology.</span><br><span class="line"></span><br><span class="line">The package costs 200 yuan ($31) each, and apart from the duck dish, there are </span><br><span class="line">also more than 30 signature dishes of Quanjude available through online ordering </span><br><span class="line">channels, such as mustard duck feet and spicy sliced duck wings. All can be ordered </span><br><span class="line">through the official WeChat account (xiaoyage222) and the Baidu Takeaway platform.</span><br><span class="line"></span><br><span class="line">Authorities in several municipalities have posed new regulations on speed and route </span><br><span class="line">limits for delivery vehicles, including Beijing, the first and most important market for Quanjude Takeout and e-commerce.</span><br><span class="line"></span><br><span class="line">Yang Xun, a publicist with Baidu Takeout, which handles delivery service of </span><br><span class="line">Quanjude&#x27;s takeout delicacies, says all their deliverymen will obey laws and </span><br><span class="line">regulations to ensure best service for diners, including adjusting routes to </span><br><span class="line">avoid barred roads for delivery vehicles.</span><br></pre></td></tr></table></figure><p>我的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::ifstream;</span><br><span class="line"><span class="keyword">using</span> std::ofstream;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::stringstream;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::map;</span><br><span class="line"><span class="keyword">using</span> std::set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextQuery</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TextQuery</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">readFile</span><span class="params">(<span class="type">const</span> string&amp; filename)</span> </span>&#123;</span><br><span class="line">        <span class="function">ifstream <span class="title">ifs</span><span class="params">(filename)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(!ifs.<span class="built_in">good</span>()) &#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;file &quot;</span> &lt;&lt; filename &lt;&lt; <span class="string">&quot;open filed.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        string line;</span><br><span class="line">        <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(ifs, line)) &#123;</span><br><span class="line">            idx++;</span><br><span class="line">            _lines.<span class="built_in">push_back</span>(line);</span><br><span class="line">            <span class="function">stringstream <span class="title">ssm</span><span class="params">(line)</span></span>;</span><br><span class="line">            string word;</span><br><span class="line">            <span class="keyword">while</span>(ssm &gt;&gt; word) &#123;</span><br><span class="line">                _word2Numbers[word].<span class="built_in">insert</span>(idx);</span><br><span class="line">                _dict[word]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ifs.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">const</span> string&amp; word)</span> </span>&#123;</span><br><span class="line">        <span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;output.dat&quot;</span>)</span></span>;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;the word &#x27;&quot;</span> &lt;&lt; word &lt;&lt; <span class="string">&quot;&#x27; occurs &quot;</span> &lt;&lt; _dict[word] &lt;&lt; <span class="string">&quot; times.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">auto</span> it = _word2Numbers[word].<span class="built_in">cbegin</span>();</span><br><span class="line">        <span class="keyword">for</span>(; it != _word2Numbers[word].<span class="built_in">cend</span>(); it++) &#123;</span><br><span class="line">            ofs &lt;&lt; <span class="string">&quot;(line &quot;</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;) &quot;</span> &lt;&lt; _lines[(*it)<span class="number">-1</span>] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        ofs.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;string&gt; _lines; </span><br><span class="line">    map&lt;string, set&lt;<span class="type">int</span>&gt; &gt; _word2Numbers;</span><br><span class="line">    map&lt;string, <span class="type">int</span>&gt; _dict;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">   TextQuery tq;</span><br><span class="line">   tq.<span class="built_in">readFile</span>(<span class="string">&quot;china_daily.txt&quot;</span>);</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;input the word you want to query: &quot;</span>;</span><br><span class="line">   string queryWord;</span><br><span class="line">   std::cin &gt;&gt; queryWord;</span><br><span class="line">   tq.<span class="built_in">query</span>(queryWord);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">the word &#x27;for&#x27; occurs 14 times.</span><br><span class="line">(line 17) &quot;The trading link will increase the investment opportunities for overseas investors </span><br><span class="line">(line 25) of the trading link may be announced before July. It quoted a spokesman for the </span><br><span class="line">(line 49) wherever they go, such as kimchi for 55 percent of South Koreans, cheese for 53 </span><br><span class="line">(line 50) percent of French, coffee for 64 percent of Italians, tea bags for 48 percent of </span><br><span class="line">(line 51) British, and miso soup (a very popular soup) for 56 percent of Japanese.</span><br><span class="line">(line 54) towels for scrubbing their body, 32 percent of Americans brought toilet paper, </span><br><span class="line">(line 60) Quanjude, China&#x27;s iconic restaurant chain for original Peking roast duck with a </span><br><span class="line">(line 83) techniques to make high-quality Peking roast duck rolls available for takeout diners, </span><br><span class="line">(line 102) limits for delivery vehicles, including Beijing, the first and most important market for Quanjude Takeout and e-commerce.</span><br><span class="line">(line 106) regulations to ensure best service for diners, including adjusting routes to </span><br><span class="line">(line 107) avoid barred roads for delivery vehicles.</span><br></pre></td></tr></table></figure><p>可以用自带的记事本等软件，查找单词，验证结果的正确性。</p><p>注意，这里按照要求，必须是整个单词匹配，而不需要返回仅含有子串的单词。</p><h2 id="多基派生的二义性"><a href="#多基派生的二义性" class="headerlink" title="多基派生的二义性"></a>多基派生的二义性</h2><p>来看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;virtual void A::a()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;virtual void A::b()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;virtual void A::c()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;virtual void B::a()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;virtual void B::b()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void B::c()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">d</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void B::d()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="keyword">public</span> A, <span class="keyword">public</span> B &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;virtual void C::a()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void C::c()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">d</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void C::d()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(A) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(A) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(B) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(B) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(C) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(C) &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    C c;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    A* pa = &amp;c;</span><br><span class="line">    pa-&gt;<span class="built_in">a</span>();</span><br><span class="line">    pa-&gt;<span class="built_in">b</span>();</span><br><span class="line">    pa-&gt;<span class="built_in">c</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    B* pb = &amp;c;</span><br><span class="line">    pb-&gt;<span class="built_in">a</span>();   <span class="comment">// C::a()</span></span><br><span class="line">    pb-&gt;<span class="built_in">b</span>();   <span class="comment">// B::b()</span></span><br><span class="line">    pb-&gt;<span class="built_in">c</span>();   <span class="comment">// B::c()</span></span><br><span class="line">    pb-&gt;<span class="built_in">d</span>();   <span class="comment">// B::d()</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    C* pc = &amp;c;</span><br><span class="line">    pc-&gt;<span class="built_in">a</span>();</span><br><span class="line">    <span class="comment">// pc-&gt;b();   二义性</span></span><br><span class="line">    pc-&gt;A::<span class="built_in">b</span>();</span><br><span class="line">    pc-&gt;B::<span class="built_in">b</span>();</span><br><span class="line">    pc-&gt;<span class="built_in">c</span>();</span><br><span class="line">    pc-&gt;<span class="built_in">d</span>();  <span class="comment">// 隐藏</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(A) = 8</span></span><br><span class="line"><span class="comment">sizeof(B) = 8</span></span><br><span class="line"><span class="comment">sizeof(C) = 16</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">virtual void C::a()</span></span><br><span class="line"><span class="comment">virtual void A::b()</span></span><br><span class="line"><span class="comment">void C::c()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">virtual void C::a()</span></span><br><span class="line"><span class="comment">virtual void B::b()</span></span><br><span class="line"><span class="comment">void B::c()</span></span><br><span class="line"><span class="comment">void B::d()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">virtual void C::a()</span></span><br><span class="line"><span class="comment">virtual void A::b()</span></span><br><span class="line"><span class="comment">virtual void B::b()</span></span><br><span class="line"><span class="comment">void C::c()</span></span><br><span class="line"><span class="comment">void C::d()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>原理：</p><p><img src="https://s2.loli.net/2024/04/12/ptZ3KCfBejHkiMh.png" alt="66-8.png"></p><h2 id="多态之内存布局"><a href="#多态之内存布局" class="headerlink" title="多态之内存布局"></a>多态之内存布局</h2><iframe  id="ppt"  width="100%"  onload="autoChange()"  src="https://onedrive.live.com/embed?resid=C7419D744EAAFF4C%214407&authkey=!AFPzvDNiv6rVlMY&em=2"  frameborder="0"></iframe><script>  function autoChange() {    let ifm = document.getElementById("ppt");    ifm.height = (ifm.clientWidth / 16) * 9 + 24;  }  window.onresize = autoChange;</script><p>注，参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base1</span>()</span><br><span class="line">        : _iBase1(<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base1::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base1::g()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">h</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base1::h()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _iBase1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base2</span>()</span><br><span class="line">        : _iBase2(<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base2::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base2::g()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">h</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base2::h()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _iBase2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base3</span>()</span><br><span class="line">        : _iBase3(<span class="number">1000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base3::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base3::g()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">h</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base3::h()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _iBase3;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span></span><br><span class="line">    : <span class="keyword">virtual</span> <span class="keyword">public</span> Base1,</span><br><span class="line">      <span class="keyword">public</span> Base2,</span><br><span class="line">      <span class="keyword">public</span> Base3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>()</span><br><span class="line">        : _iDerived(<span class="number">10000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::g1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _iDerived;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 23d1</span></span><br></pre></td></tr></table></figure><p>注2，参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>(): _ib(<span class="number">10</span>), _cb(<span class="string">&#x27;B&#x27;</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Bf</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B::Bf()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _ib;</span><br><span class="line">    <span class="type">char</span> _cb;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B1</span></span><br><span class="line">    : <span class="comment">/*virtual*/</span> <span class="keyword">public</span> B</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B1</span>(): _ib1(<span class="number">100</span>), _cb1(<span class="string">&#x27;1&#x27;</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B1::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B1::f1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Bf1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B1::Bf1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _ib1;</span><br><span class="line">    <span class="type">char</span> _cb1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B2</span></span><br><span class="line">    : <span class="comment">/*virtual*/</span> <span class="keyword">public</span> B</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B2</span>(): _ib2(<span class="number">1000</span>), _cb2(<span class="string">&#x27;2&#x27;</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B2::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span></span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">f2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B2::f2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span></span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">Bf2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B2::Bf2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _ib2;</span><br><span class="line">    <span class="type">char</span> _cb2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span></span><br><span class="line">    : <span class="keyword">public</span> B1,</span><br><span class="line">      <span class="keyword">public</span> B2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">    <span class="built_in">D</span>(): _id(<span class="number">10000</span>), _cd(<span class="string">&#x27;3&#x27;</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;D::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;D::f1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;D::f2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Df</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;D::Df()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _id;</span><br><span class="line">    <span class="type">char</span> _cd;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>在 C++ 中，如果继承链上存在虚继承的基类，则最底层的子类要负责完成该虚基类部分成员的构造。</strong><br>即我们需要显式调用虚基类的构造函数来完成初始化，如果<strong>不显式调用</strong>，则编译器会调用虚基类的<strong>缺省构造函数</strong>，不管初始化列表中次序如何，对虚基类构造函数的调用总是先于普通基类的构造函数。如果虚基类中<strong>没有定义</strong>的缺省构造函数，则会<strong>编译错误</strong>。<strong>因为如果不这样做，虚基类部分会在存在的多个继承链上被多次初始化。</strong>很多时候，对于继承链上的中间类，我们也会在其构造函数中显式调用虚基类的构造函数，因为一旦有人要创建这些中间类的对象，我们要保证它们能够得到正确的初始化。</p><p>对于虚继承的派生类对象的析构，析构函数的调用顺序为：</p><ul><li>先调用派生类的析构函数</li><li>然后调用派生类中成员对象的析构函数</li><li>再调用普通基类的析构函数</li><li><strong>最后调用虚基类的析构函数</strong></li></ul><p>效率分析：</p><p><img src="https://s2.loli.net/2024/04/13/BIVsDT7mptaHUyF.png" alt="66-9.png"></p><h2 id="作业-解析RSS文件"><a href="#作业-解析RSS文件" class="headerlink" title="作业-解析RSS文件"></a>作业-解析RSS文件</h2><p>使用 tinyXml2 解析 RSS 文件，并生成一个网页库<code>pagelib.dat</code>。</p><pre><code>tinyXml2 -- https://github.com/leethomason/tinyxml2rss      -- https://coolshell.cn/feed         -- http://www.runoob.com/rss/rss-tutorial.html</code></pre><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>使用正则表达式进行过滤。</p><p>rss 文件其实就是一个树形结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rss</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">channel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">link</span>&gt;</span>   <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">description</span>&gt;</span>   <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">content</span>&gt;</span>   <span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">link</span>&gt;</span>   <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">description</span>&gt;</span>   <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">content</span>&gt;</span>   <span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">channel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rss</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参考接口:   </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">RssItem</span></span><br><span class="line">&#123;</span><br><span class="line">    string title;</span><br><span class="line">    string link;</span><br><span class="line">    string description;</span><br><span class="line">    string content;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RssReader</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RssReader</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">parseRss</span><span class="params">()</span></span>;<span class="comment">//解析</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dump</span><span class="params">(<span class="type">const</span> string &amp; filename)</span></span>;<span class="comment">//输出</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;RssItem&gt; _rss;</span><br><span class="line"> &#125;;   </span><br></pre></td></tr></table></figure><p>要求：最后生成一个<code>pagelib.txt</code>, 其格式：</p><pre><code>&lt;doc&gt;    &lt;docid&gt;1&lt;/docid&gt;    &lt;title&gt;...&lt;/title&gt;    &lt;link&gt;...&lt;/link&gt;    &lt;description&gt;...&lt;/description&gt;    &lt;content&gt;...&lt;/content&gt;&lt;/doc&gt;&lt;doc&gt;    &lt;docid&gt;2&lt;/docid&gt;    &lt;title&gt;...&lt;/title&gt;    &lt;link&gt;...&lt;/link&gt;    &lt;description&gt;...&lt;/description&gt;    &lt;content&gt;...&lt;/content&gt;&lt;/doc&gt;&lt;doc&gt;  ...&lt;/doc&gt;</code></pre><p>RSS文件解析作业思路：<br>xml —&gt; rss —&gt; tinyxml2(使用该库对rss文件进行解析) —&gt; boost::regex/std::regex (使用正则表达式去除html标签)</p><p>提示：<br>首先去读 coolshell.xml 文件，因为是一个 rss 文件，而我们需要找到 rss 的 channel 节点下面的 item 节点的 title 节点、link 节点中间的文本，至于这些文本可以使用 tinyxml2 这个第三方库进行解析，所以这里需要看看 timyxml2 如何解析第三方库（可以看看 timyxml2 的源码），解析完成一个 item 后，可以将其存到 vector 中（也可以将这些原始信息经过后面正则表达式去除标签后再存起来），然后再去读第二个 item（其实就是一个循环操作），其实第二个 item 是第一个 item 的兄弟节点（可以使用 tinyxml2 里面的函数进行跳转到第二个 item），这样就可以解析 coolshell.xml 文档了。<br>接着，因为 description 信息中包含 html 的标签，所以需要去除这样的 html 标签，如<code>&lt;p&gt;&lt;/p&gt;</code>,这个可以使用正则表达式，也就是 std::regex 进行去除，这个可以在 cppreference 中进行查找使用方法。<br>最后就是遍历 vector，讲读取到的信息存到另外一个文件，格式需要自己定义，使用我们自定义的<code>&lt;doc&gt; &lt;/doc&gt;</code>格式。</p><h3 id="一些方法论"><a href="#一些方法论" class="headerlink" title="一些方法论"></a>一些方法论</h3><p>如何研究一个陌生的第三方代码</p><ol><li>若只要求达到使用标准，善用搜索。</li><li>找源代码。</li><li>查找头文件、实现文件、测试文件。<br><img src="https://bu.dusays.com/2024/04/13/661a89bd63c81.png" alt="66-10.png" title="示例"></li><li>在测试文件中找 main 函数。</li></ol><p>youtube 备份视频：<a href="https://www.youtube.com/watch?v=TJ3WPS3Yflw">初步写码的一些方法论</a></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>github 地址：<a href="https://github.com/leethomason/tinyxml2">https://github.com/leethomason/tinyxml2</a></p><p>官方文档：<a href="https://leethomason.github.io/tinyxml2/">https://leethomason.github.io/tinyxml2/</a></p><p>首先看下我写的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tinyxml2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;regex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::cerr;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::ofstream;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> tinyxml2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RssItem</span></span><br><span class="line">&#123;</span><br><span class="line">    string title;</span><br><span class="line">    string link;</span><br><span class="line">    string description;</span><br><span class="line">    string content;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RssReader</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RssReader</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Let_Me_See_See</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* _dir)</span> </span>&#123;</span><br><span class="line">        XMLDocument doc;</span><br><span class="line">        doc.<span class="built_in">LoadFile</span>(_dir);</span><br><span class="line">        <span class="keyword">if</span>(doc.<span class="built_in">ErrorID</span>()) &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;load file failed.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        XMLElement* myItemElem = doc.<span class="built_in">FirstChildElement</span>(<span class="string">&quot;rss&quot;</span>)</span><br><span class="line">                                  -&gt; <span class="built_in">FirstChildElement</span>(<span class="string">&quot;channel&quot;</span>)</span><br><span class="line">                                  -&gt; <span class="built_in">FirstChildElement</span>(<span class="string">&quot;item&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(myItemElem == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;this xml file is invalid.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">processItem</span>(myItemElem);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(myItemElem-&gt;<span class="built_in">NextSiblingElement</span>(<span class="string">&quot;item&quot;</span>)) &#123;</span><br><span class="line">            myItemElem = myItemElem -&gt; <span class="built_in">NextSiblingElement</span>(<span class="string">&quot;item&quot;</span>);</span><br><span class="line">            <span class="built_in">processItem</span>(myItemElem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dump</span><span class="params">(<span class="type">const</span> string&amp; fileName)</span> </span>&#123;</span><br><span class="line">        <span class="function">ofstream <span class="title">ofs</span><span class="params">(fileName)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(!ofs) &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;file &quot;</span> &lt;&lt; fileName &lt;&lt; <span class="string">&quot;open failed.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = _rss.<span class="built_in">cbegin</span>();</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; it != _rss.<span class="built_in">cend</span>(); it++) &#123;</span><br><span class="line">            cnt ++;</span><br><span class="line">            ofs &lt;&lt; <span class="string">&quot;&lt;doc&gt;&quot;</span> &lt;&lt; endl</span><br><span class="line">                &lt;&lt; <span class="string">&quot;    &lt;docid&gt;&quot;</span> &lt;&lt; cnt &lt;&lt; <span class="string">&quot;&lt;/docid&gt;&quot;</span> &lt;&lt; endl</span><br><span class="line">                &lt;&lt; <span class="string">&quot;    &lt;title&gt;&quot;</span> &lt;&lt; it-&gt;title &lt;&lt; <span class="string">&quot;&lt;/title&gt;&quot;</span> &lt;&lt; endl</span><br><span class="line">                &lt;&lt; <span class="string">&quot;    &lt;link&gt;&quot;</span> &lt;&lt; it-&gt;link &lt;&lt; <span class="string">&quot;&lt;/link&gt;&quot;</span> &lt;&lt; endl</span><br><span class="line">                &lt;&lt; <span class="string">&quot;    &lt;description&gt;&quot;</span> &lt;&lt; it-&gt;description &lt;&lt; <span class="string">&quot;&lt;/description&gt;&quot;</span> &lt;&lt; endl</span><br><span class="line">                &lt;&lt; <span class="string">&quot;    &lt;content&gt;&quot;</span> &lt;&lt; it-&gt;content &lt;&lt; <span class="string">&quot;&lt;/content&gt;&quot;</span> &lt;&lt; endl</span><br><span class="line">                &lt;&lt; <span class="string">&quot;&lt;/doc&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        ofs.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">processItem</span><span class="params">(XMLElement* p)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// get title</span></span><br><span class="line">        XMLText* myTitleNode = p -&gt; <span class="built_in">FirstChildElement</span>(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">                                 -&gt; <span class="built_in">FirstChild</span>() -&gt; <span class="built_in">ToText</span>();</span><br><span class="line">        string mytitle = myTitleNode -&gt; <span class="built_in">Value</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get link</span></span><br><span class="line">        XMLText* myLinkNode = p -&gt; <span class="built_in">FirstChildElement</span>(<span class="string">&quot;link&quot;</span>)</span><br><span class="line">                                 -&gt; <span class="built_in">FirstChild</span>() -&gt; <span class="built_in">ToText</span>();</span><br><span class="line">        string mylink = myLinkNode -&gt; <span class="built_in">Value</span>();</span><br><span class="line"></span><br><span class="line">        XMLText* myDescriptionNode = p -&gt; <span class="built_in">FirstChildElement</span>(<span class="string">&quot;description&quot;</span>)</span><br><span class="line">                                 -&gt; <span class="built_in">FirstChild</span>() -&gt; <span class="built_in">ToText</span>();</span><br><span class="line">        string mydescription = myDescriptionNode -&gt; <span class="built_in">Value</span>();</span><br><span class="line">        <span class="function">std::regex <span class="title">reg</span><span class="params">(<span class="string">&quot;&lt;[^&gt;]+&gt;&quot;</span>)</span></span>;</span><br><span class="line">        mydescription = <span class="built_in">regex_replace</span>(mydescription, reg, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get content</span></span><br><span class="line">        XMLText* myContNode = p -&gt; <span class="built_in">FirstChildElement</span>(<span class="string">&quot;content:encoded&quot;</span>)</span><br><span class="line">                                 -&gt; <span class="built_in">FirstChild</span>() -&gt; <span class="built_in">ToText</span>();</span><br><span class="line">        string mycontent = myContNode -&gt; <span class="built_in">Value</span>();</span><br><span class="line">        mycontent = <span class="built_in">regex_replace</span>(mycontent, reg, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        RssItem tmp = (RssItem)&#123;mytitle, mylink, mydescription, mycontent&#125;;</span><br><span class="line">        _rss.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;RssItem&gt; _rss;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RssReader akashi;</span><br><span class="line">    akashi.<span class="built_in">Let_Me_See_See</span>(<span class="string">&quot;./feed.xml&quot;</span>);</span><br><span class="line">    akashi.<span class="built_in">dump</span>(<span class="string">&quot;pagelib.dat&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出文件截图如下：</p><p><img src="https://bu.dusays.com/2024/04/15/661d03875da09.png" alt="66-11.png"></p><p>从效果上看，这份代码就是把文字部分扒了下来。</p><h2 id="作业-抽象类"><a href="#作业-抽象类" class="headerlink" title="作业-抽象类"></a>作业-抽象类</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>1、编写一个抽象类 Figure，该类拥有：<br>① 1个成员变量，存放图形的名字（是否该设计成private/protected?）<br>② 2个纯虚函数    </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getArea</span><span class="params">( )</span></span>=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> string <span class="title">getName</span><span class="params">( )</span></span>=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>=<span class="number">0</span>            <span class="comment">//打印图形的相关信息</span></span><br></pre></td></tr></table></figure><p>2、编写一个圆类 Circle，让其继承自 Figure 类，该类拥有： </p><p>① 1个成员变量，存放圆的半径；（是否该设计成private/protected?）<br>② 2个构造方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Circle</span>( )              <span class="comment">// 将半径设为0           </span></span><br><span class="line"><span class="built_in">Circle</span>(<span class="type">double</span>  r)      <span class="comment">//创建Circle对象时将半径初始化为r      </span></span><br></pre></td></tr></table></figure><p>③ 3个成员方法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">getRadius</span><span class="params">( )</span>           <span class="comment">//获取圆的半径</span></span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getPerimeter</span><span class="params">( )</span>      <span class="comment">//获取圆的周长</span></span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getArea</span><span class="params">( )</span>   <span class="comment">//获取圆的面积</span></span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> string <span class="title">getName</span><span class="params">( )</span>   <span class="comment">//获取圆的名字           </span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">show</span><span class="params">( )</span>               <span class="comment">//将圆的半径、周长、面积输出到屏幕 </span></span></span><br></pre></td></tr></table></figure></p><p>3、编写一个圆柱体类 Cylinder，它继承于上面的 Circle 类，还拥有：<br>① 1个成员变量，圆柱体的高；<br>② 构造方法           </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Cylinder</span> (<span class="type">double</span> r, <span class="type">double</span>  h) <span class="comment">//创建Circle对象时将半径初始化为r         </span></span><br></pre></td></tr></table></figure><p>③ 成员方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">覆盖Circle的<span class="built_in">getArea</span>( )   <span class="comment">//获取圆柱体的表面积 </span></span><br><span class="line">覆盖Circle的<span class="built_in">getName</span>( )   <span class="comment">//获取图形的名字</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getHeight</span><span class="params">( )</span>      <span class="comment">//获取圆柱体的高</span></span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getVolume</span><span class="params">( )</span>      <span class="comment">//获取圆柱体的体积           </span></span></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">show</span><span class="params">()</span>               <span class="comment">//将圆柱体的高、表面积、体积输出到屏幕  </span></span></span><br></pre></td></tr></table></figure><p>4、编写测试用例，在实现的过程中，体会动态多态的用法。<br>① 创建类的对象，分别设置圆的半径、圆柱体的高<br>② 计算并分别显示圆半径、圆面积、圆周长，<br>③ 计算并分别显式圆柱体的高、表面积、体积。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>这个要求有点奇怪，不能完全满足，比如那个圆柱的 getName() 我就没有重写。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI acos(-1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Figure</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">getName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>: <span class="keyword">public</span> Figure &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="built_in">Circle</span>(): _radius(<span class="number">0</span>) &#123;</span><br><span class="line">        _name = <span class="string">&quot;Circle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="built_in">Circle</span>(<span class="type">double</span> r): _radius(r) &#123;</span><br><span class="line">        _name = <span class="string">&quot;Circle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PI*_radius*_radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getRadius</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getPerimeter</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*PI*_radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;radius = &quot;</span> &lt;&lt; _radius &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;perimeter = &quot;</span> &lt;&lt; <span class="built_in">getPerimeter</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;area = &quot;</span> &lt;&lt; <span class="built_in">getArea</span>() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span> _radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cylinder</span>: <span class="keyword">public</span> Circle &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Cylinder</span>(<span class="type">double</span> r, <span class="type">double</span> h)</span><br><span class="line">            :<span class="built_in">Circle</span>(r), _height(h) &#123;_name = <span class="string">&quot;Cylinder&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> sum1 = Circle::<span class="built_in">getArea</span>();</span><br><span class="line">        <span class="type">double</span> sum2 = Circle::<span class="built_in">getPerimeter</span>() * _height;</span><br><span class="line">        <span class="keyword">return</span> sum1*<span class="number">2</span> + sum2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getHeight</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getVolume</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Circle::<span class="built_in">getArea</span>() * _height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;height = &quot;</span> &lt;&lt; _height &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;area = &quot;</span> &lt;&lt; <span class="built_in">getArea</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;volume = &quot;</span> &lt;&lt; <span class="built_in">getVolume</span>() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span> _height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Circle <span class="title">o1</span><span class="params">(<span class="number">1.0</span>)</span></span>;</span><br><span class="line">    o1.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function">Circle <span class="title">o2</span><span class="params">(<span class="number">2.0</span>)</span></span>;</span><br><span class="line">    o2.<span class="built_in">show</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="function">Cylinder <span class="title">cy1</span><span class="params">(<span class="number">1.0</span>, <span class="number">1.0</span>)</span></span>;</span><br><span class="line">    cy1.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function">Cylinder <span class="title">cy2</span><span class="params">(<span class="number">2.0</span>, <span class="number">2.0</span>)</span></span>;</span><br><span class="line">    cy2.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">name = Circle</span></span><br><span class="line"><span class="comment">radius = 1</span></span><br><span class="line"><span class="comment">perimeter = 6.28319</span></span><br><span class="line"><span class="comment">area = 3.14159</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name = Circle</span></span><br><span class="line"><span class="comment">radius = 2</span></span><br><span class="line"><span class="comment">perimeter = 12.5664</span></span><br><span class="line"><span class="comment">area = 12.5664</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name = Cylinder</span></span><br><span class="line"><span class="comment">height = 1</span></span><br><span class="line"><span class="comment">area = 12.5664</span></span><br><span class="line"><span class="comment">volume = 3.14159</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name = Cylinder</span></span><br><span class="line"><span class="comment">height = 2</span></span><br><span class="line"><span class="comment">area = 50.2655</span></span><br><span class="line"><span class="comment">volume = 25.1327</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="移动语义"><a href="#移动语义" class="headerlink" title="移动语义"></a>移动语义</h2><p>引入。来看下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>()</span><br><span class="line">    : _pstr(<span class="literal">nullptr</span>)</span><br><span class="line">    <span class="comment">/* : _pstr(new char[1]()) */</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span> *pstr)</span><br><span class="line">    : _pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pstr) + <span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char *)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr, pstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String &amp;rhs)</span><br><span class="line">    : _pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(rhs._pstr) + <span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String &amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr, rhs._pstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String &amp;<span class="keyword">operator</span>=(<span class="type">const</span> String &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String &amp;operator=(const String &amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;rhs)<span class="comment">//1、自复制</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pstr;<span class="comment">//2、释放左操作数</span></span><br><span class="line">            _pstr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3、深拷贝</span></span><br><span class="line">            _pstr = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(rhs._pstr) + <span class="number">1</span>]();</span><br><span class="line">            <span class="built_in">strcpy</span>(_pstr, rhs._pstr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、返回*this</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pstr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pstr;</span><br><span class="line">            _pstr = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> String &amp;rhs);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> *_pstr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> String &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(rhs._pstr)</span><br><span class="line">    &#123;</span><br><span class="line">        os &lt;&lt;  rhs._pstr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">s1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    String s2 = s1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//   C++    C   C风格转换为C++风格</span></span><br><span class="line">    <span class="comment">//   过渡</span></span><br><span class="line">    String s3 = <span class="string">&quot;world&quot;</span>;<span class="comment">//String(&quot;world&quot;),临时对象/匿名对象,</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* &amp;&quot;world&quot;;//文字常量区,左值 */</span></span><br><span class="line">    <span class="comment">/* String(&quot;world&quot;);//右值 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String(const char *)</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String(const String &amp;)</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s2 = hello</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String(const char *)</span></span><br><span class="line"><span class="comment">s3 = world</span></span><br><span class="line"><span class="comment">~String()</span></span><br><span class="line"><span class="comment">~String()</span></span><br><span class="line"><span class="comment">~String()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>注意第 85 行，编译器并没有调用复制构造函数<code>String(const String&amp;)</code>来复制这个临时对象到 s3 中。相反，它直接将临时对象的内容移动到 s3 中，这是因为在这种情况下编译器会执行一种叫做”复制省略”（copy elision）的优化。这个优化允许编译器在一定条件下避免创建临时对象，直接将临时对象的内容移到目标对象中，这样可以提高效率。</p><p>【存疑】然而按照教学演示，可以使用编译选项避免这个优化。在这种情况下，第 85 行会调用两个构造函数：<code>String(const char*)</code>和<code>String(const String&amp;)</code>。即在没有编译器优化的情况下，隐式转换之后会调用拷贝构造函数。在我的环境中即使开了编译选项也不会如此，可能是新的 g++ 版本并不支持这样做。</p><p>如何区分一个变量是否是右值？</p><p>在 C++11 之前是不能识别右值的，C++11 之后新增语法可以识别右值。</p><p>右值引用可以识别、绑定到右值，但不能识别、绑定到左值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> &amp;&amp;rref = <span class="number">10</span>;   <span class="comment">//右值引用</span></span><br><span class="line"><span class="type">int</span> &amp;&amp;rref2 = a;   <span class="comment">//error, a 是左值</span></span><br></pre></td></tr></table></figure><p>由此，写出如下函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移动构造函数优先于拷贝构造函数执行的(优先级)</span></span><br><span class="line"><span class="comment">//移动构造函数</span></span><br><span class="line"><span class="comment">//String s3 = String(&quot;world&quot;);</span></span><br><span class="line"><span class="built_in">String</span>(String &amp;&amp;rhs)</span><br><span class="line">:_pstr(rhs._pstr)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;String(String &amp;&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    rhs._pstr = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解读：我们直接进行了一个浅拷贝。临时变量销毁时，为了防止此时实际意义上已经归 this 所有的空间被销毁，需要将 rhs._pstr 置空。</p><p>考虑如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s4 = <span class="built_in">String</span>(<span class="string">&quot;wuhan&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>类似地，我们可以写出如下函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移动赋值运算符函数优先于赋值运算符函数执行的(优先级)</span></span><br><span class="line"><span class="comment">//移动赋值运算符函数(移动赋值函数)</span></span><br><span class="line"><span class="comment">//s4 = String(&quot;wuhan&quot;)</span></span><br><span class="line">String&amp; <span class="keyword">operator</span>=(String&amp;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;String&amp; operator=(String &amp;&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> [] _pstr;  <span class="comment">//释放左操作数，防止内存泄露</span></span><br><span class="line">    _pstr = <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    _pstr = rhs._pstr; <span class="comment">//浅拷贝</span></span><br><span class="line">    rhs._pstr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">//返回*this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到上面代码中没有防止自复制的逻辑，这是否必要呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//左右操作数是两个不一样对象</span></span><br><span class="line"><span class="comment">/* String(&quot;wuhan&quot;) = String(&quot;wuhan&quot;); */</span></span><br></pre></td></tr></table></figure><p>目前来看，似乎没有必要。</p><p>但是考虑如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;000000&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//std::move可以将左值转换为右值</span></span><br><span class="line">s4 = std::<span class="built_in">move</span>(s4);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;11111&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://bu.dusays.com/2024/04/17/661f4f326d294.png" alt="66-12.png"></p><p>以上输出结果需要联系移动赋值运算符函数、输出函数来分析。</p><p>可见，移动赋值运算符函数仍然需要改进：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移动赋值运算符函数优先于赋值运算符函数执行的(优先级)</span></span><br><span class="line"><span class="comment">//移动赋值运算符函数(移动赋值函数)</span></span><br><span class="line"><span class="comment">//s4 = String(&quot;wuhan&quot;)</span></span><br><span class="line"><span class="comment">//s4 = std::move(s4)</span></span><br><span class="line"><span class="comment">//s4 = std::move(s5)</span></span><br><span class="line">String &amp;<span class="keyword">operator</span>=(String &amp;&amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;String &amp;operator=(String &amp;&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;rhs)<span class="comment">//1、自移动</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> [] _pstr;<span class="comment">//2、释放左操作数</span></span><br><span class="line">        _pstr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        _pstr = rhs._pstr;<span class="comment">//3、浅拷贝</span></span><br><span class="line">        rhs._pstr = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">//4、返回*this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进一步研究一下 std::move() 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//std::move可以将左值转换为右值,实质上没有做任何移动，只是</span></span><br><span class="line"><span class="comment">//在底层做了强制转换static_cast&lt;T &amp;&amp;&gt;(lvalue)</span></span><br><span class="line"><span class="comment">//如果以后不想使用某个左值，可以使用std::move将其转换为</span></span><br><span class="line"><span class="comment">//右值，以后就不再使用了</span></span><br><span class="line">s4 = std::<span class="built_in">move</span>(s4);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;11111&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">std::<span class="built_in">move</span>(s1);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2222&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://bu.dusays.com/2024/04/17/661f5338927d5.png" alt="66-13.png"></p><p>此时 s1 里面的内容还没有转走（<code>std::move()</code>没有做移动操作）。</p><p>而如果走到移动赋值运算符函数中，内容才会被转走：</p><p><img src="https://bu.dusays.com/2024/04/17/661f56d06a004.png" alt="66-14.png"></p><p>该例完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>()</span><br><span class="line">    : _pstr(<span class="literal">nullptr</span>)</span><br><span class="line">    <span class="comment">/* : _pstr(new char[1]()) */</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span> *pstr)</span><br><span class="line">    : _pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pstr) + <span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char *)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr, pstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String &amp;rhs)</span><br><span class="line">    : _pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(rhs._pstr) + <span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String &amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr, rhs._pstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String &amp;<span class="keyword">operator</span>=(<span class="type">const</span> String &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String &amp;operator=(const String &amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;rhs)<span class="comment">//1、自复制</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pstr;<span class="comment">//2、释放左操作数</span></span><br><span class="line">            _pstr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3、深拷贝</span></span><br><span class="line">            _pstr = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(rhs._pstr) + <span class="number">1</span>]();</span><br><span class="line">            <span class="built_in">strcpy</span>(_pstr, rhs._pstr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、返回*this</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移动构造函数优先于拷贝构造函数执行的(优先级)</span></span><br><span class="line">    <span class="comment">//移动构造函数</span></span><br><span class="line">    <span class="comment">//String s3 = String(&quot;world&quot;);</span></span><br><span class="line">    <span class="built_in">String</span>(String &amp;&amp;rhs)</span><br><span class="line">    :_pstr(rhs._pstr)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(string &amp;&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        rhs._pstr = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移动赋值运算符函数优先于赋值运算符函数执行的(优先级)</span></span><br><span class="line">    <span class="comment">//移动赋值运算符函数(移动赋值函数)</span></span><br><span class="line">    <span class="comment">//s4 = String(&quot;wuhan&quot;)</span></span><br><span class="line">    <span class="comment">//s4 = std::move(s4)</span></span><br><span class="line">    <span class="comment">//s4 = std::move(s5)</span></span><br><span class="line">    String &amp;<span class="keyword">operator</span>=(String &amp;&amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String &amp;operator=(String &amp;&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;rhs)<span class="comment">//1、自移动</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pstr;<span class="comment">//2、释放左操作数</span></span><br><span class="line">            _pstr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">            _pstr = rhs._pstr;<span class="comment">//3、浅拷贝</span></span><br><span class="line">            rhs._pstr = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">//4、返回*this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pstr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pstr;</span><br><span class="line">            _pstr = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> String &amp;rhs);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> *_pstr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> String &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(rhs._pstr)</span><br><span class="line">    &#123;</span><br><span class="line">        os &lt;&lt;  rhs._pstr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">s1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    String s2 = s1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//   C++    C   C风格转换为C++风格</span></span><br><span class="line">    <span class="comment">//   过渡</span></span><br><span class="line">    String s3 = <span class="string">&quot;world&quot;</span>;<span class="comment">//String(&quot;world&quot;),临时对象/匿名对象,</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* &amp;&quot;world&quot;;//文字常量区,左值 */</span></span><br><span class="line">    <span class="comment">/* String(&quot;world&quot;);//右值 */</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">String <span class="title">s4</span><span class="params">(<span class="string">&quot;wangdao&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    s4 = <span class="built_in">String</span>(<span class="string">&quot;wuhan&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左右操作数是两个不一样对象</span></span><br><span class="line">    <span class="comment">/* String(&quot;wuhan&quot;) = String(&quot;wuhan&quot;); */</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;000000&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//std::move可以将左值转换为右值,实质上没有做任何移动，只是</span></span><br><span class="line">    <span class="comment">//在底层做了强制转换static_cast&lt;T &amp;&amp;&gt;(lvalue)</span></span><br><span class="line">    <span class="comment">//如果以后不想使用某个左值，可以使用std::move将其转换为</span></span><br><span class="line">    <span class="comment">//右值，以后就不再使用了</span></span><br><span class="line">    s4 = std::<span class="built_in">move</span>(s4);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;11111&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    s2 = std::<span class="built_in">move</span>(s1);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2222&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<strong>拷贝构造函数</strong>和<strong>赋值运算符函数</strong>称为具有<strong>复制控制语义的函数</strong>。</p><p>将<strong>移动构造函数</strong>和<strong>移动赋值运算符函数</strong>称为具有<strong>移动语义的函数</strong>。</p><p>最后来看一个细节：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>&amp;&amp; rref = <span class="number">10</span>; <span class="comment">// 右值引用</span></span><br><span class="line">    &amp;rref;    <span class="comment">// 右值引用在此处是左值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>右值引用作为函数返回类型的时候，是右值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>&amp;&amp; <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &amp;<span class="built_in">func</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">error: taking address of rvalue [-fpermissive]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>左值、右值、左值引用、const左值引用、右值引用。</li><li>区分左值与右值的是能不能取地址。</li><li>左值引用：可以绑定到左值，但是不能绑定到右值。</li><li>const左值引用：既可以绑定到左值也可以绑定到右值。（正因如此，才将拷贝构造函数写成const左值引用）</li><li>右值引用：可以绑定到右值，但是不能绑定到左值。（正因如此，才能有移动语义的函数）</li></ul><h2 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h2><p>资源管理是 C 的难点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">UseFile</span><span class="params">(<span class="type">char</span> <span class="type">const</span>* fn)</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE* f = fopen(fn, “r”);  <span class="comment">// 获取资源</span></span><br><span class="line">     …… <span class="comment">// 使用资源</span></span><br><span class="line">    <span class="keyword">if</span> (!g()) &#123; fclose(f); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (!h()) &#123; fclose(f); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    fclose(f);           <span class="comment">// 释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>困难在于：</p><ul><li>用于释放资源的代码需要在不同的位置重复书写多次。</li><li>如果再加入异常处理，fclose(f)情况会变得更加复杂。</li></ul><p><strong>RAII(Resource Acquisition Is Initialization)</strong> 是一种由 C++创造者 Bjarne Stroustrup 提出的， 利用栈对象生命周期管理程序资源（包括内存、文件句柄、锁等）的技术。</p><p>使用 RAII 时，一般在资源获得的同时构造对象， 在对象生存期间，资源一直保持有效；对象析构时，资源被释放。</p><p>关键：<strong>要保证资源的释放顺序与获取顺序严格相反。</strong></p><p>看一个简单例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SafeFile</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SafeFile</span>(FILE* fp): _fp(fp)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;SafeFile(FILE*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">const</span> string&amp; msg)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fwrite</span>(msg.<span class="built_in">c_str</span>(), <span class="number">1</span>, msg.<span class="built_in">size</span>(), _fp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">SafeFile</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~SafeFile()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_fp) &#123;</span><br><span class="line">            <span class="built_in">fclose</span>(_fp);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;fclose(_fp)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    FILE* _fp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// sf 是栈对象</span></span><br><span class="line">    <span class="function">SafeFile <span class="title">sf</span><span class="params">(fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    string msg = <span class="string">&quot;delishashijiediyikeai\n&quot;</span>;</span><br><span class="line">    sf.<span class="built_in">write</span>(msg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ g++ tmptest.cc</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ ./a.out</span></span><br><span class="line"><span class="comment">SafeFile(FILE*)</span></span><br><span class="line"><span class="comment">~SafeFile()</span></span><br><span class="line"><span class="comment">fclose(_fp)</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ cat test.txt </span></span><br><span class="line"><span class="comment">delishashijiediyikeai</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>RAII 特征：</p><ol><li>在构造函数中获取资源或者托管资源</li><li>在析构函数中释放资源</li><li>提供若干访问资源的方法</li><li>一般不允许复制或赋值（将拷贝构造函数或者赋值运算符函数删除即可）</li></ol><p><strong>RAII 的本质是用栈对象的生命周期来管理资源，因为栈对象在离开作用域时，会自动调用析构函数。</strong></p><p><strong>对象语义</strong>：不能进行复制或赋值。（在流的代码中，都是不能复制或赋值的）<br><strong>值语义</strong>：可以进行复制或赋值。</p><p>实现 RAII 的逻辑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RAII</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 在构造函数中初始化资源</span></span><br><span class="line">    <span class="built_in">RAII</span>(T* data): _data(data) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;RAII(T*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在析构函数中释放资源</span></span><br><span class="line">    ~<span class="built_in">RAII</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~RAII()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_data) &#123;</span><br><span class="line">            <span class="comment">// 假如指针是 new 出来的</span></span><br><span class="line">            <span class="keyword">delete</span> _data;</span><br><span class="line">            _data = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供若干访问资源的方法</span></span><br><span class="line">    T* <span class="keyword">operator</span> -&gt; () &#123;</span><br><span class="line">        <span class="keyword">return</span> _data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T&amp; <span class="keyword">operator</span> * () &#123;</span><br><span class="line">        <span class="keyword">return</span> *_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T* <span class="title">get</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">(T* data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_data) &#123;</span><br><span class="line">            <span class="keyword">delete</span> _data;</span><br><span class="line">            _data = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不允许复制或赋值</span></span><br><span class="line">    <span class="built_in">RAII</span>(<span class="type">const</span> RAII&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">    RAII&amp; <span class="keyword">operator</span> = (<span class="type">const</span> RAII&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* _data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">RAII&lt;point&gt; <span class="title">pt</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>, <span class="number">2</span>))</span></span>;</span><br><span class="line">    pt-&gt;<span class="built_in">print</span>();</span><br><span class="line">    pt.<span class="keyword">operator</span>-&gt;()-&gt;<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">RAII(T*)</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">~RAII()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，pt 本身不是指针，但具备指针的功能，也不用操心空间的回收，由此引出<strong>智能指针</strong>的概念。</p><h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><p>智能指针(Smart Pointer)</p><ul><li>是存储指向动态分配（堆）对象的指针的类</li><li>在面对异常的时候格外有用，因为他们能够确保正确的销毁动态分配的对象</li></ul><p>C++11 提供了以下几种智能指针,位于头文件<code>&lt;memory&gt;</code>，它们都是<strong>类模板</strong></p><ul><li>std::auto_ptr (复制/赋值)</li><li>std::unique_ptr</li><li>std::shared_ptr</li><li>std::weak_ptr  </li></ul><h3 id="auto-ptr"><a href="#auto-ptr" class="headerlink" title="auto_ptr"></a>auto_ptr</h3><p>来看下面关于 auto_ptr 的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::auto_ptr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* pInt = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">ap</span><span class="params">(pInt)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*pInt = &quot;</span> &lt;&lt; *pInt &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*ap = &quot;</span> &lt;&lt; *ap &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// delete pInt;</span></span><br><span class="line">    <span class="comment">// pInt = nullptr;</span></span><br><span class="line">    <span class="comment">// 不需要，因为被 auto_ptr 托管了</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    auto_ptr&lt;<span class="type">int</span>&gt; ap2 = ap;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*ap2 = &quot;</span> &lt;&lt; *ap2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*ap = &quot;</span> &lt;&lt; *ap &lt;&lt; endl; <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    // some warning</span></span><br><span class="line"><span class="comment">*pInt = 10</span></span><br><span class="line"><span class="comment">*ap = 10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*ap2 = 10</span></span><br><span class="line"><span class="comment">Segmentation fault (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>出现错误的原因是：在执行拷贝操作的时候，会将 ap 托管的资源交给 ap2 ，然后将 ap 的数据成员置空。</p><p>更进一步地，我们看一下 auto_ptr 源码的逻辑（并非完全一致，为方便理解作了少量修改）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">auto_ptr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//auto_ptr&lt;int&gt; ap2 = ap;</span></span><br><span class="line">    <span class="comment">//_Tp = int</span></span><br><span class="line">    <span class="comment">//auto_ptr &amp;__a = ap;</span></span><br><span class="line">    <span class="built_in">auto_ptr</span>(auto_ptr&amp; __a)</span><br><span class="line">    : _M_ptr(__a.<span class="built_in">release</span>())</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">_Tp* <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _Tp* __tmp = _M_ptr;</span><br><span class="line">        _M_ptr = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> __tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _Tp&amp; <span class="keyword">operator</span>*() <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *_M_ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    _Tp* _M_ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>即表面上执行了拷贝操作，但底层已经发生了所有权的转移。<strong><code>auto_ptr</code>在设计上存在缺陷。</strong></p><h3 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h3><p><code>std::unique_ptr</code>是一个<strong>独享所有权</strong>的智能指针，它提供了一种严格语义上的所有权，包括：</p><ul><li>拥有它所指向的对象</li><li><strong>无法进行复制、赋值操作</strong></li><li>保存指向某个对象的指针，当它本身被删除释放的时候，会使用给定的<strong>删除器</strong>释放它指向的对象</li><li>具有移动(std::move)语义，可做为容器元素</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">up</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">10</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*up = &quot;</span> &lt;&lt; *up &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// unique_ptr&lt;int&gt; up2 = up; // 在语法层面报错</span></span><br><span class="line"></span><br><span class="line">    <span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">up3</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">34</span>))</span></span>;</span><br><span class="line">    <span class="comment">// up3 = up;   // error</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    vector&lt;unique_ptr&lt;<span class="type">int</span>&gt;&gt; vec;</span><br><span class="line">    <span class="comment">// unique_ptr 据有移动语义（有移动构造函数和移动赋值函数）</span></span><br><span class="line">    <span class="comment">// 所以可以作为容器的元素</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(up));</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="built_in">unique_ptr</span>&lt;<span class="type">int</span>&gt;(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">30</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要构建右值的时候，可以使用如下两种方法：</p><ol><li>直接显示调用构造函数，创建临时对象</li><li>使用std::move函数将左值转换为右值。</li></ol><p>需要构建左值的时候，可以使用如下两种方法：</p><ol><li>可以使用构造函数创建对象，创建有名对象。Point pt(1, 2);</li><li>可以使用右值引用将右值转换为左值，Point &amp;&amp;rref = Point(1, 2)</li></ol><h3 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h3><p><code>std::shared_ptr</code>是一个<strong>引用计数</strong>智能指针，用于共享对象的所有权</p><ol><li>引进了一个计数器shared_count,用来表示当前有多少个智能指针对象共享指针指向的内存块</li><li>析构函数中不是直接释放指针对应的内存块,如果shared_count大于0则不释放内存只是将引用计数减1,只有计数等于0时释放内存</li><li>复制构造与赋值操作符只是提供一般意义上的复制功能,并且将引用计数加1.</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">10</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp = &quot;</span> &lt;&lt; *sp &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp.get() = &quot;</span> &lt;&lt; sp.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp.use_count() = &quot;</span> &lt;&lt; sp.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    shared_ptr&lt;<span class="type">int</span>&gt; sp2 = sp;  <span class="comment">// ok</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp = &quot;</span> &lt;&lt; *sp &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp2 = &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp.get() = &quot;</span> &lt;&lt; sp.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp2.get() = &quot;</span> &lt;&lt; sp2.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp.use_count() = &quot;</span> &lt;&lt; sp.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp2.use_count() = &quot;</span> &lt;&lt; sp2.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">sp3</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">34</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp3 = &quot;</span> &lt;&lt; *sp3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp3.get() = &quot;</span> &lt;&lt; sp3.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp3.use_count() = &quot;</span> &lt;&lt; sp3.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    sp3 = sp;  <span class="comment">// 赋值，ok</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp = &quot;</span> &lt;&lt; *sp &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp2 = &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp3 = &quot;</span> &lt;&lt; *sp3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp.get() = &quot;</span> &lt;&lt; sp.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp2.get() = &quot;</span> &lt;&lt; sp2.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp3.get() = &quot;</span> &lt;&lt; sp3.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp.use_count() = &quot;</span> &lt;&lt; sp.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp2.use_count() = &quot;</span> &lt;&lt; sp2.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp3.use_count() = &quot;</span> &lt;&lt; sp3.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*sp = 10</span></span><br><span class="line"><span class="comment">sp.get() = 0x5c03fdecaeb0</span></span><br><span class="line"><span class="comment">sp.use_count() = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*sp = 10</span></span><br><span class="line"><span class="comment">*sp2 = 10</span></span><br><span class="line"><span class="comment">sp.get() = 0x5c03fdecaeb0</span></span><br><span class="line"><span class="comment">sp2.get() = 0x5c03fdecaeb0</span></span><br><span class="line"><span class="comment">sp.use_count() = 2</span></span><br><span class="line"><span class="comment">sp2.use_count() = 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*sp3 = 34</span></span><br><span class="line"><span class="comment">sp3.get() = 0x5c03fdecb300</span></span><br><span class="line"><span class="comment">sp3.use_count() = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*sp = 10</span></span><br><span class="line"><span class="comment">*sp2 = 10</span></span><br><span class="line"><span class="comment">*sp3 = 10</span></span><br><span class="line"><span class="comment">sp.get() = 0x5c03fdecaeb0</span></span><br><span class="line"><span class="comment">sp2.get() = 0x5c03fdecaeb0</span></span><br><span class="line"><span class="comment">sp3.get() = 0x5c03fdecaeb0</span></span><br><span class="line"><span class="comment">sp.use_count() = 3</span></span><br><span class="line"><span class="comment">sp2.use_count() = 3</span></span><br><span class="line"><span class="comment">sp3.use_count() = 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>再来看是否可以作为容器的元素：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp4</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>,<span class="number">2</span>))</span></span>;</span><br><span class="line">    vector&lt;shared_ptr&lt;point&gt;&gt; vec;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(sp4));</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="built_in">shared_ptr</span>&lt;point&gt;(<span class="keyword">new</span> <span class="built_in">point</span>(<span class="number">3</span>,<span class="number">4</span>)));</span><br><span class="line"></span><br><span class="line">    vec.<span class="built_in">push_back</span>(sp4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>shared_ptr 存在的问题：循环引用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> std::shared_ptr&lt;Parent&gt; parent_ptr;</span><br><span class="line"><span class="keyword">typedef</span> std::shared_ptr&lt;Child&gt; child_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Child</span>() &#123;   std::cout &lt;&lt; <span class="string">&quot;Child...&quot;</span> &lt;&lt; std::endl;   &#125;</span><br><span class="line">    ~<span class="built_in">Child</span>() &#123;  std::cout &lt;&lt; <span class="string">&quot;~Child...&quot;</span> &lt;&lt; std::endl;  &#125;</span><br><span class="line">    parent_ptr parent_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Parent</span>() &#123;  std::cout &lt;&lt; <span class="string">&quot;Parent...&quot;</span> &lt;&lt; std::endl;  &#125;</span><br><span class="line">    ~<span class="built_in">Parent</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;~Parent...&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">    child_ptr child_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">parent_ptr <span class="title">parent</span><span class="params">(<span class="keyword">new</span> Parent)</span></span>;</span><br><span class="line">    <span class="function">child_ptr <span class="title">child</span><span class="params">(<span class="keyword">new</span> Child)</span></span>;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;parent.use_count() = &quot;</span> &lt;&lt; parent.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;child.use_count() = &quot;</span> &lt;&lt; child.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    parent-&gt;child_ = child;</span><br><span class="line">    <span class="comment">//parent.operator-&gt;()-&gt;child_ = child;</span></span><br><span class="line">    child-&gt;parent_ = parent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;parent.use_count() = &quot;</span> &lt;&lt; parent.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;child.use_count() = &quot;</span> &lt;&lt; child.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Parent...</span></span><br><span class="line"><span class="comment">Child...</span></span><br><span class="line"><span class="comment">parent.use_count() = 1</span></span><br><span class="line"><span class="comment">child.use_count() = 1</span></span><br><span class="line"><span class="comment">parent.use_count() = 2</span></span><br><span class="line"><span class="comment">child.use_count() = 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>以上代码存在内容泄露，原因：</p><p><img src="https://s2.loli.net/2024/04/19/61sZ7mHWhFuAOaQ.png" alt="66-15.png"></p><p><img src="https://bu.dusays.com/2024/04/19/6621c4878cc6a.png" alt="66-16.png"></p><p>解决方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> std::shared_ptr&lt;Parent&gt; parent_ptr;</span><br><span class="line"><span class="keyword">typedef</span> std::shared_ptr&lt;Child&gt; child_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Child</span>() &#123;   std::cout &lt;&lt; <span class="string">&quot;Child...&quot;</span> &lt;&lt; std::endl;   &#125;</span><br><span class="line">    ~<span class="built_in">Child</span>() &#123;  std::cout &lt;&lt; <span class="string">&quot;~Child...&quot;</span> &lt;&lt; std::endl;  &#125;</span><br><span class="line">    std::weak_ptr&lt;Parent&gt; parent_; <span class="comment">// 不会使引用计数++</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Parent</span>() &#123;  std::cout &lt;&lt; <span class="string">&quot;Parent...&quot;</span> &lt;&lt; std::endl;  &#125;</span><br><span class="line">    ~<span class="built_in">Parent</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;~Parent...&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">    child_ptr child_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">parent_ptr <span class="title">parent</span><span class="params">(<span class="keyword">new</span> Parent)</span></span>;</span><br><span class="line">    <span class="function">child_ptr <span class="title">child</span><span class="params">(<span class="keyword">new</span> Child)</span></span>;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;parent.use_count() = &quot;</span> &lt;&lt; parent.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;child.use_count() = &quot;</span> &lt;&lt; child.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    parent-&gt;child_ = child;</span><br><span class="line">    <span class="comment">//parent.operator-&gt;()-&gt;child_ = child;</span></span><br><span class="line">    child-&gt;parent_ = parent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;parent.use_count() = &quot;</span> &lt;&lt; parent.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;child.use_count() = &quot;</span> &lt;&lt; child.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Parent...</span></span><br><span class="line"><span class="comment">Child...</span></span><br><span class="line"><span class="comment">parent.use_count() = 1</span></span><br><span class="line"><span class="comment">child.use_count() = 1</span></span><br><span class="line"><span class="comment">parent.use_count() = 1</span></span><br><span class="line"><span class="comment">child.use_count() = 2</span></span><br><span class="line"><span class="comment">~Parent...</span></span><br><span class="line"><span class="comment">~Child...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h3><p>特点：</p><ul><li>std::shared_ptr 是强引用智能指针</li><li>std::weak_ptr 是弱引用智能指针</li><li>强引用，只要有一个引用存在，对象就不能被释放</li><li><strong>弱引用，并不增加对象的引用计数，但它知道对象是否存在。</strong><ul><li>如果存在，提升为shared_ptr成功；否则，提升失败</li><li>通过weak_ptr访问对象的成员的时候，要提升为shared_ptr</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"><span class="keyword">using</span> std::weak_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// weak_ptr&lt;point&gt; wp(new point(1, 2));  // 不 ok</span></span><br><span class="line">    weak_ptr&lt;point&gt; wp2; <span class="comment">//可以创建空对象</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">shared_ptr&lt;point&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>,<span class="number">2</span>))</span></span>;</span><br><span class="line">        wp2 = sp;  <span class="comment">// ok</span></span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;sp.use_count() = &quot;</span> &lt;&lt; sp.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;wp2.use_count() = &quot;</span> &lt;&lt; wp2.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;wp2.expired() = &quot;</span> &lt;&lt; wp2.<span class="built_in">expired</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        shared_ptr&lt;point&gt; sp2 = wp2.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">if</span>(sp2) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;提升成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;*sp2 = &quot;</span>;</span><br><span class="line">            sp2-&gt;<span class="built_in">print</span>();</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;提升失败，托管资源已销毁&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;wp2.use_count() = &quot;</span> &lt;&lt; wp2.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;wp2.expired() = &quot;</span> &lt;&lt; wp2.<span class="built_in">expired</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    shared_ptr&lt;point&gt; sp2 = wp2.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span>(sp2) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;提升成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;*sp2 = &quot;</span>;</span><br><span class="line">        sp2-&gt;<span class="built_in">print</span>();</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;提升失败，托管资源已销毁&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">sp.use_count() = 1</span></span><br><span class="line"><span class="comment">wp2.use_count() = 1</span></span><br><span class="line"><span class="comment">wp2.expired() = 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">提升成功</span></span><br><span class="line"><span class="comment">*sp2 = 1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">wp2.use_count() = 0</span></span><br><span class="line"><span class="comment">wp2.expired() = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">提升失败，托管资源已销毁</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="删除器"><a href="#删除器" class="headerlink" title="删除器"></a>删除器</h3><p><img src="https://s2.loli.net/2024/04/19/ZLfMJoU6YPSKI2W.png" alt="66-17.png"></p><p>对于一些特殊的情况，不能依赖默认的删除器：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FileCloser</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(FILE* fp)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(fp) &#123;</span><br><span class="line">            <span class="built_in">fclose</span>(fp);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;fclose(fp)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string msg = <span class="string">&quot;jiarenmenshuidonga.\n&quot;</span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;FILE, FileCloser&gt; <span class="title">up</span><span class="params">(fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>))</span></span>;</span><br><span class="line">    <span class="built_in">fwrite</span>(msg.<span class="built_in">c_str</span>(), <span class="number">1</span>, msg.<span class="built_in">size</span>(), up.<span class="built_in">get</span>());</span><br><span class="line">    <span class="comment">// fclose(up.get());</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string msg = <span class="string">&quot;yudaoyigeikun.\n&quot;</span>;</span><br><span class="line">    <span class="function">shared_ptr&lt;FILE&gt; <span class="title">sp</span><span class="params">(fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>), FileCloser())</span></span>;</span><br><span class="line">    <span class="built_in">fwrite</span>(msg.<span class="built_in">c_str</span>(), <span class="number">1</span>, msg.<span class="built_in">size</span>(), sp.<span class="built_in">get</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="智能指针的误用"><a href="#智能指针的误用" class="headerlink" title="智能指针的误用"></a>智能指针的误用</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用了不同的智能指针托管了同一个裸指针</span></span><br><span class="line">    point* pt = <span class="keyword">new</span> <span class="built_in">point</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="function">unique_ptr&lt;point&gt; <span class="title">up</span><span class="params">(pt)</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;point&gt; <span class="title">up2</span><span class="params">(pt)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">free(): double free detected in tcache 2</span></span><br><span class="line"><span class="comment">Aborted (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用不同的智能指针托管了同一块空间</span></span><br><span class="line">    <span class="function">unique_ptr&lt;point&gt; <span class="title">up</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>,<span class="number">2</span>))</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;point&gt; <span class="title">up2</span><span class="params">(<span class="keyword">new</span> point(<span class="number">3</span>,<span class="number">4</span>))</span></span>;</span><br><span class="line">    up.<span class="built_in">reset</span>(up2.<span class="built_in">get</span>());</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">free(): double free detected in tcache 2</span></span><br><span class="line"><span class="comment">Aborted (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    point* pt = <span class="keyword">new</span> <span class="built_in">point</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp</span><span class="params">(pt)</span></span>;</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp2</span><span class="params">(pt)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">free(): double free detected in tcache 2</span></span><br><span class="line"><span class="comment">Aborted (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>,<span class="number">2</span>))</span></span>;</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp2</span><span class="params">(<span class="keyword">new</span> point(<span class="number">3</span>,<span class="number">4</span>))</span></span>;</span><br><span class="line">    sp.<span class="built_in">reset</span>(sp2.<span class="built_in">get</span>());</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">free(): double free detected in tcache 2</span></span><br><span class="line"><span class="comment">Aborted (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test4</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再有一例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pt1-&gt;addPoint(pt2)</span></span><br><span class="line">    <span class="function">point* <span class="title">addPoint</span><span class="params">(point* pt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ix += pt-&gt;ix;</span><br><span class="line">        <span class="keyword">this</span>-&gt;iy += pt-&gt;iy;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>,<span class="number">2</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp = &quot;</span> ;</span><br><span class="line">    sp-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp2</span><span class="params">(<span class="keyword">new</span> point(<span class="number">3</span>,<span class="number">4</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp2 = &quot;</span> ;</span><br><span class="line">    sp2-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp3</span><span class="params">(sp-&gt;addPoint(sp2.get()))</span></span>;</span><br><span class="line">    <span class="comment">// 用裸指针进行的初始化！</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp3 = &quot;</span> ;</span><br><span class="line">    sp3-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test5</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">*sp = 1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">*sp2 = 3 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*sp3 = 4 6</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">free(): double free detected in tcache 2</span></span><br><span class="line"><span class="comment">Aborted (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面代码问题的解决方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>:</span><br><span class="line"><span class="keyword">public</span> std::enable_shared_from_this&lt;point&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pt1-&gt;addPoint(pt2)</span></span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">addPoint</span><span class="params">(point* pt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ix += pt-&gt;ix;</span><br><span class="line">        <span class="keyword">this</span>-&gt;iy += pt-&gt;iy;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">shared_from_this</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>,<span class="number">2</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp = &quot;</span> ;</span><br><span class="line">    sp-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp2</span><span class="params">(<span class="keyword">new</span> point(<span class="number">3</span>,<span class="number">4</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp2 = &quot;</span> ;</span><br><span class="line">    sp2-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp3</span><span class="params">(sp-&gt;addPoint(sp2.get()))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp3 = &quot;</span> ;</span><br><span class="line">    sp3-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test5</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">*sp = 1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">*sp2 = 3 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*sp3 = 4 6</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>模板（Template），是一种通用的描述机制。模板允许使用<strong>通用类型</strong>来定义函数或类等，在使用时，通用类型可被具体的类型，如int、double甚至是用户自定义的类型来代替。模板引入一种全新的编程思维方式，称为“<strong>泛型编程</strong>”或“通用编程”。</p><p>模板的引入使函数定义摆脱了类型的束缚，代码更为高效灵活。C++ 中，通过下述形式定义一个模板：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, ...&gt;</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, ...&gt;</span><br></pre></td></tr></table></figure><p>早期模板定义使用的是 class，关键字 typename 是后加入到标准中的，相比 class，typename 更容易体现“类型”的观点，虽然两个关键字在模板定义时是等价的，但<strong>从代码兼容的角度讲，使用 class 较好一些。</strong></p><p>模板有<strong>函数模板</strong>和<strong>类模板</strong>之分。通过参数实例化构造出具体的函数或类，称为模板函数或模板类。</p><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><p>模板的形式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数模板</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">add</span><span class="params">(T x, T y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ia = <span class="number">3</span>, ib = <span class="number">4</span>;</span><br><span class="line">    <span class="type">double</span> dx = <span class="number">3.3</span>, dy = <span class="number">4.4</span>;</span><br><span class="line">    string s1 = <span class="string">&quot;hello &quot;</span>;</span><br><span class="line">    string s2 = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显式实例化</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;add(ia, ib) = &quot;</span> &lt;&lt; <span class="built_in">add</span>&lt;<span class="type">int</span>&gt;(ia, ib) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐式实例化</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;add(dx, dy) = &quot;</span> &lt;&lt; <span class="built_in">add</span>(dx, dy) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;add(s1, s2) = &quot;</span> &lt;&lt; <span class="built_in">add</span>(s1, s2) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">add(ia, ib) = 7</span></span><br><span class="line"><span class="comment">add(dx, dy) = 7.7</span></span><br><span class="line"><span class="comment">add(s1, s2) = hello world</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>原理：在编译时做了类型推导。</p><p>普通函数与函数模板可以同时存在。<br>普通函数优先于函数模板。<br>普通函数与函数模板可以形成重载。<br>函数模板与函数模板之间也可以形成重载。</p><p>对于模板而言，一般不能分成头文件与实现文件的形式，即不能将声明与实现分开。<br>如果非要分成头文件和实现文件，可以在头文件中包含实现文件，如在<code>add.h</code>中<code>#include &quot;add.cc&quot;</code>。</p><p><img src="https://s2.loli.net/2024/04/20/AfeVDnHz6YFEBXG.png" alt="66-18.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板的参数类型</span></span><br><span class="line"><span class="comment">// 1. 类型参数，比如这里的 T</span></span><br><span class="line"><span class="comment">// 2. 非类型参数，都是整型（bool/char/int/size_t/...)</span></span><br><span class="line"><span class="comment">// 注意：排除了浮点数 float/double</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="type">short</span> kMin&gt;</span><br><span class="line"><span class="function">T <span class="title">multiply</span><span class="params">(T x, T y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * y * kMin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;multiply(a, b) = &quot;</span> &lt;&lt; <span class="built_in">multiply</span>&lt;<span class="type">int</span>, <span class="number">100</span>&gt;(a, b) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">multiply(a, b) = 20000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = <span class="type">double</span> , <span class="type">short</span> kMin = <span class="number">300</span>&gt;</span><br><span class="line">T <span class="built_in">multiply</span>(T x, T y) &#123;</span><br><span class="line">    <span class="keyword">return</span> x * y * kMin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;multiply(a, b) = &quot;</span> &lt;&lt; <span class="built_in">multiply</span>&lt;<span class="type">int</span>, <span class="number">100</span>&gt;(a, b) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;multiply(a, b) = &quot;</span> &lt;&lt; <span class="built_in">multiply</span>(a, b) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">multiply(a, b) = 20000</span></span><br><span class="line"><span class="comment">multiply(a, b) = 60000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="成员函数模板"><a href="#成员函数模板" class="headerlink" title="成员函数模板"></a>成员函数模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = <span class="type">int</span>&gt;</span><br><span class="line">    T <span class="built_in">func</span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> (T)ix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">point <span class="title">pt</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;pt.func() = &quot;</span> &lt;&lt; pt.<span class="built_in">func</span>&lt;<span class="type">double</span>&gt;() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;pt.func() = &quot;</span> &lt;&lt; pt.<span class="built_in">func</span>&lt;<span class="type">int</span>&gt;() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;pt.func() = &quot;</span> &lt;&lt; pt.<span class="built_in">func</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">pt.func() = 1</span></span><br><span class="line"><span class="comment">pt.func() = 1</span></span><br><span class="line"><span class="comment">pt.func() = 1</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="可变模板参数"><a href="#可变模板参数" class="headerlink" title="可变模板参数"></a>可变模板参数</h3><p><strong>可变模板参数(variadic templates)</strong> 是 C++11 新增的特性，它对参数进行了高度泛化，能表示 0 到任意个任意类型的参数。</p><p>模板<strong>参数包(parameter pack)</strong>，如:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>… Args&gt;  <span class="keyword">class</span> <span class="title class_">tuple</span>;</span><br></pre></td></tr></table></figure></p><p><code>Args</code>标识符的左侧使用了省略号，在 C++11 中<code>Args</code>被称为<strong>模板参数包</strong>，表示可以接受任意多个参数作为模板参数，编译器将多个模板参数打包成“单个”的模板参数包。</p><p>函数参数包，如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>…T&gt; <span class="type">void</span> <span class="title">f</span><span class="params">(T…args)</span></span>;</span><br></pre></td></tr></table></figure></p><p>args 被称为<strong>函数参数包</strong>，表示函数可以接受多个任意类型的参数。</p><p>例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// template &lt;typename T1, typename T2, typename T3&gt;</span></span><br><span class="line"><span class="comment">// void display(T1 x, T2 y, T3 z) &#123;</span></span><br><span class="line"><span class="comment">//     // ...</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">/* 这里的 Args，args 只是一个名字，可以换成别的 */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ... Args&gt;  <span class="comment">// 模板参数包</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(Args ... args)</span>   <span class="comment">// 函数参数包</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++11 标准中，要求函数参数包必须唯一，且是函数的最后一个参数。</p><p>当<strong>声明</strong>一个变量（或标识符）为可变参数时，省略号位于该变量的左侧。</p><p>当<strong>使用</strong>参数包时，省略号位于参数名称的右侧，表示立即展开该参数，这个过程也被称为解包。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="comment">// template &lt;typename T1, typename T2, typename T3&gt;</span></span><br><span class="line"><span class="comment">// void display(T1 x, T2 y, T3 z) &#123;</span></span><br><span class="line"><span class="comment">//     // ...</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">/* 这里的 Args，args 只是一个名字，可以换成别的 */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;  <span class="comment">// 模板参数包</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(Args... args)</span>   <span class="comment">// 函数参数包</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof...(Args) = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>...(Args) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof...(args) = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>...(args) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;  <span class="comment">// 递归的出口</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T t, Args... args)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; t &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(args...); <span class="comment">// 递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// template &lt;typename T1, typename T2, typename T3&gt;</span></span><br><span class="line">    <span class="comment">// display(T1 x1, T2 x2, T3 x3)</span></span><br><span class="line">    <span class="comment">// T1 = int, T2 = int, T3 = int</span></span><br><span class="line">    <span class="built_in">display</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// template &lt;typename T1, typename T2, typename T3, typename T4&gt;</span></span><br><span class="line">    <span class="comment">// display(T1 x1, T2 x2, T3 x3, T4 x4)</span></span><br><span class="line">    <span class="comment">// T1 = int, T2 = const char*, T3 = double/float, T4 = string</span></span><br><span class="line">    <span class="built_in">display</span>(<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="number">3.3</span>, s1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>();</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>, <span class="number">2.2</span>, s1, <span class="string">&quot;asdf&quot;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof...(Args) = 0</span></span><br><span class="line"><span class="comment">sizeof...(args) = 0</span></span><br><span class="line"><span class="comment">sizeof...(Args) = 3</span></span><br><span class="line"><span class="comment">sizeof...(args) = 3</span></span><br><span class="line"><span class="comment">sizeof...(Args) = 4</span></span><br><span class="line"><span class="comment">sizeof...(args) = 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1 2 </span></span><br><span class="line"><span class="comment">1 2.2 hello asdf c </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>来看一个不是很有用但是很神奇的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(T t, Args... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t + <span class="built_in">sum</span>(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sum(1, 2, 3, 4, 5, 6) = &quot;</span></span><br><span class="line">         &lt;&lt; <span class="built_in">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sum(1, 2, 3, 4, 5, 6) = 21</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><p>理解了函数模板的应用，类模板的提出似乎是水到渠成的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="type">int</span> num&gt;        <span class="comment">//类型参数表</span></span><br><span class="line"><span class="comment">//或template &lt;class T = int, int num = 10&gt;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>                        <span class="comment">//Stack类定义</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T sz[num];<span class="comment">//存储空间，用数组表示</span></span><br><span class="line">    <span class="type">int</span> point;<span class="comment">//指针，表示存储位置（即元素个数）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Stack</span>()<span class="comment">//构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        point=<span class="number">0</span>;<span class="comment">//初始位置为0，栈底</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>;<span class="comment">//判断栈是否为空</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isFull</span><span class="params">()</span></span>;<span class="comment">//判断栈是否已满</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T&amp;)</span></span>;<span class="comment">//将一个元素压入栈</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(T&amp;)</span></span>;<span class="comment">//从栈中弹出一个元素</span></span><br><span class="line">    <span class="function"><span class="type">int</span> &amp;<span class="title">GetPos</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> point;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>,<span class="type">int</span> num&gt;        <span class="comment">//参数列表不要求字字相同，但形式要相同</span></span><br><span class="line"><span class="type">bool</span> Stack&lt;T,num&gt;::<span class="built_in">isEmpty</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> point==<span class="number">0</span>;<span class="comment">//point为0，说明当前无元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>,<span class="type">int</span> num&gt;</span><br><span class="line"><span class="type">bool</span> Stack&lt;T,num&gt;::<span class="built_in">isFull</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> point==num;<span class="comment">//point为num，说明数组已满</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>,<span class="type">int</span> num&gt;</span><br><span class="line"><span class="type">bool</span> Stack&lt;T,num&gt;::<span class="built_in">push</span>(<span class="type">const</span> T&amp; obt)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isFull</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//如果栈已满，压入不成功，返回false</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        sz[point]=obt;<span class="comment">//将传入的元素存储在point指向的当前位置</span></span><br><span class="line">        point++;<span class="comment">//point加1，向栈顶移动</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//压入成功，返回true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>,<span class="type">int</span> num&gt;</span><br><span class="line"><span class="type">bool</span> Stack&lt;T,num&gt;::<span class="built_in">pop</span>(T &amp;obt)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isEmpty</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//如果栈已空，无法弹出，返回false</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        point--;<span class="comment">//point减1，向栈底移动，指向存储的最上面一个元素</span></span><br><span class="line">        obt = sz[point];<span class="comment">//将point指向的当前位置元素复制给传入参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//弹出成功，返回true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Stack&lt;<span class="type">int</span>, <span class="number">10</span>&gt; st;<span class="comment">//模版类, 模版参数为&lt;class T, int num&gt;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;开始时st是否为空？ &quot;</span> &lt;&lt; st.<span class="built_in">isEmpty</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    st.<span class="built_in">push</span>(<span class="number">5</span>);<span class="comment">//压入元素5</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;此时st是否为空？ &quot;</span> &lt;&lt; st.<span class="built_in">isEmpty</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        st.<span class="built_in">push</span>(i);<span class="comment">//压入9个元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;此时st是否已满？&quot;</span> &lt;&lt; st.<span class="built_in">isFull</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> rec = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (st.<span class="built_in">pop</span>(rec))</span><br><span class="line">        cout &lt;&lt; rec &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">开始时st是否为空？ 1</span></span><br><span class="line"><span class="comment">此时st是否为空？ 0</span></span><br><span class="line"><span class="comment">此时st是否已满？1</span></span><br><span class="line"><span class="comment">9  8  7  6  5  4  3  2  1  5 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>模板的嵌套：</p><ul><li>模板的嵌套可以理解成在另一个模板里定义一个模板。以模板（类，或者函数）作为另一个模板（类，或者函数）的成员，也称<strong>成员模板</strong>。</li><li><strong>成员模版不能声明为 virtual.</strong><ul><li>模板在编译时进行类型推导</li><li>虚函数体现多态发生在运行时</li></ul></li></ul><p>来看一个嵌套模版类的模版类的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outside</span>            <span class="comment">//外部Outside类定义</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">R</span>&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inside</span><span class="comment">//嵌套类模板定义</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        R r;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Inside</span>(R x)<span class="comment">//模板类的成员函数可以在定义时实现</span></span><br><span class="line">        &#123;</span><br><span class="line">            r=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//void disp();</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">disp</span><span class="params">()</span> </span>&#123;cout &lt;&lt; <span class="string">&quot;Inside: &quot;</span> &lt;&lt; r &lt;&lt; endl;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Outside</span>(T x) : <span class="built_in">t</span>(x)<span class="comment">//Outside类的构造函数</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//void disp();</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">disp</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Outside:&quot;</span>;</span><br><span class="line">        t.<span class="built_in">disp</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Inside&lt;T&gt; t;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//template&lt;class T&gt;</span></span><br><span class="line"><span class="comment">//template&lt;class R&gt;</span></span><br><span class="line"><span class="comment">//void Outside&lt;T&gt;::Inside&lt;R&gt;::disp()    //模板类的成员函数也可以在定义外实现</span></span><br><span class="line"><span class="comment">//&#123;            //但必须是在所有类定义的外边,不能放在Outside内Inside外去实现.</span></span><br><span class="line"><span class="comment">//    cout&lt;&lt;&quot;Inside: &quot;&lt;&lt;Outside&lt;T&gt;::Inside&lt;R&gt;::r&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//template&lt;class T&gt;</span></span><br><span class="line"><span class="comment">//void Outside&lt;T&gt;::disp()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    cout&lt;&lt;&quot;Outside:&quot;;</span></span><br><span class="line"><span class="comment">//    t.disp();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Outside&lt;<span class="type">int</span>&gt;::<span class="function">Inside&lt;<span class="type">double</span>&gt; <span class="title">obin</span><span class="params">(<span class="number">3.5</span>)</span></span>;<span class="comment">//声明Inside类对象obin</span></span><br><span class="line">    obin.<span class="built_in">disp</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function">Outside&lt;<span class="type">int</span>&gt; <span class="title">obout</span><span class="params">(<span class="number">2</span>)</span></span>;<span class="comment">//创建Outside类对象obout</span></span><br><span class="line">    obout.<span class="built_in">disp</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Inside: 3.5</span></span><br><span class="line"><span class="comment">Outside:Inside: 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>嵌套越多越麻烦：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OutSide</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inside</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Q&gt;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Q x)</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R&gt;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Q&gt;</span><br><span class="line"><span class="type">void</span> OutSide&lt;T&gt;::Inside&lt;R&gt;::<span class="built_in">print</span>(Q x) &#123;</span><br><span class="line">    <span class="comment">// some code...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vector、deque、list"><a href="#vector、deque、list" class="headerlink" title="vector、deque、list"></a>vector、deque、list</h2><p><img src="https://s2.loli.net/2024/04/22/sSUM1IazBkEP5wV.png" alt="66-19.png"></p><p>这部分知识早有接触，因此只是杂乱地记一些东西。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Container&amp; con)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; elem : con) &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; number = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">    number.<span class="built_in">push_back</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">    number.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 3 5 7 9 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 11 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::deque&lt;<span class="type">int</span>&gt; number = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">    number.<span class="built_in">push_back</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">    number.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 3 5 7 9 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 11 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::list&lt;<span class="type">int</span>&gt; number = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">    number.<span class="built_in">push_back</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">    number.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 3 5 7 9 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 11 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test3</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vector-源码阅读"><a href="#vector-源码阅读" class="headerlink" title="vector 源码阅读"></a>vector 源码阅读</h3><p>vector 的继承图：</p><p><img src="https://bu.dusays.com/2024/04/22/662624196f56c.png" alt="66-20.png"></p><p>vector底层原理图：</p><p><img src="https://bu.dusays.com/2024/04/22/66262463b326a.png" alt="66-21.png"></p><p>类型萃取（提取、过滤）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> __Tp, <span class="keyword">class</span> <span class="title class_">_Alloc</span> = __STL_DEFAULT_ALLOCATOR(_Tp)&gt;</span><br><span class="line"><span class="keyword">class</span> vector</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> _Base::allocator_type allocator_type; <span class="comment">//typename为了严格表明一个类型</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> _Tp value_type;</span><br><span class="line">    <span class="keyword">typedef</span> value_type* pointer;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">const</span> value_type* const_pointer;</span><br><span class="line">    <span class="keyword">typedef</span> value_type* iterator;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">const</span> value_type* const_iterator;</span><br><span class="line">    <span class="keyword">typedef</span> value_type&amp; reference;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">const</span> value_type&amp; const_reference;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">size_t</span> size_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">ptrdiff_t</span> difference_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 vector 中，<code>operator[]</code>与<code>at</code>函数都具有随机访问的功能，但是at函数有范围检查，所以更加安全一些：</p><p><img src="https://s2.loli.net/2024/04/22/bQcjCBGsFoRt8rJ.jpg" alt="66-22.jpeg"></p><p>如何获取 vector 的第一个元素的地址：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// number 是一个 vector 对象</span></span><br><span class="line">&amp;number;   <span class="comment">// error</span></span><br><span class="line">&amp;*number;  <span class="comment">// error</span></span><br><span class="line">&amp;*number.<span class="built_in">begin</span>();   <span class="comment">// ok</span></span><br><span class="line">&amp;number[<span class="number">0</span>];         <span class="comment">// ok</span></span><br><span class="line"><span class="type">int</span>* pdata = number.<span class="built_in">data</span>(); <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><h3 id="deque-源码阅读"><a href="#deque-源码阅读" class="headerlink" title="deque 源码阅读"></a>deque 源码阅读</h3><p>deque 的继承图：</p><p><img src="https://bu.dusays.com/2024/04/22/66264cb38d065.png" alt="66-23.png"></p><p>deque 的原理图：</p><p><img src="https://s2.loli.net/2024/04/22/7oDRV5AvWfYGKHZ.png" alt="66-24.png"></p><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><p>容器的清空：</p><p><img src="https://bu.dusays.com/2024/04/22/66266e03af909.png" alt="66-25.png"></p><p>list 的排序相关：</p><p><img src="https://s2.loli.net/2024/04/22/nToXG5cmRUviHzP.png" alt="66-26.png"></p><p>vector 的 insert 扩容机制：<br>对于 push_back 而言，每次插入的个数是一定的，那么按照两倍的方法进行扩容，是 OK 的。但是对于 insert 而言，每次插入元素的个数是不确定的，所以没有一个统一的标准进行扩容。</p><ul><li>令 capacity() = n, size() = m, 将要插入 t 个元素</li><li>t &lt; n-m, 不扩容</li><li>n-m &lt; t &lt; m, 按照 2*m 进行扩容</li><li>t &gt; n-m, m &lt; t &lt; n, 按照 t+m 进行扩容</li><li>t &gt; n-m, t &gt; n, 按照 t+m 进行扩容</li></ul><h2 id="Associative-containers"><a href="#Associative-containers" class="headerlink" title="Associative containers"></a>Associative containers</h2><p>同样是很杂的笔记。</p><p>一些魔咒：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::set;</span><br><span class="line"><span class="keyword">using</span> std::pair;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Container&amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;elem : con)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; aa = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">87</span>&#125;;</span><br><span class="line"></span><br><span class="line">    set&lt;<span class="type">int</span>&gt;::iterator it = aa.<span class="built_in">find</span>(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span>(it == aa.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;not exist.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;exist.&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 吟唱魔咒</span></span><br><span class="line">    pair&lt;set&lt;<span class="type">int</span>&gt;::iterator, <span class="type">bool</span>&gt; ret = aa.<span class="built_in">insert</span>(<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret.second)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;插入成功 &quot;</span> &lt;&lt; *ret.first &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;插入失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">display</span>(aa);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">exist.</span></span><br><span class="line"><span class="comment">插入成功 8</span></span><br><span class="line"><span class="comment">1  2  3  4  5  6  7  8  87 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>针对于自定义类型用法（定义小于号）：</p><ul><li>模板的特化方式</li><li><img src="https://s2.loli.net/2024/04/23/rXRWfSJHNzy4kAu.png" alt="66-27.png"></li><li>重载运算符</li><li><img src="https://bu.dusays.com/2024/04/23/662773e3a3110.png" alt="66-28.png"></li><li>函数对象（仿函数）</li><li><img src="https://bu.dusays.com/2024/04/23/662773fc84e88.png" alt="66-29.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis Note</title>
      <link href="/posts/ac87c2.html"/>
      <url>/posts/ac87c2.html</url>
      
        <content type="html"><![CDATA[<h2 id="NoSQL-和-Redis-概述"><a href="#NoSQL-和-Redis-概述" class="headerlink" title="NoSQL 和 Redis 概述"></a>NoSQL 和 Redis 概述</h2><p>在日常的开发中，无不都是使用数据库来进行数据的存储，由于一般的系统任务中通常不会存在<strong>高并发</strong>的情况，所以这样看起来并没有什么问题，可是一旦涉及大数据量的需求，比如一些商品抢购的情景，或者是主页访问量瞬间较大的时候，单一使用数据库来保存数据的系统会因为面向磁盘，<strong>磁盘读/写速度比较慢</strong>的问题而存在严重的性能弊端，一瞬间成千上万的请求到来，需要系统在极短的时间内完成<strong>成千上万次的读/写操作</strong>，这个时候往往不是数据库能够承受的，极其容易造成数据库系统瘫痪，最终导致服务宕机的严重生产问题。</p><p>为了克服上述的问题，项目通常会引入 NoSQL 技术，这是一种<strong>基于内存</strong>的数据库，并且提供一定的持久化功能。</p><p>NoSQL，指的是<strong>非关系型数据库</strong>。NoSQL（<strong>Not Only SQL</strong>），是对不同于传统的关系型数据库的数据库管理系统的统称。对 NoSQL 最普遍的解释是”非关联型的”，强调 Key-Value Stores 和文档数据库的优点，而不是单纯的反对 RDBMS。</p><p><strong>NoSQL 用于超大规模数据的存储。</strong>（例如谷歌或 Facebook 每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p><p>NoSQL 数据库主要有以下四类：</p><ul><li>基于键值对 key-value 类型：Redis，memcached</li><li>列存储数据库 Column-oriented Graph：HBase</li><li>图形数据库 Graphs based：Neo4j</li><li>文档型数据库： MongoDB<ul><li>MongoDB是一个基于分布式文件存储的数据库，主要用来处理大量的文档。    </li></ul></li></ul><p>Redis 是什么？<br><strong>Re</strong>mote <strong>Di</strong>ctionary <strong>S</strong>ervice（远程字典服务器）<br>Redis 是一个开源（BSD许可）的，C语言编写的，高性能的数据结构存储系统，它可以用作<strong>数据库</strong>、<strong>缓存</strong>和<strong>消息中间件</strong>。它<strong>基于内存</strong>运行并支持<strong>持久化</strong>的 NoSQL 数据库，是当前最热门的 NoSQL 数据库之一。    </p><p>相关网站：</p><ul><li>redis中文官网：<a href="http://www.redis.cn/">http://www.redis.cn/</a></li><li>redis英文官网：<a href="https://redis.io/">https://redis.io/</a></li></ul><p>Redis 的特性：持久化、丰富的数据类型、数据备份（主从复制）。</p><p>Redis 的优点：</p><ul><li>性能极高</li><li>丰富的数据类型<ul><li>Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作</li></ul></li><li>原子性</li><li>丰富的特性<ul><li>Redis 支持 publish / subscribe 、通知、key 过期等特性</li></ul></li></ul><p>安装按官网走即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><p>Redis 是一个字典结构的存储服务器，而实际上一个 Redis 实例提供了多个用来存储数据的字典，客户端可以指定将数据存储在哪个字典中。这与我们熟知的在一个关系数据库实例中可以创建多个数据库类似，所以可以将其中的每个字典都理解成一个独立的数据库。</p><p>每个数据库对外都是一个从 0 开始的递增数字命名，Redis <strong>默认支持 16 个数据库</strong>（可以通过配置文件支持更多，无上限），可以通过配置 databases 来修改这一数字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; select 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[10]&gt; select 15</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[15]&gt; select 16</span><br><span class="line">(error) ERR DB index is out of range</span><br><span class="line">127.0.0.1:6379[15]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>进入 redis ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>数据库的切换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; select 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[10]&gt; select 15</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[15]&gt; select 16</span><br><span class="line">(error) ERR DB index is out of range</span><br><span class="line">127.0.0.1:6379[15]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>不言之教：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k2 200</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; dbsize</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k1&quot;</span><br><span class="line">2) &quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt; keys k?</span><br><span class="line">1) &quot;k1&quot;</span><br><span class="line">2) &quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt; set k12 12</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys k?</span><br><span class="line">1) &quot;k1&quot;</span><br><span class="line">2) &quot;k2&quot;</span><br></pre></td></tr></table></figure><p>删除 key ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k1&quot;</span><br><span class="line">2) &quot;k12&quot;</span><br><span class="line">3) &quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt; del k12</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; del k12</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><p>清除当前数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[1]&gt; set k1 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; dbsize</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[1]&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">(empty array)</span><br></pre></td></tr></table></figure><p>清空所有数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flushall</span><br></pre></td></tr></table></figure><p>判断某个 key 是否存在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k1&quot;</span><br><span class="line">2) &quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt; Exists k1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; Exists k12</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><p>把 key 从当前库移动到目标库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; move k1 15</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt; select 15</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[15]&gt; keys *</span><br><span class="line">1) &quot;k1&quot;</span><br></pre></td></tr></table></figure><p>查看 key 的类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; type k2</span><br><span class="line">string</span><br></pre></td></tr></table></figure><p>为给定的key设置过期的时间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt; Expire k2 10</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) 8</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) -2</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) -2</span><br><span class="line">127.0.0.1:6379&gt; set k1 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) -1</span><br></pre></td></tr></table></figure><p>在上面的命令中，-2 表示数据已经消失，-1 表示该数据不会过期。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p><img src="https://s2.loli.net/2024/01/31/fuDdGLaOZI1xyRs.png" alt="65-1.png"></p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>string 是 redis 最基本的类型，可以理解成一个 key 对应一个 value . 一个 string 类型的值最大能存储512MB .</p><p>string 类型是<strong>二进制安全</strong>的。意思是 redis 的 string <strong>可以包含任何数据</strong>。如 jpg 图片或序列化的对象。</p><p>设定指定key的值、获取指定key的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k2 20</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k3 hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;10&quot;</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;hello&quot;</span><br></pre></td></tr></table></figure><p>设置、获取多个给定的 key 值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mset k11 11 k12 12 k13 world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget k11 k12 k13</span><br><span class="line">1) &quot;11&quot;</span><br><span class="line">2) &quot;12&quot;</span><br><span class="line">3) &quot;world&quot;</span><br></pre></td></tr></table></figure><p>二进制安全的体现（设置的是什么，获取的就是什么）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k22 hello\0world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k22</span><br><span class="line">&quot;hello\\0world&quot;</span><br></pre></td></tr></table></figure><p>返回字符串的子串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE k3 0 1</span><br><span class="line">&quot;he&quot;</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE k3 0 3</span><br><span class="line">&quot;hell&quot;</span><br><span class="line">127.0.0.1:6379&gt; set k4 askgalfja;fegrga</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">&quot;askgalfja;fegrga&quot;</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE k4 0 -1</span><br><span class="line">&quot;askgalfja;fegrga&quot;</span><br></pre></td></tr></table></figure><p>覆盖字符串的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; SETRANGE k3 0 wor</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;worlo&quot;</span><br><span class="line">127.0.0.1:6379&gt; SETRANGE k3 waipoqiaoyaoayao</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;setrange&#x27; command</span><br><span class="line">127.0.0.1:6379&gt; SETRANGE k3 0 waipoqiaoyaoayao</span><br><span class="line">(integer) 16</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;waipoqiaoyaoayao&quot;</span><br></pre></td></tr></table></figure><p>设新值，返回旧值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;10&quot;</span><br><span class="line">127.0.0.1:6379&gt; GETSET k1 hello</span><br><span class="line">&quot;10&quot;</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;hello&quot;</span><br></pre></td></tr></table></figure><p>set 值，并设置过期时间（以秒为单位）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SETEX k1 10 200</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;200&quot;</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) -2</span><br></pre></td></tr></table></figure><p>加一 / 加很多（被加的必须是数值）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">(integer) 101</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">(integer) 102</span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">(integer) 103</span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">(integer) 104</span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">(integer) 105</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;105&quot;</span><br><span class="line">127.0.0.1:6379&gt; INCRBY k1 95</span><br><span class="line">(integer) 200</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;200&quot;</span><br></pre></td></tr></table></figure><h3 id="list（双向链表）"><a href="#list（双向链表）" class="headerlink" title="list（双向链表）"></a>list（双向链表）</h3><p>插入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush list1 1 2 3 4 5 6</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; rpush list1 7 8 9 10</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line"> 1) &quot;6&quot;</span><br><span class="line"> 2) &quot;5&quot;</span><br><span class="line"> 3) &quot;4&quot;</span><br><span class="line"> 4) &quot;3&quot;</span><br><span class="line"> 5) &quot;2&quot;</span><br><span class="line"> 6) &quot;1&quot;</span><br><span class="line"> 7) &quot;7&quot;</span><br><span class="line"> 8) &quot;8&quot;</span><br><span class="line"> 9) &quot;9&quot;</span><br><span class="line">10) &quot;10&quot;</span><br></pre></td></tr></table></figure><p>出队：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpop list1</span><br><span class="line">&quot;6&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpop list1</span><br><span class="line">&quot;10&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;1&quot;</span><br><span class="line">6) &quot;7&quot;</span><br><span class="line">7) &quot;8&quot;</span><br><span class="line">8) &quot;9&quot;</span><br></pre></td></tr></table></figure><p>通过下标设置列表元素的值，下标从0开始：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lset list1 5 1000</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;1&quot;</span><br><span class="line">6) &quot;1000&quot;</span><br><span class="line">7) &quot;8&quot;</span><br><span class="line">8) &quot;9&quot;</span><br></pre></td></tr></table></figure><p>通过下标获取列表中的元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LINDEX list1 5</span><br><span class="line">&quot;1000&quot;</span><br></pre></td></tr></table></figure><p>从队头开始移除 count 个值为 value 的列表元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LREM key count value</span><br></pre></td></tr></table></figure><p>对一个列表进行修剪（trim），即，只保留指定区间内的元素，其余元素将被删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LTRIM list1 2 5</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;3&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;1&quot;</span><br><span class="line">4) &quot;1000&quot;</span><br></pre></td></tr></table></figure><p>总结： redis 中的区间是左闭右闭的。</p><p>在列表的元素前插入元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; linsert list1 after 1 200</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) &quot;3&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;1&quot;</span><br><span class="line">4) &quot;200&quot;</span><br><span class="line">5) &quot;1000&quot;</span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>set 是 String 类型的无序集合。集合成员是唯一的，集合中不能出现重复的数据。</p><p>集合通过哈希表实现，增、删、查的复杂度为 O(1) .</p><p>增：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset1 1 3 5 7 8 3 5 1</span><br><span class="line">(integer) 5</span><br></pre></td></tr></table></figure><p>查看个数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scard myset1</span><br><span class="line">(integer) 5</span><br></pre></td></tr></table></figure><p>显示（此例有序系巧合）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers myset1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;3&quot;</span><br><span class="line">3) &quot;5&quot;</span><br><span class="line">4) &quot;7&quot;</span><br><span class="line">5) &quot;8&quot;</span><br></pre></td></tr></table></figure><p>其它命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 判断member元素是否是集合key的成员</span><br><span class="line">SISMEMBER key member</span><br><span class="line"></span><br><span class="line"># 将member元素从source集合移动到destination集合</span><br><span class="line">SMOVE source destination member</span><br><span class="line"></span><br><span class="line">SREM key value       # 删除集合中值为value的元素</span><br><span class="line"></span><br><span class="line">SRANDMEMBER key num  # 在集合中随机选出num个</span><br><span class="line"></span><br><span class="line"># 移除并返回集合中一个/num个随机元素</span><br><span class="line">SPOP key [num]</span><br><span class="line"></span><br><span class="line">SDIFF key1 key2      # 求差集，key1-key2</span><br><span class="line">SINTER key1 key2     # 求交集</span><br><span class="line">SUNION key1 key2     # 求并集</span><br></pre></td></tr></table></figure><h3 id="sorted-set（zset）"><a href="#sorted-set（zset）" class="headerlink" title="sorted set（zset）"></a>sorted set（zset）</h3><p>有序集合和集合一样也是 string 类型元素的集合。</p><p>不同的是每个元素都会关联一个<strong>double类型的分数</strong>。redis 通过分数来为集合中的成员从小到大排序。</p><p>有序集合的成员是唯一的，但分数可以重复。</p><p>增：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd zset1 10 hello 30 world 20 peking</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><p>获取有序集合的成员数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcard zset1</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><p>计算在有序集合中指定分数区间的成员数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcount zset1 10 100</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zcount zset1 10 15</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><p>查看按照权重排序后的下标对应的元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGE zset1 0 1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;peking&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE zset1 0 1 withscores</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;10&quot;</span><br><span class="line">3) &quot;peking&quot;</span><br><span class="line">4) &quot;20&quot;</span><br></pre></td></tr></table></figure><p><del>通过字典区间返回有序集合的成员</del>（分数要一致）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd zset2 10 ohmyzsh 10 ohmygod 10 hello 10 world</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; zrangebylex zset2 [h [o</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebylex zset2 [h [ok</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;ohmygod&quot;</span><br><span class="line">3) &quot;ohmyzsh&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebylex zset2 [h [w</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;ohmygod&quot;</span><br><span class="line">3) &quot;ohmyzsh&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebylex zset2 [h [www</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;ohmygod&quot;</span><br><span class="line">3) &quot;ohmyzsh&quot;</span><br><span class="line">4) &quot;world&quot;</span><br></pre></td></tr></table></figure><p>容易发现上面的区间是左闭右开的。</p><p>其它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 通过分数返回有序集合指定区间内的成员</span><br><span class="line">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] </span><br><span class="line"></span><br><span class="line">ZSCORE key member   # 返回有序集中，成员的分数值</span><br><span class="line"></span><br><span class="line"># 返回有序集中指定分数区间内的成员，分数从高到低排序</span><br><span class="line">ZREVRANGEBYSCORE key max min [WITHSCORES]</span><br></pre></td></tr></table></figure><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>hash 是一个 string 类型的 field（字段）和 value（值）的映射表，hash 特别适合用于存储对象。</p><p>Key-value 模式不变，但 value 是一个键值对。</p><p>Redis 中的 hash 并不是采用哈希实现的，而是类似于以下方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map&lt;key, map&lt;key1, value&gt;&gt;</span><br></pre></td></tr></table></figure><p><code>HSET key field value</code>将哈希表 key 中的字段 field 的值设为 value ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset people name Mizuho gender woman age 17</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><p>获取给定字段的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hget people name</span><br><span class="line">&quot;Mizuho&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget people gender</span><br><span class="line">&quot;woman&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget people age</span><br><span class="line">&quot;17&quot;</span><br></pre></td></tr></table></figure><p>获取字段和值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hkeys people</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;gender&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">127.0.0.1:6379&gt; hvals people</span><br><span class="line">1) &quot;Mizuho&quot;</span><br><span class="line">2) &quot;woman&quot;</span><br><span class="line">3) &quot;17&quot;</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="Units"><a href="#Units" class="headerlink" title="Units"></a>Units</h3><p><img src="https://bu.dusays.com/2024/02/02/65bc7bca2f40d.png" alt="65-2.png"></p><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bind 127.0.0.1      # 绑定的ip</span><br><span class="line">protected-mode yes  # 保护模式</span><br><span class="line">port  6379          # 端口</span><br></pre></td></tr></table></figure><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes     # 以守护进程方式运行</span><br><span class="line">loglevel  notice  # 日志级别</span><br><span class="line">database  16      # 数据库数量 </span><br></pre></td></tr></table></figure><h3 id="snapshoting"><a href="#snapshoting" class="headerlink" title="snapshoting"></a>snapshoting</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">save 900 1              </span><br><span class="line"># 900秒(15分钟)后，若至少有1个key发生变化，dump内存快照</span><br><span class="line"></span><br><span class="line">save 300 10            </span><br><span class="line"># 300秒(5分钟)后，若至少有10个key发生变化，dump内存快照</span><br><span class="line"></span><br><span class="line">save 60 10000       </span><br><span class="line"># 60秒(1分钟)后，若至少有10000个key发生变化，dump内存快照</span><br></pre></td></tr></table></figure><p>（以下信息可能过期）：</p><ul><li>快照文件名 <code>dbfilename dump.rdb</code></li><li>保存目录名 <code>/var/lib/redis/6379</code></li></ul><h3 id="APPEND-ONLY-MODE"><a href="#APPEND-ONLY-MODE" class="headerlink" title="APPEND ONLY MODE"></a>APPEND ONLY MODE</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 是否使用AOF持久化方式。默认不使用</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line"># 持久化的AOF文件名</span><br><span class="line">appendfilename &quot;appendonly6381.aof&quot;</span><br><span class="line"></span><br><span class="line"># 在Redis的配置文件中存在三种AOF同步方式，分别是：</span><br><span class="line">appendfsync always     #每次有数据修改发生时都会写入AOF文件。</span><br><span class="line">appendfsync everysec   #每秒钟同步一次，该策略为AOF的缺省策略。</span><br><span class="line">appendfsync no         #从不同步。高效但是数据不会被持久化。</span><br></pre></td></tr></table></figure><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="分类、概述"><a href="#分类、概述" class="headerlink" title="分类、概述"></a>分类、概述</h3><p>Redis 持久化分为 RDB 持久化和 AOF 持久化：前者将当前数据保存到硬盘（原理是将 Reids 在内存中的数据库记录定时 dump 到磁盘上的 RDB 持久化），后者则是将每次执行的写命令保存到硬盘（原理是将 Reids 的操作日志以追加的方式写入文件，类似于 MySQL 的 binlog）；由于 AOF 持久化的实时性更好，即当进程意外退出时丢失的数据更少，因此 AOF 是目前主流的持久化方式，不过 RDB 持久化仍然有其用武之地。</p><p>RDB 持久化方式在指定的时间间隔内对数据进行快照存储。</p><p>AOF 持久化方式记录每次写操作，服务器重启时会重新执行这些命令以恢复原始数据，AOF 命令以 redis 协议追加。Redis 还能对 AOF 文件进行后台重写，使得 AOF 文件的体积不至于过大。</p><p>可以同时开启两种持久化方式。这种情况下，redis 重启时会优先载入 AOF 文件来恢复原始的数据。</p><h3 id="RDB-方式"><a href="#RDB-方式" class="headerlink" title="RDB 方式"></a>RDB 方式</h3><p>触发 RDB 快照：</p><ol><li><strong>在指定的时间间隔内，执行指定次数的写操作</strong></li><li>执行<code>save</code>（阻塞， 只管保存快照，其他的等待） 或者 bgsave （异步）命令</li><li>执行 flushall 命令，清空数据库所有数据</li><li>执行 shutdown 命令，保证服务器正常关闭且不丢失任何数据</li></ol><p>RDB 方式的优点：</p><ol><li>适合大规模的数据恢复，与 AOF 相比,在恢复大的数据集时，RDB 方式更快。</li><li>若业务对数据完整性和一致性要求不高，RDB 是很好的选择。</li></ol><p>RDB方式的缺点：</p><ol><li>数据的完整性和一致性不高，因为 RDB 可能在最后一次备份时宕机了。</li><li><strong>备份时占用内存</strong>，因为 Redis 在备份时会 fork 一个子进程，将数据写入一个临时文件（此时内存中的数据是原来的两倍），最后再将临时文件替换之前的备份文件。<br><img src="https://bu.dusays.com/2024/02/02/65bc8c7b21612.jpeg" alt="65-3.jpeg"></li></ol><h3 id="AOF-方式"><a href="#AOF-方式" class="headerlink" title="AOF 方式"></a>AOF 方式</h3><p>默认不开启 AOF 持久化方式，需要修改配置打开。</p><p>默认的 AOF 持久化策略是每秒钟 fsync 一次（把缓存中的写指令记录到磁盘中），因为在这种情况下，redis 仍可以保持高性能，而即使故障，也只会丢失最近 1 秒的数据。</p><p>重写（rewrite）：<br>AOF 的运作方式是不断地将命令追加到文件末尾，随着写入命令的增加， AOF 文件也会越来越大。例如，若对一个计数器调用 100 次<code>INCR</code>，那么仅为了保存这个计数器的当前值，AOF 文件就需要使用 100 条记录（entry）。而实际上，只用一条<code>SET</code>命令就足够了。<br>为此，Redis 支持一种特性，可以在不打断服务客户端的情况下，对 AOF 文件进行重建（rebuild）。</p><p>执行<code>BGREWRITEAOF</code>命令， Redis 将生成一个新的 AOF 文件，包含重建当前数据集所需的最少命令。Redis 2.2 需要手动执行<code>BGREWRITEAOF</code>命令；Redis 2.4 则可以自动触发 AOF 重写。</p><p>Redis 会记录上次重写时的 AOF 大小，默认配置是当 AOF 文件大小是上次 rewrite 后大小的一倍且文件大于64M时触发：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>保证数据的完整性和一致性</li><li>AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件易读性好，对文件进行分析（parse）也很轻松。导出（export）AOF 文件也非常简单：例如，若不小心执行了<code>FLUSHALL</code>命令，但只要<code>AOF</code>文件未被重写，那么只要停止服务器，移除 AOF 文件末尾的<code>FLUSHALL</code>命令，并重启 Redis，就可以将数据集恢复到<code>FLUSHALL</code>执行前的状态。</li></ul><p>缺点：</p><ul><li>大量数据恢复的时候，执行时间长</li><li>对于相同的数据集来说，AOF 文件的体积通常大于 RDB 文件的体积</li></ul><p>若只有 aof 持久化的方式，且 aof 文件损坏，则 redis 服务器无法启动。</p><p>损坏的 aof 文件修复，可尝试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo redis-check-aof --fix 文件名</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 开启事务</span><br><span class="line">multi</span><br><span class="line"></span><br><span class="line"># 提交事务</span><br><span class="line">exec</span><br></pre></td></tr></table></figure><p>Redis 事务可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会序列化，<strong>按顺序地串行化执行</strong>，而不会被其他命令插入，不许加塞。</p><p>Redis 事务有以下三个重要的保证：</p><ol><li>批量操作在发送 EXEC 命令前被放入队列缓存。</li><li>收到 EXEC 命令后进入事务执行，<strong>事务中任意命令执行失败，其余的命令依然被执行</strong>。</li><li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li></ol><p>一个事务从开始到执行会经历以下三个阶段：</p><ol><li>开始事务</li><li>命令入队</li><li>执行事务</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k2 hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k3 300</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) &quot;300&quot;</span><br><span class="line">3) (integer) 101</span><br></pre></td></tr></table></figure><p>redis 的事务不具有原子性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k4 400</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) (error) ERR value is not an integer or out of range</span><br><span class="line">2) OK</span><br><span class="line">3) &quot;400&quot;</span><br><span class="line">4) (integer) 102</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;102&quot;</span><br></pre></td></tr></table></figure><p>EXECABORT Transaction discarded because of previous errors :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushall</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line">127.0.0.1:6379&gt; set k1 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k2 hello </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k3</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;set&#x27; command</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k4 400</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br></pre></td></tr></table></figure><p>取消事务，放弃执行事务块内的所有命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DISCARD</span><br></pre></td></tr></table></figure><p><code>WATCH key [key ...]</code>，监视一个（多个）key ，如果在事务执行之前这个（这些）key 被其他命令改动，那么事务将被打断。</p><p><code>UNWATCH</code>取消<code>WATCH</code>命令对所有 key 的监视。</p><center><p style="color: red";>- - - - - “监视” 演示 - - - - -</p></center><p>开始：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">2) &quot;k3&quot;</span><br><span class="line">3) &quot;k1&quot;</span><br></pre></td></tr></table></figure><p>terminal 1 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch k3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k3 400</span><br><span class="line">QUEUED</span><br></pre></td></tr></table></figure><p>terminal 2 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k3 500</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;500&quot;</span><br></pre></td></tr></table></figure><p>terminal 1 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;500&quot;</span><br></pre></td></tr></table></figure><center><p style="color: red";>- - - - - “监视” 演示 END - - - - -</p></center><p>一旦执行<code>EXEC</code>，<code>WATCH</code>监控会被取消。</p><h2 id="乐观锁、悲观锁"><a href="#乐观锁、悲观锁" class="headerlink" title="乐观锁、悲观锁"></a>乐观锁、悲观锁</h2><p>悲观锁：<br><strong>每次拿数据时都会先上锁</strong>。其他线程想要访问时，都需要阻塞挂起。传统的关系型数据库里用到了很多这种锁机制，如行锁、表锁、读锁、写锁等，都是在操作之前先上锁。</p><p>乐观锁（Optimistic Lock）【冲突检测和数据更新】：<br><strong>每次拿数据时不上锁</strong>。但更新时会使用版本号等机制，判断此期间内该数据是否被更新。乐观锁<strong>适用于多读</strong>的应用类型，可以提高吞吐量。数据库若提供类似于 write_condition 机制的其实都是乐观锁。</p><p>乐观锁策略：提交版本必须大于记录当前版本才能执行更新，一般会使用<strong>版本号机制</strong>或<strong>CAS操作</strong>实现。</p><p>version方式：<br>一般是在数据表中加上一个数据版本号 version 字段，表示数据被修改的次数，当数据被修改时，version 值加一。当线程 A 要更新数据值时，在读取数据的同时也会读取 version 值，提交更新时，若刚才读取到的 version 值和当前数据库中的 version 值相等时才真正执行更新，否则重试更新操作，直到更新成功。</p><p>CAS（Compare And Swap）操作方式：<br>CAS 是乐观锁技术，涉及到三个操作数，数据所在的内存值V，预期值A，新值B。当需要更新时，判断当前内存值V与之前取到的值A是否相等，若相等，则用新值更新，若失败则重试。一般情况下是一个自旋操作，即不断的重试。</p><h2 id="主从复制、哨兵模式"><a href="#主从复制、哨兵模式" class="headerlink" title="主从复制、哨兵模式"></a>主从复制、哨兵模式</h2><p>持久化侧重解决的是 Redis 数据的单机备份问题（从内存到硬盘的备份）；而主从复制则侧重解决数据的多机热备。此外，主从复制还可以实现负载均衡和故障恢复。</p><p>主从复制，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为主节点（master），后者称为从节点（slave）；数据的复制是<strong>单向</strong>的，只能由主节点到从节点。</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/M8RwlLZhtOI?si=clISeZjsqLiaNs6I" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><p>本节课的 PDF 笔记：</p><div class="row"><iframe src="https://drive.google.com/file/d/1AerFNG6KZ3hRKiEOYGkbOJrv_1Zbk5Y5/preview" style="width:100%; height:550px"></iframe></div><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>一般而言，热点数据会去做缓存，缓存由定时任务刷新，但定时刷新会产生一个问题：当缓存服务器重启或者大量缓存集中在某一个时间段失效时，此时相当于没有缓存，所有对数据的请求直接走到数据库，带来很大压力。</p><p><img src="https://bu.dusays.com/2024/02/05/65c0ec28a43c9.png" alt="65-4.png"></p><p>解决方法：</p><ul><li><strong>将缓存失效时间分散开</strong>。比如可以在原有的失效时间基础上加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，很难引发集体失效的事件。</li><li><strong>不设置缓存的过期时间</strong>。有更新操作时就把热点的缓存全部更新，比如首页上的商品，当首页更新时，就把对应的数据替换掉。</li></ul><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存击穿指一个 key 可能会在某些时间点被超高并发地访问，属于“热点”数据，不停地扛着大量并发的访问，当这个热点数据在缓存中过期失效的时候，大量的并发访问就会穿破缓存，转移到数据库上面。</p><p>解决方法：</p><ul><li>延长热点 key 的过期时间或者设置永不过期，如排行榜、首页等。</li><li>利用互斥锁保证同一时刻只有一个客户端可以查询底层数据库的这个数据，一旦查到数据就缓存至 Redis 内，避免其他大量请求同时穿过 Redis 访问底层数据库。</li></ul><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>要查询的数据不存在，缓存无法命中所以需要查询完数据库，但是数据是不存在的，此时数据库肯定会返回空，也就不会记录到缓存中，这样每次对该数据的查询都会穿过缓存去查询一次数据库。</p><p>解决方法：</p><ul><li>查询时做一些校验和过滤（权限校验，参数校验等等），判断这是一次正常的查询，还是异常的查询或是攻击，如果是不合法的参数或者查询，直接返回。</li><li>缓存空对象，如果数据库中不存在这个数据，也在缓存中保存这个 key，只是把 val 值记录为“不存在”、“空”这样的数据，下次再访问这个 key 时，就不会到数据库中做无用的查找了。</li><li>可以预先将数据库里面所有的 key 全部存到一个大的 map 里面，然后在过滤器中过滤掉那些不存在的 key. 但是需要考虑数据库的 key 是会更新的，此时需要考虑数据库 —&gt; map 的更新频率问题。类似于位图。</li></ul><h2 id="hiredis"><a href="#hiredis" class="headerlink" title="hiredis"></a>hiredis</h2><h3 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/redis/hiredis.git</span><br></pre></td></tr></table></figure><p>进行解压与安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf hiredis.tar.gz</span><br><span class="line"><span class="built_in">cd</span> hiredis</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>更新动态库配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p>按照上面步骤安装之后，hiredis 的头文件会存在 /usr/local/include 下面，hiredis 的库文件存在 /usr/local/lib 下面。</p><p>编译方式：<br><code>g++ xxx.cc -o xxx -I /usr/local/include/hiredis -lhiredis</code>或者直接<code>g++ xxx.cc -lhiredis</code> 需要链接hiredis的库文件。</p><p>后续在代码中引用 hiredis 的头文件，可以直接使用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;hiredis/hiredis.h&gt;</span></span></span><br></pre></td></tr></table></figure><div class="row"><iframe src="https://drive.google.com/file/d/1asACieQELf93yK5e0SpIvgqAdUt-cLHC/preview" style="width:100%; height:550px"></iframe></div><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myRedis.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MYREDIS_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MYREDIS_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;hiredis/hiredis.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRedis</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyRedis</span>();</span><br><span class="line">    ~<span class="built_in">MyRedis</span>();</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">connect</span><span class="params">(<span class="type">const</span> string&amp; host, <span class="type">int</span> port)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(string key, string value)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">get</span><span class="params">(string key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    redisContext* _pConnect;</span><br><span class="line">    redisReply* _pReply;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyRedis.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myRedis.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MyRedis::<span class="built_in">MyRedis</span>():_pConnect(<span class="literal">nullptr</span>), _pReply(<span class="literal">nullptr</span>)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;MyRedis()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyRedis::~<span class="built_in">MyRedis</span>()&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;~MyRedis()&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_pConnect)&#123;</span><br><span class="line">        <span class="built_in">redisFree</span>(_pConnect);</span><br><span class="line">        _pConnect = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_pReply)&#123;</span><br><span class="line">        <span class="built_in">freeReplyObject</span>(_pReply);</span><br><span class="line">        _pReply = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">MyRedis::connect</span><span class="params">(<span class="type">const</span> string&amp; host, <span class="type">int</span> port)</span></span>&#123;</span><br><span class="line">    _pConnect = <span class="built_in">redisConnect</span>(host.<span class="built_in">c_str</span>(), port);</span><br><span class="line">    <span class="keyword">if</span>(_pConnect == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_pConnect != <span class="literal">nullptr</span> &amp;&amp; _pConnect-&gt;err)&#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;connect error : &quot;</span> &lt;&lt; _pConnect-&gt;errstr &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 连接成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyRedis::set</span><span class="params">(string key, string value)</span></span>&#123;</span><br><span class="line">    _pReply = (redisReply*) <span class="built_in">redisCommand</span>(_pConnect, <span class="string">&quot;SET %s %s&quot;</span>, key.<span class="built_in">c_str</span>(), value.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_pReply)&#123;</span><br><span class="line">        <span class="built_in">freeReplyObject</span>(_pReply);</span><br><span class="line">        _pReply = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">MyRedis::get</span><span class="params">(string key)</span></span>&#123;</span><br><span class="line">    _pReply = (redisReply*) <span class="built_in">redisCommand</span>(_pConnect, <span class="string">&quot;GET %s&quot;</span>, key.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_pReply)&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pReply-&gt;type == REDIS_REPLY_STRING)&#123;</span><br><span class="line">            string str = _pReply-&gt;str;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">freeReplyObject</span>(_pReply);</span><br><span class="line">            _pReply = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// testredis.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myRedis.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;MyRedis&gt; <span class="title">pRedis</span><span class="params">(<span class="keyword">new</span> MyRedis())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!pRedis-&gt;<span class="built_in">connect</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>))&#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;connect error ! &quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pRedis-&gt;<span class="built_in">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;lili&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Get the name is &quot;</span> &lt;&lt; pRedis-&gt;<span class="built_in">get</span>(<span class="string">&quot;name&quot;</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode/example_reids$ <span class="built_in">ls</span></span><br><span class="line">MyRedis.cc  myRedis.h  testredis.cc</span><br><span class="line">wanko@wanko:~/mycode/example_reids$ g++ *.cc -lhiredis</span><br><span class="line">wanko@wanko:~/mycode/example_reids$ ./a.out</span><br><span class="line">MyRedis()</span><br><span class="line">Get the name is lili</span><br><span class="line">~MyRedis()</span><br></pre></td></tr></table></figure><p>此时回到数据库中查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">127.0.0.1:6379&gt; type name</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;lili&quot;</span><br></pre></td></tr></table></figure><p>更进一步的拓展：<br><a href="https://github.com/sewenew/redis-plus-plus">https://github.com/sewenew/redis-plus-plus</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数笔记</title>
      <link href="/posts/35508c6a.html"/>
      <url>/posts/35508c6a.html</url>
      
        <content type="html"><![CDATA[<p>存档一下以前的知识，也许以后会进一步学习。</p><h2 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h2><div class="row"><iframe src="https://drive.google.com/file/d/1LVjZF-HDF6qXgoqa1j1OMri7_IiksgRp/preview" style="width:100%; height:550px"></iframe></div><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><div class="row"><iframe src="https://drive.google.com/file/d/1i-Bww3jJlxzrXSRKQtuEwv00SX0zfOsu/preview" style="width:100%; height:550px"></iframe></div><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><div class="row"><iframe src="https://drive.google.com/file/d/1Qz6qLOdS_FqzW1R3EfVwRAdysfF4IfuZ/preview" style="width:100%; height:550px"></iframe></div><h2 id="线性方程组"><a href="#线性方程组" class="headerlink" title="线性方程组"></a>线性方程组</h2><div class="row"><iframe src="https://drive.google.com/file/d/1jRrgEsx2XkIo9wEXdM-WaHe3APzSKEDj/preview" style="width:100%; height:550px"></iframe></div><h2 id="特征值和特征向量"><a href="#特征值和特征向量" class="headerlink" title="特征值和特征向量"></a>特征值和特征向量</h2><div class="row"><iframe src="https://drive.google.com/file/d/1cw6wr2XMo3HUDybu4SbzTd7dJxNq8Fd6/preview" style="width:100%; height:550px"></iframe></div><h2 id="二次型"><a href="#二次型" class="headerlink" title="二次型"></a>二次型</h2><div class="row"><iframe src="https://drive.google.com/file/d/1RLOwPGNd9T1KuMkKKqLFT9iek3-8jiDb/preview" style="width:100%; height:550px"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以前的事（序）</title>
      <link href="/posts/2098d023.html"/>
      <url>/posts/2098d023.html</url>
      
        <content type="html"><![CDATA[<p>一些古早的记忆。</p><p>红色气球的爆炸。</p><p>幼儿园，似乎是某个活动或者节日，园里挂了一排排的三角形彩旗，操场上有滑梯等娱乐设施。</p><p>出早操，老师在某次早操之后打了所有小朋友的手心。早餐 M 买了蛋饼，但我没有吃完，于是挂在班级的椅子上，放了很久。</p><p>第二年转学，坐在我前面的是一个扎着马尾的女孩。我非常好奇，不假思索地从头绳捋到发梢，女孩非常生气地转过身瞪了我一眼，似乎马上就要将双手拍在我的桌上：“不！许！摸！” </p><p>第二年或是第三年的冬天，上楼梯脚底一滑，头磕到了楼梯尖，开了一个口子。一个陌生的老爷爷把我带到班级，后来学校找了一辆面包车——大概是五菱宏光，送我去医院，缝了针。没有拆线的记忆。</p><p>有过“一二三，木头人”的游戏。</p><p>厕所不分男女，老师们定时让小朋友们按性别分开上。同班有一个怪人，有时会捡垃圾桶的东西吃。夏天有过集体定冷饮的事。学过英语，但只记得一个单词，“pencil”，课本上有一个巨大的铅笔。有考试，老师们让我们直接抄一个女孩的试卷。有补餐，基本上是白粥，中国移动有送一种小本子，我和同学会撕下一张垫碗。用菜梗做过印章。</p><p>有过表演活动，似乎和戏剧元素有关，有集体照，L 君也在上面，如此想来，真是和 L 同学过相当多年。</p><hr><p>高中的我，会怀念初中小学的日子。</p><p>我对此怀疑——它们真如我想的那般甘甜？</p><p>一个历时数年的实验：高中的时候，我问自己，我过的快乐吗？答，不算快乐。然后，我在心里记下这个答案。</p><p>大学，每当我怀念起高中，我就会想，哎，高中的时候怎么怎么好，老师是怎样优秀（排除个别人），相比其他县城高中，我的学校也还算有人文关怀，同学又个个都是人才，即便男女分桌还和一个扎着马尾的漂亮女孩同桌过一阵子（我坐在教室中间单独的一列，不参与左右轮换，只前后轮换。虽然是单独的一列其实还是挨着的，因此每次换座位我都换同桌），那我的高中生活一定很快乐吧？这个时候，我在高中埋下的回答就会探出脑袋告诉我，其实我的高中生活还挺糟糕，经历了严重的抑郁情绪，也一度陷入虚无主义中。</p><p>那么为什么大学的我会觉得高中生活很好呢？一定是因为我大学生活过的更不如意，想要有选择地反刍一些回忆，藉以安慰疲惫的精神罢。</p><p>如此看来，回忆确实倾向于美化自己，掩盖一些伤痛和不堪。</p><p>但还是要试着去把握它们。</p><hr><p>总的来说，这个系列的文章会大概讲讲创建这个 blog 之前的我的故事，可能会属于不那么有趣的那种。</p><p>一个人的回忆总是近于无限多的，按时间顺序去梳理个人的“编年史”是痴心妄想。</p><p>正如一些贺岁歌曲会让人想起过年时超市里的散装糖那样，记忆总是在意想不到的时刻像咕咚咕咚的泉水般涌出来。</p><p>因此我大抵是想到哪写到哪，思绪漫游之处，不过一场穷途之哭。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CppNote2</title>
      <link href="/posts/2249c81f.html"/>
      <url>/posts/2249c81f.html</url>
      
        <content type="html"><![CDATA[<p>前情提要： <a href="https://loveofpeach.github.io/posts/54b4d7a2.html">CppNote</a></p><h2 id="在代码之前"><a href="#在代码之前" class="headerlink" title="在代码之前"></a>在代码之前</h2><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>可以使用参数<code>-E</code>生成预处理之后的文件，以<code>i</code>结尾，生成之后的文件还是一个文本文件（代码）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -E helloworld.cpp -o helloworld.i</span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>进行语法分析、词法分析、语义分析。</p><p>可以使用<code>-S</code>选项，生成汇编代码，以 s 结尾。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ g++ -S helloworld.i -o helloworld.s</span><br><span class="line">wanko@wanko:~/mycode$ file helloworld.s</span><br><span class="line">helloworld.s: assembler source, ASCII text</span><br></pre></td></tr></table></figure><p>注意：linux 不以后缀名区分文件，上面仅仅是习惯。</p><h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><p>使用汇编器将汇编代码生成为目标代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">as helloworld.s -o helloworld.o</span><br></pre></td></tr></table></figure><p>查看生成了什么：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ ll</span><br><span class="line">total 816</span><br><span class="line">drwxrwxr-x  2 wanko wanko   4096  1月 10 22:26 ./</span><br><span class="line">drwxr-x--- 23 wanko wanko   4096  1月 10 22:22 ../</span><br><span class="line">-rwxrwxr-x  1 wanko wanko  16528  1月  8 01:48 a.out*</span><br><span class="line">-rw-rw-r--  1 wanko wanko     64  1月 10 22:24 cppnote2tmp.md</span><br><span class="line">-rw-rw-r--  1 wanko wanko   5769 12月 29 21:36 guoba.py</span><br><span class="line">-rw-rw-r--  1 wanko wanko     87  1月  8 01:47 helloworld.cpp</span><br><span class="line">-rw-rw-r--  1 wanko wanko 778417  1月  8 02:11 helloworld.i</span><br><span class="line">-rw-rw-r--  1 wanko wanko   2752  1月 10 22:26 helloworld.o</span><br><span class="line">-rw-rw-r--  1 wanko wanko   2254  1月  8 02:30 helloworld.s</span><br><span class="line">wanko@wanko:~/mycode$ file helloworld.o</span><br><span class="line">helloworld.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped</span><br></pre></td></tr></table></figure><p>生成了二进制文件。使用<code>nm</code>命令查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ nm helloworld.o</span><br><span class="line">                 U __cxa_atexit</span><br><span class="line">                 U __dso_handle</span><br><span class="line">                 U _GLOBAL_OFFSET_TABLE_</span><br><span class="line">0000000000000090 t _GLOBAL__sub_I_main</span><br><span class="line">0000000000000000 T main</span><br><span class="line">000000000000003a t _Z41__static_initialization_and_destruction_0ii</span><br><span class="line">                 U _ZNSolsEPFRSoS_E</span><br><span class="line">                 U _ZNSt8ios_base4InitC1Ev</span><br><span class="line">                 U _ZNSt8ios_base4InitD1Ev</span><br><span class="line">                 U _ZSt4cout</span><br><span class="line">                 U _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_</span><br><span class="line">0000000000000000 b _ZStL8__ioinit</span><br><span class="line">                 U _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc</span><br></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>将上一步生成的二进制文件与其他文件合在一起，生成可执行程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ g++ helloworld.o -o helloworld</span><br><span class="line">wanko@wanko:~/mycode$ ls</span><br><span class="line">a.out           guoba.py    helloworld.cpp  helloworld.o</span><br><span class="line">cppnote2tmp.md  helloworld  helloworld.i    helloworld.s</span><br><span class="line">wanko@wanko:~/mycode$ ll</span><br><span class="line">total 836</span><br><span class="line">drwxrwxr-x  2 wanko wanko   4096  1月 10 22:40 ./</span><br><span class="line">drwxr-x--- 23 wanko wanko   4096  1月 10 22:31 ../</span><br><span class="line">-rwxrwxr-x  1 wanko wanko  16528  1月  8 01:48 a.out*</span><br><span class="line">-rw-rw-r--  1 wanko wanko   1501  1月 10 22:36 cppnote2tmp.md</span><br><span class="line">-rw-rw-r--  1 wanko wanko   5769 12月 29 21:36 guoba.py</span><br><span class="line">-rwxrwxr-x  1 wanko wanko  16528  1月 10 22:40 helloworld*</span><br><span class="line">-rw-rw-r--  1 wanko wanko     87  1月  8 01:47 helloworld.cpp</span><br><span class="line">-rw-rw-r--  1 wanko wanko 778417  1月  8 02:11 helloworld.i</span><br><span class="line">-rw-rw-r--  1 wanko wanko   2752  1月 10 22:26 helloworld.o</span><br><span class="line">-rw-rw-r--  1 wanko wanko   2254  1月  8 02:30 helloworld.s</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ ./helloworld </span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>查看文件的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ file helloworld</span><br><span class="line">helloworld: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=c372c07e5b06ebb28508a24d3eca177989deee49, for GNU/Linux 3.2.0, not stripped</span><br></pre></td></tr></table></figure><p>使用<code>nm</code>命令查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ nm helloworld</span><br><span class="line">000000000000038c r __abi_tag</span><br><span class="line">0000000000004010 B __bss_start</span><br><span class="line">0000000000004150 b completed.0</span><br><span class="line">                 U __cxa_atexit@GLIBC_2.2.5</span><br><span class="line">                 w __cxa_finalize@GLIBC_2.2.5</span><br><span class="line">0000000000004000 D __data_start</span><br><span class="line">0000000000004000 W data_start</span><br><span class="line">00000000000010f0 t deregister_tm_clones</span><br><span class="line">0000000000001160 t __do_global_dtors_aux</span><br><span class="line">0000000000003d88 d __do_global_dtors_aux_fini_array_entry</span><br><span class="line">0000000000004008 D __dso_handle</span><br><span class="line">0000000000003d90 d _DYNAMIC</span><br><span class="line">0000000000004010 D _edata</span><br><span class="line">0000000000004158 B _end</span><br><span class="line">0000000000001254 T _fini</span><br><span class="line">00000000000011a0 t frame_dummy</span><br><span class="line">0000000000003d78 d __frame_dummy_init_array_entry</span><br><span class="line">0000000000002140 r __FRAME_END__</span><br><span class="line">0000000000003f90 d _GLOBAL_OFFSET_TABLE_</span><br><span class="line">0000000000001239 t _GLOBAL__sub_I_main</span><br><span class="line">                 w __gmon_start__</span><br><span class="line">0000000000002010 r __GNU_EH_FRAME_HDR</span><br><span class="line">0000000000001000 T _init</span><br><span class="line">0000000000002000 R _IO_stdin_used</span><br><span class="line">                 w _ITM_deregisterTMCloneTable</span><br><span class="line">                 w _ITM_registerTMCloneTable</span><br><span class="line">                 U __libc_start_main@GLIBC_2.34</span><br><span class="line">00000000000011a9 T main</span><br><span class="line">0000000000001120 t register_tm_clones</span><br><span class="line">00000000000010c0 T _start</span><br><span class="line">0000000000004010 D __TMC_END__</span><br><span class="line">00000000000011e3 t _Z41__static_initialization_and_destruction_0ii</span><br><span class="line">                 U _ZNSolsEPFRSoS_E@GLIBCXX_3.4</span><br><span class="line">                 U _ZNSt8ios_base4InitC1Ev@GLIBCXX_3.4</span><br><span class="line">                 U _ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4</span><br><span class="line">0000000000004040 B _ZSt4cout@GLIBCXX_3.4</span><br><span class="line">                 U _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4</span><br><span class="line">0000000000004151 b _ZStL8__ioinit</span><br><span class="line">                 U _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@GLIBCXX_3.4</span><br></pre></td></tr></table></figure><p>注意：<code>main</code>的位置发生了变化。</p><center><p style="color: red;">- - - - - 说明 - - - - -</p></center><p>平时使用不需要上面这么复杂。</p><p>若不指定文件名，则会生成<code>a.out</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ helloworld.cpp</span><br></pre></td></tr></table></figure><p>指定文件名的做法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ helloworld.cpp -o nahida</span><br></pre></td></tr></table></figure><p>则会生存可执行文件<code>nahida</code>，执行方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nahida</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/11/659ec2363dcbe.png" alt="62-1.png"></p><center><p style="color: red;">- - - - - END - - - - -</p></center><h2 id="静态库、动态库"><a href="#静态库、动态库" class="headerlink" title="静态库、动态库"></a>静态库、动态库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/demo$ ls</span><br><span class="line">add.c  main.c</span><br><span class="line">wanko@wanko:~/demo$ cat add.c</span><br><span class="line"></span><br><span class="line">int add(int x, int y)&#123;</span><br><span class="line">    return x+y;</span><br><span class="line">&#125;</span><br><span class="line">wanko@wanko:~/demo$ cat main.c</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int add(int,int);</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv)&#123;</span><br><span class="line">    printf(&quot;add(3,4)=%d\n&quot;,add(3,4));</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/demo$ gcc main.c</span><br><span class="line">/usr/bin/ld: /tmp/ccehSUXd.o: in function `main&#x27;:</span><br><span class="line">main.c:(.text+0x1e): undefined reference to `add&#x27;</span><br><span class="line">collect2: error: ld returned 1 exit status</span><br></pre></td></tr></table></figure><p>正确的编译方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/demo$ gcc main.c add.c -o main</span><br><span class="line">wanko@wanko:~/demo$ ./main</span><br><span class="line">add(3,4)=7</span><br></pre></td></tr></table></figure><p style="color: red;">现在我们尝试将 add.c 制作为一个静态库。</p><p>静态库特点：在链接时拷贝库文件，打包进可执行程序（在编译的时候进行打包）。</p><p>文件名形式：<code>**.a</code>，一般以<code>lib</code>开头。eg:<code>libadd.a</code></p><p>编译源码得到目标文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c add.c -o add.o</span><br></pre></td></tr></table></figure><p><code>ar</code>命令打包成库文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/demo$ gcc -c add.c -o add.o</span><br><span class="line">wanko@wanko:~/demo$ ar crsv libadd.a add.o</span><br><span class="line">a - add.o</span><br><span class="line">wanko@wanko:~/demo$ ll</span><br><span class="line">total 24</span><br><span class="line">drwxrwxr-x  2 wanko wanko 4096  1月 11 00:21 ./</span><br><span class="line">drwxr-x--- 24 wanko wanko 4096  1月 11 00:13 ../</span><br><span class="line">-rw-rw-r--  1 wanko wanko   39  1月 10 23:56 add.c</span><br><span class="line">-rw-rw-r--  1 wanko wanko 1232  1月 11 00:16 add.o</span><br><span class="line">-rw-rw-r--  1 wanko wanko 1372  1月 11 00:21 libadd.a</span><br><span class="line">-rw-rw-r--  1 wanko wanko  119  1月 10 23:59 main.c</span><br></pre></td></tr></table></figure><p>放入系统库文件路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/demo$ sudo cp libadd.a /usr/lib</span><br></pre></td></tr></table></figure><p>在对应目录下可以找到如下文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/demo$ cd /usr/lib</span><br><span class="line">wanko@wanko:/usr/lib$ ll lib*.a</span><br><span class="line">-rw-r--r-- 1 root root 1372  1月 11 00:24 libadd.a</span><br></pre></td></tr></table></figure><p>为消除 demo 目录下的 libadd.a 的影响，改个名字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/demo$ ls</span><br><span class="line">add.c  add.o  libadd.a  main.c</span><br><span class="line">wanko@wanko:~/demo$ mv libadd.a libadd2.a</span><br><span class="line">wanko@wanko:~/demo$ ll</span><br><span class="line">total 24</span><br><span class="line">drwxrwxr-x  2 wanko wanko 4096  1月 11 00:29 ./</span><br><span class="line">drwxr-x--- 24 wanko wanko 4096  1月 11 00:13 ../</span><br><span class="line">-rw-rw-r--  1 wanko wanko   39  1月 10 23:56 add.c</span><br><span class="line">-rw-rw-r--  1 wanko wanko 1232  1月 11 00:16 add.o</span><br><span class="line">-rw-rw-r--  1 wanko wanko 1372  1月 11 00:21 libadd2.a</span><br><span class="line">-rw-rw-r--  1 wanko wanko  119  1月 10 23:59 main.c</span><br></pre></td></tr></table></figure><p>链接的选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc main.c -o main -ladd</span><br></pre></td></tr></table></figure><p>即：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/demo$ gcc main.c -o main -ladd</span><br><span class="line">wanko@wanko:~/demo$ ll</span><br><span class="line">total 40</span><br><span class="line">drwxrwxr-x  2 wanko wanko  4096  1月 11 00:32 ./</span><br><span class="line">drwxr-x--- 24 wanko wanko  4096  1月 11 00:13 ../</span><br><span class="line">-rw-rw-r--  1 wanko wanko    39  1月 10 23:56 add.c</span><br><span class="line">-rw-rw-r--  1 wanko wanko  1232  1月 11 00:16 add.o</span><br><span class="line">-rw-rw-r--  1 wanko wanko  1372  1月 11 00:21 libadd2.a</span><br><span class="line">-rwxrwxr-x  1 wanko wanko 16016  1月 11 00:32 main*</span><br><span class="line">-rw-rw-r--  1 wanko wanko   119  1月 10 23:59 main.c</span><br><span class="line">wanko@wanko:~/demo$ ./main</span><br><span class="line">add(3,4)=7</span><br></pre></td></tr></table></figure><p>现在将这个库删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm libadd.a</span><br></pre></td></tr></table></figure><p>此时 main 仍然可以执行。</p><p style="color: red;">现在我们尝试制作一个动态库。</p><p>动态库特点：在链接时，定位了库文件的位置，运行时加载。</p><p>文件名形式：<code>**.so</code>，一般以<code>lib</code>开头。eg:<code>libadd.so</code></p><p>编译时加上<code>-fpic</code>选项，生成<strong>位置无关</strong>的目标代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c add.c -o add.o -fpic</span><br></pre></td></tr></table></figure><p>使用 gcc 生成动态库/共享库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -o libadd.so add.o</span><br></pre></td></tr></table></figure><p>将动态库放入<code>/usr/lib</code>下面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp libadd.so /usr/lib</span><br></pre></td></tr></table></figure><p>链接时加上选项<code>-ladd</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc main.c -o main -ladd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/dynamic$ ls</span><br><span class="line">add.c  add.o  libadd2.so  main.c</span><br><span class="line">wanko@wanko:~/dynamic$ gcc main.c -o main -ladd</span><br><span class="line">wanko@wanko:~/dynamic$ ./main</span><br><span class="line">add(3,4)=7</span><br></pre></td></tr></table></figure><p>可以使用<code>ldd</code>命令查看依赖文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/dynamic$ ldd main</span><br><span class="line">    linux-vdso.so.1 (0x00007ffff85df000)</span><br><span class="line">    libadd.so =&gt; /lib/libadd.so (0x00007fba42625000)</span><br><span class="line">    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fba42200000)</span><br><span class="line">    /lib64/ld-linux-x86-64.so.2 (0x00007fba4263f000)</span><br></pre></td></tr></table></figure><p>若删除<code>libadd.so</code>，再执行就会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/dynamic$ ./main</span><br><span class="line">./main: error while loading shared libraries: libadd.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><p style="color: red;">静态库与动态库的比较：</p><ul><li>动态库只在执行时才被链接使用，不是直接编译为可执行文件，并且一个动态库可以被多个程序使用，故可称为共享库</li><li>静态库将会整合到程序中，在程序执行时不用加载静态库。</li><li>因此，静态库会使你的程序臃肿并且难以升级，但比较容易部署。而动态库会使你的程序轻便易于升级但难以部署。</li></ul><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> number = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//在命名空间中可以定义变量、函数、结构体、类，</span></span><br><span class="line">    <span class="comment">//统称为 实体</span></span><br><span class="line">    <span class="type">int</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;void print()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">// end of namespace wd</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;outer number=&quot;</span> &lt;&lt; number &lt;&lt;std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;inner number=&quot;</span> &lt;&lt; wd::number &lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">wanko@wanko:~$ cd &quot;/home/wanko/mycode/&quot; &amp;&amp; g++ tmptst.cpp -o tmptst &amp;&amp; &quot;/home/wanko/mycode/&quot;tmptst</span></span><br><span class="line"><span class="comment">outer number=10</span></span><br><span class="line"><span class="comment">inner number=1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>带命名空间的函数声明、命名空间是可以拓展的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 带命名空间的函数声明</span></span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> wh</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">30</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;void wh::show&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        wd::<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">// namespace wh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123; <span class="comment">// 命名空间是可以拓展的</span></span><br><span class="line">    <span class="type">int</span> number = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;void print()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        wh::<span class="built_in">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// namespace wd</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    wh::<span class="built_in">display</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">wanko@wanko:~$ cd &quot;/home/wanko/mycode/&quot; &amp;&amp; g++ tmptst.cpp -o tmptst &amp;&amp; &quot;/home/wanko/mycode/&quot;tmptst</span></span><br><span class="line"><span class="comment">void print()</span></span><br><span class="line"><span class="comment">void wh::show</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>甚至 std 也可以拓展：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> std</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Mystruct</span>&#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; <span class="comment">// namespace std</span></span><br></pre></td></tr></table></figure><p>但是，尽量不要去拓展 std ，因为自己定义的实体有可能已经在 std 中，导致冲突。</p><p>命名空间可以嵌套：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名空间可以嵌套</span></span><br><span class="line"><span class="keyword">namespace</span> wh&#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">40</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">namespace</span> hb</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> number = <span class="number">1234</span>;</span><br><span class="line">    &#125; <span class="comment">// namespace hb</span></span><br><span class="line">&#125; <span class="comment">// namespace wh</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; wh::hb::number &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">1234</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="new、delete"><a href="#new、delete" class="headerlink" title="new、delete"></a>new、delete</h2><p>与<code>malloc</code>、<code>free</code>类似，用来申请、释放堆空间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>)); <span class="comment">//初始化、清零</span></span><br><span class="line">    *p = <span class="number">70</span>;</span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 申请堆空间，初始化，并赋值</span></span><br><span class="line">    <span class="type">int</span>* p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">1</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*p = &quot;</span> &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">*p = 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>申请数组：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>]; <span class="comment">// 在栈上</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 申请堆空间数组</span></span><br><span class="line">    <span class="type">int</span>* pArray = (<span class="type">int</span>*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">memset</span>(pArray, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    pArray[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    pArray[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,pArray[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(pArray);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">0 1 0 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>* pAarry = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>](); <span class="comment">//小括号有初始化的含义</span></span><br><span class="line">    pAarry[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    pAarry[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    pAarry[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        std::cout &lt;&lt; pAarry[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> [] pAarry;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">0 1 2 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong><code>malloc</code>申请的堆空间是原始的、未初始化的，而<code>new</code>申请的是已初始化的。</strong></p><p>解决内存泄露的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">getHeapData</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>* pInt = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">200</span>);</span><br><span class="line">    <span class="keyword">return</span> *pInt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> c = a + <span class="built_in">getHeapData</span>() + b; <span class="comment">//内存泄露</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>&amp; ref = <span class="built_in">getHeapData</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span> &amp;ref; <span class="comment">//解决内存泄露</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>防止野指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>* pInt = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>*&gt;(<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>)));</span><br><span class="line">    <span class="built_in">memset</span>(pInt, <span class="number">0</span>, <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">    <span class="built_in">free</span>(pInt);</span><br><span class="line">    pInt = <span class="literal">nullptr</span>; <span class="comment">//否则会产生野指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><p>函数重载的原理：使用同名函数的时候，根据形参类型、个数、顺序对函数名字进行改编，即“名字改编”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ cat tsttmp.cpp</span><br><span class="line">int add(int x,int y)&#123;</span><br><span class="line">    return x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int add(int x,double y)&#123;</span><br><span class="line">    return x+y;</span><br><span class="line">&#125;</span><br><span class="line">wanko@wanko:~/mycode$ nm tsttmp.o</span><br><span class="line">0000000000000018 T _Z3addid</span><br><span class="line">0000000000000000 T _Z3addii</span><br></pre></td></tr></table></figure><p>注意： C 不支持函数重载。C++ 兼容 C ，会将 C 的函数按照 C 的方式编译，不会进行名字改编。</p><p>可以在 C++ 代码中将函数按照 C 的方式编译：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus <span class="comment">// C++ 内置宏</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// some code</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;<span class="comment">// extern &quot;C&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h2><p>内联函数不能分成头文件与实现文件的形式（不能将声明与定义分开）。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>简单例子：</p><p><img src="https://bu.dusays.com/2024/01/15/65a501de7b574.png" alt="62-2.png"></p><h2 id="内存分配方式"><a href="#内存分配方式" class="headerlink" title="内存分配方式"></a>内存分配方式</h2><p>相关知识和图片见： <a href="https://loveofpeach.github.io/posts/64934ad2.html">OS 强化</a> 存储管理知识梳理</p><p>以 32 位机器为例。</p><p>0-3G：用户态的空间<br>3G-4G：内核态的空间</p><p>用户态空间：栈、堆、全局变量、静态变量、程序代码区、文字常量区。</p><p><strong>栈区</strong>：存放的是局部变量、函数的参数。由操作系统负责。</p><p><strong>堆区</strong>：即堆空间，<code>malloc</code>/<code>calloc</code>/<code>new</code>申请的都是堆空间，必须由程序员手动释放（<code>free</code>/<code>delete</code>）。</p><p><strong>读写段</strong>：<br>全局变量<br>静态变量：<code>static int c = 10;</code></p><p><strong>只读段</strong>：<br>文字常量区：如字符串常量，”hello,world”<br>程序代码区：存放二进制代码</p><p>函数名是函数的入口地址：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;main = %p\n&quot;</span>, &amp;main);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main = %p\n&quot;</span>, main);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">&amp;main = 0x564630caf189</span></span><br><span class="line"><span class="comment">main = 0x564630caf189</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><p>销毁对象的时候，需要清理数据成员。使用析构函数完成此任务。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>):<span class="built_in">ix</span>(x),<span class="built_in">iy</span>(y)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    point tmp;</span><br><span class="line">    tmp.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，析构函数没有做任何事，因为该例中对象位于栈上，由操作系统负责回收。</p><p>对象在销毁的时候，会自动调用析构函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>):<span class="built_in">ix</span>(x),<span class="built_in">iy</span>(y)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;aha&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    point tmp;</span><br><span class="line">    tmp.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">aha</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>默认情况下，编译器会自动生成析构函数。</p><p>析构函数可以显式调用（不建议这么做）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmp.~<span class="built_in">point</span>();</span><br></pre></td></tr></table></figure><p>构造函数调用的时候会创建对象：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>):<span class="built_in">ix</span>(x),<span class="built_in">iy</span>(y)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;aha&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    point tmp;</span><br><span class="line">    tmp.<span class="built_in">print</span>();</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">point</span>().<span class="built_in">print</span>();</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">aha</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">aha</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>有点小问题的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Computer.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _Computer_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _Computer_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">float</span> price);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setBrand</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setPrice</span><span class="params">(<span class="type">float</span> price)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    ~<span class="built_in">Computer</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _name;</span><br><span class="line">    <span class="type">float</span> _price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Computer.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Computer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line">Computer::<span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">float</span> price)</span><br><span class="line">                  :_name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name)+<span class="number">1</span>]()),_price(price)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Computer(const char*, float)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::setBrand</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name)</span></span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::setPrice</span><span class="params">(<span class="type">float</span> price)</span></span>&#123;</span><br><span class="line">    _price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;price = &quot;</span> &lt;&lt; _price &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Computer::~<span class="built_in">Computer</span>()&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;~Computer()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// testComputer.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Computer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Computer <span class="title">com</span><span class="params">(<span class="string">&quot;lenovo&quot;</span>, <span class="number">5300</span>)</span></span>;</span><br><span class="line">    com.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ g++ *.cc</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ ./a.out</span></span><br><span class="line"><span class="comment">Computer(const char*, float)</span></span><br><span class="line"><span class="comment">name = lenovo</span></span><br><span class="line"><span class="comment">price = 5300</span></span><br><span class="line"><span class="comment">~Computer()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面的代码没有<code>delete</code>，文件<code>Computer.cc</code>应该改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Computer.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Computer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line">Computer::<span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">float</span> price)</span><br><span class="line">                  :_name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name)+<span class="number">1</span>]()),_price(price)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Computer(const char*, float)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::setBrand</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name)</span></span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::setPrice</span><span class="params">(<span class="type">float</span> price)</span></span>&#123;</span><br><span class="line">    _price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;price = &quot;</span> &lt;&lt; _price &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Computer::~<span class="built_in">Computer</span>()&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;~Computer()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(_name)&#123; <span class="comment">// 等价于 if(_name != nullptr)</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1111&quot;</span> &lt;&lt; endl; <span class="comment">// for presentation</span></span><br><span class="line">        <span class="keyword">delete</span> [] _name;</span><br><span class="line">        _name = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新编译运行得到输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Computer(const char*, float)</span><br><span class="line">name = lenovo</span><br><span class="line">price = 5300</span><br><span class="line">~Computer()</span><br><span class="line">1111</span><br></pre></td></tr></table></figure><p>个人理解：在上面的代码中，<code>Computer</code>类型的对象包含两个数据成员：<code>_name</code>和<code>_price</code>，一个是指针类型，一个是浮点类型。创建对象时调用构造函数，指针<code>_name</code>指向堆上的空间。<code>Computer</code>对象在栈上，生命周期结束后由操作系统回收；<code>_name</code>指向的堆上空间需由析构函数释放。</p><p>下面给出两种情况的对比：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// testComputer.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Computer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function">Computer <span class="title">gcom</span><span class="params">(<span class="string">&quot;xiaomi&quot;</span>, <span class="number">7000</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    gcom.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">Computer <span class="title">com</span><span class="params">(<span class="string">&quot;lenovo&quot;</span>, <span class="number">5300</span>)</span></span>;</span><br><span class="line">    com.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Computer* pc = <span class="keyword">new</span> <span class="built_in">Computer</span>(<span class="string">&quot;huawei&quot;</span>, <span class="number">100000</span>);</span><br><span class="line">    pc-&gt;<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;enter main...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Computer(const char*, float)</span></span><br><span class="line"><span class="comment">enter main...</span></span><br><span class="line"><span class="comment">name = xiaomi</span></span><br><span class="line"><span class="comment">price = 7000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Computer(const char*, float)</span></span><br><span class="line"><span class="comment">name = lenovo</span></span><br><span class="line"><span class="comment">price = 5300</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Computer(const char*, float)</span></span><br><span class="line"><span class="comment">name = huawei</span></span><br><span class="line"><span class="comment">price = 100000</span></span><br><span class="line"><span class="comment">~Computer()</span></span><br><span class="line"><span class="comment">1111</span></span><br><span class="line"><span class="comment">~Computer()</span></span><br><span class="line"><span class="comment">1111</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// testComputer.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Computer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function">Computer <span class="title">gcom</span><span class="params">(<span class="string">&quot;xiaomi&quot;</span>, <span class="number">7000</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    gcom.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">Computer <span class="title">com</span><span class="params">(<span class="string">&quot;lenovo&quot;</span>, <span class="number">5300</span>)</span></span>;</span><br><span class="line">    com.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Computer* pc = <span class="keyword">new</span> <span class="built_in">Computer</span>(<span class="string">&quot;huawei&quot;</span>, <span class="number">100000</span>);</span><br><span class="line">    pc-&gt;<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">delete</span> pc;</span><br><span class="line">    pc = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;enter main...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Computer(const char*, float)</span></span><br><span class="line"><span class="comment">enter main...</span></span><br><span class="line"><span class="comment">name = xiaomi</span></span><br><span class="line"><span class="comment">price = 7000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Computer(const char*, float)</span></span><br><span class="line"><span class="comment">name = lenovo</span></span><br><span class="line"><span class="comment">price = 5300</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Computer(const char*, float)</span></span><br><span class="line"><span class="comment">name = huawei</span></span><br><span class="line"><span class="comment">price = 100000</span></span><br><span class="line"><span class="comment">~Computer()</span></span><br><span class="line"><span class="comment">1111</span></span><br><span class="line"><span class="comment">~Computer()</span></span><br><span class="line"><span class="comment">1111</span></span><br><span class="line"><span class="comment">~Computer()</span></span><br><span class="line"><span class="comment">1111</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h2><p>默认情况下，编译器会自动生成拷贝构造函数。</p><p>来看下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// testComputer.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Computer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Computer <span class="title">com</span><span class="params">(<span class="string">&quot;lenovo&quot;</span>, <span class="number">5300</span>)</span></span>;</span><br><span class="line">    com.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Computer com2 = com;</span><br><span class="line">    com2.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Computer(const char*, float)</span></span><br><span class="line"><span class="comment">name = lenovo</span></span><br><span class="line"><span class="comment">price = 5300</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name = lenovo</span></span><br><span class="line"><span class="comment">price = 5300</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">~Computer()</span></span><br><span class="line"><span class="comment">1111</span></span><br><span class="line"><span class="comment">~Computer()</span></span><br><span class="line"><span class="comment">1111</span></span><br><span class="line"><span class="comment">free(): double free detected in tcache 2</span></span><br><span class="line"><span class="comment">Aborted (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在语句<code>Computer com2 = com;</code>中，调用了拷贝构造函数。程序报错的原因等会再讲。</p><p>拷贝构造函数的逻辑（以某个具体的类为例）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Point</span>(<span class="type">const</span> Point&amp; rhs):_ix(rhs._ix),_iy(rhs._iy)&#123;&#125;</span><br></pre></td></tr></table></figure><p>而上面的程序出错点在于：数据成员是指针类型，拷贝过来的指针指向了同一地址，因此销毁的时候对同一地址 free 了两次。</p><p><code>Computer.h</code>文件部分代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">float</span> price);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setBrand</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setPrice</span><span class="params">(<span class="type">float</span> price)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    ~<span class="built_in">Computer</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _name;</span><br><span class="line">    <span class="type">float</span> _price;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Computer.cc</code>文件部分代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Computer::<span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">float</span> price)</span><br><span class="line">                  :_name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name)+<span class="number">1</span>]()),_price(price)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Computer(const char*, float)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Computer::~<span class="built_in">Computer</span>()&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;~Computer()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(_name)&#123; <span class="comment">// 等价于 if(_name != nullptr)</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1111&quot;</span> &lt;&lt; endl; <span class="comment">// for presentation</span></span><br><span class="line">        <span class="keyword">delete</span> [] _name;</span><br><span class="line">        _name = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Computer.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _Computer_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _Computer_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">float</span> price);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setBrand</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setPrice</span><span class="params">(<span class="type">float</span> price)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    ~<span class="built_in">Computer</span>();</span><br><span class="line">    <span class="built_in">Computer</span>(<span class="type">const</span> Computer&amp; rhs);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _name;</span><br><span class="line">    <span class="type">float</span> _price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Computer.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Computer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line">Computer::<span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">float</span> price)</span><br><span class="line">                  :_name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name)+<span class="number">1</span>]()),_price(price)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Computer(const char*, float)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::setBrand</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name)</span></span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::setPrice</span><span class="params">(<span class="type">float</span> price)</span></span>&#123;</span><br><span class="line">    _price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;price = &quot;</span> &lt;&lt; _price &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Computer::<span class="built_in">Computer</span>(<span class="type">const</span> Computer&amp; rhs)</span><br><span class="line">                   :_name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(rhs._name)+<span class="number">1</span>]()), _price(rhs._price)&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(_name, rhs._name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Computer::~<span class="built_in">Computer</span>()&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;~Computer()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(_name)&#123; <span class="comment">// 等价于 if(_name != nullptr)</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1111&quot;</span> &lt;&lt; endl; <span class="comment">// for presentation</span></span><br><span class="line">        <span class="keyword">delete</span> [] _name;</span><br><span class="line">        _name = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// testComputer.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Computer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Computer <span class="title">com</span><span class="params">(<span class="string">&quot;lenovo&quot;</span>, <span class="number">5300</span>)</span></span>;</span><br><span class="line">    com.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Computer com2 = com;</span><br><span class="line">    com2.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Computer(const char*, float)</span><br><span class="line">name = lenovo</span><br><span class="line">price = 5300</span><br><span class="line"></span><br><span class="line">name = lenovo</span><br><span class="line">price = 5300</span><br><span class="line"></span><br><span class="line">~Computer()</span><br><span class="line">1111</span><br><span class="line">~Computer()</span><br><span class="line">1111</span><br></pre></td></tr></table></figure><p>注意：上面的代码不仅修改了实现文件，同时也修改了头文件。可能会遇到的问题的相关讨论：<a href="https://stackoverflow.com/questions/47092536/c-error-definition-of-implicitly-declared">C++ error: definition of implicitly-declared</a></p><p><strong>拷贝构造函数的调用时机</strong>：</p><ul><li>用一个已存在的（类的）对象初始化另一个新对象时，会调用拷贝构造函数。</li><li>当实参和形参都是对象，进行实参和形参的结合时，会调用拷贝构造函数。</li><li>函数的返回值是对象，函数调用完成返回时，会调用拷贝构造函数。<a href="#bib1" id="bib1ref"><sup>[注1]</sup></a></li><li><strong>总结</strong>：（即发生拷贝的时候。。。）</li></ul><p><a id="bib1" href="#bib1ref"><sup>[注1]</sup></a> 编译器会自动做一个优化，会屏蔽一些过程：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">point <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">point <span class="title">pt</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;pt = &quot;</span>;</span><br><span class="line">    pt.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> pt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    point pt2 = <span class="built_in">func</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;pt2 = &quot;</span>;</span><br><span class="line">    pt2.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">pt = 1 2</span></span><br><span class="line"><span class="comment">pt2 = 1 2</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>为查看完整过程，使用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ tsttmp.cpp -fno-elide-constructors</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">point <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">point <span class="title">pt</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;pt = &quot;</span>;</span><br><span class="line">    pt.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> pt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    point pt2 = <span class="built_in">func</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;pt2 = &quot;</span>;</span><br><span class="line">    pt2.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">pt = 1 2</span></span><br><span class="line"><span class="comment">拷贝构造函数</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">pt2 = 1 2</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>拷贝构造函数参数中的引用符号<strong>不能</strong>去掉。原因比较显然：若去掉则传参方式为拷贝，而此时拷贝行为尚未定义。</p><p>那么 const 能否去掉？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抱歉，不能</span></span><br><span class="line"><span class="built_in">point</span>(point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 看一个更简单的例子</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>&amp; kkk = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">// 报错：</span></span><br><span class="line">    <span class="comment">// initial value of reference to non-const must be an lvalue</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cannot bind non-const lvalue reference of type ‘int&amp;’ to an rvalue of type ‘int’</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改为这样可以编译运行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span>&amp; kkk = <span class="number">3</span>;</span><br><span class="line">    cout &lt;&lt; kkk &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="赋值运算符函数"><a href="#赋值运算符函数" class="headerlink" title="赋值运算符函数"></a>赋值运算符函数</h2><p>可由编译器自动生成。</p><p>例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">point <span class="title">pt</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;pt = &quot;</span>;</span><br><span class="line">    pt.<span class="built_in">print</span>();</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    point pt2 = pt;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;pt2 = &quot;</span>;</span><br><span class="line">    pt2.<span class="built_in">print</span>();</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">point <span class="title">pt3</span><span class="params">(<span class="number">3</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;pt3 = &quot;</span>;</span><br><span class="line">    pt3.<span class="built_in">print</span>();</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    pt2.<span class="keyword">operator</span>=(pt3); <span class="comment">// 赋值运算符函数</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;pt2_2 = &quot;</span>;</span><br><span class="line">    pt2.<span class="built_in">print</span>();</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">pt = 1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">拷贝构造函数</span></span><br><span class="line"><span class="comment">pt2 = 1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">pt3 = 3 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">pt2_2 = 3 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>以上面代码为例，试写出逻辑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">point&amp; <span class="keyword">operator</span>=(<span class="type">const</span> point&amp; rhs)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ix = rhs.ix;</span><br><span class="line">    <span class="keyword">this</span>-&gt;iy = rhs.iy;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>涉及到指针的情形时，（编译器合成的版本）会遇到和拷贝构造函数类似的问题，需要注意，可考虑修改为：</p><p><img src="https://bu.dusays.com/2024/01/17/65a7f6874fef1.png" alt="62-3.png"></p><p>赋值运算符函数参数与返回值问题：</p><p><img src="https://bu.dusays.com/2024/01/18/65a8fbe20b4ce.png" alt="62-4.png"></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>空类为了区分不同的对象，会分配一个字节大小的空间：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Empty</span>&#123;</span><br><span class="line">    <span class="comment">// 默认生成如下函数：</span></span><br><span class="line">    <span class="comment">// 合成的默认构造函数（synthesized default constructor）</span></span><br><span class="line">    <span class="comment">// 拷贝构造函数</span></span><br><span class="line">    <span class="comment">// 赋值运算符函数</span></span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Empty) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Empty) &lt;&lt; endl;</span><br><span class="line">    Empty e1;</span><br><span class="line">    Empty e2;</span><br><span class="line">    Empty e3;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;e1 = %p\n&quot;</span>,&amp;e1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;e2 = %p\n&quot;</span>,&amp;e2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;e3 = %p\n&quot;</span>,&amp;e3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">sizeof(Empty) = 1</span></span><br><span class="line"><span class="comment">&amp;e1 = 0x7ffdb0bc2cc5</span></span><br><span class="line"><span class="comment">&amp;e2 = 0x7ffdb0bc2cc6</span></span><br><span class="line"><span class="comment">&amp;e3 = 0x7ffdb0bc2cc7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>对于类的静态数据成员，若采用头文件与实现文件分开的形式，应将静态数据成员在头文件中声明，实现文件中初始化。否则可能出现多次定义的问题。</p><p>逗号表达式，以最后一个逗号后面的值为准。</p><p><code>delete</code>会调用析构函数。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式是 23 种 GoF 模式中最简单的设计模式之一。这个设计模式主要目的是想在整个系统中只能出现类的一个实例，即一个类只有一个对象。</p><p>其实现步骤大致有如下三步:</p><ol><li>将构造函数私有化</li><li>在类中定义一个静态的指向本类型的指针变量</li><li>定义一个返回值为类指针的静态成员函数</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单例模式</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> A* <span class="title">myCreateObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            _ptmp = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _ptmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">delete</span> _ptmp;</span><br><span class="line">        _ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ~<span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;这里是析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>()&#123; <span class="comment">// 构造函数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;这里是构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">static</span> A* _ptmp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_ptmp = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A* ps1 = A::<span class="built_in">myCreateObj</span>();</span><br><span class="line">    A* ps2 = A::<span class="built_in">myCreateObj</span>(); <span class="comment">// just for test</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ps1 = &quot;</span> &lt;&lt; ps1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ps2 = &quot;</span> &lt;&lt; ps2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    ps1-&gt;<span class="built_in">destroy</span>();</span><br><span class="line">    <span class="comment">/*------just for test------*/</span></span><br><span class="line">    ps2-&gt;<span class="built_in">destroy</span>();</span><br><span class="line">    ps1-&gt;<span class="built_in">destroy</span>();</span><br><span class="line"></span><br><span class="line">    A::<span class="built_in">destroy</span>();</span><br><span class="line">    <span class="comment">/*-------------------------*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 该代码尚有其他问题，但目前不再讨论范围之内</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里是构造函数</span></span><br><span class="line"><span class="comment">ps1 = 0x55f3f6288eb0</span></span><br><span class="line"><span class="comment">ps2 = 0x55f3f6288eb0</span></span><br><span class="line"><span class="comment">这里是析构函数</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>用途：全局唯一的对象，如字典库、词典库、日志记录器等。</p><h2 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h2><p>引入例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">mytst</span>&#123;</span><br><span class="line">    <span class="type">char</span>* _name;   <span class="comment">// 8 个字节</span></span><br><span class="line">    <span class="type">float</span> _price;  <span class="comment">// 4 个字节</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(mytst) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(mytst) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">sizeof(mytst) = 16</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><div class="row"><iframe src="https://drive.google.com/file/d/1ko1BOz9kOUs5VL4CKTKz60JxTV0W0TzA/preview" style="width:100%; height:550px"></iframe></div><p>上面的 PDF 似乎非常抽象，看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">x</span></span><br><span class="line">&#123;             <span class="comment">// byte</span></span><br><span class="line">    <span class="type">char</span> a;   <span class="comment">//  1</span></span><br><span class="line">    <span class="type">int</span> b;    <span class="comment">//  4</span></span><br><span class="line">    <span class="type">short</span> c;  <span class="comment">//  2</span></span><br><span class="line">    <span class="type">char</span> d;   <span class="comment">//  1</span></span><br><span class="line">&#125;MyStructX;   <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">y</span></span><br><span class="line">&#123;             <span class="comment">// byte</span></span><br><span class="line">    <span class="type">int</span> b;    <span class="comment">//   4</span></span><br><span class="line">    <span class="type">char</span> a;   <span class="comment">//   1</span></span><br><span class="line">    <span class="type">char</span> d;   <span class="comment">//   1</span></span><br><span class="line">    <span class="type">short</span> c;  <span class="comment">//   2</span></span><br><span class="line">&#125;MyStructY;   <span class="comment">//   8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SS</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">char</span> b;</span><br><span class="line">    <span class="type">short</span> c;</span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">FF</span>&#123;</span><br><span class="line">        <span class="type">int</span> a1;</span><br><span class="line">        <span class="type">char</span> b1;</span><br><span class="line">        <span class="type">short</span> c1;</span><br><span class="line">        <span class="type">char</span> d1;</span><br><span class="line">    &#125;MyStructFF;</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    <span class="type">double</span> ww;</span><br><span class="line">&#125;MyStructSS;   <span class="comment">//  40</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SS2</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">char</span> b;</span><br><span class="line">    <span class="type">short</span> c;</span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">FF</span>&#123;</span><br><span class="line">        <span class="type">int</span> a1;</span><br><span class="line">        <span class="type">char</span> b1;</span><br><span class="line">        <span class="type">short</span> c1;</span><br><span class="line">        <span class="type">char</span> d1;</span><br><span class="line">    &#125;MyStructFF;</span><br><span class="line">    <span class="type">char</span> e;</span><br><span class="line">&#125;MyStructSS2;  <span class="comment">//  28</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(MyStructSS2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">28</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>解释：</p><p><img src="https://bu.dusays.com/2024/01/19/65aa686a32d0e.jpg" alt="62-5.jpg"></p><p>对于<code>MyStructSS2</code>：</p><p><img src="https://bu.dusays.com/2024/01/19/65aa69e88168e.png" alt="62-6.png"></p><p>总结：</p><ul><li>数据成员要对齐。</li><li>结构体要对齐，结构体的大小是其最大数据成员的整数倍。</li><li>结构体里还有结构体时，里结构体要对齐（按照最大数据成员的整数倍对齐）。</li></ul><p>可使用如下方式进行某些调整，不细述：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(4)</span></span><br></pre></td></tr></table></figure><h2 id="实现自己的-String"><a href="#实现自己的-String" class="headerlink" title="实现自己的 String"></a>实现自己的 String</h2><p>粗糙地实现自己的 String 类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>():_pstr(<span class="literal">nullptr</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* pstr):</span><br><span class="line">    _pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pstr)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr, pstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; rhs):</span><br><span class="line">    _pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(rhs._pstr)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr, rhs._pstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String&amp; <span class="keyword">operator</span>= (<span class="type">const</span> String&amp; rhs)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String&amp; operator= (const String&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;rhs)&#123;  <span class="comment">//防止自复制</span></span><br><span class="line">            <span class="keyword">if</span>(_pstr)&#123;</span><br><span class="line">                <span class="keyword">delete</span> [] _pstr;</span><br><span class="line">                _pstr = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _pstr = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(rhs._pstr)+<span class="number">1</span>]();</span><br><span class="line">            <span class="built_in">strcpy</span>(_pstr, rhs._pstr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">length</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="type">size_t</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(_pstr)&#123;</span><br><span class="line">            len = <span class="built_in">strlen</span>(_pstr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pstr)&#123;</span><br><span class="line">            <span class="keyword">return</span> _pstr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">String</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pstr)&#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pstr;</span><br><span class="line">            _pstr = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pstr)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;_pstr = &quot;</span> &lt;&lt; _pstr &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pstr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    String str1;</span><br><span class="line">    str1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    String str2 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="function">String <span class="title">str3</span><span class="params">(<span class="string">&quot;Mizuho&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    str2.<span class="built_in">print</span>();</span><br><span class="line">    str3.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    String str4 = str3;</span><br><span class="line">    str4.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    str4 = str2;</span><br><span class="line">    str4.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str3.<span class="built_in">c_str</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">String()</span><br><span class="line"></span><br><span class="line">String(const char*)</span><br><span class="line">String(const char*)</span><br><span class="line"></span><br><span class="line">_pstr = hello world</span><br><span class="line">_pstr = Mizuho</span><br><span class="line"></span><br><span class="line">String(const String&amp;)</span><br><span class="line">_pstr = Mizuho</span><br><span class="line">String&amp; operator= (const String&amp;)</span><br><span class="line">_pstr = hello world</span><br><span class="line">~String()</span><br><span class="line">~String()</span><br><span class="line">~String()</span><br><span class="line">~String()</span><br></pre></td></tr></table></figure><h2 id="new、delete-的工作步骤"><a href="#new、delete-的工作步骤" class="headerlink" title="new、delete 的工作步骤"></a>new、delete 的工作步骤</h2><p>new 表达式工作步骤：</p><ol><li>调用标准库函数<code>operator new</code>，申请原始的未初始化的空间</li><li>在申请的空间上执行构造函数，初始化对象的数据成员</li><li>返回指向对象的指针</li></ol><p>delete 表达式工作步骤：</p><ol><li>调用析构函数，回收对象中数据成员所申请的资源</li><li>调用标准库函数<code>operator delete</code>，回收对象本身所占用的资源</li></ol><p><code>operator new</code>和<code>operator delete</code>函数的重载版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// operator new 库函数</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span>)</span></span>;</span><br><span class="line"><span class="type">void</span>* <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="type">siez_t</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// operator delete 库函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>*)</span></span>;</span><br><span class="line"><span class="type">void</span> <span class="keyword">operator</span> <span class="keyword">delete</span>[](<span class="type">void</span>*);</span><br></pre></td></tr></table></figure><p>下面通过例子来演示。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>(<span class="type">int</span> id, <span class="type">const</span> <span class="type">char</span>* name)</span><br><span class="line">    : _id(id)</span><br><span class="line">    , _name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Student(int, const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> sz)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void* operator new(size_t)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="type">void</span>* pret = <span class="built_in">malloc</span>(sz);</span><br><span class="line">        <span class="keyword">return</span> pret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>* pret)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void operator delete(void*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">free</span>(pret); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_name) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; _id &lt;&lt; endl</span><br><span class="line">                 &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Student</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Student()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_name) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _name;</span><br><span class="line">            _name = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _id;</span><br><span class="line">    <span class="type">char</span>* _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    Student* pstu = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="number">4231</span>, <span class="string">&quot;lili&quot;</span>);</span><br><span class="line">    pstu-&gt;<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pstu;</span><br><span class="line">    pstu = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void* operator new(size_t)</span></span><br><span class="line"><span class="comment">Student(int, const char*)</span></span><br><span class="line"><span class="comment">id = 4231</span></span><br><span class="line"><span class="comment">name = lili</span></span><br><span class="line"><span class="comment">~Student()</span></span><br><span class="line"><span class="comment">void operator delete(void*)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>作为对比：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> sz)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;void* operator new(size_t)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">void</span>* pret = <span class="built_in">malloc</span>(sz);</span><br><span class="line">    <span class="keyword">return</span> pret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>* pret)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;void operator delete(void*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">free</span>(pret); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>(<span class="type">int</span> id, <span class="type">const</span> <span class="type">char</span>* name)</span><br><span class="line">    : _id(id)</span><br><span class="line">    , _name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Student(int, const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_name) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; _id &lt;&lt; endl</span><br><span class="line">                 &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Student</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Student()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_name) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _name;</span><br><span class="line">            _name = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _id;</span><br><span class="line">    <span class="type">char</span>* _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    Student* pstu = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="number">4231</span>, <span class="string">&quot;lili&quot;</span>);</span><br><span class="line">    pstu-&gt;<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pstu;</span><br><span class="line">    pstu = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void* operator new(size_t)</span></span><br><span class="line"><span class="comment">void* operator new(size_t)</span></span><br><span class="line"><span class="comment">Student(int, const char*)</span></span><br><span class="line"><span class="comment">id = 4231</span></span><br><span class="line"><span class="comment">name = lili</span></span><br><span class="line"><span class="comment">~Student()</span></span><br><span class="line"><span class="comment">void operator delete(void*)</span></span><br><span class="line"><span class="comment">void operator delete(void*)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>总结：当<code>void* operator new(size_t sz)</code>写在全局时，针对所有 new 表达式。</p><p>要求<strong>只能生成栈对象，不能生成堆对象</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求：只能生成栈对象，不能生成堆对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>(<span class="type">int</span> id, <span class="type">const</span> <span class="type">char</span>* name)</span><br><span class="line">    : _id(id)</span><br><span class="line">    , _name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Student(int, const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_name) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; _id &lt;&lt; endl</span><br><span class="line">                 &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> sz)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void* operator new(size_t)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="type">void</span>* pret = <span class="built_in">malloc</span>(sz);</span><br><span class="line">        <span class="keyword">return</span> pret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>* pret)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void operator delete(void*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">free</span>(pret); </span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Student</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Student()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_name) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _name;</span><br><span class="line">            _name = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _id;</span><br><span class="line">    <span class="type">char</span>* _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="function">Student <span class="title">stu</span><span class="params">(<span class="number">4202</span>, <span class="string">&quot;lucy&quot;</span>)</span></span>;</span><br><span class="line">    stu.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// error, 会报错</span></span><br><span class="line">    <span class="comment">//Student* pstu = new Student(4231, &quot;lili&quot;);</span></span><br><span class="line">    <span class="comment">//pstu-&gt;print();</span></span><br><span class="line">    <span class="comment">//delete pstu;</span></span><br><span class="line">    <span class="comment">//pstu = nullptr;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Student(int, const char*)</span></span><br><span class="line"><span class="comment">id = 4202</span></span><br><span class="line"><span class="comment">name = lucy</span></span><br><span class="line"><span class="comment">~Student()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，为了成对出现，也可以将 delete 设为私有。</p><p>栈对象创建的条件：构造函数和析构函数都是 public .</p><p>要求，<strong>只能生成堆对象，不能生成栈对象</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求：只能生成堆对象，不能生成栈对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>(<span class="type">int</span> id, <span class="type">const</span> <span class="type">char</span>* name)</span><br><span class="line">    : _id(id)</span><br><span class="line">    , _name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Student(int, const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_name) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; _id &lt;&lt; endl</span><br><span class="line">                 &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">destory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//不能直接执行析构函数，没有将对象本身占用的内存回收</span></span><br><span class="line">        <span class="comment">//this-&gt;~Student();</span></span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> sz)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void* operator new(size_t)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="type">void</span>* pret = <span class="built_in">malloc</span>(sz);</span><br><span class="line">        <span class="keyword">return</span> pret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>* pret)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void operator delete(void*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">free</span>(pret); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ~<span class="built_in">Student</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Student()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_name) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _name;</span><br><span class="line">            _name = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _id;</span><br><span class="line">    <span class="type">char</span>* _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="comment">//error, 会报错</span></span><br><span class="line">    <span class="comment">//Student stu(4202, &quot;lucy&quot;);</span></span><br><span class="line">    <span class="comment">//stu.print();</span></span><br><span class="line"></span><br><span class="line">    Student* pstu = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="number">4231</span>, <span class="string">&quot;lili&quot;</span>);</span><br><span class="line">    pstu-&gt;<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//error, 也会报错</span></span><br><span class="line">    <span class="comment">//delete pstu;</span></span><br><span class="line">    <span class="comment">//pstu = nullptr;</span></span><br><span class="line">    <span class="comment">//解决思路：写一个函数来执行此功能</span></span><br><span class="line"></span><br><span class="line">    pstu-&gt;<span class="built_in">destory</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void* operator new(size_t)</span></span><br><span class="line"><span class="comment">Student(int, const char*)</span></span><br><span class="line"><span class="comment">id = 4231</span></span><br><span class="line"><span class="comment">name = lili</span></span><br><span class="line"><span class="comment">~Student()</span></span><br><span class="line"><span class="comment">void operator delete(void*)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h2><p>来看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStreamStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;cin.badbit = &quot;</span> &lt;&lt; cin.<span class="built_in">bad</span>() &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;cin.failbit = &quot;</span> &lt;&lt; cin.<span class="built_in">fail</span>() &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;cin.eofbit = &quot;</span> &lt;&lt; cin.<span class="built_in">eof</span>() &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;cin.goodbit = &quot;</span> &lt;&lt; cin.<span class="built_in">good</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printStreamStatus</span>();</span><br><span class="line">    cin &gt;&gt; number;</span><br><span class="line">    <span class="built_in">printStreamStatus</span>();</span><br><span class="line"></span><br><span class="line">    cin.<span class="built_in">clear</span>(); <span class="comment">//重置流的状态</span></span><br><span class="line">    <span class="built_in">printStreamStatus</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;number = &quot;</span> &lt;&lt; number &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    string line;</span><br><span class="line">    cin &gt;&gt; line;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;line = &quot;</span> &lt;&lt; line &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  合法输入：</span></span><br><span class="line"><span class="comment">cin.badbit = 0</span></span><br><span class="line"><span class="comment">cin.failbit = 0</span></span><br><span class="line"><span class="comment">cin.eofbit = 0</span></span><br><span class="line"><span class="comment">cin.goodbit = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">cin.badbit = 0</span></span><br><span class="line"><span class="comment">cin.failbit = 0</span></span><br><span class="line"><span class="comment">cin.eofbit = 0</span></span><br><span class="line"><span class="comment">cin.goodbit = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">cin.badbit = 0</span></span><br><span class="line"><span class="comment">cin.failbit = 0</span></span><br><span class="line"><span class="comment">cin.eofbit = 0</span></span><br><span class="line"><span class="comment">cin.goodbit = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">number = 1</span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">line = hello</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 非法输入：</span></span><br><span class="line"><span class="comment">cin.badbit = 0</span></span><br><span class="line"><span class="comment">cin.failbit = 0</span></span><br><span class="line"><span class="comment">cin.eofbit = 0</span></span><br><span class="line"><span class="comment">cin.goodbit = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">cin.badbit = 0</span></span><br><span class="line"><span class="comment">cin.failbit = 1</span></span><br><span class="line"><span class="comment">cin.eofbit = 0</span></span><br><span class="line"><span class="comment">cin.goodbit = 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">cin.badbit = 0</span></span><br><span class="line"><span class="comment">cin.failbit = 0</span></span><br><span class="line"><span class="comment">cin.eofbit = 0</span></span><br><span class="line"><span class="comment">cin.goodbit = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">number = 0</span></span><br><span class="line"><span class="comment">line = hello</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以发现，上例的非法输入结果中，line 直接接受了 “hello”, 而没有等待键盘输入。（因为数据仍在缓冲区中）</p><p>可使用<code>cin.ignore(1024, &#39;\n&#39;);</code>清空缓冲区。更推荐的写法（需要包含头文件<code>&lt;limits&gt;</code>）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cin.<span class="built_in">ignore</span>(std::numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br></pre></td></tr></table></figure><p>缓冲区分为三种类型：全缓冲、行缓冲和不带缓冲。</p><ul><li>全缓冲：填满标准 IO 缓存后才进行实际 IO 操作。典型代表是对磁盘文件的读写。</li><li>行缓冲：输入和输出中遇到换行符时，执行真正的 IO 操作。这时，输入的字符先放在缓冲区，按下回车换行时才进行实际的 IO 操作。典型代表是键盘输入数据。</li><li>不带缓冲：不进行缓冲。标准出错情况 cerr/stderr 是典型代表，目的：出错信息可以尽快显示。</li></ul><p>程序正常结束，会刷新缓冲区：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i!=<span class="number">1024</span>; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">表现：</span></span><br><span class="line"><span class="comment">程序在睡了 5 秒之后，才输出一堆 a</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>缓冲区满，刷新：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i!=<span class="number">1024</span>; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">表现：</span></span><br><span class="line"><span class="comment">先输出了一堆 a ，然后睡了 5 秒之后，输出 b</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="文件-IO"><a href="#文件-IO" class="headerlink" title="文件 IO"></a>文件 IO</h2><p>看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::fstream;</span><br><span class="line"><span class="keyword">using</span> std::cerr;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对于 fstream 而言，文件不存在时会打开失败</span></span><br><span class="line">    <span class="function">fstream <span class="title">fs</span><span class="params">(<span class="string">&quot;heihei.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!fs.<span class="built_in">good</span>()) &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;fstream is not good!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 业务逻辑：</span></span><br><span class="line">    <span class="comment">// 从键盘输入数据，通过fs写到文件中</span></span><br><span class="line">    <span class="comment">// 再通过fs读文件，将数据输出到屏幕</span></span><br><span class="line">    <span class="type">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i != <span class="number">5</span>; i++)&#123;</span><br><span class="line">        cin &gt;&gt; number;</span><br><span class="line">        fs &lt;&lt; number &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i != <span class="number">5</span>; i++)&#123;</span><br><span class="line">        fs &gt;&gt; number;</span><br><span class="line">        cout &lt;&lt; number &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    fs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">5 5 5 5 5</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ cat heihei.txt </span></span><br><span class="line"><span class="comment">1 2 3 4 5 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>这个代码与预期目标不符，作以下调整：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::fstream;</span><br><span class="line"><span class="keyword">using</span> std::cerr;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对于 fstream 而言，文件不存在时会打开失败</span></span><br><span class="line">    <span class="function">fstream <span class="title">fs</span><span class="params">(<span class="string">&quot;heihei.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!fs.<span class="built_in">good</span>()) &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;fstream is not good!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 业务逻辑：</span></span><br><span class="line">    <span class="comment">// 从键盘输入数据，通过fs写到文件中</span></span><br><span class="line">    <span class="comment">// 再通过fs读文件，将数据输出到屏幕</span></span><br><span class="line">    <span class="type">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i != <span class="number">5</span>; i++)&#123;</span><br><span class="line">        cin &gt;&gt; number;</span><br><span class="line">        fs &lt;&lt; number &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i != <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="comment">//---- get status-------</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;fs.failbit = &quot;</span> &lt;&lt; fs.<span class="built_in">fail</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;fs.eofbit = &quot;</span> &lt;&lt; fs.<span class="built_in">eof</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;fs.goodbit = &quot;</span> &lt;&lt; fs.<span class="built_in">good</span>() &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//----------------------</span></span><br><span class="line">        fs &gt;&gt; number;</span><br><span class="line">        cout &lt;&lt; number &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    fs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2 </span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">fs.failbit = 0</span></span><br><span class="line"><span class="comment">fs.eofbit = 0</span></span><br><span class="line"><span class="comment">fs.goodbit = 1</span></span><br><span class="line"><span class="comment">5 fs.failbit = 1</span></span><br><span class="line"><span class="comment">fs.eofbit = 1</span></span><br><span class="line"><span class="comment">fs.goodbit = 0</span></span><br><span class="line"><span class="comment">5 fs.failbit = 1</span></span><br><span class="line"><span class="comment">fs.eofbit = 1</span></span><br><span class="line"><span class="comment">fs.goodbit = 0</span></span><br><span class="line"><span class="comment">5 fs.failbit = 1</span></span><br><span class="line"><span class="comment">fs.eofbit = 1</span></span><br><span class="line"><span class="comment">fs.goodbit = 0</span></span><br><span class="line"><span class="comment">5 fs.failbit = 1</span></span><br><span class="line"><span class="comment">fs.eofbit = 1</span></span><br><span class="line"><span class="comment">fs.goodbit = 0</span></span><br><span class="line"><span class="comment">5 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的调试过程中，发现文件指针一直在末尾。</p><p>修改代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::fstream;</span><br><span class="line"><span class="keyword">using</span> std::cerr;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对于 fstream 而言，文件不存在时会打开失败</span></span><br><span class="line">    <span class="function">fstream <span class="title">fs</span><span class="params">(<span class="string">&quot;heihei.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!fs.<span class="built_in">good</span>()) &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;fstream is not good!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 业务逻辑：</span></span><br><span class="line">    <span class="comment">// 从键盘输入数据，通过fs写到文件中</span></span><br><span class="line">    <span class="comment">// 再通过fs读文件，将数据输出到屏幕</span></span><br><span class="line">    <span class="type">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i != <span class="number">5</span>; i++)&#123;</span><br><span class="line">        cin &gt;&gt; number;</span><br><span class="line">        fs &lt;&lt; number &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出指针偏移的位置：</span></span><br><span class="line">    <span class="type">size_t</span> len = fs.<span class="built_in">tellp</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;len = &quot;</span> &lt;&lt; len &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    fs.<span class="built_in">seekp</span>(<span class="number">0</span>);</span><br><span class="line">    len = fs.<span class="built_in">tellp</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;len = &quot;</span> &lt;&lt; len &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i != <span class="number">5</span>; i++)&#123;</span><br><span class="line">        fs &gt;&gt; number;</span><br><span class="line">        cout &lt;&lt; number &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    fs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">wanko@wanko:~$ cd &quot;/home/wanko/mycode/&quot; &amp;&amp; g++ testtmp.cc -o testtmp &amp;&amp; &quot;/home/wanko/mycode/&quot;testtmp</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">len = 10</span></span><br><span class="line"><span class="comment">len = 0</span></span><br><span class="line"><span class="comment">1 2 3 4 5 </span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ cat heihei.txt</span></span><br><span class="line"><span class="comment">1 2 3 4 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>tellp</code>，p = put<br><code>tellg</code>，g = get<br><code>seekp</code> / <code>seekg</code> 同理</p><p>也可以使用相对位置：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="built_in">seekp</span>(<span class="number">-11</span>, std::ios::end); <span class="comment">// 相对位置</span></span><br></pre></td></tr></table></figure><h2 id="串-IO"><a href="#串-IO" class="headerlink" title="串 IO"></a>串 IO</h2><p>数字转字符串：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">int2str</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    ostringstream oss;</span><br><span class="line">    oss &lt;&lt; value;</span><br><span class="line">    <span class="keyword">return</span> oss.<span class="built_in">str</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">20</span>;</span><br><span class="line">    string s1 = <span class="built_in">int2str</span>(number);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">s1 = 20</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>一种新颖的用法（将流中各元素按需取出）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> num2 = <span class="number">20</span>;</span><br><span class="line">    stringstream ss;</span><br><span class="line">    ss &lt;&lt; <span class="string">&quot;num1= &quot;</span> &lt;&lt; num1</span><br><span class="line">       &lt;&lt; <span class="string">&quot; num2= &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">    string s1 = ss.<span class="built_in">str</span>();</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    string key;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">while</span>(ss &gt;&gt; key &gt;&gt; value) &#123;</span><br><span class="line">        cout &lt;&lt; key &lt;&lt; <span class="string">&quot;---&gt;&quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">num1= 10 num2= 20</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">num1=---&gt;10</span></span><br><span class="line"><span class="comment">num2=---&gt;20</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>日志的作用：<br>例如一个需要 7*24h 后台运行的服务器程序，当服务器崩溃或出现问题后，需要查看日志以分析问题。</p><p>例子：在<code>/var/log</code>下，打开文件<code>syslog.1</code>，可以欣赏到五彩斑斓的日志记录。</p><p>日志的设计思路：</p><ul><li>记录器：产生日志记录的原始信息。例如，等级、时间、记录的位置。</li><li>过滤器：按指定条件过滤掉不需要的日志。</li><li>格式化器：格式化原始日志信息。</li><li>输出器：将处理后的日志记录到目的位置。</li></ul><h3 id="log4cpp-安装"><a href="#log4cpp-安装" class="headerlink" title="log4cpp 安装"></a>log4cpp 安装</h3><p>官网： <a href="https://log4cpp.sourceforge.net/">https://log4cpp.sourceforge.net/</a><br>文档： <a href="https://log4cpp.sourceforge.net/api/index.html">https://log4cpp.sourceforge.net/api/index.html</a></p><p>安装：</p><ol><li>在官网下载 log4cpp-1.1.4.tar.gz（版本号可能会更新）至用户主目录<code>~</code></li><li><code>tar zxvf log4cpp-1.1.4.tar.gz</code></li><li><code>cd ~/log4cpp/</code></li><li><code>./configure</code></li><li><code>make</code></li><li><code>make check</code></li><li><code>sudo make install</code></li><li>安装成功</li></ol><p>默认lib库路径是：<code>/usr/local/lib/</code><br>默认头文件的位置：<code>/usr/local/include/log4cpp</code></p><p>编译使用 log4cpp 库的 CPP 文件时，要加上库文件，才能编译通过。示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ log4test.cpp -llog4cpp -lpthread</span><br></pre></td></tr></table></figure><p>运行时，若提示缺少 log4cpp 库文件，表示找不到 log4cpp 的动态库，需要以管理员身份登录终端，然后执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ld.so.conf</span><br></pre></td></tr></table></figure><p>在文件末尾另起一行，写入动态库 log4cpp 的路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/lib</span><br></pre></td></tr></table></figure><p>更新库文件的缓存信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p>此时初始工作完成。</p><h3 id="log4cpp-使用"><a href="#log4cpp-使用" class="headerlink" title="log4cpp 使用"></a>log4cpp 使用</h3><p>相关知识讲解：</p><div class="row"><iframe src="https://drive.google.com/file/d/1EU7E-qyFv1-VuB-ZMvwKnhQBR8xIYiGE/preview" style="width:100%; height:550px"></iframe></div><p>注意：在上面的 PDF 中，<code>OstreamAppender()</code>的第二个形参少了一个<code>*</code>，应为指针类型。</p><p>相关文章： <a href="https://blog.csdn.net/liuhong135541/category_1496383.html">log4cpp_作者静觅_CSDN</a></p><p>记录器： Category<br>目的地： Appender<br>过滤器： Priority<br>格式化器： Layout</p><p>Priority 等级：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">    EMERG=<span class="number">0</span>,</span><br><span class="line">    FATAL=<span class="number">0</span>,</span><br><span class="line">    ALERT=<span class="number">100</span>,</span><br><span class="line">    CRIT=<span class="number">200</span>,</span><br><span class="line">    ERROR=<span class="number">300</span>,</span><br><span class="line">    WARN=<span class="number">400</span>,</span><br><span class="line">    NOTICE=<span class="number">500</span>,</span><br><span class="line">    INFO=<span class="number">600</span>,</span><br><span class="line">    DEBUG=<span class="number">700</span>,</span><br><span class="line">    NOTSET =<span class="number">800</span></span><br><span class="line">&#125;PriorityLevel;</span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/SimpleLayout.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/OstreamAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Category.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Priority.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> log4cpp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 日志的格式</span></span><br><span class="line">    SimpleLayout* ps1 = <span class="keyword">new</span> <span class="built_in">SimpleLayout</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的目的地               // 参数含义见上面的 PDF</span></span><br><span class="line">    OstreamAppender* pos = <span class="keyword">new</span> <span class="built_in">OstreamAppender</span>(<span class="string">&quot;12&quot;</span>, &amp;cout);</span><br><span class="line">    pos-&gt;<span class="built_in">setLayout</span>(ps1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的记录器</span></span><br><span class="line">    Category&amp; root = Category::<span class="built_in">getRoot</span>();</span><br><span class="line">    root.<span class="built_in">addAppender</span>(pos);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的过滤器</span></span><br><span class="line">    root.<span class="built_in">setPriority</span>(Priority::ERROR);</span><br><span class="line"></span><br><span class="line">    root.<span class="built_in">emerg</span>(<span class="string">&quot;this is a emerg msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">fatal</span>(<span class="string">&quot;this is a fatal msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">alert</span>(<span class="string">&quot;this is a alert msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">crit</span>(<span class="string">&quot;this is a crit msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">error</span>(<span class="string">&quot;this is a error msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">warn</span>(<span class="string">&quot;this is a warn msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">info</span>(<span class="string">&quot;this is a info msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">debug</span>(<span class="string">&quot;this is a debug msg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回收空间</span></span><br><span class="line">    Category::<span class="built_in">shutdown</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ g++ testtmp.cc -llog4cpp -lpthread</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ ./a.out</span></span><br><span class="line"><span class="comment">FATAL   : this is a emerg msg</span></span><br><span class="line"><span class="comment">FATAL   : this is a fatal msg</span></span><br><span class="line"><span class="comment">ALERT   : this is a alert msg</span></span><br><span class="line"><span class="comment">CRIT    : this is a crit msg</span></span><br><span class="line"><span class="comment">ERROR   : this is a error msg</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>使用 PatternLayout 的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/PatternLayout.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/OstreamAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Category.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Priority.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> log4cpp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 日志的格式</span></span><br><span class="line">    PatternLayout* ppl = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">    ppl-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d %c [%p] %m%n&quot;</span>);</span><br><span class="line">         <span class="comment">//  日期  Category名字  等级  字符串  换行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的目的地               // 参数含义见上面的 PDF</span></span><br><span class="line">    OstreamAppender* pos = <span class="keyword">new</span> <span class="built_in">OstreamAppender</span>(<span class="string">&quot;12&quot;</span>, &amp;cout);</span><br><span class="line">    pos-&gt;<span class="built_in">setLayout</span>(ppl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的记录器</span></span><br><span class="line">    Category&amp; root = Category::<span class="built_in">getRoot</span>();</span><br><span class="line">    root.<span class="built_in">addAppender</span>(pos);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的过滤器</span></span><br><span class="line">    root.<span class="built_in">setPriority</span>(Priority::ERROR);</span><br><span class="line"></span><br><span class="line">    root.<span class="built_in">emerg</span>(<span class="string">&quot;this is a emerg msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">fatal</span>(<span class="string">&quot;this is a fatal msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">alert</span>(<span class="string">&quot;this is a alert msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">crit</span>(<span class="string">&quot;this is a crit msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">error</span>(<span class="string">&quot;this is a error msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">warn</span>(<span class="string">&quot;this is a warn msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">info</span>(<span class="string">&quot;this is a info msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">debug</span>(<span class="string">&quot;this is a debug msg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回收空间</span></span><br><span class="line">    Category::<span class="built_in">shutdown</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ g++ testtmp.cc -llog4cpp -lpthread</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ ./a.out</span></span><br><span class="line"><span class="comment">2024-02-15 16:37:46,344  [FATAL] this is a emerg msg</span></span><br><span class="line"><span class="comment">2024-02-15 16:37:46,344  [FATAL] this is a fatal msg</span></span><br><span class="line"><span class="comment">2024-02-15 16:37:46,344  [ALERT] this is a alert msg</span></span><br><span class="line"><span class="comment">2024-02-15 16:37:46,344  [CRIT] this is a crit msg</span></span><br><span class="line"><span class="comment">2024-02-15 16:37:46,344  [ERROR] this is a error msg</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意： 344是毫秒，Category名字没有打印出来</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>将日志写入文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/PatternLayout.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/OstreamAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/FileAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Category.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Priority.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> log4cpp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 日志的格式</span></span><br><span class="line">    PatternLayout* ppl1 = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">    ppl1-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d %c [%p] %m%n&quot;</span>);</span><br><span class="line">         <span class="comment">//  日期  Category名字  等级  字符串  换行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里写两次是为了防止 double free</span></span><br><span class="line">    PatternLayout* ppl2 = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">    ppl2-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d %c [%p] %m%n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//======== 既输出到屏幕上，==========</span></span><br><span class="line">    <span class="comment">// 日志的目的地               // 参数含义见上面的 PDF</span></span><br><span class="line">    OstreamAppender* pos = <span class="keyword">new</span> <span class="built_in">OstreamAppender</span>(<span class="string">&quot;12&quot;</span>, &amp;cout);</span><br><span class="line">    pos-&gt;<span class="built_in">setLayout</span>(ppl1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//======== 也输出到文件中。==========</span></span><br><span class="line">    FileAppender* pfa = <span class="keyword">new</span> <span class="built_in">FileAppender</span>(<span class="string">&quot;FileA1&quot;</span>, <span class="string">&quot;xx.log&quot;</span>);</span><br><span class="line">    pfa-&gt;<span class="built_in">setLayout</span>(ppl2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的记录器</span></span><br><span class="line">    Category&amp; root = Category::<span class="built_in">getRoot</span>();</span><br><span class="line">    root.<span class="built_in">addAppender</span>(pos);</span><br><span class="line">    root.<span class="built_in">addAppender</span>(pfa);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的过滤器</span></span><br><span class="line">    root.<span class="built_in">setPriority</span>(Priority::ERROR);</span><br><span class="line"></span><br><span class="line">    root.<span class="built_in">emerg</span>(<span class="string">&quot;this is a emerg msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">fatal</span>(<span class="string">&quot;this is a fatal msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">alert</span>(<span class="string">&quot;this is a alert msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">crit</span>(<span class="string">&quot;this is a crit msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">error</span>(<span class="string">&quot;this is a error msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">warn</span>(<span class="string">&quot;this is a warn msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">info</span>(<span class="string">&quot;this is a info msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">debug</span>(<span class="string">&quot;this is a debug msg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回收空间</span></span><br><span class="line">    Category::<span class="built_in">shutdown</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><font color="red">- - - 使用 RollingFileAppender - - -</font></center><p>若只输出到一个文件中，可能导致文件过大。可以考虑使用 RollingFileAppender. </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/PatternLayout.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/OstreamAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/RollingFileAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Category.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Priority.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> log4cpp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 日志的格式</span></span><br><span class="line">    PatternLayout* ppl1 = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">    ppl1-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d %c [%p] %m%n&quot;</span>);</span><br><span class="line">         <span class="comment">//  日期  Category名字  等级  字符串  换行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里写两次是为了防止 double free</span></span><br><span class="line">    PatternLayout* ppl2 = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">    ppl2-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d %c [%p] %m%n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//======== 既输出到屏幕上，==========</span></span><br><span class="line">    <span class="comment">// 日志的目的地               // 参数含义见上面的 PDF</span></span><br><span class="line">    OstreamAppender* pos = <span class="keyword">new</span> <span class="built_in">OstreamAppender</span>(<span class="string">&quot;12&quot;</span>, &amp;cout);</span><br><span class="line">    pos-&gt;<span class="built_in">setLayout</span>(ppl1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//======== 也输出到文件中。==========</span></span><br><span class="line">    RollingFileAppender* prfa = </span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">RollingFileAppender</span>(<span class="string">&quot;RollFileA1&quot;</span>, <span class="string">&quot;xx.log&quot;</span>, <span class="number">5</span>*<span class="number">1024</span>, <span class="number">3</span>);</span><br><span class="line">    prfa-&gt;<span class="built_in">setLayout</span>(ppl2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的记录器</span></span><br><span class="line">    Category&amp; root = Category::<span class="built_in">getRoot</span>();</span><br><span class="line">    root.<span class="built_in">addAppender</span>(pos);</span><br><span class="line">    root.<span class="built_in">addAppender</span>(prfa);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的过滤器</span></span><br><span class="line">    root.<span class="built_in">setPriority</span>(Priority::ERROR);</span><br><span class="line"></span><br><span class="line">    root.<span class="built_in">emerg</span>(<span class="string">&quot;this is a emerg msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">fatal</span>(<span class="string">&quot;this is a fatal msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">alert</span>(<span class="string">&quot;this is a alert msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">crit</span>(<span class="string">&quot;this is a crit msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">error</span>(<span class="string">&quot;this is a error msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">warn</span>(<span class="string">&quot;this is a warn msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">info</span>(<span class="string">&quot;this is a info msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">debug</span>(<span class="string">&quot;this is a debug msg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回收空间</span></span><br><span class="line">    Category::<span class="built_in">shutdown</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为看到效果，编写脚本<code>for.sh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span>((i=1; i&lt;=100; i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    ./a.out</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>然后为<code>for.sh</code>配置丧心病狂的权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 ./for.sh</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./for.sh</span><br></pre></td></tr></table></figure><p>效果：在<code>~/mycode</code>目录下看到<code>xx.log</code>、<code>xx.log.1</code>、<code>xx.log.2</code>、<code>xx.log.3</code>.</p><p><code>xx.log</code>始终保持最新。若<code>xx.log</code>大小达到设定上限，则将其重命名为<code>xx.log.1</code>，在新文件<code>xx.log</code>中写入最新日志。以此类推。</p><center><font color="red">- - - RollingFileAppender END - - -</font></center><h2 id="作业一"><a href="#作业一" class="headerlink" title="作业一"></a>作业一</h2><h3 id="词频统计"><a href="#词频统计" class="headerlink" title="词频统计"></a>词频统计</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Record</span>&#123;</span><br><span class="line">    <span class="built_in">Record</span>(<span class="type">const</span> string&amp; word, <span class="type">int</span> fre)</span><br><span class="line">          :_word(word), _frequeny(fre)&#123;&#125;</span><br><span class="line">    string _word;</span><br><span class="line">    <span class="type">int</span> _frequeny;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dictionary</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Dictionary</span>(<span class="type">int</span> capa)&#123;</span><br><span class="line">        _dict.<span class="built_in">reserve</span>(capa); <span class="comment">// 预留vector空间</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">const</span> string&amp; filename)</span></span>&#123;</span><br><span class="line">        <span class="function">std::ifstream <span class="title">ifs</span><span class="params">(filename)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(!ifs.<span class="built_in">good</span>())&#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;open&quot;</span> &lt;&lt; filename &lt;&lt; <span class="string">&quot;failed.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string line;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(ifs,line))&#123;</span><br><span class="line">            <span class="function">std::istringstream <span class="title">iss</span><span class="params">(line)</span></span>;</span><br><span class="line">            string word;</span><br><span class="line">            <span class="keyword">while</span>(iss &gt;&gt; word)&#123;</span><br><span class="line">                <span class="comment">// 先读行，再读每行的单词，是为了减少磁盘IO</span></span><br><span class="line">                string new_word = <span class="built_in">dealWord</span>(word);</span><br><span class="line">                <span class="built_in">insert</span>(new_word);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ifs.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">store</span><span class="params">(<span class="type">const</span> string&amp; filename)</span></span>&#123;</span><br><span class="line">        <span class="function">std::ofstream <span class="title">ofs</span><span class="params">(filename)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(!ofs.<span class="built_in">good</span>())&#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;open&quot;</span> &lt;&lt; filename &lt;&lt; <span class="string">&quot;failed.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; _dict.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            ofs &lt;&lt; _dict[i]._word &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; _dict[i]._frequeny &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ofs.<span class="built_in">close</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">dealWord</span><span class="params">(<span class="type">const</span> string&amp; word)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 这个函数很粗暴地丢弃了跟着标点的单词</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">size_t</span> idx = <span class="number">0</span>; idx != word.<span class="built_in">size</span>(); idx++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">isalpha</span>(word[idx])) <span class="keyword">return</span> <span class="built_in">string</span>(); <span class="comment">//空string</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> word;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> string&amp; word)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(word == <span class="built_in">string</span>()) <span class="keyword">return</span>; <span class="comment">//空string则返回</span></span><br><span class="line"></span><br><span class="line">        <span class="type">size_t</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; idx != _dict.<span class="built_in">size</span>(); idx++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(word == _dict[idx]._word)&#123;</span><br><span class="line">                ++_dict[idx]._frequeny;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(idx == _dict.<span class="built_in">size</span>())&#123;</span><br><span class="line">            _dict.<span class="built_in">push_back</span>(<span class="built_in">Record</span>(word, <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;Record&gt; _dict;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="function">Dictionary <span class="title">mydic</span><span class="params">(<span class="number">3789</span>)</span></span>;</span><br><span class="line">    mydic.<span class="built_in">read</span>(<span class="string">&quot;hamlet.txt&quot;</span>);</span><br><span class="line">    mydic.<span class="built_in">store</span>(<span class="string">&quot;mydicoutput.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装-log4cpp"><a href="#封装-log4cpp" class="headerlink" title="封装 log4cpp"></a>封装 log4cpp</h3><p>用单例模式封装 log4cpp，使其更易于使用。</p><p><code>myLogger.h</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _MYLOGGER_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _MYLOGGER_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Category.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> log4cpp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mylogger</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Mylogger* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destory</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">warn</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">debug</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">info</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Mylogger</span>();</span><br><span class="line">    ~<span class="built_in">Mylogger</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="type">static</span> Mylogger* _pInstance;</span><br><span class="line">    Category&amp; _mycat;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> prefix(msg) (string(__FILE__) + <span class="string">&quot;:&quot;</span>  \</span></span><br><span class="line"><span class="meta">               + string(__FUNCTION__) + <span class="string">&quot;:&quot;</span>  \</span></span><br><span class="line"><span class="meta">               + std::to_string(__LINE__) + <span class="string">&quot;:&quot;</span>  \</span></span><br><span class="line"><span class="meta">               + string(msg)).c_str()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> logWarn(msg) Mylogger::getInstance()-&gt;warn(prefix(msg));</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> logError(msg) Mylogger::getInstance()-&gt;<span class="keyword">error</span>(prefix(msg));</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> logInfo(msg) Mylogger::getInstance()-&gt;info(prefix(msg));</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> logDebug(msg) Mylogger::getInstance()-&gt;debug(prefix(msg));</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>myLogger.cc</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myLogger.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/PatternLayout.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/OstreamAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/FileAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Priority.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line">Mylogger* Mylogger::_pInstance = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Mylogger* <span class="title">Mylogger::getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_pInstance  == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        _pInstance = <span class="keyword">new</span> <span class="built_in">Mylogger</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _pInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_pInstance)&#123;</span><br><span class="line">        <span class="keyword">delete</span> _pInstance;</span><br><span class="line">        _pInstance = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::warn</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>&#123;</span><br><span class="line">    _mycat.<span class="built_in">warn</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::error</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>&#123;</span><br><span class="line">    _mycat.<span class="built_in">error</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::debug</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>&#123;</span><br><span class="line">    _mycat.<span class="built_in">debug</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::info</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>&#123;</span><br><span class="line">    _mycat.<span class="built_in">info</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mylogger::<span class="built_in">Mylogger</span>()</span><br><span class="line">:_mycat(Category::<span class="built_in">getRoot</span>().<span class="built_in">getInstance</span>(<span class="string">&quot;mycat&quot;</span>))&#123; <span class="comment">//mycat 是个名字</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Mylogger&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 日志的格式</span></span><br><span class="line">    PatternLayout* ppl1 = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">    ppl1-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d %c [%p] %m%n&quot;</span>);</span><br><span class="line">    PatternLayout* ppl2 = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">    ppl2-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d %c [%p] %m%n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的目的地</span></span><br><span class="line">    OstreamAppender* poa = <span class="keyword">new</span> <span class="built_in">OstreamAppender</span>(<span class="string">&quot;OSA&quot;</span>, &amp;cout);</span><br><span class="line">    poa-&gt;<span class="built_in">setLayout</span>(ppl1);</span><br><span class="line">    FileAppender* pfa = <span class="keyword">new</span> <span class="built_in">FileAppender</span>(<span class="string">&quot;FA&quot;</span>, <span class="string">&quot;zy.txt&quot;</span>);</span><br><span class="line">    pfa-&gt;<span class="built_in">setLayout</span>(ppl2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志的过滤器</span></span><br><span class="line">    _mycat.<span class="built_in">setPriority</span>(Priority::DEBUG);</span><br><span class="line">    _mycat.<span class="built_in">addAppender</span>(poa);</span><br><span class="line">    _mycat.<span class="built_in">addAppender</span>(pfa);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mylogger::~<span class="built_in">Mylogger</span>()&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;~Mylogger()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Category::<span class="built_in">shutdown</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>testlogger.cc</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myLogger.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// Mylogger::getInstance()-&gt;warn(prefix(&quot;warning msg&quot;));</span></span><br><span class="line">    <span class="built_in">logWarn</span>(<span class="string">&quot;warning msg&quot;</span>);</span><br><span class="line">    <span class="built_in">logError</span>(<span class="string">&quot;error msg&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p><img src="https://bu.dusays.com/2024/02/18/65d1feb76d055.png" alt="62-7.png"></p><p>规则：</p><ul><li>重载运算符的操作对象必须至少有一个是自定义类型或枚举类型</li><li>优先级和结合性不变</li><li>操作数不能有默认参数</li><li>重载逻辑运算符<code>&amp;&amp;</code>、<code>||</code>后，不再具有短路求值特性</li><li>不能臆造并不存在的运算符<code>@</code>、<code>$</code>等</li></ul><h3 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h3><p>以普通函数的形式进行重载：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> dreal = <span class="number">0</span>, <span class="type">double</span> dimag = <span class="number">0</span>)</span><br><span class="line">    :_dreal(dreal), _dimag(dimag)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex(double = 0, double = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; _dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; _dimag &lt;&lt; <span class="string">&quot;i&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getReal</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _dreal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getImag</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _dimag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Complex</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _dreal;</span><br><span class="line">    <span class="type">double</span> _dimag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; lhs, <span class="type">const</span> Complex&amp; rhs)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Complex operator + (const Complex&amp;, const Complex&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Complex</span>(lhs.<span class="built_in">getReal</span>() + rhs.<span class="built_in">getReal</span>(),</span><br><span class="line">                   lhs.<span class="built_in">getImag</span>() + rhs.<span class="built_in">getImag</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 = &quot;</span>;</span><br><span class="line">    c1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    <span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c2 = &quot;</span>;</span><br><span class="line">    c2.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    Complex c3 = c1 + c2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = &quot;</span>;</span><br><span class="line">    c3.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c1 = 1 + 2i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c2 = 3 + 4i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Complex operator + (const Complex&amp;, const Complex&amp;)</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c3 = 4 + 6i</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>以成员函数的形式进行重载：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> dreal = <span class="number">0</span>, <span class="type">double</span> dimag = <span class="number">0</span>)</span><br><span class="line">    :_dreal(dreal), _dimag(dimag)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex(double = 0, double = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; _dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; _dimag &lt;&lt; <span class="string">&quot;i&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; rhs)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex operatro + (const Complex&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(_dreal + rhs._dreal, _dimag + rhs._dimag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Complex</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _dreal;</span><br><span class="line">    <span class="type">double</span> _dimag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 = &quot;</span>;</span><br><span class="line">    c1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    <span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c2 = &quot;</span>;</span><br><span class="line">    c2.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    Complex c3 = c1 + c2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = &quot;</span>;</span><br><span class="line">    c3.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c1 = 1 + 2i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c2 = 3 + 4i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Complex operatro + (const Complex&amp;)</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c3 = 4 + 6i</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>以友元函数的形式进行重载：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="keyword">friend</span> Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; lhs, <span class="type">const</span> Complex&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> dreal = <span class="number">0</span>, <span class="type">double</span> dimag = <span class="number">0</span>)</span><br><span class="line">    :_dreal(dreal), _dimag(dimag)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex(double = 0, double = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; _dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; _dimag &lt;&lt; <span class="string">&quot;i&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Complex</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _dreal;</span><br><span class="line">    <span class="type">double</span> _dimag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; lhs, <span class="type">const</span> Complex&amp; rhs)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;friend Complex operator + (const Complex&amp;, const Complex&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Complex</span>(lhs._dreal + rhs._dreal,</span><br><span class="line">                   lhs._dimag + rhs._dimag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 = &quot;</span>;</span><br><span class="line">    c1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    <span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c2 = &quot;</span>;</span><br><span class="line">    c2.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    Complex c3 = c1 + c2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = &quot;</span>;</span><br><span class="line">    c3.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c1 = 1 + 2i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c2 = 3 + 4i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">friend Complex operator + (const Complex&amp;, const Complex&amp;)</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c3 = 4 + 6i</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h3><p>复合赋值运算符，推荐以成员函数进行重载：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="keyword">friend</span> Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; lhs, <span class="type">const</span> Complex&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> dreal = <span class="number">0</span>, <span class="type">double</span> dimag = <span class="number">0</span>)</span><br><span class="line">    :_dreal(dreal), _dimag(dimag)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex(double = 0, double = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex&amp; <span class="keyword">operator</span> += (<span class="type">const</span> Complex&amp; rhs)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex&amp; operator +=(const Complex&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        _dreal += rhs._dreal;</span><br><span class="line">        _dimag += rhs._dimag;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; _dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; _dimag &lt;&lt; <span class="string">&quot;i&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Complex</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _dreal;</span><br><span class="line">    <span class="type">double</span> _dimag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; lhs, <span class="type">const</span> Complex&amp; rhs)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;friend Complex operator + (const Complex&amp;, const Complex&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Complex</span>(lhs._dreal + rhs._dreal,</span><br><span class="line">                   lhs._dimag + rhs._dimag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 = &quot;</span>;</span><br><span class="line">    c1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    <span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c2 = &quot;</span>;</span><br><span class="line">    c2.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    Complex c3 = c1 + c2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = &quot;</span>;</span><br><span class="line">    c3.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    c3 += c1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = &quot;</span>;</span><br><span class="line">    c3.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c1 = 1 + 2i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c2 = 3 + 4i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">friend Complex operator + (const Complex&amp;, const Complex&amp;)</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c3 = 4 + 6i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Complex&amp; operator +=(const Complex&amp;)</span></span><br><span class="line"><span class="comment">c3 = 5 + 8i</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h3><p>前置和后置<code>++</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="keyword">friend</span> Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; lhs, <span class="type">const</span> Complex&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> dreal = <span class="number">0</span>, <span class="type">double</span> dimag = <span class="number">0</span>)</span><br><span class="line">    :_dreal(dreal), _dimag(dimag)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex(double = 0, double = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex&amp; <span class="keyword">operator</span> += (<span class="type">const</span> Complex&amp; rhs)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex&amp; operator +=(const Complex&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        _dreal += rhs._dreal;</span><br><span class="line">        _dimag += rhs._dimag;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex&amp; <span class="keyword">operator</span> ++ ()&#123; <span class="comment">// 前置 ++</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex&amp; operator ++()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        ++_dreal;</span><br><span class="line">        ++_dimag;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span> ++ (<span class="type">int</span>)&#123; <span class="comment">// 这里的 int 是标志位，用于区分</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex operator ++ (int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="function">Complex <span class="title">tmp</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        _dreal++;</span><br><span class="line">        _dimag++;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; _dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; _dimag &lt;&lt; <span class="string">&quot;i&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Complex</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _dreal;</span><br><span class="line">    <span class="type">double</span> _dimag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; lhs, <span class="type">const</span> Complex&amp; rhs)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;friend Complex operator + (const Complex&amp;, const Complex&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Complex</span>(lhs._dreal + rhs._dreal,</span><br><span class="line">                   lhs._dimag + rhs._dimag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 = &quot;</span>;</span><br><span class="line">    c1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    <span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c2 = &quot;</span>;</span><br><span class="line">    c2.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    Complex c3 = c1 + c2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = &quot;</span>;</span><br><span class="line">    c3.<span class="built_in">print</span>(); <span class="comment">// 4+6i</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;(++c3) = &quot;</span>;</span><br><span class="line">    (++c3).<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = &quot;</span>;</span><br><span class="line">    c3.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;(c3++) = &quot;</span>;</span><br><span class="line">    (c3++).<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = &quot;</span>;</span><br><span class="line">    c3.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">c1 = 1 + 2i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c2 = 3 + 4i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">friend Complex operator + (const Complex&amp;, const Complex&amp;)</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c3 = 4 + 6i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(++c3) = Complex&amp; operator ++()</span></span><br><span class="line"><span class="comment">5 + 7i</span></span><br><span class="line"><span class="comment">c3 = 5 + 7i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(c3++) = Complex operator ++ (int)</span></span><br><span class="line"><span class="comment">5 + 7i</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">c3 = 6 + 8i</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>前置<code>++</code>返回的是对象的引用，是左值，可以取地址；后置<code>++</code>返回的是局部对象，是右值，不能取地址。</p><p>前置<code>++</code>的效率比后置<code>++</code>高。</p><h3 id="输出流运算符"><a href="#输出流运算符" class="headerlink" title="输出流运算符"></a>输出流运算符</h3><p>对于重载输出流运算符而言，不能写成成员函数的形式，因为不能改变操作数的顺序。推荐使用友元：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Complex&amp; rhs);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> dreal = <span class="number">0</span>, <span class="type">double</span> dimag = <span class="number">0</span>)</span><br><span class="line">    :_dreal(dreal), _dimag(dimag)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex(double = 0, double = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Complex</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _dreal;</span><br><span class="line">    <span class="type">double</span> _dimag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Complex&amp; rhs)&#123;</span><br><span class="line">    os &lt;&lt; rhs._dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; rhs._dimag &lt;&lt; <span class="string">&quot;i&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 = &quot;</span> &lt;&lt; c1 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c1 = 1 + 2i</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>关于下面这句：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;c1 = &quot;</span> &lt;&lt; c1 &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>也可以写为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">operator</span>&lt;&lt;(<span class="keyword">operator</span>&lt;&lt;(cout, <span class="string">&quot;c1 = &quot;</span>), c1).<span class="keyword">operator</span>&lt;&lt;(endl);</span><br></pre></td></tr></table></figure><h3 id="输入流运算符"><a href="#输入流运算符" class="headerlink" title="输入流运算符"></a>输入流运算符</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Complex&amp; rhs);</span><br><span class="line">    <span class="keyword">friend</span> std::istream&amp; <span class="keyword">operator</span> &gt;&gt; (std::istream&amp; is, Complex&amp; rhs);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> dreal = <span class="number">0</span>, <span class="type">double</span> dimag = <span class="number">0</span>)</span><br><span class="line">    :_dreal(dreal), _dimag(dimag)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex(double = 0, double = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Complex</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _dreal;</span><br><span class="line">    <span class="type">double</span> _dimag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readDouble</span><span class="params">(std::istream&amp; is, <span class="type">double</span>&amp; rhs)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(is &gt;&gt; rhs, !is.<span class="built_in">eof</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(is.<span class="built_in">bad</span>())&#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;istream is bad.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(is.<span class="built_in">fail</span>())&#123;</span><br><span class="line">            is.<span class="built_in">clear</span>();</span><br><span class="line">            is.<span class="built_in">ignore</span>(std::numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;please input a double-type number : &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Complex&amp; rhs)&#123;</span><br><span class="line">    os &lt;&lt; rhs._dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; rhs._dimag &lt;&lt; <span class="string">&quot;i&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::istream&amp; <span class="keyword">operator</span> &gt;&gt; (std::istream&amp; is, Complex&amp; rhs)&#123;</span><br><span class="line">    <span class="comment">// is &gt;&gt; rhs._dreal &gt;&gt; rhs._dimag;</span></span><br><span class="line">    <span class="built_in">readDouble</span>(is, rhs._dreal);</span><br><span class="line">    <span class="built_in">readDouble</span>(is, rhs._dimag);</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 = &quot;</span> &lt;&lt; c1 &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Complex c2;</span><br><span class="line">    cin &gt;&gt; c2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c2 = &quot;</span> &lt;&lt; c2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c1 = 1 + 2i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">asdf</span></span><br><span class="line"><span class="comment">please input a double-type number : 12</span></span><br><span class="line"><span class="comment">kl</span></span><br><span class="line"><span class="comment">please input a double-type number : 24</span></span><br><span class="line"><span class="comment">c2 = 12 + 24i</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="函数调用运算符（小括号）"><a href="#函数调用运算符（小括号）" class="headerlink" title="函数调用运算符（小括号）"></a>函数调用运算符（小括号）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FuncObj</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;int operator () (int, int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;int operator () (int, int, int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> x * y * z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FuncObj fo;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">3</span>, b = <span class="number">4</span>, c = <span class="number">5</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;fo(a, b) = &quot;</span> &lt;&lt; <span class="built_in">fo</span>(a, b) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;fo(a, b, c) = &quot;</span> &lt;&lt; <span class="built_in">fo</span>(a, b, c) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">fo(a, b) = int operator () (int, int)</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">fo(a, b, c) = int operator () (int, int, int)</span></span><br><span class="line"><span class="comment">60</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>fo(a, b)</code>等价于：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fo.<span class="built_in">operator</span>()(a,b)</span><br></pre></td></tr></table></figure><p>类似地，<code>fo(a, b, c)</code>等价于：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fo.<span class="built_in">operator</span>()(a, b, c)</span><br></pre></td></tr></table></figure><p>重载了函数调用运算符的类创建的对象，称为函数对象。</p><h3 id="下标访问运算符（中括号）"><a href="#下标访问运算符（中括号）" class="headerlink" title="下标访问运算符（中括号）"></a>下标访问运算符（中括号）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">charArray</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">charArray</span>(<span class="type">size_t</span> sz = <span class="number">10</span>) </span><br><span class="line">    :_size(sz),_data(<span class="keyword">new</span> <span class="type">char</span>[sz]())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;charArray(size_t = 10)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>&amp; <span class="keyword">operator</span> [] (<span class="type">size_t</span> idx)&#123;</span><br><span class="line">        <span class="keyword">if</span>(idx &lt; _size)&#123;</span><br><span class="line">            <span class="keyword">return</span> _data[idx];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">static</span> <span class="type">char</span> charNull = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> charNull;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">charArray</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~charArray()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_data)&#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _data;</span><br><span class="line">            _data = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">size_t</span> _size;</span><br><span class="line">    <span class="type">char</span>* _data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">    <span class="function">charArray <span class="title">ca</span><span class="params">(strlen(pstr) + <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; ca.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        ca[i] = pstr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; ca.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        cout &lt;&lt; ca[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">charArray(size_t = 10)</span></span><br><span class="line"><span class="comment">h e l l o w o r l d  </span></span><br><span class="line"><span class="comment">~charArray()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="成员访问运算符"><a href="#成员访问运算符" class="headerlink" title="成员访问运算符"></a>成员访问运算符</h3><p>成员访问运算符包括：<code>-&gt;</code>、<code>*</code>。</p><p><code>-&gt;</code>只能以成员函数的形式重载，其返回值必须是一个指针或是重载了<code>-&gt;</code>的对象。</p><p>来看<code>-&gt;</code>的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Data</span>(<span class="type">int</span> data = <span class="number">0</span>):_data(data) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Data(int = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_data</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Data</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Data()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">secondLayyer</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">secondLayyer</span>(Data* pdata):_pdata(pdata) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;secondLayyer(Data*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">secondLayyer</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~secondLayyer()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pdata)&#123;</span><br><span class="line">            <span class="keyword">delete</span> _pdata;</span><br><span class="line">            _pdata = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Data* <span class="keyword">operator</span> -&gt; () &#123;</span><br><span class="line">        <span class="keyword">return</span> _pdata;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Data* _pdata;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">thirdLayyer</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">thirdLayyer</span>(secondLayyer* ps1):_ps1(ps1) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;thirdLayyer(secondLayyer*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    secondLayyer&amp; <span class="keyword">operator</span> -&gt; () &#123;</span><br><span class="line">        <span class="keyword">return</span> *_ps1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">thirdLayyer</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~thirdLayyer()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_ps1)&#123;</span><br><span class="line">            <span class="keyword">delete</span> _ps1;</span><br><span class="line">            _ps1 = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    secondLayyer* _ps1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">secondLayyer <span class="title">sl</span><span class="params">(<span class="keyword">new</span> Data(<span class="number">10</span>))</span></span>; <span class="comment">// 栈对象</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sl-&gt;get_data() = &quot;</span> &lt;&lt; sl-&gt;<span class="built_in">get_data</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 勤劳的编译器使我们可以在上面的写法中省略一个箭头</span></span><br><span class="line">    <span class="comment">// 等价的写法： </span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1-&gt;get_data() = &quot;</span> &lt;&lt; sl.<span class="keyword">operator</span>-&gt;()-&gt;<span class="built_in">get_data</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Data(int = 0)</span></span><br><span class="line"><span class="comment">secondLayyer(Data*)</span></span><br><span class="line"><span class="comment">sl-&gt;get_data() = 10</span></span><br><span class="line"><span class="comment">s1-&gt;get_data() = 10</span></span><br><span class="line"><span class="comment">~secondLayyer()</span></span><br><span class="line"><span class="comment">~Data()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>更进一步的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Data</span>(<span class="type">int</span> data = <span class="number">0</span>):_data(data) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Data(int = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_data</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Data</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Data()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">secondLayyer</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">secondLayyer</span>(Data* pdata):_pdata(pdata) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;secondLayyer(Data*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">secondLayyer</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~secondLayyer()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pdata)&#123;</span><br><span class="line">            <span class="keyword">delete</span> _pdata;</span><br><span class="line">            _pdata = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Data* <span class="keyword">operator</span> -&gt; () &#123;</span><br><span class="line">        <span class="keyword">return</span> _pdata; <span class="comment">// 返回的是指针</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Data* _pdata;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">thirdLayyer</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">thirdLayyer</span>(secondLayyer* ps1):_ps1(ps1) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;thirdLayyer(secondLayyer*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    secondLayyer&amp; <span class="keyword">operator</span> -&gt; () &#123;</span><br><span class="line">        <span class="keyword">return</span> *_ps1; <span class="comment">// 这里的 * 是解引用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">thirdLayyer</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~thirdLayyer()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_ps1)&#123;</span><br><span class="line">            <span class="keyword">delete</span> _ps1;</span><br><span class="line">            _ps1 = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    secondLayyer* _ps1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">thirdLayyer <span class="title">tl</span><span class="params">(<span class="keyword">new</span> secondLayyer(<span class="keyword">new</span> Data(<span class="number">30</span>)))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;tl-&gt;get_data() = &quot;</span> &lt;&lt; tl-&gt;<span class="built_in">get_data</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;tl-&gt;get_data() = &quot;</span> &lt;&lt; tl.<span class="keyword">operator</span>-&gt;().<span class="keyword">operator</span>-&gt;()-&gt;<span class="built_in">get_data</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Data(int = 0)</span></span><br><span class="line"><span class="comment">secondLayyer(Data*)</span></span><br><span class="line"><span class="comment">thirdLayyer(secondLayyer*)</span></span><br><span class="line"><span class="comment">tl-&gt;get_data() = 30</span></span><br><span class="line"><span class="comment">tl-&gt;get_data() = 30</span></span><br><span class="line"><span class="comment">~thirdLayyer()</span></span><br><span class="line"><span class="comment">~secondLayyer()</span></span><br><span class="line"><span class="comment">~Data()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>来看<code>*</code>的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Data</span>(<span class="type">int</span> data = <span class="number">0</span>):_data(data) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Data(int = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_data</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Data</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Data()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">secondLayyer</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">secondLayyer</span>(Data* pdata):_pdata(pdata) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;secondLayyer(Data*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">secondLayyer</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~secondLayyer()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pdata)&#123;</span><br><span class="line">            <span class="keyword">delete</span> _pdata;</span><br><span class="line">            _pdata = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Data&amp; <span class="keyword">operator</span> * () &#123;</span><br><span class="line">        <span class="keyword">return</span> *_pdata;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Data* _pdata;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">secondLayyer <span class="title">sl</span><span class="params">(<span class="keyword">new</span> Data(<span class="number">10</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;(*sl).get_data() = &quot;</span> &lt;&lt; (*sl).<span class="built_in">get_data</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;(*sl).get_data() = &quot;</span> &lt;&lt; sl.<span class="keyword">operator</span>*().<span class="built_in">get_data</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Data(int = 0)</span></span><br><span class="line"><span class="comment">secondLayyer(Data*)</span></span><br><span class="line"><span class="comment">(*sl).get_data() = 10</span></span><br><span class="line"><span class="comment">(*sl).get_data() = 10</span></span><br><span class="line"><span class="comment">~secondLayyer()</span></span><br><span class="line"><span class="comment">~Data()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>后续内容见 CppNote3 .</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 笔记</title>
      <link href="/posts/aaba1da3.html"/>
      <url>/posts/aaba1da3.html</url>
      
        <content type="html"><![CDATA[<p>数据库学习笔记。</p><h2 id="数据库的概念、分类"><a href="#数据库的概念、分类" class="headerlink" title="数据库的概念、分类"></a>数据库的概念、分类</h2><p>数据库的引入：<br>存储数据的结构或方式</p><ul><li>数组、链表：基于内存，短暂存储</li><li>文件：永久性存储，但是不利于查找</li><li>数据库：可以永久存储，并且可以更好的查找</li></ul><p>数据库的定义：存储结构化数据的仓库。<br>结构化数据一般指存储在数据库中，具有一定逻辑结构和物理结构的数据。</p><p>数据库的分类：</p><ul><li>关系型数据库<ul><li>通过外键关联来建立表与表之间的关系</li><li>例如：Oracle、MySQL、DB2、Informix、SQL Server、SQLite</li><li>关系型数据库把复杂的数据结构归结为简单的二元关系，在存储数据时实际就是采用的一张二维表（和Word和excell里表格几乎一样）</li><li>市场占有量较大的是MySQL和oracle数据库，而互联网场景最常用的是MySQL数据库</li><li>它通过SQL结构化查询语言来存取、管理关系型数据库的数据</li></ul></li><li>非关系型数据库<ul><li>数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定</li><li>不是对关系型数据库的否定，而是补充，主要针对大数据</li><li>种类<ul><li>键值对（key-value）：Redis、Memcached</li><li>按列存储：Hbase、Scylla、Cassandra</li><li>面向文档：MongoDB、CouchDB</li><li>图形存储：Neo4J</li></ul></li></ul></li></ul><p>数据库管理软件（DBMS）<br>数据库管理员（DBA）</p><p>数据库服务器、数据库和表的关系：</p><p><img src="https://bu.dusays.com/2024/01/01/6592be1d25bd0.png" alt="61-1.png"></p><p>数据在数据库中的存储方式：</p><p><img src="https://bu.dusays.com/2024/01/01/6592bfa307acc.png" alt="61-2.png"></p><p>SQL（Structured Query Language）：结构化查询语言</p><ul><li>是一种定义、操作、管理关系型数据库的句法。大多数关系型数据库都支持</li><li>结构化查询语言的工业标准由ANSI（美国国家标准学会，ISO的成员之一）维护</li><li>组成：<ul><li>DQL：数据查询语言</li><li>DML（Data Manipulation Language）：数据操作语言</li><li>DDL：数据定义语言</li><li>DCL：数据控制语言</li><li>TPL：事务处理语言</li><li>CCL：指针控制语言</li></ul></li></ul><p>mysql 的安装： <a href="https://www.bilibili.com/video/BV12q4y1U7sZ">https://www.bilibili.com/video/BV12q4y1U7sZ</a></p><p>数据库大小写不敏感。</p><h2 id="创建、显示、删除"><a href="#创建、显示、删除" class="headerlink" title="创建、显示、删除"></a>创建、显示、删除</h2><p>DDL（Data Definition Language）数据定义语言</p><ul><li>作用：用于描述数据库中要存储的现实世界实体的语言。即<strong>创建数据库和表的结构</strong>。</li><li>常用关键字：<ul><li><code>CREATE</code>：创建</li><li><code>ALTER</code>：修改</li><li><code>DROP</code>：删除</li><li><code>TRUNCATE</code>：截断</li></ul></li></ul><p>进入 sql ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><p>看到 mysql 的提示符，说明连接成功。</p><p>输入 <code>show schemas;</code> 查询自带的数据库。</p><p><img src="https://bu.dusays.com/2024/01/02/659423c467080.png" alt="61-3.png"></p><p>或者 <code>show databases;</code> ：</p><p><img src="https://bu.dusays.com/2024/01/02/6594256b6299b.png" alt="61-4.png"></p><p>information_schema（元数据）<br>mysql（核心库）<br>performance_schema（性能相关）<br>sys（对DBA有好处）</p><p>注释记号：<code>#</code>、<code>--</code>、<code>/**/</code></p><p>创建数据库 <code>create database akashi;</code> ：</p><p><img src="https://bu.dusays.com/2024/01/02/659429989faba.png" alt="61-5.png"></p><p>使用数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use akashi;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure><p>显示表格（目前为空）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个另外的例子：</p><p><img src="https://bu.dusays.com/2024/01/02/65942b5cb0f1b.png" alt="61-6.png" title="下略"></p><p>删除一个库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> database akashi;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/02/65942c4a092d2.png" alt="61-7.png" title="后来又建回来了QAQ"></p><p>创建表：</p><p><img src="https://bu.dusays.com/2024/01/02/6594301c6db3c.png" alt="61-8.png"></p><p>MySQL 常用数据类型：</p><p><img src="https://bu.dusays.com/2024/01/02/659431ad47258.png" alt="61-9.png"></p><p>创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">member</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> (id <span class="type">int</span>, name <span class="type">char</span>(<span class="number">20</span>), age <span class="type">int</span>, math <span class="type">float</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/659435af32350.png" alt="61-10.png"></p><p>显示表的结构 <code>show create table member;</code> ：</p><p><img src="https://bu.dusays.com/2024/01/03/659436dd80bfb.png" alt="61-11.png"></p><p>显示表的结构（第二种方法）<code>desc member;</code> ：</p><p><img src="https://bu.dusays.com/2024/01/03/659437a381f8c.png" alt="61-12.png"></p><p>查看当前所属数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> database();</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> database() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> akashi     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>参看数据库版本：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> version();</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> version()               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">8.0</span><span class="number">.35</span><span class="number">-0</span>ubuntu0<span class="number">.22</span><span class="number">.04</span><span class="number">.1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>修改表，增加字段，add：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在 <span class="keyword">member</span> 表中增加一个英语成绩，类型为 <span class="type">float</span> ，默认值为 <span class="number">60</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">member</span> <span class="keyword">add</span> english <span class="type">float</span> <span class="keyword">default</span> <span class="number">60</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/659439c8c34d4.png" alt="61-13.png"></p><p>修改表，修改字段类型：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">member</span> modify name <span class="type">varchar</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65943b81a382f.png" alt="61-14.png"></p><p>改字段名字：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">member</span> change name mname <span class="type">varchar</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65943c96b4403.png" alt="61-15.png" title="然后又改回去了，不提"></p><p>删除字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">member</span> <span class="keyword">drop</span> english;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65943e41955c5.png" alt="61-16.png"></p><p>删除表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> test1;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65943fbb7bac4.png" alt="61-17.png"></p><p>指定位置添加：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">member</span> <span class="keyword">add</span> english <span class="type">float</span> <span class="keyword">first</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/659440d9bab43.png" alt="61-18.png"></p><p>指定相对位置添加：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">member</span> <span class="keyword">add</span> xxx <span class="type">float</span> after id;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65944279d82ee.png" alt="61-19.png"></p><p>修改表结构：</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/R-nPuXn6q3jDcq" alt="61-20"></p><h2 id="INSERT、UPDATE、DELETE"><a href="#INSERT、UPDATE、DELETE" class="headerlink" title="INSERT、UPDATE、DELETE"></a>INSERT、UPDATE、DELETE</h2><p>DML（Data Manipulation Language）数据操纵语言</p><ul><li>作用：用于向数据库表中插入、删除、修改数据</li><li>常用关键字：<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code></li></ul><p>字符串使用单引号。</p><p>插入一条记录并查看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> (id,name,age,math) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;xiaoshuai&#x27;</span>,<span class="number">30</span>,<span class="number">59</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65951dd78c979.png" alt="61-21.png"></p><p>插入一条记录，部分为默认值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> (id,name) <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">&#x27;xiaoai&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65951f43b2a1c.png" alt="61-22.png"></p><p>插入多条记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> <span class="keyword">values</span> (<span class="number">3</span>,<span class="string">&#x27;xiaomei&#x27;</span>,<span class="number">20</span>,<span class="number">100</span>),(<span class="number">4</span>,<span class="string">&#x27;lumine&#x27;</span>,<span class="number">17</span>,<span class="number">61</span>),(<span class="number">8</span>,<span class="string">&#x27;xiao&#x27;</span>,<span class="number">18</span>,<span class="number">85</span>);</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/YoQQDvFN2g3adR" alt="61-23"></p><p>修改一条记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> age<span class="operator">=</span><span class="number">24</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/6595247bbaadb.png" alt="61-24.png"></p><p>修改一张表的全部记录（修改值相同）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> e_date<span class="operator">=</span><span class="string">&#x27;1999-10-10 10:10:10&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/fiG2taOrig2lIL" alt="61-25"></p><p>删除记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>插入空值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span>(name) <span class="keyword">values</span>(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/659528bd889dc.png" alt="61-26.png"></p><p><strong>同<code>insert</code>和<code>update</code>一样，从一个表中删除记录将引起其它表的参照完整性问题，在修改数据库数据时，头脑中应该始终不要忘记这个潜在的问题。</strong></p><p>Tip: mysql中文乱码</p><ul><li>mysql有六处使用了字符集，分别为：client 、connection、database、results、server 、system</li><li>client是客户端使用的字符集</li><li>connection是连接数据库的字符集设置类型，如果程序没有指明连接数据库使用的字符集类型就按照服务器端默认的字符集设置</li><li>database是数据库服务器中某个库使用的字符集设定，如果建库时没有指明，将使用服务器安装时指定的字符集设置</li><li>results是数据库给客户端返回时使用的字符集设定，如果没有指明，使用服务器默认的字符集</li><li>server是服务器安装时指定的默认字符集设定</li><li>system是数据库系统使用的字符集设定</li></ul><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>DQL（Data Query Language）数据查询语言</p><ul><li>作用：查询数据</li><li>常用关键字：<code>SELECT</code></li></ul><p>查看 member 表中数据的条数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> <span class="keyword">member</span>;</span><br></pre></td></tr></table></figure><p>或者（效果一样）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> <span class="keyword">member</span>;</span><br></pre></td></tr></table></figure><p>基本select语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT [DISTINCT] [*] |&#123;column1, column2, column3..&#125; FROM table [where];</span><br></pre></td></tr></table></figure><p>基本select语句</p><ul><li><code>Select</code>指定查询哪些列的数据</li><li><code>column</code>指定列名</li><li><code>*</code>号代表查询所有列</li><li><code>From</code>指定查询哪张表</li><li><code>DISTINCT</code>可选，指显示结果时，是否剔除重复数据</li></ul><p>选择指定列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> <span class="keyword">member</span>;</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/7VHLGFI5Id0KgR" alt="61-27"></p><p>加入限制条件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 会同时过滤不满足条件的和 <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65953018d49f2.png" alt="61-28.png"></p><p>去重查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">distinct</span> e_date <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在select语句中可使用表达式对查询的列进行运算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT *|&#123;column1｜expression, column2｜expression，..&#125; FROM     table;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age,age<span class="operator">+</span><span class="number">10</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span> age<span class="operator">+</span><span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>     <span class="number">40</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span>     <span class="number">34</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>     <span class="number">27</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在select语句中可使用as语句<code>SELECT column as 别名 from 表名;</code> ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age,age<span class="operator">+</span><span class="number">10</span><span class="operator">*</span><span class="number">100</span><span class="operator">+</span>math<span class="operator">*</span><span class="number">1000</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span> age<span class="operator">+</span><span class="number">10</span><span class="operator">*</span><span class="number">100</span><span class="operator">+</span>math<span class="operator">*</span><span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------------------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>                <span class="number">60030</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span>                 <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>               <span class="number">101020</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>                <span class="number">62017</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>                 <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age,age<span class="operator">+</span><span class="number">10</span><span class="operator">*</span><span class="number">100</span><span class="operator">+</span>math<span class="operator">*</span><span class="number">1000</span> <span class="keyword">as</span> total <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span> total  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>  <span class="number">60030</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span> <span class="number">101020</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">62017</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在<code>where</code>子句中常用的运算符：</p><p><img src="https://bu.dusays.com/2024/01/03/6595421561e06.png" alt="61-29.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">25</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">17</span>,<span class="number">30</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">17</span>,<span class="number">60</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">17</span>,<span class="number">60</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>模糊查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%i&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%i__&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><code>is NULL</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id <span class="keyword">is</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+------+------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>错误用法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><code>order by</code>排序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>调整升降序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>使用<code>limit</code>限制显示行数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span> limit <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span> limit <span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><code>offset</code>选项，偏移量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span> limit <span class="number">3</span> <span class="keyword">offset</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai  <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+---------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h2><p>数据完整性是为了保证插入到数据库中的数据是正确的，它防止了用户可能的输入错误。</p><p>数据完整性主要分为以下三类：</p><ul><li>实体完整性：规定表的一行（即每一条记录）在表中是唯一的实体。实体完整性通过表的主键来实现。</li><li>域完整性：指数据库表的列（即字段）必须符合某种特定的数据类型或约束。比如NOT NULL。</li><li>参照完整性：<ul><li>保证一个表的外键和另一个表的主键对应。</li><li>参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li></ul></li></ul><p>定义表的约束</p><ul><li>定义主键约束<ul><li>primary key:不允许为空，不允许重复</li><li>可以区分两条记录的唯一性</li><li>删除主键：<code>alter table tablename drop primary key;</code> </li></ul></li><li>定义主键自动增长<ul><li>auto_increment</li></ul></li><li>定义唯一约束<ul><li>unique</li></ul></li><li>定义非空约束<ul><li>not null</li></ul></li><li>定义外键约束<ul><li>constraint ordersid_FK foreign key(ordersid) references orders(id)</li></ul></li></ul><h2 id="多表设计、查询进阶"><a href="#多表设计、查询进阶" class="headerlink" title="多表设计、查询进阶"></a>多表设计、查询进阶</h2><p>多表设计：一对多、多对多、一对一。（避免数据的冗余）</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/plm1uS5SjFJSNa" alt="61-30"></p><p><img src="https://bu.dusays.com/2024/01/06/65996c38becd4.png" alt="61-31.png"></p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/9hU_UtDsVsooy-" alt="61-32"></p><p>再设计一个表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> customer(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id <span class="type">int</span> auto_increment,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> age <span class="type">int</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">primary</span> key(id));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><p>过程略。结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span>    <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> customer <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `customer` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">6</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>再设计一个表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> order_table(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> order_id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> price <span class="type">float</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> user_id <span class="type">int</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">foreign</span> key(user_id) <span class="keyword">references</span> customer(id));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.04</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_akashi <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> customer         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">member</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> order_table;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field    <span class="operator">|</span> Type     <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> order_id <span class="operator">|</span> <span class="type">int</span>      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name     <span class="operator">|</span> <span class="type">char</span>(<span class="number">20</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> price    <span class="operator">|</span> <span class="type">float</span>    <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_id  <span class="operator">|</span> <span class="type">int</span>      <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>插入相关联的记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_table;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> order_table <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;shanzi&#x27;</span>,<span class="number">520</span>,<span class="number">3</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_table;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> order_id <span class="operator">|</span> name   <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------+-------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> order_table <span class="keyword">values</span>(<span class="number">12</span>,<span class="string">&#x27;Alcohol Pads&#x27;</span>,<span class="number">5</span>,<span class="number">4</span>);</span><br><span class="line">ERROR <span class="number">1452</span> (<span class="number">23000</span>): Cannot <span class="keyword">add</span> <span class="keyword">or</span> <span class="keyword">update</span> a child <span class="type">row</span>: a <span class="keyword">foreign</span> key <span class="keyword">constraint</span> fails (`akashi`.`order_table`, <span class="keyword">CONSTRAINT</span> `order_table_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`user_id`) <span class="keyword">REFERENCES</span> `customer` (`id`))</span><br></pre></td></tr></table></figure><p>此时，不能删除 ayaka ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> customer <span class="keyword">where</span> id<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">ERROR <span class="number">1451</span> (<span class="number">23000</span>): Cannot <span class="keyword">delete</span> <span class="keyword">or</span> <span class="keyword">update</span> a parent <span class="type">row</span>: a <span class="keyword">foreign</span> key <span class="keyword">constraint</span> fails (`akashi`.`order_table`, <span class="keyword">CONSTRAINT</span> `order_table_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`user_id`) <span class="keyword">REFERENCES</span> `customer` (`id`))</span><br></pre></td></tr></table></figure><p><strong>DQL数据查询语言</strong></p><ul><li>连接查询：交叉连接、内连接、外连接</li><li>联合查询</li><li>报表查询</li></ul><p>连接查询的 from 子句的连接语法格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Select *</span><br><span class="line">from TABLE1 join_type TABLE2  [on (join_condition)]</span><br><span class="line">                              [where (query_condition)]</span><br></pre></td></tr></table></figure><p>其中，TABLE1 和 TABLE2 表示参与连接操作的表，TABLE1 为左表，TABLE2 为右表。on 子句设定连接条件，where 子句设定查询条件，join_type 表示连接类型。</p><p>交叉连接（cross join），不带on子句，返回连接表中所有数据行的笛卡尔积：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_table;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer <span class="keyword">cross</span> <span class="keyword">join</span> order_table;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>内连接（inner join），返回连接表中符合连接条件及查询条件的数据行。</p><p>内连接查询：</p><ul><li>显式内连接：使用<code>inner join</code>关键字，在<code>on</code>子句中设定连接条件。</li><li>隐式内连接：不包含<code>inner join</code>关键字和<code>on</code>关键字，在<code>where</code>子句中设定连接条件。</li></ul><p>显式内连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer <span class="keyword">inner</span> <span class="keyword">join</span> order_table <span class="keyword">on</span> customer.id<span class="operator">=</span>order_table.user_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer <span class="keyword">as</span> c <span class="keyword">inner</span> <span class="keyword">join</span> order_table <span class="keyword">as</span> o <span class="keyword">on</span> c.id<span class="operator">=</span>o.user_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>隐式内连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer,order_table <span class="keyword">where</span> customer.id<span class="operator">=</span>order_table.user_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>复制一个 table（包含数据）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> customer_tmp <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer;</span><br><span class="line">Query OK, <span class="number">4</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line">Records: <span class="number">4</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> customer_tmp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0</span>       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer_tmp;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>复制一个 table（不包含数据）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> customer_tmp_like <span class="keyword">like</span> customer;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> customer_tmp_like;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer_tmp_like;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>为（已有的）customer_tmp 添加主键：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> customer_tmp modify id <span class="type">int</span> <span class="keyword">primary</span> key;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.07</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> customer_tmp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>现有表如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_akashi  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> customer          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp_like <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">member</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table_tmp   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> order_table_tmp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span>           <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                                                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> order_table_tmp <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `order_table_tmp` (</span><br><span class="line">  `order_id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `price` <span class="type">float</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `user_id` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`order_id`),</span><br><span class="line">  KEY `user_id` (`user_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> order_table_tmp;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field    <span class="operator">|</span> Type     <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> order_id <span class="operator">|</span> <span class="type">int</span>      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name     <span class="operator">|</span> <span class="type">char</span>(<span class="number">20</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> price    <span class="operator">|</span> <span class="type">float</span>    <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_id  <span class="operator">|</span> <span class="type">int</span>      <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>对 order_table_tmp 作外键约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> order_table_tmp <span class="keyword">add</span> <span class="keyword">foreign</span> key(user_id) <span class="keyword">references</span> customer_tmp(id);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.07</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> order_table_tmp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span>           <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                                                                                                                                                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> order_table_tmp <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `order_table_tmp` (</span><br><span class="line">  `order_id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `price` <span class="type">float</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `user_id` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`order_id`),</span><br><span class="line">  KEY `user_id` (`user_id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `order_table_tmp_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`user_id`) <span class="keyword">REFERENCES</span> `customer_tmp` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>（？）如果想修改外键名字，可以先删除外键约束，然后再新建。</p><p>外连接：分为左外连接（left outer join）、右外连接（right outer join）。与内连接不同的是，外连接不仅返回连接表中符合连接条件及查询条件的数据行，也返回左表（左外连接时）或右表（右外连接时）中仅符合查询条件但不符合连接条件的数据行。</p><p>左外连接（left outer join）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_table;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer <span class="keyword">as</span> c <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> order_table <span class="keyword">as</span> o <span class="keyword">on</span> c.id<span class="operator">=</span>o.user_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span>  <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span>  <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>外连接的时候，必须要加上连接条件 on .</p><p>追加限制：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer <span class="keyword">as</span> c <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> order_table <span class="keyword">as</span> o <span class="keyword">on</span> c.id<span class="operator">=</span>o.user_id <span class="keyword">where</span> o.order_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>右外连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer <span class="keyword">as</span> c <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> order_table <span class="keyword">as</span> o</span><br><span class="line"><span class="keyword">on</span> c.id<span class="operator">=</span>o.user_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>这种查询并不要求左表和右表有外键约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer <span class="keyword">as</span> c <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> <span class="keyword">member</span> <span class="keyword">as</span> m <span class="keyword">on</span> c.id<span class="operator">=</span>m.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field  <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> math   <span class="operator">|</span> <span class="type">float</span>       <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> e_date <span class="operator">|</span> datetime    <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p><strong>子查询</strong>：也叫“嵌套查询”，是指在where子句或from子句中又嵌入select查询语句（一般写在where子句）。</p><p>【练习】查询“郭靖”的所有订单信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> customer_id<span class="operator">=</span>(<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> customer <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%郭靖%&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>联合查询</strong>：合并两条查询语句的查询结果，去掉其中的重复数据行，然后返回没有重复数据行的查询结果。联合查询使用<code>union</code>关键字。例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> price<span class="operator">&gt;</span><span class="number">100</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> customer_id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span>(id,name,age,math) <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;huohuo&#x27;</span>,<span class="number">14</span>,<span class="number">71</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo    <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">19</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> math<span class="operator">&gt;</span><span class="number">60</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo  <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+---------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">19</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> math<span class="operator">&gt;</span><span class="number">60</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo    <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>其效果等价于：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">19</span> <span class="keyword">or</span> math<span class="operator">&gt;</span><span class="number">60</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo    <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>加<code>all</code>，不去重：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">19</span> <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> math<span class="operator">&gt;</span><span class="number">60</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo    <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>报表查询</strong>，对数据行进行分组统计，其语法格式为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>… <span class="keyword">from</span>… [<span class="keyword">where</span>…] [<span class="keyword">group</span> <span class="keyword">by</span>… [<span class="keyword">having</span>… ]] [<span class="keyword">order</span> <span class="keyword">by</span>… ] </span><br></pre></td></tr></table></figure><p>其中<code>group by</code>子句指定按照哪些字段分组，<code>having</code>子句设定分组查询条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo    <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai        <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi  <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi     <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">group</span> <span class="keyword">by</span> age;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在报表查询中可以使用SQL函数</p><ul><li><code>count()</code> 计数 </li><li><code>sum()</code> 求和  </li><li><code>avg()</code> 求平均值</li><li><code>max()</code> 最大值</li><li><code>min()</code> 最小值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(age),age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">group</span> <span class="keyword">by</span> age;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(age) <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">min</span>(math) <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">min</span>(math) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">59</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">sum</span>(age),<span class="built_in">min</span>(math) <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">sum</span>(age) <span class="operator">|</span> <span class="built_in">min</span>(math) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">320</span> <span class="operator">|</span>        <span class="number">59</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><code>having</code>用法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(age),age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">having</span> age<span class="operator">&lt;</span><span class="number">22</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(age) <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(age),age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">having</span> <span class="built_in">count</span>(age)<span class="operator">&gt;</span><span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(age) <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="数据的备份与恢复"><a href="#数据的备份与恢复" class="headerlink" title="数据的备份与恢复"></a>数据的备份与恢复</h2><p>在此之前： <a href="https://stackoverflow.com/questions/39281594/error-1698-28000-access-denied-for-user-rootlocalhost">https://stackoverflow.com/questions/39281594/error-1698-28000-access-denied-for-user-rootlocalhost</a></p><p><strong>备份</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p akashi&gt;akashi.sql</span><br></pre></td></tr></table></figure><p>备份得到的文件<code>akashi.sql</code>可以用vim打开查看。</p><p>目前为止的备份文件：<a href="https://drive.google.com/file/d/1oXosO_shXMNEs2S1Ey1fi8aQHkkWbgfh/view?usp=drive_link">Google Drive文件分享</a></p><p><strong>恢复</strong>：</p><p>在此之前，akashi 库已被删除：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> akashi             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> database akashi;</span><br><span class="line">Query OK, <span class="number">6</span> <span class="keyword">rows</span> affected (<span class="number">0.06</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>为了恢复 akashi 库，需要先进行如下准备：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database akashi;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> akashi             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> use akashi;</span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>然后在命令行中执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p akashi&lt;akashi.sql</span><br></pre></td></tr></table></figure><p>即可恢复 akashi 库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_akashi  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> customer          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp_like <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">member</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table_tmp   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>备份原理：insert</p><ul><li>通过协议连接到 MySQL数据库，将需要备份的数据查询出来并转换成对应的insert语句，当我们需要还原这些数据时，只要执行这些 insert 语句，即可将对应的数据还原</li></ul><h2 id="数据库编程"><a href="#数据库编程" class="headerlink" title="数据库编程"></a>数据库编程</h2><p>文档资料：</p><ul><li><a href="https://dev.mysql.com/doc/">https://dev.mysql.com/doc/</a></li><li><a href="https://downloads.mysql.com/docs/c-api-8.2-en.a4.pdf">https://downloads.mysql.com/docs/c-api-8.2-en.a4.pdf</a></li></ul><p>查看 port ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~$ cd /etc/mysql</span><br><span class="line">wanko@wanko:/etc/mysql$ ll</span><br><span class="line">total 40</span><br><span class="line">drwxr-xr-x   4 root root  4096  1月  1 22:05 ./</span><br><span class="line">drwxr-xr-x 129 root root 12288  1月  9 17:15 ../</span><br><span class="line">drwxr-xr-x   2 root root  4096  1月  1 22:05 conf.d/</span><br><span class="line">-rw-------   1 root root   317  1月  1 22:05 debian.cnf</span><br><span class="line">-rwxr-xr-x   1 root root   120 10月 26 01:34 debian-start*</span><br><span class="line">lrwxrwxrwx   1 root root    24  1月  1 22:05 my.cnf -&gt; /etc/alternatives/my.cnf</span><br><span class="line">-rw-r--r--   1 root root   839 10月 20  2020 my.cnf.fallback</span><br><span class="line">-rw-r--r--   1 root root   682  6月 15  2023 mysql.cnf</span><br><span class="line">drwxr-xr-x   2 root root  4096  1月  1 22:05 mysql.conf.d/</span><br><span class="line">wanko@wanko:/etc/mysql$ cd mysql.conf.d/</span><br><span class="line">wanko@wanko:/etc/mysql/mysql.conf.d$ ll</span><br><span class="line">total 16</span><br><span class="line">drwxr-xr-x 2 root root 4096  1月  1 22:05 ./</span><br><span class="line">drwxr-xr-x 4 root root 4096  1月  1 22:05 ../</span><br><span class="line">-rw-r--r-- 1 root root  132  6月 15  2023 mysql.cnf</span><br><span class="line">-rw-r--r-- 1 root root 2220  6月 15  2023 mysqld.cnf</span><br><span class="line">wanko@wanko:/etc/mysql/mysql.conf.d$ sudo vim mysqld.cnf</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/qGu0SDZW-pkAcr" alt="61-33"></p><p>初学关注：</p><ul><li><code>mysql_real_connect()</code></li><li><code>mysql_query()</code></li><li><code>mysql_store_result()</code></li><li><code>mysql_num_rows()</code></li></ul><p>安装 libmysqlclient-dev ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libmysqlclient-dev</span><br></pre></td></tr></table></figure><p>（在某些情况下 linux 真的比 Windows 方便许多，令人感叹）</p><p>写一段用于查询的 C 程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql/mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error args\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MYSQL* conn;</span><br><span class="line">    MYSQL_RES* res;</span><br><span class="line">    MYSQL_ROW row;</span><br><span class="line">    <span class="type">char</span>* server = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* password = <span class="string">&quot;&quot;</span>; <span class="comment">// input passwd, use &quot;&quot; if there isn&#x27;t a password</span></span><br><span class="line">    <span class="type">char</span>* database = <span class="string">&quot;akashi&quot;</span>; <span class="comment">// name of the database to access</span></span><br><span class="line">    <span class="type">char</span> query[<span class="number">300</span>] = <span class="string">&quot;select * from member where name = &#x27;&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> queryRet;</span><br><span class="line">    <span class="built_in">sprintf</span>(query, <span class="string">&quot;%s%s%s&quot;</span>, query, argv[<span class="number">1</span>], <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    <span class="comment">/* strcpy(query, &quot;select * from www&quot;); */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Print the query statement before output */</span></span><br><span class="line">    <span class="built_in">puts</span>(query);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    conn = mysql_init(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(!conn)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;MySQL init failed.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Connect to the database, continue if successful */</span></span><br><span class="line">    <span class="keyword">if</span>(!mysql_real_connect(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error connecting to database: %s\n&quot;</span>, mysql_error(conn));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;MySQL Connected.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Passing SQL Statements to MySQL</span></span><br><span class="line">    queryRet = mysql_query(conn, query);</span><br><span class="line">    <span class="keyword">if</span>(queryRet)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error making query: %s\n&quot;</span>, mysql_error(conn));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        res = mysql_store_result(conn);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;mysql_store_result = %lu\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>)mysql_num_rows(res));</span><br><span class="line">        <span class="comment">/* alternative way of the two lines above */</span></span><br><span class="line">        <span class="comment">/* res = mysql_use_result(conn); */</span></span><br><span class="line"></span><br><span class="line">        row = mysql_fetch_row(res);</span><br><span class="line">        <span class="keyword">if</span>(row == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No data found.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                <span class="comment">// print an entire line of content every single loop</span></span><br><span class="line">                <span class="keyword">for</span>(queryRet = <span class="number">0</span>; queryRet &lt; mysql_num_fields(res); queryRet++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%8s &quot;</span>, row[queryRet]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">while</span>((row = mysql_fetch_row(res)) != <span class="literal">NULL</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mysql_free_result(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysql_close(conn);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译（可能会跳一些 warning 不过不影响大局）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc query.c -lmysqlclient</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode/example_mysql$ ./a.out lumine</span><br><span class="line">select * from member where name = &#x27;lumine&#x27;</span><br><span class="line">MySQL Connected.</span><br><span class="line">mysql_store_result = 1</span><br><span class="line">       4   lumine       17       61 1999-10-10 10:10:10</span><br></pre></td></tr></table></figure><p>来看一下是否和 akashi 库中的表 member 数据吻合：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo    <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai        <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi  <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi     <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>写一个用来插入的程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql/mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span>&#123;</span><br><span class="line">    MYSQL *conn;</span><br><span class="line">    <span class="type">char</span>* server = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* password = <span class="string">&quot;&quot;</span>; <span class="comment">// input passwd, use &quot;&quot; if there isn&#x27;t a password</span></span><br><span class="line">    <span class="type">char</span>* database = <span class="string">&quot;akashi&quot;</span>; <span class="comment">// name of the database to access</span></span><br><span class="line">    <span class="type">char</span> query[<span class="number">300</span>] = <span class="string">&quot;insert into member (id, name, age, math) values (8,&#x27;Kafka&#x27;,28,99)&quot;</span>;</span><br><span class="line">    <span class="type">int</span> queryResult;</span><br><span class="line"></span><br><span class="line">    conn = mysql_init(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!mysql_real_connect(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error connecting to database: %s\n&quot;</span>, mysql_error(conn));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;MySQL Connected.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    queryResult = mysql_query(conn, query);</span><br><span class="line">    <span class="keyword">if</span>(queryResult)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error making querry: %s\n&quot;</span>, mysql_error(conn));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;insert succeed.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysql_close(conn);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的代码之后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo    <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai        <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi  <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi     <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka     <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>写一个用来 update 的程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql/mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error args\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MYSQL* conn;</span><br><span class="line">    MYSQL_RES* res;</span><br><span class="line">    MYSQL_ROW row;</span><br><span class="line">    <span class="type">char</span>* server = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* password = <span class="string">&quot;&quot;</span>; <span class="comment">// input passwd, use &quot;&quot; if there isn&#x27;t a password</span></span><br><span class="line">    <span class="type">char</span>* database = <span class="string">&quot;akashi&quot;</span>; <span class="comment">// name of the database to access</span></span><br><span class="line">    <span class="type">char</span> query[<span class="number">300</span>] = <span class="string">&quot;update member set name = &#x27;&quot;</span>;</span><br><span class="line">    <span class="built_in">sprintf</span>(query, <span class="string">&quot;%s%s%s&quot;</span>, query, argv[<span class="number">1</span>], <span class="string">&quot;&#x27; where id = 1&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(query);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> queryResult;</span><br><span class="line">    conn = mysql_init(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!mysql_real_connect(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error connecting to database: %s\n&quot;</span>, mysql_error(conn));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;MySQL Connected.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    queryResult = mysql_query(conn, query);</span><br><span class="line">    <span class="keyword">if</span>(queryResult)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error making query: %s\n&quot;</span>, mysql_error(conn));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> ret = mysql_affected_rows(conn);</span><br><span class="line">        <span class="keyword">if</span>(ret)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;update succeed.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;update failed, mysql_affected_rows: %d\n&quot;</span>, ret);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysql_close(conn);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode/example_mysql$ ./a.out Natasha</span><br><span class="line">update member set name = &#x27;Natasha&#x27; where id = 1</span><br><span class="line">MySQL Connected.</span><br><span class="line">update succeed.</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h2 id="事务（transaction）"><a href="#事务（transaction）" class="headerlink" title="事务（transaction）"></a>事务（transaction）</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>考虑一个常见操作，转账。</p><p>现在 A 要给 B 转账 1000 元。这个过程可分两步：</p><ol><li>A 的账户减去 1000 元</li><li>B 的账户增加 1000 元</li><li>以上两步都完成时，“转账”才算完成</li></ol><p>但是，现实世界有各种突发情况。若 A 的账户减去 1000 元后，由于某些故障，如系统崩坏、网络故障等，转账操作未完成。此时，A 账户少了 1000 元，但 B 账户的余额没变——即 A 平白无故少了 1000 元。</p><p>因此要求，这些操作要么全发生，要么由于故障而全不发生。</p><p>构成单一逻辑工作单元的操作集合，称为<strong>事务（transaction）</strong>。事务是一组原子性的 SQL 查询，或者说一个独立的工作单元。</p><p>即使有故障，数据库系统也必须保证事务的正确执行——要么执行整个事务，要么属于该事务的操作一个也不执行。</p><h3 id="性质——ACID"><a href="#性质——ACID" class="headerlink" title="性质——ACID"></a>性质——ACID</h3><p>原子性（Atomicity）。</p><p>一致性（Consistency）：当一个事务开始执行时，系统处于一种合法的状态，而当事务成功提交后，系统将转移到另一个合法的状态。具体来说，一致性要求事务在执行过程中必须遵循预定义的规则和约束，以保持数据的完整性。</p><p>隔离性（Isolation）：尽管多个事务可能并发执行，但系统保证，对于任何一对事务 i 和 j ，在 i 看来，j 要么在 i 开始之前已经完成，要么在 i 完成之后才开始执行。因此，每个事务都感觉不到系统中有其他事务在并发地执行。即：一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的。<br>做不到 100% 隔离，与隔离级别有关。</p><p>持久性（Durability）：一个事务成功完成后，对数据库中数据的修改将被永久保存，即使发生系统故障或崩溃，数据也不会丢失。</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>开启一个事务，标记事务的起点：<code>START TRANSACTION</code> / <code>BEGIN</code></p><p>提交事务，表示事务成功被执行：<code>COMMIT</code></p><p>回滚事务，回滚到初始状态或者回滚点：<code>ROLL BACK</code></p><p>回滚点：<code>SAVEPOINT</code></p><p>删除回滚点：<code>RELEASE SAVEPOINT</code></p><p>设置隔离级别：<code>SET  TRANSACTION</code></p><center><p style="color: red;">- - - - - 隔离性的体现 - - - - -</p></center><p>最开始的表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在终端 1 操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>终端 2（与此同时，另一边 …）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>终端 1 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> age <span class="operator">=</span> <span class="number">17</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>然后在终端 2 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>我们发现，终端 2 中尚未同步终端 1 的修改，这是因为终端 1 的事务尚未提交。体现了隔离性。</p><center><p style="color: red;">- - - - - 隔离性的体现 END - - - - -</p></center><p>终端 1 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>终端 2 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>此时在终端 1 查看数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在终端 2 查看数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>两个查看结果相同了。</p><center><p style="color: red;">- - - - - rollback - - - - -</p></center><p>终端 1 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> age <span class="operator">=</span> <span class="number">15</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">rollback</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>huohuo 的 age 又回退到事务开始之前的状态。</p><p>此时再 commit ，查看数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><center><p style="color: red;">- - - - - rollback _ END - - - - -</p></center><p><img src="https://upload-bbs.miyoushe.com/upload/2024/01/19/391084249/5f6c075ffef47029c023996043ffe120_5272792836660250826.jpg" alt="61-34"></p><center><p style="color: red;">- - - - - 回滚点 - - - - -</p></center><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> age <span class="operator">=</span> <span class="number">15</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>设置回滚点：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">savepoint</span> sq1;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>再次修改 <del>（身材虽然欧巴桑，内心依旧纤细少女的霍霍）</del>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> age <span class="operator">=</span> <span class="number">51</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">51</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><del>（因为被尾巴大爷喂了好果子吃，所以要执行）</del> 回滚：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">rollback</span> <span class="keyword">to</span> sq1;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>commit 之后再看数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>可以发现回到了之前设置的回滚点处。</p><center><p style="color: red;">- - - - - 回滚点END - - - - -</p></center><p>注意事项：</p><ul><li><code>START TRANSACTION</code>标志事务的开始，在 MySQL 中可以用<code>set autocommit = 0</code>替代。</li><li>结束事务的情况只有两种：<ul><li><code>COMMIT</code>：表示事务成功被执行，结束事务。</li><li>发生故障：结束事务，不管有没有设置回滚点，都会回到事务开启前的状态。</li></ul></li><li><code>ROLLBACK</code>：不表示发生故障, 它也是一个数据库操作，属于事务的一部分。表示回滚事务，回滚到事务开启前的状态，或者中间的某个回滚点。要想<code>rollback</code>生效，必须要<code>commit</code>。</li></ul><h2 id="并发产生的问题"><a href="#并发产生的问题" class="headerlink" title="并发产生的问题"></a>并发产生的问题</h2><p>一、脏写</p><p>脏写是指当多个事务并发写同一数据时，先执行的事务所写的数据会被后写的数据覆盖。</p><p><img src="https://bu.dusays.com/2024/01/21/65ac05bd6844f.png" alt="61-35.png"></p><p>脏写会导致更新丢失。就好像先提交的事务根本没有执行一样。</p><p>二、脏读</p><p>若事务A向数据库写数据，但 A 还没提交或终止，另一个事务 B 就读到了事务A写入数据库的数据，这个现象称为脏读。</p><p><img src="https://bu.dusays.com/2024/01/21/65aceb08b60f0.png" alt="61-36.png"></p><center><p style="color: red;">- - - - - AIGC - - - - -</p></center><p><strong>问：</strong><br>什么是数据库的 “脏读“ 现象？请举例</p><p><strong>答：</strong><br>“脏读” 是数据库中一种并发控制的问题，指的是一个事务读取了另一个事务尚未提交的数据。当一个事务读取了另一事务的未提交数据，而后者最终回滚，导致读取的数据是无效的，这就是脏读。</p><p>举个例子：</p><p>假设有两个事务 A 和 B。</p><ol><li>事务 A 开始，读取某一行数据。</li><li>事务 B 修改了这一行数据，但尚未提交。</li><li>事务 A 继续读取同一行数据，此时它读取到了事务 B 修改但未提交的数据，即脏数据。</li><li>事务 B 回滚，因为某种原因导致事务 B 的修改被撤销。</li><li>事务 A 最终得到的数据是基于已经回滚的事务 B 的修改，而这个修改实际上是无效的。</li></ol><p>这就是脏读的典型情况，因为事务 A 读取了未提交的、后来被回滚的数据。脏读可能导致不一致的查询结果，因为读取到的数据可能并不代表数据库的真实状态。为了避免脏读，通常使用事务隔离级别来控制事务之间的可见性。</p><p><strong>问：</strong><br>事务B 的修改不应该被隔离吗？为什么 A 会读到 B 未提交的数据？</p><p><strong>答：</strong><br>对于事务的隔离级别有不同的设定，而脏读的发生与事务隔离级别有关。在数据库中，有四种标准的事务隔离级别，从低到高分别是：读未提交（Read Uncommitted）、读提交（Read Committed）、可重复读（Repeatable Read）和串行化（Serializable）。</p><ol><li>读未提交（Read Uncommitted）：允许事务读取其他事务尚未提交的数据，因此可能发生脏读。</li><li>读提交（Read Committed）：保证一个事务提交后才能被其他事务读取，避免了脏读。但在并发环境下，仍可能发生不可重复读和幻读。</li><li>可重复读（Repeatable Read）：保证一个事务在执行期间多次读取同一行数据时，能够得到一致的结果。防止了脏读和不可重复读，但仍可能发生幻读。</li><li>串行化（Serializable）：最高的隔离级别，通过完全锁定读取的数据，确保事务的完全隔离。避免了脏读、不可重复读和幻读，但也降低了并发性能。</li></ol><p>在读未提交的隔离级别下，事务 A 可以读取事务 B 尚未提交的数据，导致脏读。在实际应用中，通常会选择适当的隔离级别，权衡事务的隔离和性能需求。</p><center><p style="color: red;">- - - - - AIGC END - - - - -</p></center><p>三、不可重复读</p><p>一个事务有对同一个数据项的多次读取，但是在某前后两次读取之间，另一个事务更新该数据项，并且<strong>提交了</strong>。在后一次读取时，感知到了提交的更新。称为不可重复读。</p><p><img src="https://bu.dusays.com/2024/01/21/65acf29ee577b.png" alt="61-37.png"></p><center><p style="color: red;">- - - - - AIGC - - - - -</p></center><p><strong>问：</strong><br>什么是数据库的 不可重复读？</p><p><strong>答：</strong><br>不可重复读是数据库中的一种并发控制问题，它指的是在同一个事务内，由于其他事务的修改，导致事务中多次读取同一行数据时，得到的结果不一致。</p><p>举个例子：</p><p>假设有两个事务 A 和 B。</p><ol><li>事务 A 开始，读取某一行数据。</li><li>事务 B 修改了这一行数据，并提交。</li><li>事务 A 再次读取同一行数据，此时它得到的结果与第一次读取时不一样，因为在两次读取之间，事务 B 进行了修改。</li></ol><p>这种情况就是不可重复读，因为同一个事务内的两次读取操作得到的数据不一致。不可重复读可能导致事务中的操作基于不一致的数据，从而产生意料之外的结果。</p><p>为了解决不可重复读的问题，数据库系统通常提供不同的事务隔离级别。在可重复读（Repeatable Read）隔离级别下，数据库系统会确保在同一个事务内多次读取同一行数据时，得到的结果保持一致，不受其他事务的影响。</p><center><p style="color: red;">- - - - - AIGC END - - - - -</p></center><p>四、幻读</p><p>一个事务需要进行前后两次统计，在这两次统计期间，另一个事务插入了新的符合统计条件的记录，并且提交了。导致前后两次统计的数据不一致。这种现象，我们称之为幻读。</p><p><img src="https://bu.dusays.com/2024/01/21/65acf96252fed.png" alt="61-38.png"></p><center><p style="color: red;">- - - - - AIGC - - - - -</p></center><p><strong>问：</strong><br>什么是数据库的 幻读？</p><p><strong>答：</strong><br>幻读是数据库中的一种并发控制问题，它指的是在同一个事务中，由于其他事务的插入或删除操作，导致事务中的查询结果集合发生变化，产生了额外的行，就像出现了幻觉一样。</p><p>举个例子：</p><p>假设有两个事务 A 和 B。</p><ol><li>事务 A 开始，执行一个范围查询，得到一定的结果集合。</li><li>事务 B 在此期间插入了新的数据，符合事务 A 的查询条件。</li><li>事务 A 再次执行相同的范围查询，但这次得到的结果集合比第一次查询时更大，因为事务 B 插入的新数据导致了额外的行出现。</li></ol><p>为了解决幻读的问题，数据库系统通常提供不同的事务隔离级别。在串行化（Serializable）隔离级别下，数据库系统会确保一个事务中的查询结果是一致的，不受其他事务的插入或删除操作的影响。然而，串行化隔离级别也可能降低并发性能。在实际应用中，选择适当的隔离级别需要权衡一致性和性能的需求。</p><center><p style="color: red;">- - - - - AIGC END - - - - -</p></center><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p>SQL 标准规定了四种隔离级别，分别为（隔离性依次增高）：</p><ul><li><strong>读未提交（read uncommitted）</strong>：允许读取未提交的数据。</li><li><strong>读已提交（read committed）</strong>：只允许读取已提交的数据，但不要求可重复读。比如，在事务两次读取一个数据项期间，另一个事务更新了该数据项并提交。</li><li><strong>可重复读（repeatable read）</strong>：只允许读取已提交的数据，且在一个事务两次读取一个数据项期间，其他事务不得更新该数据。但该事务不要求与其他事务可串行化。比如，在两次统计查询中，另一个事务可以插入一些记录，这些记录若有符合查询条件的，就会导致幻读。</li><li><strong>可串行化（serializable）</strong>：看起来事务就好像是串行执行的一样。一个事务结束后，另一个事务才开始执行。</li></ul><table>  <tbody>    <tr>      <td></td>      <td>脏写</td>      <td>脏读</td>      <td>不可重复读</td>      <td>幻读</td>    </tr>    <tr>      <td>读未提交</td>      <td>×</td>      <td>√</td>      <td>√</td>      <td>√</td>    </tr>    <tr>      <td>读已提交</td>      <td>×</td>      <td>×</td>      <td>√<br></td>      <td>√</td>    </tr>    <tr>      <td>可重复读<br></td>      <td>×</td>      <td>×</td>      <td>×</td>      <td>√</td>    </tr>    <tr>      <td>可串行化</td>      <td>×</td>      <td>×</td>      <td>×</td>      <td>×</td>    </tr>  </tbody>  <colgroup>    <col>    <col>    <col>    <col>    <col>  </colgroup></table><p><strong>以上所有隔离级别都不允许脏写（dirty write）</strong>，即：若一个数据项正在被一个尚未提交或中止的事务执行写操作，则其他事务不能对该数据项执行写操作。</p><p>查看当前隔离级别：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@session</span>.transaction_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@session</span>.transaction_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>设置当前隔离级别为读未提交：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> session transaction isolation level read uncommitted;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@session</span>.transaction_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@session</span>.transaction_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> READ<span class="operator">-</span>UNCOMMITTED                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>设置当前隔离级别为读已提交：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> session transaction isolation level read committed;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@session</span>.transaction_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@session</span>.transaction_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> READ<span class="operator">-</span>COMMITTED                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>设置当前隔离级别为可重复读：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> session transaction isolation level repeatable read;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@session</span>.transaction_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@session</span>.transaction_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>设置当前隔离级别为可串行化：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> session transaction isolation level serializable;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@session</span>.transaction_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@session</span>.transaction_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> SERIALIZABLE                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><center><p style="color: red";>- - - - - Presentation - - - - -</p></center><p>在 REPEATABLE-READ 下<strong>演示幻读现象</strong>：</p><p>terminal 1:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@session</span>.transaction_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@session</span>.transaction_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name        <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha     <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai      <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine      <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo      <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai          <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi       <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka       <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">9</span> <span class="operator">|</span> kongfupanda <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 2:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@session</span>.transaction_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@session</span>.transaction_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name        <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha     <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai      <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine      <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo      <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai          <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi       <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka       <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">9</span> <span class="operator">|</span> kongfupanda <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 1:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> (id, name, age) <span class="keyword">values</span>(<span class="number">10</span>, &quot;po&quot;, <span class="number">3</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name        <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha     <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai      <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine      <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo      <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai          <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi       <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka       <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">9</span> <span class="operator">|</span> kongfupanda <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span> po          <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>此时在 terminal 2 中，按道理应该是能读到 id 为 10 的记录，但是 terminal 2 显示如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name        <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha     <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai      <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine      <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo      <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai          <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi       <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka       <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">9</span> <span class="operator">|</span> kongfupanda <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>体现幻读的现象，terminal 2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> (id, name, age) <span class="keyword">values</span>(<span class="number">10</span>, &quot;po&quot;, <span class="number">3</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field  <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> math   <span class="operator">|</span> <span class="type">float</span>       <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> e_date <span class="operator">|</span> datetime    <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name        <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha     <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai      <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine      <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo      <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai          <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi       <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka       <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">9</span> <span class="operator">|</span> kongfupanda <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span> po          <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name        <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha     <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai      <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine      <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo      <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai          <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi       <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka       <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">9</span> <span class="operator">|</span> kongfupanda <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span> po          <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span> po          <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">13</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 1 之前插入的数据已经在了，只是刚才没有显式地显示出来。<br>另一种体现方式：如果 id 被设为主键，则在 terminal 2 中会无法插入。</p><center><p style="color: red";>- - - - - Presentation END - - - - -</p></center><p>下面简单展示一下可串行化。</p><p>terminal 1 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@session</span>.transaction_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@session</span>.transaction_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> SERIALIZABLE                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name        <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha     <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai      <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine      <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo      <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai          <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi       <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka       <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">9</span> <span class="operator">|</span> kongfupanda <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span> po          <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span> po          <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">13</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 2 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@session</span>.transaction_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@session</span>.transaction_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> SERIALIZABLE                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name        <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha     <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai      <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine      <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo      <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai          <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi       <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka       <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">9</span> <span class="operator">|</span> kongfupanda <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span> po          <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span> po          <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">13</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 1 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> age <span class="operator">=</span> <span class="number">4</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">ERROR <span class="number">1205</span> (HY000): Lock wait timeout exceeded; try restarting transaction</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<br>MySQL 支持 4 种隔离级别，默认为 RR（repeatable read），MySQL 的 RR 隔离级别，在一定程度上避免了幻读问题。<br>Oracle 只支持 read committed 和 serializable 两种隔离级别，默认为 read committed.</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h3><p>索引（Index）是帮助 MySQL 高效获取数据的数据结构。</p><p>示例（查找的快慢）：</p><p><img src="https://bu.dusays.com/2024/01/24/65b0f61a3423f.png" alt="61-39.png" title="id 是索引"></p><p>数据结构选择的参考维度：空间的连续性、时间复杂度、磁盘 IO 的次数、范围查找。</p><ul><li>顺序查找：遍历操作，时间复杂度是 O(N)，需要大块连续的空间。</li><li>二分查找：时间复杂度 O(logN)，需要大块连续的空间。</li><li>二叉树：时间复杂度 O(logN)，不需要连续的空间。但如果数据量比较大（如：百万级别），二叉树的高度会非常高，导致磁盘 IO 次数随之变多，而磁盘 IO 很慢。</li><li>哈希：时间复杂度 O(1). 哈希会有哈希冲突，会影响查找速度。哈希意味着无序。在 SQL 里常进行范围查找，而哈希是没有顺序的，故数据量大的时不能用哈希。</li><li>B树和B+树：见数据结构笔记。</li></ul><p>查看节点大小：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb_page_size&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name    <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> innodb_page_size <span class="operator">|</span> <span class="number">16384</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p>索引的分类：</p><ul><li>主键索引：以主键创建的索引</li><li>非主键索引（辅助索引）：普通索引、唯一索引、全文索引、组合索引</li></ul><h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><p>创建主键索引（创建表的时候，创建主键）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test1(id <span class="type">int</span>, age <span class="type">int</span>, <span class="keyword">primary</span> key(id));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>创建主键索引（表创建完之后，再创建主键）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test2;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test2 <span class="keyword">add</span> <span class="keyword">primary</span> key(id);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test2;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>主键特点：非空、唯一。</p><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><p>普通索引的创建（创建表的时候，创建普通索引）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test3(id <span class="type">int</span>, age <span class="type">int</span>, index idx_age(age));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.04</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test3;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>普通索引的创建（创建表之后，再创建普通索引）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test4(id <span class="type">int</span>, age <span class="type">int</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test4;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test4 <span class="keyword">add</span> index idx_age(age);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test4;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>在创建表之后，使用 create index 创建索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> index idx_id <span class="keyword">on</span> test4(id);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test4;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>唯一索引（创建方法和普通索引大同小异）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test3(id <span class="type">int</span>, age <span class="type">int</span>, <span class="keyword">unique</span> index idx_age(age));</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test4 <span class="keyword">add</span> <span class="keyword">unique</span> index idx_age(age);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index idx_id <span class="keyword">on</span> test4(id);</span><br></pre></td></tr></table></figure><h3 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h3><p>组合索引是由多个列一起组成的。</p><p>创建表之后再创建组合索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test5(id <span class="type">int</span>, age <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">20</span>), math <span class="type">int</span>, eng <span class="type">int</span>, <span class="keyword">primary</span> key(id));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test5;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> math  <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> eng   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test5 <span class="keyword">add</span> index idx_name_math_eng(name, math, eng);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test5;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> math  <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> eng   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> test5;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                                                                           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> test5 <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test5` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `math` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `eng` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `idx_name_math_eng` (`name`,`math`,`eng`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>也可以：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_name_math_eng <span class="keyword">on</span> test5(name, math, eng);</span><br></pre></td></tr></table></figure><p>显示表的索引情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> index <span class="keyword">from</span> test5;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+-------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> Non_unique <span class="operator">|</span> Key_name          <span class="operator">|</span> Seq_in_index <span class="operator">|</span> Column_name <span class="operator">|</span> <span class="keyword">Collation</span> <span class="operator">|</span> <span class="keyword">Cardinality</span> <span class="operator">|</span> Sub_part <span class="operator">|</span> Packed <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Index_type <span class="operator">|</span> Comment <span class="operator">|</span> Index_comment <span class="operator">|</span> Visible <span class="operator">|</span> Expression <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+-------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> test5 <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>           <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span> id          <span class="operator">|</span> A         <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span>      <span class="operator">|</span> BTREE      <span class="operator">|</span>         <span class="operator">|</span>               <span class="operator">|</span> YES     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test5 <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> idx_name_math_eng <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span> name        <span class="operator">|</span> A         <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span> YES  <span class="operator">|</span> BTREE      <span class="operator">|</span>         <span class="operator">|</span>               <span class="operator">|</span> YES     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test5 <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> idx_name_math_eng <span class="operator">|</span>            <span class="number">2</span> <span class="operator">|</span> math        <span class="operator">|</span> A         <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span> YES  <span class="operator">|</span> BTREE      <span class="operator">|</span>         <span class="operator">|</span>               <span class="operator">|</span> YES     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test5 <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> idx_name_math_eng <span class="operator">|</span>            <span class="number">3</span> <span class="operator">|</span> eng         <span class="operator">|</span> A         <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span> YES  <span class="operator">|</span> BTREE      <span class="operator">|</span>         <span class="operator">|</span>               <span class="operator">|</span> YES     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+-------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p>换一种打印方式（竖着看）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> index <span class="keyword">from</span> test5\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">        <span class="keyword">Table</span>: test5</span><br><span class="line">   Non_unique: <span class="number">0</span></span><br><span class="line">     Key_name: <span class="keyword">PRIMARY</span></span><br><span class="line"> Seq_in_index: <span class="number">1</span></span><br><span class="line">  Column_name: id</span><br><span class="line">    <span class="keyword">Collation</span>: A</span><br><span class="line">  <span class="keyword">Cardinality</span>: <span class="number">0</span></span><br><span class="line">     Sub_part: <span class="keyword">NULL</span></span><br><span class="line">       Packed: <span class="keyword">NULL</span></span><br><span class="line">         <span class="keyword">Null</span>: </span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment: </span><br><span class="line">Index_comment: </span><br><span class="line">      Visible: YES</span><br><span class="line">   Expression: <span class="keyword">NULL</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">2.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">        <span class="keyword">Table</span>: test5</span><br><span class="line">   Non_unique: <span class="number">1</span></span><br><span class="line">     Key_name: idx_name_math_eng</span><br><span class="line"> Seq_in_index: <span class="number">1</span></span><br><span class="line">  Column_name: name</span><br><span class="line">    <span class="keyword">Collation</span>: A</span><br><span class="line">  <span class="keyword">Cardinality</span>: <span class="number">0</span></span><br><span class="line">     Sub_part: <span class="keyword">NULL</span></span><br><span class="line">       Packed: <span class="keyword">NULL</span></span><br><span class="line">         <span class="keyword">Null</span>: YES</span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment: </span><br><span class="line">Index_comment: </span><br><span class="line">      Visible: YES</span><br><span class="line">   Expression: <span class="keyword">NULL</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">3.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">        <span class="keyword">Table</span>: test5</span><br><span class="line">   Non_unique: <span class="number">1</span></span><br><span class="line">     Key_name: idx_name_math_eng</span><br><span class="line"> Seq_in_index: <span class="number">2</span></span><br><span class="line">  Column_name: math</span><br><span class="line">    <span class="keyword">Collation</span>: A</span><br><span class="line">  <span class="keyword">Cardinality</span>: <span class="number">0</span></span><br><span class="line">     Sub_part: <span class="keyword">NULL</span></span><br><span class="line">       Packed: <span class="keyword">NULL</span></span><br><span class="line">         <span class="keyword">Null</span>: YES</span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment: </span><br><span class="line">Index_comment: </span><br><span class="line">      Visible: YES</span><br><span class="line">   Expression: <span class="keyword">NULL</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">4.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">        <span class="keyword">Table</span>: test5</span><br><span class="line">   Non_unique: <span class="number">1</span></span><br><span class="line">     Key_name: idx_name_math_eng</span><br><span class="line"> Seq_in_index: <span class="number">3</span></span><br><span class="line">  Column_name: eng</span><br><span class="line">    <span class="keyword">Collation</span>: A</span><br><span class="line">  <span class="keyword">Cardinality</span>: <span class="number">0</span></span><br><span class="line">     Sub_part: <span class="keyword">NULL</span></span><br><span class="line">       Packed: <span class="keyword">NULL</span></span><br><span class="line">         <span class="keyword">Null</span>: YES</span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment: </span><br><span class="line">Index_comment: </span><br><span class="line">      Visible: YES</span><br><span class="line">   Expression: <span class="keyword">NULL</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="索引的删除"><a href="#索引的删除" class="headerlink" title="索引的删除"></a>索引的删除</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name DROP INDEX index_name;</span><br><span class="line">DORP INDEX IndexName ON TableName;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test5;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> math  <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> eng   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test5 <span class="keyword">drop</span> index idx_name_math_eng;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test5;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> math  <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> eng   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test4;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> index idx_id <span class="keyword">on</span> test4;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test4;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="索引的好处和坏处"><a href="#索引的好处和坏处" class="headerlink" title="索引的好处和坏处"></a>索引的好处和坏处</h3><p>好处：<br>提高数据检索效率，降低数据库 IO 成本。</p><ol><li>查找</li><li>排序</li><li>分组</li><li>表的连接</li></ol><p>坏处</p><ol><li>额外占用空间。有时候索引占用的空间甚至比数据占用的空间还多。</li><li>降低更新表的速度。因为数据库不仅要更新数据，还要更新对应的索引信息。</li></ol><h3 id="组合索引的最左前缀"><a href="#组合索引的最左前缀" class="headerlink" title="组合索引的最左前缀"></a>组合索引的最左前缀</h3><p>大概理解一下，这个图示不是很好：</p><p><img src="https://bu.dusays.com/2024/01/25/65b1bce99c548.png" alt="61-40.png"></p><p>简单理解，其实就和结构体排序差不多。例如洛谷 P9472 ：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">mnode</span>&#123;</span><br><span class="line">    LL mcontent;</span><br><span class="line">    LL mindex;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> mnode&amp; v)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mcontent != v.mcontent)</span><br><span class="line">            <span class="keyword">return</span> mcontent &lt; v.mcontent;</span><br><span class="line">        <span class="keyword">else</span>    </span><br><span class="line">            <span class="keyword">if</span>(mcontent &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> mindex &lt; v.mindex;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">return</span> mindex &gt; v.mindex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;marray[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        LL x; </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;x);</span><br><span class="line">        marray[i].mcontent = x;</span><br><span class="line">        marray[i].mindex = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(marray+<span class="number">1</span>, marray+<span class="number">1</span>+n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,marray[i].mindex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MySQL-逻辑架构"><a href="#MySQL-逻辑架构" class="headerlink" title="MySQL 逻辑架构"></a>MySQL 逻辑架构</h2><p><img src="https://bu.dusays.com/2024/01/25/65b1c5360f6a2.png" alt="61-41.png"></p><p>Cache : 侧重读<br>Buffer : 侧重写</p><p><img src="https://s2.loli.net/2024/01/25/OPb3sD8hHC1TGXw.png" alt="61-42.png"></p><p>大体来说，MySQL 分为 Server 层和存储引擎层。</p><p>Server 层包括连接器、查询缓存、解析器、优化器和执行器等，涵盖了 MySQL 大多数核心服务功能。</p><p><strong>存储引擎层负责数据的存储和提取</strong>。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。</p><p>MySQL 是如何工作的？</p><ol><li><strong>连接器</strong><br>当你在客户端输入<code>mysql –u $user –p $pwd</code>连接 mysql 的时候，接待你的就是连接器。连接器的作用就是和客户端建立连接、获取权限、维持和管理连接。</li><li><strong>查询缓存</strong><br>建立连接后，就可以执行<code>select</code>语句了。首先 MySQL 会去查看查询缓存，看下之前是否已经执行过这条查询语句。如果命中缓存，就直接返回。否则就扔给解析器。</li><li><strong>解析器</strong><br>MySQL 需要知道你想做什么，因此我们就来到了解析器。解析器会做词法分析和语法分析。词法分析主要是分析每个词的含义，语法分析会判断你写的 SQL 语句是否满足 SQL 语法。</li><li><strong>优化器</strong><br>经过解析器，MySQL 就知道你想做什么了。但是在开始执行之前，还需要经过优化器的处理。优化器会优化你的 SQL 语句。生成最终的执行方案（execution plan）。然后进入执行器阶段。</li><li><strong>执行器</strong><br>执行器首先会判断你对这张表有没有相应的权限。如果没有，就报错。如果有，就调用相应的存储引擎接口，执行语句。然后将结果集返回给客户端。</li></ol><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>数据的存储和提取是由存储引擎负责的，它负责和文件系统打交道。</p><p>MySQL 的存储引擎是<strong>插件式</strong>的。不同的存储引擎支持不同的特性。</p><p>查看 MySQL 支持哪些存储引擎：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> ENGINES;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span><br><span class="line"><span class="operator">|</span> Engine             <span class="operator">|</span> Support <span class="operator">|</span> Comment                                                        <span class="operator">|</span> Transactions <span class="operator">|</span> XA   <span class="operator">|</span> Savepoints <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span><br><span class="line"><span class="operator">|</span> ARCHIVE            <span class="operator">|</span> YES     <span class="operator">|</span> Archive storage engine                                         <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLACKHOLE          <span class="operator">|</span> YES     <span class="operator">|</span> <span class="operator">/</span>dev<span class="operator">/</span><span class="keyword">null</span> storage engine (anything you write <span class="keyword">to</span> it disappears) <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MRG_MYISAM         <span class="operator">|</span> YES     <span class="operator">|</span> Collection <span class="keyword">of</span> identical MyISAM tables                          <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FEDERATED          <span class="operator">|</span> <span class="keyword">NO</span>      <span class="operator">|</span> Federated MySQL storage engine                                 <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MyISAM             <span class="operator">|</span> YES     <span class="operator">|</span> MyISAM storage engine                                          <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PERFORMANCE_SCHEMA <span class="operator">|</span> YES     <span class="operator">|</span> Performance Schema                                             <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> InnoDB             <span class="operator">|</span> <span class="keyword">DEFAULT</span> <span class="operator">|</span> Supports transactions, <span class="type">row</span><span class="operator">-</span>level locking, <span class="keyword">and</span> <span class="keyword">foreign</span> keys     <span class="operator">|</span> YES          <span class="operator">|</span> YES  <span class="operator">|</span> YES        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MEMORY             <span class="operator">|</span> YES     <span class="operator">|</span> Hash based, stored <span class="keyword">in</span> memory, useful <span class="keyword">for</span> temporary tables      <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CSV                <span class="operator">|</span> YES     <span class="operator">|</span> CSV storage engine                                             <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>查看默认存储引擎：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%storage_engine%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name                   <span class="operator">|</span> <span class="keyword">Value</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> default_storage_engine          <span class="operator">|</span> InnoDB    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> default_tmp_storage_engine      <span class="operator">|</span> InnoDB    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> disabled_storage_engines        <span class="operator">|</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> internal_tmp_mem_storage_engine <span class="operator">|</span> TempTable <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+-----------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p>MyISAM（MySQL5.5 之前的默认存储引擎）：</p><ul><li><strong>支持表锁</strong></li><li>支持全文索引（正排索引、倒排索引）</li><li><strong>不支持事务</strong></li></ul><p>使用 MyISAM 存储表，会生成三个文件：</p><ol><li><code>.frm</code> 存储表结构，是任何存储引擎都有的</li><li><code>.myd</code> 存放数据</li><li><code>.myi</code> 存放索引</li></ol><p>索引和数据分开存放，这样的索引叫<strong>非聚集索引</strong>。</p><p>InnoDB（MySQL5.5 及之后版本默认的存储引擎。没有特殊应用，推荐使用 InnoDB 引擎）：</p><ol><li><strong>支持事务</strong></li><li>支持<strong>行锁和表锁</strong>（默认支持行锁）</li><li>支持 MVCC（多版本并发控制），原理类似于事务的编号</li><li>支持崩溃恢复</li><li>支持外键一致性约束</li></ol><p>使用 InnoDB 存储表，会生成两个文件：</p><ol><li><code>.frm</code> 存储表结构，是任何存储引擎都有的</li><li><code>.ibd</code> 存放数据和索引</li></ol><p>索引和数据存放在一起，这样的索引叫<strong>聚集索引</strong>。</p><p>看看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~$ sudo -i</span><br><span class="line">[sudo] password <span class="keyword">for</span> wanko: </span><br><span class="line">root@wanko:~<span class="comment"># cd /var/lib/mysql/</span></span><br><span class="line">root@wanko:/var/lib/mysql<span class="comment"># ls -a</span></span><br><span class="line"> .               binlog.000024   binlog.000051   binlog.000078</span><br><span class="line"> ..              binlog.000025   binlog.000052   binlog.000079</span><br><span class="line"> akashi          binlog.000026   binlog.000053   binlog.index</span><br><span class="line"> auto.cnf        binlog.000027   binlog.000054   ca-key.pem</span><br><span class="line"> binlog.000001   binlog.000028   binlog.000055   ca.pem</span><br><span class="line"> binlog.000002   binlog.000029   binlog.000056   client-cert.pem</span><br><span class="line"> binlog.000003   binlog.000030   binlog.000057   client-key.pem</span><br><span class="line"> binlog.000004   binlog.000031   binlog.000058   debian-5.7.flag</span><br><span class="line"> binlog.000005   binlog.000032   binlog.000059  <span class="string">&#x27;#ib_16384_0.dblwr&#x27;</span></span><br><span class="line"> binlog.000006   binlog.000033   binlog.000060  <span class="string">&#x27;#ib_16384_1.dblwr&#x27;</span></span><br><span class="line"> binlog.000007   binlog.000034   binlog.000061   ib_buffer_pool</span><br><span class="line"> binlog.000008   binlog.000035   binlog.000062   ibdata1</span><br><span class="line"> binlog.000009   binlog.000036   binlog.000063   ibtmp1</span><br><span class="line"> binlog.000010   binlog.000037   binlog.000064  <span class="string">&#x27;#innodb_redo&#x27;</span></span><br><span class="line"> binlog.000011   binlog.000038   binlog.000065  <span class="string">&#x27;#innodb_temp&#x27;</span></span><br><span class="line"> binlog.000012   binlog.000039   binlog.000066   mysql</span><br><span class="line"> binlog.000013   binlog.000040   binlog.000067   mysql.ibd</span><br><span class="line"> binlog.000014   binlog.000041   binlog.000068   performance_schema</span><br><span class="line"> binlog.000015   binlog.000042   binlog.000069   private_key.pem</span><br><span class="line"> binlog.000016   binlog.000043   binlog.000070   public_key.pem</span><br><span class="line"> binlog.000017   binlog.000044   binlog.000071   server-cert.pem</span><br><span class="line"> binlog.000018   binlog.000045   binlog.000072   server-key.pem</span><br><span class="line"> binlog.000019   binlog.000046   binlog.000073   sys</span><br><span class="line"> binlog.000020   binlog.000047   binlog.000074   undo_001</span><br><span class="line"> binlog.000021   binlog.000048   binlog.000075   undo_002</span><br><span class="line"> binlog.000022   binlog.000049   binlog.000076   wanko.pid</span><br><span class="line"> binlog.000023   binlog.000050   binlog.000077</span><br><span class="line">root@wanko:/var/lib/mysql<span class="comment"># cd akashi</span></span><br><span class="line">root@wanko:/var/lib/mysql/akashi<span class="comment"># ls -a</span></span><br><span class="line">.             customer_tmp.ibd       order_table.ibd      test2.ibd  test5.ibd</span><br><span class="line">..            customer_tmp_like.ibd  order_table_tmp.ibd  test3.ibd</span><br><span class="line">customer.ibd  member.ibd             test1.ibd            test4.ibd</span><br><span class="line">root@wanko:/var/lib/mysql/akashi<span class="comment"># file test1.ibd </span></span><br><span class="line">test1.ibd: OpenPGP Secret Key</span><br><span class="line">root@wanko:/var/lib/mysql/akashi<span class="comment"># file member.ibd </span></span><br><span class="line">member.ibd: data</span><br></pre></td></tr></table></figure><p>Memory 引擎特点：</p><ol><li>数据都存放在<strong>内存</strong>中，因此数据库重启后会丢失</li><li>支持表锁</li><li>支持 Hash 和 BTree 索引</li><li>不支持 Blob（大的二进制）和 Text（大的文本）字段</li></ol><p>Memory 引擎数据都放在内存中，支持 Hash 索引，因此它的查询速度最快。</p><p>一般使用 Memory 存放临时表。</p><p>临时表：在单个连接中可见，当连接断开时，临时表也将不复存在。</p><p><strong>临时表</strong>的创建：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_akashi  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> customer          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp_like <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">member</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table_tmp   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> temporary <span class="keyword">table</span> test1(id <span class="type">int</span>, age <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">20</span>));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_akashi  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> customer          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp_like <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">member</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table_tmp   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> test1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> test1 <span class="operator">|</span> <span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> `test1` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>临时表创建完成后，默认的引擎还是 InnoDB ，但是<code>show tables</code>看不到表的名字。还可以进行插入、更新、删除、查找：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> test1 <span class="keyword">values</span>(<span class="number">1</span>, <span class="number">20</span>, <span class="string">&#x27;hajimi&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+--------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> age  <span class="operator">|</span> name   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+--------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span> hajimi <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>创建<strong>存储引擎是 memory</strong> 的表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test3(id <span class="type">int</span>, age <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">20</span>)) ENGINE <span class="operator">=</span> memory;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_akashi  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> customer          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp_like <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">member</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table_tmp   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test3             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> test3;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> test3 <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test3` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>MEMORY <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>存储引擎是 memory 的表创建之后，可以进行正常的 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> test3 <span class="keyword">values</span>(<span class="number">1</span>, <span class="number">20</span>, <span class="string">&#x27;newbrush&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test3;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> age  <span class="operator">|</span> name     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span> newbrush <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>现在，直接关闭 terminal. 然后重启：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_akashi  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> customer          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp_like <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">member</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table_tmp   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test3             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1;</span><br><span class="line">ERROR <span class="number">1146</span> (<span class="number">42</span>S02): <span class="keyword">Table</span> <span class="string">&#x27;akashi.test1&#x27;</span> doesn<span class="string">&#x27;t exist</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql&gt; show create table test3;</span></span><br><span class="line"><span class="string">+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="string">| Table | Create Table                                                                                                                                                                   |</span></span><br><span class="line"><span class="string">+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="string">| test3 | CREATE TABLE `test3` (</span></span><br><span class="line"><span class="string">  `id` int DEFAULT NULL,</span></span><br><span class="line"><span class="string">  `age` int DEFAULT NULL,</span></span><br><span class="line"><span class="string">  `name` varchar(20) DEFAULT NULL</span></span><br><span class="line"><span class="string">) ENGINE=MEMORY DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci |</span></span><br><span class="line"><span class="string">+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="string">1 row in set (0.00 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql&gt; select * from test3;</span></span><br><span class="line"><span class="string">+------+------+----------+</span></span><br><span class="line"><span class="string">| id   | age  | name     |</span></span><br><span class="line"><span class="string">+------+------+----------+</span></span><br><span class="line"><span class="string">|    1 |   20 | newbrush |</span></span><br><span class="line"><span class="string">+------+------+----------+</span></span><br><span class="line"><span class="string">1 row in set (0.00 sec)</span></span><br></pre></td></tr></table></figure><p>即：将会话关闭，存储引擎是 memory 的表，表及数据不会消失；但断电重启之后，表的结构还在，内容消失。</p><h2 id="MySQL-锁机制"><a href="#MySQL-锁机制" class="headerlink" title="MySQL 锁机制"></a>MySQL 锁机制</h2><p>原理可参考操作系统笔记中的 PV 操作。</p><h3 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h3><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。</p><p>MySQL 中不同的存储引擎支持不同的锁机制：</p><ul><li>MyISAM 和 MEMORY 存储引擎采用表级锁（table-level locking）</li><li>BDB 存储引擎采用页面锁（page-level locking），但也支持表级锁</li><li>InnoDB 存储引擎既支持行级锁（row-level locking），也支持表级锁。默认采用行级锁</li></ul><p>锁的分类，从对数据操作的粒度划分：</p><ul><li>表级锁：加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。</li><li>行级锁：加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</li></ul><p>锁的分类，从对数据操作的类型划分：</p><ul><li>读锁（共享锁）：同一份数据，多个读操作可以同时进行而互不影响。</li><li>写锁（排它锁）：当前操作没有完成之前，它会阻断其他读锁和写锁。</li></ul><h3 id="MyISAM-的表锁"><a href="#MyISAM-的表锁" class="headerlink" title="MyISAM 的表锁"></a>MyISAM 的表锁</h3><p>加锁：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lock <span class="keyword">table</span> 表名 read;   # 加读锁</span><br><span class="line"></span><br><span class="line">lock <span class="keyword">table</span> 表名 write;  # 加写锁</span><br></pre></td></tr></table></figure><p>MyISAM 在执行查询语句<code>SELECT</code>前，会自动给涉及的所有表加读锁；在执行更新操作<code>UPDATE</code>、<code>DELETE</code>、<code>INSERT</code>等前，会自动给涉及的表加写锁。这个过程不需要用户干预，因此，用户一般不需要直接用<code>LOCK TABLE</code>命令给 MyISAM 表显式加锁。</p><p>解锁：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlock tables;</span><br></pre></td></tr></table></figure><p>查看加锁的表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">open</span> tables;</span><br></pre></td></tr></table></figure><p>MyISAM 的表锁分为读锁（共享锁）和写锁（独占锁）。</p><p>给表加上读锁（写锁）有什么效果？</p><p>读锁（共享锁）：</p><ol><li>加了读锁的进程可以读加读锁的表，但不能读其他表。</li><li>加读锁的进程不能对这张表做写操作    。</li><li>其他进程可以读加读锁的表（因为是共享锁），也可以读其他表。</li><li>其他进程<code>update</code>加读锁的表会一直处于等待锁的状态，直到锁被释放后才会<code>update</code>成功。</li></ol><p>写锁（独占锁）：</p><ol><li>加锁进程可以对加锁的表做任何操作。</li><li>其他进程不能查询加锁的表，需等待锁释放。</li></ol><p>总结：<br>读锁阻塞写，但不堵塞读。写锁阻塞读和写。</p><h3 id="InnoDB-的行锁"><a href="#InnoDB-的行锁" class="headerlink" title="InnoDB 的行锁"></a>InnoDB 的行锁</h3><p>行级锁在 Mysql 中锁定粒度最细，能大大减少数据库的操作冲突。</p><p>用法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... LOCK <span class="keyword">IN</span> SHARE MODE;  # 读锁</span><br></pre></td></tr></table></figure><p>在查询语句后加<code>LOCK IN SHARE MODE</code>，Mysql 会对查询结果中的每行都加共享锁，当没有其他线程对查询结果集中的任何一行使用排他锁时，成功申请共享锁，否则被阻塞。其他线程可以读上了共享锁的表，且这些线程读的数据为同一版本。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;         # 写锁</span><br></pre></td></tr></table></figure><p>在查询语句后加<code>FOR UPDATE</code>，Mysql 会对查询结果中的每行都加排他锁，当没有其他线程对查询结果集中的任何一行使用排他锁时，成功申请排他锁，否则被阻塞。</p><center><p style="color: red";>- - - - - 演示 - - - - - </p></center><p>演示的时候，需使用事务。</p><p>terminal 1 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 2 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 1 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span> lock <span class="keyword">in</span> share mode;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 2 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>后略。</p><center><p style="color: red";>- - - - - 演示 END - - - - -</p></center><h3 id="InnoDB-的表锁"><a href="#InnoDB-的表锁" class="headerlink" title="InnoDB 的表锁"></a>InnoDB 的表锁</h3><p>InnoDB 还有两个表锁：</p><ul><li>意向共享锁（IS）：表示事务准备给数据行上共享锁，即一个数据行上共享锁前必须先取得该表的 IS锁。</li><li>意向排他锁（IX）：表示事务准备给数据行上排他锁，即一个数据行上排他锁前必须先取得该表的 IX锁。</li></ul><p>意向锁由 InnoDB 自动添加，不需用户干预。</p><h3 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h3><p>terminal 1 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 2 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 1 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">4</span> <span class="keyword">and</span> id<span class="operator">&lt;</span><span class="number">8</span> lock <span class="keyword">in</span> share mode;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai     <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+--------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 2 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span>(id, name, age, math) <span class="keyword">values</span>(<span class="number">6</span>, <span class="string">&#x27;silverwolf&#x27;</span>, <span class="number">16</span>, <span class="number">100</span>); </span><br><span class="line">ERROR <span class="number">1205</span> (HY000): Lock wait timeout exceeded; try restarting transaction</span><br></pre></td></tr></table></figure><h2 id="业务设计"><a href="#业务设计" class="headerlink" title="业务设计"></a>业务设计</h2><p>逻辑设计： 范式设计、反范式设计</p><p>物理设计： 命名规范、存储引擎选择、数据类型选择</p><h3 id="范式设计"><a href="#范式设计" class="headerlink" title="范式设计"></a>范式设计</h3><p>为建立冗余较小、结构合理的数据库，设计数据库时必须遵循一定的规则。在关系型数据库中这种<strong>规则</strong>就称为范式。要想设计一个结构合理的关系型数据库，必须满足一定的范式。</p><p>第一范式：</p><p><img src="https://bu.dusays.com/2024/01/26/65b3c0b0a0168.png" alt="61-43.png"></p><p>第二范式：</p><p><img src="https://bu.dusays.com/2024/01/26/65b3c23c6974e.jpeg" alt="61-44.jpeg"></p><p>第三范式：</p><p><img src="https://bu.dusays.com/2024/01/26/65b3c25d57721.jpeg" alt="61-45.jpeg"></p><p>范式化设计的优缺点：</p><ul><li>优点：<ol><li>可以尽量减少数据冗余</li><li>范式化的表通常比反范式化的表更小</li><li>范式化的数据库更新起来更快</li></ol></li><li>缺点：<ol><li>范式化的表，在查询的时候经常需要很多<code>join</code>关联,增加查询的代价。</li><li>更难进行索引优化 </li></ol></li></ul><p>完全符合范式化的设计有时并不能得到良好的 SQL 查询性能。</p><h3 id="反范式化设计"><a href="#反范式化设计" class="headerlink" title="反范式化设计"></a>反范式化设计</h3><p>反范式化设计，是出于性能的考虑，适当地违反范式设计的要求。</p><p>反范式化设计允许存在少量冗余，用空间换时间。</p><p>反范式化设计的优缺点：</p><ul><li>优点：<ol><li>可以减少表的关联</li><li>可以更好的进行索引优化</li></ol></li><li>缺点：<ol><li>存在数据冗余及数据维护异常</li><li>修改数据的成本更高</li></ol></li></ul><h3 id="物理设计"><a href="#物理设计" class="headerlink" title="物理设计"></a>物理设计</h3><p>不同的存储引擎有各自的特点，以适应不同的需求。如下图所示：</p><p><img src="https://bu.dusays.com/2024/01/26/65b3c9937a9da.png" alt="61-46.png"></p><p>为表中的字段选择合适的数据类型：</p><ul><li><strong>更小的通常更好</strong></li><li><strong>简单就好</strong><ul><li>简单数据类型的操作通常需要更少的 CPU 周期。比如：整形比字符操作代价更低。</li><li>用 MySQL 内建的类型而不是字符串来存储日期和时间。</li></ul></li><li><strong>尽量避免 NULL</strong><ul><li>可以为 <code>NULL</code> 是列的默认属性，通常情况下最好指定列为<code>NOT NULL</code>，除非真的需要存储 NULL 值。</li><li>如果查询中包含可为 NULL 的列，对 MySQL 来说更难优化，因为可以为 NULL 的列使得索引和值比较都更为复杂。</li><li>可为 NULL 的列会使用更多存储空间，在 MySQL 里需要特殊处理。</li></ul></li></ul><h2 id="索引再探"><a href="#索引再探" class="headerlink" title="索引再探"></a>索引再探</h2><center><p style="color: red";>- - - - - InnoDB - - - - -</p></center><p>InnoDB 以 主键/非主键 创建索引的一些细节：</p><p><img src="https://bu.dusays.com/2024/01/26/65b3d31e8b542.png" alt="61-47.png"></p><p><img src="https://bu.dusays.com/2024/01/26/65b3d31675ca4.png" alt="61-48.png"></p><p>回表：使用辅助索引查询时，若查询的列在辅助索引树上没有，那么就需要通过该条信息对应的主键，在主键索引树上继续查找。即在两个索引树上进行查找，磁盘 IO 增多，查询速度变慢。（尽量避免回表）</p><p>思考下面 SQL 语句的执行过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> citizen <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>不需要回表，该数据直接可以找到</span><br><span class="line"><span class="keyword">select</span> id_card <span class="keyword">from</span> citizen <span class="keyword">where</span> id_card <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> citizen <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> citizen <span class="keyword">where</span> id_card <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>; <span class="operator">/</span><span class="operator">/</span>回表</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> citizen <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> citizen <span class="keyword">where</span> id_card <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>; <span class="operator">/</span><span class="operator">/</span>回表</span><br></pre></td></tr></table></figure><p>索引覆盖：使用辅助索引查询时，查询的列在辅助索引树上命中。</p><center><p style="color: red";>- - - - - InnoDB END - - - - -</p></center><p><br></p><center><p style="color: red";>- - - - - MyISAM - - - - -</p></center><p>MyISAM 以 主键/非主键 创建的索引：</p><p><img src="https://bu.dusays.com/2024/01/27/65b3de790e4a9.png" alt="61-49.png"></p><p><img src="https://bu.dusays.com/2024/01/27/65b3de790a2a6.png" alt="61-50.png"></p><center><p style="color: red";>- - - - - MyISAM END - - - - -</p></center><h2 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h2><p>慢查询日志，记录了查询比较慢（执行时间长）的 SQL 语句。所有执行时间超过参数<code>long_query_time</code>的设定阈值的 SQL 语句，会被 mysql 记录。</p><p>优化数据库系统的性能，需要定位分析性能瓶颈。</p><p>慢查询日志有助于优化 SQL 语句。默认情况下，慢查询日志关闭，使用前须开启。若无调优需要，一般不建议启动，因为会带来性能上的影响。</p><p>查看慢查询日志是否启用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">Show</span> variables <span class="keyword">like</span> &quot;%slow_query_log&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name  <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------+</span></span><br><span class="line"><span class="operator">|</span> slow_query_log <span class="operator">|</span> OFF   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>或者这样查看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">Show</span> variables <span class="keyword">like</span> &quot;%slow%&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+-------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name               <span class="operator">|</span> <span class="keyword">Value</span>                         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+-------------------------------+</span></span><br><span class="line"><span class="operator">|</span> log_slow_admin_statements   <span class="operator">|</span> OFF                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_slow_extra              <span class="operator">|</span> OFF                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_slow_replica_statements <span class="operator">|</span> OFF                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_slow_slave_statements   <span class="operator">|</span> OFF                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slow_launch_time            <span class="operator">|</span> <span class="number">2</span>                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slow_query_log              <span class="operator">|</span> OFF                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slow_query_log_file         <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>wanko<span class="operator">-</span>slow.log <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+-------------------------------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>上面的路径可以寻找文件位置。</p><p>启用慢查询日志（只是临时生效，如果要永久生效，必须修改配置文件）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">Set</span> <span class="keyword">global</span> slow_query_log <span class="operator">=</span> <span class="keyword">on</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>查看时间阈值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> &quot;%long_query%&quot;;  </span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name   <span class="operator">|</span> <span class="keyword">Value</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> long_query_time <span class="operator">|</span> <span class="number">10.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec) </span><br></pre></td></tr></table></figure><p>调整时间阈值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">Set</span> <span class="keyword">global</span> long_query_time<span class="operator">=</span><span class="number">0.1</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> &quot;%long_query%&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name   <span class="operator">|</span> <span class="keyword">Value</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> long_query_time <span class="operator">|</span> <span class="number">10.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>发现<code>long_query_time</code>还没变，重启 mysql 再执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> &quot;%long_query%&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name   <span class="operator">|</span> <span class="keyword">Value</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span> long_query_time <span class="operator">|</span> <span class="number">0.100000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> &quot;%slow_query_log&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name  <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------+</span></span><br><span class="line"><span class="operator">|</span> slow_query_log <span class="operator">|</span> <span class="keyword">ON</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>查看慢查询 SQL 记录数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">Show</span> <span class="keyword">global</span> status <span class="keyword">like</span> <span class="string">&#x27;%slow_queries&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Slow_queries  <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a>执行计划</h2><h3 id="总揽"><a href="#总揽" class="headerlink" title="总揽"></a>总揽</h3><p><code>EXPLAIN</code>解释 SQL 语句的执行计划，即显示该 SQL 语句是怎么执行的。</p><p><code>DESC</code>命令也可以查看执行计划。</p><p>官方文档： <a href="https://dev.mysql.com/doc/refman/8.0/en/explain-output.html">https://dev.mysql.com/doc/refman/8.0/en/explain-output.html</a></p><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;explain | DESC | DESCRIBE&#125; + SQL</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">member</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">11</span> <span class="operator">|</span>    <span class="number">10.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>通过<code>EXPLAIN</code>，可以分析出以下结果：</p><ul><li>表的读取顺序</li><li>数据读取操作的操作类型</li><li>哪些索引可以使用</li><li>哪些索引被实际使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查询</li></ul><p><code>Explain</code>执行计划的输出内容：</p><table>  <tbody>    <tr>      <td><strong>列</strong></td>      <td><strong>含义</strong></td>    </tr>    <tr>      <td>id</td>      <td>执行计划的 id 标志</td>    </tr>    <tr>      <td>select_type</td>      <td>SELECT 的类型</td>    </tr>    <tr>      <td>table</td>      <td>输出记录的表</td>    </tr>    <tr>      <td>partitions</td>      <td>匹配的分区</td>    </tr>    <tr>      <td>type</td>      <td>JOIN的类型</td>    </tr>    <tr>      <td>possible_keys</td>      <td>优化器可能选择的索引</td>    </tr>    <tr>      <td>key</td>      <td>优化器实际选择的索引</td>    </tr>    <tr>      <td>key_len</td>      <td>使用索引的字节长度</td>    </tr>    <tr>      <td>ref</td>      <td>进行比较的索引列</td>    </tr>    <tr>      <td>rows</td>      <td>优化器预估的记录数量</td>    </tr>    <tr>      <td>filtered</td>      <td>根据条件过滤得到的记录的百分比</td>    </tr>    <tr>      <td>extra</td>      <td>额外的显示选项</td>    </tr>  </tbody>  <colgroup>    <col>    <col>  </colgroup></table><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p><img src="https://bu.dusays.com/2024/01/28/65b53dad46658.png" alt="61-51.png"></p><p><img src="https://bu.dusays.com/2024/01/28/65b53dad33790.png" alt="61-52.png"></p><p><img src="https://bu.dusays.com/2024/01/28/65b53dad2eee3.png" alt="61-53.png"></p><h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><p>官方文档： <a href="https://dev.mysql.com/doc/refman/8.0/en/explain-output.html#explain_select_type">https://dev.mysql.com/doc/refman/8.0/en/explain-output.html#explain_select_type</a></p><table>  <tbody>    <tr>      <td><strong>类型</strong></td>      <td><strong>描述</strong></td>    </tr>    <tr>      <td>SIMPLE</td>      <td>简单的 select 查询，查询中不包含子查询或者 UNION</td>    </tr>    <tr>      <td>PRIMARY</td>      <td>查询中若包含任何复杂的子部分，最外层查询则被标记为 PRIMARY</td>    </tr>    <tr>      <td>SUBQUERY</td>      <td>在 SELECT 或 WHERE 列表中包含了子查询</td>    </tr>    <tr>      <td>DERIVED</td>      <td>在 FROM 列表中包含的子查询将被标记为 DERIVED，MySQL 会递归执行这些子查询，把结果放在临时表里。</td>    </tr>    <tr>      <td>UNION</td>      <td>若第二个 SELECT 出现在 UNION 之后，则被标记为 UNION；若 UNION 包含在 FROM 子句的子查询中，外层 SELECT 将被标记为 DERIVED</td>    </tr>    <tr>      <td>UNION RESULT</td>      <td>从 UNION 表获取结果的 SELECT</td>    </tr>  </tbody>  <colgroup>    <col>    <col>  </colgroup></table><p><img src="https://bu.dusays.com/2024/01/28/65b632f68bb15.png" alt="61-54.png"></p><p><img src="https://bu.dusays.com/2024/01/28/65b6333ec99e7.png" alt="61-55.png"></p><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><div class="row"><iframe src="https://drive.google.com/file/d/1nW11NFAyRwTor8qzaa3zxyrz4HanoIX8/preview" style="width:100%; height:550px"></iframe></div><h3 id="possible-keys、key、key-len"><a href="#possible-keys、key、key-len" class="headerlink" title="possible_keys、key、key_len"></a>possible_keys、key、key_len</h3><p>possible_keys：表示查询过程中有可能用到的索引。</p><p>key：实际使用的索引，如果为 NULL ，则没有使用索引。</p><p>key_len：索引字段的最大可能长度。</p><p><img src="https://bu.dusays.com/2024/01/28/65b654d957ffd.png" alt="61-56.png"></p><p><img src="https://bu.dusays.com/2024/01/28/65b654d94ba34.png" alt="61-57.png"></p><p>与组合索引结合的情况：</p><p><img src="https://bu.dusays.com/2024/01/28/65b657e609a04.png" alt="61-58.png"></p><h3 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h3><p>包含不适合在其他列中显示但十分重要的额外信息。</p><table>  <tbody>    <tr>      <td><strong>值</strong></td>      <td><strong>描述</strong></td>    </tr>    <tr>      <td>Using filesort（尽量避免）</td>      <td>mysql 会对数据使用一个外部的排序，而不是按照表内的索引顺序读取。MySQL 中无法利用索引完成的排序操作称为“文件排序”。</td>    </tr>    <tr>      <td>Using temporary（尽量避免）</td>      <td>使用临时表。常见于排序 order by 和分组查询 group by.</td>    </tr>    <tr>      <td>USING index（ok）</td>      <td>使用覆盖索引</td>    </tr>    <tr>      <td>Using where</td>      <td>使用 where 过滤</td>    </tr>    <tr>      <td>Using join buffer</td>      <td>使用连接缓存</td>    </tr>    <tr>      <td>Impossible where</td>      <td>where 子句的值总是 false，不能用来获取任何元组</td>    </tr>  </tbody>  <colgroup>    <col>    <col>  </colgroup></table><h2 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h2><p>有时虽然建立了索引，但优化器并不会选择索引去查找数据，而是进行全表扫描。</p><p>一，对索引列进行运算：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">1</span>;    <span class="operator">/</span><span class="operator">/</span> ok</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t <span class="keyword">where</span> a <span class="operator">+</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">2</span>; <span class="operator">/</span><span class="operator">/</span> 不 ok</span><br></pre></td></tr></table></figure><p>二，组合索引中的情况，见上一张图。</p><p>三，使用不等号，会使索引失效：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> c1 <span class="operator">&lt;&gt;</span> <span class="string">&#x27;wuhan&#x27;</span>;</span><br></pre></td></tr></table></figure><p>考虑等价写法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> c1 <span class="operator">&gt;</span> <span class="string">&#x27;wuhan&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> c1 <span class="operator">&lt;</span> <span class="string">&#x27;wuhan&#x27;</span>;</span><br></pre></td></tr></table></figure><p>四，字符串类型加引号，不加导致索引失效：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> citizen <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> citizen <span class="keyword">where</span> name <span class="operator">=</span> <span class="number">123</span>;</span><br></pre></td></tr></table></figure><p>五，其它。</p><h2 id="实践规范"><a href="#实践规范" class="headerlink" title="实践规范"></a>实践规范</h2><p><strong>尽量使用 InnoDB 存储引擎。</strong><br>解读：<br>支持事务、行级锁、并发性能更好、CPU及内存缓存页优化使得资源利用率更高。</p><p><strong>禁止存储大文件或者大照片。</strong><br>解读：<br>为何要让数据库做它不擅长的事情？大文件和照片存储在文件系统，数据库里存 URI 多好。</p><p><strong>控制单表数据量，单表记录控制在千万级。</strong></p><p><strong>平衡范式与冗余，为提高效率可以牺牲范式设计，冗余数据。</strong></p><p><strong>表必须有主键，例如自增主键，推荐使用 UNSIGNED 整数为主键。</strong><br>解读：</p><ul><li>主键递增，数据行写入可以提高插入性能，可以避免 page 分裂，减少表碎片，提升空间和内存的使用；</li><li>主键要选择较短的数据类型，InnoDB 引擎普通索引都会保存主键的值，较短的数据类型可以有效的减少索引的磁盘空间，提高索引的缓存效率。</li></ul><p><strong>必须把字段定义为<code>NOT NULL</code>并且提供默认值。</strong><br>解读：</p><ul><li>null 的列使索引/索引统计/值比较都更加复杂，对 MySQL 来说更难优化；</li><li>null 这种类型 MySQL 内部需要进行特殊处理，增加数据库处理记录的复杂性；同等条件下，表中有较多空字段的时候，数据库的处理性能会降低很多；</li><li>null 值需要更多的存储空，无论是表还是索引中每行中的 null 的列都需要额外的空间来标识；</li><li>对 null 的处理时候，只能采用 is null 或 is not null，而不能采用 =、in、&lt;、&lt;&gt;、!=、not in 这些操作符号。如：where name != ‘shenjian’，如果存在 name 为 null 值的记录，查询结果就不会包含 name 为 null 值的记录。</li></ul><p><strong>禁止使用<code>TEXT</code>、<code>BLOB</code>类型。</strong><br>解读：<br>会浪费更多的磁盘和内存空间，非必要的大量的大字段查询会淘汰掉热数据，导致内存命中率急剧降低，影响数据库性能。</p><p><strong>根据业务区分使用<code>char</code>/<code>varchar</code>。</strong><br>解读：</p><ul><li>字段长度固定，或者长度近似的业务场景，适合使用 char，能够减少碎片，查询性能高；</li><li>字段长度相差较大，或者更新较少的业务场景，适合使用 varchar，能够减少空间。</li></ul><p><strong>单表索引建议控制在 5 个以内。</strong><br>解读：</p><ul><li>互联网高并发业务，太多索引会影响写性能；</li><li>生成执行计划时，如果索引太多，会降低性能，并可能导致 MySQL 选择不到最优索引；</li><li>异常复杂的查询需求，可以选择 ES 等更为适合的方式存储。</li></ul><p><strong>禁止在更新十分频繁、区分度不高的属性上建立索引。</strong><br>解读：</p><ul><li>更新会变更B+树，更新频繁的字段建立索引会大大降低数据库性能；</li><li>【性别】这种区分度不大的属性，建立索引是没有什么意义的，不能有效过滤数据，性能与全表扫描类似。</li></ul><p><strong>建立组合索引，必须把区分度高的字段放在前面。</strong><br>解读：能够更加有效的过滤数据。</p><p><strong>理解组合索引最左前缀原则，避免重复建设索引，如果建立了(a,b,c)，相当于建立了(a), (a,b), (a,b,c) .</strong></p><p><strong>禁止使用<code>SELECT *</code>，只获取必要的字段，需要显示说明列属性。</strong><br>解读：</p><ul><li>读取不需要的列会增加 CPU、IO、内存、网络带宽消耗；</li><li>不能有效的利用覆盖索引；</li><li>使用 SELECT * 容易在增加或者删除字段后出现程序 BUG .</li></ul><p><strong>SQL<code>WHERE</code>条件的顺序不一定需要按照索引的顺序。</strong><br>解读：比如一个联合索引是 name, age，查询的时候 WHERE 条件可以写成 age=10 and name=’张三’。</p><p><img src="https://s2.loli.net/2024/01/29/lZd8UVxG19vXHnI.jpg"></p><p><img src="https://bu.dusays.com/2024/01/29/65b7ade073490.png" alt="61-59.png"></p><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><div class="row"><iframe src="https://drive.google.com/file/d/1SsTDWzQC8p8lnqkvTzLeqlLHD2jcJl6W/preview" style="width:100%; height:550px"></iframe></div><p>注：上面的 PDF 中 <strong>（四）多主一从</strong> 箭头画反了。</p><p>MySQL 主从复制配置流程：</p><div class="row"><iframe src="https://drive.google.com/file/d/1tvU7DJ8yZDycVRuHtVxvBk8pixB2E4xP/preview" style="width:100%; height:550px"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 基础</title>
      <link href="/posts/2259c81e.html"/>
      <url>/posts/2259c81e.html</url>
      
        <content type="html"><![CDATA[<p>在旧电脑上安装了 Ubuntu ，把 Windows 和其他文件一整个扬了的那种，有一种毁天灭地的美。</p><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>windows 有盘符的概念，如C盘，D盘，E盘等等，但是 Linux 没有盘符的概念。</p><p>Linux 的目录结构：所有的目录都是从根目录<code>/</code>开始。</p><p><img src="https://bu.dusays.com/2024/01/03/65955a1662cc1.png" alt="60-1.png"></p><h2 id="cd、pwd、cat"><a href="#cd、pwd、cat" class="headerlink" title="cd、pwd、cat"></a>cd、pwd、cat</h2><p>查看命令的方式，可以使用 <code>man  命令</code>。</p><p><code>pwd</code>命令：print name of current/working directory, 打印当前目录的名字。</p><p><code>.</code>代表当前目录，<code>..</code>代表上一级目录。</p><p>回到上一次的目录 <code>cd -</code></p><p><code>cat</code>命令：concatenate files and print on the standard output, 查看文件内容。<br>对于读小文件而言，是没有问题的，但是当文件的内容非常多的时候，cat起不到应有的作用。</p><h2 id="useradd、userdel"><a href="#useradd、userdel" class="headerlink" title="useradd、userdel"></a>useradd、userdel</h2><p><strong><code>useradd</code>命令</strong>：create a new user or update default new user information, 添加用户的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd test3  //创建的用户属于三无产品，没有密码，在/home目录下面没有对应的文件夹，shell不一样</span><br><span class="line"></span><br><span class="line">sudo  useradd -m  test4  -s /bin/bash  //-m指定了在/home目录创建对应文件夹 -s指定shell类型</span><br><span class="line"></span><br><span class="line">//给test4创建密码</span><br><span class="line">sudo passwd test4</span><br><span class="line"></span><br><span class="line">//账号切换的命令</span><br><span class="line">su  test4  #su + 账号名字</span><br><span class="line"></span><br><span class="line">用户切换的时候，展现出来的就是一个栈结构，先进后出。</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/ibk055Ku4LIBxz" alt="60-2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">wangdao@wangdao:~$ cat /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">.....</span><br><span class="line">gdm:x:121:125:Gnome Display Manager:/var/lib/gdm3:/bin/false</span><br><span class="line">wangdao:x:1000:1000:wangdao,,,:/home/wangdao:/bin/bash</span><br><span class="line">sshd:x:122:65534::/run/sshd:/usr/sbin/nologin</span><br><span class="line">mysql:x:123:127:MySQL Server,,,:/nonexistent:/bin/false</span><br><span class="line">test:x:1001:1001::/home/test:/bin/bash</span><br><span class="line">test2:x:1002:1002::/home/test2:/bin/sh</span><br><span class="line">test3:x:1003:1003::/home/test3:/bin/sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wangdao:x:1000:1000:wangdao,,,:/home/wangdao:/bin/bash</span><br><span class="line">test3:x:1003:1003::/home/test3:/bin/sh</span><br><span class="line"></span><br><span class="line">冒号是分隔符</span><br><span class="line">用户名  密码（x替代）  uid（用户id） gid（group id，组id）  用户对应的绝对路径  shell类型</span><br><span class="line">0  root    用户</span><br><span class="line">1~1000     系统用户</span><br><span class="line">1000之后    普通用户</span><br></pre></td></tr></table></figure><p><strong>注意：为了保证系统的安全性，不允许root用户直接进行登录。（root用户都是有的，因此知道账号）</strong></p><p><code>userdel</code>命令：delete a user account and related files, 删除用户以及用户所对应的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//-r选项可以删除用户以及用户对应的在/home下的文件夹，如果不加-r,就只会在/etc/passwd下面删除账号，不会删除/home的文件夹</span><br><span class="line">wangdao@wangdao:~$ sudo userdel test5 -r</span><br><span class="line">userdel: test5 mail spool (/var/mail/test5) not found</span><br></pre></td></tr></table></figure><h2 id="目录的创建与删除、tree"><a href="#目录的创建与删除、tree" class="headerlink" title="目录的创建与删除、tree"></a>目录的创建与删除、tree</h2><p><code>mkdir</code>命令：make directories, 创建文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir 20221230   //创建目录</span><br><span class="line">mkdir -p dir3/dir4/dir5 //创建多级目录可以加上-p,或者可以一级一级的创建</span><br></pre></td></tr></table></figure><p><code>rmdir</code>命令：remove empty directories, 删除空目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//如果目录不是空的，可以先进到内层目录，然后一级一级空目录的进行删除</span><br><span class="line">rmdir  dir1  //是空目录就可以直接删除</span><br><span class="line">rmdir dir1  //如果dir1里面还有目录就需要先进去，在一级一级删除</span><br></pre></td></tr></table></figure><p><code>tree</code>命令：打印目录的结构（安装与使用）：</p><p><img src="https://bu.dusays.com/2024/01/04/6596b357ca76a.png" alt="60-3.png"></p><h2 id="文件的创建"><a href="#文件的创建" class="headerlink" title="文件的创建"></a>文件的创建</h2><p>文件的创建命令：<code>touch</code>、<code>echo</code>、<code>cat</code>、<code>vi</code>/<code>vim</code></p><p><code>touch</code>：change file timestamps 改变时间戳（1970.1.1 0:0:0） ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch file   //可以创建空文件</span><br></pre></td></tr></table></figure><p><code>echo</code>: display a line of text 回音命令</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/MNXtX4NQmRpA6b" alt="60-4"></p><p>创建空文件：</p><p><img src="https://bu.dusays.com/2024/01/04/6596b7e12daa9.png" alt="60-5.png"></p><p><code>cat</code>：使用 ctrl+d 进行正常退出，ctrl+c 异常退出（中断）。</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/DBuJtpAiIH_Dfz" alt="60-6"></p><p><code>vi</code>/<code>vim</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim file4  //执行以下步骤，键盘左上角Esc，再按shift + :,再输入wq，再按enter</span><br></pre></td></tr></table></figure><h2 id="文件内容的查看"><a href="#文件内容的查看" class="headerlink" title="文件内容的查看"></a>文件内容的查看</h2><p><code>cat</code>、<code>head</code>、<code>tail</code>、<code>more</code>、<code>less</code></p><ul><li>head - output the first part of files 查看文件的前面一部分内容</li><li>tail - output the last part of files 查看文件的尾部内容</li><li>more - file perusal filter for crt viewing 查看文件里面的内容，可以一行行的查阅。</li><li>less - opposite of more</li></ul><h2 id="文件的拷贝、移动、删除"><a href="#文件的拷贝、移动、删除" class="headerlink" title="文件的拷贝、移动、删除"></a>文件的拷贝、移动、删除</h2><p><code>cp</code> - copy files and directories 拷贝文件或者文件夹（目录）</p><p>普通文件的拷贝：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cp  srcFile  destFile  //cp  源文件   目的文件</span><br><span class="line">cp file1  file2   </span><br><span class="line"></span><br><span class="line">//源文件与目的文件都存在的时候，最好加上-i选项，</span><br><span class="line">//可以进行提示，以免误操作（安全性的问题）</span><br><span class="line">cp -i file1  file2</span><br></pre></td></tr></table></figure><p>普通文件拷贝给目录文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp  file  dir</span><br><span class="line"></span><br><span class="line">如果dir中有file文件，就会直接覆盖；</span><br><span class="line">如果dir中没有file文件，就会创建一个file文件；</span><br><span class="line">如果dir中的file与源文件file的内容不一样，最好还是继续加上-i选项。</span><br></pre></td></tr></table></figure><p>目录拷贝给目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp  -r  dir1  dir2  // -r 表明这个拷贝过程是递归的</span><br></pre></td></tr></table></figure><p><code>mv</code> - move (rename) files</p><p>可以移动普通文件，也可以移动目录文件。<br>“文件”是泛指。在 Linux 中，一切皆文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv  源文件  目的文件   </span><br><span class="line">// mv进行移动的时候，源文件会被删除</span><br><span class="line">// mv也有常用的 -i -f 选项</span><br></pre></td></tr></table></figure><p><code>rm</code> - remove files or directories</p><p>删除普通文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm  file</span><br></pre></td></tr></table></figure><p>删除目录文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm  -fr dir</span><br><span class="line">//-f 是强制的意思，-r 是递归的意思</span><br></pre></td></tr></table></figure><p>删除所有的文件（普通文件、目录文件）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -fr  *</span><br><span class="line">//*星号是一个通配符，代表的是所有类型的文件，包括普通文件、目录文件</span><br></pre></td></tr></table></figure><p><strong>注意：<code>rm</code>命令在使用的时候，最好加上<code>-i</code>，可以起提示作用。</strong></p><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p><code>-a</code>选项，显示文件夹下面的所有文件，包括隐藏文件。在 Linux 中，以<code>.</code>开头的文件是隐藏文件。</p><p><code>-l</code>选项，显示文件夹下的文件的具体信息。</p><p><code>-h</code>选项，将文件大小换算成人类可读的。</p><p><img src="https://bu.dusays.com/2024/01/05/6596f0ef830c7.png" alt="60-7.png"></p><p><code>-i</code>选项，将文件对应的结点号展示出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">drwxrwxr-x 3 wangdao wangdao 4.0K 12月 31 10:58 .</span><br><span class="line">drwxrwxr-x 4 wangdao wangdao 4.0K 12月 30 21:13 ..</span><br><span class="line">drwxrwxr-x 2 wangdao wangdao 4.0K 12月 31 10:54 dir1</span><br><span class="line">-rw-rw-r-- 1 wangdao wangdao   12 12月 31 09:00 file</span><br><span class="line">-rw-rw-r-- 1 wangdao wangdao   12 12月 31 11:05 file2</span><br><span class="line">-rw-rw-r-- 1 wangdao wangdao    0 12月 31 10:58 .file3</span><br><span class="line">-rw-rw-r-- 1 wangdao wangdao 4.2M 12月 30 21:17 The_Holy_Bible.txt</span><br><span class="line"></span><br><span class="line">/*----------------------</span><br><span class="line">d rwx rwx r-x</span><br><span class="line">- rw- rw- r--</span><br><span class="line">第一列代表的是文件类型  d目录文件  -普通文件 等等</span><br><span class="line">r  读</span><br><span class="line">w  写</span><br><span class="line">x  可执行</span><br><span class="line">本用户   组用户   其他用户</span><br><span class="line">-----------------------*/</span><br></pre></td></tr></table></figure><h2 id="硬链接与软链接"><a href="#硬链接与软链接" class="headerlink" title="硬链接与软链接"></a>硬链接与软链接</h2><p><code>ln</code> - make links between files</p><p>硬链接的创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln  源文件   目的文件</span><br><span class="line">//源文件是已经存在的文件，目的文件是新创建的</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/y_eIKVhcPZco3N" alt="60-8" title="注意file和file5的 inode 号"></p><p>创建硬链接之后，相当于多创建了一个指向文件的指针。硬链接文件的 inode 号是一样的。修改任何一个文件，都会导致文件的内容发生改变。</p><p>软链接的创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s  源文件  目的文件</span><br></pre></td></tr></table></figure><p>创建软链接之后，相当于对源文件创建了一个快捷方式，源文件与目的文件 inode 号不一样。删除源文件则快捷方式会失效，但删除软链接文件，源文件不受影响。</p><h2 id="chmod、umask"><a href="#chmod、umask" class="headerlink" title="chmod、umask"></a>chmod、umask</h2><p><code>chmod</code> - change file mode bits 改变文件的访问权限</p><p><img src="https://bu.dusays.com/2024/01/05/6597b7259ebac.png" alt="60-9.png"></p><p>文字设定法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">u代表本用户   g代表组用户  o代表其他用户  a代表所有用户</span><br><span class="line">权限：r读权限   w写权限  x执行权限  -代表没有权限</span><br><span class="line">权限的增删  +代表增加权限   -代表去掉权限  =代表赋予某种权限</span><br><span class="line">chmod  u=r,g+r,o=x file7</span><br></pre></td></tr></table></figure><p>例子：</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/1eiYdFfQ0lFSfW" alt="60-10"></p><p>数字设定法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 以下为注释</span><br><span class="line">rwx rwx r-x</span><br><span class="line">111 111 101</span><br><span class="line">7   7   5</span><br><span class="line">2^2 + 2^1 + 2^0 = 7</span><br><span class="line">r = 4</span><br><span class="line">w = 2</span><br><span class="line">x = 1</span><br><span class="line">- = 0</span><br><span class="line">普通文件的权限一般就是664 rw-rw-r--</span><br></pre></td></tr></table></figure><p>用法示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[asdf@www.masswerk.at:2]$ pwd</span><br><span class="line">/home/asdf</span><br><span class="line">[asdf@www.masswerk.at:2]$ echo &quot;hello&quot; &gt; file1</span><br><span class="line">[asdf@www.masswerk.at:2]$ ls</span><br><span class="line">file1</span><br><span class="line">[asdf@www.masswerk.at:2]$ cat file1</span><br><span class="line">hello</span><br><span class="line">[asdf@www.masswerk.at:2]$ ll file1</span><br><span class="line">-rw-r-----  1  asdf      users            5  2024/01/05 23:12:07  file1</span><br><span class="line">[asdf@www.masswerk.at:2]$ chmod 775 file1</span><br><span class="line">[asdf@www.masswerk.at:2]$ ll file1</span><br><span class="line">-rwxrwxr-x  1  asdf      users            5  2024/01/05 23:12:07  file1</span><br></pre></td></tr></table></figure><blockquote><p>以下关于 umask 的内容转载自 <a href="https://www.coorw.com/3210.html">https://www.coorw.com/3210.html</a></p></blockquote><p>在 linux 系统中，我们创建一个新的文件或者目录的时候，这些新的文件或目录都会有默认的访问权限，umask命令与文件和目录的默认访问权限有关。</p><p><code>umask</code>为 Shell 内建命令，用于设置创建文件时的权限掩码。权限掩码由 3 个八进制数字组成，将 777（八进制）减掉权限掩码后，即可得到新建文件的默认权限。</p><p>命令格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umask [-p] [-S] [MODE]</span><br></pre></td></tr></table></figure><p>后不跟任何选项与参数单独执行 <code>umask</code>，则以八进制格式显示当前权限掩码。</p><p>选项说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-p [MODE]</span><br><span class="line">// 以八进制数字形式显示或设置权限掩码。</span><br><span class="line">// 当 MODE 没有提供时，显示当前权限掩码，为默认选项</span><br><span class="line"></span><br><span class="line">-S [MODE]</span><br><span class="line">// 以字符形式显示或设置新建文件的默认权限。</span><br></pre></td></tr></table></figure><p><strong>注意：出于安全的考虑，文件的执行权限不能通过权限掩码来设置，必须手工修改。</strong></p><p>常用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 设置权限掩码并查看</span><br><span class="line"></span><br><span class="line">#设置权限掩码</span><br><span class="line">umask 044</span><br><span class="line"></span><br><span class="line">#查看权限掩码</span><br><span class="line">umask</span><br><span class="line">044</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 以字符形式显示新建文件的默认权限</span><br><span class="line"></span><br><span class="line">umask -S</span><br><span class="line">u=rwx,g=rx,o=rx</span><br></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p><code>find</code>命令：查找文件。</p><p><img src="https://bu.dusays.com/2024/01/06/65982ed6a564e.png" alt="60-11.png"></p><p>按照名字进行查找：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find  路径（绝对路径或相对路径） -name  &quot;文件名字&quot;</span><br><span class="line"></span><br><span class="line">文件名字可以使用通配符</span><br><span class="line">* 代表任意个字符</span><br><span class="line">? 代表任意一个字符</span><br><span class="line">[] 代表一个范围，中括号是数字或字母，也可结合使用</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/gly_CGKT07Ma7-" alt="60-12"></p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>重定向输入<code>&lt;</code>，就是 stdin<br>重定向输出<code>&gt;</code>或<code>1&gt;</code>，就是 stdout<br>重定向的错误输出<code>2&gt;</code>，就是 stderr</p><p><img src="https://bu.dusays.com/2024/01/06/65983aa216bc8.png" alt="60-13.png"></p><p><strong>linux 一切皆文件</strong><br>文件句柄（门把手）<br>文件描述符 fd<br>可以将文件描述符看成是操作文件的指针</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/0X3oMLu-e6tnRi" alt="60-14"></p><p>追加模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;</span><br><span class="line">标准输出的追加，在原有基础上继续追加。</span><br><span class="line">示例：</span><br><span class="line">echo &quot;Fischl&quot; &gt;&gt; file1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2&gt;&gt;</span><br><span class="line">标准错误的追加</span><br></pre></td></tr></table></figure><p>例外：</p><p><img src="https://bu.dusays.com/2024/01/06/65984077834f3.png" alt="60-15.png"></p><h2 id="grep、正则表达式"><a href="#grep、正则表达式" class="headerlink" title="grep、正则表达式"></a>grep、正则表达式</h2><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~$ cat file1</span><br><span class="line">spider223man</span><br><span class="line">batman</span><br><span class="line">wanko@wanko:~$ cat file2</span><br><span class="line">super223man</span><br><span class="line">spider223man</span><br><span class="line">wanko@wanko:~$ grep -rn &quot;spider223man&quot; .</span><br><span class="line">./file2:2:spider223man</span><br><span class="line">./file1:1:spider223man</span><br></pre></td></tr></table></figure><p><code>-r</code>递归；<code>-n</code>显示行号。</p><p>正则表达式：</p><p><img src="https://bu.dusays.com/2024/01/07/659ab5e3bba37.png" alt="60-16.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~$ cat filetst</span><br><span class="line">grep</span><br><span class="line">Grep</span><br><span class="line">sleep</span><br><span class="line">how</span><br><span class="line">what</span><br><span class="line">how are you</span><br><span class="line"></span><br><span class="line">wanko@wanko:~$ grep -nE &quot;e&quot; filetst</span><br><span class="line">1:grep</span><br><span class="line">2:Grep</span><br><span class="line">3:sleep</span><br><span class="line">6:how are you</span><br><span class="line"></span><br><span class="line">wanko@wanko:~$ grep -nE &quot;ee&quot; filetst</span><br><span class="line">3:sleep</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~$ grep -nE &quot;e*&quot; filetst</span><br><span class="line">1:grep</span><br><span class="line">2:Grep</span><br><span class="line">3:sleep</span><br><span class="line">4:how</span><br><span class="line">5:what</span><br><span class="line">6:how are you</span><br><span class="line"></span><br><span class="line">wanko@wanko:~$ grep -nE &quot;ee*&quot; filetst</span><br><span class="line">1:grep</span><br><span class="line">2:Grep</span><br><span class="line">3:sleep</span><br><span class="line">6:how are you</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~$ grep -nE &quot;^s&quot; filetst</span><br><span class="line">3:sleep</span><br><span class="line">wanko@wanko:~$ grep -nE &quot;t$&quot; filetst</span><br><span class="line">5:what</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/VxkAMR9Wc3msK0" alt="60-17"></p><h2 id="vim-的使用"><a href="#vim-的使用" class="headerlink" title="vim 的使用"></a>vim 的使用</h2><blockquote><p>参考： <a href="https://oi-wiki.org/tools/editor/vim/">https://oi-wiki.org/tools/editor/vim/</a></p></blockquote><h3 id="插入模式-insert"><a href="#插入模式-insert" class="headerlink" title="插入模式 (insert)"></a>插入模式 (insert)</h3><p>从普通模式进到编辑模式：</p><ul><li>小写<code>i</code>，光标前插入</li><li>小写<code>a</code>，光标后插入</li><li>大写<code>I</code>，行首插入</li><li>大写<code>A</code>，行尾插入</li><li>小写<code>o</code>，下一行插入</li><li>大写<code>O</code>，上一行插入</li></ul><h3 id="普通模式-normal"><a href="#普通模式-normal" class="headerlink" title="普通模式 (normal)"></a>普通模式 (normal)</h3><p><code>u</code>是撤销的快捷键，作用是撤销上一次对文本的更改。</p><p><code>x</code>用于删除光标后的一个字符。</p><p><code>dd</code>删除一行。</p><p><code>gg</code>跳转到文本首行。</p><p><code>G</code>跳转到文本尾行。</p><p><code>$</code>移动到行尾，<code>^</code>移动到行首。</p><p><code>yy</code>+<code>p</code>：<code>yy</code>复制光标当前所在行，<code>p</code>将内容粘贴到光标的下一行去。</p><p><code>6</code>+<code>G</code>，跳转到第 6 行。</p><p><code>3</code>+<code>j</code>，向下移动 3 行。</p><p><code>ndG</code>：（<code>n</code>是数字）删除第n行到当前行的内容，左闭右闭。</p><h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><p><code>/待查单词</code>：<code>n</code>下一个，<code>N</code>上一个。</p><p><code>set nu</code>：显示行号。</p><p><code>s/待查找项/替换项</code>：默认单行第一个匹配项。</p><p><code>s/待查找项/替换项/g</code>：替换一行里所有的匹配项。</p><p><code>num1,num2s/待查找项/替换项/g</code>：将num1到num2（包含）行的匹配项进行替换。</p><ul><li>例子：<code>2,4s/and/kkk/g</code></li></ul><p><code>%s/待查找项/替换项/g</code>：全文替换。</p><h3 id="可视模式-visual"><a href="#可视模式-visual" class="headerlink" title="可视模式 (visual)"></a>可视模式 (visual)</h3><p>按<code>v</code>进入可视模式，多用于选中区域。按 <code>V</code>进入行可视模式，用于选中行。</p><p>按<code>Ctrl</code>+<code>v</code> 或 <code>Ctrl</code>+<code>q</code>进入块可视模式 (visual block)。</p><p>进入块可视模式后，按<code>I</code>或<code>A</code>进入插入模式（相当于 i 和 a），退出插入模式后对本行所做的改动将被应用到选中的每一行同一位置。常用于批量添加注释。</p><h3 id="安装-vimplus"><a href="#安装-vimplus" class="headerlink" title="安装 vimplus"></a>安装 vimplus</h3><p>没什么好说的： <a href="https://github.com/chxuan/vimplus">https://github.com/chxuan/vimplus</a></p><p>字体下载链接： <a href="https://www.nerdfonts.com/font-downloads">https://www.nerdfonts.com/font-downloads</a></p><p>感觉不咋地，最后还是卸了。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 总结</title>
      <link href="/posts/ccc2b0d8.html"/>
      <url>/posts/ccc2b0d8.html</url>
      
        <content type="html"><![CDATA[<p>写总结似乎是个人博客圈的时髦，正好考研告一段落，我也得闲回顾这一整年发生的事。记忆确实是重要的东西，因此想要在还能拂去灰尘，将它们擦拭干净的时候记录下来。</p><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><center><i>你的人生一定会比别人活得麻烦</i></center><center><i>慵懒烦躁的无可救药</i></center><center><i>但那不是因为你有多优秀</i></center><center><i>而是因为你有多软弱</i></center><center><i>你这一辈子都要怀抱着这份软弱活下去</i></center><center><i>但愿你不要把这种麻烦</i></center><center><i>当作自己的生存价值</i></center><p><br></p><p>我还在北京瞎转的时候，总是要挤挤满了人的地铁。地铁上总是座无虚席，抓手也不剩几个，多数人站着只是因为他前后左右的人也是站着的而已。把人的躯干看成秆，脑袋便是穗。这黑色的麦田中，黄底黑字的抓手广告特别惹眼：</p><p><strong>BOSS 直聘 | 站着也能刷 BOSS 直聘了</strong></p><p>这些抓手会一排排地、有序地延伸下去，然后在连接的另一个车厢里拐个弯继续将整个列车串起来。这种景象十分有趣（amusing）：一根巨大的晾衣绳，将整个列车的人都晾了起来，列车起停，人们东倒西歪，就是一阵玄色的麦浪。</p><p>晚上洗完澡后，我一定会经过学校的快递站。这个时候一天的快递件差不多都被取走，员工们会把箱门打开准备明天的工作。</p><p>一排排、一列列、一箱箱的张开不同角度的门。</p><p>这些层层叠叠的形式将一丝诙谐蕴含其中，终于在大学生活快要结束的时候，为我带来了救赎。</p><blockquote><p>痛苦在一颗心中越积越多，就会在晴朗的一天像干草一样燃烧起来，放出一团无比欢乐的烈焰而统统燃尽。</p></blockquote><h2 id="祖母去世"><a href="#祖母去世" class="headerlink" title="祖母去世"></a>祖母去世</h2><p>祖母死了。</p><p>疫情放开后的年初，她在一个狂风大作的凌晨死了，我开车赶过去的时候，床头一个手机开着网易云音乐，已经在放般若波罗蜜多心经了（这玩意似乎不是死人的时候放的），一个有经验的约莫六十岁的男人扯掉她的造瘘袋，手忙脚乱地联系各种各样的人。</p><p>守夜那天晚上，人来之前，我和 F 及他的兄弟也没什么可说的。F 又扯到 M 的事上，当着祖母的面，最后得出结论：“你们要是跟和 M 在一块混的男的接触，就是认贼作父！”</p><p>丧事要到拂晓的时候才开始，在那之前，我睡在楼上的沙发上，试图回忆祖母这个概念。然而我并未与祖母生活过，以前的接触只能算是跟随 F 的探望，因此只能通过身边的人间接地了解。</p><p>M 和婆婆关系并不紧张，至少从我的视角来看是这样，这点似乎和很多家庭不一样。这位婆婆，也就是我的祖母，过的并不轻松。她嫁给了 G ，并给 G 生了三个儿子。G 是识字的，在 C 市尤其是农村，这个年纪的人识字就超过了很多人。有次我在看《水浒》，他凑过脑袋来把书合上看了眼封面，立即煞有介事地说：“少不看水浒…”。G 壮年时断断续续总有疾病缠身，因此很多事情都落在祖母的肩上。据说 G 曾靠着拼爹谋过一个好职位，看生产队的仓库，后来失了火，G 也就丢了这个工作。</p><p>当时 G 的家里穷，只能供一个上学，于是就让 F 去，最后读了个 C 市的二本师范，回到镇上教书。F 的青壮年时代，正是中国经济野蛮生长，遍地机会的时代。F 曾无数次和我吹嘘自己本来可以怎样：如果当初去了南京怎样，如果当时继续给镇上人家盖小二层怎样怎样。</p><p>F 的两个兄弟，其中一个老实巴交，因为不会用滴滴只能打上百块的出租车，最近的爱好是骂蓬佩奥，但幸运的是他的女儿比较厉害，初中的时候考过全县前几名，不过最近似乎厌学辍学中。F 的另一个兄弟 S 属于在深圳能当三和大神的水平，但是还要分出他两个哥哥的金钱和精力。最后 S 也离婚了，抛弃了自己的女儿，极少来往，后来又谈了两个，最近的一个自带女儿，他们的家庭教育也很崇尚威胁恐吓，甚至对外人也毫无自制，S 问 B 和我：“你们两个打一架，谁打的过谁？”，B 自谦地一笑：“那应该是我打的过”。这个没有血缘关系的小妹妹似乎很乐于见到我，喜欢往我身上扑，但是我对她的未来很悲观。某次年关，F 接到 S 的电话，立刻暴怒，厉声呵斥了一通，原来是 S 没钱过年，找 F 借点，挂掉电话后 F 又教训了我一番。</p><p>这些零碎的琐事，祖母都不是局外人。小学的时候，F 有一天晚上回来很晚（或者是没回来？记不清了），M 歇斯底里地怒了，将自己和 F 的照片一撕两半，大吵了一架，并且在电话里向婆婆哭诉。第二天我起来的时候，客厅桌上的玻璃碎了。</p><p>她在最后一年，还拉着我的手说：“去把你妈妈带回来好不好…你去求她，一定有用的…”，她落下泪来，一时没有主张。</p><p>是的，要失读者的望了，祖母并非一个可以向其寻求智慧的人，但情感上也无法苛求她做到更多。</p><p>疫情放开后，G 和祖母先后感染，G 痊愈后先回到家中，而祖母仍在医院。祖母回来之前，G 一直念叨，回来之后，就又回到之前的打骂状态——即使 G 是个瘫痪在床多年一直靠祖母照顾的人。</p><p>F 拒绝让 M 参加葬礼。</p><p>车队敲锣打鼓、惊天动地地出发，祖母的儿子们手执两个白色的纸棍，而孙辈则一红一白，这里的寓意似乎是，孙辈倒也不必过于悲伤，还须保留一点积极的心态。</p><p>火葬场业务繁忙，大概是由于无准备的疫情放开，死人太多的缘故，那阵子做白事的都赚翻了。</p><p>期间，只有两人因祖母的死难过，一个 G ，一个是 S ，怀念她的竟是两个最不肖的。G 瘫在楼上的床上大喊大叫要求见祖母一面，但是显然他的儿子们并不愿将他从二楼搬到一楼见一面祖母。</p><h2 id="最后的大学半年"><a href="#最后的大学半年" class="headerlink" title="最后的大学半年"></a>最后的大学半年</h2><p>新学期，和室友们去爬泰山。某个室友较胖被落在后面，但还是要坚持全程爬上山祈愿，我只好留在后面慢悠悠的走。</p><p>山顶很冷。</p><p>实习和毕业之前已经提过。</p><p>说实话，考研一战的时候我并无上岸的预期，因为当时能不能毕业都是问题。大三下学期，大家的选修课学分已经修满的时候，我大概只修了四五分，此外还有很多必修学分没有补上，另外大四一整年都在重修体育课。这实在是大学摆烂的恶果。</p><p>不过确有两个值得一提的课程，Python 和离散数学。Python 是选修课，离散数学是必修，因为当时有门必修课需要重修，但是课程改革后这门课被毙掉了，只能选一个外系的必修课替代，于是就选了离散数学。两门课的作业都被老师作为了优秀示范。Python 最后是优秀，离散数学最后拿了 80+/100 ，虽然没有预期的 90+ ，但对外系学生似乎也不错了：</p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/-luTUSJGESnTuX" alt="59-1"></p><p>这两门课让我捡起了一点信心，终于下定决心要准备考研了。虽然在之后被证明只是叶公好龙罢了。</p><h2 id="游戏戒退"><a href="#游戏戒退" class="headerlink" title="游戏戒退"></a>游戏戒退</h2><p>大学里摆烂的时候干什么了？主要是碎片化的信息和番剧游戏，另外读了可怜的十几本书大概。</p><p>碎片化信息和碎片化娱乐是注意力杀手，以至于到了后期我甚至无法看一个二十分钟的番剧视频——是的，哪怕是以娱乐为目的的视频，二十分钟集中注意力对我都是痛苦的。</p><p>我意识到需要改变，但必须“徐徐图之”，最后使用番剧和电影代替了碎片化信息的生态位。</p><p>按游玩时间排序，大概是王者荣耀，原神，Minecraft，和平精英，红警，以及和室友玩的战地之类的。王者是大学开始玩的，准备初试的时候还特地上王者号看了一眼邮件《再相见，真好！》，告诉我玩了 3300 个小时，并附 20 铭文碎片。</p><p>一战的时候游戏还没退，真就考研氛围组了，这次无论如何也要退了。</p><p>首先是王者荣耀，退这个坑应该是玩的腻了。虽然大学早期的时候我经常一个人单排，这个要是对匹配算法不服气的话是会上头的。但是后期基本都是和室友一块玩，一个人玩没意思，颇有点“年轻人的电子扑克”的意思，毕业之后自然退坑。</p><p>原神大概是今年四五月退的，退坑的方式比较奇怪。本想着退几天先，但在这没玩的几天里，我感觉自己与那边世界的联系愈发稀少，那里的时间变成一种与我无关的缓慢流动的黏稠物。但同时，主线和重要任务我还是随时可以体验，不去推进就永远在那里，世界好像被冻结封存起来。我就在这样一种破罐子破摔同时又有恃无恐的心态下弃游了。</p><p>Minecraft 的退坑就非常意外了，因为官方启动器出锅，我就退坑了。虽然了解到可以用第三方，例如 HMCL 之类的，但还是趁势退坑了。</p><p>枪战游戏苦手，没有室友带就不玩了，本身也没太大兴致。</p><p>崩铁甚至限时活动都没有，我就每个版本登录领一下十连抽。</p><p>另外还有一个崩坏三，这个主线差不多过了就退坑了。</p><p>如果硬要让我总结在游戏上的得失，其实也没有一个言之凿凿的结论，很难说没有游戏我就会变得更好或是更坏。游戏是转移注意力的方式，让我在思想上没有准备的时候对痛苦麻木一点。</p><h2 id="生日"><a href="#生日" class="headerlink" title="生日"></a>生日</h2><p>M 重组了自己的家庭，我也因此多了一个异父异母的亲妹妹。</p><p>我称她为“领域外的妹妹”，当然，只是我暗自这么称呼的，也许有机会可以征求她的意见。这么叫也许是为了将“异父异母的亲妹妹”这个名号简化的可爱一点。本博客的<a href="https://loveofpeach.github.io/posts/db1a1b2e.html"> 双曲线讲义 </a>其实就是领妹中考前给她写的讲义。</p><p>今年生日的时候，M 打电话让我和他们一家出去吃饭，打开车门的时候，领妹就坐在里面。</p><p>我们之前在我外婆家（可能现在也算是她外婆？）见过一面。她个子不高，留着齐肩短发，白色上衣，那时她正把床当桌子，蹲着写语文题。这就是一张很普通的现代床，中国很多家庭都有这种款式，只不过没有席梦思。外婆家是农村典型的三间两厨，几经装修，很多老物件都丢掉了。比如正屋进门就能看见的，拿着寿桃、额头硕大的寿星像，上面写着繁体的“福如东海水，寿比南山松”，另外其两侧八列（如果没记错的话）长幅挂画，上面大概是春夏秋冬，梅兰竹菊之类的。小时候正屋里面的长桌上还有一款古式的钟，每到正午就会 duang~ 地响几声，这个钟貌似还保存着。长桌的下面有一个小缸，以前每年外婆家都会做点豆瓣酱，我至今还记得自己掀开盖子闻豆瓣酱，回过头来发现外公半裸着上身，一手撑在草席上，一手摇着蒲扇看着我的神情。最后，还有一张中式的床，这张床现在仍在正屋西间使用，上面挂着偏粉色的红色的蚊帐，正对着长了两个角的老式电视机。不过，现在东间有了一个新的电视机。</p><p><img src="https://pic1.zhimg.com/80/v2-e25f3693f89ebf81c97cf1b994085be0_1440w.webp" alt="59-1dot5.webp" title="类似于这种"></p><p>领妹坐在车后座，前面是 M 和她的男人。</p><p>领妹还是留着一样的短发。这次见面，已是她中考结束之后，高中之前军训的日子。领妹是请假出来的，她披着一件雪白的外套，衬着里面墨绿的军训衣，车窗外的阳光照亮她的脖子，胸脯微微隆起形成好看的曲线，她的下身还穿着军训裤，我不记得她是否戴着眼镜。</p><p>沉默。</p><p>我把她放在车上的帽子往她那靠了靠。</p><p>“大学里就能攒一套房了吗？”领妹看了我一下，然后回过去稍微低下头，很认真地疑惑道。</p><p>“怎么可能。”</p><p>此时我并没有和 F 和 B 住在一起。我住在 C 市相对郊区的地方，F 和 B 住在 C 市的某个镇上。否则他们也不能正大光明地开着车来小区带我。</p><p>“那你房子哪来的呀？”</p><p>我稍加思索了一番，房子是 F 和 M 的，将来是留给 B 的，说 F 买的也不好（因为必然会加上称谓），说 M 买的也不好（考虑到领妹），说 F 和 M 一起买的也不合适（考虑到前面的司机）。就和领妹说，家里买的呗。</p><p>大一睡前扯淡的时候，当时还单身的室友表达了强烈的脱单欲望，于是我献计：大伙合起来到鹤岗买个超迷你的房子，然后在校园里找对象的时候就说自己已经买了房，没向家里要钱 balabala… </p><p>“嗯，我还以为大学里就能攒起一套房了呢。我觉得我应该攒不下来。”</p><p>我们还在到处溜达找吃饭的地的时候，M 和她的男人被一个热情的大姐拦下了，于是我们就去吃烤鱼。</p><p>四人桌，M 坐在我的左边，领妹坐在我的对面。我一般不在餐桌上找话题，于是这个艰巨的任务就交给两位社会人士了。</p><p>“你妹说以后人们可能会吃丸子，就沙发上一躺，吃着丸子。”</p><p>“毒品？”</p><p>“不是。就是把各种营养啊，各种味道的肉啊蔬菜之类的东西混在一起做成丸子。以后人们只要吃丸子就好了，很方便，也节省时间。”</p><p>“那不就是狗粮？”</p><p>“哈哈哈。。。确实嗷，那样就和狗粮差不多。”</p><p>我们吃的很慢，中途还因为水不断蒸发汤越来越咸加了几次汤。M 知道我喜欢吃鱼，但不知道唯独烤鱼除外——也许生鱼片也要排除，虽然我没吃过。总之，我们吃完就离开了。自动扶梯上，我和领妹间错一阶站在后面，我们现在一样高了。这时候，我就想，她一定要拿手比划过来，比划我们的身高了。她果然难掩笑意地把手伸过来，从自己的额头处水平地划到我的额头前方，露出小小的得意神情。</p><p>分别的时候，领妹坐在车里，探出视线来朝我摆手：“生日快乐。”</p><p>F 并未记得我的生日。</p><h2 id="二战的准备和失利"><a href="#二战的准备和失利" class="headerlink" title="二战的准备和失利"></a>二战的准备和失利</h2><p>一刻也没有为毕业多愁善感，接下来赶到战场的是——考研二战！</p><p>第一个月无论如何都睡不着，辗转反侧之后还是去医院开了艾司唑仑。这也为最后的失利埋下伏笔。</p><center><table>  <tbody>    <tr>      <td></td>      <td>态度</td>      <td>方法</td>      <td>信息差</td>      <td>知识</td>    </tr>    <tr>      <td>一战</td>      <td>敷衍</td>      <td>无</td>      <td>巨大</td>      <td>没学完</td>    </tr>    <tr>      <td>二战</td>      <td>勉强</td>      <td>有</td>      <td>仍有</td>      <td>充分</td>    </tr>  </tbody>  <colgroup>    <col style="width: 20%;">    <col style="width: 20%;">    <col style="width: 20%;">    <col style="width: 20%;">    <col style="width: 20%;">  </colgroup></table></center><p>自认知识准备还是充分的，李林模拟卷最后130，140的样子，张宇的，超越的卷子，做的结果也都在博客里了。</p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/G89VUf64Z0SQuk" alt="59-2"></p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/UKTo2Tqr5wcxL7" alt="59-3"></p><p>考数学的前一天晚上硬是睡不着觉，或许是几年前信息竞赛的时候被 F 打鼾弄得睡不着觉，留下了心理阴影，吃了 2.5 粒安眠药，平时只吃一颗。睡倒是睡着了，考试的时候晕晕乎乎，出现了很多 2^3=9 这类错误，平时能做出来的题都没有做出来。本来自己也是对自己千叮咛万嘱咐，第一问没做出来有时候不妨碍做第二问，但考场上就是没看。这样下来不知道能有几分。</p><p>专业课按 408 准备的，那么多功夫全白费了，到考前最后一天才发现咸鱼上有卖往年试题的。操作系统部分应该没什么，算法题我按自己的写法，不合题目要求也不知道能拿几分。这里确是输给信息差了。</p><p>政治没法估分，英语应该还是正常水平。</p><p>最后的结局恐怕能捞到一个非全就不错了。</p><p>去自习室的路上有一段路，路面上划了很多线，我骑着自行车路过的时候常常压着这些线玩，想象两边都是悬崖。</p><p>某夜十一点，等滴滴打车的时候，路灯下，十二月的雪洋洋洒洒：我竟从盛夏学到了大雪。</p><h2 id="第一台电脑"><a href="#第一台电脑" class="headerlink" title="第一台电脑"></a>第一台电脑</h2><p>是的，考研后买了我的第一台电脑。之前大学里都是用的 B 的二手电脑。</p><p>虽然不抱希望，还是要准备复试的。旧电脑开机都很卡顿了。</p><p>Redmibook，不到 5k.</p><h2 id="书，影视"><a href="#书，影视" class="headerlink" title="书，影视"></a>书，影视</h2><p>报菜名环节，只说一些能想起来的，不一定全。</p><p>书：</p><center><table>  <tbody>    <tr>      <td>书名</td>      <td>都柏林人</td>      <td>小径分岔的花园</td>      <td>对联趣谈</td>    </tr>  </tbody>  <colgroup>    <col style="width: 18.8889%;">    <col style="width: 23.6667%;">    <col style="width: 32.4444%;">    <col style="width: 25%;">  </colgroup></table></center><p>动漫：</p><center><table>  <tbody>    <tr>      <td>番名</td>      <td>备注</td>      <td>番名</td>      <td>备注</td>    </tr>    <tr>      <td>物语系列全部</td>      <td>按时间顺序二刷</td>      <td>龙与虎</td>      <td>二刷</td>    </tr>    <tr>      <td>名侦探柯南</td>      <td>主线部分</td>      <td>我推的孩子</td>      <td>有马佳奈谢谢</td>    </tr>    <tr>      <td>Spy Family</td>      <td>part2 中间弃之</td>      <td>灰色的果实</td>      <td></td>    </tr>    <tr>      <td>灰色的迷宫</td>      <td></td>      <td>灰色的乐园</td>      <td>打戏燃</td>    </tr>    <tr>      <td>药屋少女的呢喃</td>      <td>穿越到后宫的现代人</td>      <td>夏日重现</td>      <td>剧情节奏优秀</td>    </tr>    <tr>      <td>AI 电子基因</td>      <td>看4集弃了</td>      <td>变态王子与不笑猫</td>      <td>还行</td>    </tr>    <tr>      <td>四叠半神话大系</td>      <td>二刷</td>      <td>四叠半时光机布鲁斯</td>      <td>二刷</td>    </tr>  </tbody>  <colgroup>    <col>    <col>    <col>    <col>  </colgroup></table></center><p>电影 &amp; 剧：</p><center><table>  <tbody>    <tr>      <td>电影名</td>      <td>备注</td>      <td>电影名</td>      <td>备注</td>    </tr>    <tr>      <td>壳中少女（压缩）</td>      <td>好看</td>      <td>壳中少女（燃烧）</td>      <td>好看</td>    </tr>    <tr>      <td>壳中少女（排气）</td>      <td>好看</td>      <td>末代皇帝</td>      <td>好看</td>    </tr>    <tr>      <td>唐红的恋歌</td>      <td>也就那样</td>      <td>零的执行人</td>      <td>也就那样</td>    </tr>    <tr>      <td>绯色的子弹</td>      <td>也就那样</td>      <td>万圣夜的新娘</td>      <td>也就那样</td>    </tr>    <tr>      <td>黑铁的鱼影</td>      <td>柯哀狂喜</td>      <td>流浪地球</td>      <td>（第二部）</td>    </tr>    <tr>      <td>利兹与青鸟</td>      <td>非常好看</td>      <td>想哭的我戴上<br>了猫的面具</td>      <td>至今已觉不新鲜</td>    </tr>    <tr>      <td>我不是药王</td>      <td>嗯</td>      <td>处女泉</td>      <td></td>    </tr>    <tr>      <td>犬王</td>      <td>银幕上的摇滚</td>      <td>铃芽之旅</td>      <td>一般</td>    </tr>    <tr>      <td>龙猫</td>      <td>挺好</td>      <td>魔女宅急便</td>      <td>好看</td>    </tr>    <tr>      <td>起风了</td>      <td></td>      <td>闪电侠一、二</td>      <td>垃圾</td>    </tr>    <tr>      <td>江户川柯南失踪事件～史上最糟糕的两天～</td>      <td>挺好</td>      <td>盗钥匙的方法</td>      <td>挺好</td>    </tr>    <tr>      <td>美国商业大亨传奇</td>      <td>挺好</td>      <td>别当欧尼酱了</td>      <td>还行</td>    </tr>    <tr>      <td>致深爱你的那个我</td>      <td>好看</td>      <td>致我深爱的每个你</td>      <td>好看</td>    </tr>  </tbody>  <colgroup>    <col style="width: 22%;">    <col style="width: 28%;">    <col style="width: 22%;">    <col style="width: 28%;">  </colgroup></table></center><blockquote><p>战场原：阿良良木君还真在处理什么事情，而且这次看来还是相当棘手的。我虽然没有那个时候的经历，但从文字上看，这次应该超过了春假时的程度。<br>羽川翼：果然你也这么想？<br>战场原：嗯，但是呢，从特意发这种信息这一点来看还算有所长进。以前的他可是只会盯着眼前呢。<br>羽川翼：是啊。<br>战场原：不行，电话打不通。不过，他毕竟是男孩子，也不用那么担心。好吧，等他回来看我跟他炫耀和羽川同学一起洗澡的事。<br>羽川翼：这也谈不上有什么效果吧。<br>战场原：就说羽川同学的身体曲线是这样…这里又是这样…如何？<br>羽川翼：不许用手比比划划的！<br>战场原：但这么一来，你遇到的那只虎只能靠我们自己对付了。<br>羽川翼：虎？但是那只虎已经…<br>战场原：嗯，我也曾想过那老虎莫非就是火灾的原因。难道不是？火灾的原因已经调查清楚了么？<br>羽川翼：不，那个还不清楚…<br>战场原：是吗，那可能是我「抢跑」了。</p></blockquote><h2 id="2023-的结束"><a href="#2023-的结束" class="headerlink" title="2023 的结束"></a>2023 的结束</h2><p>高中同学 Z 早上微信发消息出去搓一顿，可惜我作息颠倒，回复时已是下午，此君明日还须上班。</p><p>月底，和领妹一家外去搓了一顿，而后去超市买东西。领妹推着购物车玩很像我之前，加速，再把整个人重心压在推车上。我实在也没什么可买的，最后拿了丹麦的曲奇饼和不二家的棒棒糖，回到住所后也不知道为啥要买这个棒棒糖。</p><p>Well, Let’s call it a year.</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一类问题的新解法</title>
      <link href="/posts/f06381e8.html"/>
      <url>/posts/f06381e8.html</url>
      
        <content type="html"><![CDATA[<p>一种考研数学中某类题型的新解法，与其背后的几何意义有关。目前各平台的考研博主中均未见到此类解法。</p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>若 $f(x)$ 在区间 $[a,b]$ 上连续，则积分上限的函数 $\Phi(x)=\int_{a}^{x} f(x)\, {\rm d}x$ 在 $[a,b]$ 上可导：</p><script type="math/tex; mode=display">\Phi'(x)=\frac{\rm d} { {\rm d}x}\int_a^x f(t){\rm d}t=f(x) \quad (x\in [a,b])</script><p>一般地，若 $f(t)$ 连续，$g(x)$ 和 $h(x)$ 可导，则：</p><script type="math/tex; mode=display">\frac{\rm d} { {\rm d}x}\int_{g(x)}^{h(x)}f(t){\rm d}t=f[h(x)]h'(x)-f[g(x)]g'(x)</script><p>上式可形成几何直观：</p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/_SlyQL8kzBX8PO" alt="58-1"></p><p>这里 $h$ 和 $g$ 可理解为从 $x\rightarrow t$ 的映射。积分变量为 $t$ ，不妨设 $g(x)&lt;h(x)$ ，对 $f(t)$ 从 $g(x)$ 到 $h(x)$ 积分，$\int_{g(x)}^{h(x)}f(t){\rm d}t$ 的几何意义即是上图中的阴影面积。那么 $\frac{ {\rm d} } { {\rm d}x}\int_{g(x)}^{h(x)}f(t){\rm d}t$即是阴影面积对 $x$ 的变化率。为此，我们考察当 $x$ 获得一个很小的增量 $\Delta x$ 时，阴影面积将如何变化：</p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/3uP9q5TP-67ltD" alt="58-2"></p><p>显然，阴影面积的变化为上图中紫色和绿色曲边梯形的面积变化（可正可负）之和。</p><p>当 $x$ 获得增量 $\Delta x$ 时，$h(x)$ 的增量为：</p><script type="math/tex; mode=display">\Delta y=h'(x)\Delta x+o(h'(x)\Delta x)</script><p>当 $\Delta y$ 很小时，绿色曲边梯形的高可用 $f[h(x)]$ 替代。</p><p>因此绿色面积为：</p><script type="math/tex; mode=display">f[h(x)][h'(x)\Delta x+o(h'(x)\Delta x)]</script><p>同理紫色面积为：</p><script type="math/tex; mode=display">f[g(x)][g'(x)\Delta x+o(g'(x)\Delta x)]</script><p>因为 $\int_{g(x)}^{h(x)}f(t){\rm d}t$ 是从 $g(x)$ 积到 $h(x)$ ，所以绿色面积<strong>贡献</strong>为正，紫色为负。当然，也可以从 N-L 公式的角度理解，记 $f(t)$ 原函数为 $F(t)$ ，则 $\int_{g(x)}^{h(x)}f(t){\rm d}t=[F(t)]_{g(x)}^{h(x)}$ ，由此可知紫色前应当加个负号：</p><script type="math/tex; mode=display">\begin{aligned}\Delta \int_{g(x)}^{h(x)}f(t){\rm d}t & = f[h(x)][h'(x)\Delta x+o(h'(x)\Delta x)] \\     & - f[g(x)][g'(x)\Delta x+o(g'(x)\Delta x)] \\\end{aligned}</script><p>对上式两边同除 $\Delta x$ ，再令 $\Delta x \rightarrow 0$ ，即得：</p><script type="math/tex; mode=display">\frac{ {\rm d} } { {\rm d}x}\int_{g(x)}^{h(x)}f(t){\rm d}t=f[h(x)]h'(x)-f[g(x)]g'(x)</script><h2 id="三维情形的拓展"><a href="#三维情形的拓展" class="headerlink" title="三维情形的拓展"></a>三维情形的拓展</h2><p>三维的情形其实我在 <a href="https://loveofpeach.github.io/posts/12839668.html">几何角度下的一个公式</a> 这篇文章中已经介绍了。</p><p>当时是我初学这块内容时，觉得同济书的证明过于吓人，试图从几何角度看看能不能建立直观，于是诞生了上面那篇文章。至于为什么是初学？因为大一疫情的时候在家摆烂，二重积分之后的高数一丁点没听。还好老师捞了一把没有挂高数。</p><h2 id="应试中的应用"><a href="#应试中的应用" class="headerlink" title="应试中的应用"></a>应试中的应用</h2><p>这类题目的特征是，它往往会要你对一个看起来不太能用求导做的积分做一些蜜汁操作。按照上面的思路，我们完全可以霸王硬求导 (′▽`〃)</p><p>是的，这里有一个 <a href="https://yanwenzi.fuhaoku.net/">颜文字网站</a> ，我并不会真的在心里默默地记了很多颜文字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">QAQ</span><br><span class="line">QwQ</span><br><span class="line">qwq</span><br><span class="line">qaq</span><br><span class="line">=_=</span><br><span class="line">:)</span><br></pre></td></tr></table></figure><h3 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h3><p>先来看一道典型例题。你可以在 <a href="https://loveofpeach.github.io/posts/55931ee1.html">数二强化</a> 下的<strong>超越模拟题23</strong> pdf 第四页找到它。</p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/9M8xf1ZlWt9Loz" alt="58-3"></p><p>看到这个形式，很容易想到洛必达：分母是 t 的函数，记为 $f(t)$ ，分子也是 t 的函数。现在的问题是如何对 $f(t)$ 求导：</p><p>让我们循着之前的思路，思考导函数最初的意义，即变化率。将题目中的积分区域画出来，其实就是要求阴影面积对 t 的变化率。</p><p>那么照着之前的推导，就是求被积函数在最外面的曲线上的积分。这提示我们使用曲线积分。</p><p>过程都在上面的图里面了。</p><h3 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h3><p>上面的题型足以应付多数情况了，但是有一种例外！在这种情况下，照搬例一做法会得到错误答案，这是因为例一的积分区域、要求关于哪个变量的变化率天然地满足了一个限制条件。若无此限制条件，做法上还需进行调整才是。</p><p>下面的例子也补充了例一推导中疏漏的一处：</p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/j4VCgle3qV4cr9" alt="58-4"></p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/1oe9wwnJ79lmqE" alt="58-5"></p><p>你可以在 <a href="https://loveofpeach.github.io/posts/55931ee1.html">数二强化</a> 下的<strong>李林六24</strong> pdf 第16、17页找到它。</p><p>分析都在图里面了。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研数学 </tag>
            
            <tag> 高数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硬盘学习资料</title>
      <link href="/posts/a72e3cc4.html"/>
      <url>/posts/a72e3cc4.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>夫藏舟于壑，藏山于泽，谓之固矣，然而夜半有力者负之而走，昧者不知也。</p></blockquote><p>前一阵子，电脑的忽然死机让我有点担心数据的安全。于是买了一块硬盘备份数据，但思来想去，还是大厂商的云端硬盘更为安全。至于 blog 本身资料的备份，也可以设为不公开，保存在云上。</p><p>这里先放一些以前的旧资料，它们一开始是在一块看起来就非常不可靠的 32GB U盘上，现在保存在移动硬盘上。</p><p>虽然这些资料我大多都没看过，不过总会有需要的人吧。</p><p><a href="https://drive.google.com/file/d/1cH2VcvhQzRgvIb0mBKcUVpbXokWIAMDz/view?usp=drive_link">2016冬令营课件.zip</a> ，这里面的 ppt 导出 pdf 会丢失动画效果，因此就直接一整个压缩了：</p><p><img src="https://bu.dusays.com/2023/11/18/655844e283b26.png" alt="57-1（2016冬令营课件）"></p><p>树上 DP ：</p><div class="row"><iframe src="https://drive.google.com/file/d/1aCLi1pQKX97j-ZzU3JapP6E6OUYF56sb/preview" style="width:100%; height:550px"></iframe></div><p>数论选讲：</p><div class="row"><iframe src="https://drive.google.com/file/d/1YAAzJjKKbFpgv5aGyK8atn8OwAOGBJ3w/preview" style="width:100%; height:550px"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《龙与虎》短评</title>
      <link href="/posts/79ab37ca.html"/>
      <url>/posts/79ab37ca.html</url>
      
        <content type="html"><![CDATA[<p>第一次看《龙与虎》，大约是几年前。最近二刷完，总想写点什么，然而我在写点什么之前又总想看看别人的评论，最后总是以 “我想写的别人都写到了，而且更深、更广” 这样的结局潦草作罢。</p><p>下面是目前我看到的最好的分析文章了：</p><blockquote><p><a href="https://www.zhihu.com/question/23648757/answer/2030795324">怎么评价《龙与虎》这部动画？ - 黑色耳机线的回答 - 知乎</a></p></blockquote><p>还是说点自己的感想吧。也许在 Songbirds 的伴奏下，读者还能勉强对付我用生硬文字拼凑出来的零星思考。</p><html><center><head>    <meta charset="utf-8">    <title></title></head><body>    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="https://music.163.com/outchain/player?type=2&id=554242361&auto=0&height=66"></iframe></body></center></html><p>说到底，情感这种东西最重要的是共同的经历。我们只能遗憾地承认，放眼人海，很难说两个人是天造地设的一对，非君不可，在不同的世界线里（假设），因缘际会，难免目及旁人。</p><p>那么，对彼此特殊的部分也就是两人共同的经历和回忆了，这是别人无法拥有、也无法夺走的优势。</p><p>这也是为什么异地恋难以善终、极具考验——因为你缺席（absent）了。开心无法分享，痛苦独自承担，情感的维系要么是一种自我感动式的催眠、沉溺于一种对另一半的抽象感觉，要么是出于维护在分开之前就已然积累的深厚的共同经历——这已经证明了共同经历的重要性。每天视频电话煲，放下手机的时刻，是否有种欣喜之后的空洞、重又陷入孤独的焦灼和无奈？这个时候如果别人在场，又会如何？遇到困难的时候 TA 会依靠别人吗？阔别许久，是否会有同一性的混乱？这次见面，你又变了一点，下次见面又会变成什么样呢？会变成我不认识的样子吗？明明以前在一起的时候，别人都说你变了，我却不以为然地笑着，你就是你呀。但是分别了这么久，我喜欢的是过去的你，还是现在的你呢？那么我又如何呢？我变了吗，变了很多吗？变到失去你曾经喜欢的我的那些特质了吗？如果是的话，我岂不是一个夺走名字，继承记忆的鸠占鹊巢的冒牌货？</p><p>但尚可安慰的是，从共同经历的重要性出发，我们也算是有一条明路可走：建构意义，创造回忆。必须指出，<em>寂寞无聊是一种由单调引起的东西，生活老是千篇一律，漫长的时间就会缩短做一团</em>，这种缩做一团的时间在计算共同经历的时候权值会显得非常可怜吧？</p><p>以上只是我观察别人的异地恋的一些胡思乱想，一个母胎 solo 的人竟然能乱七八糟、纸上谈兵似的想了这么多关于恋爱方面的事，我不禁哑然失笑。这种在玻璃上描摹他人的行为，并用自己的想象填充细节，多少有点滑稽。</p><p>但是我的理论在《龙与虎》里得到了很好的体现不是吗？<del>虽然用动画来印证显得有点可笑。</del>当高须和大河在教室里被逼着表态的时候，他们再也不能对两人建立起的深厚羁绊视而不见——因为对方已经占据了视线的全部。</p><p>这也是《小王子》想要告诉我们的：</p><blockquote><p>我那朵玫瑰，别人以为她和你们一样，但她单独一朵就胜过你们全部。因为她是我浇灌的。因为她是我放在花罩中的。因为她是我用屏风保护起来的。因为她身上的毛毛虫是我除掉的。因为我倾听过她的哀怨，她的吹噓，有时甚至是她的沉默。因为她是我的玫瑰。</p></blockquote><p>我们不能用一句总结性的话高度概括一部动画，或是一部小说，一个人，那是一种傲慢，并将抹煞全部的故事性。但在这里，还请允许我斗胆一句，大河是在扭曲的家庭中长大，最终得到救赎的孩子。这是很好的故事，但观看结束之后，我如同几年前一样，也如同网上所说的 “看完《龙与虎》之后，人均抑郁一周” 那样，陷入了一种郁郁寡欢的情绪，我知道这是我的软弱，也许我还会像以前那样写下诸如 “我的精神长久地处于今宵酒醒何处的混沌状态，只不过映入眼帘的既不是杨柳岸，也没有晓风和残月” 这种病恹恹到令人发笑的中二句子，但最近几年，我终于明白，无论是否有他人的帮助和陪伴，作出改变的首先必须是自己——至少这次，让这种无谓的情绪快点结束吧。</p><p>我定好明天的机械闹钟，如是想。</p><p>你未来到此处时，此花与吾同归于寂；你来到此处时，则此花颜色一时明白起来。</p><p>什么时候我也能遇到这样的人呢。</p><p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.a322b2a206b49da0811aacf426758b05?rik=dAv0QHifXNRvyQ" alt="56-1"></p>]]></content>
      
      
      <categories>
          
          <category> 闲文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OUTSIDER：从毛利兰到有马佳奈</title>
      <link href="/posts/578147a1.html"/>
      <url>/posts/578147a1.html</url>
      
        <content type="html"><![CDATA[<p>毛利兰、约儿·佛杰、有马佳奈，这一类角色，她们的生活都被排除在剧情主线之外，但又是剧中的重要人物。这种割裂和冲突，部分原因可以归结于作者有意制造的党争，或者人物塑造的失策，<psw>“青山的本意是好的，人设表现的时候歪了”</psw>。不过我倾向于分析人物时不把作者的意志搬进来，而总是从剧情人物本身寻找解释，这样比较有趣。</p><p>作为对比，还须观察两个角色：灰原哀、战场原黑仪。灰原深度参与了剧情冲突的主线，而战场原在脱离非日常后，成为阿良良木历在非日常和日常之间游走的桥梁，在朋友需要的时候亦有亮眼表现。灰原和战场原是两个塑造非常成功、很有魅力的角色，<del>很符合大家对“现代女性”的想象</del>，<psw>原神🙏</psw></p><div class="note info flat"><p>文章包含博主的主观臆测和过度解读，没有考据，也不会详细介绍剧情。只是自娱自乐，或者供恰好看过《名侦探柯南》《Spy Family》《推しの子》《物语系列》的人打发时间。</p></div><p>兰最大的设定，空手道高手，其实在人物表现上是立不住的。她并没有给人一种高武力值应有的沉稳和外溢的安全感，这点可以和京极真对比。早期的时候，兰更像是一个“柯南报警器”，作用是看到命案现场用尖叫把柯南叫过来。后期似乎脱敏了，但兰的空手道功夫也仅仅限于在大局已定的时候帮助柯南收尾，制服暴走的犯人，起到一个锦上添花的作用（这个生态位还经常被其他角色替代），很少推动剧情的发展。再如兰的怕鬼设定，就更加可疑了。</p><p>这种脱离具体细节塑造和行为逻辑支撑的设定，只能叫做纸片人的“萌点”。比方说，在现实中你不可能真的期待一个手如柔荑、肤如凝脂的娇小妹子拿一把 AK47 突突敌人，但在二维世界里就可以：</p><p><img src="https://bu.dusays.com/2023/12/27/658bad8c339aa.png" alt="55-1.png"></p><p><img src="https://bu.dusays.com/2023/12/28/658d5d8e513cd.gif" alt="55-2.gif" title="不好意思其实我们原神是 3D 游戏"></p><p>因此兰的空手道设定也只是没有支撑的“萌点”而已，不能作为其“强大”的佐证。当然，这里需要对“勇气”和“强大”做出区分，强大并不是勇气的必要条件。兰当然有可贵的勇气。遗憾的是，虽然勇气在现实世界是稀缺的品质，但在二次元里却是一种泛滥的通货，尤其是《名柯》里，凡正面角色就没有一个没有勇气的。</p><p>事实上，毛利兰不仅不是一部分人想象的“强大独立的现代女性”，相反是一个典型的大和抚子式角色，空手道高手的设定落在她身上，在二维世界与现实世界微妙差异的作用下，甚至加强了她的“大和抚子性”。</p><blockquote><p>大和抚子：类似于中国人口中的“贤妻良母”、“贤内助”。</p></blockquote><p>早期的某一集中，一位普通男高路人向兰表白，遭到拒绝后仍纠缠不清，兰直接一拳（还是一腿忘了）砸弯了旁边的电灯柱，吓跑男高路人，而柯南在旁边目睹了全过程。</p><p>其实这个细节在传统男性视角下会非常有意思。兰的空手道功夫使她即使在外力下也可以保全自己的贞洁，这卸下了男性保护女性的义务，使他们放心，但她竟完全没有借着空手道，建立自己内心的秩序，在心理上划出缓冲区，保持一定的独立性。她还是那个将新一的半句话奉为圭臬，还是那个为犯人拉上窗帘，阻止警方狙击的人美歌甜小姐姐，没有自己的思考，很多时候表现为新一的依附。这种不平衡，即外在的强大和内心的弱小，势必会使自己沦为被依附者的武器，发挥物的功用。这种不平衡同样也表现在，心理上处于与自身外在力量不相称的对男方的守势的女性，会让传统观念的男性感觉自己占了便宜。当然，这里并不指新一，而是银幕外的观众。我确信大部分人不会想这么多，反而会认为想这么多的人脑子有病，心理阴暗，但他们一定潜意识里对这个细节感到满意。</p><p>在这种视角下，毛利兰简直比大和抚子还要大和抚子，还要贤惠，还要让人放心。</p><div class="note warning flat"><p>Spy Family 博主只看到了 Part2 的中间部分，因此只讨论在这之前的剧情。</p></div><p>与之非常类似的是 Spy Family 的约儿·佛杰。</p><p><img src="https://bu.dusays.com/2023/12/27/658bb5146539d.png" alt="55-3.png" title="我有一个住在澳门的威尼斯朋友"></p><p>约儿·佛杰设定上是一个杀手，组成家庭的初衷也是为了更好地执行暗杀的任务，但其所服务的组织、暗杀任务，只在第一话登场的时候提到。之后就完全掉线，约儿·佛杰成为 aniya 的保镖，时不时表现出一点病娇的属性：左手一把沾满红色液体的刀，右手提着渗出红色液体的手提包站在公寓面前，表情阴暗，让观众角色以为刚刚进行了可怖的暗杀——但是镜头一转，原来那红色液体是番茄汁，约儿·佛杰正打算去向同事请教如何做饭。</p><p>这完全就是“萌点”了好吧，<del>虽然我没发现哪里萌了。</del></p><p>而柯哀受欢迎的很大原因，在我看来，是因为，现代人在精神上是孤独的，这种孤独使他们幻想一种亲密无间的关系。</p><p><img src="https://bu.dusays.com/2023/12/27/658bba369c804.png" alt="55-4.png"></p><p>小时候读《三国》或是《三侠五义》的时候，常常能看到一个人拉着一个人的手倾诉衷肠的情节，“啊贤弟，愚兄以为…”这种，这要放在现代人身上鸡皮疙瘩早掉一地了。现代人的日常交流丢弃了严肃性，只在鲜少的场合，只对鲜少的个人流露真情（或者没有？），因此他们是孤独的。本博客就是一例，博主在日常生活中就没什么表达欲，国内社交平台近两年几乎没有发言，评论都不参与的那种。把表达欲倾泻在这个博客里倒是很好的做法，现今的社会环境，谁也不知道自己什么时候会因言获罪。</p><p>于是，<del>我们</del>柯哀党发现，CA 之间在新兰关系的粉色泡泡之上，还有一种稀缺可贵的特质，即消解孤独的互相信任、互相理解。</p><p>但距离感也不是越小越好的。如果两个人对对方的一切过往都知根知底，一切想法都了然于心，任何一丁点的情绪波动都能量子纠缠似的立刻察觉，那么完全可以说其实这两个人是一个人，一份意识在两具肉体里的备份。举例来说，甲试图安慰受伤的乙，但是因为二人心有灵犀，甲的想法，包括安慰的逻辑，甲视角下的事件，这些在产生的瞬间，乙必然也了解了。换言之，甲根本不需要进行这个安慰。由于思维同步，二人的生活经验也是共享的。那么甲在不在乙的身边又有什么影响呢？乙不还是一个人吗？</p><p><img src="https://bu.dusays.com/2023/12/27/658bc6097a109.png" alt="55-5.png"></p><p>因此亲密关系中的爱只能由他者提供，这个他者必然是与自己有所不同的。上面只是一个距离为零的极端情况，现时中自然是绝无可能的。再看看距离很小很小的次极端情况：阿良良木历和忍野忍。由于二次元的事您少管的原因，忍野忍被束缚在历的影子里，物理距离几乎为零，总是一致行动，一方也能感受到另一方的心理动摇，实际上这个设定是十分危险的。在后期的动画中，小忍会吃历的醋，但是在那较久之前，历和战场原办事的时候，按照“一方能感受到另一方的心理动摇”的设定，其实是细思极恐的。只是由于二人性格上的原因，忍野忍渴求爱而历恰好是个撞到小忍的博爱者，才能达到一种和谐的亲密关系。<psw>忍：只要你爱我并且愿意为我而死就行。历：我爱你并且愿意为你而死的同时也爱着别人。</psw></p><p>而 CA 之间的距离则是比较合适的，他们既有一致行动的紧密，也有分工配合的默契。一如《物语系列》中战场原和羽川翼的对话：“真的不去吗？” “嗯，既然他没有邀请我们去，说明暂时还没有这个必要，而且我们也有我们这边的事情要处理吧。” （大概是这么说的，记不太清）</p><p>《推しの子》中的有马佳奈则是比较特殊了，她有着灰原哀的头脑但是毛利兰的命运，主角出于“保护她不受伤害”的心理动机，将她排除在主线之外。哎，写到这就不想写了，好像也蛮对不住人家的。</p>]]></content>
      
      
      <categories>
          
          <category> 闲文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS 强化</title>
      <link href="/posts/b161b9bb.html"/>
      <url>/posts/b161b9bb.html</url>
      
        <content type="html"><![CDATA[<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/XARSSwlpuYvBRT" alt="54-1-1"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/GqgrAHwQHlbosT" alt="54-1-2"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/D_efmTaVAl-duO" alt="54-1-3"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/1QQpi9ysJ1Nv5c" alt="54-1-4"></p><h2 id="栈、队列、数组"><a href="#栈、队列、数组" class="headerlink" title="栈、队列、数组"></a>栈、队列、数组</h2><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/NrSkDGBxnjeYCV" alt="54-2-1"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/xILitM3Kx453zv" alt="54-2-2"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/JxdYxCt9AKvrM6" alt="54-2-3"></p><h2 id="树、二叉树"><a href="#树、二叉树" class="headerlink" title="树、二叉树"></a>树、二叉树</h2><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/RzR8jeFgUeYipb" alt="54-3-1"></p><p><img src="https://bu.dusays.com/2023/11/11/654f5806ef75e.jpg" alt="54-3-2.jpg"></p><p><img src="https://bu.dusays.com/2023/11/11/654f58066928c.jpg" alt="54-3-3.jpg"></p><p><img src="https://bu.dusays.com/2023/11/11/654f58051df1a.jpg" alt="54-3-4.jpg"></p><p><img src="https://bu.dusays.com/2023/11/11/654f58063ae3b.jpg" alt="54-3-5.jpg"></p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/KEIv6MGM5jy_mT" alt="54-4-1"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/5hprMCgLmVrw2G" alt="54-4-2"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/qNv7DAWXCywuCd" alt="54-4-3"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/dUxZT2sAUNn212" alt="54-4-4"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/DYyXamZAhp2Giw" alt="54-4-5"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/22ugockT4IRCqD" alt="54-4-6"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/gPXtK7Bis2cE5X" alt="54-4-7"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/dy0IS0V955L0AB" alt="54-4-8"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/JS_yqyvH_0u9Bj" alt="54-4-9"></p><p>因为王道的算法太麻烦了，不利于人脑模拟算法执行，所以针对 AOE，我给出一个基于 DAG 上动态规划的算法。</p><p>定义 $S_i$ 为顶点 i 到终点的最长路径长度，则：</p><script type="math/tex; mode=display">S_i= \begin{cases}\underset{(i,j)\in E}{\overset{}{\mathrm{MAX}}}(S_j+\mathrm{len}(i,j)) & i \ne \mathrm{end} \\0 &i=\mathrm{end}\end{cases}</script><p>显然这个算法的时间复杂度是 $O(|E|)$ 的，代码递归地写就可以。</p><p>那么找出关键路径就很方便了：</p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/0JPB2Pn2zQJ-aT" alt="54-4-9dot5"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/PsPTK3e4HJnh2T" alt="54-4-10"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/CX7B-2fwr6qhrx" alt="54-4-11"></p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/H91sedOcopFXM8" alt="54-5-1"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/vxuDjsATcmDc_o" alt="54-5-2"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/tnClkF0eEavuUC" alt="54-5-3"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/Lt_P3J6s3v2wFF" alt="54-5-4"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/sVKMLOLg6srvqt" alt="54-5-5"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/f_mAMTQPoqAHmz" alt="54-5-6"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/qwxBh2npMM69iw" alt="54-5-7"></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/jSO8eGujXq3doM" alt="54-6-1"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/XALx3u4WMch-zz" alt="54-6-2"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/pJSnHUqMVro-3m" alt="54-6-3"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/-NuOAU-Hme-KuF" alt="54-6-4"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/ncVQoXwLgBylw6" alt="54-6-5"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/zrCDvln51cV1wI" alt="54-6-6"></p><p>运用快排的划分思想：</p><div class="row"><iframe src="https://drive.google.com/file/d/1XhE73Op43g3JI2i6B73Ii-CNNPLKprC6/preview" style="width:100%; height:550px"></iframe></div><h2 id="结课测试"><a href="#结课测试" class="headerlink" title="结课测试"></a>结课测试</h2><div class="row"><iframe src="https://drive.google.com/file/d/1sJKVhNZCxQVLIVRd7cP3jG2Qh51VrhqC/preview" style="width:100%; height:550px"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物理复习讲义（一）</title>
      <link href="/posts/1f9ef124.html"/>
      <url>/posts/1f9ef124.html</url>
      
        <content type="html"><![CDATA[<p>之前大学的某一年暑假，辅导了一个学生的高中物理。只有 10 天，每天 2 小时，基础不牢，让我从头开始，最后好像就把运动学的部分讲完了？印象最深的是硬杆弹簧一类的题目。</p><p>这是第一节课的讲义，后面的就没有用 markdown 写了，因而没有留存。我暂且把它挂在博客里。</p><hr><blockquote><p>配合小题狂做必修一使用</p></blockquote><h2 id="第一章-运动的描述"><a href="#第一章-运动的描述" class="headerlink" title="第一章 运动的描述"></a>第一章 运动的描述</h2><h3 id="知识点梳理"><a href="#知识点梳理" class="headerlink" title="知识点梳理"></a>知识点梳理</h3><p><strong>质点</strong>：理想模型，忽略大小形状，具有质量。</p><ul><li>具体问题具体分析</li></ul><p><strong>参考系</strong>：描述物体运动时选定的参考。</p><p><strong>位移</strong>：矢量，由起点指向终点，大小和方向。</p><p><strong>速度</strong>：位移与发生该位移的时间的比。 $v=\Delta x/\Delta t$</p><ul><li>$1m/s=3.6km/h$</li><li>$v-t$图像，与$x-t$图像的关系，几何意义</li></ul><p><strong>加速度</strong>：速度的变化率。 $a=\Delta v/\Delta t$</p><ul><li>加速度具有方向，在未声明正方向的题目中需自行声明。</li><li>$v-t$图像中的加速度。</li></ul><h3 id="典型例题"><a href="#典型例题" class="headerlink" title="典型例题"></a>典型例题</h3><p><strong>p5第4题，p5第7题，p18第11题</strong>：设未知量，最后相消得到答案</p><p><strong>p10第11题</strong>：$v-t$图像中的加速度。</p><h2 id="第二章-匀变速直线运动"><a href="#第二章-匀变速直线运动" class="headerlink" title="第二章 匀变速直线运动"></a>第二章 匀变速直线运动</h2><h3 id="知识点梳理-1"><a href="#知识点梳理-1" class="headerlink" title="知识点梳理"></a>知识点梳理</h3><p><strong>匀变速直线运动</strong>：加速度不变的直线运动。</p><ul><li>在辨析题中注意区分，例如圆周运动可以作为很多反例</li></ul><p><strong>通过$v-t$图像理解$x=\dfrac{1}{2}at^2+v_0t$的导出</strong></p><ul><li>并通过类似方法理解匀变速运动中中点时刻速度等于平均速度</li><li>平均速度的例题，p27第4题</li></ul><p><strong>联立$x=\dfrac{1}{2}at^2+v_0t$与$v=at+v_0$得到$v^2-v_0^2=2ax$</strong></p><p><strong>重要推论</strong>：$\Delta x=aT^2$</p><ul><li>含义：匀变速直线运动中，任意相等的连续时间间隔$(T)$内位移之差为定值$aT^2$</li><li><p>拓展(可忽略)：对于一个符合二次函数的数列，例如：</p><script type="math/tex; mode=display">1,4,9,16,25,... (1)</script><p>逐项作差：</p><script type="math/tex; mode=display">3,5,7,9,...(2)</script><p>对$(2)$继续作差：</p><script type="math/tex; mode=display">2,2,2,...(3)</script><p>将得到定值。其中数列(1)可理解为位移，数列(2)理解为速度。而数列(3)中的数与二次函数的二次项系数有关，在匀变速直线运动中与加速度有关。<strong>推论$\Delta x=aT^2$实质上与此类似，</strong> 在$x-t$图像（$x=\dfrac{1}{2}at^2+v_0t$为二次函数）上等距取点，算出函数值作差（第一次作差）得到等间隔内的位移,将此位移继续作差（第二次作差）得到定值。</p></li><li><p><strong>拓展(尽量掌握)</strong>：第$m$个时间$T$内与第$n$个时间$T$内的位移差$\Delta x=x_m-x_n=(m-n)aT^2$</p></li><li>例题： p40第9题</li></ul><p><strong>初速度为0的匀加速直线运动中几个重要的比例式：</strong></p><ul><li>时间等分：使用几何方法在$v-t$图像中理解</li><li>位移等分：通过前$x$，前$2x$，$…$,前$nx$位移时的速度之比为：<script type="math/tex; mode=display">v_1:v_2:v_3:...:v_n=1:\sqrt 2:\sqrt 3:...:\sqrt n</script>推导方法，由$v^2-v_0^2=2ax$导出</li><li>位移等分：通过第一个$x$,第二个$x$，$…$,第$n$个$x$所用时间之比：<script type="math/tex; mode=display">t_1:t_2:t_3:...:t_n=1:(\sqrt 2-1):(\sqrt 3-\sqrt 2):...:(\sqrt n-\sqrt{n-1})</script>推导过程及应用均由例题展示</li><li>例题： p29第7题，p36第10题</li></ul><p><strong>自由落体运动</strong>：匀变速直线运动的一种特例，$a=g$，$v_0=0$</p><script type="math/tex; mode=display">v=gt,x=\dfrac{1}{2}gt^2</script><p>例题，p37第6题，p38第8题</p><p><strong>竖直上抛运动</strong>：仍然是匀变速直线运动的一种</p><p><strong>实验 - 小车速度随时间的变化规律</strong>注意点:</p><ul><li>交流电频率$50Hz,$打点计时器打出的两点时间间隔为$0.02s$</li><li>小车释放位置：靠近打点计时器</li><li>先接通电源打点，后释放小车</li><li>改变钩码数量，重复实验</li><li><strong>实验方案创新</strong>，频闪照相，等效替代等，通过$v-t$图像理解剪下纸带的长度</li></ul><p>例题：p21第10题</p><h3 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h3><p><strong>利用$x-t$图像与$v-t$图像寻找解题思路</strong></p><ul><li>在选择题中减少计算量，例题：p25第5题，p27第7题，<strong>p39第4题</strong></li><li>典型分析，p34第11题，数学方法寻找思路。匀加速匀减速直线运动$(a\ne0)$在$x-t$图像中是二次函数<br>设曲线 <script type="math/tex">b:x=-t^2+v_0t+C</script> 在切点处 $b$ 与 $a$ 速度相等，即2m/s，又 $v_b=-2t+v_0$ ，得 $v_0=8$ .切点坐标 $(3,8)$ 代入曲线 $b$ 方程，得 $C=-7$ .<br>再根据$x-t$图像的几何意义答题。</li></ul><p><strong>利用匀变速直线运动的对称性逆向思考</strong></p><ul><li>例题，p26第10题，<strong>p39第7题</strong></li></ul><p><strong>公式$v^2-v_0^2=2ax$建立方程组</strong></p><ul><li>由该公式列出不同等式，并通过调整系数联立各等式的左边。例题p30第9题</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高中物理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>妙联趣谈</title>
      <link href="/posts/10746325.html"/>
      <url>/posts/10746325.html</url>
      
        <content type="html"><![CDATA[<p>最近淘得一本旧书，名《妙联趣谈》，安徽文艺出版社。</p><p>OCR 图片转文字，校对一次。转载部分内容：</p><p>一，一些有趣的对联。</p><p>二，网上搜不到内容或是背景故事的对联。只用了 Google 和必应，也许搜的不够全面。</p><p>除少数字的用法、过长的段落分段外，不作任何修改。如果需要看繁体字，右下设置有简繁切换，但是不能保证完全正确对应。</p><blockquote><p>修改一览：<br>丫环 -&gt; 丫鬟<br>单引号误作双引号</p></blockquote><p>其中部分对联在网上搜得诸多版本，各有不同；部分背景故事疑有杜撰成分。</p><h2 id="已有"><a href="#已有" class="headerlink" title="已有"></a>已有</h2><h3 id="东坡挽朝云"><a href="#东坡挽朝云" class="headerlink" title="东坡挽朝云"></a>东坡挽朝云</h3><blockquote><p>不合时宜，唯有朝云能识我；<br>独弹古调，每逢暮雨倍思卿。</p></blockquote><p>苏东城生活在内外矛盾日益尖锐的北宋年代。他政治思想比较保守，但有自己的独立见解。他反对过王安石新法在实施过程中所出现的流弊；也反对司马光那种对新法一概废弃的错误做法。在三十多年的仕途中，屡遭贬谪，怅恨不能自己。</p><p>东坡有两个丫鬟，名叫朝云、暮雨。有一次东坡扪着肚皮笑着问家人：“这里面装的是什么？” 大家都说是满腹经纶，只有朝云说：“我看是一肚子不合时宜的牢骚。” 颇得东坡赏识。不久，朝云病故，东坡便作此联哀挽她。这真是伯牙绝弦，更无知音了。</p><blockquote><p>陶之二评：<br>朝云吐槽犀利，东坡表现出自嘲精神。</p></blockquote><h3 id="哑联"><a href="#哑联" class="headerlink" title="哑联"></a>哑联</h3><blockquote><p>狗啃河上（和尚）骨； （东坡出）<br>水流东坡诗（尸）。   （佛印对）</p></blockquote><p>苏东坡被贬黄州后，游赤壁，访沙湖，赏心悦目，写下了“大江东去浪淘尽千古风流人物”的名句，倒也不乏兴味。有一天晚上，他邀好友佛印和尚泛舟长江之上，清风徐来，水波不兴，轻舟荡漾，临风把酒，好不痛快。酒过三巡，佛印向东坡索句。少顷，东坡用手向左岸一指，笑而不语。佛印循指望去，只见岸上农夫披星戴月，荷锄而归，不解东坡之意，待回首向东坡问时，只见东坡笑而不答，自斟自喝，非常得意。佛印好不气恼，再向河岸上远眺，才发现岸上有一条大黄狗正在狼吞虎咽地啃东西，才恍然大悟，原来苏东坡是借此情景来打趣取乐的。佛印也不甘示弱，急中生智，随即将手中题有苏东坡诗句的一把扇子拋入水中，然后从苏东坡手中夺过酒壶，也自斟自饮起来，苏东坡一见此举，心照不宣，抚掌大笑，这就是传之于后世的双关哑联。</p><blockquote><p>陶之二评：<br>雅。</p></blockquote><h3 id="姑嫂赛联"><a href="#姑嫂赛联" class="headerlink" title="姑嫂赛联"></a>姑嫂赛联</h3><blockquote><p>嫂嫂看书——心思“汉”；<br>姑姑追禽——手拉郎！</p></blockquote><p>据说苏小妹的嫂嫂——苏东坡的夫人正在看书。苏小妹蹑手蹑脚地走过去从嫂嫂手中将书抢过来一看，原来是《三国志平话》，并且正在看关云长“身在曹营心在汉”这一节。苏小妹素以聪明灵巧闻名，今天她要借嫂嫂看书来开她一个玩笑。</p><p>于是逗嫂嫂说：“好啊，你在偷看《杨太真外传》（当时禁止妇女看此书），我一定要对大哥讲。”嫂嫂知道小姑伶俐风趣，忙接过话题说：“我看太真是公开的，怕什么！你才真是在房里躲着看‘太真’呢！”小妹这一下弄得很难堪，忙以退为进地说：“好了，好了，你可真厉害，我不冤枉你，你看的是《三国志》中关羽‘身在曹营心汉’对吗？我赞你一句：嫂嫂看书——心思‘汉’。”（双关语，“汉”即男子汉），这一下小妹总算转败为胜了，她又反辱相讥地补充一句：“我说的完全是事实，没有冤枉你吧！”小妹以为这一下可以封住嫂嫂的嘴了，真是手舞足蹈，得意忘形。恰巧，这时一个小喜鹤飞过来了，苏小妹击败嫂嫂之后，和丫鬟们追逐小喜鹊玩去了。东坡夫人站在一旁干生气，想不出一个好词儿来回击这个能小姑。忽然她灵机一动：小妹己经许配给了秦少游，“禽”与“秦”同音。她忙跑去喊住小妹说：“我也回敬你一句：‘姑姑追禽——手拉郎！’ 好吗？巧吧！”小妹羞红了脸，撇娇逞强地说：“我不许你这样欺侮人。”一头撞到嫂嫂怀里，真真假假地哭闹了一番⋯⋯</p><blockquote><p>陶之二评：<br>苏小妹可爱。</p></blockquote><h3 id="华罗庚的妙对"><a href="#华罗庚的妙对" class="headerlink" title="华罗庚的妙对"></a>华罗庚的妙对</h3><blockquote><p>妙人儿，倪家少女；<br>搞长弓，张府高才。</p></blockquote><p>据说本世纪初，在北洋军阀统治时期，它的嫡系安徽督军倪嗣冲有一个女儿名叫倪妙。倪妙读了几句书，也懂得古诗与对联，妄自尊大，骄横不可一世。她要找一个才貌双全的女婿，经过许多人的介绍，都不合心意。于是她出了一个“求乘龙快婿”的上联，即“妙人儿，倪家少女！”声称：只要有个青年能对出下联，不论家世，均可作为配偶。此讯传出后，安庆以及全国各地不知有多少痴情人，煞费苦心，想对出下联，以便高攀名门小姐，荣耀一生。可是，尽管喧噪了一时，都没有人能对出。认为这是拆字对。“少女”联结为 “妙”，“人儿”合起为“倪”，所以无法对出。被人称为“安庆绝对”。</p><p>一九八一年四月，华老来肥讲学，住在稻香楼宾馆。一天，在宾馆客厅踱步时，遇见女服务员小倪。华老脱口而出，吟出此上联。恰好科技大学派来照料华老的张医生在他身旁。华老即隐喻“张”，接出下联。对得轻松酒脱，颇有雅俗共赏之趣，引得全场大笑。六十年前的“绝对”，被华老一语道破，当年未能对出的痴情儿郎，能在须眉 斑自之际，惊闻此讯，能不发出了却终生一宿愿之感叹吗？</p><blockquote><p><strong>注：</strong><br>此为千古绝对，下联颇多。书中背景故事疑有杜撰。 参考：<br><a href="https://tieba.baidu.com/p/693394314">唐河文化吧_妙人儿倪家少女</a><br><a href="https://tieba.baidu.com/p/1173092288">心中梦吧_妙人儿倪家少女:求下联</a><br><a href="https://zhidao.baidu.com/question/2059107661514273227.html">为什么说倪家少女是妙人儿？</a><br>陶之二评：<br>上联尽显倪家少女的聪慧自信。下联对的不是很好，虽然陶某也对不出。</p></blockquote><h3 id="寇准作联回辽"><a href="#寇准作联回辽" class="headerlink" title="寇准作联回辽"></a>寇准作联回辽</h3><blockquote><p>朝无相，营无将，你国中利害相将，将来必散；<br>天能度，地能量，我皇上宽宏度量，量也无妨。</p></blockquote><p>宋真宗时，当时北方大辽经常侵犯中原。他们深知宋朝武备不修，国内虚弱，因而拟出上联交使者带来，嘲笑并侮辱宋朝。并且试探宋朝有没有勇气敢于用强硬的态度回击他们。当时朝中文武百官看到此联，认为这是番邦下的战表，均惊慌失措，相对无言。唯有寇准镇定自若，义愤填膺地奋笔疾书，当即写出下联，狠狠回击了番邦。辽王接到此下联后，认为不能小视宋朝，还是以议和为好。</p><h3 id="昆明大观楼长联"><a href="#昆明大观楼长联" class="headerlink" title="昆明大观楼长联"></a>昆明大观楼长联</h3><blockquote><p>五百里滇池，奔来眼底，披襟岸帻，喜茫茫空阔无边。看东骧神骏，西翥灵仪，北走蜿蜒，南翔缟素。高人韵士，何妨选胜登临！趁蟹屿螺洲，梳裹就风鬟雾鬓；更蘋天苇地，点缀些翠玉丹霞，莫孤负四围香稻，万倾晴纱，九夏芙蓉，三春杨柳。<br>数千年往事，注到心头，把酒凌虚，叹滚滚英雄谁在！想汉习楼船，唐标铁柱，宋挥玉斧，元跨革囊，伟烈丰功，费尽移山心力。尽珠帘画栋，卷不及暮雨朝云；便断碣残碑，都付与苍烟落照。只赢得几杵疏钟，半江渔火，两行秋雁，一枕清霜。</p></blockquote><p>昆明大观楼是清代康熙二十九年（公元一六九〇年）经王继文建造的。咸丰七年 （公元一八五七年）被兵火所毁；同治五年 （公元一八六六年）又由马如龙重修。修复后的大观楼，殿阁耸峙，绿树成萌，湖光山色，相映成趣。有揽胜阁、涌月亭、观稼堂和“蓬莱别境”等胜景，是我国著名的游览胜地。大观楼上的长联系清代诗人孙髯所作。这是一副誉满中外的著名对联。上下联共一百八十字，世称天下第一长联。其中描写景物，陈述史实，反复低徊，一唱三叹，确实可以当作一篇优美的抒情诗。</p><p>就其内容来看，上联是“喜”，尽情领受眼前佳景。“喜”字是整个上联的意脉。作者一开始就抓住了滇池的特征，从寥廓的空间落墨，写眼前佳景，起势非凡，除暗点大观楼的地理位置，还透露出作者登临大观楼，饱览汪洋浩瀚的滇池时的喜悦。接着用一“看”字，作为四个排偶句的尖头领字。从东、南、西、北四个方面，对周围山峦的情态，用“骧、翥、走、翔，四个声调各异的动词，作了动态的刻画，把山峦描写得很灵动，很有生气，真可以说是写活了。</p><p>接着用 “高人韵士”一转，由景转到人。“何妨选胜登临”，紧紧承上而来，是说如此风景佳丽的名胜，值得登临一览，趁着这螺状蟹形的洲屿扮妆得象仕女那样，具有淡雅丰姿的美好时节，更加上水中青萍、滩头修苇，凌空翠鸟，照眼红霞的迷人最色，何不来此一游！最后，作者把思路推开一层，用不同季节而又富有地区特征的香稻，晴纱、芙蓉、杨柳，来渲染大观楼的迷人景色。满眼风光长画卷，整个上联描绘的这幅画面，层次分明，色彩绚丽，景物浓淡相宜，动静相生。艺木地再现了滇池风物，字里行间充满着诗人热爱祖国河山的美好感情。没有游览过昆明大观楼的人，读了这副上联，会感到这里的风光着实令人神往。</p><p>下联是“叹”，依次陈述历史沿革。 “叹”字成为整个下联的意脉。上联从广阔空间着墨，下联则从旷远的时间下笔。作者先用 “注到心头” 一句奠定怀古基调，又用 “叹”自然过渡到历史的追怀。接着用一“想” 字作为下面四句的尖头领字，统领 “汉” “唐” “宋” “元” 这四则与云南有关的历史典故，说明自汉唐以来，滇池就是一处青史著称的胜地。接着作者以“伟烈丰功，费尽移山心力”再总承一句表示对古代英雄的赞美。然后，笔锋陡转，指出：尽管帝王的基业一时繁华，也禁不住政治风云的变化，即使是昔日宣扬封建帝王的碑碣，也已折断或字迹模糊，笼罩在黄昏的烟霭之中，倒卧在残阳的斜照之下。诗人感叹风物虽好，却是人世沧桑，碑碣虽存，但为历史陈迹。从而呼应了前文的“叹滚滚英雄谁在”一句。最后以凄凉肃杀的秋景作结，烘托了浓重的凭吊气氛，表现出凄清苍凉的情调，预示着封建王朝不可避免的衰亡的命运，从中不难窥到作者因盛世的“繁华春去”而产生对现实严重不满与深切失望的心境。这种心境在当时正直爱国的文人中，是有广泛的代表性的。</p><p>就艺术上来看，全联基调很象北宋范仲淹的名篇《岳阳楼记》。写岳阳楼，离不开洞庭湖，因为洞庭湖是“巴陵胜状”，是岳阳楼的 “大观”。同样的道理，写昆明大观楼，势必要写滇池，才能见出此地的风光，可见此联构思的奇巧。</p><p>全联共一百八十字，没有一个重复的宇，这真是难得的。大观楼这副对联，以字数论还不是我国最长的对联，四川江津县临江城楼联共有一千六百一十二个字。然而，大观楼长联叙事抒情紧紧结合，对仗工整，字句典雅，情景交融，气势不凡，洵属对联中之杰作。</p><blockquote><p><strong>注：</strong><br>「蘋」有两个音「pín」和「píng」，对应两个义项，在简化过程中分别给了「⿱艹频」和「苹」。<br>参见：<a href="https://www.zhihu.com/question/410512837/answer/1369171883">「蘋」「苹」「⿱艹频」三字的关系是怎样的? - Kushim Jiang的回答 - 知乎</a><br>陶之二评：<br>评不了。</p></blockquote><h2 id="暂无"><a href="#暂无" class="headerlink" title="暂无"></a>暂无</h2><h3 id="对联之谜"><a href="#对联之谜" class="headerlink" title="对联之谜"></a>对联之谜</h3><blockquote><p>二三四五；<br>六七八九。</p></blockquote><p>添字联：</p><blockquote><p>二三四五添一；<br>六七八九加十。</p></blockquote><p>在“四人帮”横行的一九七五年春节，某地有一位叫做“三爷”的老红军，在自己的大门上贴出了“二三四五，六七八九” 的奇怪对联。当时好多人都解不开其中的迷，人们问到三爷，他只是笑笑，根本不讲。三爷的儿手是一位公务员，他于春节后的一天，特从城里赶回家向老人拜年。他一看此联，就知道它的谜底是：讽刺“四人帮”专横暴虐，弄得人民缺“一”（即衣）少“十”（即食）。他替老头子捏了一把汗，暗地里向他打个招呼，叫他想方设法将这副春联毁掉。可是老头子根本不理睬，只说：“有事我承担，你别管，我自有对策。”儿子只好摇摇头，很快就回公安局去了。</p><p>大约过了六七天，大队民兵营长找上门来，说是公社政法委员请三爷过去有事商量，三爷毫不犹豫地就去了。公社政法委员开诚布公地谈了这副春联在社会上引起了巨大的反响，要求三爷把它毁掉，免得惹事生非，自找麻烦。可是三爷反问：“你们是怎样解释这副春联的呢？我没有别的意思，我是在歌领我们通过无产阶级文化大革命，国家日新月异，步步高升呀！”</p><p>“那为什么不写‘一’呢？”政法委员反问道。</p><p>“这‘一’是代表封资修的。我们是在不要封资修的基础上创出无产阶级新世界来。”三爷答。</p><p>“那为什么又没有写‘十’呢？” 政法委员又问。</p><p>“现在不是在提倡继续革命吗？有了‘十’，就是到了顶；到了顶就不是继续革命论者，那还了得！” 三爷侃侃而谈。</p><p>三爷说得头头是道，公社政法委员无言以对，只好不欢而散。这场风波也就这样平息下来了。</p><p>五年后，一九八一年春节来到了，三爷在自家大门上贴上了：“二三四五添一；六七八九加十”的春联。人们一看就知道这是说明三中全会之后，党落实了农村经济政策，人民的生活正在好转。这副春联道出了人民的心声，歌颂了党的英明伟大。</p><blockquote><p>陶之二评：<br>我们走了一些弯路。</p></blockquote><h3 id="一联串姻缘"><a href="#一联串姻缘" class="headerlink" title="一联串姻缘"></a>一联串姻缘</h3><blockquote><p>黑壁墙下，黑面书生，黑巴巴，臭嗡嗡，呸，你且去，今生休想；<br>红花楼上，红粉佳人，红冬冬，香扑扑，喈，我就来，前世姻缘。</p></blockquote><p>传说过去有一个在相爷家陪伴公子读书的书童，由于不小心，将相爷最心爱的一对玉麒麟打碎了。书童知道这个祸事闯的不小，不被打死，也要掉一身皮。他抓住相爷尚未发觉的时机，立即溜出府门，跑到民问，拜一个乡间老太婆作母亲，靠捡粪打柴维持生活。这个书童有一天起得很早，出去捡粪，不知不觉溜进一位大官僚人家后花园里。他正在花园里捡粪，忽听得邻近花园的一座绣楼上，有读书的声音，他跑过去一听，原来还是一位少女正在聚精会神地读古文。这时，他已有很长时间没有读过书了。今天听到读书声，分外感到亲切有趣。直听到这位小姐不读为止，他才姗娜而去。</p><p>从此，他每天都要起早到这儿听小姐读书，因为他没有钱买书，只有通过听书来学习古文，以便将来能参加“乡试”。日久天长，书童听书的事被小姐发现了。开始，小姐抱着好奇心，只要有书童听，她就读得更起劲。小姐起劲地读，捡粪的书童听得就更入神了，常常情不自禁地随着小姐的诵读而眉飞色舞，欣然微笑。小姐一见这情景，就犯疑起来，莫非这捡粪的伢子真懂诗文？于是起身到窗前仔细瞧一瞧这小子是个什么样儿。那位捡粪的孩子忽然听不到读书声，立即抬起头来对绣楼上望一望，怡好两个人的目光对在一起，小姐将拾粪的伢子看清楚了，原来是个蓬头垢面的小青年。她一见听读书的人是这个模样，心里好笑，脱口说出了上联。那拾粪的伢子当场对出了下联，而且扔掉粪扒粪箕，绕过后园就要上楼来了。这一下可把小姐急坏了，忙命丫鬟在楼口守住，不准他上楼来。可这位捡粪的伢子很厉害，竟然和丫鬟闹了起来。那位大官僚刚刚起床，听家里有人吵闲，就打发家奴前去问个清楚明白。一会儿，家奴将捡粪的伢子拖到老爷面前。拾粪的伢子振振有词，理直气壮地说：“休得无礼，我是你家小姐请来的！不信有对联为证，你们竟敢这样？！”老爷将小姐找来一问，小姐承认了有此事，但不过是逗之以取乐而已。这位老爷毕竟很有眼力，一个拾粪的伢子居然能出口成章，这里面自有奥妙。他叫小姐回绣楼去，叫家奴将捡粪的伢子带到书房内，由老爷亲自过问。事后，经过多次的考察与鉴别，老爷认为这伢子很有才华，就将他收下，并亲自作主，将女儿许配给他。以后这书童考上了进士，这个姻缘可真是一联串起来的了。</p><blockquote><p>陶之二评：<br>旧文人意淫爽文。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对联 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS 强化</title>
      <link href="/posts/64934ad2.html"/>
      <url>/posts/64934ad2.html</url>
      
        <content type="html"><![CDATA[<h2 id="PV-大题知识梳理"><a href="#PV-大题知识梳理" class="headerlink" title="PV 大题知识梳理"></a>PV 大题知识梳理</h2><p>pv理发师：</p><div class="row"><iframe src="https://drive.google.com/file/d/1yAXR9bhB1vJQkRlMUhff9PzWc6yAFShq/preview" style="width:100%; height:550px"></iframe></div><p>pv23年：</p><div class="row"><iframe src="https://drive.google.com/file/d/1GN7ntq6BFJeUV1I-KXRSk5JvOqlEY2Je/preview" style="width:100%; height:550px"></iframe></div><h2 id="存储管理知识梳理"><a href="#存储管理知识梳理" class="headerlink" title="存储管理知识梳理"></a>存储管理知识梳理</h2><p>1 s = 10^3 ms<br>1 ms = 10^3 μs<br>1 μs = 10^3 ns</p><p><img src="https://bu.dusays.com/2023/09/05/64f70bee6fcc2.jpg" alt="51-2-1.jpg"></p><p>32 位系统：一个进程的虚拟地址的合法范围：<code>0x00000000</code>~<code>0xFFFFFFFF</code>，即 $2^{32}$ 个，按字节寻址，即进程的虚拟地址空间为 4 GB .</p><p>现代计算机中，一个进程几乎不可能占用连续的物理内存空间，只可能占用连续的逻辑地址空间。</p><p>若一个逻辑地址页内偏移量有 12 位，即一个页面的逻辑地址号有 $2^{12}$ 个，因按字节寻址，每个地址号对应 1 个 B ，所以一个页面的大小为 $2^{12}B=4KB$ .</p><p><img src="https://bu.dusays.com/2023/09/06/64f7e26e51101.jpg" alt="51-2-2.jpg"></p><p>下面放点文物：</p><p><img src="https://bu.dusays.com/2023/09/06/64f7e43e75606.jpg" alt="存储管理手稿-1.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f7e43cca6e0.jpg" alt="存储管理手稿-2.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f7e43e7a220.jpg" alt="存储管理手稿-3.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f7e43c1cbac.jpg" alt="存储管理手稿-4.jpg"></p><p>下面放出清晰的 pdf 文件（需要科学）：</p><div class="row"><iframe src="https://drive.google.com/file/d/1CGKa-IydzLsyHfWU0N-Kwcrmu0YAHBqS/preview" style="width:100%; height:550px"></iframe></div><h2 id="文件系统知识梳理"><a href="#文件系统知识梳理" class="headerlink" title="文件系统知识梳理"></a>文件系统知识梳理</h2><p>“簇” 就是 “块” ：</p><ul><li>“簇” 是 Windows 的叫法</li><li>“块” 是 Linux 的叫法</li></ul><p><img src="https://bu.dusays.com/2023/09/11/64ff205b5df6d.jpg" alt="文件系统手稿-1.jpg"></p><p><img src="https://bu.dusays.com/2023/09/11/64ff205d505f1.jpg" alt="文件系统手稿-2.jpg"></p><p><img src="https://bu.dusays.com/2023/09/11/64ff205e3efa6.jpg" alt="文件系统手稿-3.jpg"></p><p><img src="https://bu.dusays.com/2023/09/11/64ff205f72a34.jpg" alt="文件系统手稿-4.jpg"></p><p><img src="https://bu.dusays.com/2023/09/11/64ff205ef32d2.jpg" alt="文件系统手稿-5.jpg"></p><p><img src="https://bu.dusays.com/2023/09/11/64ff205dbb5e2.jpg" alt="文件系统手稿-6.jpg"></p><p>下面放出清晰的 pdf 文件：</p><div class="row"><iframe src="https://drive.google.com/file/d/1wYfdvifgyMz2gqRsWuW6IyVeRzHm_qNI/preview" style="width:100%; height:550px"></iframe></div><h2 id="第一章题目"><a href="#第一章题目" class="headerlink" title="第一章题目"></a>第一章题目</h2><p><img src="https://bu.dusays.com/2023/09/15/6503d9c720cdd.jpg" alt="51_4_1.jpg"></p><p><img src="https://bu.dusays.com/2023/09/15/6503d9c924f8e.jpg" alt="51_4_2.jpg"></p><p><img src="https://bu.dusays.com/2023/09/15/6503d9c62e879.jpg" alt="51_4_3.jpg"></p><p><img src="https://bu.dusays.com/2023/09/15/6503d9c922a0f.jpg" alt="51_4_4.jpg"></p><p><img src="https://bu.dusays.com/2023/09/15/6503d9c80c93b.jpg" alt="51_4_5.jpg"></p><p><img src="https://bu.dusays.com/2023/09/15/6503d9c8980b8.jpg" alt="51_4_6.jpg"></p><p><img src="https://bu.dusays.com/2023/09/15/6503d9c6776d7.jpg" alt="51_4_7.jpg"></p><p><img src="https://bu.dusays.com/2023/09/15/6503d9c944f20.jpg" alt="51_4_8.jpg"></p><p><img src="https://bu.dusays.com/2023/09/20/6509c7427027e.jpg" alt="51_4_9.jpg"></p><p><img src="https://bu.dusays.com/2023/09/20/6509c741e6f08.jpg" alt="51_4_10.jpg"></p><p><img src="https://bu.dusays.com/2023/09/20/6509c742e82dc.jpg" alt="51_4_11.jpg"></p><p><img src="https://bu.dusays.com/2023/12/02/656b1e6882be9.jpg" alt="51_4_11dot5.jpg"></p><p><img src="https://bu.dusays.com/2023/09/20/6509c7ae38ca1.jpg" alt="51_4_12.jpg"></p><p><img src="https://bu.dusays.com/2023/09/20/6509c7ae730b1.jpg" alt="51_4_13.jpg"></p><h2 id="第二章题目"><a href="#第二章题目" class="headerlink" title="第二章题目"></a>第二章题目</h2><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/uXtIuTI6IBae0z" alt="51_5_1.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/-CdUJcXZCqI95h" alt="51_5_2.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/b-FbyYLlKV4yGa" alt="51_5_3.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/8MI6Rv5pq8Ac73" alt="51_5_4.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/Gnu5GbtTmsrMsc" alt="51_5_5.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/6oF4_ajD6OUueM" alt="51_5_6.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/IESvlE4nBDWVld" alt="51_5_7.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/gLB5CXZVlQawqh" alt="51_5_8.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/9G3nXCoYtDAYGU" alt="51_5_9.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/OnCsnViYEl5fLN" alt="51_5_10.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/fn59N2n6660j5S" alt="51_5_11.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/Gql6WLhuK08V-R" alt="51_5_12.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/Kkv4FZ1IJQmQiY" alt="51_5_13.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/ddR0QBZmZ4YyKc" alt="51_5_14.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/klqQKcHfPCcWXF" alt="51_5_15.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/R775UqM-slB_ev" alt="51_5_16.jpg"></p><h2 id="第三章题目"><a href="#第三章题目" class="headerlink" title="第三章题目"></a>第三章题目</h2><p>best fit（动态分区分配算法中的知识点）：优先用小的空闲区。</p><p><img src="https://bu.dusays.com/2023/09/24/650f171cbcb56.jpg" alt="51_6_1.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f171ca0969.jpg" alt="51_6_2.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f17b975f55.jpg" alt="51_6_3.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f171d1d731.jpg" alt="51_6_4.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f171c8a17d.jpg" alt="51_6_5.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f171d7a37c.jpg" alt="51_6_6.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f171c7dc24.jpg" alt="51_6_7.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f171cd716b.jpg" alt="51_6_8.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f171d07733.jpg" alt="51_6_9.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f171d3d78d.jpg" alt="51_6_10.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f180c13de8.jpg" alt="51_6_11.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/T79bDJPoZBzuyj" alt="51_6_12"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/A3QPiplOvO_ZJS" alt="51_6_13"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/XZPvWKjQPVIokc" alt="51_6_14"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/SFTKa8IMrV4UQV" alt="51_6_15"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/For33_smdVnVXU" alt="51_6_16"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/u-goPXjaGqvV9I" alt="51_6_17"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/YUhz128N62Bki_" alt="51_6_18"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/dqTjKnUFL9DCZu" alt="51_6_19"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/ERn2yjQbkxfhLC" alt="51_6_20"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/HvMQ2Np3x-aN54" alt="51_6_21"></p><h2 id="第四章题目"><a href="#第四章题目" class="headerlink" title="第四章题目"></a>第四章题目</h2><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/nouk9ff56GYTox" alt="51-7-1"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/tTfvEy9PLcn_Bq" alt="51-7-2"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/tC_IUV-MZFC_sv" alt="51-7-3"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/97TJlNpzsirWGR" alt="51-7-4"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/rpPfd48oXEra9f" alt="51-7-5"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/FenZlM9zGiQp8o" alt="51-7-6"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/sq2tRq3AwKwUQL" alt="51-7-7"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/9zSbyUBouhSb8u" alt="51-7-8"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/ERyccl4ogzBiye" alt="51-7-9"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/X2i5ylygZqeJvq" alt="51-7-10"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/SyESeaOUFOQ5iZ" alt="51-7-11"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/kKZVtGInpZsRmH" alt="51-7-12"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/qZJC8odZKzVj4R" alt="51-7-13"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/F-lWLsd-_gQY01" alt="51-7-14"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/8PkPu3Z644pe1J" alt="51-7-15"></p><h2 id="第五章题目"><a href="#第五章题目" class="headerlink" title="第五章题目"></a>第五章题目</h2><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/h24b_V4Sbtou7M" alt="51-8-1"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/TsPaJfPoopoBw5" alt="51-8-2"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/bM3LBKqY60iQGF" alt="51-8-3"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/khtX55bFLUqMoz" alt="51-8-4"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/eWyklMvz69uOwV" alt="51-8-5"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/NKQbnIgNAYcLRI" alt="51-8-6"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/Z_oIgXy9sEKjBH" alt="51-8-7"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/t51puGdjSYbPeB" alt="51-8-8"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/kY-PBvctdIFc6s" alt="51-8-9"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/M0VV7bj8zWyjrz" alt="51-8-10"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/I3t7wymhhAfJAN" alt="51-8-11"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/ScFFgjzZrHAvfZ" alt="51-8-12"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/V6fak3uJHczj0r" alt="51-8-13"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/tfpAn6xyM0rqFj" alt="51-8-14"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/5d1sEQl7S21ai_" alt="51-8-15"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/LVR5L0EYYZ5ufc" alt="51-8-16"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/YxGCZIxYYpLOqw" alt="51-8-17"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/kenR5i5wcpNrFo" alt="51-8-18"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/EAk89k_E5By9h8" alt="51-8-19"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/U6Z3Omvc7iIJ_f" alt="51-8-20"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/30ho-ZD3sfUpi7" alt="51-8-21"></p><h2 id="操作系统强化课测试"><a href="#操作系统强化课测试" class="headerlink" title="操作系统强化课测试"></a>操作系统强化课测试</h2><div class="row"><iframe src="https://drive.google.com/file/d/1Cw9_kYzQ8SVe1kPwHMWtV6p1hZlQxqqS/preview" style="width:100%; height:550px"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数二强化</title>
      <link href="/posts/55931ee1.html"/>
      <url>/posts/55931ee1.html</url>
      
        <content type="html"><![CDATA[<p>跨考一下，不想继续本科专业了，换个专业学学。</p><h2 id="记忆内容"><a href="#记忆内容" class="headerlink" title="记忆内容"></a>记忆内容</h2><p><img src="https://bu.dusays.com/2023/09/06/64f88cd045bbf.jpg" alt="记忆1.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88cd064caf.jpg" alt="记忆2.jpg"></p><p><img src="https://bu.dusays.com/2023/09/17/65070afdd6cd8.jpg" alt="记忆3.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f1c7fbfcf2.jpg" alt="记忆4.jpg"></p><p><img src="https://sway.office.com/s/HOet5N2yuCNtqogN/images/FeizLSpnG5xulD" alt="记忆5.jpg"></p><p><img src="https://sway.office.com/s/HOet5N2yuCNtqogN/images/38Wa6sEatXCjWb" alt="记忆6.jpg"></p><p><img src="https://sway.office.com/s/HOet5N2yuCNtqogN/images/eumUUaHM0iqN6n" alt="记忆7.jpg"></p><p><img src="https://bu.dusays.com/2023/11/11/654f55c727e33.jpg" alt="记忆-8.jpg"></p><p><img src="https://bu.dusays.com/2023/11/18/65582be41ad28.jpg" alt="记忆9.jpg"></p><p><img src="https://bu.dusays.com/2023/11/18/65582ef4e4632.png" alt="记忆10.png"></p><p><img src="https://bu.dusays.com/2023/12/02/656b20f31a2fc.jpg" alt="记忆11.jpg"></p><script type="math/tex; mode=display">1^2+2^2+3^2+ \cdots +n^2=\frac{1}{6}n(n+1)(2n+1)</script><script type="math/tex; mode=display">\int \csc x\, {\rm d}x=\ln |\csc x-\cot x|+C</script><p>一些积分的奇技淫巧：</p><script type="math/tex; mode=display">\int\frac{a\sin x+b\cos x}{c\sin x+d\cos x}\, {\rm d}x\stackrel{待定系数}{=}\int\frac{A(c\cos x-d\sin x)+B(c\sin x+d\cos x)}{c\sin x+d\cos x}\, {\rm d}x</script><script type="math/tex; mode=display">\int_{0}^{\pi} xf(\sin x)\, {\rm d}x=\frac{\pi}{2}\int_{0}^{\pi} f(\sin x)\, {\rm d}x</script><p>区间再现（或称 “区间不变”）：</p><script type="math/tex; mode=display">\int_{a}^{b} f(x)\, {\rm d}x\stackrel{x=a+b-t}{=}\int_{a}^{b} f(a+b-t)\, {\rm d}t</script><p>线性代数：</p><script type="math/tex; mode=display">r(A+B)\leqslant r(A)+r(B)</script><p>设直线 L 的方程为 Ax+By+C=0 ，点 P 的坐标为（x0,y0），则点 P 到直线 L 的距离就是：</p><script type="math/tex; mode=display">\frac{|Ax_0+By_0+C|}{\sqrt{A^2+B^2}}</script><h2 id="中值定理证明题"><a href="#中值定理证明题" class="headerlink" title="中值定理证明题"></a>中值定理证明题</h2><p><img src="https://bu.dusays.com/2023/08/22/64e42e6c6eb7c.jpg" alt="中值定理证明题-01.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6956c85.jpg" alt="中值定理证明题-02.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6be119f.jpg" alt="中值定理证明题-03.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6b10a5a.jpg" alt="中值定理证明题-04.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6b5e9f8.jpg" alt="中值定理证明题-05.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6c78073.jpg" alt="中值定理证明题-06.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6b8970f.jpg" alt="中值定理证明题-07.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6c364cc.jpg" alt="中值定理证明题-08.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e67b88a7.jpg" alt="中值定理证明题-09.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6c6e6eb.jpg" alt="中值定理证明题-10.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42f18e326c.jpg" alt="中值定理证明题-11.jpg"></p><h2 id="严选题"><a href="#严选题" class="headerlink" title="严选题"></a>严选题</h2><p><img src="https://bu.dusays.com/2023/09/06/64f88d3ded921.jpg" alt="严选题-01.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88d4399234.jpg" alt="严选题-02.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88d42606a8.jpg" alt="严选题-03.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88d4482cfc.jpg" alt="严选题-04.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88d75678cd.jpg" alt="严选题-05.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88d452eb52.jpg" alt="严选题-06.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88d4219713.jpg" alt="严选题-07.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88d4312ace.jpg" alt="严选题-08.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88d40e8d39.jpg" alt="严选题-09.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88d421c329.jpg" alt="严选题-10.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88df4cca0b.jpg" alt="严选题-11.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88dc76569a.jpg" alt="严选题-12.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88dc932a17.jpg" alt="严选题-13.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88dc866846.jpg" alt="严选题-14.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88dc85d6e6.jpg" alt="严选题-15.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88dc8ba272.jpg" alt="严选题-16.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88dc6631c9.jpg" alt="严选题-17.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88dc664b9d.jpg" alt="严选题-18.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88dc89f5a4.jpg" alt="严选题-19.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88dc9089d1.jpg" alt="严选题-20.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88e80cdb1a.jpg" alt="严选题-21.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88e82b4d75.jpg" alt="严选题-22.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88e8375f6f.jpg" alt="严选题-23.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88e8399956.jpg" alt="严选题-24.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88e83e864d.jpg" alt="严选题-25.jpg"></p><p><img src="https://sway.office.com/s/HOet5N2yuCNtqogN/images/iwslomIHO6qY1x" alt="严选题-26.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88e8332b21.jpg" alt="严选题-27.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88e843cd4d.jpg" alt="严选题-28.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88e8454507.jpg" alt="严选题-29.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88e8a2a1ea.jpg" alt="严选题-30.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88fffce3a1.jpg" alt="严选题-31.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88ffdc5828.jpg" alt="严选题-32.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88ffef3f48.jpg" alt="严选题-33.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88ffd913dd.jpg" alt="严选题-34.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88fff1a2c5.jpg" alt="严选题-35.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88ffe7405f.jpg" alt="严选题-36.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88ffda45c5.jpg" alt="严选题-37.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890072db7a.jpg" alt="严选题-38.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88ffe183bb.jpg" alt="严选题-39.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88fffc6e49.jpg" alt="严选题-40.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890d94e4fe.jpg" alt="严选题-41.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890dbeceb1.jpg" alt="严选题-42.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890dec33b3.jpg" alt="严选题-43.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890ddf2508.jpg" alt="严选题-44.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890e09d8a0.jpg" alt="严选题-45.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890e0dc3af.jpg" alt="严选题-46.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890de3d5d5.jpg" alt="严选题-47.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890e0c7677.jpg" alt="严选题-48.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890df9c40f.jpg" alt="严选题-49.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890e01431c.jpg" alt="严选题-50.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f89152339d0.jpg" alt="严选题-51.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f89154b2ded.jpg" alt="严选题-52.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f8915442489.jpg" alt="严选题-53.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f89156d3afb.jpg" alt="严选题-54.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f89158104e1.jpg" alt="严选题-55.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f8918166099.jpg" alt="严选题-56.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f89157ad981.jpg" alt="严选题-57.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f89157aa7e0.jpg" alt="严选题-58.jpg"></p><p><img src="https://sway.office.com/s/HOet5N2yuCNtqogN/images/3wLJfG7hFVArDr" alt="严选题-59.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f891574a7d1.jpg" alt="严选题-60.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f891eba49d3.jpg" alt="严选题-61.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f891ed16c88.jpg" alt="严选题-62.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f891f0d41f4.jpg" alt="严选题-63.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f891f3567aa.jpg" alt="严选题-64.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f891f3a40e7.jpg" alt="严选题-65.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f891f3eb296.jpg" alt="严选题-66.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f891f3d8b3e.jpg" alt="严选题-67.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f891f41f0fb.jpg" alt="严选题-68.jpg"></p><h2 id="真题"><a href="#真题" class="headerlink" title="真题"></a>真题</h2><p>数学的真实（:</p><div class="row"><iframe src="https://drive.google.com/file/d/18s7qMJF6d8zeHbTSth0tZy9sNI90JIaF/preview" style="width:100%; height:550px"></iframe></div><h2 id="网课"><a href="#网课" class="headerlink" title="网课"></a>网课</h2><p>智慧的结晶（:</p><div class="row"><iframe src="https://drive.google.com/file/d/126vaWF2oBPKgwW83vsbcll7eyIRr9vES/preview" style="width:100%; height:550px"></iframe></div><h2 id="李林四-23"><a href="#李林四-23" class="headerlink" title="李林四 23"></a>李林四 23</h2><p>辛酸的挣扎（:</p><div class="row"><iframe src="https://drive.google.com/file/d/1VuVrmEuk568oMvcrS-gbOcl6ZO-WXTzT/preview" style="width:100%; height:550px"></iframe></div><h2 id="超越模拟题-23"><a href="#超越模拟题-23" class="headerlink" title="超越模拟题 23"></a>超越模拟题 23</h2><p>绝望的洒脱（:</p><div class="row"><iframe src="https://drive.google.com/file/d/1zQORNaoRJh9FapiIhTREMHl4xQWU8WGa/preview" style="width:100%; height:550px"></iframe></div><h2 id="张宇八卷-24"><a href="#张宇八卷-24" class="headerlink" title="张宇八卷 24"></a>张宇八卷 24</h2><p>苟延的残喘（:</p><div class="row"><iframe src="https://drive.google.com/file/d/11B7G1iCV0jWBpIOm2l-oZFFiK49VHZRM/preview" style="width:100%; height:550px"></iframe></div><h2 id="李林六-24"><a href="#李林六-24" class="headerlink" title="李林六 24"></a>李林六 24</h2><p>临终的关怀（:</p><div class="row"><iframe src="https://drive.google.com/file/d/1yuO5QXlG-Umqsi5RHCliGfu7_SbRHykG/preview" style="width:100%; height:550px"></iframe></div><h2 id="杂项试卷"><a href="#杂项试卷" class="headerlink" title="杂项试卷"></a>杂项试卷</h2><p>棺的回响（:</p><div class="row"><iframe src="https://drive.google.com/file/d/1AHHsrtnCSgppt7455gxIDkcxjz790hJz/preview" style="width:100%; height:550px"></iframe></div><h2 id="李林四-24"><a href="#李林四-24" class="headerlink" title="李林四 24"></a>李林四 24</h2><p>内心的宁静（:</p><div class="row"><iframe src="https://drive.google.com/file/d/16cD8NIFUEeNytv3PaZN6ZiuIC4HXiukT/preview" style="width:100%; height:550px"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>俄罗斯方块</title>
      <link href="/posts/41a3284b.html"/>
      <url>/posts/41a3284b.html</url>
      
        <content type="html"><![CDATA[<p>咕咕咕。。。</p><p>在搞了在搞了。。。</p><p>真的没啥时间推进。。。</p><p>vscode 做项目有点不方便啊，再装 vs 有点麻烦。。。</p><p>真的拖了很久了。。。</p><p>很久很久以前，有一个小白励志用 C++ 做一个俄罗斯方块，后来他觉得没必要和自己过不去，不如用 Python 做，后来幽于名为“应试”的缧绁之中，然后就没有然后了。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>听《二泉》</title>
      <link href="/posts/bf733412.html"/>
      <url>/posts/bf733412.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://tse2-mm.cn.bing.net/th/id/OIP-C.4JgaeLzyr2oAt-IPnCV-fAHaE8" alt="48-1" title="来自网络"></p><p>无锡某处的阿炳雕像曾给我留下深刻的印象。乍看上去，他好像并非哪里的伟人，竟是和芸芸众生一样，受难之后低下自己的头颅，满不在乎地继续生活。但他谦卑地戴上帽子，架着圆形的墨镜，支起二胡，撑开右臂，彷佛将要用磅礴无尽的力量推出弓时——时间于此刻凝固。</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV1xb411a7hx&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><p>一些演奏会上的二泉映月，技巧高超，细节饱满丰富，还有很多其他乐器的伴奏，但是却不一定能像这个视频里的一样触动人心。</p><p>事实上，如果能“有幸”见到一个真正的靠着街头卖艺讨生活的人，你会更加深刻地认识到：人是被命运卷入其中的。</p><p>十几年前，C 市的路上还跑着数不清的人力三轮，市中心（现在已是旧城区）的街道边，或是唯一一家肯德基的门店前，常常能遇到这样的卖艺人。他们的技巧非常粗糙，甚至可以说是刚刚能把音发出来，有人的琴不知是不是自己做的，弦还打着结，一个非常简陋的，送别人都没人要的琴。然而就是这样的琴，拉出的二泉（也许还是和同行学的），却最能撬动人心设防的深处。因为那些演奏会上的二泉，太过从容，太过华丽，太过完美，也太过奢侈了。而这些街头的人，才构成了我们这个社会真实图景的一角。</p><p>这种感情是人类共通的，德富芦花曾写道：</p><blockquote><p>呜呼，我本东西南北人。我曾经夜泊于赤马关外，和着潮声而慷慨悲歌；我曾经客旅于北越，夜闻离别之曲而悲泣。我曾经于月明风清之夜，耳听着中国海上的欸乃之声；又曾经在一个雪天的清晨，行进于南萨的道上，听赶马人的歌唱。这些都打动了我的心扉。而那街头的一片市声，却不能使我肝肠寸断。</p></blockquote><p>中国宣布全面脱贫的夏天，我在上海见过皮肤黝黑、赤裸着上身流浪乞讨的男人。蜗居北京的日子里，也遇到不少在北京西站负一层躺下休息的男女、孩子，也许我的境遇也只比他们好一点。</p><p>德富芦花在听 <i>Still sad music of humanity</i> 时，感受到无数不可名状的苦恼，无数的鲜血，无数的眼泪。</p><p>这固然是深刻的体会。而我在《二泉》中感受到的情愫，与下面两句诗颇有相通之处：</p><blockquote><p>春风桃李花开日，秋雨梧桐叶落时。<br>西宫南苑多秋草，落叶满阶红不扫。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 闲文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题集子</title>
      <link href="/posts/53401ab0.html"/>
      <url>/posts/53401ab0.html</url>
      
        <content type="html"><![CDATA[<p>一道题开一篇文章实在浪费，于是决定以后零零散散做的题就放在这个集子里了。如果数量过多会考虑再开。</p><h2 id="JSOI2004-平衡点（模拟退火）"><a href="#JSOI2004-平衡点（模拟退火）" class="headerlink" title="JSOI2004 平衡点（模拟退火）"></a>JSOI2004 平衡点（模拟退火）</h2><p><strong>提交入口</strong></p><p><a href="https://www.luogu.com.cn/problem/P1337">https://www.luogu.com.cn/problem/P1337</a></p><p><strong>题目描述</strong></p><p>如图，有 $n$ 个重物，每个重物系在一条足够长的绳子上。</p><p>每条绳子自上而下穿过桌面上的洞，然后系在一起。图中 $x$ 处就是公共的绳结。假设绳子是完全弹性的（即不会造成能量损失），桌子足够高（重物不会垂到地上），且忽略所有的摩擦，求绳结 $x$ 最终平衡于何处。</p><p><strong>注意</strong>：桌面上的洞都比绳结 $x$ 小得多，所以即使某个重物特别重，绳结 $x$ 也不可能穿过桌面上的洞掉下来，最多是卡在某个洞口处。</p><p><img src="https://cdn.luogu.com.cn/upload/pic/148.png" alt="47-1"></p><p><strong>输入格式</strong></p><p>文件的第一行为一个正整数 $n$（$1\le n\le 1000$），表示重物和洞的数目。</p><p>接下来的 $n$ 行，每行是 $3$ 个整数 $x_i, y_i, w_i$，分别表示第 $i$ 个洞的坐标以及第 $i$ 个重物的重量。（$-10000\le x_i,y_i\le10000, 0&lt;w_i\le1000$）</p><p><strong>输出格式</strong></p><p>你的程序必须输出两个浮点数（保留小数点后三位），分别表示处于最终平衡状态时绳结 $x$ 的横坐标和纵坐标。两个数以一个空格隔开。</p><p><strong>样例输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">0 0 1</span><br><span class="line">0 2 1</span><br><span class="line">1 1 1</span><br></pre></td></tr></table></figure><p><strong>样例输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.577 1.000</span><br></pre></td></tr></table></figure><p><strong>分析</strong></p><p>待续。先贴代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN =<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,g[MAXN];</span><br><span class="line"><span class="type">double</span> minlen=DBL_MAX;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">double</span> a=<span class="number">0.0</span>, <span class="type">double</span> b=<span class="number">0.0</span>):<span class="built_in">x</span>(a),<span class="built_in">y</span>(b)&#123;&#125;</span><br><span class="line">&#125;P[MAXN];</span><br><span class="line">Point ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">Sqr</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;<span class="keyword">return</span> x*x;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">Rand</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">double</span>(<span class="built_in">rand</span>())/<span class="built_in">double</span>(RAND_MAX);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">dis</span><span class="params">(Point a,Point b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">Sqr</span>(a.x-b.x)+<span class="built_in">Sqr</span>(a.y-b.y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">accept</span><span class="params">(<span class="type">double</span> delta,<span class="type">double</span> temp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> delta&lt;<span class="number">0</span>||<span class="built_in">Rand</span>()&lt;<span class="built_in">exp</span>(-delta/temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">calc</span><span class="params">(Point origin)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        len+=<span class="built_in">dis</span>(origin,P[i])*g[i];</span><br><span class="line">    <span class="keyword">if</span>(len&lt;minlen)&#123;</span><br><span class="line">        ans=origin;</span><br><span class="line">        minlen=len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SA</span><span class="params">(Point ans0,<span class="type">double</span> T0,<span class="type">double</span> dec,<span class="type">double</span> end)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> temp=T0;</span><br><span class="line">    Point nowpos=ans0;</span><br><span class="line">    <span class="type">double</span> nowlen=<span class="built_in">calc</span>(nowpos);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(temp&gt;end)&#123;</span><br><span class="line">        Point nextpos=<span class="built_in">Point</span>(nowpos.x+temp*(<span class="built_in">Rand</span>()*<span class="number">2</span><span class="number">-1</span>),nowpos.y+temp*(<span class="built_in">Rand</span>()*<span class="number">2</span><span class="number">-1</span>));</span><br><span class="line">        <span class="type">double</span> nlen=<span class="built_in">calc</span>(nextpos);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">accept</span>(nlen-nowlen,temp))&#123;</span><br><span class="line">            nowpos=nextpos;</span><br><span class="line">            nowlen=nlen;</span><br><span class="line">        &#125;</span><br><span class="line">        temp*=dec;   <span class="comment">//dec为退火系数 </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123; <span class="comment">//精度维护</span></span><br><span class="line">        Point rnd=<span class="built_in">Point</span>(ans.x+temp*(<span class="built_in">Rand</span>()*<span class="number">2</span><span class="number">-1</span>),ans.y+temp*(<span class="built_in">Rand</span>()*<span class="number">2</span><span class="number">-1</span>));</span><br><span class="line">        <span class="built_in">calc</span>(rnd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    Point init;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%d&quot;</span>,&amp;P[i].x,&amp;P[i].y,&amp;g[i]);</span><br><span class="line">        init.x+=P[i].x;</span><br><span class="line">        init.y+=P[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    init.x/=n;</span><br><span class="line">    init.y/=n;</span><br><span class="line">    <span class="built_in">SA</span>(init,<span class="number">1e5</span>,<span class="number">1</span><span class="number">-1e-2</span>,<span class="number">1e-3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.3f %.3f\n&quot;</span>,ans.x,ans.y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有机化学之神偶尔会做作弊（tarjan-lca）"><a href="#有机化学之神偶尔会做作弊（tarjan-lca）" class="headerlink" title="有机化学之神偶尔会做作弊（tarjan, lca）"></a>有机化学之神偶尔会做作弊（tarjan, lca）</h2><p><strong>提交入口</strong></p><p><a href="https://www.luogu.com.cn/problem/P2783">https://www.luogu.com.cn/problem/P2783</a></p><p><strong>题意简述</strong></p><p>给你一个 $n$ 个点，$m$ 条边的无向图。把图中所有的环变为一个点，求变化后某两个点之间有多少个点。</p><p><strong>输入格式</strong></p><p>第一行两个整数 $n$，$m$。表示有 $n$ 个点，$m$ 根键。</p><p>接下来 $m$ 行每行两个整数 $u$，$v$ 表示 $u$ 号碳和 $v$ 号碳有一根键。</p><p>接下来一个整数 $tot$ 表示询问次数。</p><p>接下来 $tot$ 行每行两个整数，$a$，$b$ 表示询问的两个碳的编号。</p><p><strong>输出格式</strong></p><p>共 $tot$ 行，每行一个二进制数，表示答案。</p><p><strong>样例输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">2</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure><p><strong>样例输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><p>两个碳不成环。</p><p><strong>数据范围及约定</strong></p><p>对于 $100\%$ 的数据，$1&lt;n\le10 ^ 4$，$1&lt;m\le5\times 10 ^ 4$。</p><p><strong>分析</strong></p><p>先给出一份超时代码，82 pts.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a,b) ((a)&lt;(b)?(a):(b))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e4</span>+<span class="number">3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm=<span class="number">1e5</span>+<span class="number">3</span>;</span><br><span class="line"><span class="comment">// Edge_number in a general graph is twice that of a one-way graph</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,next;&#125;;</span><br><span class="line">Edge edge[maxm],edge2[maxm];</span><br><span class="line"><span class="type">int</span> head[maxn],dfn[maxn],low[maxn],stac[maxn],color[maxn];</span><br><span class="line"><span class="type">int</span> n,m,tot,num,top,cnt,tot_in_txt,lcafa[maxn][<span class="number">25</span>];</span><br><span class="line"><span class="type">int</span> head2[maxn],tot2,dep[maxn],max0;</span><br><span class="line"><span class="type">bool</span> ins[maxn];</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> topow[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">64</span>,<span class="number">128</span>,<span class="number">256</span>,<span class="number">512</span>,<span class="number">1024</span>,<span class="number">2048</span>,<span class="number">4096</span>,<span class="number">8192</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rd</span><span class="params">(<span class="type">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> w=x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||<span class="string">&#x27;9&#x27;</span>&lt;ch) w|=(ch==<span class="string">&#x27;-&#x27;</span>),ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="string">&#x27;0&#x27;</span>),ch=<span class="built_in">getchar</span>();</span><br><span class="line">    x=w?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    edge2[++tot2].v=y;</span><br><span class="line">    edge2[tot2].next=head2[x];</span><br><span class="line">    head2[x]=tot2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> from)</span></span>&#123;</span><br><span class="line">    low[x]=dfn[x]=++num;</span><br><span class="line">    stac[++top]=x; ins[x]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">        <span class="type">int</span> y=edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(y==from)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[y])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(y, x);</span><br><span class="line">            low[x]=<span class="built_in">MIN</span>(low[x],low[y]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ins[y])&#123;</span><br><span class="line">            low[x]=<span class="built_in">MIN</span>(low[x],dfn[y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[x]==low[x])&#123;</span><br><span class="line">        ++cnt; <span class="type">int</span> y;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            y=stac[top--]; ins[y]=<span class="literal">false</span>;</span><br><span class="line">            color[y]=cnt;</span><br><span class="line">        &#125;<span class="keyword">while</span>(x!=y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lcainit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=max0;i++)</span><br><span class="line">        <span class="keyword">if</span>(lcafa[x][i<span class="number">-1</span>])lcafa[x][i]=lcafa[lcafa[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head2[x];i;i=edge2[i].next)&#123;</span><br><span class="line">        <span class="type">int</span> y=edge2[i].v;</span><br><span class="line">        <span class="keyword">if</span>(y!=lcafa[x][<span class="number">0</span>])&#123;</span><br><span class="line">            lcafa[y][<span class="number">0</span>]=x;</span><br><span class="line">            dep[y]=dep[x]+<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">lcainit</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v])<span class="built_in">swap</span>(u,v);</span><br><span class="line">    <span class="type">int</span> delta=dep[u]-dep[v];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>; x&lt;=max0; x++)</span><br><span class="line">        <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;x)&amp;delta)u=lcafa[u][x];</span><br><span class="line">    <span class="keyword">if</span>(u==v)<span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=max0; ~x; x--)</span><br><span class="line">        <span class="keyword">if</span>(lcafa[u][x]!=lcafa[v][x])&#123;</span><br><span class="line">            u=lcafa[u][x];</span><br><span class="line">            v=lcafa[v][x];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> lcafa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">rd</span>(n); <span class="built_in">rd</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line">        <span class="built_in">rd</span>(x); <span class="built_in">rd</span>(y);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y);</span><br><span class="line">        <span class="built_in">addedge</span>(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rd</span>(tot_in_txt);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])<span class="built_in">tarjan</span>(i, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">1</span>;x&lt;=n;x++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">            <span class="type">int</span> y=edge[i].v;</span><br><span class="line">            <span class="keyword">if</span>(color[x]!=color[y])&#123;</span><br><span class="line">                <span class="built_in">addedge2</span>(color[x], color[y]);</span><br><span class="line">                <span class="built_in">addedge2</span>(color[y], color[x]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    max0=(<span class="type">int</span>)(<span class="built_in">log</span>(cnt)/<span class="built_in">log</span>(<span class="number">2</span>))+<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">lcainit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(tot_in_txt--)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        <span class="built_in">rd</span>(a); <span class="built_in">rd</span>(b);</span><br><span class="line">        <span class="type">int</span> k = <span class="built_in">lca</span>(color[a], color[b]);</span><br><span class="line">        <span class="type">int</span> temp = dep[color[a]] + dep[color[b]] - (dep[k]&lt;&lt;<span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> ans[<span class="number">15</span>] = <span class="string">&quot;00000000000000&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">13</span>; ~i; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp&gt;=topow[i])&#123;</span><br><span class="line">                ans[<span class="number">13</span>-i] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                temp -= topow[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ans[i]==<span class="string">&#x27;0&#x27;</span>) i++;</span><br><span class="line">        <span class="keyword">for</span>(; i&lt;=<span class="number">13</span>; i++)<span class="built_in">putchar</span>(ans[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="yLOI2022-枕万梦（排序）"><a href="#yLOI2022-枕万梦（排序）" class="headerlink" title="yLOI2022 枕万梦（排序）"></a>yLOI2022 枕万梦（排序）</h2><p><strong>提交入口</strong></p><p><a href="https://www.luogu.com.cn/problem/P9472">https://www.luogu.com.cn/problem/P9472</a></p><p><strong>题目描述</strong></p><p>天亮了，扶苏不敌困意，早早地进入了梦乡。在失去引力的梦里，扶苏遇到了好多串漂浮着的数列，它们的长度都相等，而且都是美妙的等比数列！出于本能，扶苏想要把这些数列按照字典序排序，可是在梦里扶苏失去了思考的能力，请你来帮帮她！</p><p>具体地，有 $n$ 个编号从 $1$ 到 $n$ 的数列 $a_1, a_2, \dots a_n$，每个数列的长度均为 $m + 1$。第 $i$ 个数列 $a_i$ 满足递推式 $a_{i,j} = a_{i,j - 1} \times i$，其中 $1 \leq j \leq m$。而扶苏会告诉你每个序列的首项 $a_{i,0}$，你需要帮助她把这些数列按字典序排序。</p><p><strong>输入格式</strong></p><p>输入的第一行是两个整数，依次表示 $n$ 和 $m$。<br>接下来 $n$ 行，每行一个整数，第 $i$ 行的整数表示数列 $a_i$ 的首项 $a_{i,0}$。</p><p><strong>输出格式</strong></p><p>输出一行 $n$ 个整数，第 $i$ 个整数表示字典序第 $i$ 小的数列的<strong>编号</strong>。</p><p><strong>样例 #1</strong></p><p><strong>样例输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 2</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>样例输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br></pre></td></tr></table></figure><p><strong>样例 #2</strong></p><p><strong>样例输入 #2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 3</span><br><span class="line">1</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><p><strong>样例输出 #2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br></pre></td></tr></table></figure><p><strong>样例 #3</strong></p><p><strong>样例输入 #3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 2</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>样例输出 #3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br></pre></td></tr></table></figure><p><strong>样例 #4</strong></p><p><strong>样例输入 #4</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">见附加文件中的 B4.in</span><br></pre></td></tr></table></figure><p><strong>样例输出 #4</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">见附加文件中的 B4.ans</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><p><strong>样例 1 解释</strong></p><p>共有两个数列，每个数列的长度均为 $2+1=3$。</p><p>对第一个数列 $a_1$：</p><ul><li>已知其首项 $a_{1,0} = 1$。</li><li>根据 $a_{i,j} = a_{i,j - 1} \times i$，取 $i=1,j = 1$ 可以得到 $a_{1,1} = a_{1,0} \times 1 = 1$。</li><li>根据 $a_{i,j} = a_{i,j - 1} \times i$，取 $i=1,j = 2$ 可以得到 $a_{1,2} = a_{1,1} \times 1= 1$。</li></ul><p>所以数列 $a_1$ 是 $1,1,1$。</p><p>对第二个数列 $a_2$：</p><ul><li>已知其首项 $a_{2,0} = 2$。</li><li>根据 $a_{i,j} = a_{i,j - 1} \times i$，取 $i=2,j = 1$ 可以得到 $a_{2,1} = a_{2,0} \times 2 = 2 \times 2 = 4$。</li><li>根据 $a_{i,j} = a_{i,j - 1} \times i$，取 $i=2,j = 2$ 可以得到 $a_{2,2} = a_{2,1} \times 2= 4 \times 2 = 8$。</li></ul><p>所以数列 $a_2$ 是 $2,4,8$。</p><p>比较字典序可得数列 $a_1$ 是字典序最小的数列。所以输出 $1$。</p><p><strong>样例 2 解释</strong></p><p>数列 $a_1$ 为 $1,1,1,1$，数列 $a_2$ 为 $-1, -2,-4,-8$。</p><p><strong>数据规模与约定</strong><br>本题共 $10$ 个测试点，各测试点信息如下表：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/08wnuome.png" alt="47-2"></p><p>特殊约定 A：保证 $a_{i,0}$ 均相等。<br>特殊约定 B：保证 $a_{i,0}$ 互不相等。</p><p>对全部的测试点，保证 $1 \leq n \leq 10^5$，$1 \leq m \leq 10^9$，$1 \leq |a_{i,0}| \leq 10^9$。</p><p><strong>提示</strong></p><p>对两个数列 $a_i, a_j$，按如下方式比较其字典序：</p><p>找到<strong>最小的</strong>满足 $a_{i,p} \neq a_{j, p}$ 的下标 $p$，比较 $a_{i, p}$ 和 $a_{j, p}$ 的大小：</p><ul><li>如果 $a_{i,p} &lt; a_{j, p}$，则称 $a_i$ 的字典序比 $a_j$ 的小。</li><li>如果 $a_{i,p} &gt; a_{j, p}$，则称 $a_i$ 的字典序比 $a_j$ 的大。</li></ul><p>可以证明，在本题的限制下，这样的 $p$ 一定存在。</p><p><strong>分析</strong></p><p>要求根据字典序排序。若两个数列第一个元素就不等，便可比较大小；若两个数列第一个元素相等，由数列定义，第二个元素必然不等，于是可比较大小。对于首元素为零的数列，整个数列都是零。由此得到下述做法：</p><p>对于两个不等的 $a_{i,0}$ , 升序排序。对于两个相等的 $a_{i,0}$ , 分正负两种情况：若 $a_{i,0}&gt;0$ , 则行数越大，位序靠后；若 $a_{i,0}&lt;0$ , 则行数越大，位序靠前。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">mnode</span>&#123;</span><br><span class="line">    LL mcontent;</span><br><span class="line">    LL mindex;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> mnode&amp; v)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mcontent != v.mcontent)</span><br><span class="line">            <span class="keyword">return</span> mcontent &lt; v.mcontent;</span><br><span class="line">        <span class="keyword">else</span>    </span><br><span class="line">            <span class="keyword">if</span>(mcontent &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> mindex &lt; v.mindex;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">return</span> mindex &gt; v.mindex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;marray[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        LL x; </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;x);</span><br><span class="line">        marray[i].mcontent = x;</span><br><span class="line">        marray[i].mindex = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(marray+<span class="number">1</span>, marray+<span class="number">1</span>+n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,marray[i].mindex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p>最近考研应试之余，尝试着用王道的思路手写了平衡二叉树的代码，但是没有完成，只是个半成品。如果之后还记得的话，也许我会完成它？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rd</span><span class="params">(<span class="type">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> w=x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||<span class="string">&#x27;9&#x27;</span>&lt;ch) w|=(ch==<span class="string">&#x27;-&#x27;</span>),ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="string">&#x27;0&#x27;</span>),ch=<span class="built_in">getchar</span>();</span><br><span class="line">    x=w?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">avlNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">    <span class="type">int</span> lsub_h;   <span class="comment">//left sub_tree&#x27;s height</span></span><br><span class="line">    <span class="type">int</span> rsub_h;</span><br><span class="line">    <span class="type">int</span> lsub_num; <span class="comment">//size of leftSubtree, excluding itself</span></span><br><span class="line">    <span class="type">int</span> rsub_num;</span><br><span class="line">    avlNode *lchild, *rchild, *fa;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">avlTree</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">avlTree</span>()&#123; T = <span class="literal">nullptr</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">avlNode* <span class="title">getRoot</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> T; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insertX</span><span class="params">(avlNode*&amp; K, <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        avlNode* p = <span class="built_in">bstInsert</span>(K, x, <span class="literal">nullptr</span>);</span><br><span class="line">        <span class="built_in">maintain_balance_insert</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteX</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;  <span class="comment">// assume there is x</span></span><br><span class="line">        avlNode* p = <span class="built_in">find_X_delete</span>(T, x);</span><br><span class="line">        p-&gt;cnt--;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;cnt&gt;=<span class="number">1</span>)<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(p-&gt;lchild==<span class="literal">nullptr</span>&amp;&amp;p-&gt;rchild==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p==p-&gt;fa-&gt;lchild)</span><br><span class="line">                p-&gt;fa-&gt;lchild = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                p-&gt;fa-&gt;rchild = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;lchild!=<span class="literal">nullptr</span>&amp;&amp;p-&gt;rchild==<span class="literal">nullptr</span>)&#123; <span class="comment">// !</span></span><br><span class="line">            <span class="keyword">if</span>(p==p-&gt;fa-&gt;lchild)</span><br><span class="line">                p-&gt;fa-&gt;lchild = p-&gt;lchild;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p-&gt;fa-&gt;rchild = p-&gt;lchild;</span><br><span class="line">            p-&gt;lchild-&gt;fa = p-&gt;fa;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;lchild==<span class="literal">nullptr</span>&amp;&amp;p-&gt;rchild!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p==p-&gt;fa-&gt;lchild)</span><br><span class="line">                p-&gt;fa-&gt;lchild = p-&gt;rchild;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p-&gt;fa-&gt;rchild = p-&gt;rchild;</span><br><span class="line">            p-&gt;rchild-&gt;fa = p-&gt;fa;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            avlNode* qwq = <span class="built_in">maxValue_in_lsubtree</span>(p);</span><br><span class="line">            p-&gt;value = qwq-&gt;value;</span><br><span class="line">            p-&gt;cnt = qwq-&gt;cnt;</span><br><span class="line">            p = qwq;</span><br><span class="line">            <span class="keyword">if</span>(p==p-&gt;fa-&gt;lchild)</span><br><span class="line">                p-&gt;fa-&gt;lchild = p-&gt;lchild;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p-&gt;fa-&gt;rchild = p-&gt;lchild;</span><br><span class="line">            p-&gt;lchild-&gt;fa = p-&gt;fa;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">maintain_balance_delete</span>(p);</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">index_X</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="comment">//find an avlNode whose value is x，return its index</span></span><br><span class="line">        <span class="comment">//at this point, the binary-tree is balanced</span></span><br><span class="line">        avlNode* p = <span class="built_in">find_X</span>(T, x);   <span class="comment">// O(logN)</span></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(p==p-&gt;fa-&gt;rchild)&#123;</span><br><span class="line">            avlNode* G = <span class="built_in">find_left_daddy</span>(p);</span><br><span class="line">            ans = G-&gt;lsub_num + G-&gt;rsub_num + G-&gt;cnt</span><br><span class="line">                  - p-&gt;rsub_num - p-&gt;cnt + <span class="number">1</span>;</span><br><span class="line">                  <span class="comment">//+1: the value-x avlNode goes the end</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p==p-&gt;fa-&gt;lchild)&#123;</span><br><span class="line">            avlNode* G = <span class="built_in">find_right_daddy</span>(p);</span><br><span class="line">            ans = G-&gt;fa-&gt;lsub_num + G-&gt;fa-&gt;cnt</span><br><span class="line">                  + p-&gt;lsub_num + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans==<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;No such avlNode.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findIndex_X</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//Query the avlNode whose index is x, return its value</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">preX</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">afterX</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">avlNode* <span class="title">find_X</span><span class="params">(avlNode* K, <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(K!=<span class="literal">nullptr</span> &amp;&amp; x!=K-&gt;value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;K-&gt;value) K=K-&gt;lchild;</span><br><span class="line">            <span class="keyword">else</span> K=K-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(K==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;function find_X() failed.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> K;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">avlNode* <span class="title">find_X_delete</span><span class="params">(avlNode* K, <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(K!=<span class="literal">nullptr</span> &amp;&amp; x!=K-&gt;value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;K-&gt;value)&#123;</span><br><span class="line">                K-&gt;lsub_num--;</span><br><span class="line">                K=K-&gt;lchild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                K-&gt;rsub_num--;</span><br><span class="line">                K=K-&gt;rchild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(K==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;function find_X() failed.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> K;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">avlNode* <span class="title">find_left_daddy</span><span class="params">(avlNode* p)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">avlNode* <span class="title">find_right_daddy</span><span class="params">(avlNode* p)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lsubtree_height</span><span class="params">(avlNode* x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x-&gt;lsub_h) <span class="keyword">return</span> x-&gt;lsub_h;</span><br><span class="line">        <span class="keyword">if</span>(x-&gt;lchild==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            x-&gt;lsub_h = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> x-&gt;lsub_h;</span><br><span class="line">        &#125;</span><br><span class="line">        x-&gt;lsub_h = <span class="built_in">MAX</span>(<span class="built_in">lsubtree_height</span>(x-&gt;lchild), </span><br><span class="line">                        <span class="built_in">rsubtree_height</span>(x-&gt;lchild))+ <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> x-&gt;lsub_h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rsubtree_height</span><span class="params">(avlNode* x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x-&gt;rsub_h) <span class="keyword">return</span> x-&gt;rsub_h;</span><br><span class="line">        <span class="keyword">if</span>(x-&gt;rchild==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            x-&gt;rsub_h = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> x-&gt;rsub_h;</span><br><span class="line">        &#125;</span><br><span class="line">        x-&gt;rsub_h = <span class="built_in">MAX</span>(<span class="built_in">lsubtree_height</span>(x-&gt;rchild), </span><br><span class="line">                        <span class="built_in">rsubtree_height</span>(x-&gt;rchild))+ <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> x-&gt;rsub_h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">avlNode* <span class="title">find_Unbalanced_Node</span><span class="params">(avlNode* p)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> sub_balance = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(sub_balance&gt;=<span class="number">-1</span>&amp;&amp;sub_balance&lt;=<span class="number">1</span>)&#123; <span class="comment">//sub_balance = 0,1,-1</span></span><br><span class="line">            p = p-&gt;fa;</span><br><span class="line">            <span class="keyword">if</span>(p==<span class="literal">nullptr</span>) <span class="keyword">return</span> p;</span><br><span class="line">            p-&gt;lsub_h = p-&gt;rsub_h = <span class="number">0</span>; <span class="comment">// erase old data</span></span><br><span class="line">            <span class="type">int</span> lch = <span class="built_in">lsubtree_height</span>(p);</span><br><span class="line">            <span class="type">int</span> rch = <span class="built_in">rsubtree_height</span>(p);</span><br><span class="line">            sub_balance = lch-rch;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">avlNode* <span class="title">bstInsert</span><span class="params">(avlNode* K, <span class="type">int</span> x, avlNode* myfa)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(K==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            K = <span class="keyword">new</span> avlNode;</span><br><span class="line">            K-&gt;value = x;</span><br><span class="line">            K-&gt;fa = myfa;</span><br><span class="line">            K-&gt;lchild = K-&gt;rchild = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">return</span> K;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x==K-&gt;value)&#123;</span><br><span class="line">            K-&gt;cnt++;</span><br><span class="line">            <span class="keyword">return</span> K;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x &lt; K-&gt;value)&#123;</span><br><span class="line">            K-&gt;lsub_num++;     <span class="comment">// nice code &lt;(ˉ^ˉ)&gt;</span></span><br><span class="line">            <span class="built_in">bstInsert</span>(K-&gt;lchild, x, K);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            K-&gt;rsub_num++;</span><br><span class="line">            <span class="built_in">bstInsert</span>(K-&gt;rchild, x, K);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintain_balance_insert</span><span class="params">(avlNode* p)</span></span>&#123;</span><br><span class="line">        avlNode* subroot = <span class="built_in">find_Unbalanced_Node</span>(p);</span><br><span class="line">        <span class="comment">// after find_Unbalanced_Node, lsub_h &amp; rsub_h is updated</span></span><br><span class="line">        <span class="keyword">if</span>(subroot-&gt;lchild-&gt;lsub_h==subroot-&gt;lchild-&gt;rsub_h+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">rightRotation</span>(subroot-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(subroot-&gt;rchild-&gt;lsub_h+<span class="number">1</span>==subroot-&gt;rchild-&gt;rsub_h)&#123;</span><br><span class="line">            <span class="built_in">leftRotation</span>(subroot-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(subroot-&gt;lchild-&gt;lsub_h+<span class="number">1</span>==subroot-&gt;lchild-&gt;rsub_h)&#123;</span><br><span class="line">            <span class="built_in">leftRotation</span>(subroot-&gt;lchild-&gt;rchild);</span><br><span class="line">            <span class="built_in">rightRotation</span>(subroot-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(subroot-&gt;rchild-&gt;lsub_h==subroot-&gt;rchild-&gt;rsub_h+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">rightRotation</span>(subroot-&gt;rchild-&gt;lchild);</span><br><span class="line">            <span class="built_in">leftRotation</span>(subroot-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintain_balance_delete</span><span class="params">(avlNode* p)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 删除的节点向上计算 balance</span></span><br><span class="line">        avlNode* subroot = <span class="built_in">find_Unbalanced_Node</span>(p);</span><br><span class="line">        <span class="keyword">if</span>(subroot==<span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// to do </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">leftRotation</span><span class="params">(avlNode* p)</span></span>&#123;</span><br><span class="line">        avlNode *f = p-&gt;fa, *gf = f-&gt;fa;</span><br><span class="line">        f-&gt;rchild = p-&gt;lchild;</span><br><span class="line">        f-&gt;rsub_num = p-&gt; lsub_num;</span><br><span class="line">        f-&gt;rchild-&gt;fa = f;</span><br><span class="line">        p-&gt;lchild = f;</span><br><span class="line">        p-&gt;lsub_num = f-&gt;lsub_num + f-&gt;rsub_num + <span class="number">1</span>;</span><br><span class="line">        f-&gt;fa = p;</span><br><span class="line">        <span class="keyword">if</span>(gf-&gt;lchild==f)&#123;</span><br><span class="line">            gf-&gt;lchild = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(gf-&gt;rchild==f)&#123;</span><br><span class="line">            gf-&gt;rchild = p;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;fa = gf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rightRotation</span><span class="params">(avlNode* p)</span></span>&#123;</span><br><span class="line">        avlNode *f = p-&gt;fa, *gf = f-&gt;fa;</span><br><span class="line">        f-&gt;lchild = p-&gt;rchild;</span><br><span class="line">        f-&gt;lsub_num = p-&gt; rsub_num;</span><br><span class="line">        f-&gt;lchild-&gt;fa = f;</span><br><span class="line">        p-&gt;rchild = f;</span><br><span class="line">        p-&gt;rsub_num = f-&gt;lsub_num + f-&gt;rsub_num + <span class="number">1</span>;</span><br><span class="line">        f-&gt;fa = p;</span><br><span class="line">        <span class="keyword">if</span>(gf-&gt;lchild==f)&#123;</span><br><span class="line">            gf-&gt;lchild = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(gf-&gt;rchild==f)&#123;</span><br><span class="line">            gf-&gt;rchild = p;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;fa = gf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">avlNode* <span class="title">maxValue_in_lsubtree</span><span class="params">(avlNode* p)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    avlNode* T;  <span class="comment">// root</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">avlTree P3369;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n; <span class="built_in">rd</span>(n);</span><br><span class="line">    avlNode* rooT = P3369.<span class="built_in">getRoot</span>();</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="type">int</span> opt, x;</span><br><span class="line">        <span class="built_in">rd</span>(opt); <span class="built_in">rd</span>(x);</span><br><span class="line">        <span class="keyword">switch</span>(opt)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: P3369.<span class="built_in">insertX</span>(rooT, x); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: P3369.<span class="built_in">deleteX</span>(x); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, P3369.<span class="built_in">index_X</span>(x)); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, P3369.<span class="built_in">findIndex_X</span>()); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>: <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, P3369.<span class="built_in">preX</span>()); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>: <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, P3369.<span class="built_in">afterX</span>()); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-倍经验日（背包）"><a href="#5-倍经验日（背包）" class="headerlink" title="5 倍经验日（背包）"></a>5 倍经验日（背包）</h2><p><strong>题目背景</strong></p><p>现在乐斗有活动了！每打一个人可以获得 5 倍经验！absi2011 却无奈的看着那一些比他等级高的好友，想着能否把他们干掉。干掉能拿不少经验的。</p><p><strong>题目描述</strong></p><p>现在 absi2011 拿出了 $x$ 个迷你装药物（嗑药打人可耻…），准备开始与那些人打了。</p><p>由于迷你装药物每个只能用一次，所以 absi2011 要谨慎的使用这些药。悲剧的是，用药量没达到最少打败该人所需的属性药药量，则打这个人必输。例如他用 $2$ 个药去打别人，别人却表明 $3$ 个药才能打过，那么相当于你输了并且这两个属性药浪费了。</p><p>现在有 $n$ 个好友，给定失败时可获得的经验、胜利时可获得的经验，打败他至少需要的药量。</p><p>要求求出最大经验 $s$，输出 $5s$。</p><p><strong>输入格式</strong></p><p>第一行两个数，$n$ 和 $x$。</p><p>后面 $n$ 行每行三个数，分别表示失败时获得的经验 $\mathit{lose}_i$，胜利时获得的经验 $\mathit{win}_i$ 和打过要至少使用的药数量 $\mathit{use}_i$。</p><p><strong>输出格式</strong></p><p>一个整数，最多获得的经验的五倍。</p><p><strong>样例 #1</strong></p><p><strong>样例输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6 8</span><br><span class="line">21 52 1</span><br><span class="line">21 70 5</span><br><span class="line">21 48 2</span><br><span class="line">14 38 3</span><br><span class="line">14 36 1</span><br><span class="line">14 36 2</span><br></pre></td></tr></table></figure><p><strong>样例输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1060</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><p><strong>【Hint】</strong></p><p>五倍经验活动的时候，absi2011 总是吃体力药水而不是这种属性药。</p><p><strong>【数据范围】</strong></p><ul><li>对于 $10\%$ 的数据，保证 $x=0$。</li><li>对于 $30\%$ 的数据，保证 $0\le n\le 10$，$0\le x\le 20$。</li><li>对于 $60\%$ 的数据，保证 $0\le n,x\le 100$， $10&lt;lose_i,win_i\le 100$，$0\le use_i\le 5$。</li><li>对于 $100\%$ 的数据，保证 $0\le n,x\le 10^3$，$0&lt;lose_i\le win_i\le 10^6$，$0\le use_i\le 10^3$。</li></ul><p><strong>【题目来源】</strong></p><p>fight.pet.qq.com</p><p>absi2011 授权题目</p><p><strong>分析</strong></p><p>为防止学校自命题出 dp 埋伏一手，还是练两道为妙。</p><p>整体思路看起来比较显然，但是特判会有点麻烦。大佬们都是用数组的，我还是老老实实用记忆化搜索。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> f[MAXN][MAXN],lose[MAXN],win[MAXN],use[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(f[n][w]) <span class="keyword">return</span> f[n][w];</span><br><span class="line">    <span class="keyword">if</span>(!use[n])&#123;</span><br><span class="line">        f[n][w] = <span class="built_in">dp</span>(n<span class="number">-1</span>,w) + win[n];</span><br><span class="line">        <span class="keyword">return</span> f[n][w];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!w)&#123;</span><br><span class="line">        f[n][w] = <span class="built_in">dp</span>(n<span class="number">-1</span>,<span class="number">0</span>) + lose[n];</span><br><span class="line">        <span class="keyword">return</span> f[n][w];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> temp1 = <span class="built_in">dp</span>(n<span class="number">-1</span>,w) + lose[n];</span><br><span class="line">    <span class="type">int</span> temp2 = (w-use[n]&gt;=<span class="number">0</span>)?(<span class="built_in">dp</span>(n<span class="number">-1</span>,w-use[n]) + win[n]):<span class="number">0</span>;</span><br><span class="line">    f[n][w] = <span class="built_in">MAX</span>(temp1, temp2);</span><br><span class="line">    <span class="keyword">return</span> f[n][w];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;x);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;lose[i],&amp;win[i],&amp;use[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="number">5ll</span>*<span class="built_in">dp</span>(n,x));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tarjan </tag>
            
            <tag> lca </tag>
            
            <tag> 模拟退火 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构应试笔记</title>
      <link href="/posts/7ccfe718.html"/>
      <url>/posts/7ccfe718.html</url>
      
        <content type="html"><![CDATA[<p>应试向的数据结构考试和实际写起代码来有很大区别。重复造轮子就不说了，更可怕的是，有时还需要应试者人脑模拟算法的执行过程。相对来说，对针对具体问题设计算法的考察较浅。</p><p>另外，有时王道书的代码风格奇特，我尽量改为了自己习惯的写法，这点需要特别注意。</p><p>本文中所有代码除非注明，均不保证能运行。</p><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>线性表：</p><ul><li>顺序存储<ul><li>顺序表</li></ul></li><li>链式存储<ul><li>单链表（指针实现）</li><li>双链表（指针实现）</li><li>循环链表（指针实现）</li><li>静态链表（借助数组实现）</li></ul></li></ul><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p>线性表的顺序存储类型描述为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MaxSize = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SqList</span>&#123;</span><br><span class="line">  ElemType data[MaxSize];</span><br><span class="line">  <span class="type">int</span> length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>动态分配：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> InitSize = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SeqList</span>&#123;</span><br><span class="line">  ElemType* data;</span><br><span class="line">  <span class="type">int</span> MaxSize, length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>C++ 的初始动态分配语句为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L.data = <span class="keyword">new</span> ElemType[InitSize];</span><br></pre></td></tr></table></figure><p><strong>注意：动态分配并不是链式存储，它同样属于顺序存储结构，物理结构没有变化，依然是随机存取方式，只是分配的空间大小可以在运行时动态决定。</strong></p><blockquote><p>例：17 页第 11 题。<br>顺序表的插入算法中，当 n 个空间已满时，可再申请增加分配 m 个空间，若申请失败，则说明系统没有（<strong>n + m 个连续</strong>）可分配的存储空间。</p></blockquote><p>顺序表的操作：插入、删除、按值查找。这部分的代码自己实现就行。</p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>单链表的描述：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  LNode* next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>动态分配：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LNode* p = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br></pre></td></tr></table></figure><p>要表示一个单链表时，需要一个头指针<code>L</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LNode* L;</span><br></pre></td></tr></table></figure><p>带头节点的单链表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LNode*&amp; L)</span></span>&#123;</span><br><span class="line">  L = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));  <span class="comment">//分配一个头节点</span></span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;    <span class="comment">//内存不足，分配失败</span></span><br><span class="line">  L-&gt;next = <span class="literal">NULL</span>;             <span class="comment">//头节点之后暂时还没有节点</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(LNode* L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">  LNode* L;</span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按位序插入（带头节点）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头节点编号为0，有数据的节点编号从1开始</span></span><br><span class="line"><span class="comment">//插入完成后新元素的位置为 i</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i, ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* p;  <span class="comment">//指向当前扫描到的节点</span></span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">//当前p指向的是第几个节点</span></span><br><span class="line">  p = L;  <span class="comment">//指向头节点</span></span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>) <span class="comment">//i值不合法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  s-&gt;data = e;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，若<code>i=1</code>，即是插在表头。</p><p>指定节点的后插操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextNode</span><span class="params">(LNode* p, ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  s-&gt;data = e;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，发现<strong>按位序插入（带头节点）</strong>的代码可以通过复用<strong>指定节点的后插操作</strong>的代码来简化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextNode</span><span class="params">(LNode* p, ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  s-&gt;data = e;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i, ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* p;  <span class="comment">//指向当前扫描到的节点</span></span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">//当前p指向的是第几个节点</span></span><br><span class="line">  p = L;  <span class="comment">//指向头节点</span></span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">InsertNextNode</span>(p, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定节点的前插操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//思路：使用后插，然后交换数据成员的内容</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertPreNode</span><span class="params">(LNode* p, ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>) <span class="comment">//内存分配失败，考试可以不写</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  s-&gt;data = p-&gt;data;</span><br><span class="line">  p-&gt;data = e;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按位序删除（带头节点）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i, ElemType &amp;e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* p;  <span class="comment">//指向当前扫描到的节点</span></span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">//当前p指向的是第几个节点</span></span><br><span class="line">  p = L;  <span class="comment">//指向头节点</span></span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123; <span class="comment">//循环找到第 i-1 个节点</span></span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)  <span class="comment">// i 值不合法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next==<span class="literal">NULL</span>) <span class="comment">//第i-1个节点之后已无其他节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* q = p-&gt;next; <span class="comment">//令q指向被删除节点</span></span><br><span class="line">  e = q-&gt;data; <span class="comment">//用e返回元素的值</span></span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/07/10/64abd587e3be8.png" alt="46-1.png" title="上面代码的图示"></p><p>指定节点的删除：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除指定节点 p</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteNode</span><span class="params">(LNode* p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* q = p-&gt;next;</span><br><span class="line">  p-&gt;data = p-&gt;next-&gt;data;</span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/07/10/64abdaced677a.png" alt="46-2.png"></p><p>注意上图中的代码有一个 bug，在边界情况（p 节点刚好是最后一个节点）下会产生错误。但是只是应试的话无所谓了，扣也最多一两分，甚至不扣。</p><p>单链表按位查找：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位查找，返回第i个元素的指针</span></span><br><span class="line"><span class="function">LNode* <span class="title">GetElem</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  LNode* p;  <span class="comment">//指向当前扫描到的节点</span></span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">//当前p指向的是第几个节点</span></span><br><span class="line">  p = L;  <span class="comment">//指向头节点</span></span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按值查找：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LNode* <span class="title">LocateElem</span><span class="params">(LNode*&amp; L, ElemType e)</span></span>&#123;</span><br><span class="line">  LNode* p = L-&gt;next;</span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;data!=e)</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：如果<code>ElemType</code>是一个<code>struct</code>，需要自己定义比较运算符。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ElemType</span>&#123;</span><br><span class="line">  <span class="type">int</span> a;</span><br><span class="line">  <span class="type">int</span> b; <span class="comment">//仅作举例 int</span></span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span> != (<span class="type">const</span> ElemType&amp; rhs);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> ElemType::<span class="keyword">operator</span> != (<span class="type">const</span> ElemType&amp; rhs)&#123;</span><br><span class="line">  <span class="built_in">return</span> (a!=rhs.a || b!=rhs.b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求表的长度：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">(LNode*&amp; L)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">  LNode* p = L;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    len++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尾插法建立单链表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LNode* <span class="title">List_TailInsert</span><span class="params">(LNode*&amp; L)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  L = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  LNode *s, *r=L;  <span class="comment">// r 指向最后一个元素</span></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123; <span class="comment">// 9999是退出值</span></span><br><span class="line">    s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    r-&gt;next = s;</span><br><span class="line">    r = s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  &#125;</span><br><span class="line">  r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>头插法建立单链表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//王道书的代码无法忍受，我自己写了。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">List_HeadInsert</span><span class="params">(LNode*&amp; L)</span></span>&#123;</span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123; <span class="comment">//9999 为退出值，当然也可以while(scanf(&quot;%d&quot;,&amp;x))&#123;&#125; ，看具体情况</span></span><br><span class="line">    <span class="built_in">InsertNextNode</span>(L, x);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结：单链表的全部操作"><a href="#总结：单链表的全部操作" class="headerlink" title="总结：单链表的全部操作"></a>总结：单链表的全部操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LNode*&amp; L)</span></span>&#123;</span><br><span class="line">  L = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));  <span class="comment">//分配一个头节点</span></span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;    <span class="comment">//内存不足，分配失败</span></span><br><span class="line">  L-&gt;next = <span class="literal">NULL</span>;             <span class="comment">//头节点之后暂时还没有节点</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(LNode* L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;  <span class="comment">//或者认为是 main() 函数也勉强可以</span></span><br><span class="line">  LNode* L;</span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextNode</span><span class="params">(LNode* p, ElemType e)</span></span>&#123; <span class="comment">//指定节点的后插操作</span></span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  s-&gt;data = e;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//思路：使用后插，然后交换数据成员的内容</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertPreNode</span><span class="params">(LNode* p, ElemType e)</span></span>&#123;  <span class="comment">//指定节点的前插操作</span></span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>) <span class="comment">//内存分配失败，考试可以不写</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  s-&gt;data = p-&gt;data;</span><br><span class="line">  p-&gt;data = e;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按位查找，返回第i个元素的指针</span></span><br><span class="line"><span class="function">LNode* <span class="title">GetElem</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  LNode* p;  <span class="comment">//指向当前扫描到的节点</span></span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">//当前p指向的是第几个节点</span></span><br><span class="line">  p = L;  <span class="comment">//指向头节点</span></span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LNode* <span class="title">LocateElem</span><span class="params">(LNode*&amp; L, ElemType e)</span></span>&#123; <span class="comment">//按值查找</span></span><br><span class="line">  LNode* p = L-&gt;next;</span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;data!=e)  <span class="comment">//注意细节，往上翻</span></span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入完成后新元素的位置为 i</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i, ElemType e)</span></span>&#123; <span class="comment">//按位序插入</span></span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* p = <span class="built_in">GetElem</span>(L, i<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">InsertNextNode</span>(p, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i, ElemType &amp;e)</span></span>&#123; <span class="comment">//按位序删除</span></span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* p = <span class="built_in">GetElem</span>(L, i<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)  <span class="comment">// i 值不合法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next==<span class="literal">NULL</span>) <span class="comment">//第i-1个节点之后已无其他节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* q = p-&gt;next; <span class="comment">//令q指向被删除节点</span></span><br><span class="line">  e = q-&gt;data; <span class="comment">//用e返回元素的值</span></span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除指定节点 p</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteNode</span><span class="params">(LNode* p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* q = p-&gt;next;</span><br><span class="line">  p-&gt;data = p-&gt;next-&gt;data;</span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">(LNode*&amp; L)</span></span>&#123; <span class="comment">//求表的长度</span></span><br><span class="line">  <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">  LNode* p = L;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    len++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LNode* <span class="title">List_TailInsert</span><span class="params">(LNode*&amp; L)</span></span>&#123; <span class="comment">//尾插法建立单链表</span></span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  L = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  LNode *s, *r=L;  <span class="comment">// r 指向最后一个元素</span></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123; <span class="comment">// 9999是退出值</span></span><br><span class="line">    s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    r-&gt;next = s;</span><br><span class="line">    r = s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  &#125;</span><br><span class="line">  r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">List_HeadInsert</span><span class="params">(LNode*&amp; L)</span></span>&#123; <span class="comment">//头插法建立单链表</span></span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123; <span class="comment">//9999 为退出值，当然也可以while(scanf(&quot;%d&quot;,&amp;x))&#123;&#125; ，看具体情况</span></span><br><span class="line">    <span class="built_in">InsertNextNode</span>(L, x);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><p>双链表的描述：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  DNode *pre, *next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitDList</span><span class="params">(DNode*&amp; L)</span></span>&#123;</span><br><span class="line">  L = (DNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));</span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//内存不足，分配失败</span></span><br><span class="line">  L-&gt;pre = <span class="literal">NULL</span>;</span><br><span class="line">  L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(DNode* L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">  DNode* L;</span><br><span class="line">  <span class="built_in">InitDList</span>(L);</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双链表的插入：</p><p><img src="https://bu.dusays.com/2023/07/13/64af6d656cba5.png" alt="46-3.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 p 节点之后插入 s 节点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertAfter</span><span class="params">(DNode* p, DNode* s)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span> || s==<span class="literal">NULL</span>) <span class="comment">//非法参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    p-&gt;next-&gt;pre = s;</span><br><span class="line">  s-&gt;pre = p;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双链表的删除和销毁：</p><p><img src="https://bu.dusays.com/2023/07/14/64b0ae3aa83d5.png" alt="46-4.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除 p 节点的后继节点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteAfter</span><span class="params">(DNode* p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  DNode* q = p-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(q==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(q-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    q-&gt;next-&gt;pre = p;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DestoryList</span><span class="params">(DNode*&amp; L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(L-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">DeleteAfter</span>(L);</span><br><span class="line">  <span class="built_in">free</span>(L);</span><br><span class="line">  L = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双链表的遍历：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后向遍历</span></span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">  <span class="comment">//do something on p</span></span><br><span class="line">  p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前向遍历</span></span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">  <span class="comment">//do something on p</span></span><br><span class="line">  p = p-&gt;pre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前向遍历（不处理头节点）</span></span><br><span class="line"><span class="keyword">while</span>(p-&gt;pre!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">  <span class="comment">//do something on p</span></span><br><span class="line">  p = p-&gt;pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p>循环单链表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LNode*&amp; L)</span></span>&#123;</span><br><span class="line">  L = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));  <span class="comment">//分配一个头节点</span></span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;    <span class="comment">//内存不足，分配失败</span></span><br><span class="line">  L-&gt;next = L;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(LNode* L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next==L)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isTail</span><span class="params">(LNode* L, LNode* p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next==L)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/07/15/64b1f2544dc77.png" alt="46-5.png"></p><p>具体代码可以自己实现，不再赘述。</p><p>循环双链表：</p><p><img src="https://bu.dusays.com/2023/07/15/64b1f39faa21e.png" alt="46-6.png"></p><p><img src="https://bu.dusays.com/2023/07/15/64b1f5e3b81a1.png" alt="46-7.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  DNode *pre, *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitDList</span><span class="params">(DNode*&amp; L)</span></span>&#123;</span><br><span class="line">  L = (DNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));</span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  L-&gt;pre = L;</span><br><span class="line">  L-&gt;next = L;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">  DNode* L;</span><br><span class="line">  <span class="built_in">InitDList</span>(L);</span><br><span class="line">  <span class="comment">//do something...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(DNode* L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next==L)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isTail</span><span class="params">(DNode* L, DNode* p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next==L)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后插操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 p 节点之后插入 s 节点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertAfter</span><span class="params">(DNode* p, DNode* s)</span></span>&#123;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next-&gt;pre = s;</span><br><span class="line">  s-&gt;pre = p;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除操作：</p><p><img src="https://bu.dusays.com/2023/07/15/64b1fbbd14de0.png" alt="46-8.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除 p 的后继节点 q</span></span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">q-&gt;next-&gt;pre = p;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br></pre></td></tr></table></figure><h3 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h3><p><img src="https://bu.dusays.com/2023/07/15/64b205c5c3f47.png" alt="46-9.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> Maxsize = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="type">int</span> next;  <span class="comment">//下一个元素的数组下标</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Node a[Maxsize];</span><br><span class="line">  <span class="comment">//do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/07/15/64b20bb881ba7.png" alt="46-10.png"></p><h2 id="栈、队列、数组"><a href="#栈、队列、数组" class="headerlink" title="栈、队列、数组"></a>栈、队列、数组</h2><p><del>这 tm 还要学？</del></p><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>顺序栈：代码自己实现。</p><p>共享栈：</p><p><img src="https://bu.dusays.com/2023/07/25/64bfeeb95d52e.jpg" alt="46-11.jpg"></p><p>链栈：通常采用<strong>不带头节点</strong>的单链表实现，所有操作在表头进行。</p><p><img src="https://bu.dusays.com/2023/07/25/64bff090644c8.png" alt="46-12.png" title="链栈"></p><p>队列：</p><p><img src="https://bu.dusays.com/2023/07/26/64bff2bc63399.jpg" alt="46-13.jpg"></p><p>循环队列：</p><p><img src="https://bu.dusays.com/2023/07/26/64c07a2fe98e8.jpg" alt="46-14.jpg"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MaxSize = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">myQueue</span>&#123;</span><br><span class="line">  ElemType data[MaxSize];</span><br><span class="line">  <span class="type">int</span> front, rear;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(myQueue&amp; qwq)</span></span>&#123; <span class="comment">//初始化</span></span><br><span class="line">  qwq.rear = qwq.front = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(myQueue qwq)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(qwq.rear==qwq.front) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">EnQueue</span><span class="params">(myQueue&amp; qwq, ElemType x)</span></span>&#123; <span class="comment">//入队</span></span><br><span class="line">  <span class="keyword">if</span>((qwq.rear+<span class="number">1</span>)%MaxSize==qwq.front)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">//队满则报错</span></span><br><span class="line">  qwq.data[qwq.rear] = x;</span><br><span class="line">  qwq.rear = (qwq.rear+<span class="number">1</span>) % MaxSize;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeQueue</span><span class="params">(myQueue&amp; qwq, ElemType&amp; x)</span></span>&#123;  <span class="comment">//出队</span></span><br><span class="line">  <span class="keyword">if</span>(qwq.rear==qwq.front) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//队空则报错</span></span><br><span class="line">  x = qwq.data[qwq.front];</span><br><span class="line">  qwq.front = (qwq.front+<span class="number">1</span>) % MaxSize;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>队列的链式存储（左开右闭？）：</p><p>通常采用<strong>带头节点</strong>的单链表。</p><p><img src="https://bu.dusays.com/2023/07/26/64c083cc0a7ad.png" alt="46-15.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LinkQueue</span>&#123;</span><br><span class="line">  LNode* front;</span><br><span class="line">  LNode* rear;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue&amp; qwq)</span></span>&#123;</span><br><span class="line">  qwq.front = qwq.rear = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode)); <span class="comment">//建立头节点</span></span><br><span class="line">  qwq.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">  LinkQueue qwq;  <span class="comment">//声明一个队列</span></span><br><span class="line">  <span class="built_in">InitQueue</span>(qwq);</span><br><span class="line">  <span class="comment">//do something...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(LinkQueue qwq)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(qwq.front==qwq.rear) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EnQueue</span><span class="params">(LinkQueue&amp; qwq, ElemType x)</span></span>&#123;  <span class="comment">//入队</span></span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNdoe));</span><br><span class="line">  s-&gt;data = x;</span><br><span class="line">  s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  qwq.rear-&gt;next = s;</span><br><span class="line">  qwq.rear = s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeQueue</span><span class="params">(LinkQueue&amp; qwq, ElemType&amp; x)</span></span>&#123; <span class="comment">//出队</span></span><br><span class="line">  <span class="keyword">if</span>(qwq.front==qwq.rear) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">//空队，失败</span></span><br><span class="line">  LNode* p = qwq.front-&gt;next;</span><br><span class="line">  x = p-&gt;data;</span><br><span class="line">  qwq.front-&gt;next = p-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(qwq.rear==p) qwq.rear = qwq.front;</span><br><span class="line">  <span class="built_in">free</span>(p);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p><strong>栈在括号匹配中的应用：</strong></p><p><img src="https://bu.dusays.com/2023/07/26/64c093105a785.png" alt="46-16.png"></p><p><strong>栈在表达式求值中的应用：</strong></p><p>Reverse Polish notation（逆波兰表达式 = 后缀表达式）</p><p>Polish notation（波兰表达式 = 前缀表达式）</p><p><img src="https://bu.dusays.com/2023/07/27/64c1d1a988b93.png" alt="46-17.png"></p><p><img src="https://bu.dusays.com/2023/07/27/64c1d4b2c6635.png" alt="46-18.png"></p><p><img src="https://bu.dusays.com/2023/07/27/64c1d98cf28ec.png" alt="46-18dot5.png"></p><p><img src="https://bu.dusays.com/2023/07/27/64c1d68c05225.png" alt="46-19.png"></p><p><img src="https://bu.dusays.com/2023/07/27/64c1daafecb11.png" alt="46-20.png"></p><p><img src="https://bu.dusays.com/2023/07/27/64c1de0b5e5cd.png" alt="46-21.png"></p><p>将<strong>中缀转后缀</strong>和<strong>后缀表达式求值</strong>两个算法结合起来：</p><p><img src="https://bu.dusays.com/2023/07/27/64c1e7130be48.png" alt="46-22.png"></p><h2 id="树、二叉树"><a href="#树、二叉树" class="headerlink" title="树、二叉树"></a>树、二叉树</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>有序树和无序树：</p><p><img src="https://bu.dusays.com/2023/07/30/64c5cea0b77e0.png" alt="46-23.png"></p><p><strong>注意：此课程中<code>度</code>的概念和离散数学中不同。</strong>（万恶的图论名词差异）</p><p><img src="https://bu.dusays.com/2023/07/30/64c5da5e65dc1.png" alt="46-24.png"></p><p>树的一些性质：（注意这里的“度数”是歧义概念）</p><ol><li>树中的节点数等于所有节点的度数之和加 1 </li><li>度为 m 的树中第 i 层上至多有 $m^{i-1}$ 个节点（$i\geqslant 1$）</li><li>高度为 h 的 m 叉树至多有 $\frac{m^h-1}{m-1}$ 个节点</li><li>具有 n 个节点的 m 叉树最小高度为 $\left \lceil \log_m(n(m-1)+1) \right \rceil$</li></ol><p>结论 4 的推导：</p><p>假设高度为 $h$ , 由结论3 ：</p><script type="math/tex; mode=display">\frac{m^{h-1}-1}{m-1}< n \leqslant \frac{m^h-1}{m-1}</script><script type="math/tex; mode=display">m^{h-1}<n(m-1)+1\leqslant m^h</script><script type="math/tex; mode=display">h-1<\log_m(n(m-1)+1)\leqslant h</script><script type="math/tex; mode=display">h_{\min}=\left \lceil \log_m(n(m-1)+1) \right \rceil</script><p>满二叉树、完全二叉树的性质：</p><p><img src="https://bu.dusays.com/2023/08/03/64ca86a48e788.png" alt="46-25.png"></p><p>二叉排序树：</p><p><img src="https://bu.dusays.com/2023/08/03/64ca884b17442.png" alt="46-26.png"></p><p>平衡二叉树：</p><p><img src="https://bu.dusays.com/2023/08/03/64ca899918de1.png" alt="46-27.png"></p><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><p>设非空二叉树中<code>度</code>（歧义概念）为 0、1、2 的节点个数分别为 n0、n1、n2 , 则 $n_0=n_2+1$ （叶子节点比二分枝节点多一个）。推导如下：</p><p>假设树中节点总数为 n , 则：</p><ul><li>$n = n_0 + n_1 + n_2$</li><li>$n = n_1 + 2n_2 + 1$</li></ul><p>具有 n 个（n&gt;0）节点的完全二叉树的高度 h 为 $\left \lceil \log_2(n+1) \right \rceil$ 或 $\left \lfloor \log_2n \right \rfloor +1$. （推导不难）</p><p>某个性质：</p><p><img src="https://bu.dusays.com/2023/08/03/64ca8fc557c02.png" alt="46-28.png"></p><h3 id="二叉树的存储"><a href="#二叉树的存储" class="headerlink" title="二叉树的存储"></a>二叉树的存储</h3><p>顺序存储（<strong>绝大多数情况下不会使用</strong>）：</p><p><img src="https://bu.dusays.com/2023/08/04/64cd1cbbed56f.png" alt="46-29.png"></p><p>完全二叉树的此种存储结构的操作：</p><p><img src="https://bu.dusays.com/2023/08/04/64cd1dc4cced1.png" alt="46-30.png"></p><p>对于非完全二叉树：</p><p><img src="https://bu.dusays.com/2023/08/04/64cd1f309b356.png" alt="46-31.png" title="丑陋的做法"></p><p>链式存储：</p><p><img src="https://bu.dusays.com/2023/08/04/64cd206123c45.png" alt="46-32.png"></p><p>代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ElemType</span>&#123;</span><br><span class="line">  <span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BinoTree</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  BinoTree* lchild;</span><br><span class="line">  BinoTree* rchild;</span><br><span class="line">  <span class="comment">//可以根据需要加上指向父节点的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一棵空树</span></span><br><span class="line">BinoTree* root = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入根节点</span></span><br><span class="line">root = (BinoTree*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BinoTree));</span><br><span class="line">root-&gt;data = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">root-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入新节点（例子）</span></span><br><span class="line">BinoTree* p = (BinoTree*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BinoTree));</span><br><span class="line">p-&gt;data = &#123;<span class="number">2</span>&#125;;</span><br><span class="line">p-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;lchild = p;</span><br></pre></td></tr></table></figure><p>上面代码对应的图：</p><p><img src="https://bu.dusays.com/2023/08/05/64cd2344bffb8.png" alt="46-33.png"></p><h3 id="先、中、后序遍历"><a href="#先、中、后序遍历" class="headerlink" title="先、中、后序遍历"></a>先、中、后序遍历</h3><ul><li><strong>先</strong>序遍历：<strong>根</strong>、左、右（<strong>N</strong>LR）</li><li><strong>中</strong>序遍历：左、<strong>根</strong>、右（L<strong>N</strong>R）</li><li><strong>后</strong>序遍历：左、右、<strong>根</strong>（LR<strong>N</strong>）</li></ul><p>例子：</p><p><img src="https://bu.dusays.com/2023/08/05/64cd286999c76.png" alt="46-34.png"></p><p>和表达式的联系：</p><p><img src="https://bu.dusays.com/2023/08/05/64cd298d710cc.png" alt="46-35.png"></p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">(BinoTree* T)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">visit</span>(T);             <span class="comment">//访问根节点</span></span><br><span class="line">    <span class="built_in">preOrder</span>(T-&gt;lchild);  <span class="comment">//访问左孩子</span></span><br><span class="line">    <span class="built_in">preOrder</span>(T-&gt;rchild);  <span class="comment">//访问右孩子</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrder</span><span class="params">(BinoTree* T)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">inOrder</span>(T-&gt;lchild);  <span class="comment">//访问左孩子</span></span><br><span class="line">    <span class="built_in">visit</span>(T);            <span class="comment">//访问根节点</span></span><br><span class="line">    <span class="built_in">inOrder</span>(T-&gt;rchild);  <span class="comment">//访问右孩子</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">(BinoTree* T)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">postOrder</span>(T-&gt;lchild);  <span class="comment">//访问左孩子</span></span><br><span class="line">    <span class="built_in">postOrder</span>(T-&gt;rchild);  <span class="comment">//访问右孩子</span></span><br><span class="line">    <span class="built_in">visit</span>(T);              <span class="comment">//访问根节点</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><p>其实就是 BFS 。</p><p><img src="https://bu.dusays.com/2023/08/07/64cff1caf36aa.png" alt="46-36.png"></p><p>执行算法：</p><ol><li>初始化一个辅助队列</li><li>根节点入队</li><li>若队列非空，弹队首，访问弹出的节点，并将其孩子（若有）入队</li><li>重复 3 直至队列为空</li></ol><p>伪代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：我使用了自己习惯的写法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">  queue&lt;node&gt; qwq;</span><br><span class="line">  node temp;</span><br><span class="line">  <span class="comment">//do something...</span></span><br><span class="line">  qwq.<span class="built_in">push</span>(temp);</span><br><span class="line">  <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>())&#123;</span><br><span class="line">    node head = qwq.<span class="built_in">front</span>(); <span class="comment">//取队首</span></span><br><span class="line">    qwq.<span class="built_in">pop</span>();               <span class="comment">//弹队首</span></span><br><span class="line">    <span class="comment">//do something...</span></span><br><span class="line">    qwq.<span class="built_in">push</span>((node)&#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个 BFS 剪枝的实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://www.luogu.com.cn/problem/P1126 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,sx,sy,ex,ey;</span><br><span class="line"><span class="type">char</span> face; <span class="type">bool</span> ok=<span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">53</span>][<span class="number">53</span>],ans;</span><br><span class="line"><span class="type">int</span> fx[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">53</span>][<span class="number">53</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="type">int</span> dir,step;</span><br><span class="line">    <span class="type">bool</span> chan;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">changedir</span><span class="params">(<span class="type">int</span> dirt,<span class="type">int</span> xia)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xia==<span class="number">0</span>)<span class="keyword">return</span> (dirt+<span class="number">1</span>)%<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(xia==<span class="number">233</span>)<span class="built_in">return</span> (dirt+<span class="number">2</span>)%<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">return</span> (dirt<span class="number">-1</span>+<span class="number">4</span>)%<span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">1</span>||x&gt;=n||y&lt;<span class="number">1</span>||y&gt;=m)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[x][y]||a[x+<span class="number">1</span>][y])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[x][y+<span class="number">1</span>]||a[x+<span class="number">1</span>][y+<span class="number">1</span>])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;node&gt; qwq;</span><br><span class="line">    node temp;</span><br><span class="line">    temp.x=sx;temp.y=sy;</span><br><span class="line">    <span class="keyword">if</span>(face==<span class="string">&#x27;E&#x27;</span>)temp.dir=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(face==<span class="string">&#x27;S&#x27;</span>)temp.dir=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(face==<span class="string">&#x27;W&#x27;</span>)temp.dir=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(face==<span class="string">&#x27;N&#x27;</span>)temp.dir=<span class="number">3</span>;</span><br><span class="line">    temp.step=<span class="number">0</span>; temp.chan=<span class="literal">false</span>;</span><br><span class="line">    qwq.<span class="built_in">push</span>(temp);</span><br><span class="line">    vis[temp.x][temp.y]=<span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node head=qwq.<span class="built_in">front</span>();</span><br><span class="line">        qwq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> nx=head.x+fx[head.dir][<span class="number">0</span>]*i;</span><br><span class="line">            <span class="type">int</span> ny=head.y+fx[head.dir][<span class="number">1</span>]*i;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">check</span>(nx,ny))<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(vis[nx][ny])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(nx==ex&amp;&amp;ny==ey)</span><br><span class="line">            &#123;</span><br><span class="line">                ans=head.step+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            qwq.<span class="built_in">push</span>((node)&#123;nx,ny,head.dir,head.step+<span class="number">1</span>,<span class="literal">false</span>&#125;);</span><br><span class="line">            vis[nx][ny]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(head.chan)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> dirti=<span class="built_in">changedir</span>(head.dir,<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> dirti2=<span class="built_in">changedir</span>(head.dir,<span class="number">1</span>);</span><br><span class="line">        qwq.<span class="built_in">push</span>((node)&#123;head.x,head.y,dirti,head.step+<span class="number">1</span>,<span class="literal">true</span>&#125;);</span><br><span class="line">        qwq.<span class="built_in">push</span>((node)&#123;head.x,head.y,dirti2,head.step+<span class="number">1</span>,<span class="literal">true</span>&#125;);</span><br><span class="line">        <span class="keyword">if</span>(ok)</span><br><span class="line">        &#123;</span><br><span class="line">            ok=<span class="literal">false</span>;</span><br><span class="line">            <span class="type">int</span> dirti3=<span class="built_in">changedir</span>(head.dir,<span class="number">233</span>);</span><br><span class="line">            qwq.<span class="built_in">push</span>((node)&#123;head.x,head.y,dirti3,head.step+<span class="number">2</span>,<span class="literal">true</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">    cin&gt;&gt;a[i][j];</span><br><span class="line">    cin&gt;&gt;sx&gt;&gt;sy&gt;&gt;ex&gt;&gt;ey&gt;&gt;face;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(sx==ex&amp;&amp;sy==ey)cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">bfs</span>())cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;-1&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意在树或者图中需要在具体的数据结构上实现 BFS ，例如链式前向星。</p><p>有必要给出应试代码，以下代码只适合二叉树：</p><p><img src="https://bu.dusays.com/2023/08/07/64cffa921914e.png" alt="46-37.png"></p><h3 id="由遍历序列构造二叉树"><a href="#由遍历序列构造二叉树" class="headerlink" title="由遍历序列构造二叉树"></a>由遍历序列构造二叉树</h3><p><strong>若只给出一棵二叉树的 前/中/后/层 序遍历序列中的一种，不能唯一确定一棵二叉树。</strong></p><p>由二叉树的遍历序列构造二叉树，需已知以下三种信息中的任一种：</p><ul><li>前序+中序 遍历序列</li><li>后序+中序 遍历序列</li><li>层序+中序 遍历序列</li></ul><p>由前序+中序遍历序列确定二叉树：</p><p><img src="https://bu.dusays.com/2023/08/07/64d06d5f516a2.png" alt="46-38.png"></p><p>由后序+中序遍历序列确定二叉树：</p><p><img src="https://bu.dusays.com/2023/08/07/64d06f71eb257.png" alt="46-39.png"></p><p>由层序+中序遍历序列确定二叉树：</p><p><img src="https://bu.dusays.com/2023/08/07/64d07112e74a7.png" alt="46-40.png"></p><p>补充说明：</p><p><img src="https://bu.dusays.com/2023/08/07/64d072c56670f.png" alt="46-41.png"></p><h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><p>问题的引入：</p><p><img src="https://bu.dusays.com/2023/08/08/64d2555c0a6a8.png" alt="46-42.png"></p><p>线索二叉树的概念：</p><p><img src="https://bu.dusays.com/2023/08/08/64d25759b60ca.png" alt="46-43.png"></p><p>线索二叉树的存储结构：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ThreadNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  TreadNode* lchild;</span><br><span class="line">  TreadNode* rchild;</span><br><span class="line">  <span class="type">bool</span> ltag, rtag;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// tag==0 , 表示指针指向孩子</span></span><br><span class="line"><span class="comment">// tag==1 , 表示指针是“线索”</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/08/64d259e53306c.png" alt="46-44.png"></p><p>先序线索二叉树：</p><p><img src="https://bu.dusays.com/2023/08/08/64d25b0b5f446.png" alt="46-45.png"></p><p>后序线索二叉树：</p><p><img src="https://bu.dusays.com/2023/08/08/64d25c19b03fd.png" alt="46-46.png"></p><p>中序线索化代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ThreadNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  TreadNode* lchild;</span><br><span class="line">  TreadNode* rchild;</span><br><span class="line">  <span class="type">bool</span> ltag, rtag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ThreadNode* pre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(ThreadNode* q)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(q-&gt;lchild==<span class="literal">NULL</span>)&#123; <span class="comment">//左子树为空，建立前驱线索</span></span><br><span class="line">    q-&gt;lchild = pre;</span><br><span class="line">    q-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(pre!=<span class="literal">NULL</span> &amp;&amp; pre-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    pre-&gt;rchild = q;</span><br><span class="line">    pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pre = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inThread</span><span class="params">(ThreadNode* T)</span></span>&#123; <span class="comment">//中序遍历二叉树，一边遍历一边线索化</span></span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">inThread</span>(T-&gt;lchild);  <span class="comment">//访问左孩子</span></span><br><span class="line">    <span class="built_in">visit</span>(T);             <span class="comment">//访问根节点</span></span><br><span class="line">    <span class="built_in">inThread</span>(T-&gt;rchild);  <span class="comment">//访问右孩子</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateInThread</span><span class="params">(ThreadNode* T)</span></span>&#123; <span class="comment">//最后调用这个函数即可</span></span><br><span class="line">  pre = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123; <span class="comment">//二叉树非空</span></span><br><span class="line">    <span class="built_in">inThread</span>(T);</span><br><span class="line">    <span class="keyword">if</span>(pre-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">      pre-&gt;rtag = <span class="number">1</span>; <span class="comment">//处理遍历的最后一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先序线索化代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ThreadNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  TreadNode* lchild;</span><br><span class="line">  TreadNode* rchild;</span><br><span class="line">  <span class="type">bool</span> ltag, rtag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ThreadNode* pre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(ThreadNode* q)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(q-&gt;lchild==<span class="literal">NULL</span>)&#123; <span class="comment">//左子树为空，建立前驱线索</span></span><br><span class="line">    q-&gt;lchild = pre;</span><br><span class="line">    q-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(pre!=<span class="literal">NULL</span> &amp;&amp; pre-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    pre-&gt;rchild = q;</span><br><span class="line">    pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pre = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preThread</span><span class="params">(ThreadNode* T)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">visit</span>(T);</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;ltag==<span class="number">0</span>)   <span class="comment">//防止原地转圈</span></span><br><span class="line">      <span class="built_in">preThread</span>(T-&gt;lchild);</span><br><span class="line">    <span class="built_in">preThread</span>(T-&gt;rchild);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreatePreThread</span><span class="params">(ThreadNode* T)</span></span>&#123;</span><br><span class="line">  pre = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">preThread</span>(T);</span><br><span class="line">    <span class="keyword">if</span>(pre-&gt;rchild==<span class="literal">NULL</span>)</span><br><span class="line">      pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后序线索化代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ThreadNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  TreadNode* lchild;</span><br><span class="line">  TreadNode* rchild;</span><br><span class="line">  <span class="type">bool</span> ltag, rtag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ThreadNode* pre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(ThreadNode* q)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(q-&gt;lchild==<span class="literal">NULL</span>)&#123; <span class="comment">//左子树为空，建立前驱线索</span></span><br><span class="line">    q-&gt;lchild = pre;</span><br><span class="line">    q-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(pre!=<span class="literal">NULL</span> &amp;&amp; pre-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    pre-&gt;rchild = q;</span><br><span class="line">    pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pre = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postThread</span><span class="params">(ThreadNode* T)</span></span>&#123; <span class="comment">//中序遍历二叉树，一边遍历一边线索化</span></span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">postThread</span>(T-&gt;lchild);  <span class="comment">//访问左孩子</span></span><br><span class="line">    <span class="built_in">postThread</span>(T-&gt;rchild);  <span class="comment">//访问右孩子</span></span><br><span class="line">    <span class="built_in">visit</span>(T);               <span class="comment">//访问根节点</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreatePostThread</span><span class="params">(ThreadNode* T)</span></span>&#123; <span class="comment">//最后调用这个函数即可</span></span><br><span class="line">  pre = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123; <span class="comment">//二叉树非空</span></span><br><span class="line">    <span class="built_in">postThread</span>(T);</span><br><span class="line">    <span class="keyword">if</span>(pre-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">      pre-&gt;rtag = <span class="number">1</span>; <span class="comment">//处理遍历的最后一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中序线索二叉树找中序后继：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ThreadNode* <span class="title">firstNode</span><span class="params">(ThreadNode* p)</span></span>&#123;</span><br><span class="line">  <span class="comment">//找到以p为根的子树中，第一个被中序遍历的节点</span></span><br><span class="line">  <span class="comment">//循环找到最左下节点（不一定是叶子节点）</span></span><br><span class="line">  <span class="keyword">while</span>(p-&gt;ltag==<span class="number">0</span>) p = p-&gt;lchild;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ThreadNode* <span class="title">nextNode</span><span class="params">(ThreadNode* p)</span></span>&#123;</span><br><span class="line">  <span class="comment">//在中序线索二叉树中找到节点p的后继节点</span></span><br><span class="line">  <span class="keyword">if</span>(p-&gt;rtag==<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">firstNode</span>(p-&gt;rchild);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrderScan</span><span class="params">(ThreadNode* T)</span></span>&#123;</span><br><span class="line">  <span class="comment">//对中序线索二叉树进行中序遍历</span></span><br><span class="line">  <span class="keyword">for</span>(ThreadNode* p=<span class="built_in">firstNode</span>(T); p!=<span class="literal">NULL</span>; p=<span class="built_in">nextNode</span>(p))&#123;</span><br><span class="line">    <span class="built_in">visit</span>(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中序线索二叉树找中序前驱思路（上面找后继的思路类似，不回头补了）：</p><p><img src="https://bu.dusays.com/2023/08/11/64d5c35930c85.png" alt="46-47.png"></p><p>中序线索二叉树找中序前驱代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ThreadNode* <span class="title">lastNode</span><span class="params">(ThreadNode* p)</span></span>&#123;</span><br><span class="line">  <span class="comment">//找到以p为根的子树中，最后一个被中序遍历的节点</span></span><br><span class="line">  <span class="comment">//循环找到最右下节点（不一定是叶子节点）</span></span><br><span class="line">  <span class="keyword">while</span>(p-&gt;rtag==<span class="number">0</span>) p = p-&gt;rchild;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ThreadNode* <span class="title">preNode</span><span class="params">(ThreadNode* p)</span></span>&#123;</span><br><span class="line">  <span class="comment">//在中序线索二叉树中找到节点p的前驱节点</span></span><br><span class="line">  <span class="keyword">if</span>(p-&gt;ltag==<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">lastNode</span>(p-&gt;lchild);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">revInOrderScan</span><span class="params">(ThreadNode* T)</span></span>&#123;</span><br><span class="line">  <span class="comment">//对中序线索二叉树进行逆向中序遍历</span></span><br><span class="line">  <span class="keyword">for</span>(ThreadNode* p=<span class="built_in">lastNode</span>(T); p!=<span class="literal">NULL</span>; p=<span class="built_in">preNode</span>(p))&#123;</span><br><span class="line">    <span class="built_in">visit</span>(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先序线索二叉树找先序后继：</p><p><img src="https://bu.dusays.com/2023/08/12/64d77c960c0db.png" alt="46-48.png"></p><p>先序线索二叉树找先序前驱：</p><p><img src="https://bu.dusays.com/2023/08/12/64d77e38e02e9.png" alt="46-49.png"></p><p>可以发现，按照之前的思路无法实现。但是，<strong>如果每个节点增加指向其父节点的指针</strong>，则可以有如下思路：</p><p><img src="https://bu.dusays.com/2023/08/12/64d7814d613db.png" alt="46-50.png"></p><p>后序线索二叉树找后序前驱：</p><p><img src="https://bu.dusays.com/2023/08/12/64d7851a3c4b8.png" alt="46-51.png"></p><p>后序线索二叉树找后序后继：</p><p><img src="https://bu.dusays.com/2023/08/12/64d786f38d68b.png" alt="46-52.png"></p><p>可以发现，按照之前的思路无法实现。但是，<strong>如果每个节点增加指向其父节点的指针</strong>，则可以有如下思路：</p><p><img src="https://bu.dusays.com/2023/08/12/64d78920217db.png" alt="46-53.png"></p><p>总结：</p><p><img src="https://bu.dusays.com/2023/08/12/64d78b5668b06.png" alt="46-54.png"></p><h3 id="树、森林"><a href="#树、森林" class="headerlink" title="树、森林"></a>树、森林</h3><p>孩子兄弟表示法（很怪，感觉不实用）：</p><p><img src="https://bu.dusays.com/2023/08/17/64de166bd22ae.png" alt="46-55.png"></p><p>树和二叉树的转化：</p><p><img src="https://bu.dusays.com/2023/08/17/64de166bec18b.png" alt="46-56.png"></p><p>森林和二叉树的转换：</p><p><img src="https://bu.dusays.com/2023/08/17/64de192903f92.png" alt="46-57.png"></p><p>树的遍历：先根遍历、后根遍历、层序遍历。</p><p><img src="https://bu.dusays.com/2023/08/17/64de23c944173.png" alt="46-58.png"></p><p>森林的遍历：先序遍历、中序遍历。</p><p><img src="https://bu.dusays.com/2023/08/17/64de2c050f3ac.png" alt="46-59.png"></p><p><strong>特别提醒：</strong> 以上只是一个应试的可选补充，熟悉 OI 代码直接在纸上写 OI 代码即可。例如树的遍历，采用链式前向星：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,w,next;&#125;edge[MAXM];</span><br><span class="line"><span class="type">int</span> tot,head[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].w=z;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问所有与 x 相接的点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">    <span class="type">int</span> y=edge[i].v;</span><br><span class="line">    <span class="comment">//do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树与二叉树的应用"><a href="#树与二叉树的应用" class="headerlink" title="树与二叉树的应用"></a>树与二叉树的应用</h3><p>Huffman树：<a href="https://loveofpeach.github.io/posts/9e22caea.html#Huffman%E6%A0%91">https://loveofpeach.github.io/posts/9e22caea.html#Huffman%E6%A0%91</a></p><p>性质：n 个叶子节点最终构成的 Huffman 树节点总数为 2n-1 .</p><p>Huffman 编码：</p><p><img src="https://bu.dusays.com/2023/08/22/64e418f094b72.png" alt="46-60.png"></p><p>并查集：<a href="https://loveofpeach.github.io/posts/9e22caea.html#%E5%B9%B6%E6%9F%A5%E9%9B%86">https://loveofpeach.github.io/posts/9e22caea.html#%E5%B9%B6%E6%9F%A5%E9%9B%86</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">10010</span>;</span><br><span class="line"><span class="type">int</span> uset[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">makeset</span><span class="params">(<span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)uset[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x!=uset[x])uset[x]=<span class="built_in">find</span>(uset[x]);</span><br><span class="line">    <span class="keyword">return</span> uset[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unionset</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x);</span><br><span class="line">    y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span>;</span><br><span class="line">    uset[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m; cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">makeset</span>(n+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> z,x,y;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;z,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(z==<span class="number">1</span>)<span class="built_in">unionset</span>(x,y);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(z==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Y\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;N\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>邻接矩阵的某个性质（建议配合离散数学食用）：</p><p><img src="https://bu.dusays.com/2023/08/22/64e421f6699fc.png" alt="46-61.png"></p><p>类似地，有：</p><p><img src="https://bu.dusays.com/2023/08/22/64e42bcc38418.png" alt="46-62.png"></p><p>邻接表法：</p><p><img src="https://bu.dusays.com/2023/08/24/64e6396f9356b.png" alt="46-63.png" title="丑陋的做法"></p><p>十字链表存储有向图，空间复杂度 $O(|V|+|E|)$</p><ul><li>只用于存储有向图</li><li>找到指定顶点的所有出边：顺着绿色线路找</li><li>找到指定顶点的所有入边：顺着橙色线路找</li></ul><p><img src="https://bu.dusays.com/2023/08/24/64e63bac84460.png" alt="46-64.png" title="非常丑陋的做法"></p><p>邻接多重表存储无向图，空间复杂度 $O(|V|+|E|)$</p><ul><li>只能用于存储无向图</li><li>删除边、删除节点等操作“很方便”</li></ul><p><img src="https://bu.dusays.com/2023/08/24/64e63eebc0175.png" alt="46-65.png" title="让人怀疑这个世界其实不算糟"></p><p><strong>我选择，链式前向星。希望阅卷老师能看懂。</strong></p><h3 id="图的基本操作"><a href="#图的基本操作" class="headerlink" title="图的基本操作"></a>图的基本操作</h3><p><code>Adjacent(G, x, y)</code> ：判断图 G 是否存在边<code>&lt;x,y&gt;</code>或<code>(x,y)</code></p><ul><li>无向图<ul><li>邻接矩阵时间复杂度 $O(1)$</li><li>邻接表时间复杂度 $O(1)\rightarrow O(|V|)$</li></ul></li><li>有向图<ul><li>邻接矩阵时间复杂度 $O(1)$</li><li>邻接表时间复杂度 $O(1)\rightarrow O(|V|)$</li></ul></li></ul><p><code>Neighbors(G, x)</code> ：列出图 G 中与节点 x 邻接的边</p><ul><li>无向图<ul><li>邻接矩阵时间复杂度 $O(|V|)$</li><li>邻接表时间复杂度 $O(1) \rightarrow O(|V|)$</li></ul></li><li>有向图<ul><li>邻接矩阵时间复杂度 $O(|V|)$</li><li>邻接表时间复杂度<ul><li>出边 $O(1) \rightarrow O(|V|)$</li><li>入边 $O(|E|)$</li></ul></li></ul></li></ul><p><code>InsertVertex(G, x)</code> ：在图 G 中插入顶点 x</p><ul><li>无向图和有向图时间复杂度相同<ul><li>邻接矩阵时间复杂度 $O(1)$</li><li>邻接表时间复杂度 $O(1)$</li></ul></li></ul><p><code>DeleteVertex(G, x)</code> ：从图 G 中删除顶点 x</p><ul><li>无向图<ul><li>邻接矩阵时间复杂度 $O(|V|)$</li><li>邻接表时间复杂度 $O(1) \rightarrow O(|E|)$</li></ul></li><li>有向图<ul><li>邻接矩阵时间复杂度 $O(|V|)$</li><li>邻接表时间复杂度<ul><li>删出边 $O(1) \rightarrow O(|V|)$</li><li>删入边 $O(|E|)$</li></ul></li></ul></li></ul><p><code>AddEdge(G, x, y)</code> ：加边</p><ul><li>无向图和有向图类似<ul><li>邻接矩阵 $O(1)$</li><li>邻接表 $O(1)$ （头插法）</li></ul></li></ul><p><code>FirstNeighbor(G, x)</code> ：求图 G 中顶点 x 的第一个邻接点，若有返回顶点号；若没有或者根本不存在 x ，返回 -1</p><ul><li>无向图<ul><li>邻接矩阵 $O(1) \rightarrow O(|V|)$</li><li>邻接表 $O(1)$</li></ul></li><li>有向图<ul><li>邻接矩阵 $O(1) \rightarrow O(|V|)$</li><li>邻接表<ul><li>找出边邻接点 $O(1)$</li><li>找入边邻接点 $O(1) \rightarrow O(|E|)$</li></ul></li></ul></li></ul><p><code>NextNeighbor(G, x, y)</code> ：假设图 G 中顶点 y 是顶点 x 的一个邻接点，返回除 y 外顶点 x 的下一个邻接点的顶点号，若 y 是 x 的最后一个邻接点，返回 -1</p><ul><li>无向图<ul><li>邻接矩阵 $O(1) \rightarrow O(|V|)$</li><li>邻接表 $O(1)$</li></ul></li><li>有向图类似</li></ul><p><code>Get_edge_value(G, x, y)</code> ：获取图 G 中边对应的权值。 $\quad$ <code>Set_edge_value(G, x, y, v)</code> ：设置图 G 中边对应的权值为 v</p><ul><li>与<code>Adjacent(G, x, y)</code>（判断是否存在边）雷同，核心在于找到边。因此时间复杂度为：<ul><li>邻接矩阵 $O(1)$</li><li>邻接表 $O(1) \rightarrow O(|V|)$</li></ul></li></ul><h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><p>一、BFS</p><p>对教科书代码留个印象：</p><p><img src="https://bu.dusays.com/2023/08/24/64e6d8e84767d.png" alt="46-66.png"></p><p>同一个图的邻接矩阵表示方式唯一，因此广度优先遍历序列唯一。同一个图的邻接表表示方式不唯一，因此广度优先遍历序列不唯一。</p><p>复杂度分析：</p><p><img src="https://bu.dusays.com/2023/08/24/64e6daaae2057.png" alt="46-67.png"></p><p>广度优先生成树：</p><p><img src="https://bu.dusays.com/2023/08/24/64e6dc2968673.png" alt="46-68.png"></p><p>广度优先生成森林：</p><p><img src="https://bu.dusays.com/2023/08/24/64e6dd5f89412.png" alt="46-69.png"></p><p>二、DFS</p><p>对教科书代码留个印象：</p><p><img src="https://bu.dusays.com/2023/08/26/64e8d5b469269.png" alt="46-70.png"></p><p>复杂度分析：</p><p><img src="https://bu.dusays.com/2023/08/26/64e8d5b438391.png" alt="46-71.png"></p><p>同一个图的邻接矩阵表示方式唯一，因此深度优先遍历序列唯一。同一个图的邻接表表示方式不唯一，因此深度优先遍历序列不唯一。</p><p>深度优先生成树、深度优先生成森林，与之前提到的类似，不再赘述。</p><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><p>一睹芳容：</p><p><img src="https://bu.dusays.com/2023/08/26/64e967557ab2a.png" alt="46-72.png"></p><p>Prim 算法的实现思想：</p><p><img src="https://bu.dusays.com/2023/08/26/64e96a53a97ec.png" alt="46-73.png"></p><p>下面给出 kruscal 代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//kruscal</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">200000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> u,v,w;&#125;edge[MAXM];</span><br><span class="line"><span class="type">int</span> uset[MAXN],n,m,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(uset[x]!=x)uset[x]=<span class="built_in">find</span>(uset[x]);</span><br><span class="line">    <span class="keyword">return</span> uset[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unionset</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x);</span><br><span class="line">    y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span>;</span><br><span class="line">    uset[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Edge x,Edge y)</span></span>&#123;<span class="keyword">return</span> x.w&lt;y.w;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        edge[i].u=x;</span><br><span class="line">        edge[i].v=y;</span><br><span class="line">        edge[i].w=z;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(edge+<span class="number">1</span>,edge+<span class="number">1</span>+m,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)uset[i]=i;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">find</span>(edge[i].u);</span><br><span class="line">        <span class="type">int</span> y=<span class="built_in">find</span>(edge[i].v);</span><br><span class="line">        <span class="keyword">if</span>(x==y)<span class="keyword">continue</span>;</span><br><span class="line">        ans+=edge[i].w;</span><br><span class="line">        <span class="built_in">unionset</span>(x,y);</span><br><span class="line">        <span class="keyword">if</span>(++cnt==n<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt&lt;n<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">&quot;orz&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h3><p>SPFA 算法（用于求单源最短路径）：</p><ul><li>AKA, 队列优化的 Bellman-Ford 算法</li><li><strong>允许图中存在负权边</strong></li><li><strong>不可求负环</strong>，可判断负环</li><li>在稀疏图上效率较高，时间复杂度 $O(km)$ , k 为较小的常数</li><li>在稠密图或<strong>特殊构造的</strong>网格图上，算法可能退化为 $O(nm)$</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPFA</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM 500010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 10010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,s,dis[MAXN];</span><br><span class="line"><span class="type">bool</span> inq[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,w,next;&#125;edge[MAXM];</span><br><span class="line"><span class="type">int</span> tot,head[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].w=z;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; qwq;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis[i]=INF;</span><br><span class="line">    </span><br><span class="line">    qwq.<span class="built_in">push</span>(s);</span><br><span class="line">    dis[s]=<span class="number">0</span>;inq[s]=<span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=qwq.<span class="built_in">front</span>();</span><br><span class="line">        qwq.<span class="built_in">pop</span>(); inq[x]=<span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">            <span class="type">int</span> y=edge[i].v;</span><br><span class="line">            <span class="keyword">if</span>(dis[y]&gt;dis[x]+edge[i].w)&#123;</span><br><span class="line">                dis[y]=dis[x]+edge[i].w;</span><br><span class="line">                <span class="keyword">if</span>(!inq[y])&#123;qwq.<span class="built_in">push</span>(y);inq[y]=<span class="literal">true</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">spfa</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">     <span class="keyword">if</span>(s==i)<span class="built_in">printf</span>(<span class="string">&quot;0 &quot;</span>);</span><br><span class="line">     <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dijkstra 算法（用于求单源最短路径）：</p><ul><li><strong>要求图的边权为正</strong></li><li>可以求环</li><li>时间复杂度：<ul><li>考试中可认为（也就是未优化的算法版本）复杂度是 $O(n^2)$</li><li>若用二叉堆（C++ STL <code>priority_queue</code>）维护 dist 数组，最终可以得到 $O((m+n)\log n)$ 的复杂度</li></ul></li></ul><p><img src="https://bu.dusays.com/2023/08/26/64e9769b23a1f.png" alt="46-74.png" title="Dijkstra算法执行流程"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dijkstra</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM 200010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF =<span class="number">2147483647</span>;</span><br><span class="line"><span class="type">int</span> n,m,s,dis[MAXN];</span><br><span class="line"><span class="type">bool</span> done[MAXN];</span><br><span class="line"><span class="type">int</span> tot,head[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,w,next;&#125;edge[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].w=z;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,dist;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node&amp; v)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dist&gt;v.dist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;node&gt; qwq;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis[i]=INF;</span><br><span class="line">    dis[s]=<span class="number">0</span>;</span><br><span class="line">    qwq.<span class="built_in">push</span>((node)&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node front=qwq.<span class="built_in">top</span>(); qwq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> u=front.u,dist=front.dist;</span><br><span class="line">        <span class="keyword">if</span>(done[u])<span class="keyword">continue</span>;</span><br><span class="line">        done[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> y=edge[i].v,z=edge[i].w;</span><br><span class="line">            <span class="keyword">if</span>(dis[u]+z&lt;dis[y])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[y]=dis[u]+z;</span><br><span class="line">                qwq.<span class="built_in">push</span>((node)&#123;y,dis[y]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line">    <span class="type">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dijkstra</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dijkstra 输出路径：</p><p><img src="https://bu.dusays.com/2023/08/26/64e9827b0392a.png" alt="46-75.png"></p><p>Floyd 算法：</p><ul><li><strong>允许图中存在负权边，不可求负环</strong></li><li>算法模板的提交入口：<a href="https://www.luogu.com.cn/problem/B3647">B3647 【模板】Floyd 算法</a></li><li>关于该算法及其相对深入点的情况，请参见：<a href="https://loveofpeach.github.io/posts/a050ca88.html">https://loveofpeach.github.io/posts/a050ca88.html</a></li></ul><p>喜闻乐见的人脑模拟算法执行：</p><p><img src="https://bu.dusays.com/2023/08/29/64ee0ac5517cd.png" alt="46-76.png"></p><p>找路径：</p><p><img src="https://bu.dusays.com/2023/08/29/64ee0abf6f76c.png" alt="46-77.png"></p><p>Floyd 代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a,b) ((a)&lt;(b)?(a):(b))</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">103</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">4503</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = (<span class="number">0x7fffffff</span>&gt;&gt;<span class="number">1</span>)<span class="number">-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dis[MAXN][MAXN],n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(i!=j)dis[i][j] = INF;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=m; i++)&#123;</span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x, &amp;y, &amp;z);</span><br><span class="line">        dis[x][y] = dis[y][x] = z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>; k&lt;=n; k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">                dis[i][j]=dis[j][i]=<span class="built_in">MIN</span>(dis[i][j], dis[i][k]+dis[k][j]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：</p><p><img src="https://bu.dusays.com/2023/08/29/64ee0d8965a41.png" alt="46-78.png"></p><h3 id="有向无环图描述表达式"><a href="#有向无环图描述表达式" class="headerlink" title="有向无环图描述表达式"></a>有向无环图描述表达式</h3><p>知识里的你，再弱小也是真的：</p><p><img src="https://bu.dusays.com/2023/08/29/64ee14e239368.png" alt="46-79.png"></p><p>看一眼真题：</p><p><img src="https://bu.dusays.com/2023/08/29/64ee14e2520f4.png" alt="46-80.png"></p><p>此类题目的解题方法：</p><p><img src="https://bu.dusays.com/2023/08/30/64ee196c42ca2.png" alt="46-81.png"></p><p>最后看一个特例：</p><p><img src="https://bu.dusays.com/2023/08/30/64ee1b3603714.png" alt="46-82.png"></p><p>从上面的特例（左）可以发现，允许重边；另外，可以画出的图不唯一。</p><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p>一个概念，AOV 网：</p><p><img src="https://bu.dusays.com/2023/08/31/64eff6c053039.png" alt="46-83.png"></p><p>拓扑排序是对有向无环图的所有顶点，生成一个线性的序列，来表达这个图的顶点之间的先后关系：</p><p><img src="https://bu.dusays.com/2023/08/31/64eff9c8520d5.png" alt="46-84.png"></p><p>通常使用 BFS 实现拓扑排序，流程如下：</p><ul><li>首先建立空队列，把所有入度为 0 的节点加入队列</li><li>从队列中取出一个节点，将从其出发的所有边删除。在编程上，即将边所连到的点入度减一，判断该边通向的节点是否入度变为 0 ，若是，则加入队列</li><li>重复以上步骤，直至队列中不剩下任何节点为止</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; qwq;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">topoSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">if</span>(inDegree[i] == <span class="number">0</span>) qwq.<span class="built_in">push</span>(i);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> v = qwq.<span class="built_in">front</span>();</span><br><span class="line">        qwq.<span class="built_in">pop</span>();</span><br><span class="line">        cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(list&lt;<span class="type">int</span>&gt;::iterator it = edge[v].<span class="built_in">begin</span>(); it != edges[v].<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            inDegree[*it]--;</span><br><span class="line">            <span class="keyword">if</span>(!inDegree[*it]) qwq.<span class="built_in">push</span>(*it);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于稍复杂的情况或使用链式前向星数据结构的代码，请参考：<a href="https://loveofpeach.github.io/posts/9e22caea.html#%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F">https://loveofpeach.github.io/posts/9e22caea.html#%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F</a></p><p>拓扑排序是对有向无环图而言的。如果需要判断图中是否存在环，则可以统计是否所有的顶点都入过队列，若存在未入过队的节点，代表图中存在环。</p><p>如果你愿意看王道的代码的话也不是不行：</p><p><img src="https://bu.dusays.com/2023/08/31/64f003a8de3c0.png" alt="46-85.png"></p><p>以上代码的时间复杂度为 $O(|V|+|E|)$ ，若采用邻接矩阵，则为 $O(|V|^2)$ .</p><p>逆拓扑排序：</p><p><img src="https://bu.dusays.com/2023/08/31/64f0067dc0b0c.png" alt="46-86.png"></p><p>逆拓扑排序代码实现：</p><p><img src="https://bu.dusays.com/2023/08/31/64f0089789bb4.png" alt="46-87.png"></p><p>以上代码中，无论从哪一个顶点出发进行 DFS 都可以得到正确输出。</p><h3 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h3><p>概念，AOE 网：</p><p><img src="https://bu.dusays.com/2023/08/31/64f051252b951.png" alt="46-88.png"></p><p>AOE 网两个简单的性质：</p><ul><li>仅有一个入度为 0 的顶点，称为“开始顶点（源点）”，它表示整个工程的开始</li><li>仅有一个出度为 0 的顶点，称为“结束顶点（汇点）”，它表示整个工程的结束</li></ul><p>从源点到汇点的有向路径可能有多条，所有路径中，具有最大路径长度的路径称为<strong>关键路径</strong>，而把关键路径上的活动称为<strong>关键活动</strong>。完成整个工程的最短时间就是关键路径的长度，若关键活动不能按时完成，则整个工程的完成时间就会延长。</p><p>算法思路：</p><p><img src="https://bu.dusays.com/2023/08/31/64f058e7418bf.png" alt="46-89.png"></p><p>大致实现思路：</p><p><img src="https://bu.dusays.com/2023/08/31/64f060147a4b7.png" alt="46-90.png"></p><p><strong>若缩短关键活动的时间，可以缩短工期。但当缩短到一定程度时，关键活动可能会变成非关键活动。</strong></p><p><strong>可能有多条关键路径，只提高一条关键路径上的关键活动速度并不一定能缩短整个工程的工期。</strong> 只有加快那些包括在所有关键路径上的关键活动才能缩短工期。</p><p>最后，贴一个看起来像关键路径、但其实可以用拓扑排序的题目：<a href="https://www.luogu.com.cn/problem/P1113">P1113 杂务</a></p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>查找长度：在查找运算中，需要对比关键字的次数称为查找长度。</p><p>平均查找长度（ASL, Average Search Length）：所有查找过程中，进行关键字的比较次数的平均值。</p><script type="math/tex; mode=display">ASL=\sum_{i=1}^nP_iC_i</script><p>上式中，n 为数据元素个数；$P_i$ 为查找第 i 个元素的概率；$C_i$ 为查找第 i 个元素的查找长度。</p><p>一般来说，题目中若无特别说明，<strong>默认查找任何一个元素的概率都相同</strong>。</p><h3 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h3><p>某个小技巧：</p><p><img src="https://bu.dusays.com/2023/08/31/64f09b159e8c4.png" alt="46-91.png"></p><p>查找判定树：</p><p><img src="https://bu.dusays.com/2023/08/31/64f09db162fef.png" alt="46-92.png"></p><h3 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h3><p>二分查找的实现细节需要特别注意，在某些特殊的情况下，不正确的写法会导致死循环或是其他的错误。王道的代码就是错误的。</p><p>我们直接来看正确的做法：总是将查找区间设为左闭右开的。以题目<a href="https://www.luogu.com.cn/problem/P1824">P1824 进击的奶牛</a>为例，该题的做法是二分答案，给出代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a,b,p[<span class="number">1000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>,pre=<span class="number">-1500000000</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i]-pre&gt;=x)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            pre=p[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;=b)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=a;i++)cin&gt;&gt;p[i];</span><br><span class="line">    <span class="built_in">sort</span>(p+<span class="number">1</span>,p+<span class="number">1</span>+a);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>,right=<span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">while</span>(right!=left+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid=(left+right)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid))left=mid;</span><br><span class="line">        <span class="keyword">else</span> right=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;left;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找效率分析：</p><p><img src="https://bu.dusays.com/2023/08/31/64f0ad4be6007.png" alt="46-93.png"></p><p>关于折半查找判定树：</p><ul><li>判定树节点关键字：左&lt;中&lt;右，满足二叉排序树的定义</li><li>失败节点：n+1 个（等于成功节点的空链域数量）</li></ul><p><img src="https://bu.dusays.com/2023/08/31/64f0b08c48a29.png" alt="46-94.png"></p><h3 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h3><p>特点：块内无序，块间有序。</p><p><img src="https://bu.dusays.com/2023/09/03/64f46e4111f9e.png" alt="46-95.png"></p><p><strong>分块查找</strong>，又称<strong>索引顺序查找</strong>，算法过程如下：</p><ul><li>在索引表中确定待查记录所属的分块（可顺序、可折半）</li><li>在块内顺序查找</li></ul><p>折半查找索引表的例子：</p><p><img src="https://bu.dusays.com/2023/09/03/64f473c641697.png" alt="46-96.png"></p><p><strong>以上是王道书的讲解，是丑陋并且有可能出错的。</strong> 但是为了应试，应当了解。如果采用我上面提到的折半查找的方式，查找索引表的方式会完全不同。</p><p>效率分析：</p><p><img src="https://bu.dusays.com/2023/09/03/64f479a1f0cc3.png" alt="46-97.png"></p><p>拓展思考：</p><p><img src="https://bu.dusays.com/2023/09/03/64f47c5b3d576.png" alt="46-98.png"></p><h3 id="二叉排序树（BST）"><a href="#二叉排序树（BST）" class="headerlink" title="二叉排序树（BST）"></a>二叉排序树（BST）</h3><p>定义：</p><p><img src="https://bu.dusays.com/2023/09/04/64f592d5bb9b2.png" alt="46-99.png"></p><p>查找：</p><p><img src="https://bu.dusays.com/2023/09/04/64f594ef62965.png" alt="46-100.png"></p><p>上面是非递归的实现，下面给出递归版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 王道的代码</span></span><br><span class="line"><span class="function">BSTNode* <span class="title">BSTsearch</span><span class="params">(BSTree T, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;   <span class="comment">//查找失败</span></span><br><span class="line">  <span class="keyword">if</span>(key==T-&gt;key)</span><br><span class="line">    <span class="keyword">return</span> T;      <span class="comment">//查找成功</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; T-&gt;key)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">BSTsearch</span>(T-&gt;lchild, key);  <span class="comment">//在左子树中查找</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">BSTsearch</span>(T-&gt;rchild, key);  <span class="comment">//在右子树中查找</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最坏空间复杂度为 O(h) ，h 为树的高度</span></span><br></pre></td></tr></table></figure><p>插入新节点：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5982c1e89f.png" alt="46-101.png"></p><p>构造：</p><p><img src="https://bu.dusays.com/2023/09/04/64f59a1b2d239.png" alt="46-102.png"></p><p>删除某一个节点：</p><ol><li>先找到目标节点</li><li>若被删除节点是叶子节点，则直接删除。不会破坏二叉排序树的性质。</li><li>若被删除节点只有一棵左子树或右子树，则让其子树替代之。依然可以保证二叉排序树的性质。</li><li>若被删除节点既有左子树，又有右子树。有两种方法：<ul><li>找到右子树中值最小的节点 p（即右子树中最左下的节点，该节点一定没有左子树），替代将被删除的节点。然后删除原来的节点 p（情况同第 3 步）.</li><li>找到左子树中值最大的节点 p（即左子树中最右下的节点，该节点一定没有右子树），替代将被删除的节点。然后删除原来的节点 p（情况同第 3 步）.</li></ul></li></ol><p>效率分析：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5a1523998f.png" alt="46-103.png"></p><h3 id="平衡二叉树（AVL）"><a href="#平衡二叉树（AVL）" class="headerlink" title="平衡二叉树（AVL）"></a>平衡二叉树（AVL）</h3><p>一些概念：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5a87785768.png" alt="46-104.png"></p><p>二叉排序树中插入新节点时如何保持平衡：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5a9b8ae563.png" alt="46-105.png"></p><p>调整最小不平衡子树：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5c7a563248.png" alt="46-106.png"></p><p>续图：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5cbee45a87.png" alt="46-107.png"></p><p><strong>总结：</strong></p><p><img src="https://bu.dusays.com/2023/09/04/64f5cd6a39610.png" alt="46-108.png"></p><p>一个小坑：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5cfd3759d3.png" alt="46-109.png"></p><p>练习题：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5d5ea4fd27.png" alt="46-110.png"></p><p>查找效率分析：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5db0f505d4.png" alt="46-111.png"></p><h3 id="平衡二叉树的删除"><a href="#平衡二叉树的删除" class="headerlink" title="平衡二叉树的删除"></a>平衡二叉树的删除</h3><p>平衡二叉树的删除操作：</p><ul><li>删除节点后，要保持二叉排序树的性质不变（左 &lt; 中 &lt; 右）</li><li>若删除节点导致不平衡，则需要调整平衡</li></ul><p>平衡二叉树的删除操作的具体步骤：</p><ol><li>删除节点（方法同“二叉排序树”）</li><li>一路向上找到最小不平衡子树，若找不到则结束算法</li><li>找最小不平衡子树下，“个头”最高的儿子、孙子</li><li>根据孙子的位置，调整平衡（LL / RR / LR / RL）<ul><li>孙子在 LL: 儿子右单旋</li><li>孙子在 RR: 儿子左单旋</li><li>孙子在 LR: 孙子先左旋，再右旋</li><li>孙子再 RL: 孙子先右旋，再左旋</li></ul></li><li>如果不平衡向上传导，转到 2<ul><li>解释：对最小不平衡子树的旋转可能导致树变矮，从而导致上层祖先不平衡（不平衡向上传导）</li></ul></li></ol><p>在步骤 2 即结束算法的例子：</p><p><img src="https://bu.dusays.com/2023/09/06/64f7eaa8d47e6.png" alt="46-112.png"></p><p>执行到第 4 步算法结束的例子：</p><p><img src="https://bu.dusays.com/2023/09/06/64f7f6094573b.png" alt="46-113.png"></p><p>不平衡向上传导一次的例子：</p><p><img src="https://bu.dusays.com/2023/09/06/64f7f93443c2e.png" alt="46-114.png"></p><p>两种选择的例子，可以看到，无论挑选哪个作为“个头”最高的孙子，都可以达到目的：</p><p><img src="https://bu.dusays.com/2023/09/06/64f89b8abedab.png" alt="46-115.png"></p><p><strong>平衡二叉树的删除操作的时间复杂度是 $O(log_2n)$</strong> .</p><h3 id="红黑树的定义和性质"><a href="#红黑树的定义和性质" class="headerlink" title="红黑树的定义和性质"></a><font color="red">红</font>黑树的定义和性质</h3><table>  <tbody>    <tr>      <td></td>      <td>BST</td>      <td>AVL Tree</td>      <td><font color="red">Red</font>-Black Tree</td>    </tr>    <tr>      <td>生日</td>      <td>1960</td>      <td>1962</td>      <td>1972</td>    </tr>    <tr>      <td>查</td>      <td>O(n)</td>      <td>O(log_2^n)</td>      <td>O(log_2^n)</td>    </tr>    <tr>      <td>插</td>      <td>O(n)</td>      <td>O(log_2^n)</td>      <td>O(log_2^n)</td>    </tr>    <tr>      <td>删</td>      <td>O(n)</td>      <td>O(log_2^n)</td>      <td>O(log_2^n)</td>    </tr>  </tbody></table><p><font color="red">红</font>黑树的优势？</p><ul><li>平衡二叉树（AVL）的劣势：插入/删除 操作很容易破坏“平衡”特性，需要频繁调整树的形态。如：插入操作导致不平衡，则需要先计算平衡因子，找到最小不平衡子树（时间开销大），再进行 LL/RR/LR/RL 调整。</li><li>相比之下，<font color="red">红</font>黑树的优势：插入/删除 操作很多时候不会破坏“<font color="red">红</font>黑”特性，无须频繁调整树的形态。即便需要调整，一般都可以在常数时间内完成。</li><li>平衡二叉树，适用于以查找为主，很少插入、删除的场景（实际也很少使用了）。</li><li><font color="red">红</font>黑树，适用于频繁插入、删除的场景，实用性更强。</li></ul><p><font color="red">红</font>黑树的定义：</p><ul><li><font color="red">红</font>黑树是二叉排序树</li><li>每个节点或是<font color="red">红</font>色，或是黑色</li><li>根节点是黑色的</li><li>叶节点（外部节点、NULL节点、失败节点）都是黑色的<ul><li>在<font color="red">红</font>黑树中，当我们提到叶子节点的时候，通常是指失败节点（又称“NULL节点”、“外部节点”）</li></ul></li><li>不存在两个相邻的<font color="red">红</font>节点（即红节点的父节点和孩子节点都是黑色的）</li><li>对每个节点，从该节点到任一叶子节点的简单路径上，所含黑节点的数目相同</li></ul><p><img src="https://bu.dusays.com/2023/09/08/64fa9d6a20ba0.png" alt="46-116.png"></p><p>粗略地用一个结构体定义一下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">RBnode</span> &#123;</span><br><span class="line">  <span class="type">int</span> key;</span><br><span class="line">  RBnode* parent;</span><br><span class="line">  RBnode* lchild;</span><br><span class="line">  RBnode* rchild;</span><br><span class="line">  <span class="type">int</span> color;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>补充概念，“黑高”：</p><p><img src="https://bu.dusays.com/2023/09/08/64faa1e3b4e1c.png" alt="46-117.png"></p><p><font color="red">红</font>黑树的性质：</p><ol><li>从根节点到叶子节点的最长路径不大于最短路径的 2 倍</li><li>有 n 个内部节点（n 个关键字）的<font color="red">红</font>黑树高度 $h\leqslant 2 \log _2(n+1)$<ul><li>由此得到<font color="red">红</font>黑树的查找操作的时间复杂度为 $O(\log _2n)$</li></ul></li></ol><p><font color="red">红</font>黑树的查找：与 BST、AVL 相同，从根出发，左小右大，若查找到一个空叶子节点，则查找失败。</p><p>关于<font color="red">红</font>黑树的更多内容，由于考纲不考，时间有限，我就放过自己了，下面只给出一些链接：</p><ul><li><a href="https://www.bilibili.com/video/BV1b7411N798/?p=77">https://www.bilibili.com/video/BV1b7411N798/?p=77</a></li><li><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></li><li><a href="https://www.luogu.com.cn/problem/P5566">https://www.luogu.com.cn/problem/P5566</a></li></ul><h3 id="B-树"><a href="#B-树" class="headerlink" title="B 树"></a>B 树</h3><p>一、引入</p><p>能否将二叉查找树（BST）拓展为 m 叉查找树？</p><p><img src="https://bu.dusays.com/2023/09/08/64fb1bbd14081.png" alt="46-118.png"></p><p>如何保证查找效率：</p><p><img src="https://bu.dusays.com/2023/09/08/64fb1fe250168.png" alt="46-119.png"></p><p>二、定义</p><p><img src="https://bu.dusays.com/2023/09/08/64fb272227905.png" alt="46-120.png"></p><p>三、高度</p><p><img src="https://bu.dusays.com/2023/09/08/64fb2b2fdd8ac.png" alt="46-121.png"></p><h3 id="B-树的插入、删除"><a href="#B-树的插入、删除" class="headerlink" title="B 树的插入、删除"></a>B 树的插入、删除</h3><p>一、插入</p><p><img src="https://bu.dusays.com/2023/09/08/64fb37fa3d255.png" alt="46-122.png"></p><p>二、删除</p><p><img src="https://bu.dusays.com/2023/09/08/64fb3ca165dba.png" alt="46-123.png"></p><p>续图：</p><p><img src="https://bu.dusays.com/2023/09/08/64fb418d540a0.png" alt="46-124.png"></p><h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+ 树"></a>B+ 树</h3><p>定义：</p><p><img src="https://bu.dusays.com/2023/09/09/64fb46bb53acd.png" alt="46-125.png"></p><p>查找：略。</p><p>注意点：在 B+ 树中，叶节点包含信息，所有非叶子节点仅起索引作用。</p><p>B+树 和 B树 的一点区别：</p><p><img src="https://bu.dusays.com/2023/09/09/64fb4b662421b.png" alt="46-126.png"></p><p>B+树的优点和应用场景：</p><p><img src="https://bu.dusays.com/2023/09/09/64fb4f85ec422.png" alt="46-127.png"></p><p>总结：</p><p><img src="https://bu.dusays.com/2023/09/09/64fb4f85eed0a.png" alt="46-128.png"></p><h3 id="散列查找"><a href="#散列查找" class="headerlink" title="散列查找"></a>散列查找</h3><p>一睹芳容：</p><p><img src="https://bu.dusays.com/2023/09/12/64ffce0ce084e.png" alt="46-129.png"></p><p>查找操作：略。</p><p>ASL 分析、装填因子：</p><p><img src="https://bu.dusays.com/2023/09/12/64ffd1b2d99a4.png" alt="46-130.png"></p><p>设计散列函数的方法（模质数）：</p><p><img src="https://bu.dusays.com/2023/09/12/64ffd935e65fe.png" alt="46-131.png"></p><p>其他方法：</p><p><img src="https://bu.dusays.com/2023/09/12/64ffdcf762208.png" alt="46-132.png"></p><p>处理冲突的另一种方法，开放定址法：</p><p><img src="https://bu.dusays.com/2023/09/13/65009ac99f4ff.png" alt="46-133.png"></p><p>线性探测法（实际没用，考试爱考）：</p><p><img src="https://bu.dusays.com/2023/09/13/65009acc50d1a.png" alt="46-134.png"></p><p>平方探测法：</p><p><img src="https://bu.dusays.com/2023/09/13/65009fe1e24b8.png" alt="46-135.png"></p><p>伪随机序列法：</p><p><img src="https://bu.dusays.com/2023/09/13/6500a1717e654.png" alt="46-136.png"></p><p>处理冲突的另另一种方法，再散列法（再哈希法）：<br>除了原始的散列函数 H(key) 之外，多准备几个散列函数。当散列函数冲突时，用下一个散列函数计算一个新地址，直到不冲突为止：</p><script type="math/tex; mode=display">H_i=RH_i(Key) \quad i=1,2,3, \cdots k</script><p>以上总结：</p><p><img src="https://bu.dusays.com/2023/09/13/6500a45c68c95.png" alt="46-137.png"></p><p>小优化：</p><p><img src="https://bu.dusays.com/2023/09/13/6500a51f7de37.png" alt="46-138.png"></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p><img src="https://bu.dusays.com/2023/09/13/65011e94778b2.png" alt="46-139.png"></p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>算法思想：每次将一个待排序的记录按其关键字大小插入到前面已排好序的子序列中，直到全部记录插入完成。</p><p><img src="https://bu.dusays.com/2023/09/13/65012177a2b76.png" alt="46-140.png"></p><p>代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接插入排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> i, j, temp;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;n; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(A[i]&lt;A[i<span class="number">-1</span>])&#123;</span><br><span class="line">      temp = A[i];</span><br><span class="line">      <span class="keyword">for</span>(j=i<span class="number">-1</span>; j&gt;=<span class="number">0</span> &amp;&amp; A[j]&gt;temp; j--)&#123;</span><br><span class="line">        A[j+<span class="number">1</span>] = A[j];</span><br><span class="line">      &#125;</span><br><span class="line">      A[j+<span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码实现（带哨兵）：</p><p><img src="https://bu.dusays.com/2023/09/13/650124921eccf.png" alt="46-141.png"></p><p>最好时间复杂度：$O(n)$<br>最坏时间复杂度：$O(n^2)$<br>平均时间复杂度：$O(n^2)$<br><strong>算法稳定性（这里指，排序稳定性）：稳定</strong></p><p>一个小优化：</p><p><img src="https://bu.dusays.com/2023/09/13/65012ed84c0ae.png" alt="46-142.png"></p><p><strong>注意：</strong> 上图中王道的代码是有 bug 的，实际中不能这么写。</p><p>补充——对链表进行插入排序：<br>移动元素的次数变少了，但是关键字对比的次数依然是 $O(n^2)$ 数量级，整体来看时间复杂度依然是 $O(n^2)$ .</p><h3 id="希尔排序（Shell-Sort）"><a href="#希尔排序（Shell-Sort）" class="headerlink" title="希尔排序（Shell Sort）"></a>希尔排序（Shell Sort）</h3><p>算法思想来源：</p><p><img src="https://bu.dusays.com/2023/09/13/6501ba2a79974.png" alt="46-143.png"></p><p>图示：</p><p><img src="https://bu.dusays.com/2023/09/13/6501c1bb306e9.png" alt="46-144.png"></p><p>代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 希尔排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shellSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> d, i, j;</span><br><span class="line">  <span class="comment">// A[0] 只是暂存单元，不是哨兵。当 j&lt;=0 时，插入位置已到</span></span><br><span class="line">  <span class="keyword">for</span>(d=n/<span class="number">2</span>; d&gt;=<span class="number">1</span>; d=d/<span class="number">2</span>)  <span class="comment">// 步长变化</span></span><br><span class="line">    <span class="keyword">for</span>(i=d+<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">      <span class="keyword">if</span>(A[i]&lt;A[i-d])&#123;</span><br><span class="line">        A[<span class="number">0</span>] = A[i];</span><br><span class="line">        <span class="keyword">for</span>(j=i-d; j&gt;<span class="number">0</span> &amp;&amp; A[<span class="number">0</span>]&lt;A[j]; j-=d)</span><br><span class="line">          A[j+d] = A[j];</span><br><span class="line">        A[j+d] = A[<span class="number">0</span>];</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上面代码中，每次让<code>i++</code>，也就是轮流地切换着来处理不同的几个子表。下图选取几个关键时刻展示：</p><p><img src="https://bu.dusays.com/2023/09/13/6501c510583c6.png" alt="46-145.png"></p><p>空间复杂度：$O(1)$ .</p><p>时间复杂度：</p><ul><li>和增量序列 $d_1,d_2,d_3,\cdots $ 的选择有关</li><li><strong>目前</strong>无法用数学手段证明确切的时间复杂度</li><li>最坏时间复杂度为 $O(n^2)$ ，如该算法退化为插入排序时</li><li>当 n 在某个范围时，可达到 $O(n^{1.3})$ .</li></ul><p><strong>希尔排序仅适用于顺序表，不适用于链表。</strong></p><p>稳定性：</p><p><img src="https://bu.dusays.com/2023/09/13/6501cb74ec12c.png" alt="46-146.png"></p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>若某一趟排序没有发生“交换”，说明此时已经整体有序。</p><p><img src="https://bu.dusays.com/2023/09/13/6501d1cb49713.png" alt="46-147.png"></p><p><strong>冒泡排序适用于链表。</strong></p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>算法思想：</p><p><img src="https://bu.dusays.com/2023/09/15/6503c6cdde4ea.png" alt="46-148.png"></p><p>代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> low, <span class="type">int</span> high)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">    <span class="type">int</span> pivotPos = <span class="built_in">Partition</span>(A, low, high); <span class="comment">// 划分</span></span><br><span class="line">    <span class="built_in">quickSort</span>(A, low, pivotPos<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">quickSort</span>(A, pivotPos+<span class="number">1</span>, high);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Partition</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> low, <span class="type">int</span> high)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> pivot = A[low];  <span class="comment">// 第一个元素作为枢轴</span></span><br><span class="line">  <span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;high &amp;&amp; A[high]&gt;=pivot) high--;</span><br><span class="line">    A[low] = A[high];</span><br><span class="line">    <span class="keyword">while</span>(low&lt;high &amp;&amp; A[low]&lt;=pivot) low++;</span><br><span class="line">    A[high] = A[low];</span><br><span class="line">  &#125;</span><br><span class="line">  A[low] = pivot;  <span class="comment">// 枢轴元素放到最终位置</span></span><br><span class="line">  <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>性能分析：</p><p><img src="https://bu.dusays.com/2023/09/15/6503d075b50fc.png" alt="46-149.png"></p><p><strong>快速排序不稳定。</strong></p><p>一个应试的小疑惑：</p><p><img src="https://bu.dusays.com/2023/09/15/6503d349c304a.png" alt="46-150.png"></p><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><p><img src="https://bu.dusays.com/2023/09/15/650469589d376.png" alt="46-151.png"></p><p><strong>简单选择排序既可以用于顺序表，也可以用于链表。</strong></p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>前置知识：</p><p><img src="https://bu.dusays.com/2023/09/15/650472146278d.png" alt="46-152.png"></p><p>大根堆的建立：</p><p><img src="https://bu.dusays.com/2023/09/15/65047b7abdde6.png" alt="46-153.png"></p><p>建立大根堆的代码：<br>（此处代码的动画演示参见<a href="https://www.bilibili.com/video/BV1b7411N798?p=92">王道视频_大根堆的建立</a>）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建立大根堆</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_maxHeap</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=len/<span class="number">2</span>; i&gt;<span class="number">0</span>; i--)</span><br><span class="line">    <span class="built_in">headAdjust</span>(A, i, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将以 k 为根的子树调整为大根堆</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">headAdjust</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> k, <span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">  A[<span class="number">0</span>] = A[k]; <span class="comment">// A[0] 暂存子树的根节点</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>*k; i&lt;=len; i*=<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;len &amp;&amp; A[i]&lt;A[i+<span class="number">1</span>]) i++; <span class="comment">// 选取 key 较大的子节点的下标</span></span><br><span class="line">    <span class="keyword">if</span>(A[<span class="number">0</span>]&gt;=A[i]) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      A[k] = A[i];</span><br><span class="line">      k = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  A[k] = A[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于大根堆进行排序：</p><p><img src="https://bu.dusays.com/2023/09/16/6504856460bda.png" alt="46-154.png"></p><p>基于大根堆进行排序（代码）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_maxHeap</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">headAdjust</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> k, <span class="type">int</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">  <span class="built_in">build_maxHeap</span>(A, len);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=len; i&gt;<span class="number">1</span>; i--)&#123;</span><br><span class="line">    <span class="built_in">swap</span>(A[i], A[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">headAdjust</span>(A, <span class="number">1</span>, i<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效率分析：</p><p><img src="https://bu.dusays.com/2023/09/16/65048fc666dd0.png" alt="46-155.png"></p><h3 id="堆的插入、删除"><a href="#堆的插入、删除" class="headerlink" title="堆的插入、删除"></a>堆的插入、删除</h3><p><img src="https://bu.dusays.com/2023/09/18/6507b9a8cfd7c.png" alt="46-156.png"></p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p><img src="https://bu.dusays.com/2023/09/18/6507bd80c6e3e.png" alt="46-157.png"></p><p>代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *B = (<span class="type">int</span>*) <span class="built_in">malloc</span>(n*<span class="built_in">sizeof</span>(<span class="type">int</span>)); <span class="comment">// 辅助数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A[low...mid] 和 A[mid+1...high] 各自有序，将两个部分归并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> i, j, k;</span><br><span class="line">  <span class="keyword">for</span>(k=low; k&lt;=high; k++)</span><br><span class="line">    B[k] = A[k];</span><br><span class="line">  <span class="keyword">for</span>(i=low,j=mid+<span class="number">1</span>,k=i; i&lt;=mid&amp;&amp;j&lt;=high; k++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(B[i]&lt;=B[j])  <span class="comment">// 保证了稳定性</span></span><br><span class="line">      A[k] = B[i++];</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      A[k] = B[j++];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;=mid) A[k++] = B[i++];</span><br><span class="line">  <span class="keyword">while</span>(j&lt;=high) A[k++] = B[j++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> low, <span class="type">int</span> high)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">    <span class="type">int</span> mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">mergeSort</span>(A, low, mid);</span><br><span class="line">    <span class="built_in">mergeSort</span>(A, mid+<span class="number">1</span>, high);</span><br><span class="line">    <span class="built_in">merge</span>(A, low, mid, high);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>性能分析：</p><p><img src="https://bu.dusays.com/2023/09/18/6507c7ef4fe66.png" alt="46-158.png"></p><h3 id="基数排序（Radix-Sort）"><a href="#基数排序（Radix-Sort）" class="headerlink" title="基数排序（Radix Sort）"></a>基数排序（Radix Sort）</h3><p><img src="https://bu.dusays.com/2023/09/18/6507ce15b9025.png" alt="46-159.png"></p><p>效率分析：</p><p><img src="https://bu.dusays.com/2023/09/18/6507d11389b6f.png" alt="46-160.png"></p><p>应用：</p><p><img src="https://bu.dusays.com/2023/09/18/6507d3e0a43fc.png" alt="46-161.png"></p><h2 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h2><p>外部排序考试不要求掌握，前面的区域，以后再来探索吧：</p><p><a href="https://www.bilibili.com/video/BV1b7411N798/?p=96">https://www.bilibili.com/video/BV1b7411N798/?p=96</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统笔记</title>
      <link href="/posts/8ce3e425.html"/>
      <url>/posts/8ce3e425.html</url>
      
        <content type="html"><![CDATA[<p>写在前面：</p><p>虽然本笔记的大多数内容是王道的 PPT ，但也是有我的注释的！王道的课程真的很好，咸鱼学长讲课生动又仔细。每年的课件和视频都是有变化的，我这里把 PPT 贴出来只是自用，本文章禁止转载。最后附上王道的网站：<code>cskaoyan.com</code>。</p><p>pdf 链接：<a href="https://drive.google.com/file/d/1Bo1Rd_m9uh4PnPLIIrZvo1Qe8-ZKcONl/view?usp=drive_link">GoogleDrive</a></p><h2 id="操作系统的概念、功能"><a href="#操作系统的概念、功能" class="headerlink" title="操作系统的概念、功能"></a>操作系统的概念、功能</h2><p><img src="https://bu.dusays.com/2023/07/05/64a44324547e0.jpg" alt="1.1_1_操作系统的概念、功能-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a4432483eb0.jpg" alt="1.1_1_操作系统的概念、功能-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324547e0.jpg" alt="1.1_1_操作系统的概念、功能-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324d01bd.jpg" alt="1.1_1_操作系统的概念、功能-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324d08ac.jpg" alt="1.1_1_操作系统的概念、功能-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324d8b36.jpg" alt="1.1_1_操作系统的概念、功能-6.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324b551f.jpg" alt="1.1_1_操作系统的概念、功能-7.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324b9a2a.jpg" alt="1.1_1_操作系统的概念、功能-8.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324d0322.jpg" alt="1.1_1_操作系统的概念、功能-9.jpg"></p><h2 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h2><p><img src="https://bu.dusays.com/2023/07/07/64a82fe52d101.jpg" alt="1.1_2_操作系统的特征-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a82fe5b5750.jpg" alt="1.1_2_操作系统的特征-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a82fe5b9d78.jpg" alt="1.1_2_操作系统的特征-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a82fe5bcbde.jpg" alt="1.1_2_操作系统的特征-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a82fe5b4c6d.jpg" alt="1.1_2_操作系统的特征-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a82fe578274.jpg" alt="1.1_2_操作系统的特征-6.jpg"></p><h2 id="操作系统的发展与分类"><a href="#操作系统的发展与分类" class="headerlink" title="操作系统的发展与分类"></a>操作系统的发展与分类</h2><p><img src="https://bu.dusays.com/2023/07/07/64a830c2a4ed2.jpg" alt="1.2_操作系统的发展与分类-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a830c2bfdf5.jpg" alt="1.2_操作系统的发展与分类-2.jpg"></p><p><img src="https://sway.office.com/s/Q7Yjq9XbLLQkbe4W/images/k9EbJY8-FjaT7k" alt="1.2_操作系统的发展与分类-3.jpg"></p><p><img src="https://sway.office.com/s/Q7Yjq9XbLLQkbe4W/images/gD1KB3tYw7ZAjj" alt="1.2_操作系统的发展与分类-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a830c2eccd2.jpg" alt="1.2_操作系统的发展与分类-5.jpg"></p><h2 id="操作系统的运行机制"><a href="#操作系统的运行机制" class="headerlink" title="操作系统的运行机制"></a>操作系统的运行机制</h2><p><img src="https://bu.dusays.com/2023/07/07/64a8333cd4ec7.jpg" alt="1.3_1_操作系统的运行机制-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333dbcf99.jpg" alt="1.3_1_操作系统的运行机制-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333dcc842.jpg" alt="1.3_1_操作系统的运行机制-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333dd9b65.jpg" alt="1.3_1_操作系统的运行机制-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333dd455c.jpg" alt="1.3_1_操作系统的运行机制-5.jpg"></p><p><img src="https://sway.office.com/s/Jl1DxGDSA3bPbLZV/images/SIGaZtzUVdPs2w" alt="1.3_1_操作系统的运行机制-6.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333d862fa.jpg" alt="1.3_1_操作系统的运行机制-7.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333d95a31.jpg" alt="1.3_1_操作系统的运行机制-8.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333dc241d.jpg" alt="1.3_1_操作系统的运行机制-9.jpg"></p><h2 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h2><p><img src="https://bu.dusays.com/2023/07/07/64a8352ec78c6.jpg" alt="1.3_2_中断和异常-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8352f028a8.jpg" alt="1.3_2_中断和异常-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8352f187ac.jpg" alt="1.3_2_中断和异常-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8352f1cffa.jpg" alt="1.3_2_中断和异常-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8352f18690.jpg" alt="1.3_2_中断和异常-5.jpg"></p><h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p><img src="https://bu.dusays.com/2023/07/09/64aa454c522ae.jpg" alt="1.3_3_系统调用-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa454d2d05d.jpg" alt="1.3_3_系统调用-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa454d776c2.jpg" alt="1.3_3_系统调用-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa454d743d2.jpg" alt="1.3_3_系统调用-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa454d2e520.jpg" alt="1.3_3_系统调用-5.jpg"></p><h2 id="操作系统体系结构（上）"><a href="#操作系统体系结构（上）" class="headerlink" title="操作系统体系结构（上）"></a>操作系统体系结构（上）</h2><p><img src="https://bu.dusays.com/2023/07/10/64ab8a6d6edc2.jpg" alt="1.4_1_操作系统体系结构（上）-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/10/64ab8a6eee344.jpg" alt="1.4_1_操作系统体系结构（上）-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/10/64ab8a6eeadbe.jpg" alt="1.4_1_操作系统体系结构（上）-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/10/64ab8a6eebc62.jpg" alt="1.4_1_操作系统体系结构（上）-4.jpg"></p><h2 id="操作系统体系结构（下）"><a href="#操作系统体系结构（下）" class="headerlink" title="操作系统体系结构（下）"></a>操作系统体系结构（下）</h2><p><img src="https://bu.dusays.com/2023/07/10/64ab8adb83bf9.jpg" alt="1.4_2_操作系统体系结构（下）-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/10/64ab8adc45f08.jpg" alt="1.4_2_操作系统体系结构（下）-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/10/64ab8adc55cfb.jpg" alt="1.4_2_操作系统体系结构（下）-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/10/64ab8adc641f6.jpg" alt="1.4_2_操作系统体系结构（下）-4.jpg"></p><h2 id="操作系统引导"><a href="#操作系统引导" class="headerlink" title="操作系统引导"></a>操作系统引导</h2><p><img src="https://bu.dusays.com/2023/07/11/64ad7796c9121.jpg" alt="1.5_操作系统引导-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/11/64ad779710c14.jpg" alt="1.5_操作系统引导-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/11/64ad779738205.jpg" alt="1.5_操作系统引导-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/11/64ad7798080f7.jpg" alt="1.5_操作系统引导-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/11/64ad7798a8964.jpg" alt="1.5_操作系统引导-5.jpg"></p><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p><img src="https://bu.dusays.com/2023/07/11/64ad7824ba99e.jpg" alt="1.6_虚拟机-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/11/64ad782a26cb9.jpg" alt="1.6_虚拟机-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/11/64ad7829c55a8.jpg" alt="1.6_虚拟机-3.jpg"></p><h2 id="进程的概念、组成、特征"><a href="#进程的概念、组成、特征" class="headerlink" title="进程的概念、组成、特征"></a>进程的概念、组成、特征</h2><p><img src="https://bu.dusays.com/2023/07/14/64b16d42df6f6.jpg" alt="2.1_1_进程的概念、组成、特征-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/14/64b16d4420d43.jpg" alt="2.1_1_进程的概念、组成、特征-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/14/64b16d445f1e2.jpg" alt="2.1_1_进程的概念、组成、特征-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/14/64b16d43d64b5.jpg" alt="2.1_1_进程的概念、组成、特征-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/14/64b16d445f1d5.jpg" alt="2.1_1_进程的概念、组成、特征-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/14/64b16d4455550.jpg" alt="2.1_1_进程的概念、组成、特征-6.jpg"></p><h2 id="进程的状态与转换、进程的组织"><a href="#进程的状态与转换、进程的组织" class="headerlink" title="进程的状态与转换、进程的组织"></a>进程的状态与转换、进程的组织</h2><p><img src="https://bu.dusays.com/2023/07/18/64b6b0377f45e.jpg" alt="2.1_2_进程的状态与转换、进程的组织-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b03d185f3.jpg" alt="2.1_2_进程的状态与转换、进程的组织-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b03d446a8.jpg" alt="2.1_2_进程的状态与转换、进程的组织-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b03e36aca.jpg" alt="2.1_2_进程的状态与转换、进程的组织-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b03ba9bf6.jpg" alt="2.1_2_进程的状态与转换、进程的组织-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b03a7f52a.jpg" alt="2.1_2_进程的状态与转换、进程的组织-6.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b03daf20c.jpg" alt="2.1_2_进程的状态与转换、进程的组织-7.jpg"></p><h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><p><img src="https://bu.dusays.com/2023/07/18/64b6b1091302c.jpg" alt="2.1_3_进程控制-01.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b1101a8ea.jpg" alt="2.1_3_进程控制-02.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11abdc1e.jpg" alt="2.1_3_进程控制-03.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11984d63.jpg" alt="2.1_3_进程控制-04.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11c1b6dc.jpg" alt="2.1_3_进程控制-05.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b118bfd43.jpg" alt="2.1_3_进程控制-06.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11aed02f.jpg" alt="2.1_3_进程控制-07.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11b8e7af.jpg" alt="2.1_3_进程控制-08.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11af32b5.jpg" alt="2.1_3_进程控制-09.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11c1d5a9.jpg" alt="2.1_3_进程控制-10.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b23a2fbaf.jpg" alt="2.1_3_进程控制-11.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b23a23499.jpg" alt="2.1_3_进程控制-12.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b23840709.jpg" alt="2.1_3_进程控制-13.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b23a4f16f.jpg" alt="2.1_3_进程控制-14.jpg"></p><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><p><img src="https://bu.dusays.com/2023/07/18/64b6b2a505bc1.jpg" alt="2.1_4_进程通信-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b215bce.jpg" alt="2.1_4_进程通信-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b6115a9.jpg" alt="2.1_4_进程通信-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b43bae7.jpg" alt="2.1_4_进程通信-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b4a14ec.jpg" alt="2.1_4_进程通信-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b2326ba.jpg" alt="2.1_4_进程通信-6.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b73a4a3.jpg" alt="2.1_4_进程通信-7.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b771bbb.jpg" alt="2.1_4_进程通信-8.jpg"></p><h2 id="线程的概念与特点"><a href="#线程的概念与特点" class="headerlink" title="线程的概念与特点"></a>线程的概念与特点</h2><p><img src="https://bu.dusays.com/2023/07/22/64bab2eaed5d6.jpg" alt="2.1_5_线程的概念与特点-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab2ed33304.jpg" alt="2.1_5_线程的概念与特点-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab2ee33afa.jpg" alt="2.1_5_线程的概念与特点-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab2ee0ffa0.jpg" alt="2.1_5_线程的概念与特点-4.jpg"></p><h2 id="线程的实现方式和多线程模型"><a href="#线程的实现方式和多线程模型" class="headerlink" title="线程的实现方式和多线程模型"></a>线程的实现方式和多线程模型</h2><p><img src="https://bu.dusays.com/2023/07/22/64bab3653e2ef.jpg" alt="2.1_6_线程的实现方式和多线程模型-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab36933bac.jpg" alt="2.1_6_线程的实现方式和多线程模型-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab369b5907.jpg" alt="2.1_6_线程的实现方式和多线程模型-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab36aee6df.jpg" alt="2.1_6_线程的实现方式和多线程模型-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab36b5eb73.jpg" alt="2.1_6_线程的实现方式和多线程模型-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab36ba01d8.jpg" alt="2.1_6_线程的实现方式和多线程模型-6.jpg"></p><h2 id="线程的状态与转换"><a href="#线程的状态与转换" class="headerlink" title="线程的状态与转换"></a>线程的状态与转换</h2><p><img src="https://bu.dusays.com/2023/07/22/64bab3e9a8eea.jpg" alt="2.1_7_线程的状态与转换-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab3e9ade73.jpg" alt="2.1_7_线程的状态与转换-2.jpg"></p><h2 id="调度的概念、层次"><a href="#调度的概念、层次" class="headerlink" title="调度的概念、层次"></a>调度的概念、层次</h2><p><img src="https://bu.dusays.com/2023/07/22/64bab47d1ba2e.jpg" alt="2.2_1_调度的概念、层次-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab47fe687c.jpg" alt="2.2_1_调度的概念、层次-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab480233a3.jpg" alt="2.2_1_调度的概念、层次-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab48179fd1.jpg" alt="2.2_1_调度的概念、层次-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab4817afa2.jpg" alt="2.2_1_调度的概念、层次-5.jpg"></p><h2 id="进程调度的时机、切换与过程、方式"><a href="#进程调度的时机、切换与过程、方式" class="headerlink" title="进程调度的时机、切换与过程、方式"></a>进程调度的时机、切换与过程、方式</h2><p><img src="https://bu.dusays.com/2023/07/25/64bfe9174853e.jpg" alt="2.2_2_进程调度的时机、切换与过程、方式-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe919e0cfb.jpg" alt="2.2_2_进程调度的时机、切换与过程、方式-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe9199e4ce.jpg" alt="2.2_2_进程调度的时机、切换与过程、方式-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe919379a5.jpg" alt="2.2_2_进程调度的时机、切换与过程、方式-4.jpg"></p><h2 id="调度器和闲逛进程"><a href="#调度器和闲逛进程" class="headerlink" title="调度器和闲逛进程"></a>调度器和闲逛进程</h2><p><img src="https://bu.dusays.com/2023/07/25/64bfe9a6d7493.jpg" alt="2.2_3_调度器和闲逛进程-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe9a6eecd9.jpg" alt="2.2_3_调度器和闲逛进程-2.jpg"></p><h2 id="调度算法的评价指标"><a href="#调度算法的评价指标" class="headerlink" title="调度算法的评价指标"></a>调度算法的评价指标</h2><p><img src="https://bu.dusays.com/2023/07/25/64bfe9f8e91ee.jpg" alt="2.2_4_调度算法的评价指标-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe9fab2ab2.jpg" alt="2.2_4_调度算法的评价指标-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe9fb803f9.jpg" alt="2.2_4_调度算法的评价指标-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe9fb6f622.jpg" alt="2.2_4_调度算法的评价指标-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe9fb13ab9.jpg" alt="2.2_4_调度算法的评价指标-5.jpg"></p><h2 id="调度算法-先来先服务、最短作业优先、最高响应比优先"><a href="#调度算法-先来先服务、最短作业优先、最高响应比优先" class="headerlink" title="调度算法_先来先服务、最短作业优先、最高响应比优先"></a>调度算法_先来先服务、最短作业优先、最高响应比优先</h2><p><img src="https://bu.dusays.com/2023/07/31/64c7d15e01779.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d165532df.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d1668c844.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d1680415a.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d162a5970.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d16340dbb.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-6.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d1691b775.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-7.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d16d93124.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-8.jpg"></p><h2 id="调度算法-时间片轮转、优先级、多级反馈队列"><a href="#调度算法-时间片轮转、优先级、多级反馈队列" class="headerlink" title="调度算法_时间片轮转、优先级、多级反馈队列"></a>调度算法_时间片轮转、优先级、多级反馈队列</h2><p><img src="https://bu.dusays.com/2023/07/31/64c7d366ccb64.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d3708cbe7.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d374b4d0e.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d374b4d22.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d37096c0c.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d36ed0237.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-6.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d3796adc7.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-7.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d37f4e581.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-8.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d38061328.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-9.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d37f4d362.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-10.jpg"></p><h2 id="调度算法-多级队列调度算法"><a href="#调度算法-多级队列调度算法" class="headerlink" title="调度算法_多级队列调度算法"></a>调度算法_多级队列调度算法</h2><p><img src="https://bu.dusays.com/2023/07/31/64c7d4a1ed339.jpg" alt="2.2_7_调度算法_多级队列调度算法-1.jpg"></p><h2 id="什么是进程同步、进程互斥"><a href="#什么是进程同步、进程互斥" class="headerlink" title="什么是进程同步、进程互斥"></a>什么是进程同步、进程互斥</h2><p><img src="https://bu.dusays.com/2023/08/03/64cb840b0c8ec.jpg" alt="2.3_1_什么是进程同步、进程互斥-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb840bbff0a.jpg" alt="2.3_1_什么是进程同步、进程互斥-2.jpg"></p><p><img src="https://s2.loli.net/2023/08/03/oigBhYQNt3K1aP8.jpg" alt="2.3_1_什么是进程同步、进程互斥-3.jpg"></p><p><img src="https://s2.loli.net/2023/08/03/MFfPRIKi9DzphNA.jpg" alt="2.3_1_什么是进程同步、进程互斥-4.jpg"></p><h2 id="进程互斥的软件实现方法"><a href="#进程互斥的软件实现方法" class="headerlink" title="进程互斥的软件实现方法"></a>进程互斥的软件实现方法</h2><p><img src="https://bu.dusays.com/2023/08/03/64cb86a5ce910.jpg" alt="2.3_2_进程互斥的软件实现方法-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb86a682577.jpg" alt="2.3_2_进程互斥的软件实现方法-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb86a787234.jpg" alt="2.3_2_进程互斥的软件实现方法-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb86a79dc41.jpg" alt="2.3_2_进程互斥的软件实现方法-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb86a7afb85.jpg" alt="2.3_2_进程互斥的软件实现方法-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb86a7889f6.jpg" alt="2.3_2_进程互斥的软件实现方法-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb86a82dd8c.jpg" alt="2.3_2_进程互斥的软件实现方法-7.jpg"></p><h2 id="进程互斥的硬件实现方法"><a href="#进程互斥的硬件实现方法" class="headerlink" title="进程互斥的硬件实现方法"></a>进程互斥的硬件实现方法</h2><p><img src="https://bu.dusays.com/2023/08/05/64ce452b3244f.jpg" alt="2.3_3_进程互斥的硬件实现方法-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce452bab5cb.jpg" alt="2.3_3_进程互斥的硬件实现方法-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce452c0f608.jpg" alt="2.3_3_进程互斥的硬件实现方法-3.jpg"></p><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p><img src="https://bu.dusays.com/2023/08/05/64ce45b92703d.jpg" alt="2.3_4_互斥锁-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce45b94c7a2.jpg" alt="2.3_4_互斥锁-2.jpg"></p><h2 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h2><p><img src="https://bu.dusays.com/2023/08/05/64ce471801e44.jpg" alt="2.3_5_信号量机制-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce471c405d6.jpg" alt="2.3_5_信号量机制-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce471b1d05a.jpg" alt="2.3_5_信号量机制-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce471d6043c.jpg" alt="2.3_5_信号量机制-4.jpg"></p><h2 id="用信号量实现进程互斥、同步、前驱关系"><a href="#用信号量实现进程互斥、同步、前驱关系" class="headerlink" title="用信号量实现进程互斥、同步、前驱关系"></a>用信号量实现进程互斥、同步、前驱关系</h2><p><img src="https://bu.dusays.com/2023/08/05/64ce4784a009c.jpg" alt="2.3_6_用信号量实现进程互斥、同步、前驱关系-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce47828f434.jpg" alt="2.3_6_用信号量实现进程互斥、同步、前驱关系-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce47840190d.jpg" alt="2.3_6_用信号量实现进程互斥、同步、前驱关系-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce4782ccad9.jpg" alt="2.3_6_用信号量实现进程互斥、同步、前驱关系-4.jpg"></p><h2 id="生产者-消费者问题"><a href="#生产者-消费者问题" class="headerlink" title="生产者-消费者问题"></a>生产者-消费者问题</h2><p><img src="https://bu.dusays.com/2023/08/05/64ce47f62aede.jpg" alt="2.3_7_生产者-消费者问题-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce47f1782a6.jpg" alt="2.3_7_生产者-消费者问题-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce47f6a1ee2.jpg" alt="2.3_7_生产者-消费者问题-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce47f9527d0.jpg" alt="2.3_7_生产者-消费者问题-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce47f582432.jpg" alt="2.3_7_生产者-消费者问题-5.jpg"></p><h2 id="多生产者-多消费者"><a href="#多生产者-多消费者" class="headerlink" title="多生产者-多消费者"></a>多生产者-多消费者</h2><p><img src="https://bu.dusays.com/2023/08/06/64cf23bf03ac7.jpg" alt="2.3_8_多生产者-多消费者-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf23c356499.jpg" alt="2.3_8_多生产者-多消费者-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf23c38200e.jpg" alt="2.3_8_多生产者-多消费者-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf23c391d95.jpg" alt="2.3_8_多生产者-多消费者-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf23c3a7524.jpg" alt="2.3_8_多生产者-多消费者-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf23c304cdc.jpg" alt="2.3_8_多生产者-多消费者-6.jpg"></p><h2 id="吸烟者问题"><a href="#吸烟者问题" class="headerlink" title="吸烟者问题"></a>吸烟者问题</h2><p><img src="https://bu.dusays.com/2023/08/06/64cf248663d78.jpg" alt="2.3_9_吸烟者问题-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf24891c382.jpg" alt="2.3_9_吸烟者问题-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf24883df3d.jpg" alt="2.3_9_吸烟者问题-3.jpg"></p><h2 id="读者-写者问题"><a href="#读者-写者问题" class="headerlink" title="读者-写者问题"></a>读者-写者问题</h2><p><img src="https://bu.dusays.com/2023/08/06/64cf24edc1293.jpg" alt="2.3_10_读者-写者问题-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf24eeae144.jpg" alt="2.3_10_读者-写者问题-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf24eed1cae.jpg" alt="2.3_10_读者-写者问题-3.jpg"></p><h2 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h2><p><img src="https://bu.dusays.com/2023/08/08/64d249dbbe37c.jpg" alt="2.3_11_哲学家进餐问题-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d249dc76e0b.jpg" alt="2.3_11_哲学家进餐问题-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d249dc93cea.jpg" alt="2.3_11_哲学家进餐问题-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d249dc6c15f.jpg" alt="2.3_11_哲学家进餐问题-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d249dc03a7f.jpg" alt="2.3_11_哲学家进餐问题-5.jpg"></p><h2 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h2><p><img src="https://bu.dusays.com/2023/08/08/64d24a7d2edf4.jpg" alt="2.3_12_管程-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24a7df1bc3.jpg" alt="2.3_12_管程-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24a7e6ab87.jpg" alt="2.3_12_管程-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24a7e380db.jpg" alt="2.3_12_管程-4.jpg"></p><h2 id="死锁的概念"><a href="#死锁的概念" class="headerlink" title="死锁的概念"></a>死锁的概念</h2><p><img src="https://bu.dusays.com/2023/08/08/64d24ae81102b.jpg" alt="2.4_1_死锁的概念-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24ae92546a.jpg" alt="2.4_1_死锁的概念-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24ae9c15b3.jpg" alt="2.4_1_死锁的概念-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24ae94f046.jpg" alt="2.4_1_死锁的概念-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24ae981209.jpg" alt="2.4_1_死锁的概念-5.jpg"></p><h2 id="死锁的处理策略—预防死锁"><a href="#死锁的处理策略—预防死锁" class="headerlink" title="死锁的处理策略—预防死锁"></a>死锁的处理策略—预防死锁</h2><p><img src="https://bu.dusays.com/2023/08/09/64d3b02ad4359.jpg" alt="2.4_2_死锁的处理策略—预防死锁-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b029d5054.jpg" alt="2.4_2_死锁的处理策略—预防死锁-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b02bb5e72.jpg" alt="2.4_2_死锁的处理策略—预防死锁-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0297fa0f.jpg" alt="2.4_2_死锁的处理策略—预防死锁-4.jpg"></p><h2 id="死锁的处理策略—避免死锁"><a href="#死锁的处理策略—避免死锁" class="headerlink" title="死锁的处理策略—避免死锁"></a>死锁的处理策略—避免死锁</h2><p><img src="https://bu.dusays.com/2023/08/09/64d3b0bebbfe6.jpg" alt="2.4_3_死锁的处理策略—避免死锁-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0ce223ff.jpg" alt="2.4_3_死锁的处理策略—避免死锁-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0ce6fefc.jpg" alt="2.4_3_死锁的处理策略—避免死锁-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0c7b9ce6.jpg" alt="2.4_3_死锁的处理策略—避免死锁-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0cfcdbd9.jpg" alt="2.4_3_死锁的处理策略—避免死锁-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0cc12e75.jpg" alt="2.4_3_死锁的处理策略—避免死锁-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0ca53c97.jpg" alt="2.4_3_死锁的处理策略—避免死锁-7.jpg"></p><h2 id="死锁的处理策略—死锁的检测与解除"><a href="#死锁的处理策略—死锁的检测与解除" class="headerlink" title="死锁的处理策略—死锁的检测与解除"></a>死锁的处理策略—死锁的检测与解除</h2><p><img src="https://bu.dusays.com/2023/08/09/64d3b1723982e.jpg" alt="2.4_4_死锁的处理策略—死锁的检测与解除-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b172bb8da.jpg" alt="2.4_4_死锁的处理策略—死锁的检测与解除-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b17663b79.jpg" alt="2.4_4_死锁的处理策略—死锁的检测与解除-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b174f15ca.jpg" alt="2.4_4_死锁的处理策略—死锁的检测与解除-4.jpg"></p><h2 id="内存的基础知识"><a href="#内存的基础知识" class="headerlink" title="内存的基础知识"></a>内存的基础知识</h2><p><img src="https://bu.dusays.com/2023/08/12/64d65e8385f35.jpg" alt="3.1_1_内存的基础知识-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e84a6968.jpg" alt="3.1_1_内存的基础知识-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e8435dff.jpg" alt="3.1_1_内存的基础知识-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e850eb5a.jpg" alt="3.1_1_内存的基础知识-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e867ce09.jpg" alt="3.1_1_内存的基础知识-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e866c713.jpg" alt="3.1_1_内存的基础知识-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e869fb04.jpg" alt="3.1_1_内存的基础知识-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e86d4373.jpg" alt="3.1_1_内存的基础知识-8.jpg"></p><p><img src="https://sway.office.com/s/kdoI85z1GGRvyVRu/images/5ud4zKm_7dpNZv" alt="3.1_1_内存的基础知识-9.jpg"></p><p><img src="https://sway.office.com/s/SGpu2MefI7MK1uBT/images/Efe_qAu19S1_D9" alt="3.1_1_内存的基础知识-10.jpg"></p><h2 id="内存管理的概念"><a href="#内存管理的概念" class="headerlink" title="内存管理的概念"></a>内存管理的概念</h2><p><img src="https://bu.dusays.com/2023/08/12/64d66038a65ef.jpg" alt="3.1_2_内存管理的概念-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d660397b64f.jpg" alt="3.1_2_内存管理的概念-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d6603a29c6a.jpg" alt="3.1_2_内存管理的概念-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d66039b54b7.jpg" alt="3.1_2_内存管理的概念-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d66039ea938.jpg" alt="3.1_2_内存管理的概念-5.jpg"></p><h2 id="覆盖与交换"><a href="#覆盖与交换" class="headerlink" title="覆盖与交换"></a>覆盖与交换</h2><p><img src="https://bu.dusays.com/2023/08/12/64d660cf6bbad.jpg" alt="3.1_3_覆盖与交换-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d660cfcc5d5.jpg" alt="3.1_3_覆盖与交换-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d660d0041c7.jpg" alt="3.1_3_覆盖与交换-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d660d067625.jpg" alt="3.1_3_覆盖与交换-4.jpg"></p><h2 id="连续分配管理方式"><a href="#连续分配管理方式" class="headerlink" title="连续分配管理方式"></a>连续分配管理方式</h2><p><img src="https://bu.dusays.com/2023/08/12/64d66181e5f32.jpg" alt="3.1_4_连续分配管理方式-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d66183a405c.jpg" alt="3.1_4_连续分配管理方式-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d661840c2b1.jpg" alt="3.1_4_连续分配管理方式-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d6618247e57.jpg" alt="3.1_4_连续分配管理方式-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d66182ca850.jpg" alt="3.1_4_连续分配管理方式-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d66183cdd31.jpg" alt="3.1_4_连续分配管理方式-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d661842f69b.jpg" alt="3.1_4_连续分配管理方式-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d66184a0d6b.jpg" alt="3.1_4_连续分配管理方式-8.jpg"></p><h2 id="动态分区分配算法"><a href="#动态分区分配算法" class="headerlink" title="动态分区分配算法"></a>动态分区分配算法</h2><p><img src="https://bu.dusays.com/2023/08/12/64d6622c0540e.jpg" alt="3.1_5_动态分区分配算法-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d6622ce8562.jpg" alt="3.1_5_动态分区分配算法-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d6622d31cd2.jpg" alt="3.1_5_动态分区分配算法-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d6622d6b860.jpg" alt="3.1_5_动态分区分配算法-4.jpg"></p><h2 id="基本分页存储管理的基本概念"><a href="#基本分页存储管理的基本概念" class="headerlink" title="基本分页存储管理的基本概念"></a>基本分页存储管理的基本概念</h2><p><img src="https://bu.dusays.com/2023/08/15/64da53960da97.jpg" alt="3.1_6_基本分页存储管理的基本概念-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da539d27213.jpg" alt="3.1_6_基本分页存储管理的基本概念-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da5393141ff.jpg" alt="3.1_6_基本分页存储管理的基本概念-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da5393804c3.jpg" alt="3.1_6_基本分页存储管理的基本概念-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da5394d3d19.jpg" alt="3.1_6_基本分页存储管理的基本概念-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da53a0953cb.jpg" alt="3.1_6_基本分页存储管理的基本概念-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da5398eb74c.jpg" alt="3.1_6_基本分页存储管理的基本概念-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da539b3874c.jpg" alt="3.1_6_基本分页存储管理的基本概念-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da53a0da25f.jpg" alt="3.1_6_基本分页存储管理的基本概念-9.jpg"></p><h2 id="基本地址变换机构"><a href="#基本地址变换机构" class="headerlink" title="基本地址变换机构"></a>基本地址变换机构</h2><p><img src="https://bu.dusays.com/2023/08/16/64dc9f505e783.jpg" alt="3.1_7_基本地址变换机构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dc9f50ab4cb.jpg" alt="3.1_7_基本地址变换机构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dced6dd9028.jpg" alt="3.1_7_基本地址变换机构-2dot5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dc9f572d936.jpg" alt="3.1_7_基本地址变换机构-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dc9f56b2981.jpg" alt="3.1_7_基本地址变换机构-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dc9f565baea.jpg" alt="3.1_7_基本地址变换机构-5.jpg"></p><h2 id="具有快表的地址变换机构"><a href="#具有快表的地址变换机构" class="headerlink" title="具有快表的地址变换机构"></a>具有快表的地址变换机构</h2><p><img src="https://bu.dusays.com/2023/08/16/64dcedf3bffbf.jpg" alt="3.1_8_具有快表的地址变换机构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcedf9cc451.jpg" alt="3.1_8_具有快表的地址变换机构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcedf8ebb7d.jpg" alt="3.1_8_具有快表的地址变换机构-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcedf7336da.jpg" alt="3.1_8_具有快表的地址变换机构-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcedf843c72.jpg" alt="3.1_8_具有快表的地址变换机构-5.jpg"></p><h2 id="两级页表"><a href="#两级页表" class="headerlink" title="两级页表"></a>两级页表</h2><p><img src="https://bu.dusays.com/2023/08/16/64dcee8858dca.jpg" alt="3.1_9_两级页表-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcee8ca1c81.jpg" alt="3.1_9_两级页表-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcee8e83aaa.jpg" alt="3.1_9_两级页表-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcee8c5d2b0.jpg" alt="3.1_9_两级页表-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcee915f724.jpg" alt="3.1_9_两级页表-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcee911b17f.jpg" alt="3.1_9_两级页表-6.jpg"></p><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p><img src="https://bu.dusays.com/2023/08/17/64dcfd619260d.jpg" alt="3.1_9dot5_补充说明-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/17/64dcfd6264a46.jpg" alt="3.1_9dot5_补充说明-2.jpg"></p><p><img src="https://sway.office.com/s/p4xi5cps3gCH9kEW/images/iG-XI8DPI9lOPn" alt="3.1_9dot5_补充说明-3.jpg"></p><h2 id="基本分段存储管理方式"><a href="#基本分段存储管理方式" class="headerlink" title="基本分段存储管理方式"></a>基本分段存储管理方式</h2><p><img src="https://bu.dusays.com/2023/08/18/64df5a1545b43.jpg" alt="3.1_10_基本分段存储管理方式-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a1632743.jpg" alt="3.1_10_基本分段存储管理方式-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a164e980.jpg" alt="3.1_10_基本分段存储管理方式-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a157f3f3.jpg" alt="3.1_10_基本分段存储管理方式-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a15d80da.jpg" alt="3.1_10_基本分段存储管理方式-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a164dae6.jpg" alt="3.1_10_基本分段存储管理方式-6.jpg"></p><h2 id="段页式管理方式"><a href="#段页式管理方式" class="headerlink" title="段页式管理方式"></a>段页式管理方式</h2><p><img src="https://bu.dusays.com/2023/08/18/64df5a907fdea.jpg" alt="3.1_11_段页式管理方式-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a9203158.jpg" alt="3.1_11_段页式管理方式-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a92ebc08.jpg" alt="3.1_11_段页式管理方式-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a9321f46.jpg" alt="3.1_11_段页式管理方式-4.jpg"></p><h2 id="虚拟内存的基本概念"><a href="#虚拟内存的基本概念" class="headerlink" title="虚拟内存的基本概念"></a>虚拟内存的基本概念</h2><p><img src="https://bu.dusays.com/2023/08/19/64e0e433a20e1.jpg" alt="3.2_1_虚拟内存的基本概念-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e433e4788.jpg" alt="3.2_1_虚拟内存的基本概念-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e43502a6d.jpg" alt="3.2_1_虚拟内存的基本概念-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e434e4752.jpg" alt="3.2_1_虚拟内存的基本概念-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e434d469f.jpg" alt="3.2_1_虚拟内存的基本概念-5.jpg"></p><h2 id="请求分页管理方式"><a href="#请求分页管理方式" class="headerlink" title="请求分页管理方式"></a>请求分页管理方式</h2><p><img src="https://bu.dusays.com/2023/08/19/64e0e4c016cfe.jpg" alt="3.2_2_请求分页管理方式-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e4c0b4422.jpg" alt="3.2_2_请求分页管理方式-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e4c03fb17.jpg" alt="3.2_2_请求分页管理方式-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e4c073d5f.jpg" alt="3.2_2_请求分页管理方式-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e4c11c53d.jpg" alt="3.2_2_请求分页管理方式-5.jpg"></p><h2 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h2><p><img src="https://bu.dusays.com/2023/08/19/64e0e5436e969.jpg" alt="3.2_3_页面置换算法-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e5451fde9.jpg" alt="3.2_3_页面置换算法-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e543e1c93.jpg" alt="3.2_3_页面置换算法-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e545976a1.jpg" alt="3.2_3_页面置换算法-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e544878dd.jpg" alt="3.2_3_页面置换算法-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e544ecf67.jpg" alt="3.2_3_页面置换算法-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e54742487.jpg" alt="3.2_3_页面置换算法-7.jpg"></p><h2 id="页面分配策略"><a href="#页面分配策略" class="headerlink" title="页面分配策略"></a>页面分配策略</h2><p><img src="https://bu.dusays.com/2023/08/22/64e4aae87bae7.jpg" alt="3.2_4_页面分配策略-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4aaeb38aae.jpg" alt="3.2_4_页面分配策略-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4aae9ae077.jpg" alt="3.2_4_页面分配策略-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4aaeb0133b.jpg" alt="3.2_4_页面分配策略-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4aaea237cf.jpg" alt="3.2_4_页面分配策略-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4aaeab9843.jpg" alt="3.2_4_页面分配策略-6.jpg"></p><h2 id="内存映射文件"><a href="#内存映射文件" class="headerlink" title="内存映射文件"></a>内存映射文件</h2><p><img src="https://bu.dusays.com/2023/08/22/64e4ab6fa2ee9.jpg" alt="3.2_5_内存映射文件-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4ab70c3a04.jpg" alt="3.2_5_内存映射文件-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4ab71c09a8.jpg" alt="3.2_5_内存映射文件-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4abe8c607d.jpg" alt="3.2_5_内存映射文件-4.jpg"></p><p><img src="https://sway.office.com/s/R1C5hAP7XVmGDbXk/images/2oFQvoo6_hxYKj" alt="3.2_5_内存映射文件-5.jpg"></p><h2 id="初识文件管理"><a href="#初识文件管理" class="headerlink" title="初识文件管理"></a>初识文件管理</h2><p><img src="https://bu.dusays.com/2023/08/24/64e73eff69f7f.jpg" alt="4.1_1_初识文件管理-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f0281dd6.jpg" alt="4.1_1_初识文件管理-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f01bcc53.jpg" alt="4.1_1_初识文件管理-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f00db021.jpg" alt="4.1_1_初识文件管理-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f028bde8.jpg" alt="4.1_1_初识文件管理-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f0272c82.jpg" alt="4.1_1_初识文件管理-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f00800d5.jpg" alt="4.1_1_初识文件管理-7.jpg"></p><h2 id="文件的逻辑结构"><a href="#文件的逻辑结构" class="headerlink" title="文件的逻辑结构"></a>文件的逻辑结构</h2><p><img src="https://bu.dusays.com/2023/08/24/64e73f8f7b012.jpg" alt="4.1_2_文件的逻辑结构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f9184a65.jpg" alt="4.1_2_文件的逻辑结构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f942c537.jpg" alt="4.1_2_文件的逻辑结构-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f92e3f79.jpg" alt="4.1_2_文件的逻辑结构-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8cde028e5b.jpg" alt="4.1_2_文件的逻辑结构-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f947e93e.jpg" alt="4.1_2_文件的逻辑结构-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f9296c7f.jpg" alt="4.1_2_文件的逻辑结构-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f93b3d23.jpg" alt="4.1_2_文件的逻辑结构-8.jpg"></p><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><p><img src="https://bu.dusays.com/2023/08/24/64e7400fd1015.jpg" alt="4.1_3_文件目录-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e74010abb34.jpg" alt="4.1_3_文件目录-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e740155713b.jpg" alt="4.1_3_文件目录-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e7401450ebf.jpg" alt="4.1_3_文件目录-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e740169dd3b.jpg" alt="4.1_3_文件目录-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e7401605584.jpg" alt="4.1_3_文件目录-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e74016c24f1.jpg" alt="4.1_3_文件目录-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e7401593030.jpg" alt="4.1_3_文件目录-8.jpg"></p><h2 id="文件的物理结构"><a href="#文件的物理结构" class="headerlink" title="文件的物理结构"></a>文件的物理结构</h2><p><img src="https://bu.dusays.com/2023/08/25/64e78860cfbc7.jpg" alt="4.1_4_文件的物理结构-01.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e788614896d.jpg" alt="4.1_4_文件的物理结构-02.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e788643d929.jpg" alt="4.1_4_文件的物理结构-03.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e788624532c.jpg" alt="4.1_4_文件的物理结构-04.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e788618a519.jpg" alt="4.1_4_文件的物理结构-05.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e7886312261.jpg" alt="4.1_4_文件的物理结构-06.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e78862bc759.jpg" alt="4.1_4_文件的物理结构-07.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e7886383cd4.jpg" alt="4.1_4_文件的物理结构-08.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e78862b94a4.jpg" alt="4.1_4_文件的物理结构-09.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e788640a530.jpg" alt="4.1_4_文件的物理结构-10.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e78922f15e4.jpg" alt="4.1_4_文件的物理结构-11.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e789269e35a.jpg" alt="4.1_4_文件的物理结构-12.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e7892709dd5.jpg" alt="4.1_4_文件的物理结构-13.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e789260d4f0.jpg" alt="4.1_4_文件的物理结构-14.jpg"></p><h2 id="逻辑结构-VS-物理结构"><a href="#逻辑结构-VS-物理结构" class="headerlink" title="逻辑结构 VS 物理结构"></a>逻辑结构 VS 物理结构</h2><p><img src="https://bu.dusays.com/2023/08/25/64e7896c10770.jpg" alt="4.1_5_逻辑结构VS物理结构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e78972b5bc6.jpg" alt="4.1_5_逻辑结构VS物理结构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e7897445790.jpg" alt="4.1_5_逻辑结构VS物理结构-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e7897420172.jpg" alt="4.1_5_逻辑结构VS物理结构-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e78970057e2.jpg" alt="4.1_5_逻辑结构VS物理结构-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e78971d73b2.jpg" alt="4.1_5_逻辑结构VS物理结构-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e7897423162.jpg" alt="4.1_5_逻辑结构VS物理结构-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e789728b6d4.jpg" alt="4.1_5_逻辑结构VS物理结构-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e789741efe4.jpg" alt="4.1_5_逻辑结构VS物理结构-9.jpg"></p><h2 id="文件存储空间管理"><a href="#文件存储空间管理" class="headerlink" title="文件存储空间管理"></a>文件存储空间管理</h2><p><img src="https://bu.dusays.com/2023/08/25/64e827716cc03.jpg" alt="4.1_6_文件存储空间管理-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e82772ced19.jpg" alt="4.1_6_文件存储空间管理-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e827763690e.jpg" alt="4.1_6_文件存储空间管理-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e82776339f4.jpg" alt="4.1_6_文件存储空间管理-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8277647989.jpg" alt="4.1_6_文件存储空间管理-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e827762bdac.jpg" alt="4.1_6_文件存储空间管理-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e82774756b8.jpg" alt="4.1_6_文件存储空间管理-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e827762a5a0.jpg" alt="4.1_6_文件存储空间管理-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8277636ff1.jpg" alt="4.1_6_文件存储空间管理-9.jpg"></p><h2 id="文件的基本操作"><a href="#文件的基本操作" class="headerlink" title="文件的基本操作"></a>文件的基本操作</h2><p><img src="https://bu.dusays.com/2023/08/25/64e82842c99e1.jpg" alt="4.1_7_文件的基本操作-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8284455e08.jpg" alt="4.1_7_文件的基本操作-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e82844c4f32.jpg" alt="4.1_7_文件的基本操作-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e82843c70bd.jpg" alt="4.1_7_文件的基本操作-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e82844c951f.jpg" alt="4.1_7_文件的基本操作-5.jpg"></p><h2 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h2><p><img src="https://bu.dusays.com/2023/08/25/64e828c0481da.jpg" alt="4.1_8_文件共享-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e828c1163fb.jpg" alt="4.1_8_文件共享-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e828c206e3a.jpg" alt="4.1_8_文件共享-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e828c18d1e2.jpg" alt="4.1_8_文件共享-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e828c1cee68.jpg" alt="4.1_8_文件共享-5.jpg"></p><h2 id="文件保护"><a href="#文件保护" class="headerlink" title="文件保护"></a>文件保护</h2><p><img src="https://bu.dusays.com/2023/08/25/64e8294942a88.jpg" alt="4.1_9_文件保护-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8294aa151d.jpg" alt="4.1_9_文件保护-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8294c74160.jpg" alt="4.1_9_文件保护-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8294ae92b3.jpg" alt="4.1_9_文件保护-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8294c475c5.jpg" alt="4.1_9_文件保护-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8294c618be.jpg" alt="4.1_9_文件保护-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8294c6a60e.jpg" alt="4.1_9_文件保护-7.jpg"></p><h2 id="补充说明-2"><a href="#补充说明-2" class="headerlink" title="补充说明 2"></a>补充说明 2</h2><p><img src="https://sway.office.com/s/spYzd7vE8sSW2u50/images/WUQwvOYCHgI3af" alt="4.2_1_没有这节-1.jpg"></p><p>对上面容易混淆的一部分内容粗略整理：</p><p>文件的逻辑结构：</p><ul><li>无结构文件</li><li>有结构文件<ul><li>顺序文件</li><li>索引文件</li><li>索引顺序文件、（进一步地，有）多级索引顺序文件</li></ul></li></ul><p>文件的物理结构（对<strong>非空闲磁盘块</strong>的管理）：</p><ul><li>连续分配</li><li>链接分配<ul><li>隐式链接</li><li>显式链接</li></ul></li><li>索引分配<ul><li>若索引表太大，则：<ul><li>链接方案</li><li>多层索引</li><li>混合索引</li></ul></li></ul></li></ul><p>文件存储空间管理（对<strong>空闲磁盘块</strong>的管理）：</p><ul><li>空闲表法</li><li>空闲链表法<ul><li>空闲盘块链</li><li>空闲盘区链</li></ul></li><li>位示图法</li><li>成组链接法</li></ul><p>具体细节可根据本文章目录快速查找。</p><h2 id="文件系统的层次结构"><a href="#文件系统的层次结构" class="headerlink" title="文件系统的层次结构"></a>文件系统的层次结构</h2><p><img src="https://bu.dusays.com/2023/08/28/64ec273619b30.jpg" alt="4.3_1_文件系统的层次结构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec27376ed52.jpg" alt="4.3_1_文件系统的层次结构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec27373281b.jpg" alt="4.3_1_文件系统的层次结构-3.jpg"></p><h2 id="文件系统的全局结构（布局）"><a href="#文件系统的全局结构（布局）" class="headerlink" title="文件系统的全局结构（布局）"></a>文件系统的全局结构（布局）</h2><p><img src="https://bu.dusays.com/2023/08/28/64ec27daac758.jpg" alt="4.3_2_文件系统的全局结构（布局）-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec27db12e81.jpg" alt="4.3_2_文件系统的全局结构（布局）-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec27db4fe42.jpg" alt="4.3_2_文件系统的全局结构（布局）-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec27db87e10.jpg" alt="4.3_2_文件系统的全局结构（布局）-4.jpg"></p><h2 id="虚拟文件系统"><a href="#虚拟文件系统" class="headerlink" title="虚拟文件系统"></a>虚拟文件系统</h2><p><img src="https://bu.dusays.com/2023/08/28/64ec28447a569.jpg" alt="4.3_3_虚拟文件系统-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec2845791c9.jpg" alt="4.3_3_虚拟文件系统-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec2845e0e90.jpg" alt="4.3_3_虚拟文件系统-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec2846b5c31.jpg" alt="4.3_3_虚拟文件系统-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec2845c8cad.jpg" alt="4.3_3_虚拟文件系统-5.jpg"></p><h2 id="IO设备的基本概念和分类"><a href="#IO设备的基本概念和分类" class="headerlink" title="IO设备的基本概念和分类"></a>IO设备的基本概念和分类</h2><p><img src="https://bu.dusays.com/2023/08/28/64ecbd8984d96.jpg" alt="5.1_1_IO设备的基本概念和分类-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbd8a86b5f.jpg" alt="5.1_1_IO设备的基本概念和分类-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbd8b201dd.jpg" alt="5.1_1_IO设备的基本概念和分类-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbd8ae989d.jpg" alt="5.1_1_IO设备的基本概念和分类-4.jpg"></p><h2 id="IO控制器"><a href="#IO控制器" class="headerlink" title="IO控制器"></a>IO控制器</h2><p><img src="https://bu.dusays.com/2023/08/28/64ecbe1f1b07e.jpg" alt="5.1_2_IO控制器-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe21e2578.jpg" alt="5.1_2_IO控制器-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe236d4b3.jpg" alt="5.1_2_IO控制器-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe2074ea4.jpg" alt="5.1_2_IO控制器-4.jpg"></p><h2 id="IO控制方式"><a href="#IO控制方式" class="headerlink" title="IO控制方式"></a>IO控制方式</h2><p><img src="https://bu.dusays.com/2023/08/28/64ecbe889d639.jpg" alt="5.1_3_IO控制方式-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe8c9564e.jpg" alt="5.1_3_IO控制方式-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe8ee3f9f.jpg" alt="5.1_3_IO控制方式-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe8b999a6.jpg" alt="5.1_3_IO控制方式-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe8d826dc.jpg" alt="5.1_3_IO控制方式-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe8dbb194.jpg" alt="5.1_3_IO控制方式-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe8cb1255.jpg" alt="5.1_3_IO控制方式-7.jpg"></p><h2 id="IO软件层次结构"><a href="#IO软件层次结构" class="headerlink" title="IO软件层次结构"></a>IO软件层次结构</h2><p><img src="https://bu.dusays.com/2023/08/28/64ecbf04043e9.jpg" alt="5.1_4_IO软件层次结构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf0906aae.jpg" alt="5.1_4_IO软件层次结构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf05aa4e6.jpg" alt="5.1_4_IO软件层次结构-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf04d519e.jpg" alt="5.1_4_IO软件层次结构-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf0621015.jpg" alt="5.1_4_IO软件层次结构-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf07b76d2.jpg" alt="5.1_4_IO软件层次结构-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf05d6cad.jpg" alt="5.1_4_IO软件层次结构-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf08ceddc.jpg" alt="5.1_4_IO软件层次结构-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf0a35723.jpg" alt="5.1_4_IO软件层次结构-9.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf0542a65.jpg" alt="5.1_4_IO软件层次结构-10.jpg"></p><h2 id="输入输出应用程序接口和驱动程序接口"><a href="#输入输出应用程序接口和驱动程序接口" class="headerlink" title="输入输出应用程序接口和驱动程序接口"></a>输入输出应用程序接口和驱动程序接口</h2><p><img src="https://bu.dusays.com/2023/08/28/64ecbfde74e9e.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfe097285.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfdee8b91.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfe0a0176.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfe00de44.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfe07be21.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfdf69c02.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfdf389e6.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfe0afaf5.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-9.jpg"></p><h2 id="IO核心子系统"><a href="#IO核心子系统" class="headerlink" title="IO核心子系统"></a>IO核心子系统</h2><p><img src="https://bu.dusays.com/2023/08/28/64ecc07ba02ec.jpg" alt="5.2_1_IO核心子系统-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecc07be2202.jpg" alt="5.2_1_IO核心子系统-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecc07c2295e.jpg" alt="5.2_1_IO核心子系统-3.jpg"></p><h2 id="假脱机技术"><a href="#假脱机技术" class="headerlink" title="假脱机技术"></a>假脱机技术</h2><p><img src="https://bu.dusays.com/2023/08/29/64ede22d799ea.jpg" alt="5.2_2_假脱机技术-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede22f974d4.jpg" alt="5.2_2_假脱机技术-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede230d2bf1.jpg" alt="5.2_2_假脱机技术-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede22f5128a.jpg" alt="5.2_2_假脱机技术-4.jpg"></p><p><img src="https://sway.office.com/s/spYzd7vE8sSW2u50/images/9XGWMTqZ_M13vT" alt="5.2_2_假脱机技术-5.jpg"></p><p><img src="https://sway.office.com/s/spYzd7vE8sSW2u50/images/vgbtxoYOINMfHY" alt="5.2_2_假脱机技术-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede231292a8.jpg" alt="5.2_2_假脱机技术-7.jpg"></p><h2 id="设备的分配与回收"><a href="#设备的分配与回收" class="headerlink" title="设备的分配与回收"></a>设备的分配与回收</h2><p><img src="https://bu.dusays.com/2023/08/29/64ede3859b08f.jpg" alt="5.2_3_设备的分配与回收-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede38779e54.jpg" alt="5.2_3_设备的分配与回收-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede3875bebb.jpg" alt="5.2_3_设备的分配与回收-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede388a96d1.jpg" alt="5.2_3_设备的分配与回收-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede387259c6.jpg" alt="5.2_3_设备的分配与回收-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede3867bf75.jpg" alt="5.2_3_设备的分配与回收-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede38852f47.jpg" alt="5.2_3_设备的分配与回收-7.jpg"></p><p><img src="https://sway.office.com/s/spYzd7vE8sSW2u50/images/bQaqiGl08kdRUZ" alt="5.2_3_设备的分配与回收-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede3890070f.jpg" alt="5.2_3_设备的分配与回收-9.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede3890a03c.jpg" alt="5.2_3_设备的分配与回收-10.jpg"></p><h2 id="缓冲区管理"><a href="#缓冲区管理" class="headerlink" title="缓冲区管理"></a>缓冲区管理</h2><p><img src="https://bu.dusays.com/2023/08/29/64ede5ab5b649.jpg" alt="5.2_4_缓冲区管理-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5af1163d.jpg" alt="5.2_4_缓冲区管理-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5af1a04b.jpg" alt="5.2_4_缓冲区管理-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5afe4bd0.jpg" alt="5.2_4_缓冲区管理-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5acb8adf.jpg" alt="5.2_4_缓冲区管理-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5afa7d4f.jpg" alt="5.2_4_缓冲区管理-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5ab8ba7d.jpg" alt="5.2_4_缓冲区管理-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5adc1f77.jpg" alt="5.2_4_缓冲区管理-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5aff1ffc.jpg" alt="5.2_4_缓冲区管理-9.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5ad7e6b0.jpg" alt="5.2_4_缓冲区管理-10.jpg"></p><h2 id="磁盘的结构"><a href="#磁盘的结构" class="headerlink" title="磁盘的结构"></a>磁盘的结构</h2><p><img src="https://bu.dusays.com/2023/08/30/64eeeed613925.jpg" alt="5.3_1_磁盘的结构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeeed7707fd.jpg" alt="5.3_1_磁盘的结构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeeed7c2642.jpg" alt="5.3_1_磁盘的结构-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeeed8c65c6.jpg" alt="5.3_1_磁盘的结构-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeeed895fb9.jpg" alt="5.3_1_磁盘的结构-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeeed8171e3.jpg" alt="5.3_1_磁盘的结构-6.jpg"></p><h2 id="磁盘调度算法"><a href="#磁盘调度算法" class="headerlink" title="磁盘调度算法"></a>磁盘调度算法</h2><p><img src="https://bu.dusays.com/2023/08/30/64eeef46df3f4.jpg" alt="5.3_2_磁盘调度算法-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeef48eb4cd.jpg" alt="5.3_2_磁盘调度算法-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeef4ab6363.jpg" alt="5.3_2_磁盘调度算法-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeef4a6b52a.jpg" alt="5.3_2_磁盘调度算法-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeef4a8978d.jpg" alt="5.3_2_磁盘调度算法-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeef4a8e0a9.jpg" alt="5.3_2_磁盘调度算法-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeef48b6be9.jpg" alt="5.3_2_磁盘调度算法-7.jpg"></p><h2 id="减少磁盘延迟时间的方法"><a href="#减少磁盘延迟时间的方法" class="headerlink" title="减少磁盘延迟时间的方法"></a>减少磁盘延迟时间的方法</h2><p><img src="https://bu.dusays.com/2023/08/30/64eeefd73b683.jpg" alt="5.3_3_减少磁盘延迟时间的方法-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeefd730e5d.jpg" alt="5.3_3_减少磁盘延迟时间的方法-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeefd801a74.jpg" alt="5.3_3_减少磁盘延迟时间的方法-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeefd7a1548.jpg" alt="5.3_3_减少磁盘延迟时间的方法-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeefd6bfcc7.jpg" alt="5.3_3_减少磁盘延迟时间的方法-5.jpg"></p><h2 id="磁盘的管理"><a href="#磁盘的管理" class="headerlink" title="磁盘的管理"></a>磁盘的管理</h2><p><img src="https://bu.dusays.com/2023/08/30/64eef07bb971c.jpg" alt="5.3_4_磁盘的管理-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef07e336dc.jpg" alt="5.3_4_磁盘的管理-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef080c4891.jpg" alt="5.3_4_磁盘的管理-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef07f8b560.jpg" alt="5.3_4_磁盘的管理-4.jpg"></p><h2 id="固态硬盘SSD"><a href="#固态硬盘SSD" class="headerlink" title="固态硬盘SSD"></a>固态硬盘SSD</h2><p><img src="https://bu.dusays.com/2023/08/30/64eef0e8c4c50.jpg" alt="5.3_5_固态硬盘SSD-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef0ea2b7f3.jpg" alt="5.3_5_固态硬盘SSD-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef0e958845.jpg" alt="5.3_5_固态硬盘SSD-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef0e9b8e6b.jpg" alt="5.3_5_固态硬盘SSD-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef0ea13539.jpg" alt="5.3_5_固态硬盘SSD-5.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graduation</title>
      <link href="/posts/368869f3.html"/>
      <url>/posts/368869f3.html</url>
      
        <content type="html"><![CDATA[<p>毕业了，很难受。</p><p>我惊讶于这份难受。在相当的一段时间里，我以为自己已经枯死，再难有感情上的波动。</p><p>大家陆陆续续的离开宿舍，奔赴各自的前程，我们还会笑嘻嘻在先走的室友留下的东西里淘金。</p><p>“哟，这还有个去年顺的大白 cos 服呢。”</p><p>“继承！”</p><p>我本是倒数第二个离开的，可是最后一位室友还是和我一起离开了，说自己一个人多待几个小时也是难受，不如一起走。</p><p>拍照，拉闸，断电。</p><p>以前我总是调侃『仰天大笑出门去，我辈岂是 XX（校名）人』，路上却无言。</p><p>今天在某人的空间里看到毕业留念的照片，心里一咯噔，才后知后觉地发现，好像错过了重要的人。</p><p>挺可爱的女孩子。交集不多，大一的时候接触过几次，后来逐渐沦为点赞之交。似乎在某节人满为患专业课上，她坐在我的右边，但除此之外没有别的相关记忆。</p><p>某次补考的考场上，监考报到她名字时，才发现她就坐在我后面（补考考场见？.jpg），竟一时分辨不出样貌。这倒也不奇怪，本来也没常照面，忘了长相也很正常。或许是我自己在心里勾勒出了一个可能陪伴我的人，我为自己强加于人的期待感到惭愧。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>负荷预测笔记</title>
      <link href="/posts/420347ac.html"/>
      <url>/posts/420347ac.html</url>
      
        <content type="html"><![CDATA[<p>并非我的笔记，以前问人要的。</p><p><img src="https://bu.dusays.com/2023/06/29/649d157187de7.jpg" alt="电力负荷预测笔记-01.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d157250197.jpg" alt="电力负荷预测笔记-02.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d157263621.jpg" alt="电力负荷预测笔记-03.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d15728c7b8.jpg" alt="电力负荷预测笔记-04.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d15727b4e2.jpg" alt="电力负荷预测笔记-05.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d157250edb.jpg" alt="电力负荷预测笔记-06.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d15728b623.jpg" alt="电力负荷预测笔记-07.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d15727a742.jpg" alt="电力负荷预测笔记-08.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d15728b49b.jpg" alt="电力负荷预测笔记-09.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d157283a09.jpg" alt="电力负荷预测笔记-10.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160aa1eea.jpg" alt="电力负荷预测笔记-11.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160aa0863.jpg" alt="电力负荷预测笔记-12.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160aa49ad.jpg" alt="电力负荷预测笔记-13.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160aab3e1.jpg" alt="电力负荷预测笔记-14.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160aa106e.jpg" alt="电力负荷预测笔记-15.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160aad5e7.jpg" alt="电力负荷预测笔记-16.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160ab41f8.jpg" alt="电力负荷预测笔记-17.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 负荷预测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活在树上</title>
      <link href="/posts/67769661.html"/>
      <url>/posts/67769661.html</url>
      
        <content type="html"><![CDATA[<p>今天早上又睡到了十点，为了不被朝阳拥抱，我特意选了一处荫凉的枝桠。</p><p>树友已经有起枝的了，抖着腿在打地下城。我不明白地下城有什么好玩的，我只是望文生义地觉得，他只要纵身一跃，就能跳到地下。但那可不是什么好主意——地下有可怖的鸟雀。</p><p>这些鸟雀虽不如外面的鸟雀那么有攻击性，却也不是好惹的：它们在读大学，等它们念完了大学，又是鸟界社会的生力军。我看着蹦蹦跳跳、鸟头攒动的赶第二节课的鸟流，如是想。</p><p>我拆开铜锣烧的包装，就着农夫山泉对付下去。这些都是昨天晚饭后去树超买的，为的是午饭前不至于饿着肚子，也不至于太饱吃不下午饭。我曾听人言，此树百货大树有一位职员，每天在林间飞跃通勤两个半小时——就像东瀛鸟洲的忍鸟那样，以致天天早上不吃东西，得了胃癌，年纪轻轻就去世了，坠到地面去，被大学鸟——大概是医学鸟捡了去，“树人虽蠢五脏俱全”，从此不知所踪。</p><p>历史学者会告诉我们，遥远的过去，人们在大地上行走。但一场变故之后，千山鸟飞绝，万径人踪灭，我们生活在了树上。倘若说更古的时候，猿猴从树上下到地面是生存的选择，那么我们再回到树上也没什么可耻的吧，都是为了生存。</p><p>鸟生们终于上完了第二节课，熙熙攘攘蹦回宿舍。这是一个人和鸟都会担心蛋的炎热天气，不过树上的生活总还有些荫蔽，不似蒸腾着暑气的地面。我饶有兴致地看着这些鸟雀，在蹦进宿舍阴影边缘的时候，它们就像是果冻一样被吸了进去，并发出短促的“嗖”的音效。说是宿舍，也就是鸽子笼般似的，这帮大学鸟们过的也不滋润。宿舍前的台阶上陈列着一些外卖，这些鸟生们就用喙叼着塑料袋的提嘴，扑棱着翅膀一摇一晃地回各自的鸽子笼。</p><p>“傻逼xx，食堂吔排骨去，晚了就只能喝树上贵粥了。”树友发话。</p><p>据说，人类曾培育过一种叫做“羊猪熊”的树上动物，作为肉料来源。但羊猪熊自诞生起就散发出令人肃然起敬的气场，最后成为一种宗教式的神秘动物，受很多人的膜拜。因此人类至今花费相当成本在树上养殖着传统动物。</p><p>树上贵粥的前身叫“爱唠嗑地”，一家很受欢迎的连锁餐饮，尤以好喝的粥闻名树界，原本不在此树集团旗下。后来此树集团认为非我树类其心必异，接管了爱唠嗑地在此树治下的业务，并抬高了粥的售价，于是收获恶名“树上贵粥”。</p><p>“树上贵粥，狗都不吃。走吧。”</p><p>我还是因午觉错过了这些鸟生们下午上课的光景，难以想象它们顶着毒辣太阳出笼的心情。</p><p>很好的月亮，很好的夜。</p><p>鸟生们一丝不挂、成群结队地踱去洗浴场，用我的八倍镜可以看清它们的每一根初级飞羽。泥浴是这些鸟生们一天中最闲适的时候，洗完澡就该上笼休息，明天继续奋斗了。</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?aid=811838805&bvid=BV1f34y1E7UP&cid=727854836&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><p>临近鸟生宿舍关门的时候，一只可爱的雀儿衔着张纸，左瞧右瞧，把纸放在了我们树的树洞里。看来是把这个树洞当作它的树洞了，看看上面写了啥：喳喳喳喳叽叽叽，叽叽叽叽喳喳喳，看不懂，算了，还是放回去吧。</p><p>我爬回自己的枝桠，摸出手机，往树干上一靠，这可是老祖宗留下的宝贝。那些鸟雀最近都不怎么出去，它们的消遣会不会是叫翅机呢？或者叫喙机？不能吧，我笑了，那眼睛要瞎的。</p><p>不早了，该睡了。</p><p>“降维打击！”，啪，血绒花于手心绽放，生活在树上，是要处理好蚊子问题的。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谵妄 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fourier Stuff</title>
      <link href="/posts/7f212daa.html"/>
      <url>/posts/7f212daa.html</url>
      
        <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>方程 $z^n=1\quad (n=1,2,3,\cdots)$ 的复数根 $z$ 为 <strong>$n$ 次单位根</strong><a href="#bib1" id="bib1ref"><sup>[1]</sup></a>。</p><p>下面求解该方程。</p><p>已知欧拉公式<a href="#bib2" id="bib2ref"><sup>[2]</sup></a>：</p><script type="math/tex; mode=display">e^{i\pi}+1=0</script><p>则：</p><script type="math/tex; mode=display">(e^{i\pi})^2=(-1)^2</script><script type="math/tex; mode=display">e^{2i\pi}=1</script><p>两边作 $k$ 次方：</p><script type="math/tex; mode=display">e^{i2k\pi}=1</script><p>再取 $n$ 次根，得：</p><script type="math/tex; mode=display">\sqrt[n]{1}=e^{i2\pi \frac{k}{n}}=\cos 2\pi \frac{k}{n}+i\sin 2\pi \frac{k}{n}</script><p>由三角函数的周期性易知，其根有 $n$ 个，分别是 $k$ 取 $0,1,2,\cdots ,n-1$</p><p>即，单位的 $n$ 次根有 $n$ 个：</p><script type="math/tex; mode=display">e^{\frac{2\pi ki}{n}} \quad (k=0,1,2,\cdots ,n-1)</script><p>单位的 $n$ 次根以乘法构成 $n$ 阶循环群，生成元是 <strong>$n$ 次本原单位根</strong>。$n$ 次本原单位根是 $e^{\frac{2\pi ki}{n}}$ ，其中 $k$ 和 $n$ 互质。因此由欧拉函数定义，$n$ 次本原单位根数目为欧拉函数 $\varphi (n)$ .</p><p>例子：</p><ul><li>一次单位根有一个：$1$</li><li>二次单位根有两个：$+1$ 和 $-1$ ，只有 $-1$ 是本原根</li><li>三次单位根是（除 1 外都是本原根）：<script type="math/tex; mode=display">\{1,\frac{-1+\sqrt{3}i}{2},\frac{-1-\sqrt{3}i}{2}\}</script></li><li>四次单位根是：$\{1,+i,-1,-i\}$ ，其中 $+i$ 和 $-i$ 是本原根</li></ul><p>当 $n$ 不小于 2 时，n 次单位根总和为 0 .</p><script type="math/tex; mode=display">\sum\limits_{k=0}^{n-1}e^{\frac{2\pi ki}{n}}=\frac{e^{\frac{2\pi kni}{n}}-1}{e^{\frac{2\pi i}{n}}-1}=\frac{1-1}{e^{\frac{2\pi i}{n}}-1}=0</script><p>该结果在复平面上是显然的。</p><h2 id="FFT-多项式乘法"><a href="#FFT-多项式乘法" class="headerlink" title="FFT 多项式乘法"></a>FFT 多项式乘法</h2><p>部分内容参考自视频 <a href="https://www.youtube.com/watch?v=h7apO7q16V0&amp;ab_channel=Reducible">The Fast Fourier Transform (FFT): Most Ingenious Algorithm Ever?</a> 只有生肉，没有找到较好的翻译版本。因此使用了部分英语表述。这个视频在记法上有一些蛊惑人心的地方，我就按照自己的习惯来了。</p><p>问题引入：我们试图计算两个多项式的乘积。朴素的做法是使用乘法的分配律在 $O(n^2)$ 时间内完成。现在需要寻找更高效的算法。</p><p>为此引入 Polynomial Representation 的另一种方法：value representation.</p><p>Coefficient Representation :</p><script type="math/tex; mode=display">P(x)=p_0+p_1x+p_2x^2+\cdots p_dx^d</script><script type="math/tex; mode=display">\begin{matrix} \underbrace{[p_0,p_1,\cdots ,p_d]} \\ {\scriptstyle\text{Coefficient Representation}} \end{matrix}</script><p>Value Representation :</p><script type="math/tex; mode=display">\begin{matrix} \underbrace{\{(x_0,P(x_0)),(x_1,P(x_1)),\cdots ,(x_d,P(x_d))\}} \\ {\scriptstyle\text{Value Representation}} \end{matrix}</script><p>两者之间的关系：</p><p>$(d+1)$ points uniquely define a degree $d$ polynomial.</p><p>$e.g.$</p><script type="math/tex; mode=display">\{(-1,0),(0,1),(1,0),(2,1)\}</script><p>Corresponds to</p><script type="math/tex; mode=display">P(x)=\frac{2}{3}x^3-x^2-\frac{2}{3}x+1</script><p>$Proof.$</p><script type="math/tex; mode=display">\begin{bmatrix}P(x_0)  \\P(x_1)  \\\vdots  \\P(x_d)  \end{bmatrix}=\begin{bmatrix}1  & x_0  & x_0^2  & \cdots  & x_0^d  \\1  & x_1  & x_1^2  & \cdots  & x_1^d  \\\vdots & \vdots & \vdots & \ddots & \vdots \\1  & x_d  &x_d^2  & \cdots & x_d^d\end{bmatrix}\begin{bmatrix}p_0  \\p_1  \\\vdots  \\p_d  \end{bmatrix}</script><p>Clearly, the determinant of the matrix above is the Vandermonde determinant.</p><p>Since the chosen values of $x_i (i=0,1,2,\cdots ,d)$ are distinct from each other, the Vandermonde determinant is non-zero.</p><script type="math/tex; mode=display">\det \begin{pmatrix}\begin{bmatrix}1  & x_0  & x_0^2  & \cdots  & x_0^d  \\1  & x_1  & x_1^2  & \cdots  & x_1^d  \\\vdots & \vdots & \vdots & \ddots & \vdots \\1  & x_d  &x_d^2  & \cdots & x_d^d\end{bmatrix}\end{pmatrix}=\prod_{0\leqslant j<i\leqslant d}(x_i-x_j)\neq 0</script><p>Therefore, the matrix is invertible, and the equation has a unique solution.</p><p>Hence, a bijection is established between the value representation and the coefficient representation of the polynomial through this matrix. $(d+1)$ points uniquely define a degree $d$ polynomial.</p><p>■</p><p>有了两个多项式的 value representation ，就可以很容易地计算出这两个多项式的乘积的 value representation.</p><p>整个过程的大致思路如下：</p><p><img src="https://bu.dusays.com/2023/06/06/647ef11d64daf.jpg" alt="41-1.jpg"></p><p>首先考虑 Coeff 到 Value 的转换。</p><p>我们尝试计算 n-1 次多项式 $P(x)$ 在</p><script type="math/tex; mode=display">x=\pm x_1,\pm x_2,\cdots ,\pm x_{n/2}</script><p>处的值，寻找能减少计算量的思路。</p><p>将 $P(x)$ 按项的次数奇偶分类：</p><script type="math/tex; mode=display">P(x)=P_e(x^2)+xP_o(x^2)</script><p>得到 $P_e(x)$ 和 $P_o(x)$ . 于是：</p><script type="math/tex; mode=display">P(\pm a)=P_e(a^2)\pm aP_o(a^2)</script><p>于是问题转化为求 $P_e(x)$ 和 $P_o(x)$ 在 $a^2$ 处的值，这个过程似乎可以递归地进行。而且这两个多项式的次数比原来下降了一半。看起来很 nice .</p><p>而问题是，进入第二层递归时，我们的采样点就不是相反数对了。递归失败。</p><p>以上尝试给出了有益的思路，接下来为了制造相反数对，考虑将数域拓展到复数。</p><p>在下图中，任一节点的值的平方等于父节点的值：</p><p><img src="https://bu.dusays.com/2023/06/06/647efb554cffa.png" alt="41-2.png"></p><p>满足我们想要的性质。注意这里为方便原理展示对采样点数目 $n$ 作了限制：$n=2^k,k\in \mathbb{N}$ . 同时这也是对多项式次数的限制。</p><p>依据在前置知识中的结论，单位根在复平面中如下所示：</p><p><img src="https://bu.dusays.com/2023/06/06/647efeaed5e9e.png" alt="41-3.png"></p><p>并且，由相关性质，可以得到相反数对：</p><p><img src="https://bu.dusays.com/2023/06/06/647effba57508.png" alt="41-4.png"></p><script type="math/tex; mode=display">\omega ^{j+n/2}=-\omega ^j</script><p>下面总结一下算法的流程。</p><p>为求出 n-1 次多项式 $P(x)$ 的 value representation ，需要计算其在</p><script type="math/tex; mode=display">x=\omega ^0,\omega ^1,\cdots ,\omega ^{n-1} \quad | \quad \omega =e^{\frac{2\pi i}{n}}</script><p>处的值。为了减少计算量，将 $P(x)$ 按项的次数奇偶分类：</p><script type="math/tex; mode=display">P(x)=P_e(x^2)+xP_o(x^2)</script><p>由是发现需要求解 $P_e(x)$ 和 $P_o(x)$ 在</p><script type="math/tex; mode=display">\omega ^0,\omega ^2,\omega ^4, \cdots ,\omega ^{n-2}</script><p>处的值。这个过程可以递归地完成。</p><blockquote><p>注意这里就是原视频蛊惑人心的地方，UP主在记法上的不严谨可能会导致理解上的困难。$P_e(x)$ 和 $P_o(x)$ 是将公式 $P(x)=P_e(x^2)+xP_o(x^2)$ 右侧的多项式 $P_e(x^2)$ 和 $P_o(x^2)$ 看作 $x^2$ 的函数用 $x$ 改写得到的。</p></blockquote><p>假设递归成功，就得到了 $P_e(x)$ 和 $P_o(x)$ 的 value representation . 记数组（从 0 开始编号）：</p><script type="math/tex; mode=display">y_e[...]=[P_e(\omega ^0),P_e(\omega ^2),\cdots ,P_e(\omega ^{n-2})]</script><script type="math/tex; mode=display">y_o[...]=[P_o(\omega ^0),P_o(\omega ^2),\cdots ,P_o(\omega ^{n-2})]</script><p>现在要做的是，由此得到原来的多项式的 value representation .</p><p>在上面得到的公式</p><script type="math/tex; mode=display">P(\pm a)=P_e(a^2)\pm aP_o(a^2)</script><p>中，令 $a=\omega ^j$ 得：</p><script type="math/tex; mode=display">P(\pm \omega ^j)=P_e(\omega ^{2j})\pm \omega ^jP_o(\omega ^{2j})</script><p>再由 $\omega ^{j+n/2}=-\omega ^j$ 得：</p><script type="math/tex; mode=display">P(\omega ^j)=P_e(\omega ^{2j})+ \omega ^jP_o(\omega ^{2j})</script><script type="math/tex; mode=display">P(\omega ^{j+n/2})=P_e(\omega ^{2j})- \omega ^jP_o(\omega ^{2j})</script><script type="math/tex; mode=display">j\in \{0,1,\cdots ,\frac{n}{2}-1 \}</script><p>又因为</p><script type="math/tex; mode=display">y_e[j]=P_e(\omega ^{2j})</script><script type="math/tex; mode=display">y_o[j]=P_o(\omega ^{2j})</script><p>于是</p><script type="math/tex; mode=display">P(\omega ^j)=y_e[j]+ \omega ^jy_o[j]</script><script type="math/tex; mode=display">P(\omega ^{j+n/2})=y_e[j]- \omega ^jy_o[j]</script><script type="math/tex; mode=display">j\in \{0,1,\cdots ,\frac{n}{2}-1 \}</script><p>最后返回该层多项式的 value representation 即可。</p><p>伪代码如下：</p><p><img src="https://bu.dusays.com/2023/06/06/647f4c3a1ba34.png" alt="41-5.png"></p><p>返回看下图 41-1.jpg ，还需要完成 Value 到 Coeff 的转换。</p><p>在之前的式子中：</p><script type="math/tex; mode=display">\begin{bmatrix}P(x_0)  \\P(x_1)  \\\vdots  \\P(x_{n-1})  \end{bmatrix}=\begin{bmatrix}1  & x_0  & x_0^2  & \cdots  & x_0^{n-1}  \\1  & x_1  & x_1^2  & \cdots  & x_1^{n-1}  \\\vdots & \vdots & \vdots & \ddots & \vdots \\1  & x_{n-1}  &x_{n-1}^2  & \cdots & x_{n-1}^{n-1}\end{bmatrix}\begin{bmatrix}p_0  \\p_1  \\\vdots  \\p_{n-1}  \end{bmatrix}</script><p>令 $x_k=\omega ^k\quad \mathrm{where}\quad \omega =e^{\frac{2\pi i}{n}}$</p><script type="math/tex; mode=display">\begin{bmatrix}P(\omega ^0)  \\P(\omega ^1)  \\P(\omega ^2)  \\\vdots  \\P(\omega ^{n-1})  \end{bmatrix}=\begin{bmatrix}1  & 1  & 1  & \cdots  & 1  \\1  & \omega  & \omega ^2  & \cdots  & \omega ^{n-1}  \\1  & \omega ^2  & \omega ^4  & \cdots  & \omega ^{2(n-1)}  \\\vdots & \vdots & \vdots & \ddots & \vdots \\1  & \omega ^{n-1}  & \omega ^{2(n-1)}  & \cdots & \omega ^{(n-1)(n-1)}\end{bmatrix}\begin{bmatrix}p_0  \\p_1  \\p_2  \\\vdots  \\p_{n-1}  \end{bmatrix}</script><p>上式中的矩阵被称为 <strong>Discrete Fourier Transform (DFT) matrix</strong></p><script type="math/tex; mode=display">\begin{bmatrix}p_0  \\p_1  \\p_2  \\\vdots  \\p_{n-1}  \end{bmatrix}=\begin{bmatrix}1  & 1  & 1  & \cdots  & 1  \\1  & \omega  & \omega ^2  & \cdots  & \omega ^{n-1}  \\1  & \omega ^2  & \omega ^4  & \cdots  & \omega ^{2(n-1)}  \\\vdots & \vdots & \vdots & \ddots & \vdots \\1  & \omega ^{n-1}  & \omega ^{2(n-1)}  & \cdots & \omega ^{(n-1)(n-1)}\end{bmatrix}^{-1}\begin{bmatrix}P(\omega ^0)  \\P(\omega ^1)  \\P(\omega ^2)  \\\vdots  \\P(\omega ^{n-1})  \end{bmatrix}</script><p>求出矩阵的逆：</p><script type="math/tex; mode=display">\begin{bmatrix}p_0  \\p_1  \\p_2  \\\vdots  \\p_{n-1}  \end{bmatrix}=\frac{1}{n}\begin{bmatrix}1  & 1  & 1  & \cdots  & 1  \\1  & \omega ^{-1} & \omega ^{-2}  & \cdots  & \omega ^{-(n-1)}  \\1  & \omega ^{-2}  & \omega ^{-4}  & \cdots  & \omega ^{-2(n-1)}  \\\vdots & \vdots & \vdots & \ddots & \vdots \\1  & \omega ^{-(n-1)}  & \omega ^{-2(n-1)}  & \cdots & \omega ^{-(n-1)(n-1)}\end{bmatrix}\begin{bmatrix}P(\omega ^0)  \\P(\omega ^1)  \\P(\omega ^2)  \\\vdots  \\P(\omega ^{n-1})  \end{bmatrix}</script><p>这个时候简直是 amazing 啊，上面这个矩阵和之前的那个矩阵形式几乎一样，那么我们在代码上只需要少量改动。</p><p>Every $\omega$ in original matrix is now $\frac{1}{n}\omega ^{-1}$ .</p><p>伪代码：</p><p><img src="https://bu.dusays.com/2023/06/07/647ff63a072b2.png" alt="41-6.png"></p><p>至此已分析完算法的原理部分。</p><hr><p><a id="bib1" href="#bib1ref"><sup>[1]</sup></a> 参考自<a href="https://zh.wikipedia.org/zh-cn/%E5%8D%95%E4%BD%8D%E6%A0%B9">维基百科 - 单位根</a> （已备份）</p><p><a id="bib2" href="#bib2ref"><sup>[2]</sup></a> 相关推导见 <a href="https://loveofpeach.github.io/posts/1b45ac71.html">SeriesNote</a> 函数的幂级数展开式的应用</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暂为今日所作</title>
      <link href="/posts/4c71d97e.html"/>
      <url>/posts/4c71d97e.html</url>
      
        <content type="html"><![CDATA[<p>去年期末封校那阵子，有一类人的心态特别有意思。</p><p>概括下学校的情况。学校每天covid新增比全市数据多一截，每天排队捅喉咙，三餐配送蔬菜炖肉沫，越往后越不新鲜，一股怪味。学生只能呆在自己的宿舍楼层，没有澡洗。某老师还一拍脑门，把厕所的地漏堵了，厕所里的具体情况就不细说了。彼时供暖公司又歇了菜，贴在暖气片上暖手都够呛，冬夜里只有蚊子与人作伴。</p><p>然而，在这种连释迦牟尼都无法释然的环境里，竟还是有人愿意苦中作乐，声称自己占了学校便宜：每天的饭钱。</p><p>有这么一种经典的桥段：一位德高望重的老师傅，手下一队弟子。某天一弟子犯了个小错误，这师傅暴跳如雷，当着众人的面，给这位倒霉蛋来了一下子。弟子赶忙认错：师傅打的有理，这事确是弟子的不是。</p><p>我常想，就算那弟子确实有过，但若是无心之举，也没有造成严重后果，就至于挨这一巴掌吗？而更奇怪的是，为什么弟子要说师傅打的有理呢？一方面他要表现出一个认错的态度，希望暂消了师傅的火气。另一方面，这话也是说给其他弟子和他自己听的。如果在众人面前假装自己的判断是错在自己、师傅占理，自己挨打就是应该的，那么面子就保住了。因为如果他不这么说，就等同于认为师傅的做法是过火的、野蛮的，但可惜自己又不能拿师傅怎么样，就只能给大伙留下一个弱小无力的形象。</p><p>假装认同、假装满意，然后面子保住了，不是吗？</p><p>学校配的菜又不要我们钱，今天还有个油鸡腿呢。</p><p>每天白吃白住，出了学校哪找去。</p><p>但匪夷所思的是，解封之后酒吧舞的又恰恰是这群人。</p><p>那个向师傅赔不是的人或许更加精明，但同时也丢掉了一些重要的东西。</p>]]></content>
      
      
      <categories>
          
          <category> 闲文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诡辩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Perlin Noise</title>
      <link href="/posts/c70d4622.html"/>
      <url>/posts/c70d4622.html</url>
      
        <content type="html"><![CDATA[<p>柏林噪声算法常用于程序生成随机内容，在游戏、电影等领域应用广泛。</p><p>本文的目标是使用 Python 生成如下的图像，由这个图像出发可以实现很多效果<a href="#bib1" id="bib1ref"><sup>[1]</sup></a>。</p><p><img src="https://bu.dusays.com/2023/05/28/64730c66b04a8.jpg" alt="39-1.jpg" title="16*16个晶格，每个晶格25*25像素"></p><p>虽然柏林噪声算法有一个改进版本<a href="#bib2" id="bib2ref"><sup>[2]</sup></a>，但本文仍是基于旧原理的实现。</p><p>很多时候，我们并不是想要这样的随机：</p><p><img src="https://bu.dusays.com/2023/05/28/647319bcc890f.png" alt="39-2.png"></p><p>我们需要更平滑的随机，就像本文第一张图片那样。</p><p>39-1.jpg（第一张图片）是一张灰度图，可以将其每个像素的灰度值映射为数值，用二维坐标索引，就得到一个三维的曲面（如果你愿意忽略它是离散的的话）。显然 39-1.jpg 就像是杂乱的水面，而 39-2.png 就是钉床了（虽然由于钉子非常密集躺上去应该还不至于当场去世）。</p><p>Perlin 的做法是：</p><p>在网格上生成图片，每个小格子称为“晶格”。首先，在格点上生成一个随机的梯度向量。对于晶格内的点，作由四个晶格格点到自身的向量，这些向量与对应的四个梯度向量作点积，得到格点上的四个数值，那么对于此晶格内的点，噪声值就是这四个数值的双线性插值<a href="#bib3" id="bib3ref"><sup>[3]</sup></a>。此外，你可能需要一个 $fade$ 函数使图像更平滑。</p><p>But wait … , why it even works ?</p><p>一个可能的解释：</p><p><img src="https://bu.dusays.com/2023/06/29/649d117929aee.webp" alt="39-2dot5.webp"></p><p>对此我也不是很清楚。虽然这大致和梯度的几何意义有关（想象一下那个三维曲面），但是还是有一些细节不能理解。等以后搞明白了再说。</p><p>OK，原理介绍完了，缝一个简陋的代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_gradient_field</span>(<span class="params">m, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    np.random.rand()是NumPy库中的一个函数</span></span><br><span class="line"><span class="string">    用于生成一个具有指定维度的随机数数组</span></span><br><span class="line"><span class="string">    此例中会生成一个形状为(m, n, 2)的三维数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    gradient_field = np.random.rand(m, n, <span class="number">2</span>)*<span class="number">2</span>-<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> gradient_field</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfade</span>(<span class="params">x</span>)-&gt;<span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> x*x*x*(x*(x*<span class="number">6</span>-<span class="number">15</span>)+<span class="number">10</span>)  <span class="comment"># 可能是自作多情的优化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lerp</span>(<span class="params">t, fa, fb</span>):  <span class="comment"># 线性插值</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>-t) * fa + t * fb</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">single_point_noise</span>(<span class="params">x, y, dx, dy, gradient_field</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    x, y 为晶格编号</span></span><br><span class="line"><span class="string">    dx, dy 相对坐标</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    x0 = <span class="built_in">int</span>(x)  <span class="comment"># 梯度向量编号</span></span><br><span class="line">    y0 = <span class="built_in">int</span>(y)</span><br><span class="line">    x1 = x0 + <span class="number">1</span></span><br><span class="line">    y1 = y0 + <span class="number">1</span>  <span class="comment"># 笛卡尔坐标系的坐标记法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算格点处的噪声值</span></span><br><span class="line">    gradient00 = np.dot(gradient_field[y0, x0], [dx, dy])</span><br><span class="line">    gradient01 = np.dot(gradient_field[y1, x0], [dx, dy - <span class="number">1</span>])</span><br><span class="line">    gradient10 = np.dot(gradient_field[y0, x1], [dx - <span class="number">1</span>, dy])</span><br><span class="line">    gradient11 = np.dot(gradient_field[y1, x1], [dx - <span class="number">1</span>, dy - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    u = myfade(dx)</span><br><span class="line">    v = myfade(dy)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 双线性插值</span></span><br><span class="line">    x_interpolation = lerp(u, gradient00, gradient10)</span><br><span class="line">    y_interpolation = lerp(u, gradient01, gradient11)</span><br><span class="line">    noise_value = lerp(v, x_interpolation, y_interpolation)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> noise_value</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill_block</span>(<span class="params">x, y</span>):  <span class="comment"># 需要离散化处理</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, l+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, l+<span class="number">1</span>):</span><br><span class="line">            mymap[y*l+j][x*l+i] = single_point_noise(x, y, (i-<span class="number">0.5</span>)/l, (j-<span class="number">0.5</span>)/l, ggf)</span><br><span class="line"></span><br><span class="line">x=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;输入晶格横向个数：&quot;</span>))</span><br><span class="line">y=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;输入晶格纵向个数：&quot;</span>))</span><br><span class="line">l=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;输入每个晶格的像素数(l*l): &quot;</span>))</span><br><span class="line">mymap = np.zeros([y*l+<span class="number">5</span>, x*l+<span class="number">5</span>], dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"><span class="comment"># 边界冗余5像素防止数组越界</span></span><br><span class="line"></span><br><span class="line">ggf = generate_gradient_field(x+<span class="number">2</span>, y+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">        fill_block(i, j)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出时去除冗余像素</span></span><br><span class="line">imageio.imwrite(<span class="string">&quot;D:\mypycode\perlinnoise\\testpic1.jpg&quot;</span>, mymap[:y*l, :x*l])</span><br></pre></td></tr></table></figure><p>再放一张输出结果：</p><p><img src="https://bu.dusays.com/2023/05/28/64732691a958c.jpg" alt="39-3.jpg" title="20*20晶格，每个晶格32*32像素"></p><p>顺带一提，这种噪音图会引起博主的轻微不适，原因不明。</p><p>我们假设，图片一共被划分为 $x\cdot y$ 个晶格，横向 $x$ 个，纵向 $y$ 个。每个晶格是 $l\cdot l$ 像素的正方形。</p><p>向量场格点从 $0$ 开始编号，横：$0,1,2,\cdots ,x$ ；纵：$0,1,2,\cdots ,y$ .</p><p>晶格从 $0$ 开始编号，$(0,0),(0,1),\cdots ,(0,x-1);\cdots$</p><p>对于每个晶格，处理过程是类似的：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">        fill_block(i, j)</span><br></pre></td></tr></table></figure><p>每个晶格里面，需要填充每个像素的噪声值。如何计算这个噪声值，上文已经提过。</p><p>其中，<code>single_point_noise</code>函数是在连续意义下的单位正方形中计算点的噪声值，而在生成图片时，却是离散的像素点。这里我直接简单粗暴地使用像素点的几何中心坐标，传值到<code>single_point_noise</code>函数中。另外，由于是单位正方形，所以值要除以 $l$ .</p><p>在此基础上，有一个简单的拓展：如果在时间维度上插值，就可以制作出三维的情形，或是动态变化的二维柏林噪声——这两者是一回事。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_gradient_field</span>(<span class="params">m, n, p</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    np.random.rand()是NumPy库中的一个函数</span></span><br><span class="line"><span class="string">    用于生成一个具有指定维度的随机数数组</span></span><br><span class="line"><span class="string">    此例中会生成一个形状为(m, n, p, 3)的四维数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    gradient_field = np.random.rand(m, n, p, <span class="number">3</span>)*<span class="number">2</span>-<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> gradient_field</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfade</span>(<span class="params">x</span>)-&gt;<span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> x*x*x*(x*(x*<span class="number">6</span>-<span class="number">15</span>)+<span class="number">10</span>)  <span class="comment"># 可能是画蛇添足的优化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lerp</span>(<span class="params">t, fa, fb</span>):  <span class="comment"># 线性插值</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>-t) * fa + t * fb</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">single_point_noise</span>(<span class="params">x, y, t, dx, dy, dt, gradient_field</span>):</span><br><span class="line">    x0 = <span class="built_in">int</span>(x)  <span class="comment"># 梯度向量编号</span></span><br><span class="line">    y0 = <span class="built_in">int</span>(y)</span><br><span class="line">    t0 = <span class="built_in">int</span>(t)</span><br><span class="line">    x1 = x0 + <span class="number">1</span></span><br><span class="line">    y1 = y0 + <span class="number">1</span>  <span class="comment"># 笛卡尔坐标系的坐标记法</span></span><br><span class="line">    t1 = t0 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算格点处的噪声值</span></span><br><span class="line">    gradient000 = np.dot(gradient_field[y0, x0, t0], [dx, dy, dt])</span><br><span class="line">    gradient010 = np.dot(gradient_field[y1, x0, t0], [dx, dy-<span class="number">1</span>, dt])</span><br><span class="line">    gradient100 = np.dot(gradient_field[y0, x1, t0], [dx-<span class="number">1</span>, dy, dt])</span><br><span class="line">    gradient110 = np.dot(gradient_field[y1, x1, t0], [dx-<span class="number">1</span>, dy -<span class="number">1</span>, dt])</span><br><span class="line">    gradient001 = np.dot(gradient_field[y0, x0, t1], [dx, dy, dt-<span class="number">1</span>])</span><br><span class="line">    gradient011 = np.dot(gradient_field[y1, x0, t1], [dx, dy-<span class="number">1</span>, dt-<span class="number">1</span>])</span><br><span class="line">    gradient101 = np.dot(gradient_field[y0, x1, t1], [dx-<span class="number">1</span>, dy, dt-<span class="number">1</span>])</span><br><span class="line">    gradient111 = np.dot(gradient_field[y1, x1, t1], [dx-<span class="number">1</span>, dy -<span class="number">1</span>, dt-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    u = myfade(dx)</span><br><span class="line">    v = myfade(dy)</span><br><span class="line">    w = myfade(dt)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 三线性插值</span></span><br><span class="line">    x_interpolation0 = lerp(u, gradient000, gradient100)</span><br><span class="line">    y_interpolation0 = lerp(u, gradient010, gradient110)</span><br><span class="line">    noise_value0 = lerp(v, x_interpolation0, y_interpolation0)</span><br><span class="line">    x_interpolation1 = lerp(u, gradient001, gradient101)</span><br><span class="line">    y_interpolation1 = lerp(u, gradient011, gradient111)</span><br><span class="line">    noise_value1 = lerp(v, x_interpolation1, y_interpolation1)</span><br><span class="line">    noise_value = lerp(w, noise_value0, noise_value1)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> noise_value</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill_block</span>(<span class="params">x, y, t</span>):  <span class="comment"># 需要离散化处理</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, l+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, l+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, l+<span class="number">1</span>):</span><br><span class="line">                mymap[y*l+j][x*l+i][t*l+k] = single_point_noise(x, y, t, (i-<span class="number">0.5</span>)/l, (j-<span class="number">0.5</span>)/l, (k-<span class="number">0.5</span>)/l, ggf)</span><br><span class="line"></span><br><span class="line">x=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;输入晶格横向个数：&quot;</span>))</span><br><span class="line">y=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;输入晶格纵向个数：&quot;</span>))</span><br><span class="line">t=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;输入时间晶格个数：&quot;</span>))</span><br><span class="line">l=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;输入每个晶格的像素数(l*l): &quot;</span>))</span><br><span class="line">mymap = np.zeros([y*l+<span class="number">5</span>, x*l+<span class="number">5</span>, t*l+<span class="number">5</span>], dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"><span class="comment"># 边界冗余5像素防止数组越界</span></span><br><span class="line"></span><br><span class="line">ggf = generate_gradient_field(x+<span class="number">2</span>, y+<span class="number">2</span>, t+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">            fill_block(i, j, k)</span><br><span class="line"></span><br><span class="line">output_folder = <span class="string">&quot;D:\mypycode\perlinnoise\\timeaxis\\&quot;</span>  <span class="comment"># 输出文件夹的路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t*l+<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># 提取灰度图像</span></span><br><span class="line">    gray_image = mymap[:, :, t]</span><br><span class="line">    gray_image = gray_image[:y*l, :x*l]  <span class="comment"># 去除冗余像素</span></span><br><span class="line"></span><br><span class="line">    output_path = <span class="string">f&quot;<span class="subst">&#123;output_folder&#125;</span>gray_image_<span class="subst">&#123;t&#125;</span>.png&quot;</span>  <span class="comment"># 输出文件的路径和文件名</span></span><br><span class="line">    imageio.imwrite(output_path, gray_image)</span><br></pre></td></tr></table></figure><p>将得到的图片转为 GIF（博客中的 PythonNote 有提），最终输出结果如下：</p><p><img src="https://bu.dusays.com/2023/05/29/64743480920d5.gif" alt="39-4.gif"></p><p>这个动图看起来动静似乎不明显，这是因为设置了t=1 ，过大的话计算量太大。将 t 再稍微放大点，gif 的时间间隔缩短点，效果就会好很多。</p><p>在拓展维度时，代码的编写很大程度上是出于对某种统一形式的信仰——这代码就该这么写，而不需要考察其细节。在编写代码的时候，我甚至没有查找三线性插值是如何进行的。</p><p>最后的 tip : 上面代码的输出文件名可能不太好，因为在合成 gif 时，顺序可能是按严格的字典序排的。我是最后手动修改了文件名，反正也不多，就没有改代码了，因为很讨厌处理字符串。</p><p><img src="https://bu.dusays.com/2023/05/29/647436d5ddf7d.png" alt="39-5.png"></p><p>记录一下最近看的感觉不错的电影，因为实在没必要开个新文章写这些：壳中少女、末代皇帝。另外在看我推，目前看着还行。</p><hr><p><a id="bib1" href="#bib1ref"><sup>[1]</sup></a> <a href="https://www.youtube.com/watch?v=sChQCdbLdHE&amp;ab_channel=SimonDev">The Absurd Usefulness of Noise in Game Development</a></p><p><a id="bib2" href="#bib2ref"><sup>[2]</sup></a> <a href="https://mrl.cs.nyu.edu/~perlin/paper445.pdf">Ken Perlin’s SIGGRAPH 2002 paper: Improving Noise</a> （已备份）</p><p><a id="bib3" href="#bib3ref"><sup>[3]</sup></a> <a href="https://zh.wikipedia.org/wiki/%E5%8F%8C%E7%BA%BF%E6%80%A7%E6%8F%92%E5%80%BC">维基百科 双线性插值</a> （已备份）</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 柏林噪声 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双曲线讲义</title>
      <link href="/posts/db1a1b2e.html"/>
      <url>/posts/db1a1b2e.html</url>
      
        <content type="html"><![CDATA[<p>最近有在沉迷新游戏啦，是吼游verse的《斯鞑瑞幺》哦！超治愈的银河喜剧耶拜托！</p><p><img src="https://bu.dusays.com/2023/05/13/645fa78c0aeca.jpg" alt="38-1.jpg" title="纯·简·拉基兹德"></p><p>最赞的 BGM 就是《喧哗》啦。（由于一些问题导致手机端无法显示播放器）</p><html><center><head>    <meta charset="utf-8">    <title></title></head><body>    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="https://music.163.com/outchain/player?type=2&id=2045807071&auto=0&height=66"></iframe></body></center></html><p>说回正题，最近在试着做初中数学的讲义，因为领域外的妹妹要中考忽然问我相关的问题。</p><iframe frameBorder="0" width="100%" height="100%" style="min-width: 300px; min-height:500px" src="https://www.mathcha.io/editor/Bwv9YhBDtnquWrvdy6fvVwJ4qteWdo11F2m1O1o?embedded=true" ></iframe><p>不得不说 mathcha 真好用，还能保存为 pdf 备份。</p><p><img src="https://bu.dusays.com/2023/05/15/6462452d88125.gif" alt="gougouss.gif"></p><p>要准备答辩了，枯 /(ㄒoㄒ)/~~</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 初中数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minecraft with Python</title>
      <link href="/posts/2afe57ff.html"/>
      <url>/posts/2afe57ff.html</url>
      
        <content type="html"><![CDATA[<p>使用 Python 游玩我的世界。</p><p>参考资料来源：各种网络资料和《零基础学 Minecraft 编程》，人民邮电出版社。</p><p><img src="https://bu.dusays.com/2023/04/24/6446a33de7053.png" alt="37-0.png" title="图书的两位作者"></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>环境配置教程：<a href="https://www.bilibili.com/video/BV1FG4y1X7SQ">https://www.bilibili.com/video/BV1FG4y1X7SQ</a></p><p>注意在安装 java -jar BuildTools.jar 的时候会打印一大大大坨信息，整个过程大约6分钟，需要梯子。出现如下信息则表示成功：</p><p><img src="https://bu.dusays.com/2023/04/22/6443b4148bdaa.png" alt="37-1.png"></p><p>启动服务器：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:\mcserver</span><br><span class="line">java <span class="literal">-Xms1024M</span> <span class="literal">-Xmx1024M</span> <span class="literal">-jar</span> spigot<span class="literal">-1</span>.<span class="number">19.4</span>.jar</span><br></pre></td></tr></table></figure><p>多人游戏，服务器地址<code>127.0.0.1</code>。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">op username   <span class="comment"># 给权限</span></span><br></pre></td></tr></table></figure><p>这个时候就可以使用作弊码了。作弊码附在文章末尾。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hellofrompy.py</span></span><br><span class="line"><span class="keyword">from</span> mcpi.minecraft <span class="keyword">import</span> Minecraft</span><br><span class="line"><span class="keyword">import</span> mcpi.block <span class="keyword">as</span> block</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;连接MC...&#x27;</span>)</span><br><span class="line">    mc = Minecraft.create()</span><br><span class="line"></span><br><span class="line">    mc.postToChat(<span class="string">&quot;hello frome Python&quot;</span>)</span><br><span class="line">    x, y, z = mc.player.getTilePos()</span><br><span class="line">    <span class="built_in">print</span>(x, y, z)</span><br><span class="line">    mc.setBlocks(x, y, z+<span class="number">5</span>, x, y, z+<span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="生成方块"><a href="#生成方块" class="headerlink" title="生成方块"></a>生成方块</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?aid=805023718&bvid=BV1sy4y157nH&cid=395365414&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><script type="math/tex; mode=display">{\scriptstyle\text{摧毁和放置方块教程}}</script><p>Minecraft 坐标信息：</p><ul><li>正东：x轴正方向</li><li>正南：z轴正方向</li><li>正上：y轴正方向</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 16blocks.py</span></span><br><span class="line"><span class="keyword">from</span> mcpi.minecraft <span class="keyword">import</span> Minecraft</span><br><span class="line"><span class="keyword">import</span> mcpi.block <span class="keyword">as</span> block</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 连接到 MC</span></span><br><span class="line">    mc = Minecraft.create()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 得到角色当前位置</span></span><br><span class="line">    x, y, z = mc.player.getTilePos()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 羊毛</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        mc.setBlock(x+<span class="number">3</span>, y, z+i, <span class="number">35</span>, i)</span><br><span class="line">        <span class="comment"># 35是羊毛的代号，0是白色</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>) <span class="comment"># 加个延时以演示</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://bu.dusays.com/2023/04/22/6443b414ed5ce.png" alt="37-2.png"></p><p>采用更多层循环以生成平面和立体。</p><p>多个方块同时放置的函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mc.setBlocks(x1, y1, z1, x2, y2, z2, blockid, someindex)</span><br></pre></td></tr></table></figure><p><code>(x1, y1, z1)</code>和<code>(x2, y2, z2)</code>对应一个长方体的两个对角顶点。根据这两个顶点我们可以绘制出一个由指定方块组成的长方体。</p><p>想要一个空心的？缩小一圈用<code>air</code>方块填充。</p><h2 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h2><p>实时显示玩家的位置：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># showpos.py</span></span><br><span class="line"><span class="keyword">from</span> mcpi.minecraft <span class="keyword">import</span> Minecraft</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">mc = Minecraft.create()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    pos = mc.player.getTilePos()</span><br><span class="line">    mc.postToChat(<span class="string">&quot;x=&quot;</span>+<span class="built_in">str</span>(pos.x)+<span class="string">&quot; y=&quot;</span>+<span class="built_in">str</span>(pos.y)+<span class="string">&quot; z=&quot;</span>+<span class="built_in">str</span>(pos.z))</span><br></pre></td></tr></table></figure><p>注意：若坐标错误，需输入<code>/setworldspawn 0 0 0</code>。</p><p>玩家进入某一区域，超过3秒弹出：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bump2sky.py</span></span><br><span class="line"><span class="keyword">from</span> mcpi.minecraft <span class="keyword">import</span> Minecraft</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">x1 = <span class="number">60</span>   <span class="comment"># y = 80</span></span><br><span class="line">x2 = <span class="number">63</span></span><br><span class="line">z1 = -<span class="number">17</span></span><br><span class="line">z2 = -<span class="number">15</span></span><br><span class="line">infield = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bump2sky</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        y += <span class="number">0.90</span>*t</span><br><span class="line">        mc.player.setPos(x+<span class="number">5</span>, y, z)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">mc = Minecraft.create()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    pos = mc.player.getTilePos()</span><br><span class="line">    <span class="keyword">if</span> pos.x&gt;=x1 <span class="keyword">and</span> pos.x&lt;=x2 <span class="keyword">and</span> pos.z&gt;=z1 <span class="keyword">and</span> pos.z&lt;=z2:</span><br><span class="line">        mc.postToChat(<span class="string">&quot;warnning&quot;</span>)</span><br><span class="line">        infield += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        infield = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> infield &gt; <span class="number">3</span>:</span><br><span class="line">        mc.postToChat(<span class="string">&quot;too slow!&quot;</span>)</span><br><span class="line">        bump2sky(pos.x, pos.y, pos.z)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://bu.dusays.com/2023/04/22/6443ec0d959ae.gif" alt="37-3.gif"></p><h2 id="绘制任意图像"><a href="#绘制任意图像" class="headerlink" title="绘制任意图像"></a>绘制任意图像</h2><p>知道了如何生成方块，就知道了如何绘制任意图像。</p><p><img src="https://bu.dusays.com/2023/04/27/644a0c520dc14.png" alt="37-4.png"></p><p>对于一张图片，如果我们能根据每一个像素点的 RGB 值找到对应颜色的 Minecraft 方块，就有可能在游戏中绘制该图像。</p><p>然而，并不是所有颜色都可以找到对应的 Minecraft 方块。对于找不到的颜色，我们希望有一个替代颜色，这个颜色应当在人眼视觉上相近。</p><p>为此，我们需要一个寻找相近颜色的算法。</p><p>已经知道，颜色可用 RGB 表示，是否相近的 RGB 值表示的颜色在视觉上相似呢？答案是否定的。但可喜可贺，还是有以 RGB 值计算颜色距离的公式（具体参考<a href="https://www.compuphase.com/cmetric.htm">此链接（该内容已备份）</a>）：</p><script type="math/tex; mode=display">\bar{r}=\frac{C_{1,R}+C_{2,R}}{2}</script><script type="math/tex; mode=display">\Delta R=C_{1,R}-C_{2,R}</script><script type="math/tex; mode=display">\Delta G=C_{1,G}-C_{2,G}</script><script type="math/tex; mode=display">\Delta B=C_{1,B}-C_{2,B}</script><script type="math/tex; mode=display">\Delta C=\sqrt{(2+\frac{\bar{r}}{256})\times \Delta R^{2}+4\Delta G^2+(2+\frac{255-\bar{r}}{256})\times \Delta B^2}</script><p>可以根据以上公式编写代码计算两个颜色的距离。不过，我们采用另一种更好的方案。</p><blockquote><p>CIEDE2000算法是CIE（国际照明委员会）于2000年提出的，它是Delta E算法的改进版本。CIEDE2000算法考虑了人眼感知颜色的非线性特性，并将颜色差异分解为亮度、色相和饱和度三个因素，从而更准确地计算颜色之间的相似度。CIEDE2000算法还考虑了颜色对比度的影响，因此在低对比度颜色之间的比较中表现更好。</p></blockquote><p>这个算法已经封装好了，安装 colormath 库：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install colormath</span><br></pre></td></tr></table></figure><p>使用此库需要初步了解颜色空间，并大致知道一些函数接受什么，返回什么，做了什么。</p><blockquote><p>「动态类型一时爽，代码重构火葬场。」</p></blockquote><p>colormath 官方文档：</p><ul><li><a href="https://python-colormath.readthedocs.io/en/latest/delta_e.html">https://python-colormath.readthedocs.io/en/latest/delta_e.html</a></li></ul><p>注意，如果提示：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: module <span class="string">&#x27;numpy&#x27;</span> has no attribute <span class="string">&#x27;asscalar&#x27;</span>. Did you mean: <span class="string">&#x27;isscalar&#x27;</span>? </span><br></pre></td></tr></table></figure><p>这是因为：</p><ul><li>numpy的版本过高，需要降版本（高情商）</li><li>numpy你真就不考虑历史兼容呗（低情商）</li></ul><p>降版本的命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall numpy</span><br><span class="line">pip install <span class="literal">-U</span> numpy==<span class="number">1.22</span>.<span class="number">4</span></span><br></pre></td></tr></table></figure><p>OK，颜色替代的问题解决了。但我们还缺一个映射方案。我们需要将颜色编码映射到具体的 Minecraft 方块的编号上。这方面的资料找起来比较麻烦。我直接给出链接：</p><ul><li><a href="https://www.minecraftinfo.com/idlist.htm">https://www.minecraftinfo.com/idlist.htm</a></li><li><a href="https://minecraft-ids.grahamedgecombe.com/">https://minecraft-ids.grahamedgecombe.com/</a></li><li><a href="https://www.stuffaboutcode.com/p/minecraft-api-reference.html">https://www.stuffaboutcode.com/p/minecraft-api-reference.html</a></li></ul><p>以上链接只是名字到编号的映射，我们总不能用眼睛看出物品的颜色编码吧？因此需要配合颜色到名字的映射表（该内容已备份）：</p><ul><li><a href="https://glow.lanzouo.com/iAret0mc0nyh">https://glow.lanzouo.com/iAret0mc0nyh</a></li></ul><p>注意有些方块是不能用的，它可能是个半砖，可能会随重力掉落，可能会自爆（例如仙人掌，不过仙人掌另有它用，之后再说），甚至可能根本不是一个方块。为了准确性，还需要在游戏里对比，这个比对过程是痛苦的，为了让世界 no more pain，我决定贴出初步整理的映射表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">ffffff,80</span><br><span class="line">dcdcdc,35</span><br><span class="line">dcd9d3,155</span><br><span class="line">d5c98c,216</span><br><span class="line">909090,42</span><br><span class="line">faee4d,41</span><br><span class="line">b0a836,19:1</span><br><span class="line">c5c52c,19</span><br><span class="line">2c4199,35:11</span><br><span class="line">8d909e,82</span><br><span class="line">4f4f4f,1:6</span><br><span class="line">848484,35:8</span><br><span class="line">6db015,35:5</span><br><span class="line">d06d8e,35:6</span><br><span class="line">414141,35:7</span><br><span class="line">ffc125,35:4</span><br><span class="line">ba6d2c,35:1</span><br><span class="line">9941ba,35:2</span><br><span class="line">6699d8,35:3</span><br><span class="line">486c98,251:3</span><br><span class="line">416d84,35:9</span><br><span class="line">6d3699,35:10</span><br><span class="line">58412c,35:12</span><br><span class="line">586d2c,35:13</span><br><span class="line">842c2c,35:14</span><br><span class="line">151515,35:15</span><br><span class="line">4b3f26,5:5</span><br><span class="line">7b663e,25</span><br><span class="line">4fbcb7,57</span><br><span class="line">8a8adc,79</span><br><span class="line">667f33,251:13</span><br></pre></td></tr></table></figure><p>这个映射表非常粗糙，如果希望有更丰富的色彩表现，请手动修改之。</p><p>注意：一些魔改的<code>mcpi</code>版本并不需要此映射表，而可以直接使用物品名称。但是这种<code>mcpi</code>版本与本文不兼容，也不与《零基础学 Minecraft 编程》兼容。更重要的，它们主要是通过某盘传播（而不是pip安装），如果你和我一样抵制某盘，不想在上面花钱，尽量不要倒向这个版本。</p><p>下面放出完整代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://loveofpeach.github.io/posts/2afe57ff.html</span></span><br><span class="line"><span class="keyword">from</span> colormath.color_objects <span class="keyword">import</span> sRGBColor, LabColor</span><br><span class="line"><span class="keyword">from</span> colormath.color_diff <span class="keyword">import</span> delta_e_cie2000</span><br><span class="line"><span class="keyword">from</span> colormath <span class="keyword">import</span> color_conversions</span><br><span class="line"><span class="keyword">from</span> imageio <span class="keyword">import</span> imread</span><br><span class="line"><span class="keyword">from</span> mcpi.minecraft <span class="keyword">import</span> Minecraft</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rgb2hex</span>(<span class="params">red, green, blue</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回一个 HexColorString</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;:02x&#125;&#123;:02x&#125;&#123;:02x&#125;&#x27;</span>.<span class="built_in">format</span>(red, green, blue)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex2lab</span>(<span class="params">hx</span>):</span><br><span class="line">    color_srbg = sRGBColor.new_from_rgb_hex(hx)</span><br><span class="line">    color_lab = color_conversions.convert_color(color_srbg, LabColor)</span><br><span class="line">    <span class="keyword">return</span> color_lab</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">closest_color</span>(<span class="params">hexStr</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    接受一个 HexColorString</span></span><br><span class="line"><span class="string">    返回列表中与该颜色最接近的颜色</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> hexStr <span class="keyword">in</span> colorhave: <span class="keyword">return</span> colorhave[hexStr]</span><br><span class="line"></span><br><span class="line">    closest_color = <span class="literal">None</span></span><br><span class="line">    closest_distance = <span class="literal">None</span></span><br><span class="line">    labStr = hex2lab(hexStr)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> color_code, color_name <span class="keyword">in</span> colorhave.items():</span><br><span class="line">        color_c = hex2lab(color_code)</span><br><span class="line">        distance = delta_e_cie2000(labStr, color_c)</span><br><span class="line">        <span class="keyword">if</span> closest_distance <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> distance &lt; closest_distance:</span><br><span class="line">            closest_distance = distance</span><br><span class="line">            closest_color = color_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> closest_color</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wip</span>(<span class="params">r, g, b</span>):</span><br><span class="line">    s = closest_color(rgb2hex(r, g, b))</span><br><span class="line">    tmpls = []</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;:&#x27;</span> <span class="keyword">in</span> s:</span><br><span class="line">        tmpls.append(<span class="built_in">eval</span>(s.split(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>]))</span><br><span class="line">        tmpls.append(<span class="built_in">eval</span>(s.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmpls.append(<span class="built_in">eval</span>(s))</span><br><span class="line">    <span class="keyword">return</span> tmpls</span><br><span class="line"></span><br><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;D:\mypycode\mccode\colormap.txt&quot;</span>)</span><br><span class="line">ls = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    line = line.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    ls.append(line.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">fo.close()</span><br><span class="line"></span><br><span class="line">colorhave = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ls)):</span><br><span class="line">    colorhave[ls[i][<span class="number">0</span>]] = ls[i][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">im = imread(<span class="string">&#x27;D:\mypycode\imageiostuff\\rmdpic.jpg&#x27;</span>)</span><br><span class="line">h, w, _ = im.shape</span><br><span class="line"></span><br><span class="line">mc = Minecraft.create()</span><br><span class="line">x0, y0, z0 = mc.player.getTilePos()</span><br><span class="line">x0 += <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        r, g, b = im[y][x]</span><br><span class="line">        flagls = wip(r, g, b)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(flagls)==<span class="number">1</span>:</span><br><span class="line">            mc.setBlock(x0+x, y0+h-y, z0, flagls[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mc.setBlock(x0+x, y0+h-y, z0, flagls[<span class="number">0</span>], flagls[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>一个简单的优化是：把最相近颜色存储起来。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://loveofpeach.github.io/posts/2afe57ff.html</span></span><br><span class="line"><span class="keyword">from</span> colormath.color_objects <span class="keyword">import</span> sRGBColor, LabColor</span><br><span class="line"><span class="keyword">from</span> colormath.color_diff <span class="keyword">import</span> delta_e_cie2000</span><br><span class="line"><span class="keyword">from</span> colormath <span class="keyword">import</span> color_conversions</span><br><span class="line"><span class="keyword">from</span> imageio.v2 <span class="keyword">import</span> imread</span><br><span class="line"><span class="keyword">from</span> mcpi.minecraft <span class="keyword">import</span> Minecraft</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rgb2hex</span>(<span class="params">red, green, blue</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回一个 HexColorString</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;:02x&#125;&#123;:02x&#125;&#123;:02x&#125;&#x27;</span>.<span class="built_in">format</span>(red, green, blue)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex2lab</span>(<span class="params">hx</span>):</span><br><span class="line">    color_srbg = sRGBColor.new_from_rgb_hex(hx)</span><br><span class="line">    color_lab = color_conversions.convert_color(color_srbg, LabColor)</span><br><span class="line">    <span class="keyword">return</span> color_lab</span><br><span class="line"></span><br><span class="line">closestcolor = &#123;&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">closest_color</span>(<span class="params">hexStr</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    接受一个 HexColorString</span></span><br><span class="line"><span class="string">    返回列表中与该颜色最接近的颜色</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> hexStr <span class="keyword">in</span> colorhave: <span class="keyword">return</span> colorhave[hexStr]</span><br><span class="line">    <span class="keyword">if</span> hexStr <span class="keyword">in</span> closestcolor: <span class="keyword">return</span> closestcolor[hexStr]</span><br><span class="line"></span><br><span class="line">    closest_color = <span class="literal">None</span></span><br><span class="line">    closest_distance = <span class="literal">None</span></span><br><span class="line">    labStr = hex2lab(hexStr)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> color_code, color_name <span class="keyword">in</span> colorhave.items():</span><br><span class="line">        color_c = hex2lab(color_code)</span><br><span class="line">        distance = delta_e_cie2000(labStr, color_c)</span><br><span class="line">        <span class="keyword">if</span> closest_distance <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> distance &lt; closest_distance:</span><br><span class="line">            closest_distance = distance</span><br><span class="line">            closest_color = color_name</span><br><span class="line"></span><br><span class="line">    closestcolor[hexStr] = closest_color</span><br><span class="line">    <span class="keyword">return</span> closestcolor[hexStr]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wip</span>(<span class="params">r, g, b</span>):</span><br><span class="line">    s = closest_color(rgb2hex(r, g, b))</span><br><span class="line">    tmpls = []</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;:&#x27;</span> <span class="keyword">in</span> s:</span><br><span class="line">        tmpls.append(<span class="built_in">eval</span>(s.split(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>]))</span><br><span class="line">        tmpls.append(<span class="built_in">eval</span>(s.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmpls.append(<span class="built_in">eval</span>(s))</span><br><span class="line">    <span class="keyword">return</span> tmpls</span><br><span class="line"></span><br><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;D:\mypycode\mccode\colormap.txt&quot;</span>)</span><br><span class="line">ls = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    line = line.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    ls.append(line.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">fo.close()</span><br><span class="line"></span><br><span class="line">colorhave = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ls)):</span><br><span class="line">    colorhave[ls[i][<span class="number">0</span>]] = ls[i][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">im = imread(<span class="string">&#x27;D:\mypycode\imageiostuff\delisha2.jpg&#x27;</span>)</span><br><span class="line">h, w, _ = im.shape</span><br><span class="line"></span><br><span class="line">mc = Minecraft.create()</span><br><span class="line">x0, y0, z0 = mc.player.getTilePos()</span><br><span class="line">x0 += <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        r, g, b = im[y][x]</span><br><span class="line">        flagls = wip(r, g, b)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(flagls)==<span class="number">1</span>:</span><br><span class="line">            mc.setBlock(x0+x, y0+h-y, z0, flagls[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mc.setBlock(x0+x, y0+h-y, z0, flagls[<span class="number">0</span>], flagls[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>当然，更好的方案是在命令中传入要绘制的图片，而不是每次绘制都要手动修改代码。</p><p>看一下效果（图片太大了两边加载不出来）：</p><p><img src="https://bu.dusays.com/2023/04/25/6447aec98ff19.png" alt="37-5.png"></p><p>作为对比，给出原图：</p><p><img src="https://bu.dusays.com/2023/04/25/6447ba4dc9e3e.jpg" alt="37-5dot5.jpg" title="高240 宽430"></p><p>头发的细节：</p><p><img src="https://bu.dusays.com/2023/04/25/6447af2f62c6f.png" alt="37-6.png"></p><p>考虑如下生成的图片：</p><p><img src="https://bu.dusays.com/2023/04/27/644a0e6e316c1.png" alt="37-7.png"></p><p>我们希望只保留这个谜之柴犬，那么可以在数据文件中添加仙人掌的记录。因仙人掌自爆的特性，只会留下柴犬本犬：</p><p><img src="https://bu.dusays.com/2023/04/27/644a0e6e1742c.png" alt="37-8.png"></p><p>对于更大的图片，可能需要在平坦的世界绘制，或者铺在地上。对于像素更高的图片，可能需要事先压缩，或者转换为像素画形式。普通图片转换为像素画形式可以使用 Python 实现，不再赘述。</p><p><img src="https://bu.dusays.com/2023/05/31/647728ea3511b.png" alt="37-9.png" title="ΤΗΙ ΚΑΛΛΙΣΤΗΙ"></p><p>从上图可以看出，这个颜色映射表还是非常简陋的。但我没耐心再一个个地比对了。</p><h2 id="作弊码"><a href="#作弊码" class="headerlink" title="作弊码"></a>作弊码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/gamerule doDaylightCycle false  # 永久白天</span><br><span class="line">/gamemode creative               # 创造 </span><br><span class="line">/gamemode survival               # 生存</span><br><span class="line">/gamemode adventure              # 冒险</span><br><span class="line">/gamemode spectator              # 旁观</span><br><span class="line">/spawnpoint                      # 重生点设置为当前位置</span><br><span class="line">/seed                            # 种子</span><br><span class="line">/give username minecraft:diamond_ore 64      # 钻石</span><br><span class="line">/give username minecraft:emerald_block 64    # 绿宝石</span><br><span class="line">/tp username &#123;x&#125; &#123;y&#125; &#123;z&#125;                     # 传送</span><br><span class="line">/time set 0                                  # morning 6</span><br><span class="line">/time set 9500                               # noon</span><br><span class="line">/time set 12000                              # 黄昏</span><br><span class="line">/xp &#123;int&#125;                                    # 给经验</span><br><span class="line">/effect username &#123;type&#125; &#123;time&#125; &#123;level&#125;       # 给药</span><br><span class="line">/gamerule keepInventory true                 # 死亡不掉落</span><br><span class="line">/summon minecraft:zombie                     # 召唤僵尸</span><br><span class="line">/setblock &#123;x&#125; &#123;y&#125; &#123;z&#125; minecraft:redstone     # 设置红石方块</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Minecraft </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2304 - select</title>
      <link href="/posts/985e3562.html"/>
      <url>/posts/985e3562.html</url>
      
        <content type="html"><![CDATA[<p>在网上常常能遇到一些有价值的分享，不记录下来有些可惜。因此打算每个月精选一些内容，以备遗忘。文字内容可转载的会贴出来，视频则给出链接并作简要描述。</p><p>选取某内容不代表赞成其全部观点。</p><hr><p><strong>【视频】 经济机器是怎样运行的 (时长30分钟) Ray Dalio</strong></p><p>中文版 <a href="https://www.youtube.com/watch?v=rFV7wdEX-Mo">https://www.youtube.com/watch?v=rFV7wdEX-Mo</a></p><p>英文原版 <a href="https://www.youtube.com/watch?v=PHe0bXAIuk0">https://www.youtube.com/watch?v=PHe0bXAIuk0</a></p><p>短小精悍的经济学科普。</p><p>从三个因素出发，生产率的提高、短期债务周期、长期债务周期，介绍了一个经济模型。有助于了解我们在过去、当前的处境，以及未来可能的发展方向。</p><p><strong>【文本】 如何评价汤浅政明的《心理游戏》？</strong></p><p>作者：Icarus<br>链接：<a href="https://www.zhihu.com/answer/2587227017">https://www.zhihu.com/answer/2587227017</a></p><p>浅析汤浅政明-心灵游戏 我们该以什么样的姿态面对社会?</p><p>从《乒乓》开始接触汤浅政明，今天看到了他的早期作品，有感而发，若有不足，还请见谅。</p><p>心灵游戏是一部关于心理学和社会学的作品，其中夹杂了很多汤浅自己对于生命，对于生活的独到见解。</p><p>打开百科上对心灵游戏 这部汤浅早期作品的介绍，可以看到这部作品的一个引子。主人公是一个年轻的漫画家，暗恋一个女同学长达十一年之久，但因为种种原因在初中告白后虽然得到了回应，却没有后续发展，属于一个现实中很常见的，被扼杀掉的青春萌芽。后女主因混蛋老爸而被黑社会威胁强奸，男主被开枪爆菊，复活后带着女主和女主姐姐逃亡，然后……掉进了一只鲸鱼的肚子里（典型的汤浅风格，跳脱的思维，狂野的想象力，在全篇显露无疑）。</p><p>其实是掉进鲸鱼肚子里也好，其他的什么也好，最主要的是给主人公们一个密闭的环境，也渐渐地引出想要表达的主题。在遇到老爷爷后，三人饱餐了好几顿（满足食欲，基本需求）此时老爷爷告诉他们：不好意思，但是你们出不去了。三人在绝望崩溃三天后开始逐渐接受事实（人是社会性动物，所以一开始的表现也很正常），因为无需与外界交流，也逐渐展现真我（姐姐把头发剃短，后来的老爷爷涂上口红，似乎是汤浅在暗示心理性别与生理性别不同，也许并没有那么严格的界限），并且满足了性欲（汤浅在全篇有很多关于性的暗示，男主与女主是最直白的一段，女主的姐姐在玩气球时同时展现了女性（乳房）和男性（阴茎）的性征，也再次验证汤浅的思想。在这样一个与世隔绝的环境中，主角们产生了很多愉快的体验。</p><p>然而即使如此，当在面临逃出去，回归社会与留下来，愉快地享受当下并接受死亡时，以乐观的主角为首，主角们还是选择了前者。需要注意，三人在真实世界中的生活都算不上幸福，两姐妹不用说，因为混蛋老爸欠了一屁股债，还被黑社会的人追杀；男主虽然是大学生，但是也同时过着打工发传单这样的生活，并没有多少尊严。从这一点来看，三个人在马斯洛需求层次中都排在下层的位置。而对于老爷爷来说，自己因为可笑的自尊曾经选了一条错误的道路，如果真的能重新回到正常社会，那么则需要赎回自己的罪孽。就是这四个人，在面对是否能逃生并回归社会这样的考验时，迸发出了强烈的力量（奋力奔跑着逃离鲸鱼大嘴这一段，刻画的力度十分到位，给汤浅点赞）；并且在（也许只是幻想的。在结尾，画面的转变十分的迅速，每个主人公有各种不同的未来展现给观众，也正所谓一体多面，也象征着未来的不确定性。富有艺术天赋的姐姐可能会去上艺校，也许会被家里人因为没钱而拒绝；老爷爷有可能因为孤独而死，去回转寿司店工作，也有可能接受同性爱人的表白迎来第二春；放弃游泳的妹妹也许会成为一名普通的白领，也有可能会去转向马拉松运动，甚至是开始缝纫, 或是出一本料理书籍。当男主纵身一跃回归蓝天下时，这些无穷无尽的可能性出现在他的脑海里。确实，如果从来没有试着融入过这个社会，一切不好的可能都会消失，但同理，那些闪烁着的未来也同样消弭于无形了不是吗？</p><p>结尾处有这样一个看似与全篇无关的片段。一栋楼的建造过程，有设计者，实施者，与住户，每个人都是社会的一份子。我们被社会所影响，将来又注定要影响社会，哪怕是以再微弱的形式。这次我感觉自己读懂了汤浅。哪怕再卑微，心灵上受到过再多的挫折，也不能封闭自我，与世界隔离。汤浅确实是个创作的奇才。他让主角们真实地经历了一场九死一生的大冒险，然后突然领悟，豁然开朗。而又在最后的最后让女主在最后一秒踏进了车厢，黑社会没有来得及跟上来。仿佛一切都没有发生过。这才是我们大多数人生活的现状，我们很幸运又很不幸运地平凡着，没有经历过什么大风大浪。那么就在这样的情形下，我们是否还有勇气向理想进发，哪怕会遭人嘲笑？还是选择继续做一个与社会隔绝的人，没有失败，也没有成功？在我看来，这便是汤浅给我们的一局心灵游戏。</p><p><strong>【视频】 The Fast Fourier Transform (FFT): Most Ingenious Algorithm Ever?</strong></p><p><a href="https://www.youtube.com/watch?v=h7apO7q16V0">https://www.youtube.com/watch?v=h7apO7q16V0</a></p><p>一个能知其所以然的介绍 Fast Fourier Transform 的视频，相对来说易于理解。</p><p><strong>【文本】 如何评价漫画《绝望先生》？</strong></p><p>作者：Kalinka<br>链接：<a href="https://www.zhihu.com/answer/40643204">https://www.zhihu.com/answer/40643204</a></p><p>我们也许可以理解这部作品讲述的是；一位贵公子身旁经过一位女高中生，在擦肩而过时，突然女子的帽子被风吹掉了，贵公子看到了赶紧过去捡，他们的位置发生了位移，导致那位女高中生被车撞到，女高中生医治无效死亡后，身份信息下面写着器官全部捐献，看到这些的贵公子很心痛，他认为应该是自己被撞死。所以为了让良心得到安慰，找来一大帮人包括被捐助者，雇佣他们每天“上课”超度那位女高中生。七年了，每天都有一位捐献者负责扮演女高中生与他对话，直到有一段时间所有扮演者都发生了人格障碍，镜子前的她们都成了那名女高中生，那位贵公子也发现自己爱上了那位已经死去的人，他草草解散了那些顾来的人，然后跑到一个荒无人烟的小岛上尝试和其他人接触，并忘记七年里发生的一切。然而教室里也只剩下那些被捐助者，她们也爱上了这位曾经的老师，她们的每一部分都属于那位女高中生，她们决定披上婚纱奔向小岛和他结婚。</p><p>贵公子在小岛上差不多快从痛苦中解脱时，她们来了……高喊着先生，老师，穿着婚纱一起唱着那位女高中生生前喜爱的歌，他看到此情此景明白自己爱上那个人已成事实。于是他为了和她在一起选择了跳海自杀，完。</p><p>这是一部好作品，个人认为作者在表面上来戏谑讽刺当时日本社会以及亚洲地区的各种社会事件，实际上是为了掩盖人物内心的绝望。</p><p>而这也许就像现实生活中，我们平时为忘记一些不愉快的事所做的一样。三四十人坐在一间教室侃大山，就是为了忘记曾经那位援助他们的女高中生。</p><p>但从系色望的角度讲，他的性格集合了所有绝望少女的绝望特征。想死必须活，想活必须死，一切事情都是反着来，真的令人绝望透顶。当他绝望时便会出现希望，当他有希望时便会出现绝望。</p><p>从作品里看，其实可符香和变形记的人物塑造虽然有异曲同工之妙，但人物结局却又截然不同。变形记的主人公格里高尔变成了甲虫，本作女主变成了由一个人变成了十二个人（十二个人都认为自己是可符香），变形记的主人公被家人排斥，而可符香被其他人所接纳，但他们都有一个共同点就是贫穷，而且这两部作品中阐述的思想有一个共通点 ，即万恶的资本主义制度下 ，如果你没有用就会被社会遗弃，就会被身边人忽视，如果你有用那么你就会被社会接纳就会被身边人重视。</p><p>人人为自己，上帝为大家。生既为恶，死既为善。也许是这个作品的主旨吧。</p><p><strong>【文本】 如何评价新房昭之监督的动画？</strong></p><p>作者：水莲寺弥生<br>链接：<a href="https://www.zhihu.com/answer/99593520">https://www.zhihu.com/answer/99593520</a></p><p>日人评论如下：</p><blockquote><p>実写、文字だけなどの静止画のカットを多用する演出、同一スタッフ（声優含む）での作品作りなどが特徴。<br>文字カット・静止画の挿入や画面作りには、市川崑や鈴木清順ら日本映画監督からの影響が色濃く見られる。また、実相寺昭雄の演出に類似する点（斜めの画面、光のハレーション、カメラと人物の間に机などを配置するなど）が見受けられるが、本人は実相寺作品を殆ど観たことが無いという。<br>その独特の美的感覚は、大正・昭和初期の浪漫文学の末裔とも取れる。<br><a href="https://dic.pixiv.net/a/%E6%96%B0%E6%88%BF%E6%98%AD%E4%B9%8B">新房昭之 (しんぼうあきゆき)とは【ピクシブ百科事典】</a></p></blockquote><p>即新房爱用静止画、同一staff团体，受市川昆和铃木清顺影响深。其手法近乎实相寺昭雄（倾斜画面、光晕、人物与机位配置等），虽然新房本人说他几乎没看过实相寺昭雄的电影。</p><p>新房的美感被认为继承了大正与昭和初期浪漫文学的传统。不管他本人愿不愿意承认，他的美学都无法与这份日本的时代美学割裂开。不止一位老师推荐我看铃木清顺的大正浪漫三部曲《阳炎座》《梦二》《流浪者之歌》去帮助理解新房。</p><p>随便放几张铃木清顺和实相寺昭雄的电影截图给大家感受一下：</p><p><img src="https://pica.zhimg.com/78e9f03c7d141733824a5acb7db7f330_720w.jpg" alt="36-1" title="（铃木清顺《暗黑街美女》）"></p><p><img src="https://pic1.zhimg.com/a0b038ec0cedd6242f09c24d9ff81973_720w.jpg" alt="36-2"></p><p><img src="https://picx.zhimg.com/a43e6ff831c54a66e1ea14ae88079f08_720w.jpg" alt="36-3" title="（铃木《手枪歌剧》）"></p><p><img src="https://pica.zhimg.com/a4438c1467d2531dd823771a5bfe1921_720w.jpg" alt="36-4" title="（铃木《肉体之门》）"></p><p><img src="https://picx.zhimg.com/e5ee63d21953f4fdff92731186e67a4f_720w.jpg" alt="36-5" title="（实相寺昭雄《曼陀罗》）"></p><p>新房本人前后期的作品显然也存在脉络上的关系。大波老师曾经说过：「我在楼里推荐他人多看看珂赛特的肖像来帮助理解叛逆的物语，不仅仅是情死、戏中戏这些共通的日本情结，更是因为后者视觉上的种种不可解之处，乃至颓废的基调，都让人联想到十年前的新房……可以一看再看的生命力之源，就在于这种层层叠叠的形式。」</p><p>这段话非常精准地抽取出了从《珂赛特的肖像》到《叛逆的物语》中一条不断的伏线。物语系列中这条伏线亦无处不在。《花物语》中的寂寂水影、空荡剧场、无限复制的物件、少女视线若无其事的转移；《凭物语》中斧乃木余接茫然自失的漫游；《囮物語》中千石从湿漉漉液体中缓缓拈起猩红蛇莓，使你想起古老的渎神崇拜、慢慢燃烧的火，这份在迟缓中发酵的错乱感教人发狂。</p><p>视觉上艳丽的不可解、永远处于酩酊态一般的浊烂青春期、思考的无意义，最终只能落入无赖派的归化。这难道不正是昭和日本的侧影吗？大正浪漫和昭和浪漫的怀念者不能不被新房吸引，看他的动画，可能除了「层层叠叠的形式」之外什么也得不到。然而这种除形式外一切皆属虚无的体验，正是存在之实感的前提。正如相米慎二那句台词：</p><p>「死は生に先行するんだ、死は生きることの前提なんだ。」</p><p>欣赏几张魔性的千石抚子：</p><p><img src="https://picx.zhimg.com/c88f7be93377e49b3af0fdf859b68b1b_720w.jpg" alt="36-6"></p><p><img src="https://picx.zhimg.com/fe554cfd3f3ab875bb54a670418a44b2_720w.jpg" alt="36-7"></p><p><img src="https://pic1.zhimg.com/72da7f974b45a5ab92a1f3931cb98255_720w.jpg" alt="36-8"></p><p><img src="https://pica.zhimg.com/1868ceea889fd9e1e61f9579ffbb95aa_720w.jpg" alt="36-9"></p><p>【文本】 The real Mao Zedong in Lu Xun’s eyes</p><p><a href="https://u.osu.edu/mclc/2016/05/25/the-real-mao-zedong-in-lu-xuns-eyes/">https://u.osu.edu/mclc/2016/05/25/the-real-mao-zedong-in-lu-xuns-eyes/</a></p><p>一篇关于鲁迅的文章，关于他如何成为旗帜，又如何远去的故事。来自 Ohio State University 网站，毕竟国内网站应该是不太能贴这些的。</p><p>【文本】 latex 用法</p><p>含有一种特殊用法： <a href="https://zhuanlan.zhihu.com/p/578873088">https://zhuanlan.zhihu.com/p/578873088</a></p><p>较全版本： <a href="https://www.cnblogs.com/1024th/p/11623258.html">https://www.cnblogs.com/1024th/p/11623258.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acg </tag>
            
            <tag> 经济 </tag>
            
            <tag> FFT </tag>
            
            <tag> 历史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>turtle 绘制锅巴</title>
      <link href="/posts/47c25c56.html"/>
      <url>/posts/47c25c56.html</url>
      
        <content type="html"><![CDATA[<p>本来想画兰那罗的，但是太复杂了。还是锅巴好画。</p><p>调参真的痛苦。</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># guoba.py</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> tu</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guoba_ellipse</span>(<span class="params">a, b, n=<span class="number">500</span>, x=<span class="number">0</span>, y=<span class="number">0</span>, alpha=<span class="number">360</span>, sangle=<span class="number">0</span>, workangle=<span class="number">360</span>, myflag=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制椭圆</span></span><br><span class="line"><span class="string">    a:长半轴长度</span></span><br><span class="line"><span class="string">    b:短半轴长度</span></span><br><span class="line"><span class="string">    n:越大越趋近椭圆</span></span><br><span class="line"><span class="string">    x:几何中心x坐标</span></span><br><span class="line"><span class="string">    y:几何中心y坐标</span></span><br><span class="line"><span class="string">    alpha:椭圆旋转的角度</span></span><br><span class="line"><span class="string">    sangle:开始绘制点与椭圆长半轴正方向的夹角（角度）</span></span><br><span class="line"><span class="string">    workangle:绘制一部分椭圆（角度），默认为整个椭圆</span></span><br><span class="line"><span class="string">    myflag:判断是否仅需要调整画笔位置</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    alpha = (<span class="number">2</span>*math.pi/<span class="number">360</span>)*alpha  <span class="comment"># 角度制换算弧度值</span></span><br><span class="line">    sangle = (<span class="number">2</span>*math.pi/<span class="number">360</span>)*sangle</span><br><span class="line">    workangle = (<span class="number">2</span>*math.pi/<span class="number">360</span>)*workangle</span><br><span class="line">    theta = sangle</span><br><span class="line">    <span class="comment"># 参数方程，旋转的部分按旋转矩阵推导：</span></span><br><span class="line">    start_point = (a*math.cos(theta)*math.cos(alpha) - b*math.sin(theta)*math.sin(alpha) + x,</span><br><span class="line">                   a*math.cos(theta)*math.sin(alpha) + b*math.sin(theta)*math.cos(alpha) + y)</span><br><span class="line">    tu.penup()</span><br><span class="line">    tu.setpos(start_point)  <span class="comment"># 初始位置</span></span><br><span class="line">    <span class="keyword">if</span> myflag:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    tu.pendown()</span><br><span class="line">    microtheta = <span class="number">2</span> * math.pi / n  <span class="comment"># 将2pi弧度n等分</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        theta = sangle + (i+<span class="number">1</span>)*microtheta  <span class="comment"># 弧度增加</span></span><br><span class="line">        <span class="keyword">if</span> (theta-sangle) &gt; workangle:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        next_point = (a*math.cos(theta)*math.cos(alpha) - b*math.sin(theta)*math.sin(alpha) + x,</span><br><span class="line">                      a*math.cos(theta)*math.sin(alpha) + b*math.sin(theta)*math.cos(alpha) + y)</span><br><span class="line">        tu.setpos(next_point)</span><br><span class="line">    tu.penup()</span><br><span class="line"></span><br><span class="line">tu.setup(<span class="number">700</span>,<span class="number">700</span>)</span><br><span class="line">tu.speed(<span class="number">10</span>)</span><br><span class="line">tu.delay(<span class="number">0</span>)</span><br><span class="line">tu.pensize(<span class="number">25</span>)</span><br><span class="line">tu.colormode(<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">tu.pencolor((<span class="number">255</span>,<span class="number">193</span>,<span class="number">37</span>))</span><br><span class="line">tu.fillcolor((<span class="number">255</span>,<span class="number">193</span>,<span class="number">37</span>))</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">250</span>, <span class="number">210</span>, <span class="number">500</span>, <span class="number">0</span>, -<span class="number">70</span>, <span class="number">360</span>, -<span class="number">45</span>, <span class="number">270</span>) <span class="comment"># 脸</span></span><br><span class="line">tu.pendown()</span><br><span class="line">tu.setpos(<span class="number">179</span>, -<span class="number">220</span>)</span><br><span class="line">tu.end_fill()</span><br><span class="line"></span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">75</span>, <span class="number">70</span>, <span class="number">500</span>, <span class="number">160</span>, <span class="number">150</span>, -<span class="number">30</span>) <span class="comment"># 右耳朵</span></span><br><span class="line">tu.end_fill()</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">80</span>, <span class="number">77</span>, <span class="number">500</span>, -<span class="number">160</span>, <span class="number">150</span>, <span class="number">45</span>) <span class="comment"># 左耳朵</span></span><br><span class="line">tu.end_fill()</span><br><span class="line"></span><br><span class="line">tu.fillcolor((<span class="number">205</span>, <span class="number">155</span>, <span class="number">29</span>)) <span class="comment"># 画笔颜色忘换了。参数调好就别动，效果一样</span></span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">50</span>, <span class="number">45</span>, <span class="number">500</span>, <span class="number">165</span>, <span class="number">140</span>, -<span class="number">33</span>) <span class="comment"># 右耳朵内部</span></span><br><span class="line">tu.end_fill()</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">53</span>, <span class="number">47</span>, <span class="number">500</span>, -<span class="number">155</span>, <span class="number">140</span>, <span class="number">30</span>) <span class="comment"># 左耳朵内部</span></span><br><span class="line">tu.end_fill()</span><br><span class="line"></span><br><span class="line">tu.pensize(<span class="number">15</span>)</span><br><span class="line">tu.pencolor((<span class="number">238</span>, <span class="number">121</span>, <span class="number">66</span>))</span><br><span class="line">tu.fillcolor((<span class="number">238</span>, <span class="number">121</span>, <span class="number">66</span>))</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">45</span>, <span class="number">48</span>, <span class="number">500</span>, -<span class="number">165</span>, -<span class="number">45</span>, <span class="number">0</span>) <span class="comment"># 左腮红</span></span><br><span class="line">tu.end_fill()</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">30</span>, <span class="number">50</span>, <span class="number">500</span>, <span class="number">170</span>, -<span class="number">45</span>, <span class="number">15</span>) <span class="comment"># 右腮红</span></span><br><span class="line">tu.end_fill()</span><br><span class="line"></span><br><span class="line">tu.pensize(<span class="number">5</span>)</span><br><span class="line">tu.pencolor((<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment"># ------------------------ 眼  罩 ------------------------#</span></span><br><span class="line">guoba_ellipse(<span class="number">280</span>, <span class="number">185</span>, <span class="number">500</span>, -<span class="number">5</span>, <span class="number">107</span>, <span class="number">2</span>, -<span class="number">121</span>, <span class="number">62</span>, <span class="literal">True</span>)  <span class="comment">#</span></span><br><span class="line">tu.fillcolor((<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))                                   <span class="comment">#</span></span><br><span class="line">tu.begin_fill()                                           <span class="comment">#</span></span><br><span class="line">guoba_ellipse(<span class="number">280</span>, <span class="number">185</span>, <span class="number">500</span>, -<span class="number">5</span>, <span class="number">107</span>, <span class="number">2</span>, -<span class="number">121</span>, <span class="number">62</span>)        <span class="comment">#</span></span><br><span class="line">tu.seth(<span class="number">25</span>)                                               <span class="comment">#      </span></span><br><span class="line">tu.pendown()                                              <span class="comment">#</span></span><br><span class="line">tu.circle(<span class="number">55</span>, <span class="number">210</span>)                                        <span class="comment">#</span></span><br><span class="line">tu.penup()                                                <span class="comment">#</span></span><br><span class="line">tu.setpos(-<span class="number">145</span>, -<span class="number">55</span>)                                      <span class="comment">#    </span></span><br><span class="line">tu.pendown()                                              <span class="comment">#</span></span><br><span class="line">tu.seth(<span class="number">157</span>)                                              <span class="comment">#</span></span><br><span class="line">tu.circle(-<span class="number">55</span>, <span class="number">210</span>)                                       <span class="comment">#</span></span><br><span class="line">guoba_ellipse(<span class="number">120</span>, <span class="number">80</span>, <span class="number">500</span>, -<span class="number">5</span>, <span class="number">95</span>, -<span class="number">1</span>, -<span class="number">135</span>, <span class="number">90</span>)         <span class="comment">#</span></span><br><span class="line">tu.end_fill()                                             <span class="comment">#</span></span><br><span class="line">tu.pendown()                                              <span class="comment">#</span></span><br><span class="line">tu.setpos(-<span class="number">145</span>, -<span class="number">55</span>)                                      <span class="comment">#</span></span><br><span class="line"><span class="comment"># ------------------------ 眼  罩 ------------------------#</span></span><br><span class="line"></span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">22</span>, <span class="number">15</span>, <span class="number">300</span>, -<span class="number">105</span>, <span class="number">105</span>, <span class="number">25</span>)  <span class="comment"># 左眉毛</span></span><br><span class="line">tu.end_fill()</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">18</span>, <span class="number">10</span>, <span class="number">300</span>, <span class="number">130</span>, <span class="number">100</span>, -<span class="number">36</span>)  <span class="comment"># 右眉毛</span></span><br><span class="line">tu.end_fill()</span><br><span class="line"></span><br><span class="line">tu.pencolor((<span class="number">255</span>, <span class="number">255</span>, <span class="number">224</span>))</span><br><span class="line">tu.fillcolor((<span class="number">255</span>, <span class="number">255</span>, <span class="number">224</span>))</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">80</span>, <span class="number">45</span>, <span class="number">500</span>, -<span class="number">5</span>, <span class="number">65</span>) <span class="comment"># 额头白色部分</span></span><br><span class="line">tu.end_fill()</span><br><span class="line">tu.pencolor((<span class="number">255</span>,<span class="number">193</span>,<span class="number">37</span>))</span><br><span class="line">tu.fillcolor((<span class="number">255</span>,<span class="number">193</span>,<span class="number">37</span>))</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">50</span>, <span class="number">31</span>, <span class="number">400</span>, -<span class="number">5</span>, <span class="number">50</span>) <span class="comment"># 额头黄色部分</span></span><br><span class="line">tu.end_fill()</span><br><span class="line"></span><br><span class="line">tu.pencolor((<span class="number">255</span>, <span class="number">250</span>, <span class="number">250</span>))</span><br><span class="line">tu.fillcolor((<span class="number">255</span>, <span class="number">250</span>, <span class="number">250</span>))</span><br><span class="line">guoba_ellipse(<span class="number">21</span>, <span class="number">35</span>, <span class="number">400</span>, -<span class="number">115</span>, -<span class="number">8</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">360</span>, <span class="literal">True</span>)</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">21</span>, <span class="number">35</span>, <span class="number">400</span>, -<span class="number">115</span>, -<span class="number">8</span>, <span class="number">7</span>) <span class="comment"># 左眼白</span></span><br><span class="line">tu.end_fill()</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">20</span>, <span class="number">33.5</span>, <span class="number">500</span>, <span class="number">120</span>, <span class="number">0</span>, <span class="number">4</span>)  <span class="comment"># 右眼白</span></span><br><span class="line">tu.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------- 胡 子 --------------------------#</span></span><br><span class="line">tu.pencolor((<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))                              <span class="comment">#</span></span><br><span class="line">tu.fillcolor((<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))                             <span class="comment">#</span></span><br><span class="line">tu.begin_fill()                                           <span class="comment">#</span></span><br><span class="line">guoba_ellipse(<span class="number">85</span>, <span class="number">20</span>, <span class="number">500</span>, <span class="number">5</span>, -<span class="number">60</span>, <span class="number">0</span>)                     <span class="comment">#</span></span><br><span class="line">tu.end_fill()                                             <span class="comment">#</span></span><br><span class="line">guoba_ellipse(<span class="number">85</span>, <span class="number">20</span>, <span class="number">500</span>, <span class="number">5</span>, -<span class="number">60</span>, <span class="number">0</span>, <span class="number">140</span>, <span class="number">360</span>, <span class="literal">True</span>)     <span class="comment">#</span></span><br><span class="line">tu.seth(-<span class="number">170</span>)                                             <span class="comment">#</span></span><br><span class="line">tu.begin_fill()                                           <span class="comment">#</span></span><br><span class="line">tu.circle(<span class="number">60</span>)                                             <span class="comment">#</span></span><br><span class="line">tu.end_fill()                                             <span class="comment">#</span></span><br><span class="line">guoba_ellipse(<span class="number">85</span>, <span class="number">20</span>, <span class="number">500</span>, <span class="number">5</span>, -<span class="number">60</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">360</span>, <span class="literal">True</span>)      <span class="comment">#</span></span><br><span class="line">tu.seth(-<span class="number">10</span>)                                              <span class="comment">#</span></span><br><span class="line">tu.begin_fill()                                           <span class="comment">#</span></span><br><span class="line">tu.circle(-<span class="number">60</span>)                                            <span class="comment">#</span></span><br><span class="line">tu.end_fill()                                             <span class="comment">#</span></span><br><span class="line">tu.penup()                                                <span class="comment">#</span></span><br><span class="line"><span class="comment"># ----------------------- 胡 子 --------------------------#</span></span><br><span class="line"></span><br><span class="line">tu.pencolor((<span class="number">255</span>, <span class="number">160</span>, <span class="number">122</span>))</span><br><span class="line">tu.fillcolor((<span class="number">255</span>, <span class="number">160</span>, <span class="number">122</span>))</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">80</span>, <span class="number">50</span>, <span class="number">500</span>, <span class="number">4</span>, -<span class="number">37</span>, -<span class="number">8</span>, -<span class="number">120</span>, <span class="number">35</span>)  <span class="comment">#鼻子</span></span><br><span class="line">guoba_ellipse(<span class="number">80</span>, <span class="number">50</span>, <span class="number">500</span>, <span class="number">13</span>, -<span class="number">31</span>, <span class="number">30</span>, -<span class="number">115</span>, <span class="number">30</span>)</span><br><span class="line">tu.pendown()</span><br><span class="line">tu.setpos(-<span class="number">39.5</span>, -<span class="number">73</span>)</span><br><span class="line">tu.end_fill()</span><br><span class="line"></span><br><span class="line">tu.pencolor((<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">tu.pensize(<span class="number">2</span>)</span><br><span class="line">guoba_ellipse(<span class="number">4.2</span>, <span class="number">7</span>, <span class="number">400</span>, -<span class="number">115</span>, -<span class="number">8</span>, <span class="number">7</span>) <span class="comment"># 左眼珠</span></span><br><span class="line">guoba_ellipse(<span class="number">4</span>, <span class="number">6.7</span>, <span class="number">500</span>, <span class="number">120</span>, <span class="number">0</span>, <span class="number">4</span>)   <span class="comment"># 右眼珠</span></span><br><span class="line">tu.penup()</span><br><span class="line">tu.setpos(<span class="number">690</span>,<span class="number">690</span>)</span><br><span class="line">tu.done()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> turtle </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PythonNote</title>
      <link href="/posts/7b6f8cd.html"/>
      <url>/posts/7b6f8cd.html</url>
      
        <content type="html"><![CDATA[<p>使用<code>Ctrl</code>+<code>f</code>输入“实例”以搜索样例代码。</p><h2 id="Python-课程概述"><a href="#Python-课程概述" class="headerlink" title="Python 课程概述"></a>Python 课程概述</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例：hello world</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;hello, world&quot;</span>)</span><br><span class="line">hello, world</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=<span class="built_in">input</span>(<span class="string">&#x27;input your name: &#x27;</span>)</span><br><span class="line"><span class="built_in">input</span> your name: ldq</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(name,<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">ldq hello world</span><br></pre></td></tr></table></figure><p><strong>print() - python 内置函数</strong></p><ul><li><code>dir(_builtins_)</code></li><li><code>len(dir(_builtins_))</code></li><li><code>help(print)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(<span class="built_in">print</span>)</span><br><span class="line">Help on built-<span class="keyword">in</span> function <span class="built_in">print</span> <span class="keyword">in</span> module builtins:</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(...)</span><br><span class="line">    <span class="built_in">print</span>(value, ..., sep=<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;\n&#x27;</span>, file=sys.stdout, flush=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    Prints the values to a stream, <span class="keyword">or</span> to sys.stdout by default.</span><br><span class="line">    <span class="type">Optional</span> keyword arguments:</span><br><span class="line">    file:  a file-like <span class="built_in">object</span> (stream); defaults to the current sys.stdout.</span><br><span class="line">    sep:   string inserted between values, default a space.</span><br><span class="line">    end:   string appended after the last value, default a newline.</span><br><span class="line">    flush: whether to forcibly flush the stream.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/03/08/6407ef0e37efa.png" alt="34-1.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(<span class="built_in">input</span>)</span><br><span class="line">Help on built-<span class="keyword">in</span> function <span class="built_in">input</span> <span class="keyword">in</span> module builtins:</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>(prompt=<span class="literal">None</span>, /)</span><br><span class="line">    Read a string <span class="keyword">from</span> standard <span class="built_in">input</span>.  The trailing newline <span class="keyword">is</span> stripped.</span><br><span class="line"></span><br><span class="line">    The prompt string, <span class="keyword">if</span> given, <span class="keyword">is</span> printed to standard output without a</span><br><span class="line">    trailing newline before reading <span class="built_in">input</span>.</span><br><span class="line"></span><br><span class="line">    If the user hits EOF (*nix: Ctrl-D, Windows: Ctrl-Z+Return), <span class="keyword">raise</span> EOFError.</span><br><span class="line">    On *nix systems, readline <span class="keyword">is</span> used <span class="keyword">if</span> available.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Python-基本语法元素"><a href="#Python-基本语法元素" class="headerlink" title="Python 基本语法元素"></a>Python 基本语法元素</h2><p>交互式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r=<span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>area=<span class="number">3.1415</span>*r*r</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(r,area)</span><br><span class="line"><span class="number">25</span> <span class="number">1963.4375000000002</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;r=%2d,area=%.2f&quot;</span>%(r,area))</span><br><span class="line">r=<span class="number">25</span>,area=<span class="number">1963.44</span></span><br></pre></td></tr></table></figure><p>文件式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例：圆面积的计算</span></span><br><span class="line">r = <span class="number">25</span></span><br><span class="line">area = <span class="number">3.1415</span> * r * r</span><br><span class="line"><span class="built_in">print</span>(r,area)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r=&quot;</span>,r,<span class="string">&quot;area=&quot;</span>,area)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r=%2d,area=%.2f&quot;</span>%(r,area))</span><br></pre></td></tr></table></figure><p>保存为文件并运行，输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">25</span> <span class="number">1963.4375000000002</span></span><br><span class="line">r= <span class="number">25</span> area= <span class="number">1963.4375000000002</span></span><br><span class="line">r=<span class="number">25</span>,area=<span class="number">1963.44</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/03/08/6407f373bbc6a.png" alt="34-2.png"></p><p><strong>import math</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">r = <span class="number">25</span></span><br><span class="line">area = math.pi * r * r</span><br><span class="line"><span class="built_in">print</span>(r,area)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r=&quot;</span>,r,<span class="string">&quot;area=&quot;</span>,area)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r=%2d,area=%.2f&quot;</span>%(r,area))</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">25</span> <span class="number">1963.4954084936207</span></span><br><span class="line">r= <span class="number">25</span> area= <span class="number">1963.4954084936207</span></span><br><span class="line">r=<span class="number">25</span>,area=<span class="number">1963.50</span></span><br></pre></td></tr></table></figure><p><code>import</code>：python 保留字，引用函数库</p><p><code>math</code>：python 中内置的标准库</p><ul><li><code>math.pi</code> $\quad$ 常量值</li><li><code>math.pow(x,y)</code> $\quad$ 返回 x 的 y 次幂</li><li><code>math.sqrt(x)</code> $\quad$ 求 x 的平方根</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例：同切圆绘制</span></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.pensize(<span class="number">2</span>)</span><br><span class="line">turtle.circle(<span class="number">10</span>)</span><br><span class="line">turtle.circle(<span class="number">40</span>)</span><br><span class="line">turtle.circle(<span class="number">80</span>)</span><br><span class="line">turtle.circle(<span class="number">160</span>)</span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> pensize </span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> circle</span><br><span class="line">pensize(<span class="number">2</span>)</span><br><span class="line">circle(<span class="number">10</span>)</span><br><span class="line">circle(<span class="number">40</span>)</span><br><span class="line">circle(<span class="number">80</span>)</span><br><span class="line">circle(<span class="number">160</span>)</span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/03/08/640832a82b715.png" alt="34-3.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例：温度转换</span></span><br><span class="line"><span class="comment"># 这是一条性感的注释</span></span><br><span class="line">TempStr = <span class="built_in">input</span>(<span class="string">&quot;请输入带有符号的温度值：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> TempStr[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]:</span><br><span class="line">    C = (<span class="built_in">eval</span>(TempStr[<span class="number">0</span>:-<span class="number">1</span>])-<span class="number">32</span>)/<span class="number">1.8</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;转换后的温度是&#123;:.2f&#125;C&quot;</span>.<span class="built_in">format</span>(C))</span><br><span class="line"><span class="keyword">elif</span> TempStr[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]:</span><br><span class="line">    F = <span class="number">1.8</span>*<span class="built_in">eval</span>(TempStr[<span class="number">0</span>:-<span class="number">1</span>])+<span class="number">32</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;转换后的温度是&#123;:.2f&#125;F&quot;</span>.<span class="built_in">format</span>(F))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入格式错误&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多</span></span><br><span class="line"><span class="string">    行</span></span><br><span class="line"><span class="string">        注</span></span><br><span class="line"><span class="string">            释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>在 python 中，缩进是语法的一部分，缩进不正确程序运行错误。<strong>长度一致：</strong> 程序内一致即可，一般用 4 个空格或 1 个<code>TAB</code>。</p><p>变量的命名：</p><p><img src="https://bu.dusays.com/2023/03/10/640adc07a10af.png" alt="34-4.png"></p><p><img src="https://bu.dusays.com/2023/03/10/640add42a0744.png" alt="34-5.png"></p><p>数据类型：</p><ul><li>整数类型：<code>10011101</code></li><li>字符串类型：<code>&quot;10,011,101&quot;</code></li><li>列表类型：<code>[10, 011, 101]</code></li></ul><p>字符串，由0个或多个字符组成的有序字符序列：</p><ul><li>字符串由一对单引号或一对双引号或一对三引号表示<ul><li><code>&quot;请输入带有符号的温度值: &quot;</code>或者   <code>&#39;C&#39;</code>或者<code>&#39;&#39;&#39;C&#39;&#39;&#39;</code>（<a href="https://blog.csdn.net/woainishifu/article/details/76105667">？详见该内容（网页内容已备份）</a>，另外，虽然三个单引号可以用于表示多行字符串和多行注释，但它们不会相互干扰或冲突。）</li></ul></li><li>字符串是字符的有序序列，可以对其中的字符进行索引<ul><li><code>&quot;请&quot;</code>是<code>&quot;请输入带有符号的温度值: &quot;</code>的第0个字符（这个中文字符串暂且存疑）</li></ul></li></ul><p><img src="https://bu.dusays.com/2023/03/10/640ae1191ede7.png" alt="34-6.png"></p><p><img src="https://bu.dusays.com/2023/03/10/640ae1da7d012.png" alt="34-7.png" title="左闭右开，谢谢"></p><script type="math/tex; mode=display">examples</script><p>提取最后N个字符：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>letter = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letter[-<span class="number">3</span>:]</span><br><span class="line"><span class="string">&#x27;xyz&#x27;</span></span><br></pre></td></tr></table></figure><p>从开头到结尾，step为N：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>letter[::<span class="number">5</span>]</span><br><span class="line"><span class="string">&#x27;afkpuz&#x27;</span></span><br></pre></td></tr></table></figure></p><p>将字符串倒转(reverse)， 通过设置步长为负数：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>letter[::-<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;zyxwvutsrqponmlkjihgfedcba&#x27;</span></span><br></pre></td></tr></table></figure></p><p>列表类型，由 0 个或多个数据组成的有序序列：</p><ul><li>列表使用<code>[]</code>表示，采用<code>,</code>分隔各元素<ul><li><code>[&#39;F&#39;,&#39;f&#39;]</code>表示两个元素<code>&#39;F&#39;</code>和<code>&#39;f&#39;</code></li></ul></li><li>使用保留字<code>in</code>判断一个元素是否在列表中<ul><li><code>TempStr[-1] in [&#39;C&#39;,&#39;c&#39;]</code>判断前者是否与列表中某个元素相同</li></ul></li></ul><p><code>eval()</code>，去掉参数最外侧引号并执行余下语句的函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;x = <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>( <span class="string">&#x27;3 * x&#x27;</span> )</span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;pow(2,2)&#x27;</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;2 + 2&#x27;</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n=<span class="number">81</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&quot;n + 4&quot;</span>)</span><br><span class="line"><span class="number">85</span></span><br></pre></td></tr></table></figure><p>一些其他的例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;&quot;1+2&quot;&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;1+2&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;print(&quot;hello&quot;)&#x27;</span>)</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p><code>r = eval(input(&quot;input r=&quot;))</code>，如果键盘输入数值<code>5</code>，x 值是<strong>数字</strong><code>5</code>。</p><p><code>print()</code>中格式化输出：字符串的<code>format()</code>方法</p><h2 id="Python-基本图形绘制"><a href="#Python-基本图形绘制" class="headerlink" title="Python 基本图形绘制"></a>Python 基本图形绘制</h2><p>turtle 库是 python 语言的标准库之一。</p><p><img src="https://bu.dusays.com/2023/03/16/641278e679ff7.png" alt="34-8.png"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.goto(<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">turtle.goto(<span class="number">100</span>,-<span class="number">100</span>)</span><br><span class="line">turtle.goto(-<span class="number">100</span>,-<span class="number">100</span>)</span><br><span class="line">turtle.goto(-<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">turtle.goto(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/03/16/64127bcf5dbbf.png" alt="34-9.png" title="上面代码的结果及在结果上的注释"></p><p><img src="https://bu.dusays.com/2023/03/16/641283e87235a.png" alt="34-10.png"></p><p><img src="https://bu.dusays.com/2023/03/16/6412872ade8a5.png" alt="34-11.png" title="角度坐标体系"></p><p><img src="https://bu.dusays.com/2023/03/16/6412877ca20c7.png" alt="34-12.png"></p><p>色彩模式：</p><p><img src="https://bu.dusays.com/2023/03/16/641288e5c6f50.png" alt="34-13.png"></p><p><img src="https://bu.dusays.com/2023/03/16/64128d50b787f.png" alt="34-14.png"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例：蟒蛇绘制</span></span><br><span class="line"><span class="comment"># PythonDraw.py</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> tu</span><br><span class="line">tu.setup(<span class="number">650</span>,<span class="number">350</span>,<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line">tu.penup()</span><br><span class="line">tu.fd(-<span class="number">250</span>)</span><br><span class="line">tu.pendown()</span><br><span class="line">tu.pensize(<span class="number">25</span>)</span><br><span class="line">tu.seth(-<span class="number">40</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    tu.pencolor(<span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">    tu.circle(<span class="number">40</span>,<span class="number">80</span>)</span><br><span class="line">    tu.pencolor(<span class="string">&quot;gold&quot;</span>)</span><br><span class="line">    tu.circle(-<span class="number">40</span>,<span class="number">80</span>)</span><br><span class="line">tu.circle(<span class="number">40</span>,<span class="number">80</span>/<span class="number">2</span>)</span><br><span class="line">tu.fd(<span class="number">40</span>)</span><br><span class="line">tu.circle(<span class="number">32</span>,<span class="number">180</span>)</span><br><span class="line">tu.fd(<span class="number">40</span>*<span class="number">2</span>/<span class="number">3</span>)</span><br><span class="line">tu.done()</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/03/16/6412b0c9cad96.png" alt="34-15.png"></p><p>画笔控制函数：</p><ul><li><code>turtle.penup()</code>，别名<code>turtle.pu()</code><ul><li>抬起画笔，海龟在飞行</li></ul></li><li><code>turtle.pendown()</code>，别名<code>turtle.pd()</code><ul><li>落下画笔，海龟在爬行</li></ul></li><li>画笔操作后一直有效，一般成对出现。</li><li><code>turtle.pensize(width)</code>，别名<code>turtle.width(width)</code><ul><li>画笔宽度，海龟的腰围</li></ul></li><li><code>turtle.pencolor(color)</code>，<code>color</code>为颜色字符串或 rgb 值<ul><li>画笔颜色，海龟在涂装</li></ul></li><li>画笔设置后一直有效，直到下次重新设置</li></ul><p><img src="https://bu.dusays.com/2023/03/16/6412b42be072b.png" alt="34-16.png" title="fd()和circle()"></p><p><img src="https://bu.dusays.com/2023/03/16/6412b521db5fe.png" alt="34-17.png" title="seth(angle)和left(angle)、right(angle)"></p><p><img src="https://bu.dusays.com/2023/03/16/6412b654e6734.png" alt="34-18.png" title="range()：左闭右开，万岁"></p><p>循环语句：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello: &quot;</span>,i)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    运行结果：</span></span><br><span class="line"><span class="string">hello:  0</span></span><br><span class="line"><span class="string">hello:  1</span></span><br><span class="line"><span class="string">hello:  2</span></span><br><span class="line"><span class="string">hello:  3</span></span><br><span class="line"><span class="string">hello:  4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p><img src="https://bu.dusays.com/2023/03/23/641c24293c847.png" alt="34-19.png" title="不同进制的表示形式"></p><p>浮点数取值范围和小数精度存在限制，但常规计算可忽略。取值范围数量级约为$-10^{307}$~$10^{308}$，精度数量级$10^{-16}$ .</p><p>浮点数运算存在不确定尾数，不是 bug：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0.1</span>+<span class="number">0.3</span></span><br><span class="line"><span class="number">0.4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0.1</span>+<span class="number">0.2</span></span><br><span class="line"><span class="number">0.30000000000000004</span></span><br></pre></td></tr></table></figure><p>这是因为二进制表示小数，有时可以无限接近，但不完全相同。</p><p><code>round(x,d)</code>：对 x 四舍五入，d 是小数截取位数。不确定尾数一般发生在$10^{-16}$左右，<code>round()</code>十分有效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0.1</span>+<span class="number">0.2</span>==<span class="number">0.3</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">round</span>(<span class="number">0.1</span>+<span class="number">0.2</span>,<span class="number">1</span>)==<span class="number">0.3</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>科学计数法和 C++ 类似。</p><p>复数类型：<code>z.real</code>获得实部，<code>z.imag</code>获得虚部。</p><p>Python中的<code>x/y</code>带有小数部分。Python中的<code>x//y</code>，效果同 C++ 中的<code>x/y</code>。</p><p><code>x ** y</code>幂运算，$x^y$，其中$y$可以是小数。</p><p><img src="https://bu.dusays.com/2023/03/23/641c5827cec07.png" alt="34-20.png" title="各种函数"></p><p>查看类型、判断是否类型一致：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="number">3</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="number">3.3</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;float&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>((<span class="number">3</span>,))</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>([<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="number">3</span>,<span class="built_in">int</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="number">3.5</span>,<span class="built_in">int</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="built_in">list</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>比较运算符与 C++ 一致。</p><p>逻辑运算：<code>and</code>，<code>or</code>，<code>not</code> .</p><p><code>math</code>库 4 个数学常数：</p><ul><li><code>math.pi</code>，圆周率</li><li><code>math.e</code>，自然对数</li><li><code>math.inf</code>，正无穷大。负无穷大记为<code>-math.inf</code></li><li><code>math.nan</code>，非浮点数标记，NaN（Not a Number）</li></ul><p><img src="https://bu.dusays.com/2023/03/23/641c5d7da1e91.png" alt="34-21.png" title="16个数值表示函数"></p><p><img src="https://bu.dusays.com/2023/03/23/641c5d7d9f266.png" alt="34-22.png" title="8个幂对数函数 &amp; pow()的区别"></p><p><img src="https://bu.dusays.com/2023/03/23/641c5e88e9e1c.png" alt="34-23.png" title="16个三角函数"></p><p><img src="https://bu.dusays.com/2023/03/23/641c5f07d7dd3.png" alt="34-24.png" title="4个特殊高等函数"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例：自适应simpson</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>)-&gt;<span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> math.<span class="built_in">pow</span>(<span class="number">1</span>+<span class="number">1</span>/x, x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simpson</span>(<span class="params">l,r</span>)-&gt;<span class="built_in">float</span>:</span><br><span class="line">    mid = (l+r)/<span class="number">2.0</span></span><br><span class="line">    <span class="keyword">return</span> (f(l)+<span class="number">4</span>*f(mid)+f(r))/<span class="number">6.0</span>*(r-l)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">asr</span>(<span class="params">l, r, eps, S, cnt</span>)-&gt;<span class="built_in">float</span>:</span><br><span class="line">    mid =(l+r)/<span class="number">2.0</span></span><br><span class="line">    s1 = simpson(l, mid)</span><br><span class="line">    s2 = simpson(mid, r)</span><br><span class="line">    <span class="keyword">if</span> (math.fabs(s1+s2-S)&lt;=<span class="number">15</span>*eps <span class="keyword">and</span> cnt&lt;=<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> s1+s2+(s1+s2-S)/<span class="number">15.0</span></span><br><span class="line">    <span class="keyword">return</span> asr(l, mid, eps/<span class="number">2</span>, s1, cnt-<span class="number">1</span>) + asr(mid, r, eps/<span class="number">2</span>, s2, cnt-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">l, r, eps</span>)-&gt;<span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> asr(l, r, eps, simpson(l,r), <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">x = (<span class="built_in">float</span>)(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">format</span>(calc(<span class="number">0.0000000000001</span>, x, <span class="number">1e-8</span>),<span class="string">&#x27;.8f&#x27;</span>))</span><br></pre></td></tr></table></figure><p>字符串操作符：</p><ul><li><code>x + y</code>，连接两个字符串 x 和 y</li><li><code>n * x</code>或<code>x * n</code>，复制 n 次字符串 x</li><li><code>x in S</code>，如果 x 是 S 的子串，返回<code>True</code></li></ul><p><img src="https://bu.dusays.com/2023/03/23/641c60cd3198c.png" alt="34-25.png" title="字符串处理函数"></p><p>Python 字符串中每个字符都是 Unicode 编码字符。</p><p><img src="https://bu.dusays.com/2023/03/23/641c61aa723f4.png" alt="34-26.png" title="Unicode例子"></p><p>字符串处理方法：</p><ul><li>“方法”在编程中是一个专有名词</li><li>“方法”特指<code>&lt;a&gt;.&lt;b&gt;()</code>风格中的函数<code>&lt;b&gt;()</code></li><li>方法本身也是函数，但与<code>&lt;a&gt;</code>有关，<code>&lt;a&gt;.&lt;b&gt;()</code>风格使用</li><li>字符串或字符串变量是<code>&lt;a&gt;</code>，存在一些可用方法</li></ul><p><img src="https://bu.dusays.com/2023/03/23/641c6322b990e.png" alt="34-27.png"></p><p><img src="https://bu.dusays.com/2023/03/23/641c6322c0616.png" alt="34-28.png"></p><p>输入 3 个数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">b = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">C = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">a,b,C = <span class="built_in">eval</span>(<span class="built_in">input</span>()) <span class="comment"># 输入：3,4,5</span></span><br><span class="line">a,b,C = <span class="built_in">map</span>(<span class="built_in">eval</span>, <span class="built_in">input</span>().split()) <span class="comment"># 输入：3 4 5</span></span><br></pre></td></tr></table></figure><p><code>map(func, *iterables)</code>：上网查。</p><p><img src="https://bu.dusays.com/2023/03/23/641c65ea5fd9a.png" alt="34-29.png"></p><p><code>format()</code>方法：更多用法请上网查。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;ldq&#x27;</span></span><br><span class="line">age = <span class="number">24</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我叫%s，今年%d岁&#x27;</span> % (name, age))</span><br><span class="line"><span class="comment"># 输出：我叫ldq，今年24岁</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我叫&#123;0&#125;，今年&#123;1&#125;岁&#x27;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"><span class="comment"># 输出：我叫ldq，今年24岁</span></span><br></pre></td></tr></table></figure><h2 id="程序的控制结构"><a href="#程序的控制结构" class="headerlink" title="程序的控制结构"></a>程序的控制结构</h2><p>异常处理：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例1</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数：&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(num**<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入不是整数&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例2</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数：&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(num**<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span> NameError:  <span class="comment"># 标注异常类型后，仅响应此类异常</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入不是整数&quot;</span>)</span><br></pre></td></tr></table></figure><p>异常处理的高级使用：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># &lt;语句块1&gt;</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="comment"># &lt;语句块2&gt;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># &lt;语句块3&gt;     # 不发生异常时会执行</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># &lt;语句块4&gt;     # 一定执行</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/03/29/6424312971850.png" alt="34-30.png" title="实例：计算 BMI"></p><p>循环结构：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello:&quot;</span>,i)</span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line">hello: <span class="number">1</span></span><br><span class="line">hello: <span class="number">3</span></span><br><span class="line">hello: <span class="number">5</span></span><br></pre></td></tr></table></figure><p>字符串遍历循环：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&quot;Python123&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(c, end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line">P,y,t,h,o,n,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br></pre></td></tr></table></figure><p>列表遍历循环：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> [<span class="number">123</span>, <span class="string">&quot;PY&quot;</span>, <span class="number">456</span>]:</span><br><span class="line">    <span class="built_in">print</span>(item, end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line"><span class="number">123</span>,PY,<span class="number">456</span>,</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/03/29/642434baa3f28.png" alt="34-31.png" title="文件遍历循环"></p><p><img src="https://bu.dusays.com/2023/03/29/64243601ae2cd.png" alt="34-32.png" title="循环与 else"></p><p>使用<code>random</code>库： <code>import random</code></p><p>基本随机数函数：<code>seed()</code>、<code>random()</code></p><p>扩展随机数函数：<code>randint()</code>、<code>getrandbits()</code>、<code>uniform()</code>、<code>randrange()</code>、<code>choice()</code>、<code>shuffle()</code></p><p><img src="https://bu.dusays.com/2023/03/29/64243a6c24b2b.png" alt="34-33.png"></p><p><img src="https://bu.dusays.com/2023/03/29/64243a6c24b6f.png" alt="34-34.png"></p><p><img src="https://bu.dusays.com/2023/03/29/64243a2b5bea7.png" alt="34-35.png"></p><p><img src="https://bu.dusays.com/2023/03/29/64243b250ffba.png" alt="34-36.png" title="蒙特卡罗计算 pi"></p><h2 id="函数和代码复用"><a href="#函数和代码复用" class="headerlink" title="函数和代码复用"></a>函数和代码复用</h2><p>可变参数传递：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fact</span>(<span class="params">n, *b</span>):</span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        s *= i</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> b:</span><br><span class="line">        s *= item</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>函数调用时，参数可以按照位置或名称方式传递。（歪门邪道，少用）</p><p><img src="https://bu.dusays.com/2023/03/30/642557ee7c259.png" alt="34-37.png" title="多个返回值"></p><p><img src="https://bu.dusays.com/2023/03/30/642558d11ca32.png" alt="34-38.png" title="global 保留字"></p><p><img src="https://bu.dusays.com/2023/03/30/6425596a240c3.png" alt="34-39.png" title="未创建的组合数据类型的局部变量"></p><p><img src="https://bu.dusays.com/2023/03/30/64255a210481e.png" alt="34-40.png"></p><p><code>lambda</code>函数：</p><ul><li>一种匿名函数</li><li>使用<code>lambda</code>保留字定义，函数名是返回结果</li><li><code>lambda</code>函数用于定义简单的、能在一行内表示的函数</li><li>主要用作一些特定函数或方法的参数</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="keyword">lambda</span> x,y : x+y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">10</span>,<span class="number">15</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="keyword">lambda</span> : <span class="string">&quot;lambda函数&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(f())</span><br><span class="line"><span class="keyword">lambda</span>函数</span><br></pre></td></tr></table></figure><p>【实例】七段数码管绘制：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle, time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawGap</span>():   <span class="comment">#绘制数码管间隔</span></span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawLine</span>(<span class="params">draw</span>):   <span class="comment">#绘制单段数码管</span></span><br><span class="line">    drawGap()</span><br><span class="line">    turtle.pendown() <span class="keyword">if</span> draw <span class="keyword">else</span> turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">40</span>)</span><br><span class="line">    drawGap()</span><br><span class="line">    turtle.right(<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawDigit</span>(<span class="params">digit</span>): <span class="comment">#根据数字绘制七段数码管</span></span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    turtle.left(<span class="number">90</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    turtle.left(<span class="number">180</span>)</span><br><span class="line">    turtle.penup() <span class="comment">#为绘制后续数字确定位置</span></span><br><span class="line">    turtle.fd(<span class="number">20</span>)  <span class="comment">#为绘制后续数字确定位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawDate</span>(<span class="params">date</span>):   <span class="comment">#data为日期，格式为 &#x27;%Y-%m=%d+&#x27; </span></span><br><span class="line">    turtle.pencolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> date:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            turtle.write(<span class="string">&#x27;年&#x27;</span>,font=(<span class="string">&quot;Arial&quot;</span>, <span class="number">18</span>, <span class="string">&quot;normal&quot;</span>))</span><br><span class="line">            turtle.pencolor(<span class="string">&quot;green&quot;</span>)</span><br><span class="line">            turtle.fd(<span class="number">40</span>)</span><br><span class="line">        <span class="keyword">elif</span> i == <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">            turtle.write(<span class="string">&#x27;月&#x27;</span>,font=(<span class="string">&quot;Arial&quot;</span>, <span class="number">18</span>, <span class="string">&quot;normal&quot;</span>))</span><br><span class="line">            turtle.pencolor(<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">            turtle.fd(<span class="number">40</span>)</span><br><span class="line">        <span class="keyword">elif</span> i == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            turtle.write(<span class="string">&#x27;日&#x27;</span>,font=(<span class="string">&quot;Arial&quot;</span>, <span class="number">18</span>, <span class="string">&quot;normal&quot;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            drawDigit(<span class="built_in">eval</span>(i)) </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    turtle.speed(<span class="number">10</span>)</span><br><span class="line">    turtle.delay(<span class="number">0</span>)</span><br><span class="line">    turtle.setup(<span class="number">800</span>, <span class="number">350</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(-<span class="number">300</span>)</span><br><span class="line">    turtle.pensize(<span class="number">5</span>)</span><br><span class="line">    drawDate(time.strftime(<span class="string">&#x27;%Y-%m=%d+&#x27;</span>,time.gmtime()))</span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">    turtle.done()</span><br><span class="line"></span><br><span class="line">main() </span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://bu.dusays.com/2023/03/30/64259516bf237.png" alt="34-41.png"></p><p>【实例】修正如下的绘制奥运五环的程序，将五环绘制部分代码改为用循环实现，提示（每个圆的坐标点、颜色可以选用组合数据类型保持）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.speed(<span class="number">10</span>)</span><br><span class="line">turtle.delay(<span class="number">0</span>)</span><br><span class="line">turtle.width(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">turtle.color(<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">120</span>, <span class="number">0</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">240</span>, <span class="number">0</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">60</span>, -<span class="number">50</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">180</span>, -<span class="number">50</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">&quot;green&quot;</span>)</span><br><span class="line">turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">40</span>, -<span class="number">100</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.write(<span class="string">&quot;Beijing 2022&quot;</span>, font=(<span class="string">&quot;微软雅⿊&quot;</span>, <span class="number">20</span>, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line">turtle.hideturtle()</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><p>【解答】这里写点字只是因为不想看起来不舒服。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.speed(<span class="number">10</span>)</span><br><span class="line">turtle.delay(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">rings = [&#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;position&#x27;</span>: (<span class="number">0</span>, <span class="number">0</span>)&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;position&#x27;</span>: (<span class="number">120</span>, <span class="number">0</span>)&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;position&#x27;</span>: (<span class="number">240</span>, <span class="number">0</span>)&#125;,   </span><br><span class="line">         &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;position&#x27;</span>: (<span class="number">60</span>, -<span class="number">50</span>)&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;position&#x27;</span>: (<span class="number">180</span>, -<span class="number">50</span>)&#125;]</span><br><span class="line"></span><br><span class="line">turtle.width(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ring <span class="keyword">in</span> rings:</span><br><span class="line">    turtle.color(ring[<span class="string">&#x27;color&#x27;</span>])</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(ring[<span class="string">&#x27;position&#x27;</span>])</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">40</span>, -<span class="number">100</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.write(<span class="string">&quot;Beijing 2022&quot;</span>, font=(<span class="string">&quot;微软雅⿊&quot;</span>, <span class="number">20</span>, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line">turtle.hideturtle()</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/04/04/642c358ecfadd.png" alt="34-42.png" title="上面代码的运行结果"></p><p>【实例】修正绘制奥运五环的程序，将五环绘制部分代码改为用函数实现，提示（可以通过参数传每个圆的坐标点、颜色值）</p><p>【解答】没什么可分析的。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.speed(<span class="number">10</span>)</span><br><span class="line">turtle.delay(<span class="number">0</span>)</span><br><span class="line">turtle.width(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_circle</span>(<span class="params">x, y, color</span>):</span><br><span class="line">    turtle.color(color)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(x, y)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">draw_circle(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">draw_circle(<span class="number">120</span>, <span class="number">0</span>, <span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">draw_circle(<span class="number">240</span>, <span class="number">0</span>, <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">draw_circle(<span class="number">60</span>, -<span class="number">50</span>, <span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">draw_circle(<span class="number">180</span>, -<span class="number">50</span>, <span class="string">&#x27;green&#x27;</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">40</span>, -<span class="number">100</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.write(<span class="string">&quot;Beijing 2022&quot;</span>, font=(<span class="string">&quot;微软雅⿊&quot;</span>, <span class="number">20</span>, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line">turtle.hideturtle()</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><h2 id="组合数据类型"><a href="#组合数据类型" class="headerlink" title="组合数据类型"></a>组合数据类型</h2><p>集合类型的定义：</p><ul><li>与数学中集合的概念一致</li><li>集合元素不可更改，不能是可变数据类型</li><li>用<code>&#123;&#125;</code>表示，元素间用逗号分隔</li><li>建立集合类型用<code>&#123;&#125;</code>或<code>set()</code></li><li>建立空集合类型，必须用<code>set()</code></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>A = &#123;<span class="string">&quot;python&quot;</span>, <span class="number">123</span>, (<span class="string">&quot;python&quot;</span>,<span class="number">123</span>)&#125;  <span class="comment">#使用&#123;&#125;建立集合</span></span><br><span class="line">&#123;<span class="number">123</span>, <span class="string">&#x27;python&#x27;</span>, (<span class="string">&#x27;python&#x27;</span>, <span class="number">123</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B = <span class="built_in">set</span>(<span class="string">&quot;pypy123&quot;</span>)         <span class="comment">#使用set()建立集合</span></span><br><span class="line">&#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;y&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>C = &#123;<span class="string">&quot;python&quot;</span>, <span class="number">123</span>, <span class="string">&quot;python&quot;</span>,<span class="number">123</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;python&#x27;</span>, <span class="number">123</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/04/08/64316240ad465.png" alt="34-43.png" title="集合操作符"></p><p><img src="https://bu.dusays.com/2023/04/08/64316444c5ab4.png" alt="34-44.png" title="集合处理方法"></p><p>包含关系比较：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;p&quot;</span> <span class="keyword">in</span> &#123;<span class="string">&quot;p&quot;</span>, <span class="string">&quot;y&quot;</span> , <span class="number">123</span>&#125;</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">&quot;p&quot;</span>, <span class="string">&quot;y&quot;</span>&#125; &gt;= &#123;<span class="string">&quot;p&quot;</span>, <span class="string">&quot;y&quot;</span> , <span class="number">123</span>&#125;</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>数据去重，集合类型所有元素无重复：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;p&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="number">123</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">set</span>(ls)    <span class="comment"># 利用了集合无重复元素的特点</span></span><br><span class="line">&#123;<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="number">123</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lt = <span class="built_in">list</span>(s)   <span class="comment"># 还可以将集合转换为列表</span></span><br><span class="line">[<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="number">123</span>]</span><br></pre></td></tr></table></figure><p>序列类型定义（序列是具有先后关系的一组元素<br>）：</p><ul><li>序列是一维元素向量，元素类型可以不同</li><li>类似数学元素序列： s0, s1, … , sn-1</li><li>元素间由序号引导，通过下标访问序列的特定元素</li></ul><p><strong>序列是一个基类类型。</strong> 序列类型 -&gt; 字符串类型、元组类型、列表类型。</p><p><img src="https://bu.dusays.com/2023/04/08/64316c066cd4c.png" alt="34-45.png"></p><p><img src="https://bu.dusays.com/2023/04/08/64316d6695050.png" alt="34-46.png" title="序列类型通用操作符"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 序列类型操作实例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;python&quot;</span>, <span class="number">123</span>, <span class="string">&quot;.io&quot;</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls[::-<span class="number">1</span>]</span><br><span class="line">[<span class="string">&#x27;.io&#x27;</span>, <span class="number">123</span>, <span class="string">&#x27;python&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&quot;python123.io&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::-<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;oi.321nohtyp&#x27;</span></span><br><span class="line">&gt;&gt;&gt;Print(ls)</span><br><span class="line">[<span class="string">&#x27;python’,123,&#x27;</span>.io’]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;python&quot;</span>, <span class="number">123</span>, <span class="string">&quot;.io&quot;</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(ls)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&quot;python123.io&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(s)</span><br><span class="line"><span class="string">&#x27;y&#x27;</span></span><br></pre></td></tr></table></figure><p>元组类型定义（元组是序列类型的一种扩展，继承了序列类型的全部通用操作）：</p><ul><li>使用小括号<code>()</code>或<code>tuple()</code>创建，元素间用逗号分隔</li><li>可以使用或不使用小括号</li><li>一旦创建就不能被修改</li><li>没有特殊操作（增删改）</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>creature = <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;tiger&quot;</span>, <span class="string">&quot;human&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>creature</span><br><span class="line">(<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="string">&#x27;human&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>creature[::-<span class="number">1</span>]</span><br><span class="line">(<span class="string">&#x27;human&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>creature</span><br><span class="line">(<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="string">&#x27;human&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>color = (<span class="number">0x001100</span>, <span class="string">&quot;blue&quot;</span>, creature)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>color[-<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;tiger&#x27;</span></span><br></pre></td></tr></table></figure><p>列表类型定义（列表是序列类型的一种扩展，十分常用）：</p><ul><li>列表是一种序列类型，创建后可以随意被修改</li><li>使用方括号<code>[]</code>或<code>list()</code>创建，元素间用逗号分隔</li><li>列表中各元素类型可以不同，无长度限制</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;tiger&quot;</span>, <span class="number">1024</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls</span><br><span class="line">[<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="number">1024</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lt = ls</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lt</span><br><span class="line">[<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="number">1024</span>] </span><br></pre></td></tr></table></figure><p>方括号<code>[]</code>真正创建一个列表，赋值仅传递引用。</p><p><img src="https://bu.dusays.com/2023/04/09/643233b43a725.png" alt="34-47.png" title="列表类型操作函数和方法"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;tiger&quot;</span>, <span class="number">1024</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls[<span class="number">1</span>:<span class="number">2</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="string">&#x27;cat&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="number">1024</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> ls[::<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="string">&#x27;tiger&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls*<span class="number">2</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="string">&#x27;tiger&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;tiger&quot;</span>, <span class="number">1024</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls.append(<span class="number">1234</span>)</span><br><span class="line">[<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="number">1024</span>, <span class="number">1234</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls.insert(<span class="number">3</span>, <span class="string">&quot;human&quot;</span>)</span><br><span class="line">[<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="string">&#x27;human&#x27;</span>, <span class="number">1024</span>, <span class="number">1234</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls.reverse()</span><br><span class="line">[<span class="number">1234</span>, <span class="number">1024</span>, <span class="string">&#x27;human&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>]</span><br></pre></td></tr></table></figure><p>如果不希望数据被程序所改变，转换成元组类型:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;tiger&quot;</span>, <span class="number">1024</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lt = <span class="built_in">tuple</span>(ls)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lt</span><br><span class="line">(<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="number">1024</span>)</span><br></pre></td></tr></table></figure><p>【实例】 基本统计值计算</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CalStatisticsV1.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getNum</span>():       <span class="comment">#获取用户不定长度的输入</span></span><br><span class="line">    nums = []</span><br><span class="line">    iNumStr = <span class="built_in">input</span>(<span class="string">&quot;请输入数字(回车退出): &quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> iNumStr != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        nums.append(<span class="built_in">eval</span>(iNumStr))</span><br><span class="line">        iNumStr = <span class="built_in">input</span>(<span class="string">&quot;请输入数字(回车退出): &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mean</span>(<span class="params">numbers</span>):  <span class="comment">#计算平均值</span></span><br><span class="line">    s = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">        s = s + num</span><br><span class="line">    <span class="keyword">return</span> s / <span class="built_in">len</span>(numbers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dev</span>(<span class="params">numbers, mean</span>):  <span class="comment">#计算标准差</span></span><br><span class="line">    sdev = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">        sdev = sdev + (num - mean)**<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(sdev / (<span class="built_in">len</span>(numbers)-<span class="number">1</span>), <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">median</span>(<span class="params">numbers</span>):    <span class="comment">#计算中位数</span></span><br><span class="line">    numbers.sort()    <span class="comment"># sorted(numbers)</span></span><br><span class="line">    size = <span class="built_in">len</span>(numbers)</span><br><span class="line">    <span class="keyword">if</span> size % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        med = (numbers[size//<span class="number">2</span>-<span class="number">1</span>] + numbers[size//<span class="number">2</span>])/<span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        med = numbers[size//<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> med</span><br><span class="line"></span><br><span class="line">n =  getNum() </span><br><span class="line">m =  mean(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;平均值:&#123;&#125;,标准差:&#123;:.2&#125;,中位数:&#123;&#125;.&quot;</span>.<span class="built_in">format</span>(m, dev(n,m),median(n))) </span><br></pre></td></tr></table></figure><p>注意：在上面的代码中，两条排序语句的运行结果不一样。</p><p>这是因为：</p><ul><li><code>sorted()</code>是<code>Python</code>内置函数，它接受一个可迭代对象（如列表）作为参数，返回一个新的排好序的列表，原来的列表不会被修改。</li><li><code>list.sort()</code>是列表对象的方法，它对原列表进行排序，不返回新的列表，而是直接修改原来的列表。</li></ul><p>【作业】 代码补全 - 奥运五环</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawCircle</span>(<span class="params">x,y,color</span>):</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(x, y)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.color(color)</span><br><span class="line">    turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.width(<span class="number">10</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">##1</span></span><br><span class="line">drawCircle(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">drawCircle(<span class="number">120</span>,<span class="number">0</span>,<span class="string">&quot;black&quot;</span>)</span><br><span class="line">drawCircle(<span class="number">240</span>,<span class="number">0</span>,<span class="string">&quot;red&quot;</span>)</span><br><span class="line">drawCircle(<span class="number">60</span>,-<span class="number">50</span>,<span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">drawCircle(<span class="number">180</span>,-<span class="number">50</span>,<span class="string">&quot;green&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##2</span></span><br><span class="line"><span class="comment">##xs = [0, 120, 240, 60, 180]</span></span><br><span class="line"><span class="comment">##ys = [0, 0, 0, -50, -50]</span></span><br><span class="line"><span class="comment">##colors = [&#x27;blue&#x27;, &#x27;black&#x27;, &#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;]</span></span><br><span class="line"><span class="comment">##for i in range(5):</span></span><br><span class="line"><span class="comment">##补全    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">##3</span></span><br><span class="line"><span class="comment">##coords = [(0,0),(120,0),(240,0),(60,-50),(180,-50)]</span></span><br><span class="line"><span class="comment">##colors = [&quot;blue&quot;,&quot;black&quot;,&quot;red&quot;,&quot;yellow&quot;,&quot;green&quot;]</span></span><br><span class="line"><span class="comment">##for i in range(5):</span></span><br><span class="line"><span class="comment">##补全    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">##4</span></span><br><span class="line"><span class="comment">##circles = [</span></span><br><span class="line"><span class="comment">##    (0, 0, &quot;blue&quot;),</span></span><br><span class="line"><span class="comment">##    (120, 0, &quot;black&quot;),</span></span><br><span class="line"><span class="comment">##    (240, 0, &quot;red&quot;),</span></span><br><span class="line"><span class="comment">##    (60, -50, &quot;yellow&quot;),</span></span><br><span class="line"><span class="comment">##    (180, -50, &quot;green&quot;)</span></span><br><span class="line"><span class="comment">##]</span></span><br><span class="line"><span class="comment">##for circle in circles:</span></span><br><span class="line"><span class="comment">##补全</span></span><br><span class="line">    </span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">40</span>, -<span class="number">100</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.write(<span class="string">&quot;Beijing 2022&quot;</span>, font=(<span class="string">&quot;微软雅⿊&quot;</span>, <span class="number">20</span>, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line">turtle.hideturtle()</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><p>2中补全的代码为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drawCircle(xs[i], ys[i], colors[i])</span><br></pre></td></tr></table></figure><p>3中补全的代码为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drawCircle(coords[i][<span class="number">0</span>], coords[i][<span class="number">1</span>], colors[i])</span><br></pre></td></tr></table></figure><p>4中补全的代码为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drawCircle(circle[<span class="number">0</span>], circle[<span class="number">1</span>], circle[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>以上代码均通过测试。</p><p>字典类型定义（字典类型是“映射”的体现）：</p><ul><li>键值对：键是数据索引的扩展</li><li>字典是键值对的集合，键值对之间无序</li><li>采用大括号<code>&#123;&#125;</code>和<code>dict()</code>创建，键值对用冒号<code>:</code>表示</li><li><code>&#123;&lt;键1&gt;:&lt;值1&gt;, &lt;键2&gt;:&lt;值2&gt;, … , &lt;键n&gt;:&lt;值n&gt;&#125;</code></li></ul><p>在字典变量中，通过键获得值：</p><ul><li><code>&lt;字典变量&gt; = &#123;&lt;键1&gt;:&lt;值1&gt;, … , &lt;键n&gt;:&lt;值n&gt;&#125;</code></li><li><code>&lt;值&gt; = &lt;字典变量&gt;[&lt;键&gt;]</code></li><li><code>&lt;字典变量&gt;[&lt;键&gt;] = &lt;值&gt;</code></li><li><code>[]</code>用来向字典变量中索引或增加元素</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&quot;中国&quot;</span>:<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;美国&quot;</span>:<span class="string">&quot;华盛顿&quot;</span>, <span class="string">&quot;法国&quot;</span>:<span class="string">&quot;巴黎&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d </span><br><span class="line">&#123;<span class="string">&#x27;中国&#x27;</span>: <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>: <span class="string">&#x27;华盛顿&#x27;</span>, <span class="string">&#x27;法国&#x27;</span>: <span class="string">&#x27;巴黎&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&quot;中国&quot;</span>]</span><br><span class="line"><span class="string">&#x27;北京&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>de = &#123;&#125; ; <span class="built_in">type</span>(de)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p><code>type(x)</code>：返回变量x的类型。</p><p><img src="https://bu.dusays.com/2023/04/10/6433fbf041ce4.png" alt="34-48.png" title="字典类型操作函数和方法"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&quot;中国&quot;</span>:<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;美国&quot;</span>:<span class="string">&quot;华盛顿&quot;</span>, <span class="string">&quot;法国&quot;</span>:<span class="string">&quot;巴黎&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;中国&quot;</span> <span class="keyword">in</span> d </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.keys()</span><br><span class="line">dict_keys([<span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;法国&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.values()</span><br><span class="line">dict_values([<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;华盛顿&#x27;</span>, <span class="string">&#x27;巴黎&#x27;</span>])</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&quot;中国&quot;</span>:<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;美国&quot;</span>:<span class="string">&quot;华盛顿&quot;</span>, <span class="string">&quot;法国&quot;</span>:<span class="string">&quot;巴黎&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;伊斯兰堡&quot;</span>)</span><br><span class="line"><span class="string">&#x27;北京&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">&quot;巴基斯坦&quot;</span>,<span class="string">&quot;伊斯兰堡&quot;</span>)</span><br><span class="line"><span class="string">&#x27;伊斯兰堡&#x27;</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.popitem()</span><br><span class="line">(<span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;华盛顿&#x27;</span>)</span><br></pre></td></tr></table></figure><p>字典类型应用场景，元素遍历：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="keyword">for</span> (k,v) <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d.keys():</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> d.values():</span><br></pre></td></tr></table></figure><p>【作业】 课程成绩统计</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">score_type_in</span>():    <span class="comment"># 获取用户不定长度的输入</span></span><br><span class="line">    nums = []</span><br><span class="line">    iNumStr = <span class="built_in">input</span>(<span class="string">&quot;请输入0-100的整数(回车退出): &quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> iNumStr != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        nums.append(<span class="built_in">eval</span>(iNumStr))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span>(<span class="built_in">isinstance</span>(nums[-<span class="number">1</span>],<span class="built_in">int</span>)) <span class="keyword">or</span> nums[-<span class="number">1</span>]&lt;<span class="number">0</span> <span class="keyword">or</span> nums[-<span class="number">1</span>]&gt;<span class="number">100</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入非法&quot;</span>)</span><br><span class="line">            <span class="keyword">del</span> nums[-<span class="number">1</span>]</span><br><span class="line">        iNumStr = <span class="built_in">input</span>(<span class="string">&quot;请输入0-100的整数(回车退出): &quot;</span>)</span><br><span class="line">    nums.sort()</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mean</span>(<span class="params">numbers</span>):  <span class="comment"># 计算平均值</span></span><br><span class="line">    s = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">        s = s + num</span><br><span class="line">    <span class="keyword">return</span> s / <span class="built_in">len</span>(numbers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">abcde_label</span>(<span class="params">numbers</span>):  <span class="comment"># 打等级</span></span><br><span class="line">    label_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> score <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="keyword">if</span> score &gt;= <span class="number">90</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;优&quot;</span>] = label_dict.get(<span class="string">&quot;优&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> score &gt;= <span class="number">80</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;良&quot;</span>] = label_dict.get(<span class="string">&quot;良&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> score &gt;= <span class="number">70</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;中&quot;</span>] = label_dict.get(<span class="string">&quot;中&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> score &gt;= <span class="number">60</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;及格&quot;</span>] = label_dict.get(<span class="string">&quot;及格&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;不及格&quot;</span>] = label_dict.get(<span class="string">&quot;不及格&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> label_dict</span><br><span class="line"></span><br><span class="line">real_score = score_type_in()</span><br><span class="line"><span class="built_in">print</span>(real_score)</span><br><span class="line"><span class="built_in">print</span>(mean(real_score))</span><br><span class="line"><span class="built_in">print</span>(abcde_label(real_score))</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/04/14/64396a781777b.png" alt="34-48dot5.png" title="上面代码测试结果"></p><h2 id="jieba-库的使用"><a href="#jieba-库的使用" class="headerlink" title="jieba 库的使用"></a>jieba 库的使用</h2><p>安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jieba</span><br></pre></td></tr></table></figure><p>jieba 分词的三种模式：</p><ul><li>精确模式：把文本精确的切分开，不存在冗余单词</li><li>全模式：把文本中所有可能的词语都扫描出来，有冗余</li><li>搜索引擎模式：在精确模式基础上，对长词再次切分</li></ul><p><img src="https://bu.dusays.com/2023/04/10/64341085a6a39.png" alt="34-49.png"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;/&quot;</span>.join(jieba.lcut(<span class="string">&quot;中国是一个伟大的国家&quot;</span>)))</span><br></pre></td></tr></table></figure><p>命令、打印信息及输出结果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\arrogance&gt; python <span class="literal">-u</span> <span class="string">&quot;d:\mypycode\tmp.py&quot;</span></span><br><span class="line">Building prefix dict from the default dictionary ...</span><br><span class="line">Loading model from cache C:\Users\ARROGA~<span class="number">1</span>\AppData\Local\Temp\jieba.cache</span><br><span class="line">Loading model cost <span class="number">0.618</span> seconds.</span><br><span class="line">Prefix dict has been built successfully.</span><br><span class="line">中国/是/一个/伟大/的/国家</span><br></pre></td></tr></table></figure><p>注意：如果找不到 jieba ，可能是路径的问题。在命令行中修改路径，然后运行即可。</p><p>【实例】 文本词频统计</p><p>资料：</p><ul><li>英文文本：Hamlet             分析词频<br><a href="https://python123.io/resources/pye/hamlet.txt">https://python123.io/resources/pye/hamlet.txt</a></li><li>中文文本：《三国演义》    分析人物<br><a href="https://python123.io/resources/pye/threekingdoms.txt">https://python123.io/resources/pye/threekingdoms.txt</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CalHamletV1.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getText</span>():    <span class="comment"># 文本去噪及归一化</span></span><br><span class="line">    txt = <span class="built_in">open</span>(<span class="string">&quot;D:\mypycode\hamletcnt\hamlet.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line">    txt = txt.lower()</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">&#x27;!&quot;#$%&amp;()*+,-./:;&lt;=&gt;?@[\\]^_‘&#123;|&#125;~&#x27;</span>:</span><br><span class="line">        txt = txt.replace(ch, <span class="string">&quot; &quot;</span>) </span><br><span class="line">    <span class="keyword">return</span> txt</span><br><span class="line"></span><br><span class="line">hamletTxt = getText()</span><br><span class="line">words  = hamletTxt.split()</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:            </span><br><span class="line">    counts[word] = counts.get(word,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">items = <span class="built_in">list</span>(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    word, count = items[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="built_in">format</span>(word, count))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">the        1138</span><br><span class="line">and         965</span><br><span class="line">to          754</span><br><span class="line">of          669</span><br><span class="line">you         550</span><br><span class="line">i           542</span><br><span class="line">a           542</span><br><span class="line">my          514</span><br><span class="line">hamlet      462</span><br><span class="line">in          436</span><br></pre></td></tr></table></figure><p>代码解释：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">items.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>ChatGPT :</p><blockquote><p>这行Python代码使用了列表对象的sort()方法，根据列表中每个元素的第二个值（也就是下标为1的元素）进行降序排序。<br>lambda表达式创建了一个匿名函数，它取一个参数x并返回x[1]，也就是列表中每个元素的第二个值。<br>reverse=True参数指定了要按降序排序，也就是从大到小排序。如果没有指定该参数，sort()方法默认使用升序排序，也就是从小到大排序。<br>综上所述，这行代码的作用是对列表对象items按照其元素的第二个值进行降序排序。</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CalThreeKingdomsV1.py</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">txt = <span class="built_in">open</span>(<span class="string">&quot;D:\mypycode\\threekingdomscnt\\threekingdoms.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>).read()</span><br><span class="line">words = jieba.lcut(txt)</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(word) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:            </span><br><span class="line">        counts[word] = counts.get(word,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">items = <span class="built_in">list</span>(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    word, count = items[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="built_in">format</span>(word, count))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">曹操          953</span><br><span class="line">孔明          836</span><br><span class="line">将军          772</span><br><span class="line">却说          656</span><br><span class="line">玄德          585</span><br><span class="line">关公          510</span><br><span class="line">丞相          491</span><br><span class="line">二人          469</span><br><span class="line">不可          440</span><br><span class="line">荆州          425</span><br><span class="line">玄德曰         390</span><br><span class="line">孔明曰         390</span><br><span class="line">不能          384</span><br><span class="line">如此          378</span><br><span class="line">张飞          358</span><br></pre></td></tr></table></figure><p>以上只是词频统计，并不是人物出场统计，需要进一步优化：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CalThreeKingdomsV2.py</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">txt = <span class="built_in">open</span>(<span class="string">&quot;D:\mypycode\\threekingdomscnt\\threekingdoms.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>).read()</span><br><span class="line">excludes = &#123;<span class="string">&quot;将军&quot;</span>,<span class="string">&quot;却说&quot;</span>,<span class="string">&quot;荆州&quot;</span>,<span class="string">&quot;二人&quot;</span>,<span class="string">&quot;不可&quot;</span>,<span class="string">&quot;不能&quot;</span>,<span class="string">&quot;如此&quot;</span>&#125;</span><br><span class="line">words = jieba.lcut(txt)</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(word) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> word == <span class="string">&quot;诸葛亮&quot;</span> <span class="keyword">or</span> word == <span class="string">&quot;孔明曰&quot;</span>:</span><br><span class="line">        rword = <span class="string">&quot;孔明&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> word == <span class="string">&quot;关公&quot;</span> <span class="keyword">or</span> word == <span class="string">&quot;云长&quot;</span>:</span><br><span class="line">        rword = <span class="string">&quot;关羽&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> word == <span class="string">&quot;玄德&quot;</span> <span class="keyword">or</span> word == <span class="string">&quot;玄德曰&quot;</span>:</span><br><span class="line">        rword = <span class="string">&quot;刘备&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> word == <span class="string">&quot;孟德&quot;</span> <span class="keyword">or</span> word == <span class="string">&quot;丞相&quot;</span>:</span><br><span class="line">        rword = <span class="string">&quot;曹操&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rword = word</span><br><span class="line">    counts[rword] = counts.get(rword,<span class="number">0</span>) + <span class="number">1</span> </span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> excludes:</span><br><span class="line">    <span class="keyword">del</span> counts[word]</span><br><span class="line">items = <span class="built_in">list</span>(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    word, count = items[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="built_in">format</span>(word, count))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">曹操         1451</span><br><span class="line">孔明         1383</span><br><span class="line">刘备         1252</span><br><span class="line">关羽          784</span><br><span class="line">张飞          358</span><br><span class="line">商议          344</span><br><span class="line">如何          338</span><br><span class="line">主公          331</span><br><span class="line">军士          317</span><br><span class="line">吕布          300</span><br></pre></td></tr></table></figure><h2 id="文件和数据格式化"><a href="#文件和数据格式化" class="headerlink" title="文件和数据格式化"></a>文件和数据格式化</h2><p>文本文件（文件是数据的抽象和集合）：</p><ul><li>由单一特定编码组成的文件，如 UTF-8 编码</li><li>由于存在编码，也被看成是存储着的长字符串</li><li>适用于例如：<code>.txt</code>文件、<code>.py</code>文件等</li></ul><p>二进制文件：</p><ul><li>直接由比特0和1组成，没有统一字符编码</li><li>一般存在二进制0和1的组织结构，即文件格式</li><li>适用于例如：<code>.png</code>文件、<code>.avi</code>文件等</li></ul><p>文本形式打开文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># f.txt文件保存:  &quot;中国是个伟大的国家!&quot;</span></span><br><span class="line">tf = <span class="built_in">open</span>(<span class="string">&quot;f.txt&quot;</span>, <span class="string">&quot;rt&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(tf.readline())</span><br><span class="line">tf.close()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;</span><br><span class="line">中国是个伟大的国家!</span><br></pre></td></tr></table></figure><p>二进制形式打开文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># f.txt文件保存:  &quot;中国是个伟大的国家!&quot;</span></span><br><span class="line">bf = <span class="built_in">open</span>(<span class="string">&quot;f.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(bf.readline())</span><br><span class="line">bf.close()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;</span><br><span class="line">b&#x27;\xd6\xd0\xb9\xfa\xca\xc7\xb8\xf6\xce\xb0\xb4\xf3\xb5\xc4\xb9\xfa\xbc\xd2\xa3\xa1&#x27;</span><br></pre></td></tr></table></figure><p>文件的打开：</p><p><img src="https://bu.dusays.com/2023/04/18/643ea0577ddad.png" alt="34-50.png"></p><p><img src="https://bu.dusays.com/2023/04/18/643ea0e849f50.png" alt="34-51.png" title="文件的打开模式"></p><p>文件的关闭：</p><p><img src="https://bu.dusays.com/2023/04/18/643ea1ca98324.png" alt="34-52.png"></p><p>文件内容的读取：</p><p><img src="https://bu.dusays.com/2023/04/18/643ea2a92777d.png" alt="34-53.png"></p><p>文件的全文本操作：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历全文本：方法一</span></span><br><span class="line"><span class="comment"># 一次读出，统一处理</span></span><br><span class="line">fname = <span class="built_in">input</span>(<span class="string">&quot;请输入要打开的文件名称:&quot;</span>)</span><br><span class="line">file = <span class="built_in">open</span>(fname,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">txt = file.read()</span><br><span class="line"><span class="comment"># 对全文txt字符串进行处理</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历全文本：方法二</span></span><br><span class="line"><span class="comment"># 按数量读出，逐步处理</span></span><br><span class="line">fname = <span class="built_in">input</span>(<span class="string">&quot;请输入要打开的文件名称:&quot;</span>)</span><br><span class="line">file = <span class="built_in">open</span>(fname,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">txt = file.read(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">while</span> txt != <span class="string">&quot;&quot;</span>:</span><br><span class="line">    <span class="comment">#对txt（长度为size的字符串）进行处理</span></span><br><span class="line">    txt = file.read(<span class="number">2</span>)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>文件的逐行操作：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逐行遍历文件：方法一</span></span><br><span class="line"><span class="comment"># 分行读出，分行处理</span></span><br><span class="line">fname = <span class="built_in">input</span>(<span class="string">&quot;请输入要打开的文件名称:&quot;</span>)</span><br><span class="line">file = <span class="built_in">open</span>(fname,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">line = file.readline().strip()</span><br><span class="line"><span class="keyword">while</span> (line):</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">    line = file.readline().strip()</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逐行遍历文件：方法二</span></span><br><span class="line"><span class="comment"># 一次读出，分行处理</span></span><br><span class="line">fname = <span class="built_in">input</span>(<span class="string">&quot;请输入要打开的文件名称:&quot;</span>)</span><br><span class="line">file = <span class="built_in">open</span>(fname,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">lines = file.readlines()       <span class="comment">#list</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逐行遍历文件：方法三</span></span><br><span class="line"><span class="comment"># 分行读入，逐行处理</span></span><br><span class="line">fname = <span class="built_in">input</span>(<span class="string">&quot;请输入要打开的文件名称:&quot;</span>)</span><br><span class="line">fo = <span class="built_in">open</span>(fname,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><p>数据的文件写入：</p><p><img src="https://bu.dusays.com/2023/04/18/643ea7fa845f3.png" alt="34-54.png"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>)</span><br><span class="line">ls = [<span class="string">&quot;中国&quot;</span>, <span class="string">&quot;法国&quot;</span>, <span class="string">&quot;美国&quot;</span>]</span><br><span class="line">fo.writelines(ls)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">fo.close()</span><br><span class="line"><span class="comment"># 该程序没有任何输出</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>)</span><br><span class="line">ls = [<span class="string">&quot;中国&quot;</span>, <span class="string">&quot;法国&quot;</span>, <span class="string">&quot;美国&quot;</span>]</span><br><span class="line">fo.writelines(ls)</span><br><span class="line">fo.seek(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><p>上面代码的输出结果：（打印信息和文件中内容一样，都没有换行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">中国法国美国</span><br></pre></td></tr></table></figure><p>【作业】 课程成绩统计2（从文本文件读入）</p><p>数据文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">23.5</span><br><span class="line">23</span><br><span class="line">432</span><br><span class="line">23</span><br><span class="line">45</span><br><span class="line">65</span><br><span class="line">78</span><br><span class="line">96</span><br><span class="line">100</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">-1</span><br><span class="line">23</span><br><span class="line">2</span><br><span class="line">87</span><br><span class="line">q</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scoresFromFile</span>():</span><br><span class="line">    nums = []</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;D:\mypycode\作业-课程成绩统计2\\thedata.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        line = line.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> line == <span class="string">&quot;q&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> nums</span><br><span class="line">        nums.append(<span class="built_in">eval</span>(line))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span>(<span class="built_in">isinstance</span>(nums[-<span class="number">1</span>], <span class="built_in">int</span>)) <span class="keyword">or</span> nums[-<span class="number">1</span>]&lt;<span class="number">0</span> <span class="keyword">or</span> nums[-<span class="number">1</span>]&gt;<span class="number">100</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;第&#123;&#125;行数据非法，将被略去&quot;</span>.<span class="built_in">format</span>(cnt))</span><br><span class="line">            <span class="keyword">del</span> nums[-<span class="number">1</span>]</span><br><span class="line">    nums.sort()</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mean</span>(<span class="params">numbers</span>):  <span class="comment"># 计算平均值</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> numbers:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    s = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">        s = s + num</span><br><span class="line">    <span class="keyword">return</span> s / <span class="built_in">len</span>(numbers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">abcde_label</span>(<span class="params">numbers</span>):  <span class="comment"># 打等级</span></span><br><span class="line">    label_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> score <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="keyword">if</span> score &gt;= <span class="number">90</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;优&quot;</span>] = label_dict.get(<span class="string">&quot;优&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> score &gt;= <span class="number">80</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;良&quot;</span>] = label_dict.get(<span class="string">&quot;良&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> score &gt;= <span class="number">70</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;中&quot;</span>] = label_dict.get(<span class="string">&quot;中&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> score &gt;= <span class="number">60</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;及格&quot;</span>] = label_dict.get(<span class="string">&quot;及格&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;不及格&quot;</span>] = label_dict.get(<span class="string">&quot;不及格&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> label_dict</span><br><span class="line"></span><br><span class="line">real_score = scoresFromFile()</span><br><span class="line"><span class="built_in">print</span>(real_score)</span><br><span class="line"><span class="built_in">print</span>(mean(real_score))</span><br><span class="line"><span class="built_in">print</span>(abcde_label(real_score))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第1行数据非法，将被略去</span><br><span class="line">第3行数据非法，将被略去</span><br><span class="line">第12行数据非法，将被略去</span><br><span class="line">[23, 23, 45, 65, 78, 96, 100, 1, 0, 23, 2, 87]</span><br><span class="line">45.25</span><br><span class="line">&#123;&#x27;不及格&#x27;: 7, &#x27;及格&#x27;: 1, &#x27;中&#x27;: 1, &#x27;优&#x27;: 2, &#x27;良&#x27;: 1&#125;</span><br></pre></td></tr></table></figure><p>【实例】 自动轨迹绘制</p><p>需求：根据脚本来绘制图形。数据给出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">300,0,144,1,0,0</span><br><span class="line">300,0,144,0,1,0</span><br><span class="line">300,0,144,0,0,1</span><br><span class="line">300,0,144,1,1,0</span><br><span class="line">300,0,108,0,1,1</span><br><span class="line">184,0,72,1,0,1</span><br><span class="line">184,0,72,0,0,0</span><br><span class="line">184,0,72,0,0,0</span><br><span class="line">184,0,72,0,0,0</span><br><span class="line">184,1,72,1,0,1</span><br><span class="line">184,1,72,0,0,0</span><br><span class="line">184,1,72,0,0,0</span><br><span class="line">184,1,72,0,0,0</span><br><span class="line">184,1,72,0,0,0</span><br><span class="line">184,1,720,0,0,0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/04/18/643eaf7da3cb0.png" alt="34-55" title="预期结果"></p><p><img src="https://bu.dusays.com/2023/04/18/643eb1d51ff35.png" alt="34-56.png" title="数据接口定义"></p><p>下面给出代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#AutoTraceDraw.py</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line">t.title(<span class="string">&#x27;自动轨迹绘制&#x27;</span>)</span><br><span class="line">t.setup(<span class="number">800</span>, <span class="number">600</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#数据读取</span></span><br><span class="line">datals = []</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;D:\mypycode\AutoTraceDrawData.txt&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    line = line.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    datals.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">eval</span>, line.split(<span class="string">&quot;,&quot;</span>))))</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment">#自动绘制</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(datals)):</span><br><span class="line">    t.pencolor(datals[i][<span class="number">3</span>],datals[i][<span class="number">4</span>],datals[i][<span class="number">5</span>])</span><br><span class="line">    t.fd(datals[i][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> datals[i][<span class="number">1</span>]:</span><br><span class="line">        t.right(datals[i][<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t.left(datals[i][<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">t.done()</span><br></pre></td></tr></table></figure><p>第 11、12 行的代码解释（ChatGPT）：</p><blockquote><p>这两行代码的作用是读取文件中的每一行数据，将其中的换行符（\n）替换为空字符串（””），然后将字符串按照逗号（,）分隔，将每个子字符串转换为相应的数据类型（比如整数、浮点数等），最后将转换后的数据存储到一个列表（datals）中。<br>具体来说，第一行代码使用<code>replace()</code>方法将字符串中的 \n 替换为空字符串 “”，这是因为在文件中每行数据的末尾通常会包含一个换行符。第二行代码使用<code>split()</code>方法将字符串按照逗号分隔，得到一个子字符串列表。然后，<code>map()</code>函数将列表中的每个子字符串转换为相应的数据类型，比如使用<code>eval()</code>函数将字符串转换为数值类型。最后，<code>list()</code>函数将转换后的数据列表转换为一个普通列表，并将其添加到 datals 列表中。</p></blockquote><p><code>filter(function，iterable)</code>：过滤，根据指定的函数对指定的可迭代对象进行过滤。</p><ul><li>参数：函数，可迭代对象<ul><li>对 iterable 中的每个元素判断是否符合特定条件，保留结果为真的元素，舍弃结果为假的元素</li><li>None：不调用任何函数，只对可迭代对象中的元素本身判断真假</li></ul></li><li>函数值：一个迭代器<ul><li>如果要转换为列表，可以使用<code>list()</code>来转换</li></ul></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;gradesintlist =[<span class="number">78</span>, <span class="number">98</span>, <span class="number">90</span>, <span class="number">87</span>]</span><br><span class="line">&gt;&gt;&gt;result=</span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x:x&gt;=<span class="number">80</span>,gradesintlist))</span><br><span class="line">[<span class="number">98</span>,<span class="number">90</span>,<span class="number">87</span>]</span><br></pre></td></tr></table></figure><p>高维数据：仅利用最基本的二元关系展示数据间的复杂结构。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;firstName&quot;</span> : <span class="string">&quot;Tian&quot;</span> ,</span><br><span class="line">   <span class="string">&quot;lastName&quot;</span>  : <span class="string">&quot;Song&quot;</span> ,</span><br><span class="line">   <span class="string">&quot;address&quot;</span>   : &#123;</span><br><span class="line">                   <span class="string">&quot;streetAddr&quot;</span> : <span class="string">&quot;中关村南大街5号&quot;</span> ,</span><br><span class="line">                   <span class="string">&quot;city&quot;</span>       : <span class="string">&quot;北京市&quot;</span> ,</span><br><span class="line">                   <span class="string">&quot;zipcode&quot;</span>    : <span class="string">&quot;100081&quot;</span> </span><br><span class="line">                 &#125; ,</span><br><span class="line">   <span class="string">&quot;professional&quot;</span> : [<span class="string">&quot;Computer Networking&quot;</span> , <span class="string">&quot;Security&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从空格分隔的文件中读入数据：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需读入的数据为：中国 美国 日本 德国 法国 英国 意大利</span></span><br><span class="line">txt = <span class="built_in">open</span>(fname).read()</span><br><span class="line">ls = txt.split()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls</span><br><span class="line">[<span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;日本&#x27;</span>, <span class="string">&#x27;德国&#x27;</span>, <span class="string">&#x27;法国&#x27;</span>, <span class="string">&#x27;英国&#x27;</span>, <span class="string">&#x27;意大利&#x27;</span>]</span><br></pre></td></tr></table></figure><p>从特殊符号$分隔的文件中读入数据：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需读入的数据为：中国$美国$日本$德国$法国$英国$意大利</span></span><br><span class="line">txt = <span class="built_in">open</span>(fname).read()</span><br><span class="line">ls = txt.split(<span class="string">&quot;$&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls</span><br><span class="line">[<span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;日本&#x27;</span>, <span class="string">&#x27;德国&#x27;</span>, <span class="string">&#x27;法国&#x27;</span>, <span class="string">&#x27;英国&#x27;</span>, <span class="string">&#x27;意大利&#x27;</span>]</span><br></pre></td></tr></table></figure><p>采用空格分隔方式将数据写入文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;日本&#x27;</span>]</span><br><span class="line">f = <span class="built_in">open</span>(fname, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27; &#x27;</span>.join(ls))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>采用特殊分隔方式将数据写入文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;日本&#x27;</span>]</span><br><span class="line">f = <span class="built_in">open</span>(fname, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27;$&#x27;</span>.join(ls))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>二维数据的表示（使用列表类型）：</p><ul><li>使用两层for循环遍历每个元素</li><li>外层列表中每个元素可以对应一行，也可以对应一列</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[  [<span class="number">3.1398</span>, <span class="number">3.1349</span>, <span class="number">3.1376</span>], </span><br><span class="line">   [<span class="number">3.1413</span>, <span class="number">3.1404</span>, <span class="number">3.1401</span>]  ]</span><br></pre></td></tr></table></figure><p>CSV数据存储格式（CSV：Comma-Separated Values）：</p><ul><li>国际通用的一二维数据存储格式，一般.csv扩展名</li><li>每行一个一维数据，采用逗号分隔，<strong>无空行</strong></li><li>Excel和一般编辑软件都可以读入或另存为csv文件</li><li>如果某个元素缺失，逗号仍要保留</li><li>二维数据的表头可以作为数据存储，也可以另行存储</li><li>逗号为英文半角逗号，<strong>逗号与数据之间无额外空格</strong></li></ul><p><img src="https://bu.dusays.com/2023/04/20/6440ee6ea347c.png" alt="34-57.png"></p><p>二维数据的存储：</p><ul><li>按行存或者按列存都可以，具体由程序决定</li><li>一般索引习惯：<code>ls[row][column]</code>，先行后列</li><li>根据一般习惯，外层列表每个元素是一行，按行存</li></ul><p>从CSV格式的文件中读入数据：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fo = <span class="built_in">open</span>(fname)</span><br><span class="line">ls = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    line = line.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    ls.append(line.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><p>将数据写入CSV格式的文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls = [[], [], []]    <span class="comment"># 二维列表</span></span><br><span class="line">f = <span class="built_in">open</span>(fname, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ls:</span><br><span class="line">    f.write(<span class="string">&#x27;,&#x27;</span>.join(item) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>二维数据的逐一处理（采用二层循环）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>], [<span class="number">5</span>,<span class="number">6</span>]] <span class="comment"># 二维列表</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> ls:</span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> row:</span><br><span class="line">         <span class="built_in">print</span>(column)</span><br></pre></td></tr></table></figure><h2 id="wordcloud、imageio及其他"><a href="#wordcloud、imageio及其他" class="headerlink" title="wordcloud、imageio及其他"></a>wordcloud、imageio及其他</h2><p>安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install wordcloud</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/04/20/644124b932fd5.png" alt="34-58.png" title="wordcloud库常规方法"></p><p>文本转为词云的过程：</p><ol><li>分隔: 以空格分隔单词</li><li>统计: 单词出现次数并过滤</li><li>字体: 根据统计配置字号</li><li>布局: 颜色环境尺寸</li></ol><p><img src="https://bu.dusays.com/2023/04/20/6441281f7f3b5.png" alt="34-59.png" title="配置对象参数"></p><p>英文例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line">txt = <span class="string">&quot;life is short, you need python&quot;</span></span><br><span class="line">w = wordcloud.WordCloud(background_color = <span class="string">&quot;white&quot;</span>)</span><br><span class="line">w.generate(txt)</span><br><span class="line">w.to_file(<span class="string">&quot;D:\mypycode\mywordcloud\\test1img.png&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://bu.dusays.com/2023/04/20/64412cc32f2eb.png" alt="34-60"></p><p>中文例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba </span><br><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line">txt = <span class="string">&quot;程序设计语言是计算机能够理解和\</span></span><br><span class="line"><span class="string">识别用户操作意图的一种交互体系，它按照\</span></span><br><span class="line"><span class="string">特定规则组织计算机指令，使计算机能够自\</span></span><br><span class="line"><span class="string">动进行各种运算处理。&quot;</span></span><br><span class="line">w = wordcloud.WordCloud( width=<span class="number">1000</span>,\</span><br><span class="line">    font_path=<span class="string">&quot;msyh.ttc&quot;</span>,height=<span class="number">700</span>)</span><br><span class="line">w.generate(<span class="string">&quot; &quot;</span>.join(jieba.lcut(txt)))</span><br><span class="line">w.to_file(<span class="string">&quot;D:\mypycode\mywordcloud\pywcloud.png&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://bu.dusays.com/2023/04/20/64412e98ebea2.png" alt="34-61.png"></p><p>【实例】 有形状的词云</p><p>代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line"><span class="keyword">from</span> imageio <span class="keyword">import</span> imread</span><br><span class="line">mk = imread(<span class="string">&quot;D:\mypycode\mywordcloud\guoba.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;D:\mypycode\\threekingdomscnt\\threekingdoms.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">t = f.read()</span><br><span class="line">f.close()</span><br><span class="line">ls = jieba.lcut(t)</span><br><span class="line">txt = <span class="string">&quot; &quot;</span>.join(ls)</span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">&#x27;!&quot;#——$%&amp;（。），()*+,-./:;；&lt;：《》、=&gt;?？@[\\]^_‘&#123;|&#125;~！“”&#x27;</span>:</span><br><span class="line">    txt = txt.replace(ch, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">w = wordcloud.WordCloud(font_path=<span class="string">&quot;msyh.ttc&quot;</span>, mask=mk, width=<span class="number">1000</span>, height=<span class="number">700</span>, background_color=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">w.generate(txt)</span><br><span class="line">w.to_file(<span class="string">&quot;D:\mypycode\mywordcloud\\test3img.png&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果（<a href="https://loveofpeach.github.io/posts/47c25c56.html">这个图形是我之前用 Python 代码生成的</a>）：</p><p><img src="https://bu.dusays.com/2023/04/20/644144525c992.png" alt="34-62.png"></p><p>在上面的例子中，用到了<code>imageio</code>。下面简单介绍之。</p><p>安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install imageio</span><br></pre></td></tr></table></figure><p>官方文档：<a href="https://imageio.readthedocs.io/en/stable/examples.html">https://imageio.readthedocs.io/en/stable/examples.html</a></p><p>图片的保存：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> imageio <span class="keyword">import</span> imread,imsave</span><br><span class="line"></span><br><span class="line">im = imread(<span class="string">&#x27;D:\mypycode\imageiostuff\Lumine.png&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(im.shape)</span><br><span class="line">imsave(<span class="string">&#x27;D:\mypycode\imageiostuff\Lumine_copy.png&#x27;</span>,im)</span><br></pre></td></tr></table></figure><p>输出结果1（打印信息，在terminal中显示。warning已略去）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1910, 987, 4)</span><br></pre></td></tr></table></figure><p>输出结果2（在对应目录下可以找到 Lumine_copy.png）：</p><p><img src="https://bu.dusays.com/2023/04/20/64414dfe3c9e2.png" alt="34-63.png" title="Lumine_copy.png"></p><p><code>shape</code>里的1910,987，指的是图片的像素，高度是1910像素，宽度是987像素。</p><p><code>shape</code>里还剩下一个4，指的是颜色通道。</p><p>png 图片比 jpg 多了一个 Alpha 通道， 一个 RGB 颜色模型的真彩图形，用由红、绿、蓝三个色彩信息通道合成的，每个通道用了8位色彩深度，共计24位，包含了所有彩色信息。为实现图形的透明效果，png 图片采取在图形文件的处理与存储中附加上另一个8位信息的方法，这个附加的代表图形中各个素点透明度的通道信息就被叫做 Alpha 通道。</p><p>这里的<code>im</code>是<code>numpy.ndarray</code>，即上面的代码，我们使用 imageio 把一个图片转换成一个多维数组。把一张图片，转换为了数字格式。</p><p>以下只是我个人的理解，好像有那么一点道理，反正能说服我自己。不保证正确（不如说如果正确那还真是巧了）：</p><p><img src="https://bu.dusays.com/2023/04/21/64424e8256524.png" alt="34-63dot5.png"></p><p>图片的修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> imageio <span class="keyword">import</span> imread,imsave,imwrite</span><br><span class="line"></span><br><span class="line">im = imread(<span class="string">&#x27;D:\mypycode\imageiostuff\Lumine.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">im_r = im.copy()</span><br><span class="line">im_g = im.copy()</span><br><span class="line">im_b = im.copy()</span><br><span class="line">im_a = im.copy()</span><br><span class="line"></span><br><span class="line">im_r[:,:,<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">im_r[:,:,<span class="number">2</span>] = <span class="number">0</span></span><br><span class="line">imsave(<span class="string">&#x27;D:\mypycode\imageiostuff\Lumine_r.png&#x27;</span>,im_r)</span><br><span class="line"></span><br><span class="line">im_g[:,:,<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">im_g[:,:,<span class="number">2</span>] = <span class="number">0</span></span><br><span class="line">imsave(<span class="string">&#x27;D:\mypycode\imageiostuff\Lumine_g.png&#x27;</span>,im_g)</span><br><span class="line"></span><br><span class="line">im_b[:,:,<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">im_b[:,:,<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">imwrite(<span class="string">&#x27;D:\mypycode\imageiostuff\Lumine_b.png&#x27;</span>,im_b)</span><br><span class="line"><span class="comment"># imwrite 和 imsave 似乎效果一样</span></span><br><span class="line"></span><br><span class="line">im_a[:,:,<span class="number">3</span>] = <span class="number">0.5</span>*<span class="number">255</span>  <span class="comment"># 将 alpha 通道值设置为半透明</span></span><br><span class="line">imsave(<span class="string">&#x27;D:\mypycode\imageiostuff\Lumine_a.png&#x27;</span>,im_a)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/04/20/64415e9b07a2e.png" alt="34-64.png" title="上面代码的输出结果"></p><p>注意：将一个图像保存为具有透明度的 PNG 格式时，必须将 alpha 通道的值归一化为<code>[0, 255]</code>范围内。因此，将一个 alpha 通道的值设置为 0.5 并不会生效。需要将其乘以 255，以将其值转换为<code>[0, 255]</code>范围中。</p><p>图片压缩。例如，我们需要压缩如下的图片：</p><p><img src="https://bu.dusays.com/2023/04/21/64422102087e2.jpeg" alt="34-65.jpeg" title="LLPaimon.jpeg"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> imageio <span class="keyword">import</span> imread,imwrite</span><br><span class="line"></span><br><span class="line">im = imread(<span class="string">&#x27;D:\mypycode\imageiostuff\LLPaimon.jpeg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">imwrite(<span class="string">&#x27;D:\mypycode\imageiostuff\LLPaimon_25.jpeg&#x27;</span>,im,quality=<span class="number">25</span>)</span><br><span class="line">imwrite(<span class="string">&#x27;D:\mypycode\imageiostuff\LLPaimon_50.jpeg&#x27;</span>,im,quality=<span class="number">50</span>)</span><br><span class="line">imwrite(<span class="string">&#x27;D:\mypycode\imageiostuff\LLPaimon_75.jpeg&#x27;</span>,im,quality=<span class="number">75</span>)</span><br><span class="line">imwrite(<span class="string">&#x27;D:\mypycode\imageiostuff\LLPaimon_100.jpeg&#x27;</span>,im,quality=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/04/21/644224a997399.png" alt="34-66.png" title="上面代码的输出结果"></p><p>注意：在上面的例子中，我们压缩了 jpg/jpeg 文件，但若要压缩 png 文件，不能依葫芦画瓢简单地改一下文件名就行（至少目前的 imageio 版本是这样）。可能相关的讨论：</p><p><a href="https://stackoverflow.com/questions/35859140/remove-transparency-alpha-from-any-image-using-pil">https://stackoverflow.com/questions/35859140/remove-transparency-alpha-from-any-image-using-pil</a></p><p>将多个PNG图片转为GIF。代码（改编自<a href="https://cloud.tencent.com/developer/article/1468285">这里</a>）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_gif</span>(<span class="params">source, name, myduration</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成gif的函数，原始图片仅支持png</span></span><br><span class="line"><span class="string">    source: 为png图片列表（排好序）</span></span><br><span class="line"><span class="string">    name: 生成的文件名称</span></span><br><span class="line"><span class="string">    myduration: 每张图片之间的时间间隔</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    frames = []  <span class="comment"># 读入缓冲区</span></span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> source:</span><br><span class="line">        frames.append(imageio.imread(img))</span><br><span class="line">    imageio.mimsave(name, frames, <span class="string">&#x27;GIF&#x27;</span>, duration=myduration)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;done&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">or_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    or_path: 目标的文件夹</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    path = os.chdir(or_path)</span><br><span class="line">    pic_list = os.listdir()</span><br><span class="line">    gif_name = <span class="built_in">input</span>(<span class="string">&quot;Name the target file (end with .gif) :&quot;</span>)</span><br><span class="line">    duration_time = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;Give the duration_time (0.5 recommended) :&quot;</span>))</span><br><span class="line">    create_gif(pic_list, gif_name, duration_time)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parm_list = sys.argv</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(parm_list) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Please enter the folder you want to process !&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        main(parm_list[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>考虑如下图片：</p><p><img src="https://bu.dusays.com/2023/04/21/644262aa55b7b.png" alt="34-67.png"></p><p>运行上面的代码：</p><p><img src="https://bu.dusays.com/2023/04/21/644262aa39cd8.png" alt="34-68.png"></p><p>最终效果：</p><p><img src="https://bu.dusays.com/2023/04/21/644262ac167b5.gif" alt="34-69.gif" title="keqing_e.gif"></p><h2 id="第三方库与计算生态概览"><a href="#第三方库与计算生态概览" class="headerlink" title="第三方库与计算生态概览"></a>第三方库与计算生态概览</h2><h3 id="Python第三方库安装"><a href="#Python第三方库安装" class="headerlink" title="Python第三方库安装"></a>Python第三方库安装</h3><p>pip 安装方法：略。</p><p>文件安装方法（有些第三方库用 pip 可以下载，但无法安装？）：</p><ul><li>pip下载后可得到可执行文件(pip)、源代码</li><li>源代码则需要编译再安装</li><li>如果操作系统没有编译环境，虽能下载但不能安装</li><li>可以直接下载编译后的版本用于安装吗？</li></ul><p><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p><p>实例：安装 wordcloud 库</p><ul><li>步骤1：在UCI页面上搜索wordcloud</li><li>步骤2：下载对应版本的文件放入pip路径</li><li>步骤3：使用pip install &lt;文件名&gt;安装</li></ul><p>集成安装方法（结合特定 Python 开发工具的批量安装）：</p><ul><li>Anaconda 网址：<a href="https://www.continuum.io">https://www.continuum.io</a></li><li>支持近800个第三方库</li><li>包含多个主流工具</li><li>适合数据计算领域开发</li></ul><h3 id="Python社区"><a href="#Python社区" class="headerlink" title="Python社区"></a>Python社区</h3><p>Python社区：</p><ul><li>13万个第三方库 <a href="https://pypi.org/">https://pypi.org/</a></li></ul><p>实例：开发与区块链相关的程序</p><ul><li>第1步：在 pypi.org 搜索 blockchain</li><li>第2步：挑选适合开发目标的第三方库作为基础</li><li>第3步：完成自己需要的功能</li></ul><h3 id="程序设计模式"><a href="#程序设计模式" class="headerlink" title="程序设计模式"></a>程序设计模式</h3><p><img src="https://bu.dusays.com/2023/04/28/644b8e1713b7e.png" alt="34-69.png" title="自顶向下"></p><p>模块化设计：</p><ul><li>通过函数或对象封装将程序划分为模块及模块间的表达</li><li>具体包括：主程序、子程序和子程序间关系</li><li>分而治之：一种分而治之、分层抽象、体系化的设计思想</li><li>紧耦合：两个部分之间交流很多，无法独立存在</li><li>松耦合：两个部分之间交流较少，可以独立存在</li><li>模块内部紧耦合、模块之间松耦合</li></ul><p>配置化设计：</p><ul><li>引擎+配置：程序执行和配置分离，将可选参数配置化</li><li>将程序开发变成配置文件编写，扩展功能而不修改程序</li><li>关键在于接口设计，清晰明了、灵活可扩展</li></ul><h3 id="Python的第三方库"><a href="#Python的第三方库" class="headerlink" title="Python的第三方库"></a>Python的第三方库</h3><h4 id="从数据处理到人工智能"><a href="#从数据处理到人工智能" class="headerlink" title="从数据处理到人工智能"></a>从数据处理到人工智能</h4><p><strong>Numpy</strong>：表达N维数组的最基础库</p><p><strong>Pandas</strong>：Python 数据分析高层次应用库</p><ul><li>提供了简单易用的数据结构和数据分析工具</li><li>理解数据类型与索引的关系，操作索引即操作数据</li><li>Python最主要的数据分析功能库，基于Numpy开发</li></ul><p><strong>SciPy</strong>：数学、科学和工程计算功能库</p><ul><li>提供了一批数学算法及工程数据运算功能</li><li>类似Matlab，可用于如傅里叶变换、信号处理等应用</li><li>Python最主要的科学计算功能库，基于Numpy开发</li></ul><p><strong>Matplotlib</strong>：高质量的二维数据可视化功能库</p><ul><li>提供了超过100种数据可视化展示效果</li><li>通过matplotlib.pyplot子库调用各可视化效果</li><li>Python最主要的数据可视化功能库，基于Numpy开发</li></ul><p><img src="https://bu.dusays.com/2023/04/28/644b930eae457.png" alt="34-70.png"></p><p><strong>Seaborn</strong>：统计类数据可视化功能库</p><ul><li>提供了一批高层次的统计类数据可视化展示效果</li><li>主要展示数据间分布、分类和线性关系等内容</li><li>基于Matplotlib开发，支持Numpy和Pandas</li></ul><p><strong>Mayavi</strong>：三维科学数据可视化功能库</p><ul><li>提供了一批简单易用的3D科学计算数据可视化展示效果</li><li>目前版本是Mayavi2，三维可视化最主要的第三方库</li><li>支持Numpy、TVTK、Traits、Envisage等第三方库</li></ul><p><img src="https://bu.dusays.com/2023/04/28/644b93c0f01a8.png" alt="34-71.png"></p><p><strong>PyPDF2</strong>：用来处理pdf文件的工具集</p><ul><li>提供了一批处理PDF文件的计算功能</li><li>支持获取信息、分隔/整合文件、加密解密等</li><li>完全Python语言实现，不需要额外依赖，功能稳定</li><li><a href="http://mstamy2.github.io/PyPDF2">http://mstamy2.github.io/PyPDF2</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyPDF2 <span class="keyword">import</span> PdfFileReader, PdfFileMerger</span><br><span class="line">merger = PdfFileMerger()</span><br><span class="line">input1 = <span class="built_in">open</span>(<span class="string">&quot;document1.pdf&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">input2 = <span class="built_in">open</span>(<span class="string">&quot;document2.pdf&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">merger.append(fileobj = input1, pages = (<span class="number">0</span>,<span class="number">3</span>))</span><br><span class="line">merger.merge(position = <span class="number">2</span>, fileobj = input2, pages = (<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">output = <span class="built_in">open</span>(<span class="string">&quot;document-output.pdf&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">merger.write(output)</span><br></pre></td></tr></table></figure><p><strong>NLTK</strong>：自然语言文本处理第三方库</p><ul><li>提供了一批简单易用的自然语言文本处理功能</li><li>支持语言文本分类、标记、语法句法、语义分析等</li><li>最优秀的Python自然语言处理库</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> treebank</span><br><span class="line">t = treebank.parsed_sents(<span class="string">&#x27;wsj_0001.mrg&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">t.draw()</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/04/28/644b96cc7854f.png" alt="34-72.png"></p><p><strong>Python-docx</strong>：创建或更新Microsoft Word文件的第三方库</p><ul><li>提供创建或更新.doc .docx等文件的计算功能</li><li>增加并配置段落、图片、表格、文字等，功能全面</li><li><a href="http://python-docx.readthedocs.io/en/latest/index.html">http://python-docx.readthedocs.io/en/latest/index.html</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line">document = Document()</span><br><span class="line">document.add_heading(<span class="string">&#x27;Document Title&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">p = document.add_paragraph(<span class="string">&#x27;A plain paragraph having some &#x27;</span>)</span><br><span class="line">document.add_page_break()</span><br><span class="line">document.save(<span class="string">&#x27;demo.docx&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>Scikit-learn</strong>：机器学习方法工具集</p><ul><li>提供一批统一化的机器学习方法功能接口</li><li>提供聚类、分类、回归、强化学习等计算功能</li><li>机器学习最基本且最优秀的Python第三方库</li></ul><p><strong>TensorFlow</strong>：AlphaGo背后的机器学习计算框架</p><ul><li>谷歌公司推动的开源机器学习框架</li><li>将数据流图作为基础，图节点代表运算，边代表张量</li><li>应用机器学习方法的一种方式，支撑谷歌人工智能应用</li><li><a href="https://www.tensorflow.org/">https://www.tensorflow.org/</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line">res = sess.run(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;result:&#x27;</span>, res)</span><br></pre></td></tr></table></figure><p><strong>MXNet</strong>：基于神经网络的深度学习计算框架</p><ul><li>提供可扩展的神经网络及深度学习计算功能</li><li>可用于自动驾驶、机器翻译、语音识别等众多领域</li><li>Python最重要的深度学习计算框架</li><li><a href="https://mxnet.incubator.apache.org/">https://mxnet.incubator.apache.org/</a></li></ul><h4 id="从Web解析到网络空间"><a href="#从Web解析到网络空间" class="headerlink" title="从Web解析到网络空间"></a>从Web解析到网络空间</h4><p><strong>Requests</strong>: 最友好的网络爬虫功能库</p><ul><li>提供了简单易用的类HTTP协议网络爬虫功能</li><li>支持连接池、SSL、Cookies、HTTP(S)代理等</li><li>Python最主要的页面级网络爬虫功能库</li><li><a href="http://www.python-requests.org/">http://www.python-requests.org/</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://api.github.com/user&#x27;</span>,\</span><br><span class="line">                 auth=(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>))</span><br><span class="line">r.status_code</span><br><span class="line">r.headers[<span class="string">&#x27;content-type&#x27;</span>]</span><br><span class="line">r.encoding</span><br><span class="line">r.text</span><br></pre></td></tr></table></figure><p><strong>Scrapy</strong>: 优秀的网络爬虫框架</p><ul><li>提供了构建网络爬虫系统的框架功能，功能半成品</li><li>支持批量和定时网页爬取、提供数据处理流程等</li><li>Python最主要且最专业的网络爬虫框架</li><li><a href="https://scrapy.org">https://scrapy.org</a></li></ul><p><strong>pyspider</strong>：强大的Web页面爬取系统</p><ul><li>提供了完整的网页爬取系统构建功能</li><li>支持数据库后端、消息队列、优先级、分布式架构等</li><li>Python重要的网络爬虫类第三方库</li><li><a href="http://docs.pyspider.org">http://docs.pyspider.org</a></li></ul><p><strong>Beautiful Soup</strong>：HTML和XML的解析库</p><ul><li>提供了解析HTML和XML等Web信息的功能</li><li>又名beautifulsoup4或bs4，可以加载多种解析引擎</li><li>常与网络爬虫库搭配使用，如Scrapy、requests等</li><li><a href="https://www.crummy.com/software/BeautifulSoup/bs4">https://www.crummy.com/software/BeautifulSoup/bs4</a></li></ul><p><img src="https://bu.dusays.com/2023/04/28/644ba8fac1da8.png" alt="34-73.png"></p><p><strong>Re</strong>：正则表达式解析和处理功能库</p><ul><li>提供了定义和解析正则表达式的一批通用功能</li><li>可用于各类场景，包括定点的Web信息提取</li><li>Python最主要的标准库之一，无需安装</li><li><a href="https://docs.python.org/3.6/library/re.html">https://docs.python.org/3.6/library/re.html</a></li></ul><p><strong>Python-Goose</strong>：提取文章类型Web页面的功能库</p><ul><li>提供了对Web页面中文章信息/视频等元数据的提取功能</li><li>针对特定类型Web页面，应用覆盖面较广</li><li>Python最主要的Web信息提取库</li><li><a href="https://github.com/grangier/python-goose">https://github.com/grangier/python-goose</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> goose <span class="keyword">import</span> Goose</span><br><span class="line">url = <span class="string">&#x27;http://www.elmundo.es/elmundo/2012/10/28/espana/1351388909.html&#x27;</span></span><br><span class="line">g = Goose(&#123;<span class="string">&#x27;use_meta_language&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;target_language&#x27;</span>:<span class="string">&#x27;es&#x27;</span>&#125;)</span><br><span class="line">article = g.extract(url=url)</span><br><span class="line">article.cleaned_text[:<span class="number">150</span>]</span><br></pre></td></tr></table></figure><p><strong>Django</strong>：最流行的Web应用框架</p><ul><li>提供了构建Web系统的基本应用框架</li><li>MTV模式：模型(model)、模板(Template)、视图(Views)</li><li>Python最重要的Web应用框架，略微复杂的应用框架</li><li><a href="https://www.djangoproject.com">https://www.djangoproject.com</a></li></ul><p><strong>Pyramid</strong>：规模适中的Web应用框架</p><ul><li>提供了简单方便构建Web系统的应用框架</li><li>不大不小，规模适中，适合快速构建并适度扩展类应用</li><li>Python产品级Web应用框架，起步简单可扩展性好</li><li><a href="https://trypyramid.com/">https://trypyramid.com/</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10行左右Hello Word程序</span></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"><span class="keyword">from</span> pyramid.config <span class="keyword">import</span> Configurator</span><br><span class="line"><span class="keyword">from</span> pyramid.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> Response(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> Configurator() <span class="keyword">as</span> config:</span><br><span class="line">        config.add_route(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        config.add_view(hello_world, route_name=<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">        app = config.make_wsgi_app()</span><br><span class="line">    server = make_server(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">6543</span>, app)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><p><strong>Flask</strong>：Web应用开发微框架</p><ul><li>提供了最简单构建Web系统的应用框架</li><li>特点是：简单、规模小、快速</li><li>Django &gt; Pyramid &gt; Flask</li><li><a href="http://flask.pocoo.org">http://flask.pocoo.org</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>WeRoBot</strong>：微信公众号开发框架</p><ul><li>提供了解析微信服务器消息及反馈消息的功能</li><li>建立微信机器人的重要技术手段</li><li><a href="https://github.com/offu/WeRoBot">https://github.com/offu/WeRoBot</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对微信每个消息反馈一个Hello World</span></span><br><span class="line"><span class="keyword">import</span> werobot</span><br><span class="line">robot = werobot.WeRoBot(token=<span class="string">&#x27;tokenhere&#x27;</span>)</span><br><span class="line"><span class="meta">@robot.handler</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>aip</strong>：百度AI开放平台接口</p><ul><li>提供了访问百度AI服务的Python功能接口</li><li>语音、人脸、OCR、NLP、知识图谱、图像搜索等领域</li><li>Python百度AI应用的最主要方式</li><li><a href="https://github.com/Baidu-AIP/python-sdk">https://github.com/Baidu-AIP/python-sdk</a></li></ul><p><strong>MyQR</strong>：二维码生成第三方库</p><ul><li>提供了生成二维码的系列功能</li><li>基本二维码、艺术二维码和动态二维码</li><li><a href="https://github.com/sylnsfar/qrcode">https://github.com/sylnsfar/qrcode</a></li></ul><h4 id="从人机交互到艺术设计"><a href="#从人机交互到艺术设计" class="headerlink" title="从人机交互到艺术设计"></a>从人机交互到艺术设计</h4><p><strong>PyQt5</strong>：Qt开发框架的Python接口</p><ul><li>提供了创建Qt5程序的Python API接口</li><li>Qt是非常成熟的跨平台桌面应用开发系统，完备GUI</li><li>推荐的Python GUI开发第三方库</li><li><a href="https://www.riverbankcomputing.com/software/pyqt">https://www.riverbankcomputing.com/software/pyqt</a></li></ul><p><strong>wxPython</strong>：跨平台GUI开发框架</p><ul><li>提供了专用于Python的跨平台GUI开发框架</li><li><a href="https://www.wxpython.org">https://www.wxpython.org</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line">app = wx.App(<span class="literal">False</span>)</span><br><span class="line">frame = wx.Frame(<span class="literal">None</span>, wx.ID_ANY, <span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">frame.Show(<span class="literal">True</span>)</span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><p><strong>PyGObject</strong>：使用GTK+开发GUI的功能库</p><ul><li>提供了整合GTK+、WebKitGTK+等库的功能</li><li>GTK+：跨平台的一种用户图形界面GUI框架</li><li>实例：Anaconda采用该库构建GUI</li><li><a href="https://pygobject.readthedocs.io">https://pygobject.readthedocs.io</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gi</span><br><span class="line">gi.require_version(<span class="string">&quot;Gtk&quot;</span>, <span class="string">&quot;3.0&quot;</span>)</span><br><span class="line"><span class="keyword">from</span> gi.repository <span class="keyword">import</span> Gtk</span><br><span class="line">window = Gtk.Window(title=<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">window.show()</span><br><span class="line">window.connect(<span class="string">&quot;destroy&quot;</span>, Gtk.main_quit)</span><br><span class="line">Gtk.main()</span><br></pre></td></tr></table></figure><p><strong>PyGame</strong>：简单的游戏开发功能库</p><ul><li>提供了基于SDL的简单游戏开发功能及实现引擎</li><li>理解游戏对外部输入的响应机制及角色构建和交互机制</li><li>Python游戏入门最主要的第三方库</li><li><a href="http://www.pygame.org">http://www.pygame.org</a></li></ul><p><strong>Panda3D</strong>：开源、跨平台的3D渲染和游戏开发库</p><ul><li>一个3D游戏引擎，提供Python和C++两种接口</li><li>支持很多先进特性：法线贴图、光泽贴图、卡通渲染等</li><li>由迪士尼和卡尼基梅隆大学共同开发</li><li><a href="http://www.panda3d.org">http://www.panda3d.org</a></li></ul><p><strong>cocos2d</strong>：构建2D游戏和图形界面交互式应用的框架</p><ul><li>提供了基于OpenGL的游戏开发图形渲染功能</li><li>支持GPU加速，采用树形结构分层管理游戏对象类型</li><li>适用于2D专业级游戏开发</li><li><a href="http://python.cocos2d.org/">http://python.cocos2d.org/</a></li></ul><p><strong>VR Zero</strong>：在树莓派上开发VR应用的Python库</p><ul><li>提供大量与VR开发相关的功能</li><li>针对树莓派的VR开发库，支持设备小型化，配置简单化</li><li>非常适合初学者实践VR开发及应用</li><li><a href="https://github.com/WayneKeenan/python-vrzero">https://github.com/WayneKeenan/python-vrzero</a></li></ul><p><strong>pyovr</strong>：Oculus Rift的Python开发接口</p><ul><li>针对Oculus VR设备的Python开发库</li><li>基于成熟的VR设备，提供全套文档，工业级应用设备</li><li>Python+虚拟现实领域探索的一种思路</li><li><a href="https://github.com/cmbruns/pyovr">https://github.com/cmbruns/pyovr</a></li></ul><p><strong>Vizard</strong>：基于Python的通用VR开发引擎</p><ul><li>专业的企业级虚拟现实开发引擎</li><li>提供详细的官方文档</li><li>支持多种主流的VR硬件设备，具有一定通用性</li><li><a href="http://www.worldviz.com/vizard-virtual-reality-software">http://www.worldviz.com/vizard-virtual-reality-software</a></li></ul><p><strong>Quads</strong>：迭代的艺术</p><ul><li>对图片进行四分迭代，形成像素风</li><li>可以生成动图或静图图像</li><li>简单易用，具有很高展示度</li><li><a href="https://github.com/fogleman/Quads">https://github.com/fogleman/Quads</a></li></ul><p><strong>ascii_art</strong>：ASCII艺术库</p><ul><li>将普通图片转为ASCII艺术风格</li><li>输出可以是纯文本或彩色文本</li><li>可采用图片格式输出</li><li><a href="https://github.com/jontonsoup4/ascii_art">https://github.com/jontonsoup4/ascii_art</a></li></ul><p><img src="https://bu.dusays.com/2023/04/28/644bb4019cb8c.png" alt="34-74.png"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散数学笔记</title>
      <link href="/posts/de63d40a.html"/>
      <url>/posts/de63d40a.html</url>
      
        <content type="html"><![CDATA[<p>先贴作业，笔记在后面。</p><h2 id="离散作业-1"><a href="#离散作业-1" class="headerlink" title="离散作业 1"></a>离散作业 1</h2><p><img src="https://bu.dusays.com/2023/03/18/6415bbb5ded66.jpg" alt="离散作业1-1.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bbb60d6a3.jpg" alt="离散作业1-2.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bbb61e3ab.jpg" alt="离散作业1-3.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bbb629498.jpg" alt="离散作业1-4.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bbb62ae6b.jpg" alt="离散作业1-5.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bbb622e60.jpg" alt="离散作业1-6.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bbb60d82a.jpg" alt="离散作业1-7.jpg"></p><h2 id="离散作业-2"><a href="#离散作业-2" class="headerlink" title="离散作业 2"></a>离散作业 2</h2><p><img src="https://bu.dusays.com/2023/03/18/6415bf98970ea.jpg" alt="离散作业2-1.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bc6f17645.jpg" alt="离散作业2-2.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bc6f0f3ad.jpg" alt="离散作业2-3.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bc6f31276.jpg" alt="离散作业2-4.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bc6f32e07.jpg" alt="离散作业2-5.jpg"></p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>Pure love but limited.</p><p>博主的分析思路：（有点民科的感觉有木有OvO）</p><p><img src="https://bu.dusays.com/2023/03/22/641a87e0913e6.jpg" alt="33-1.jpg"></p><p><img src="https://bu.dusays.com/2023/03/22/641a89929c2ba.jpg" alt="33-2.jpg"></p><p>上面这种思路或许可以给出构造解。</p><p><strong>注意：证明有误。在修了，目前有点思路。</strong></p><p>老师的解答：</p><p>设有 $m$ 个小伙 $b_1,b_2,\cdots ,b_m$ ，有 $n$ 个姑娘 $g_1,g_2,\cdots ,g_n$. 设和第 $i$ 个小伙 $b_i$ 跳过舞的姑娘的集合为 $G_i$ ，其中 $i=1,2,\cdots ,m$. </p><p>对 $G_1,G_2,\cdots ,G_m$ 有两种情况：</p><p>$\mathcal{A}:$</p><p>存在 $1\leqslant i&lt;j\leqslant m$ ，使得 $G_i\nsubseteq G_j$ 且 $G_j\nsubseteq G_i$ .</p><p>于是存在 $g_k\in G_i$ 但 $g_k\notin G_j$ ；存在 $g_l\in G_j$ 但 $g_l\notin G_i$ .</p><p>这样对于小伙 $b_i,b_j$ 和姑娘 $g_k,g_l$ 结论成立 .</p><p>$\mathcal{B}:$</p><p>对任意 $1\leqslant i&lt;j\leqslant m$ ，要么 $G_i\subseteq G_j$ ，要么 $G_j\subseteq G_i$ .</p><p>于是可以按照 $\subseteq$ 排序：</p><script type="math/tex; mode=display">G_{(1)}\subseteq G_{(2)}\subseteq \cdots \subseteq G_{(m)}\subset \{g_1,g_2,\cdots ,g_n\}</script><p>这与题设矛盾。</p><p>综上，结论得证。</p><h2 id="离散作业-3"><a href="#离散作业-3" class="headerlink" title="离散作业 3"></a>离散作业 3</h2><p><img src="https://sway.office.com/s/z5mcBNnQTQa3XoNi/images/c_UYsLcNPqtSpT" alt="离散作业3-1.jpg"></p><p><img src="https://bu.dusays.com/2023/04/23/6444f22f9883e.jpg" alt="离散作业3-2.jpg"></p><p><img src="https://bu.dusays.com/2023/04/23/6444f22fb79af.jpg" alt="离散作业3-3.jpg"></p><p><img src="https://bu.dusays.com/2023/04/23/6444f22fb8bb4.jpg" alt="离散作业3-4.jpg"></p><p><img src="https://bu.dusays.com/2023/04/23/6444f22fc3eb6.jpg" alt="离散作业3-5.jpg"></p><p><img src="https://bu.dusays.com/2023/04/23/6444f22fb0e0a.jpg" alt="离散作业3-6.jpg"></p><p><img src="https://bu.dusays.com/2023/04/23/6444f22fb60a9.jpg" alt="离散作业3-7.jpg"></p><p><img src="https://bu.dusays.com/2023/04/23/6444f22fba0f3.jpg" alt="离散作业3-8.jpg"></p><p><img src="https://bu.dusays.com/2023/04/23/6444f22fb2005.jpg" alt="离散作业3-9.jpg"></p><p><img src="https://bu.dusays.com/2023/04/23/6444f46978bf4.jpg" alt="离散作业3-10.jpg"></p><h2 id="离散作业-4"><a href="#离散作业-4" class="headerlink" title="离散作业 4"></a>离散作业 4</h2><p><img src="https://bu.dusays.com/2023/05/19/64678d33d5f88.jpg" alt="离散作业4-1.jpg"></p><p><img src="https://bu.dusays.com/2023/05/19/64678d33d3db0.jpg" alt="离散作业4-2.jpg"></p><p><img src="https://bu.dusays.com/2023/05/19/64678d33d33de.jpg" alt="离散作业4-3.jpg"></p><p><img src="https://bu.dusays.com/2023/05/19/64678d33adb33.jpg" alt="离散作业4-4.jpg"></p><p><img src="https://bu.dusays.com/2023/05/19/64678d33da38e.jpg" alt="离散作业4-5.jpg"></p><p><img src="https://bu.dusays.com/2023/05/19/64678d33cd9e9.jpg" alt="离散作业4-6.jpg"></p><p><img src="https://bu.dusays.com/2023/05/19/64678d33cb730.jpg" alt="离散作业4-7.jpg"></p><h2 id="离散作业-5"><a href="#离散作业-5" class="headerlink" title="离散作业 5"></a>离散作业 5</h2><p><img src="https://sway.office.com/s/eh3ChgaA3F5nLkWe/images/tJUFjF0PJfYhX8" alt="离散作业5-1.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648348d2da7f0.jpg" alt="离散作业5-2.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648348d2da9fc.jpg" alt="离散作业5-3.jpg"></p><p><img src="https://sway.office.com/s/JH0VebJZPXo1Gbga/images/ESvLfP9UzH4h1-" alt="离散作业5-4.jpg"></p><h2 id="命题逻辑"><a href="#命题逻辑" class="headerlink" title="命题逻辑"></a>命题逻辑</h2><p><img src="https://bu.dusays.com/2023/04/14/643914864b51a.jpg" alt="离散数学（上）-01.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643914870c603.jpg" alt="离散数学（上）-02.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391486ccf15.jpg" alt="离散数学（上）-03.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391486bdc7e.jpg" alt="离散数学（上）-04.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391486e3b61.jpg" alt="离散数学（上）-05.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391487212b8.jpg" alt="离散数学（上）-06.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643914870c2d2.jpg" alt="离散数学（上）-07.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/6439148717542.jpg" alt="离散数学（上）-08.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643914871e9e0.jpg" alt="离散数学（上）-09.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643914872e21c.jpg" alt="离散数学（上）-10.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391694766e5.jpg" alt="离散数学（上）-11.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643916949cb46.jpg" alt="离散数学（上）-12.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391694827b5.jpg" alt="离散数学（上）-13.jpg"></p><p><img src="https://sway.office.com/s/r9EjTYbJPDef3mPK/images/t7T-URoVrRRlcE" alt="离散数学（上）-14.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643916949f534.jpg" alt="离散数学（上）-15.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/6439169491d55.jpg" alt="离散数学（上）-16.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/6439169497307.jpg" alt="离散数学（上）-17.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/6439169497049.jpg" alt="离散数学（上）-18.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391694712c9.jpg" alt="离散数学（上）-19.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/6439169497835.jpg" alt="离散数学（上）-20.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/6439174199658.jpg" alt="离散数学（上）-21.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917416a3ea.jpg" alt="离散数学（上）-22.jpg"></p><h2 id="谓词逻辑"><a href="#谓词逻辑" class="headerlink" title="谓词逻辑"></a>谓词逻辑</h2><p><img src="https://bu.dusays.com/2023/04/14/64391741bcf26.jpg" alt="离散数学（上）-23.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391741d68f0.jpg" alt="离散数学（上）-24.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391741cd4a1.jpg" alt="离散数学（上）-25.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391741f0ff3.jpg" alt="离散数学（上）-26.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/6439174219a3c.jpg" alt="离散数学（上）-27.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/6439174204fb7.jpg" alt="离散数学（上）-28.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/6439174205709.jpg" alt="离散数学（上）-29.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917421dc77.jpg" alt="离散数学（上）-30.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917dc529b8.jpg" alt="离散数学（上）-31.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917dbbb4d1.jpg" alt="离散数学（上）-32.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917dc7d000.jpg" alt="离散数学（上）-33.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917dd8e7af.jpg" alt="离散数学（上）-34.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917dde5546.jpg" alt="离散数学（上）-35.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917ddcb754.jpg" alt="离散数学（上）-36.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917ddee78a.jpg" alt="离散数学（上）-37.jpg"></p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p><img src="https://bu.dusays.com/2023/04/14/643917de04649.jpg" alt="离散数学（上）-38.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917de03f29.jpg" alt="离散数学（上）-39.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917ddbf742.jpg" alt="离散数学（上）-40.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643918cb3cfc2.jpg" alt="离散数学（上）-41.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643918cb4a009.jpg" alt="离散数学（上）-42.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643918cb54575.jpg" alt="离散数学（上）-43.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643918cb4a03d.jpg" alt="离散数学（上）-44.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643918cb5043b.jpg" alt="离散数学（上）-45.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643918cb5456b.jpg" alt="离散数学（上）-46.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643918cb58b7c.jpg" alt="离散数学（上）-47.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643918cb550ff.jpg" alt="离散数学（上）-48.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643918cb554ef.jpg" alt="离散数学（上）-49.jpg"></p><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p><img src="https://bu.dusays.com/2023/04/14/643918cb59106.jpg" alt="离散数学（上）-50.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f1df65.jpg" alt="离散数学（上）-51.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f1e002.jpg" alt="离散数学（上）-52.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f2dd7b.jpg" alt="离散数学（上）-53.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f2c203.jpg" alt="离散数学（上）-54.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f2a9b6.jpg" alt="离散数学（上）-55.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f2a11b.jpg" alt="离散数学（上）-56.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f2fe05.jpg" alt="离散数学（上）-57.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f2db03.jpg" alt="离散数学（上）-58.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f2f21d.jpg" alt="离散数学（上）-59.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f2fe16.jpg" alt="离散数学（上）-60.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac172ea7.jpg" alt="离散数学（上）-61.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac185567.jpg" alt="离散数学（上）-62.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac17a580.jpg" alt="离散数学（上）-63.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac183ae4.jpg" alt="离散数学（上）-64.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac193daa.jpg" alt="离散数学（上）-65.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac193953.jpg" alt="离散数学（上）-66.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac19d6a5.jpg" alt="离散数学（上）-67.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac192d8e.jpg" alt="离散数学（上）-68.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac19b803.jpg" alt="离散数学（上）-69.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac197829.jpg" alt="离散数学（上）-70.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391b2526520.jpg" alt="离散数学（上）-71.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391b252653a.jpg" alt="离散数学（上）-72.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391b253097b.jpg" alt="离散数学（上）-73.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391b253abee.jpg" alt="离散数学（上）-74.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391b253b325.jpg" alt="离散数学（上）-75.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391b2527917.jpg" alt="离散数学（上）-76.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391b253c776.jpg" alt="离散数学（上）-77.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391b25354d2.jpg" alt="离散数学（上）-78.jpg"></p><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p><img src="https://bu.dusays.com/2023/06/09/648294e777089.jpg" alt="离散数学（下）-01.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648294e8649ea.jpg" alt="离散数学（下）-02.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648294e8093bf.jpg" alt="离散数学（下）-03.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648294e860264.jpg" alt="离散数学（下）-04.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648294e880072.jpg" alt="离散数学（下）-05.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648294e887b07.jpg" alt="离散数学（下）-06.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648294e87244d.jpg" alt="离散数学（下）-07.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648294e81eee3.jpg" alt="离散数学（下）-08.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648294e84efb5.jpg" alt="离散数学（下）-09.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648294e84c0fc.jpg" alt="离散数学（下）-10.jpg"></p><h2 id="无穷集合"><a href="#无穷集合" class="headerlink" title="无穷集合"></a>无穷集合</h2><p><img src="https://bu.dusays.com/2023/06/09/648295a51f19b.jpg" alt="离散数学（下）-11.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648295a572f31.jpg" alt="离散数学（下）-12.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648295a579812.jpg" alt="离散数学（下）-13.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648295a55ea8d.jpg" alt="离散数学（下）-14.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648295a5b2bfc.jpg" alt="离散数学（下）-15.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648295a5ccd7b.jpg" alt="离散数学（下）-16.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648295a58bcbf.jpg" alt="离散数学（下）-17.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648295a5cd656.jpg" alt="离散数学（下）-18.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648295a5cb7da.jpg" alt="离散数学（下）-19.jpg"></p><h2 id="抽象代数"><a href="#抽象代数" class="headerlink" title="抽象代数"></a>抽象代数</h2><p>这部分是最难理解的，在课堂上跟思路非常耗神。</p><p><img src="https://bu.dusays.com/2023/06/09/648295a5d1107.jpg" alt="离散数学（下）-20.jpg"></p><p><img src="https://sway.office.com/s/NekKUQjiespCFCX9/images/s66lOsCQh31r8t" alt="离散数学（下）-21.jpg"></p><p><img src="https://sway.office.com/s/hUY2LEaqiA7pjT3u/images/j-iZvTJwi58a6w" alt="离散数学（下）-22.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482962fbdef6.jpg" alt="离散数学（下）-23.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482963004d36.jpg" alt="离散数学（下）-24.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482962fe7c68.jpg" alt="离散数学（下）-25.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482963014693.jpg" alt="离散数学（下）-26.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482963026a33.jpg" alt="离散数学（下）-27.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482963028d1c.jpg" alt="离散数学（下）-28.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482963021aba.jpg" alt="离散数学（下）-29.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648296302e3f3.jpg" alt="离散数学（下）-30.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648296cc471ca.jpg" alt="离散数学（下）-31.jpg"></p><p><img src="https://sway.office.com/s/zuHoPErcKK6c80Jm/images/_i0OewB_qbSwGZ" alt="离散数学（下）-32.jpg"></p><p><img src="https://sway.office.com/s/wh4D3JlhTO8BZ7BK/images/RCRsqluWLXgyw-" alt="离散数学（下）-33.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648296cc3e9b4.jpg" alt="离散数学（下）-34.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648296ccb721f.jpg" alt="离散数学（下）-35.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648296cccd5b8.jpg" alt="离散数学（下）-36.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648296ccc29cf.jpg" alt="离散数学（下）-37.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648296cccc437.jpg" alt="离散数学（下）-38.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648296ccb83b2.jpg" alt="离散数学（下）-39.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648296cc6a26d.jpg" alt="离散数学（下）-40.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482973550a77.jpg" alt="离散数学（下）-41.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297355073d.jpg" alt="离散数学（下）-42.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/64829735503ec.jpg" alt="离散数学（下）-43.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482973550465.jpg" alt="离散数学（下）-44.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/64829735914cc.jpg" alt="离散数学（下）-45.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/64829735ac6cf.jpg" alt="离散数学（下）-46.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482973576a98.jpg" alt="离散数学（下）-47.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/64829735ae6b2.jpg" alt="离散数学（下）-48.jpg"></p><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><p>老熟人了。</p><p><img src="https://bu.dusays.com/2023/06/09/64829735aa11f.jpg" alt="离散数学（下）-49.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297357ddfe.jpg" alt="离散数学（下）-50.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297a683b79.jpg" alt="离散数学（下）-51.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297a70d88f.jpg" alt="离散数学（下）-52.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297a683b4e.jpg" alt="离散数学（下）-53.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297a7087cb.jpg" alt="离散数学（下）-54.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297a729dcf.jpg" alt="离散数学（下）-55.jpg"></p><p><img src="https://s2.loli.net/2023/07/09/IbdVauCqQk92jXv.jpg" alt="离散数学（下）-56.jpg"></p><p><img src="https://sway.office.com/s/i01L4UPeSH0tltva/images/CPgK7LVTNmvFZm" alt="离散数学（下）-57.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297a749b88.jpg" alt="离散数学（下）-58.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297a73073f.jpg" alt="离散数学（下）-59.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297a739bd9.jpg" alt="离散数学（下）-60.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297fccae22.jpg" alt="离散数学（下）-61.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297fccaead.jpg" alt="离散数学（下）-62.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297fe2d847.jpg" alt="离散数学（下）-63.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297feb94c1.jpg" alt="离散数学（下）-64.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297feec6ba.jpg" alt="离散数学（下）-65.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297ff1af88.jpg" alt="离散数学（下）-66.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297ff85616.jpg" alt="离散数学（下）-67.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297ff92832.jpg" alt="离散数学（下）-68.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297ff67337.jpg" alt="离散数学（下）-69.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297ff86126.jpg" alt="离散数学（下）-70.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482985157dfe.jpg" alt="离散数学（下）-71.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648298516d06e.jpg" alt="离散数学（下）-72.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648298525e234.jpg" alt="离散数学（下）-73.jpg"></p><p>打问号的地方就是没看懂的地方。这一段有点奇怪，比如那一串点是拓扑排序排好的还是无所谓的呢？可能我的思路进入了莫名其妙的地方。</p><p><img src="https://bu.dusays.com/2023/06/09/6482985241fce.jpg" alt="离散数学（下）-74.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482985322903.jpg" alt="离散数学（下）-75.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648298531b1ac.jpg" alt="离散数学（下）-76.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/64829853511ed.jpg" alt="离散数学（下）-77.jpg"></p><p><img src="https://sway.office.com/s/wh4D3JlhTO8BZ7BK/images/3o7uDPamIv-_L3" alt="离散数学（下）-78.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648298532ddfc.jpg" alt="离散数学（下）-79.jpg"></p><p><img src="https://sway.office.com/s/Awl6oMEljgXAtBdc/images/_QzjeAg3zP_4oX" alt="离散数学（下）-80.jpg"></p><p><img src="https://sway.office.com/s/GOJYEjZgAwWau86Y/images/PxflwWxSTe79aV" alt="离散数学（下）-81.jpg"></p><p><img src="https://sway.office.com/s/du8OjFzPkOfqtGHS/images/p1bxBwrLXVR4zi" alt="离散数学（下）-82.jpg"></p><p><img src="https://sway.office.com/s/TNhgvZjyfJXU7knv/images/RfyI5q3Glw9FMm" alt="离散数学（下）-83.jpg"></p><h2 id="后日谈"><a href="#后日谈" class="headerlink" title="后日谈"></a>后日谈</h2><p>前几节课都是听的线上，我根据声音脑补这是个穿着灰白上衣的瘦高老头，墙上斑驳的石灰一样。结果去了线下，才发现是个头发浓密的青年人，裹一挂蓝色的冲锋衣。有点失望。</p><p>总的来说，这老师讲的还可以。虽然可以说是念 PPT，但他 PPT 写的不错，条理清晰，比教科书好多了。草草翻了翻教科书：跟着这玩意学简直是灾难。</p><p>笔记里除了一个打红色问号的地方，其他证明都跟着推了一遍。</p><p>课程学完已是学期末尾，将要准备答辩。工作的话没有找到，毕竟这专业真的是难就业，摆烂三年多绩点难看，大环境又如此糟糕。当然，找一个达不到个税起征点的工作应该还是能行的，虽然入学的时候觉得学校不行，尤其是录到一个野鸡专业，但除开顶尖的一些人，大多数学生就业还是仰仗学校的名字的。然而，读书这么多年，出来收入和家里小学毕业的打工人差不多，多少还是有点不平衡。</p><p>天气异常炎热，草坪上的洒水管边总会聚几只乘凉的鸟雀。大学颓废的日子里想通了一些问题，但似乎也丢掉了一些对自己的勇气。</p><p>二零二三年六月九日。</p><p>极限毕业了。在教务系统的截止日期前，我催着老师批自己的卷子。这次考试似乎是整个系一张卷子，不同老师批改不同部分，虽然还有题没出分，总归是够及格分了。赶紧开了一张成绩证明，找教务处做了课程替代，把之前挂掉的某门课程改革毙掉的课程替代了。</p><p>临走时，老师朝我挥手：</p><p>“祝你顺利。”</p><p>二零二三年六月二十六日。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SeriesNote</title>
      <link href="/posts/1b45ac71.html"/>
      <url>/posts/1b45ac71.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://bu.dusays.com/2023/05/31/64772a140bf1c.jpg" alt="无穷级数-01.jpg"></p><h2 id="一些概念和性质"><a href="#一些概念和性质" class="headerlink" title="一些概念和性质"></a>一些概念和性质</h2><p><img src="https://bu.dusays.com/2023/05/31/64772a14283c0.jpg" alt="无穷级数-02.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772a1435017.jpg" alt="无穷级数-03.jpg"></p><h2 id="常项级数的审敛法"><a href="#常项级数的审敛法" class="headerlink" title="常项级数的审敛法"></a>常项级数的审敛法</h2><p><img src="https://bu.dusays.com/2023/05/31/64772a142c3f0.jpg" alt="无穷级数-04.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772a1423121.jpg" alt="无穷级数-05.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772a14329e3.jpg" alt="无穷级数-06.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772a142e1a3.jpg" alt="无穷级数-07.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772a1408547.jpg" alt="无穷级数-08.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772a14233e6.jpg" alt="无穷级数-09.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772a1428bba.jpg" alt="无穷级数-10.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772ab7028d1.jpg" alt="无穷级数-11.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772ab7014c7.jpg" alt="无穷级数-12.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772ab6f1352.jpg" alt="无穷级数-13.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772ab6f34a7.jpg" alt="无穷级数-14.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772ab711941.jpg" alt="无穷级数-15.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772ab71349f.jpg" alt="无穷级数-16.jpg"></p><p>【例题】判断级数敛散性 $\sum\limits_{n=1}^\infty \frac{2n+1}{n^4+4n^2}$</p><p>【解 1】 由于 $\lim\limits_{n\to \infty}\frac{\frac{2n+1}{n^4+4n^2}}{1/n^3}=\lim\limits_{n\to \infty}\frac{2n^4+n^3}{n^4+4n^2}=2$ ，而 $\sum\limits_{n=1}^\infty \frac{1}{n^3}$ 收敛，故原级数收敛。</p><p>【解 2】 由于 $\frac{2n+1}{n^4+4n^2}&lt;\frac{2n+n}{n^4}=\frac{3}{n^3}$ ，而 $\sum\limits_{n=1}^\infty \frac{3}{n^3}$ 是收敛的 p 级数，故原级数收敛。</p><p>【例题】判断级数敛散性 $\sum\limits_{n=2}^\infty \frac{1}{\ln^{10}n}$</p><p>【解】 令 $u_n=\frac{1}{\ln^{10}n}$ ，$v_n=\frac{1}{n}$ ，由于 $\lim\limits_{n\to \infty}\frac{u_n}{v_n}=\lim\limits_{n\to \infty}\frac{n}{\ln^{10}n}$ ，而：</p><script type="math/tex; mode=display">\lim\limits_{x\to +\infty}\frac{x}{\ln^{10}x}=\lim\limits_{x\to +\infty}\frac{1}{10\cdot \ln^{9}x\cdot \frac{1}{x}}=\cdots =\lim\limits_{x\to +\infty}\frac{x}{10!}=+\infty</script><p>因此根据海涅定理可知，$\lim\limits_{n\to \infty}\frac{u_n}{v_n}=+\infty$ ，故原级数发散。</p><h2 id="幂级数"><a href="#幂级数" class="headerlink" title="幂级数"></a>幂级数</h2><p><img src="https://bu.dusays.com/2023/05/31/64772ab70d449.jpg" alt="无穷级数-17.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772ab7131bf.jpg" alt="无穷级数-18.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772ab70c92c.jpg" alt="无穷级数-19.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772ab714441.jpg" alt="无穷级数-20.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772b5a1c93b.jpg" alt="无穷级数-21.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772b5a5327d.jpg" alt="无穷级数-22.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772b5a7d3f2.jpg" alt="无穷级数-23.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772b5a56bda.jpg" alt="无穷级数-24.jpg"></p><p>【例题】 求幂级数 $\sum\limits_{n=1}^\infty (-1)^{n-1}\frac{x^{2n-1}}{2n-1}$ 的收敛域及和函数.</p><p>【解】 第一问过程略。该幂级数的收敛域为 $[-1,1]$ .</p><p>设幂级数的和函数为 $S(x)$ ，即 $S(x)=\sum\limits_{n=1}^\infty (-1)^{n-1}\frac{x^{2n-1}}{2n-1}$ ，对幂级数逐项微分，有：</p><script type="math/tex; mode=display">\begin{aligned}S'(x) & = \sum\limits_{n=1}^\infty [(-1)^{n-1}\frac{x^{2n-1}}{2n-1}]'=\sum\limits_{n=1}^\infty (-1)^{n-1}x^{2n-2} \\     & = \sum\limits_{n=0}^\infty (-1)^nx^{2n}=\sum\limits_{n=0}^\infty (-x^2)^n=\frac{1}{1+x^2} \\\end{aligned}</script><p>上式两边从 0 到 $x$ 积分得</p><script type="math/tex; mode=display">S(x)-S(0)=\int_{0}^{x} S'(x)\, {\rm d}x=\int_{0}^{x} \frac{1}{1+x^2}\, {\rm d}x</script><p>注意到 $S(0)=0$ ，有</p><script type="math/tex; mode=display">S(x)-S(0)=\arctan x|_{0}^{x}=\arctan x</script><p>因此该级数的和函数为$S(x)=\arctan x ,x\in [-1,1]$ .</p><p>【例】 一个奇怪的技巧：</p><script type="math/tex; mode=display">\sum\limits_{n=1}^\infty (-1)^nx^{2n-1}=(-x)\sum\limits_{n=1}^\infty (-x^2)^{n-1}=-\frac{x}{1+x^2}</script><p>【例题】 求常数项级数 $\sum\limits_{n=1}^\infty (-1)^{n-1}\frac{1}{3^n(2n-1)}$ 的和</p><p>【解】 构造幂级数 $\sum\limits_{n=1}^\infty (-1)^{n-1}\frac{x^{2n-1}}{2n-1}$ ，并设幂级数的和函数为 $S(x)$ ，即</p><script type="math/tex; mode=display">S(x)=\sum\limits_{n=1}^\infty (-1)^{n-1}\frac{x^{2n-1}}{2n-1}</script><p>由上面题目知：</p><script type="math/tex; mode=display">S(x)=\arctan x , x\in [-1,1]</script><p>因此</p><script type="math/tex; mode=display">\begin{aligned}\sum\limits_{n=1}^\infty (-1)^{n-1}\frac{1}{3^n(2n-1)} & = \frac{1}{\sqrt{3}}\sum\limits_{n=1}^\infty (-1)^{n-1}\frac{(\frac{1}{\sqrt{3}})^{2n-1}}{2n-1}=\frac{1}{\sqrt{3}}S(\frac{1}{\sqrt{3}}) \\     & = \frac{1}{\sqrt{3}}\arctan (\frac{1}{\sqrt{3}})=\frac{\sqrt{3}}{18}\pi \\\end{aligned}</script><h2 id="函数展开成幂级数"><a href="#函数展开成幂级数" class="headerlink" title="函数展开成幂级数"></a>函数展开成幂级数</h2><p><img src="https://bu.dusays.com/2023/05/31/64772b5a79774.jpg" alt="无穷级数-25.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772b5a6c8ff.jpg" alt="无穷级数-26.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772b5a80a04.jpg" alt="无穷级数-27.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772b5a80acb.jpg" alt="无穷级数-28.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772b5a6e2c0.jpg" alt="无穷级数-29.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772b5a7a231.jpg" alt="无穷级数-30.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772beae517f.jpg" alt="无穷级数-31.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772beae939a.jpg" alt="无穷级数-32.jpg"></p><p>【例题】将 $f(x)=(1+x)e^x$ 展开成 $x$ 的幂级数</p><p>【解】 由于 $f(x)=e^x+xe^x$ ，而 $e^x=\sum\limits_{n=0}^\infty \frac{x^n}{n!}$ ，$x\in R$ ，所以</p><center>（技巧：写开）</center><script type="math/tex; mode=display">\begin{aligned}f(x) & = \sum\limits_{n=0}^\infty \frac{x^n}{n!}+x\sum\limits_{n=0}^\infty \frac{x^n}{n!} \\     & = 1+\frac{x}{1!}+\frac{x^2}{2!}+\frac{x^3}{3!}+\cdots +x(1+\frac{x}{1!}+\frac{x^2}{2!}+\frac{x^3}{3!}+\cdots) \\     & = 1+(\frac{1}{1!}+1)x+(\frac{1}{2!}+\frac{1}{1!})x^2+(\frac{1}{3!}+\frac{1}{2!})x^3+\cdots \\     & = 1+\sum\limits_{n=1}^\infty \frac{n+1}{n!}x^n ,\quad x\in (-\infty,\infty) \\\end{aligned}</script><h2 id="函数的幂级数展开式的应用"><a href="#函数的幂级数展开式的应用" class="headerlink" title="函数的幂级数展开式的应用"></a>函数的幂级数展开式的应用</h2><p><img src="https://bu.dusays.com/2023/05/31/64772beaecc42.jpg" alt="无穷级数-33.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772beb0e911.jpg" alt="无穷级数-34.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772beb05a1e.jpg" alt="无穷级数-35.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772beb0c8b1.jpg" alt="无穷级数-36.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772beb0ffb4.jpg" alt="无穷级数-37.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772beb13b83.jpg" alt="无穷级数-38.jpg"></p><p>【例题】 试求函数项级数 $\sum\limits_{n=1}^\infty [\frac{x(x+n)}{n+1}]^n$ 的绝对收敛域</p><p>【解】 记 $u_n(x)=[\frac{x(x+n)}{n+1}]^n$ ，由于</p><script type="math/tex; mode=display">u_n(x)=x^n\cdot (1+\frac{x-1}{n+1})^n</script><p>显然当 $|x|&gt;1$ 时，$\lim\limits_{n\to \infty}u_n(x)=\infty$ ，故级数发散；当 $x=1$ 时，$u_n(x)=1$ ，级数发散；当 $x=-1$ 时，$u_n(x)=(-1)^n(1-\frac{2}{n+1})^n$ ，由于</p><script type="math/tex; mode=display">\lim\limits_{n\to \infty}|u_n(x)|=\lim\limits_{n\to \infty}(1-\frac{2}{n+1})^n=e^{-\frac{1}{2}}\neq 0</script><p>因此级数发散；当 $|x|&lt;1$ 时，由于</p><script type="math/tex; mode=display">\lim\limits_{n\to \infty}\sqrt[n]{|u_n(x)|}=\lim\limits_{n\to \infty}(|x|\cdot |1+\frac{x-1}{n+1}|)=|x|<1</script><p>故级数绝对收敛，从而函数项级数 $\sum\limits_{n=1}^\infty [\frac{x(x+n)}{n+1}]^n$ 的绝对收敛域为 $(-1,1)$ .</p><h2 id="傅里叶级数"><a href="#傅里叶级数" class="headerlink" title="傅里叶级数"></a>傅里叶级数</h2><p><img src="https://bu.dusays.com/2023/05/31/64772beb153a8.jpg" alt="无穷级数-39.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772beb15979.jpg" alt="无穷级数-40.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c7402702.jpg" alt="无穷级数-41.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c7423132.jpg" alt="无穷级数-42.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c7408f6f.jpg" alt="无穷级数-43.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c741cbfb.jpg" alt="无穷级数-44.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c742f838.jpg" alt="无穷级数-45.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c742c19d.jpg" alt="无穷级数-46.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c74279f2.jpg" alt="无穷级数-47.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c742b6f5.jpg" alt="无穷级数-48.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c74247f5.jpg" alt="无穷级数-49.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c74160dd.jpg" alt="无穷级数-50.jpg"></p><h2 id="一般周期函数的傅里叶级数"><a href="#一般周期函数的傅里叶级数" class="headerlink" title="一般周期函数的傅里叶级数"></a>一般周期函数的傅里叶级数</h2><p><img src="https://bu.dusays.com/2023/05/31/64772cd197983.jpg" alt="无穷级数-51.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772cd1951e9.jpg" alt="无穷级数-52.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772cd19537f.jpg" alt="无穷级数-53.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772cd19526b.jpg" alt="无穷级数-54.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772cd194e67.jpg" alt="无穷级数-55.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772cd199832.jpg" alt="无穷级数-56.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>北漂日记</title>
      <link href="/posts/a7090f56.html"/>
      <url>/posts/a7090f56.html</url>
      
        <content type="html"><![CDATA[<p>来北京溜达溜达。</p><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>北京西。</p><p>上次来北京好像是久远的事。我感到困惑。</p><p>行程不提。</p><p>总之中午的时候到了公司总部，挺漂亮。HR 堆出很自然的笑，比划着很自然的肢体语言向我们介绍了公司的大体情况。我暗自佩服，连找个人力资源岗位的勇气也一并丢掉了。</p><p>桌面放着 Nestle 的小瓶矿泉水。</p><p>午餐后只能趴在桌子上恰一会，胃里涨出气来，于是坐着休息。</p><p>一点半，领完电脑后出发去公司安排的鸽子笼，京城寸土寸金，凑活吧。</p><p>通勤时间很长。</p><p>安顿下来已经是晚饭的时间，配着绝味鸭脖吃了晚饭。</p><p>之后去超市买了日用品。因为一种偏执的洁癖去临近的公共厕所开了大，北京的达不溜C洗手台都是热水。</p><p>回来洗漱完毕，夜生活才刚刚开始——不对，明天上班。于是躺床上看会视频，早早睡觉。</p><p>直到晚上2点因为梦遗惊醒，拿起床边的卷纸，悄声撇下两张塞在内裤两边，一手拉着内裤一手撇下第三张长卷纸，就着右边的纸一起，像卷凉席一样卷到左边。手探进内裤，只沾到了一点：这就是所谓“挽狂澜于既倒”的方法。现在我的内裤里多出一个纸棒，也许它更像墨西哥鸡肉卷，或者是刷着酱的肉松卷面包。</p><p>不是一个好比喻，我打消这个念头。</p><p>如何处理这个肉松面包？我就此思索。放在平时不存在这个烦恼，可现在是在鸽子笼里面，有两位一起住的室友。</p><p>我看见自己晾的衣服，它们就在我的头顶。</p><p>我想起带过来的 Nahida 抱枕——图案很健全的、四方的枕头，不如说，这就是一个枕头，我总是喜欢把它抱在怀里。在大学宿舍里还有帘子遮挡，但是现在它还在我的行李箱里。</p><p>还是决定把肉松面包丢马桶里冲掉，但是撒尿的时候我故意滋在了水面上。</p><p>做了一个什么样的梦？我又模糊地萌生困意。</p><p>奇怪，我怎么会梦到这些呢？</p><p>我想起小学时送我黄色花生灯的女孩，一份意料外的十岁生日礼物，想起她家曾经开过的小店。</p><p>我沉沉睡去。</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>通勤时间很长。</p><p>和带我的小哥简单聊了两句就开始工作了，虽然说是工作，但我什么也不会，因为专业不相关，只能做点是个人就会的东西。</p><p>不如说，我学的专业和什么都不相关。</p><p>办公室不大，中间一椭圆桌子，四周各有一些简单的陈设，毛玻璃隔开室外。</p><p>小哥人挺和蔼，工作很专注，思考的时候会把自己的脑内音不自觉地说出来，不乏一些国粹。</p><p>下班被高德导错了地方，路上见到了所谓的京城老破小。</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>考研初试成绩出来了，准备打工。</p><p>重修选课的老师似乎并不欢迎外系学生。</p><p>有一个路口红绿灯不知道怎么看，感谢一位路过的大妈。</p><p>晚上克制摆烂的欲望，坐下来学离散。</p><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><p>被告知两会期间不能向北京寄包裹。</p><p>在办公室继续听离散课，并着手做了布置的作业，比想象中的更费时间。小哥对此并无意见。</p><p>老舅微信问了成绩，听到我的回复后半天憋出一句安慰的话。</p><p>小哥劝我二战。</p><h2 id="五"><a href="#五" class="headerlink" title="五"></a>五</h2><p>有一道作业题没做出来，陷入自我怀疑的羞耻感中，觉得离散未必能过了，想换成算法课水过去。但转念一想，学离散终归是学了点新东西，要是不过直接岩壁，顺理成章二战，柳暗花明。</p><p>左拐右拐终于要到了计算机系的全部课表和加课码，只可惜我已经要毕业了，不知道能不能私下卖点钱。不得不说现在大学还是有墙的，大家有默契地捂着这些资料不公开，自学很难成系统，有明白人带就是比隔着巨大信息差的自学的人便利许多。虽然这些话听着像是失败者保护自己的辩词就是了。</p><p>博客似乎被墙了，正值两会，不知道是不是暂时的。</p><p>和 Z 君约了后天的饭局，希望他大度点，尽东主之谊。</p><h2 id="六"><a href="#六" class="headerlink" title="六"></a>六</h2><p>午餐外卖，晚餐外卖。早餐糊弄了一根烤肠。</p><p>下午摆烂，晚上摆烂。没有早上。</p><h2 id="七"><a href="#七" class="headerlink" title="七"></a>七</h2><p>和 Z 君先去涮了火锅，提出 AA 被拒绝后我也没再坚持，确实没有钱了。</p><p>之后去了一家 exotic 的餐厅，简单点了两个点心开始捣电子台球。</p><p>和 Z 君聊了聊近况，无非是坦言了颓唐荒废之事，Z 君似有安慰之意。</p><p>谈到了几个中学同学，各有出路。谈到几个月前的北京，封控和放开。</p><p>途中路过俄罗斯文化中心，立着一个头颅小巧带着兜帽/头盔的雕像，Z 君猜测或许是加加林，不过转念想既然是文化中心，至少应该摆个普希金之类的。</p><p>回来的路上又想起自己的软弱，放纵自己一无所学，大一就打定了毕业自杀的主意，甚至签署了器官捐献的意愿声明（虽然现在看来很可能会给到老干部）。但现在我的想法已经有所改变，如果真的到了不可收拾的地步，我要凭我所能，换一个作恶的人；再不济，也至少要去伤害那些伤害过我的人。</p><p>现在挣扎着想要活下去，却觉得十分艰难。</p><p>忽而想起同班同校过很久的 L 君，可以说是身边的偶像了吧。听说去了很厉害的研究所，强力意志和恐怖的执行力，硬要说的话，和艾尔海森 PV 给我的感觉差不多。贯彻自己意志的强者，羡慕这种人。</p><h2 id="八"><a href="#八" class="headerlink" title="八"></a>八</h2><p>晚上注册了 chat-gpt ，很有意思，毕业论文有救了。</p><p>最近总觉得自己的心理越来越“女性化”。当然这么说是不太恰当的，在我们谈论某一对象的时候，最好能下一个准确的定义，否则两拨人很可能争论的都不是同一个东西。但日记里这么搞确实有点麻烦，这里我所谓的“女性化”就按大众语境所模糊意指的那些特征理解吧。</p><p>我得说这个“女性化心理”的形容多少带点打标签的偷懒意味。btw 我在网上观察到的部分 mtf ，至少按我个人理解，似乎就是痴迷于一种片面的标签式的“女性”生活经验。</p><p>我对自己的身体还是比较满意的，我认为它们是完整的，并没有认知上的偏差，性向也是随大流的异性恋。但同时又觉得如果能作为女性走完一生，以不同的视角看看这个世界，也可以是美好的体验。之前玩 genshin 时，（荧和paimon）被 npc 称呼“她们” “姐妹”，心瞬间被击中了。</p><p>胡乱写了一通，不知所云。</p><p>买了一个枕套。</p><h2 id="九"><a href="#九" class="headerlink" title="九"></a>九</h2><p>浅试了 chatgpt ，效果惊人。</p><h2 id="十"><a href="#十" class="headerlink" title="十"></a>十</h2><p>北京西戒严了，小哥很晚才到，我直接在办公室摸鱼。</p><p>最近有在做一些麻烦但是没有技术含量的工作。</p><h2 id="十一"><a href="#十一" class="headerlink" title="十一"></a>十一</h2><p>无事。</p><h2 id="十二"><a href="#十二" class="headerlink" title="十二"></a>十二</h2><p>在公交站台被传教了，道教。</p><p>一个挺和蔼的中年妇女，问我看过《道德经》没，口音不像北京人，头发有点乱糟，略略染了酱色。说《道德经》不是普通人能参透的，众妙之门，得去她的老师那学习。我简单应付两句，说是看过，但自己并不常住此地，这就要出发。她见如此，便叮嘱我闲下来一定要再多看看《道德经》，对人生有帮助的。</p><p>回了趟学校，校门口有家餐馆很好吃。</p><h2 id="十三"><a href="#十三" class="headerlink" title="十三"></a>十三</h2><p>下午躺床上很久，忍不住下来学了一点。</p><h2 id="十四"><a href="#十四" class="headerlink" title="十四"></a>十四</h2><p>早上被某人骚扰了一通电话，又把他的焦虑灌给我。</p><h2 id="十五"><a href="#十五" class="headerlink" title="十五"></a>十五</h2><p>回到北京已经挺晚，小哥直接让我今天不用来了，把表做给他就行，明天再来。</p><p>善。</p><h2 id="十六"><a href="#十六" class="headerlink" title="十六"></a>十六</h2><p>小哥说自己可以下班买两个饼，路上吃一个，晚上到家吃一个，这样就不会饿了。</p><p>天呐，你们公司在业内也算有名了吧，不要说出这么惹人同情的话啊(#`O′) 。</p><p>虽然有些冒犯，但这坚定了我不干这行的决心。</p><h2 id="十七"><a href="#十七" class="headerlink" title="十七"></a>十七</h2><p>开始学 python 。</p><p>把杂活哐哐干完下午四点半走了，摆烂到九点学了几页离散。这老师纯念 ppt ，很多细节就意思了一下，想要理解还得自己补充自己想。</p><h2 id="十八"><a href="#十八" class="headerlink" title="十八"></a>十八</h2><p>好困。</p><p><img src="https://bu.dusays.com/2023/03/09/64095c352b213.png" alt="31-1.png"></p><h2 id="十九"><a href="#十九" class="headerlink" title="十九"></a>十九</h2><p>又梦到色色的事了，很真实。这种事本来不值一提，但因为是梦中梦，只醒了一层，So … I messed it up.</p><p>起了个大早去参加学校的招聘会，人很多。彩印的简历虽然没什么内容，至少格式看着漂亮，昨天花了 4 块钱淘宝上买了一个网站的会员做的。</p><p>“同学你哪个专业的？”</p><p>“□□□□”</p><p>“不好意思我们目前没有这方面的岗位。”</p><p>姑且还是投出几份简历，敬候<del>佳音</del>噩耗。结束后有种没来由的踏实。</p><p>下午去面了一家企业的物流和人力，感觉总还是不太能指望。回来的路上一摸口袋发现没有带常带的护身符，呵，什么时候在泰山的庙里连手都不肯拱一拱的我也在乎起这个了。</p><h2 id="二十"><a href="#二十" class="headerlink" title="二十"></a>二十</h2><p>无事。</p><h2 id="二十一"><a href="#二十一" class="headerlink" title="二十一"></a>二十一</h2><p>考了四六级，很困，反正之前过了，这次随便写写得了。</p><h2 id="二十二"><a href="#二十二" class="headerlink" title="二十二"></a>二十二</h2><p>跟出租车司机聊了聊就业，他表示 211 的毕业生怎么也不会找不到工作。嗯，如果 ￥5/h 的活也能叫工作的话确实如此。因为我真的被人用“锻炼锻炼”为借口逼着干过这样的活，虽然干了 4 天我就跑路了，事后还被阴阳看不起穷人，我的天，又搞诚实贫民那一套，我看不起穷人？他才是最看不起穷人的人吧！</p><p>中午到班。</p><p>今天有点沉迷于人生的可能性了。就像《四叠半》展示的那样，要是在人生的关键选择上我选了另一条路，会不会就大有不同呢？这确是 durg 一样的设想。如果当时填志愿运气好点，或者不让那个人做主，选到计算机或者随便什么有点专业性的专业的话，想必现在不会如此窘迫罢。但真要细究的话，这样或有另一种可能也不一定：我选到了想学的专业——至少不是那种如同按下<code>Alt</code>和<code>Tab</code>后出现一大堆 excel，每个 excel 下面一排多到出现<code>...</code>的工作表，每个工作表里铺满密密麻麻的数据，点开一看是链接到各种乱七八糟地方的公式——的那种令人厌烦的专业，而不是现在这般的清闲专业，即使能够逼迫自己学习，也一定会因为不胜学业和家庭的双重压力而自杀吧。</p><p>我想现在最需要的是恋爱，一个斩断我胡思乱想的人，可社恐怎么会有这样的机会呢？</p><h2 id="二十三"><a href="#二十三" class="headerlink" title="二十三"></a>二十三</h2><p>下了个 epub 阅读器，地铁上刷刷书。</p><p>外派的项目终于结束了，明天到总部去。</p><p>试着使用了文章加密的插件，虽然可以完成加密的任务，但 <del>bug</del> 特性太多，强迫症完全不能接受，折腾半天无果只能放弃。被看光就看光吧，roll back.</p><h2 id="二十四"><a href="#二十四" class="headerlink" title="二十四"></a>二十四</h2><p>总部之前只来过一次。</p><p>室内空气很糟，像是几年没有通风。楼外过道的风倒是咋咋呼呼的，冻煞我也~</p><p>实习只剩几天了，公司不好再安排我进新项目，只干些诸如打印盖章之类的活，倒也清闲。直接在班上搓了几把王者。</p><p>偶然听得一耳朵，同行的 Z_2 君和对象分手了。</p><p>晚上的 python 课有一个测试错过了 -_-#</p><h2 id="二十五"><a href="#二十五" class="headerlink" title="二十五"></a>二十五</h2><p>今天工作的时候，秘书让我专门跑一趟竟然就为了替她搬点轻飘飘的书！拜托，虽然你看着不像是有什么力气的人，难道我看着就像吗？这点重量全部加起来基本上就是小学一个班作业的程度，而且不过是六个分开包装好的小方块，离你的工位只有十几步远，自己一个个运过去也不费时间吧。</p><p>下午一直在捣鼓 turtle ，画了个锅巴。这个比较好画，本来想搞兰那罗的。</p><p>今天办了离职。</p><h2 id="二十六"><a href="#二十六" class="headerlink" title="二十六"></a>二十六</h2><blockquote><p>悄悄的我走了，<br>正如我悄悄的来；<br>我挥一挥衣袖，<br>不带走一片云彩。</p></blockquote><p>虽然没有带走北京什么，但是北京带走了我的钱，除非昨天买的彩票能给我赢回来。</p><h2 id="二十七"><a href="#二十七" class="headerlink" title="二十七"></a>二十七</h2><p>没赢。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>旅游照片</title>
      <link href="/posts/e413b481.html"/>
      <url>/posts/e413b481.html</url>
      
        <content type="html"><![CDATA[<p>label是摄影，其实就是拿着手机随手拍。</p><p>有两张原图丢失，只有清晰度低的版本。</p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9baa2cc.jpg" alt="1.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b98e275a.jpeg" alt="2.jpeg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9c53029.jpg" alt="2dot5.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9b7ff7b.jpg" alt="2dot6.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9bd0ef5.jpg" alt="3.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b98e32bd.jpeg" alt="4.jpeg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9c9cf7c.jpg" alt="5.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9c7143f.jpg" alt="5dot5.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9ca0346.jpg" alt="6.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9b8a1d7.jpg" alt="7.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9ce2757.jpg" alt="8.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9ce1f1a.jpg" alt="9.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e4170397.jpg" alt="m1.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e41e0820.jpg" alt="m2.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e43d7573.jpg" alt="m3.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e3d78a80.jpg" alt="m4.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e4244e56.jpg" alt="m5.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e40e4455.jpg" alt="m6.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e42bd7e7.jpg" alt="m7.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e4121bd7.jpg" alt="m8.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e4384d6b.jpg" alt="m9.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e431dc22.jpg" alt="m10.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e463cd07.jpg" alt="m11.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e4942f8b.jpg" alt="m12.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e489ea04.jpg" alt="m13.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e49afc4a.jpg" alt="m14.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摄影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优菲的笔记</title>
      <link href="/posts/7145501b.html"/>
      <url>/posts/7145501b.html</url>
      
        <content type="html"><![CDATA[<p>致我最可爱的女儿婕德：</p><p>给你一千个拥抱，一千个吻，愿不变的月光赐你一千种幸福，愿专权的烈日唯独宽宥你，宠爱你！</p><p>等你读到这一页的时候，想必一定长成一个聪明漂亮的大姑娘了吧？</p><p>我希望你知道，这天夜里，我正在这里想象着你亭亭玉立的样子，继承了我的智慧与美貌和你父亲的坚韧与执拗，我想象着你身穿教令院毕业服的样子，想象着你作为一家之主的骄傲模样，想象着我和哲伯莱勒已经老去，看着你正度过最幸福的生活…</p><p>哈哈，我知道你是什么想法，你这个坏姑娘！你一定是想要把这些话读给我听，故意要我难堪吧！</p><p>即使那样，我也希望你能看到，我曾写下过这些期许与祝福，我曾幻想过这样的幸运。</p><p>真是奇怪，这个本子原本是学术笔记才对！我却不知不觉写满了对你的期望…唉，做了母亲，就会这样多愁善感吗？</p><p>真希望有这样一天，我们会为彼此感到骄傲——即使命运的风把我们的沙丘刮得一团糟，让我们失却了一切美好期望…我也希望你能看着我的眼睛，告诉我，我这个没经验的母亲带给你的…并不全然是遗憾。</p><p>对不起，我没能给你最好的家。</p><p>但能成为你的母亲，哲伯莱勒的妻子，我非常开心。</p><p>唉，真是的。在我写下这篇日记时，小小的你还在我的怀里不停地捣乱，用黝黑的小手蘸着墨汁，给自己画大花脸…你是想要做小画家吗？还是想要为妈妈驱走噩梦，吓退夜晚沙漠中游荡的妖灵呢？</p><p>好啦，睡吧，睡吧，我的小羚羊。</p><p>让我记录下这首让你安然入睡的歌谣，希望你能记住它，就像你记住我那样：</p><p>群星升起在荒原之上，<br>夜莺也厌倦了时日的无穷，<br>是时候摘下蔷薇的冠冕，<br>洗去俗世的尘土，用葡萄的酒浆。</p><p>睡吧，睡吧，<br>永恒的绿洲将迎接孤独的游子，<br>在这里流淌着清冽的澧泉，<br>在这里记忆永远甘甜。</p><p>睡吧，睡吧，<br>黄金的梦乡在召唤流浪的沙子，<br>在这里不必将那苦涩的盐水掬饮，<br>在这里不会再有明日的愁肠。</p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络笔记</title>
      <link href="/posts/db0b4310.html"/>
      <url>/posts/db0b4310.html</url>
      
        <content type="html"><![CDATA[<p>虽然开坑很早，但其实计算机网络相关的知识学习完成于 2024 年 3 月。</p><div class="row"><iframe src="https://drive.google.com/file/d/1Qh9QsV9vpwY6sJE5d0ew14ps-F6-BtHp/preview" style="width:100%; height:550px"></iframe></div><p>在上面的 PDF 中，提到了很多次确认信号，这里的“确认”理解为“期望对方下一个发送的序号是多少”更为贴切，进而也是对之前序号的确认。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P6175 无向图的最小环问题</title>
      <link href="/posts/a050ca88.html"/>
      <url>/posts/a050ca88.html</url>
      
        <content type="html"><![CDATA[<p>提交入口：<a href="https://www.luogu.com.cn/problem/P6175">https://www.luogu.com.cn/problem/P6175</a></p><p>网上没找到满意的题解，大佬们微言大义，不是很能看懂。我在这里留下分析的大致思路，不保证正确，欢迎讨论。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一张无向图，求图中一个至少包含 $3$ 个点的环，环上的节点不重复，并且环上的边的长度之和最小。该问题称为无向图的最小环问题。在本题中，你需要输出最小的环的边权和。若无解，输出 <code>No solution.</code>。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个正整数 $n,m$ 表示点数和边数。</p><p>接下来 $m$ 行，每行三个正整数 $u,v,d$，表示节点 $u,v$ 之间有一条长度为 $d$ 的边。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出边权和最小的环的边权和。若无解，输出 <code>No solution.</code>。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">5 7</span><br><span class="line">1 4 1</span><br><span class="line">1 3 300</span><br><span class="line">3 1 10</span><br><span class="line">1 2 16</span><br><span class="line">2 3 100</span><br><span class="line">2 5 15</span><br><span class="line">5 3 20</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">61</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>样例解释：一种可行的方案：$1-3-5-2-1$。</p><p>对于 $20\%$ 的数据，$n,m \leq 10$。</p><p>对于 $60\%$ 的数据，$m\leq 100$。</p><p>对于 $100\%$ 的数据，$1\le n\leq 100$，$1\le m\leq 5\times 10^3$，$1 \leq d \leq 10^5$。</p><p><strong>无解输出包括句号。</strong></p><hr><h2 id="分析-amp-代码"><a href="#分析-amp-代码" class="headerlink" title="分析 &amp; 代码"></a>分析 &amp; 代码</h2><h3 id="错误思路"><a href="#错误思路" class="headerlink" title="错误思路"></a>错误思路</h3><p>本题不存在优于$O(n^3)$很多的算法，请停止无谓的尝试。</p><p>不过在尝试的过程中我也理解了一些东西…改动的<code>tarjan</code>部分也许可以记一下，所以还是决定贴出来备忘。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a,b) ((a)&lt;(b)?(a):(b))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">103</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm = <span class="number">5003</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="type">int</span> head[maxn],tot,depth[maxn],fa[maxn],fa2[maxn],dis[maxn][maxn];</span><br><span class="line"><span class="type">int</span> low[maxn],dfn[maxn],stac[maxn],num,ans,n,m,top,uset[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,w,next;&#125;edge[maxm&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">bool</span> vis[maxn],ins[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">makeset</span><span class="params">(<span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)uset[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x!=uset[x])uset[x]=<span class="built_in">find</span>(uset[x]);</span><br><span class="line">    <span class="keyword">return</span> uset[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unionset</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x);</span><br><span class="line">    y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span>;</span><br><span class="line">    uset[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].w=z;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    low[x]=dfn[x]=++num;</span><br><span class="line">    stac[++top]=x; ins[x]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">        <span class="type">int</span> y=edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[y])&#123;</span><br><span class="line">            fa2[y]=x;</span><br><span class="line">            <span class="built_in">tarjan</span>(y);</span><br><span class="line">            low[x]=<span class="built_in">MIN</span>(low[x],low[y]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ins[y]&amp;&amp;y!=fa2[x])&#123;</span><br><span class="line">            low[x]=<span class="built_in">MIN</span>(low[x],dfn[y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[x]==low[x])&#123;</span><br><span class="line">        <span class="type">int</span> y;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            y=stac[top--];</span><br><span class="line">            ins[y]=<span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">unionset</span>(x,y);</span><br><span class="line">        &#125;<span class="keyword">while</span>(x!=y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> dep)</span></span>&#123; <span class="comment">//可能有重边</span></span><br><span class="line">    vis[x]=<span class="literal">true</span>;</span><br><span class="line">    depth[x]=dep;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">        <span class="type">int</span> y=edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!vis[y])&#123;</span><br><span class="line">            fa[y]=x;</span><br><span class="line">            <span class="built_in">dfs</span>(y,depth[x]+dis[x][y]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(y!=fa[x]&amp;&amp;(depth[x]-depth[y]&gt;<span class="number">0</span>)&amp;&amp;(<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y)))&#123;</span><br><span class="line">            ans=<span class="built_in">MIN</span>(ans,dis[x][y]+depth[x]-depth[y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    ans=INF;</span><br><span class="line">    <span class="built_in">makeset</span>(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        <span class="keyword">if</span>(x==y)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(z&lt;dis[x][y]||(!dis[x][y]))&#123;</span><br><span class="line">            <span class="built_in">addedge</span>(x,y,z);</span><br><span class="line">            <span class="built_in">addedge</span>(y,x,z);</span><br><span class="line">            dis[x][y]=dis[y][x]=z;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])<span class="built_in">tarjan</span>(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> s=<span class="number">1</span>;s&lt;=n;s++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(fa,<span class="number">0</span>,<span class="built_in">sizeof</span>(fa));</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(depth,<span class="number">0</span>,<span class="built_in">sizeof</span>(depth));</span><br><span class="line">        <span class="built_in">dfs</span>(s,<span class="number">0</span>); <span class="type">int</span> i=s+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i])<span class="built_in">dfs</span>(i,<span class="number">0</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[j])<span class="built_in">dfs</span>(j,<span class="number">0</span>);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ans==INF)<span class="built_in">printf</span>(<span class="string">&quot;No solution.&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下数据将得不到正确答案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5 10</span><br><span class="line">4 2 3</span><br><span class="line">5 2 5</span><br><span class="line">3 4 2</span><br><span class="line">5 3 4</span><br><span class="line">2 3 3</span><br><span class="line">1 5 5</span><br><span class="line">2 1 1</span><br><span class="line">5 4 2</span><br><span class="line">1 4 2</span><br><span class="line">1 3 4</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/01/31/63d90cdbe1f01.jpg" alt="27-1.jpg" title="其实就是五芒星，这样画便于展示"></p><p>原因在于，上面那个算法假了，想要穷尽所有情况，复杂度还得上一维，且常数巨大。</p><h3 id="正确思路"><a href="#正确思路" class="headerlink" title="正确思路"></a>正确思路</h3><p><strong>定义：</strong> 设 $R_{i,j,k}$ 为经过编号为$i$，$j$，$k$ 节点的最小环。</p><p>$R_{i,j,k}$ 可以不存在。</p><p>考虑集合 $Ring=\{ R_{i,j,k}|1\leqslant i&lt;j&lt;k \leqslant n \}$ ，我们指出，符合题目要求的最小环 $r\in Ring$ 。</p><p><strong>证明：</strong> $r$ 的节点数大于等于3，任取其中3个$a$，$b$，$c$ ，不妨设$a&lt;b&lt;c$。因为 $r$ 是全图中最小的环，所以 $r$ 也是经过 $a$，$b$，$c$ 的最小环。则 $r=R_{a,b,c}\in Ring$ ，证毕。</p><p>于是在算法上，只需要枚举集合 $Ring$ ，并不断更新<code>ans</code>。这提示我们从$floyd$考虑。简述$floyd$算法如下：</p><blockquote><p>设$D_{i,j,k}$为 $i$ 到 $j$ 的只以 $(1…k)$ 集合中的节点为中间节点的最短路长度。<br>若最短路经过点 $k$，则$D_{i,j,k}=D_{i,k,k-1}+D_{k,j,k-1}$<br>若最短路不经过点 $k$，则$D_{i,j,k}=D_{i,j,k-1}$<br>因此，$D_{i,j,k}=\mathrm{min}(D_{i,j,k-1},D_{i,k,k-1}+D_{k,j,k-1})$</p></blockquote><p>先给出代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a,b) ((a)&lt;(b)?(a):(b))</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> LL INF = <span class="number">1e13</span>+<span class="number">3</span>;</span><br><span class="line">LL n,m,ans=INF;</span><br><span class="line">LL dis[<span class="number">103</span>][<span class="number">103</span>],mcopy[<span class="number">103</span>][<span class="number">103</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(i!=j)dis[i][j]=mcopy[i][j]=INF;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        LL x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        dis[x][y]=dis[y][x]=<span class="built_in">MIN</span>(dis[x][y],z);</span><br><span class="line">        mcopy[x][y]=mcopy[y][x]=dis[x][y];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;k;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;k;j++) <span class="comment">//k=2时也不会执行</span></span><br><span class="line">                ans=<span class="built_in">MIN</span>(ans,dis[i][j]+mcopy[j][k]+mcopy[k][i]);      </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                dis[i][j]=dis[j][i]=<span class="built_in">MIN</span>(dis[i][j],dis[i][k]+dis[k][j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ans==INF)<span class="built_in">printf</span>(<span class="string">&quot;No solution.&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这看起来有点奇怪。记住我们的目标是枚举集合$Ring$，这里解释以下核心代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for循环首次不满足条件便退出</span></span><br><span class="line"><span class="comment">//奇怪的现象，不知道自己为什么会为此产生疑问</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;k;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;k;j++) <span class="comment">//k=2时也不会执行</span></span><br><span class="line">            ans=<span class="built_in">MIN</span>(ans,dis[i][j]+mcopy[j][k]+mcopy[k][i]);      </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            dis[i][j]=dis[j][i]=<span class="built_in">MIN</span>(dis[i][j],dis[i][k]+dis[k][j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，由枚举顺序，已经有 $1\leqslant i&lt;j&lt;k \leqslant n$ 。</p><p>在Floyd枚举k的时候，已经得到了 $i,j (1\leqslant i\ne j \leqslant n)$ 只以 $\{ 1,…,k-1\}$ 集合中的节点为中间节点的最短路长度 $D_{i,j,k-1}$，它在代码中就是<code>dis[i][j]</code>。</p><p>为什么第6行<code>dis[i][j]</code>加的是<code>mcopy[][]</code>？</p><p>从生成的角度去理解它：k要在环中，必然要从k中伸出边，设伸出的两个边连的点是 i 和 j 。那么 $D_{i,j,k-1}$ 加上两个边的长度就是环的长度。而这两个边是原始数据输入的长度。</p><p>一个可能的疑惑：$D_{i,j,k-1}$ 不是 $D_{i,j,n}$ ，为什么要这样，直觉上用$D_{i,j,n}$ 不是更好吗？</p><p>答案是不能且不必要：</p><ul><li>若 $D_{i,j}$ 经过 k 点，不成环，使用$D_{i,j,n}$ 会得到错误答案。因此不能。</li><li>若 $D_{i,j}$ 不经过 k 及编号以后的点，$D_{i,j,n}=D_{i,j,k-1}$，</li><li>若 $D_{i,j}$ 经过 k 以后的点，考虑下图：<img src="https://bu.dusays.com/2023/02/01/63d9d029eb381.png" alt="27-2.png"> 这里需要反过来考虑：设 $p$ 为 $D_{i,j}$ 经过的最大的节点编号，则就长度而言 $R_{i,j,k}\geqslant R_{i’,j’,p}$ （这里$R_{i’,j’,p}$的存在性已经保证），因为 $D_{i’,j’}\leqslant \mathrm{len}\{i’,i,k,j,j’ \}$ 。而在后面的计算中，$R_{i’,j’,p}$ 会被计算到，如果合适，它会作为更优解更新<code>ans</code>。</li></ul><p>顺带一提，集合 $Ring$ 中所有元素都会被枚举到。</p><script type="math/tex; mode=display">\mathcal{THE}\quad \mathcal{END}</script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tarjan </tag>
            
            <tag> floyd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产假问题所想到的</title>
      <link href="/posts/2cbce842.html"/>
      <url>/posts/2cbce842.html</url>
      
        <content type="html"><![CDATA[<p>在我所学的无法在现代社会中掌握专业技能的专业的某门专业课上，我曾想过一种设计，一种尝试解决产假问题的机制。虽然后来被我否定，它不成熟且欠考虑，也许幼稚，但我还是决定记录思考它的过程。</p><p>因为正好有毕业论文的要求，我拟题时曾向指导老师提起过：</p><blockquote><p>题目：现代企业的产假管理（暂定）</p><p>简述：在□□□□□□这门课中我了解到『pool』的概念，我想将这个概念运用到产假管理的方面。人们在休产假前，可通过为同单位的在休人员分担工作，积累额外工作天数，这个天数在需要休产假时可以取出。它的目标是促进两性就业机会的平等并为年轻家庭的生育提供保障。</p><p>以下是暂时想到的：</p><ol><li>个人在pool中积累的天数由社会公共机构把持，不随工作变更清空。</li><li>取出天数休产假时，由男女双方的数据计算总天数。为促进两性平等的就业机会、保障家庭的生育过程，男方也休产假（尽管天数未必相等）。</li><li>为防止就业时的歧视，该天数在正式录用前对招聘单位不可见。</li><li>若将在休人员的工作划分为不同模块由不同人员分担，需要设计额外工作天数的计算方法。</li><li>可以提前预支天数，但在产假后需在一定时期内偿完。该措施为不同选择的人群提供更加人性化的休假方式。</li></ol><p>论文会结合本专业所学的知识，作具体的、既有定性又有定量的分析。</p></blockquote><p><img src="https://bu.dusays.com/2023/01/25/63d13994236e5.png" alt="26-1"></p><p>当时我得到的被拒答复是：</p><blockquote><p>“从年龄性别和人生经验的角度，我觉得你做起来有难度，而且对本科生这个题目看起来过于醒目，容易被人关注。”</p></blockquote><p>老师的意见中肯委婉。想思考社会问题必须增长见识、丰富阅历，去学习先进国家的成功经验，去总结过去的失败教训，不能沉溺于无用的空想。但我囿于自身原因，暂时无法做到这些。</p><p>不过我也有没告诉老师的。在那门课上摸鱼乱想时，我已经否定了自己的设想。之所以还要交这个题目，是因为我实在不知道写什么好了。</p><p>该设想的最大问题是，它实质上没有解决『它想要解决的问题』。这是一个隐含的问题（或者你也可以说“隐式的”？），即“既要又要”的问题——在某种隐秘的语境下，该设想似乎是想做到既给大家放产假，又不想耽误经济发展。</p><p>但这是不可能的。</p><p>仔细想想，我上面所作的设计最多只是一种产假在休人员撂下的工作的分配方案。而类似用途的方案，实际上在各个单位、公司里都有自己的做法和规定，它们也许粗放、不公平、设计不合理，但确实是有的。</p><blockquote><p>不过也有雇佣年轻人的老板，只希望员工作为“人矿”在最年轻的时候出最多的力，至于由此带来的生理心理上的恶果——超过一定年龄开了就好了。甚至有不少以折磨人为乐的人，就是不想给你放假，就是不想看你闲着。这里我不得不得出扫兴的结论：比起制度的设计和改良，现今社会更先需要的是价值的共识。但这不是论证的重点，不谈。</p></blockquote><p>更进一步，社会是分工的，术业有专攻，让一个人分担他人的工作，效率的降低是不可避免的。即便是同质的工作，让一个人承担过多也必然导致效率的下降。因此不存在『既要又要』的解决方案，想要放产假，支付成本是必须的。</p><p>这里会转向一种价值选择，即要经济还是要产假？</p><p>我的回答是要产假。更长的产假、更普惠的产假、包含两性双方的产假。</p><p>在说明为什么要产假之前，首先需要驳斥一种短视的、透着酸气的实用主义。出于一种共产政权下颇具代表性的急功近利心态，社会上有不少人相信（至少是声称），休息和娱乐会腐化群众，他们必须努力地工作。如果我说人们需要远比现在多的多的空闲时间——哪怕是穷人，一定会有不少人无法理解吧。打个未必恰当的比方，他们就好比只会用功而不知休息的学生一样，走向内卷和低效，最后成为<code>frustrated students</code>，<code>frustrated men</code> &amp; <code>frustrated women</code>。</p><p>当然，虽然也有“磨刀不误砍柴工”“休息是为了更好地工作”之类的说法鼓励人们休息，列宁也说过“会休息的人，才会工作”，但这些说法带着值得玩味的目的。因为它们最终又回到“工作”上去，休息是为了工作，如果不以“能更好地工作”为前提，休息便是可耻的罪恶。这种说法彷佛是对人类肉体的无奈妥协，如果真如宣传所言有“钢铁的意志、钢铁的身躯”，恐怕这种道德——以前是封建道德现在是共产道德，会要求人们为了一个飘渺的欺骗的目标而一直工作下去吧。同时这些话带着略恐怖的意味，以着一种类似于大家都是热爱劳动的同志的身份，默认听者“喜欢工作”——必须如此，工作是你的道德。</p><p>但休息就是休息，休息和娱乐有自身的重要意义。人是需要休息和娱乐的，勤勉工作本身并不幸福，承认人类的不理性才是最大的理性。可现在，极端的实用主义和焦虑不安的情绪充斥着中国社会的每个角落，哪怕幼儿园的小孩都不能尽情玩耍。除非有良好的家庭氛围或者深刻的自我反思和教育，这种焦虑感一定会在人身上留下烙印——缺少休息和娱乐正让人们变得残忍。</p><blockquote><p>节选自《谁能够筑墙垣，围得住杜鹃》：<br>艰难给个人造成的最大伤害，是忘记什么是美好：认为美好是不存在的，进而站在了施虐的一方；或者把艰难视为美好，开始热爱受虐。两者又是一体的，朱英诞曾在文章中谈到过“虐他狂和自虐狂”（《余波》，一九七五）。摆脱这种困境的方式是在艰难中保有美好。当艰难唤起的不是恶，而是美好，恶就失败了。“美好出艰难”不是美化艰难，不是盲目乐观，而是承认艰难，并对人性保有信心。在那个人心惟危的时代，朱英诞接着写道：<br><strong>我们漂流在奇异的海洋里；</strong><br><strong>一个小岛，那么美丽而寂寞，</strong><br><strong>两个陌生者相遇也会握手言欢，</strong><br><strong>他们将于此重建家园。</strong></p></blockquote><p>然而，“在艰难中保有美好”对人性还是苛求了些。我们应当破除艰难，或者至少在艰难中创造喘息的余地。仔细翻阅一个模板式中国人的人生，TA好像一直在忙，而很少真正休息过：忙完学业忙工作，边忙工作边忙结婚，然后生养，又要操心下一代的人生直到孩子们也有了孩子，也许还要为照顾孙辈搭把手，等闲下来的时候自己已经老了，同时很可能捞着个麻烦但还不致命的病。我主张产假，正是要给人们<strong>一个有保障的心灵躺平的机会</strong>，一个为人生按下<code>pause</code>的机会。trust me bro, it works. 只有在这种时间里，人才有余裕收拾自己的心情。而且产假也是相对较好的“躺平”时机，以中国高度竞争的现状而言，太早躺平损失严重，再后则没有多少机会了。</p><p>最后，需要回应一个潜在的争议，即怀孕对于女性来说是负担，因而产假中女性可能无法得到上文提到的“收拾自己的心情”的机会。对此：</p><ol><li>无论产假中女性是否缓解了焦虑，产假都是必须的，这是一个不会更坏的方案。</li><li>我在上文提到要“更长的产假”，它既包括向前的延长，也包括向后的。</li><li>前面已经说过，产假提供了一个有保障的心灵躺平的机会，而机会是要自己争取的。能否得到放松与个人的精神境界有关，在人有认知的时刻起就不可能一点压力也没有了。</li><li>肉体的痛苦确实难耐，但心灵的痛苦更持久且较为无解。本文关注更多的是精神层面的疗愈。</li></ol><script type="math/tex; mode=display">\mathcal{THE}\quad \mathcal{END}</script>]]></content>
      
      
      <categories>
          
          <category> 闲文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诡辩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOI2009 Radio Transmission</title>
      <link href="/posts/ac682fe9.html"/>
      <url>/posts/ac682fe9.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个字符串 $s_1$，它是由某个字符串 $s_2$ 不断自我连接形成的。但是字符串 $s_2$ 是不确定的，现在只想知道它的最短长度是多少。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个整数 $L$，表示给出字符串的长度。 </p><p>第二行给出字符串 $s_1$ 的一个子串，全由小写字母组成。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>仅一行，表示 $s_2$ 的最短长度。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">cabcabca</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><h3 id="样例输入输出-1-解释"><a href="#样例输入输出-1-解释" class="headerlink" title="样例输入输出 1 解释"></a>样例输入输出 1 解释</h3><p>对于样例，我们可以利用 $\texttt{abc}$ 不断自我连接得到 $\texttt{abcabcabc}$，读入的 $\texttt{cabcabca}$，是它的子串。</p><h3 id="规模与约定"><a href="#规模与约定" class="headerlink" title="规模与约定"></a>规模与约定</h3><p>对于全部的测试点，保证 $0 &lt; L \le 10^6$。</p><hr><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我首先想到的是二分答案，但仔细想想不太可行。</p><p>样例中<code>cab</code>首尾相接，各不相同，next全0，而后一直增加，这大概可以从next数组考虑。于是打表找规律。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abcdabcdab</span><br><span class="line">0000123456</span><br></pre></td></tr></table></figure><p>猜想大概是要找后面的<code>123456...</code>，而答案就是前面0的个数，因为abcd各不相同，而循环节之后next数组就应该一直增加。</p><p>但这只是循环节各不相同的简单情形，如果有相同的呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xbbxbbx</span><br><span class="line">0001234</span><br></pre></td></tr></table></figure><p>嗯，好像也一样。那这样呢：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abaabaab</span><br><span class="line">00112345</span><br></pre></td></tr></table></figure><p>事情正起变化，因为循环节本身的结构，<code>123456...</code>前面不全是0了，但可喜可贺这似乎不是很影响，我们只要修正已有的结论：答案是<code>123456...</code>前面元素的个数。这里有一个trick，其实答案就是<code>123456...</code>中<code>1</code>的位置（下标从0开始算）。</p><p>但是，有一个很讨厌的情况！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abaabaak</span><br><span class="line">00112340</span><br></pre></td></tr></table></figure><p>这个时候答案是多少呢？根据题意我们只能把整个<code>abaabaak</code>作为循环节了，因此答案是<code>8</code>。这似乎只要加个特判？并非如此，因为next数组递减不一定是减到0，所以还有其他情况，结论需要大修特修。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">position   0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15</span><br><span class="line">    next   0  0  0  0  1  2  3  1  2  3  4   5   6   7   4   0</span><br><span class="line"> content   a  g  c  t  a  g  c  a  g  c  t   a   g   c   t   g</span><br></pre></td></tr></table></figure><p>上面这个例子就包含很多了。结论是令ans为next数组中第一个1的位置，在后续的扫描中若next数组递减，则更新<code>ans=pos-next[pos]+1</code>。</p><p>回顾之前的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abaabaab</span><br><span class="line">00112345</span><br></pre></td></tr></table></figure><p>为追求形式的统一，将结论进一步修正为：令ans为next数组中第一个1的位置，在后续的扫描中若next数组不增，则更新<code>ans=pos-next[pos]+1</code>。</p><p>这个结论的原理其实就在next数组的定义中，这里不展开。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXL = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> s1[MAXL];</span><br><span class="line"><span class="type">int</span> mynext[MAXL], L;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getNext</span><span class="params">()</span></span>&#123; <span class="comment">//前置知识点，next数组</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    mynext[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;L; i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; s1[i]!=s1[j]) j=mynext[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s1[i]==s1[j]) j++;</span><br><span class="line">        mynext[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%s&quot;</span>,&amp;L,s1); <span class="comment">//C风格字符串</span></span><br><span class="line">    <span class="keyword">if</span>(L==<span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125; <span class="comment">//特判</span></span><br><span class="line">    <span class="built_in">getNext</span>();</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">0</span>, ans = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!mynext[pos])&#123;</span><br><span class="line">        pos++;</span><br><span class="line">        <span class="keyword">if</span>(pos == L)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,L); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="comment">//指向尾后，next全0</span></span><br><span class="line">    &#125;</span><br><span class="line">    ans = pos; <span class="comment">//此时pos指向next数组中第一个1</span></span><br><span class="line">    <span class="keyword">for</span>(; pos&lt;L; pos++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mynext[pos] &lt;= mynext[pos<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="comment">//next数组第一个一定是0，所以不会越界</span></span><br><span class="line">            ans = pos-mynext[pos]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 踩坑记录</title>
      <link href="/posts/2b780dd.html"/>
      <url>/posts/2b780dd.html</url>
      
        <content type="html"><![CDATA[<h2 id="live2d和aplayer"><a href="#live2d和aplayer" class="headerlink" title="live2d和aplayer"></a>live2d和aplayer</h2><p>有时加载会很慢或者无法加载，这可能只是live2d和aplayer自身的问题。尤其是aplayer，偶尔会有几天在任何设备上都无法加载（我只遇到过一次）。</p><p>注意如果要使用网易的服务，要写成<code>data-server=&quot;netease&quot;</code>，我这里因为不知道网易的英文名试了半天 -_-#  ，不得不吐槽一下网易的这个英文名真的随便啊。</p><p>Upd：最后还是决定不使用 aplayer 了，VIP 音乐只能放 30 秒，而且访客也根本不会在意某个博客下面的音乐列表，至少我是这样。</p><h2 id="Gitalk加载失败"><a href="#Gitalk加载失败" class="headerlink" title="Gitalk加载失败"></a>Gitalk加载失败</h2><p>Gitalk配置完成之后，仍有可能无法加载。这是因为其部分服务在墙外，需要翻墙访问文章页面以创建issue。之后即使不翻墙也可正常显示。</p><h2 id="MathJax渲染失败"><a href="#MathJax渲染失败" class="headerlink" title="MathJax渲染失败"></a>MathJax渲染失败</h2><p>Hexo默认使用<code>hexo-renderer-marked</code>引擎渲染网页，该引擎会把一些特殊的markdown符号转换为相应的html标签，会产生语义冲突。</p><p>解决方案：更换Hexo的markdown渲染引擎。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>接下来到博客根目录下，找到<code>node_modules\kramed\lib\rules\inline.js</code>，把第11行的escape变量的值做相应的修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span><br><span class="line">  escape: /^\\([`*\[\]()#$+\-.!_&gt;])/</span><br></pre></td></tr></table></figure><p>同时把第20行的em变量也要做相应的修改:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br><span class="line">  em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span><br></pre></td></tr></table></figure><p>重新启动hexo即可。</p><p><strong>问题（未解决）：</strong> 在 Hexo 中使用 MathJax 渲染数学公式时，行内公式可能会遇到左撇被渲染成右撇的问题。这是因为 MathJax 默认使用美国数学协会（American Mathematical Society，简称 AMS）的数学符号字体，而该字体中的左撇和右撇是相反的。</p><h2 id="代码缩进混乱"><a href="#代码缩进混乱" class="headerlink" title="代码缩进混乱"></a>代码缩进混乱</h2><p>这是tab缩进的问题。</p><p>找到站点配置文件中<code>tab_replace</code>，设置<code>tab_replace: &#39;    &#39;</code>（4个空格）即可。</p><h2 id="嵌入音频和视频的方法"><a href="#嵌入音频和视频的方法" class="headerlink" title="嵌入音频和视频的方法"></a>嵌入音频和视频的方法</h2><p>嵌入音频的例子（网易云等可生成外链的网站）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">&quot;https://music.163.com/outchain/player?type=2&amp;id=2045807071&amp;auto=0&amp;height=66&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>嵌入音频的例子（其他）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">loop</span>=<span class="string">&quot;loop&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;https://例子&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><p>嵌入视频的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://player.bilibili.com/player.html?bvid=BV1po4y157Sz&amp;page=1&amp;autoplay=0&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position:absolute; height: 100%; width: 100%;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="外链音乐播放器手机端无法显示"><a href="#外链音乐播放器手机端无法显示" class="headerlink" title="外链音乐播放器手机端无法显示"></a>外链音乐播放器手机端无法显示</h2><p>暂未解决。</p><h2 id="参考文献角标"><a href="#参考文献角标" class="headerlink" title="参考文献角标"></a>参考文献角标</h2><p>前：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#bib1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bib1ref&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">sup</span>&gt;</span>[1]<span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;bib1&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#bib1ref&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">sup</span>&gt;</span>[1]<span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> 这是一个示例，你可以修改此处文字</span><br></pre></td></tr></table></figure><p>这是一个华丽丽的示例<a href="#bib1" id="bib1ref"><sup>[1]</sup></a>。</p><h2 id="图片模糊"><a href="#图片模糊" class="headerlink" title="图片模糊"></a>图片模糊</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">body</span>,</span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.blur</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">15px</span>);</span></span><br><span class="line"><span class="language-css">                -webkit-<span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">15px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;blur&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://sway.office.com/s/YRS8FqIyVMqWwkPl/images/Iv-c08LLPYz8-g&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>惊艳全场的示例：</p><html>    <head>        <meta charset="utf-8">        <style type="text/css">            body,            html {                margin: 0;                padding: 0;                width: 100%;                height: 100%;            }                .blur {                filter: blur(15px);                -webkit-filter: blur(15px);            }        </style>    </head>    <body>        <img class="blur" src="https://sway.office.com/s/YRS8FqIyVMqWwkPl/images/Iv-c08LLPYz8-g"></html><h2 id="hexo-pdf"><a href="#hexo-pdf" class="headerlink" title="hexo pdf"></a>hexo pdf</h2><p>参考： <a href="https://github.com/superalsrk/hexo-pdf">https://github.com/superalsrk/hexo-pdf</a></p><p>用法示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf https://drive.google.com/file/d/此处填入共享链接对应部分/preview %&#125;</span><br></pre></td></tr></table></figure><h2 id="内嵌-PPT"><a href="#内嵌-PPT" class="headerlink" title="内嵌 PPT"></a>内嵌 PPT</h2><p>使用 Microsoft 的 OneDrive 服务。</p><p>在 OneDrive 中上传你需要展示的 PPT ，然后选中文件，找到<code>&lt;/&gt;</code>生成内嵌代码。</p><p>默认的代码在大小上有点问题，你可能需要修改为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;ppt&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">onload</span>=<span class="string">&quot;autoChange()&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;填入你获得的链接&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">autoChange</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> ifm = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;ppt&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    ifm.<span class="property">height</span> = (ifm.<span class="property">clientWidth</span> / <span class="number">16</span>) * <span class="number">9</span> + <span class="number">24</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">onresize</span> = autoChange;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：如果你需要内嵌多个 PPT ，则应修改相应的<code>id</code>和函数名。</p><h2 id="遮挡、外挂标签等"><a href="#遮挡、外挂标签等" class="headerlink" title="遮挡、外挂标签等"></a>遮挡、外挂标签等</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% psw 示例 %&#125;</span><br></pre></td></tr></table></figure><psw>示例</psw><p>外挂标签，请参考：<a href="https://hr-insist.github.io/Hexo/hexo-butterfly%E4%BD%BF%E7%94%A8%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/">Hexo+butterfly主题的外挂标签</a></p><div class="note warning disabled"><p>此为 hexo 特有，如未来有换主题的打算，应减少使用。</p></div><h2 id="博客迁移"><a href="#博客迁移" class="headerlink" title="博客迁移"></a>博客迁移</h2><p>主体工作很简单，直接将博客根目录、NODEJS 复制到一块U盘/硬盘上，粘贴到新电脑即可。此外，还须做一些其他工作。</p><p>在博客根目录下，搜索文件<code>hexo.cmd</code>所在的目录，将路径配置到环境变量中。</p><p>将 NODEJS 所在路径，例如<code>D:\NODEJS</code>配置到环境变量中。</p><p>安装 git, Github 配置 SSH keys.</p><p>不要忘了将数据备份（例如图片资源）也迁移到新电脑上。</p><p>我这里不选择下载新版本的 NODEJS 是考虑到可能会与自己一开始用的版本有所不同，所以直接把旧电脑的 NODEJS 文件夹复制过来。</p><hr><p><a id="bib1" href="#bib1ref"><sup>[1]</sup></a> 这是一个示例，你可以修改此处文字</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理笔记</title>
      <link href="/posts/aae04aa8.html"/>
      <url>/posts/aae04aa8.html</url>
      
        <content type="html"><![CDATA[<p>写在前面：</p><p>虽然本笔记的大多数内容是王道的 PPT ，但也是有我的注释的！王道的课程真的很好，咸鱼学长讲课生动又仔细。每年的课件和视频都是有变化的，我这里把 PPT 贴出来只是自用，本文章禁止转载。最后附上王道的网站：<code>cskaoyan.com</code>。</p><h2 id="计算机的发展"><a href="#计算机的发展" class="headerlink" title="计算机的发展"></a>计算机的发展</h2><p><img src="https://s2.loli.net/2023/07/04/YyAMfFBZOPT8qeN.jpg" alt="1.1_计算机的发展（大纲已删 但建议看看）-1.jpg"></p><p><img src="https://s2.loli.net/2023/07/04/ofRXleBkrqjYL5O.jpg" alt="1.1_计算机的发展（大纲已删 但建议看看）-2.jpg"></p><p><img src="https://s2.loli.net/2023/07/04/AOolIHqJu2LNivm.jpg" alt="1.1_计算机的发展（大纲已删 但建议看看）-3.jpg"></p><p><img src="https://s2.loli.net/2023/07/04/68cPSkmqDMEaWQR.jpg" alt="1.1_计算机的发展（大纲已删 但建议看看）-4.jpg"></p><p><img src="https://s2.loli.net/2023/07/04/jqRIli4B1T5Nsat.jpg" alt="1.1_计算机的发展（大纲已删 但建议看看）-5.jpg"></p><p><img src="https://s2.loli.net/2023/07/04/5gBHZzGQXLq8j7U.jpg" alt="1.1_计算机的发展（大纲已删 但建议看看）-6.jpg"></p><p><img src="https://s2.loli.net/2023/07/04/IjqH2Ck9QL7lONd.jpg" alt="1.1_计算机的发展（大纲已删 但建议看看）-7.jpg"></p><p><img src="https://s2.loli.net/2023/07/04/uM5zDpORcK8ZUIP.jpg" alt="1.1_计算机的发展（大纲已删 但建议看看）-8.jpg"></p><p><img src="https://s2.loli.net/2023/07/04/Psj4oOEVwAWSnQa.jpg" alt="1.1_计算机的发展（大纲已删 但建议看看）-9.jpg"></p><h2 id="计算机硬件的基本组成"><a href="#计算机硬件的基本组成" class="headerlink" title="计算机硬件的基本组成"></a>计算机硬件的基本组成</h2><p><img src="https://bu.dusays.com/2023/07/04/64a44078318f2.jpg" alt="1.2_1_计算机硬件的基本组成-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/04/64a44078a3706.jpg" alt="1.2_1_计算机硬件的基本组成-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/04/64a440787ba4c.jpg" alt="1.2_1_计算机硬件的基本组成-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/04/64a440788b5b0.jpg" alt="1.2_1_计算机硬件的基本组成-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/04/64a4407895d75.jpg" alt="1.2_1_计算机硬件的基本组成-5.jpg"></p><h2 id="认识各个硬件部件"><a href="#认识各个硬件部件" class="headerlink" title="认识各个硬件部件"></a>认识各个硬件部件</h2><p><img src="https://bu.dusays.com/2023/07/09/64aa45c1b5c82.jpg" alt="1.2_2_认识各个硬件部件-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa45c4af32d.jpg" alt="1.2_2_认识各个硬件部件-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa45c404171.jpg" alt="1.2_2_认识各个硬件部件-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa45c6765fa.jpg" alt="1.2_2_认识各个硬件部件-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa45c6db71d.jpg" alt="1.2_2_认识各个硬件部件-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa45c6e031d.jpg" alt="1.2_2_认识各个硬件部件-6.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa45c6735b7.jpg" alt="1.2_2_认识各个硬件部件-7.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa45c4de7fb.jpg" alt="1.2_2_认识各个硬件部件-8.jpg"></p><h2 id="计算机系统的层次结构"><a href="#计算机系统的层次结构" class="headerlink" title="计算机系统的层次结构"></a>计算机系统的层次结构</h2><p><img src="https://bu.dusays.com/2023/07/09/64aa4630ea05d.jpg" alt="1.2_3_计算机系统的层次结构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa4630dbd4b.jpg" alt="1.2_3_计算机系统的层次结构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa46310a496.jpg" alt="1.2_3_计算机系统的层次结构-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa4631068e0.jpg" alt="1.2_3_计算机系统的层次结构-4.jpg"></p><div class="note info simple"><p>以下内容实际学习于 2024年2月28日</p></div><h2 id="计算机的性能指标"><a href="#计算机的性能指标" class="headerlink" title="计算机的性能指标"></a>计算机的性能指标</h2><div class="row"><iframe src="https://drive.google.com/file/d/1lHlVraS2nAUYznoJHIu9PGXvHztgnxuE/preview" style="width:100%; height:550px"></iframe></div><h2 id="进位计数制"><a href="#进位计数制" class="headerlink" title="进位计数制"></a>进位计数制</h2><div class="row"><iframe src="https://drive.google.com/file/d/1_Ao7ZmY9QPrJ8eU8yWAXbnRqAJE4qSZS/preview" style="width:100%; height:550px"></iframe></div><h2 id="BCD-码"><a href="#BCD-码" class="headerlink" title="BCD 码"></a>BCD 码</h2><div class="row"><iframe src="https://drive.google.com/file/d/14ovmVOpnCuO-F_lpFR9BG0SnCBtu5YGu/preview" style="width:100%; height:550px"></iframe></div><h2 id="无符号整数的表示和运算"><a href="#无符号整数的表示和运算" class="headerlink" title="无符号整数的表示和运算"></a>无符号整数的表示和运算</h2><div class="row"><iframe src="https://drive.google.com/file/d/1UAo1dpgsA-ZvGxGiCJDKezIdqgZ_xcdi/preview" style="width:100%; height:550px"></iframe></div><h2 id="带符号整数的表示和运算"><a href="#带符号整数的表示和运算" class="headerlink" title="带符号整数的表示和运算"></a>带符号整数的表示和运算</h2><div class="row"><iframe src="https://drive.google.com/file/d/1kSsqHJms6oa1J3kytObo1axnWrfrzxSE/preview" style="width:100%; height:550px"></iframe></div><h2 id="原反补码的特性对比"><a href="#原反补码的特性对比" class="headerlink" title="原反补码的特性对比"></a>原反补码的特性对比</h2><p><img src="https://bu.dusays.com/2024/02/28/65df54bbe2b8b.jpg" alt="2.1_5_原反补码的特性对比-1.jpg"></p><p><img src="https://bu.dusays.com/2024/02/28/65df54bc47589.jpg" alt="2.1_5_原反补码的特性对比-2.jpg"></p><h2 id="移码"><a href="#移码" class="headerlink" title="移码"></a>移码</h2><div class="row"><iframe src="https://drive.google.com/file/d/1gFeRucEK-3bKeVquE2jyfBd3BudZrZge/preview" style="width:100%; height:550px"></iframe></div><h2 id="定点小数"><a href="#定点小数" class="headerlink" title="定点小数"></a>定点小数</h2><div class="row"><iframe src="https://drive.google.com/file/d/1Nbe1TovBvRmuUOBVNFOLkPcmzKXSqfqW/preview" style="width:100%; height:550px"></iframe></div><h2 id="奇偶校验码"><a href="#奇偶校验码" class="headerlink" title="奇偶校验码"></a>奇偶校验码</h2><div class="row"><iframe src="https://drive.google.com/file/d/1Gw8okBOJ9sRAkC4w3d_VwlVhyiLORFsF/preview" style="width:100%; height:550px"></iframe></div><h2 id="电路基本原理、加法器"><a href="#电路基本原理、加法器" class="headerlink" title="电路基本原理、加法器"></a>电路基本原理、加法器</h2><div class="row"><iframe src="https://drive.google.com/file/d/1RhcyQG4ohRcJ73f88A9boZlk54JiSy1w/preview" style="width:100%; height:550px"></iframe></div><h2 id="并行进位加法器"><a href="#并行进位加法器" class="headerlink" title="并行进位加法器"></a>并行进位加法器</h2><div class="row"><iframe src="https://drive.google.com/file/d/1x055WCZfXX3RxEl7NPLTI0fLopfr77ak/preview" style="width:100%; height:550px"></iframe></div><h2 id="补码加减运算器"><a href="#补码加减运算器" class="headerlink" title="补码加减运算器"></a>补码加减运算器</h2><div class="row"><iframe src="https://drive.google.com/file/d/1Trjy-830SHsbHAKj1LFFbIsQSnr1Up_9/preview" style="width:100%; height:550px"></iframe></div><h2 id="溢出判断"><a href="#溢出判断" class="headerlink" title="溢出判断"></a>溢出判断</h2><div class="row"><iframe src="https://drive.google.com/file/d/1c2xaq2kLPxqSwIyT-bf0Jx9qXul2019D/preview" style="width:100%; height:550px"></iframe></div><h2 id="标志位的生成"><a href="#标志位的生成" class="headerlink" title="标志位的生成"></a>标志位的生成</h2><div class="row"><iframe src="https://drive.google.com/file/d/1eB9cp6JW4yC7uRp1ARu1sKI44QEhDKR7/preview" style="width:100%; height:550px"></iframe></div><h2 id="定点数的移位运算"><a href="#定点数的移位运算" class="headerlink" title="定点数的移位运算"></a>定点数的移位运算</h2><div class="row"><iframe src="https://drive.google.com/file/d/1_zzBq977BZqJWzXGlRJMkZQlwzwZFcue/preview" style="width:100%; height:550px"></iframe></div><h2 id="乘法运算"><a href="#乘法运算" class="headerlink" title="乘法运算"></a>乘法运算</h2><div class="row"><iframe src="https://drive.google.com/file/d/1ycQ00dSM5QGrMxS_C8FNAmKZMrDEKm4g/preview" style="width:100%; height:550px"></iframe></div><h2 id="除法运算"><a href="#除法运算" class="headerlink" title="除法运算"></a>除法运算</h2><div class="row"><iframe src="https://drive.google.com/file/d/1Db-a_VvbpVMdoCVchTORc6eYPuVwYWOP/preview" style="width:100%; height:550px"></iframe></div><h2 id="C-语言类型转换"><a href="#C-语言类型转换" class="headerlink" title="C 语言类型转换"></a>C 语言类型转换</h2><p><img src="https://bu.dusays.com/2024/03/18/65f7218b85d4c.jpg" alt="2.2_8_C语言类型转换-1.jpg"></p><h2 id="数据的存储和排列"><a href="#数据的存储和排列" class="headerlink" title="数据的存储和排列"></a>数据的存储和排列</h2><div class="row"><iframe src="https://drive.google.com/file/d/1FDpWZ7M34v8DfBeji7iYnx5iBdcYp-iT/preview" style="width:100%; height:550px"></iframe></div><h2 id="浮点数的表示"><a href="#浮点数的表示" class="headerlink" title="浮点数的表示"></a>浮点数的表示</h2><div class="row"><iframe src="https://drive.google.com/file/d/1i5iF7UOUL_5OTsmESF0J7rY1AbQsOIMo/preview" style="width:100%; height:550px"></iframe></div><h2 id="IEEE-754"><a href="#IEEE-754" class="headerlink" title="IEEE 754"></a>IEEE 754</h2><div class="row"><iframe src="https://drive.google.com/file/d/1znrh5gglUT1Q8pvCcAg5UHtBM9A3yOnE/preview" style="width:100%; height:550px"></iframe></div><h2 id="浮点数的运算"><a href="#浮点数的运算" class="headerlink" title="浮点数的运算"></a>浮点数的运算</h2><div class="row"><iframe src="https://drive.google.com/file/d/125ZNwyYS603DvaRnPC1qRVMeTQDI7rLi/preview" style="width:100%; height:550px"></iframe></div><h2 id="存储系统的基本概念"><a href="#存储系统的基本概念" class="headerlink" title="存储系统的基本概念"></a>存储系统的基本概念</h2><div class="row"><iframe src="https://drive.google.com/file/d/1_p9zXSvFj0Ns9QOB5OsCBJSBDNMJsOHc/preview" style="width:100%; height:550px"></iframe></div><h2 id="主存储器的基本组成"><a href="#主存储器的基本组成" class="headerlink" title="主存储器的基本组成"></a>主存储器的基本组成</h2><div class="row"><iframe src="https://drive.google.com/file/d/1324nOIVeVyXN87HDR6xcUD2RXckmETV3/preview" style="width:100%; height:550px"></iframe></div><h2 id="SRAM-和-DRAM"><a href="#SRAM-和-DRAM" class="headerlink" title="SRAM 和 DRAM"></a>SRAM 和 DRAM</h2><div class="row"><iframe src="https://drive.google.com/file/d/1B0lSED0ImwOsk8Cp8P-2wFHSqPeFXZ6O/preview" style="width:100%; height:550px"></iframe></div><h2 id="只读存储器-ROM"><a href="#只读存储器-ROM" class="headerlink" title="只读存储器 ROM"></a>只读存储器 ROM</h2><div class="row"><iframe src="https://drive.google.com/file/d/18ZruCWijBtx5T4JMxWgd-NktRsMfV0gm/preview" style="width:100%; height:550px"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝色笔记</title>
      <link href="/posts/6bc19761.html"/>
      <url>/posts/6bc19761.html</url>
      
        <content type="html"><![CDATA[<p>考研的原因：</p><p><img src="https://bu.dusays.com/2023/01/04/63b5789893aa1.png" alt="考研只为慢就业"></p><p>个人笔记，存档。</p><div class="row"><iframe src="https://drive.google.com/file/d/1qcYyh8SmfeVZdGVTz1NGKH70FjaxHQjw/preview" style="width:100%; height:550px"></iframe></div><p><img src="https://bu.dusays.com/2023/01/05/63b653bf90fe1.jpg" alt="考研蓝色笔记-01.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b653f41fdac.jpg" alt="考研蓝色笔记-02.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c6952042011.jpg" alt="考研蓝色笔记-03v2.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b653f5a5e7d.jpg" alt="考研蓝色笔记-04.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b653f59d4ef.jpg" alt="考研蓝色笔记-05.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b653f604ef0.jpg" alt="考研蓝色笔记-06.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b653f5ca516.jpg" alt="考研蓝色笔记-07.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b653f5bb43f.jpg" alt="考研蓝色笔记-08.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b653f549d93.jpg" alt="考研蓝色笔记-09.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b653f610a7d.jpg" alt="考研蓝色笔记-10.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b654441c8b6.jpg" alt="考研蓝色笔记-11.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b6544426434.jpg" alt="考研蓝色笔记-12.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b65446b0048.jpg" alt="考研蓝色笔记-13.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b65447d50f3.jpg" alt="考研蓝色笔记-14.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b65448c282d.jpg" alt="考研蓝色笔记-15.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b6544a50fb2.jpg" alt="考研蓝色笔记-16.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b6544a50fb2.jpg" alt="考研蓝色笔记-17.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b65449a3b41.jpg" alt="考研蓝色笔记-18.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b65449ad4b4.jpg" alt="考研蓝色笔记-19.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b6544a5e7ee.jpg" alt="考研蓝色笔记-20.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b6549f445d5.jpg" alt="考研蓝色笔记-21.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b6549d6a227.jpg" alt="考研蓝色笔记-22.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b6549f6c73b.jpg" alt="考研蓝色笔记-23.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b654a02f503.jpg" alt="考研蓝色笔记-24.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b654a0b3468.jpg" alt="考研蓝色笔记-25.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b654a027760.jpg" alt="考研蓝色笔记-26.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b654a0e1d2d.jpg" alt="考研蓝色笔记-27.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b6549e9b427.jpg" alt="考研蓝色笔记-28.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b654a1e322e.jpg" alt="考研蓝色笔记-29.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b654a19b2d5.jpg" alt="考研蓝色笔记-30.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b654ee3f9b8.jpg" alt="考研蓝色笔记-31.jpg"></p><p>最后一点补充：</p><p><img src="https://bu.dusays.com/2023/06/29/649d0fae56c77.jpg" alt="22-1.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学错题集</title>
      <link href="/posts/a731e7f0.html"/>
      <url>/posts/a731e7f0.html</url>
      
        <content type="html"><![CDATA[<h2 id="多元函数微分学"><a href="#多元函数微分学" class="headerlink" title="多元函数微分学"></a>多元函数微分学</h2><p><img src="https://bu.dusays.com/2023/01/04/63b5799722887.jpg" alt="数学错题集-01.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57995ec2b5.jpg" alt="数学错题集-02.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57990c09f3.jpg" alt="数学错题集-03.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b5799429574.jpg" alt="数学错题集-04.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57998a1afc.jpg" alt="数学错题集-05.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b5799984587.jpg" alt="数学错题集-06.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b579925e8f3.jpg" alt="数学错题集-07.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57993ecde2.jpg" alt="数学错题集-08.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b5799341f85.jpg" alt="数学错题集-09.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b5799914d57.jpg" alt="数学错题集-10.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57aa92d944.jpg" alt="数学错题集-11.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57aa968384.jpg" alt="数学错题集-12.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57aaab8d66.jpg" alt="数学错题集-13.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57aaa3c26f.jpg" alt="数学错题集-14.jpg"></p><h2 id="极值"><a href="#极值" class="headerlink" title="极值"></a>极值</h2><p><img src="https://bu.dusays.com/2023/01/04/63b57aa778d11.jpg" alt="数学错题集-15.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57aa9d91a8.jpg" alt="数学错题集-16.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57aa897966.jpg" alt="数学错题集-17.jpg"></p><h2 id="积分与极限"><a href="#积分与极限" class="headerlink" title="积分与极限"></a>积分与极限</h2><p><img src="https://bu.dusays.com/2023/01/04/63b57aa22c1de.jpg" alt="数学错题集-18.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57aa8b882f.jpg" alt="数学错题集-19.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57aa7ab852.jpg" alt="数学错题集-20.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b190d605.jpg" alt="数学错题集-21.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b1796e5e.jpg" alt="数学错题集-22.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b183ddde.jpg" alt="数学错题集-23.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b21d0358.jpg" alt="数学错题集-24.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b20698dd.jpg" alt="数学错题集-25.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b2116299.jpg" alt="数学错题集-26.jpg"></p><h2 id="一元函数"><a href="#一元函数" class="headerlink" title="一元函数"></a>一元函数</h2><p><img src="https://bu.dusays.com/2023/01/04/63b57b1eb564b.jpg" alt="数学错题集-27.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b200004e.jpg" alt="数学错题集-28.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b1f6d84c.jpg" alt="数学错题集-29.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b1f76647.jpg" alt="数学错题集-30.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b9059203.jpg" alt="数学错题集-31.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b8fde903.jpg" alt="数学错题集-32.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b94a0f86.jpg" alt="数学错题集-33.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b955dabf.jpg" alt="数学错题集-34.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b94151f2.jpg" alt="数学错题集-35.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b98c1752.jpg" alt="数学错题集-36.jpg"></p><h2 id="微分方程"><a href="#微分方程" class="headerlink" title="微分方程"></a>微分方程</h2><p><img src="https://bu.dusays.com/2023/01/04/63b57b983feaa.jpg" alt="数学错题集-37.jpg"></p><p><strong>n 阶齐次线性微分方程一定有 n 个线性无关的解，这 n 个线性无关的解一定构成该 n 阶齐次线性微分方程的基本解组。</strong></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b97eea10.jpg" alt="数学错题集-38.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b98c7d1a.jpg" alt="数学错题集-39.jpg"></p><h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><p><img src="https://bu.dusays.com/2023/01/04/63b57b98dd08b.jpg" alt="数学错题集-40.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c018d404.jpg" alt="数学错题集-41.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57bff85b9e.jpg" alt="数学错题集-42.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c000837f.jpg" alt="数学错题集-43.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c04ec643.jpg" alt="数学错题集-44.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c04f36f2.jpg" alt="数学错题集-45.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c04424fd.jpg" alt="数学错题集-46.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c046d6d8.jpg" alt="数学错题集-47.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c046a2bb.jpg" alt="数学错题集-48.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c04e666f.jpg" alt="数学错题集-49.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c04e951a.jpg" alt="数学错题集-50.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c6da5b3a.jpg" alt="数学错题集-51.jpg"></p><h2 id="2022数二"><a href="#2022数二" class="headerlink" title="2022数二"></a>2022数二</h2><p><img src="https://bu.dusays.com/2023/01/04/63b57c70289c4.jpg" alt="数学错题集-52.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c6ec3006.jpg" alt="数学错题集-53.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c71bbdf8.jpg" alt="数学错题集-54.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c7261dd7.jpg" alt="数学错题集-55.jpg"></p><h2 id="2020数二"><a href="#2020数二" class="headerlink" title="2020数二"></a>2020数二</h2><p><img src="https://bu.dusays.com/2023/01/04/63b57c720d789.jpg" alt="数学错题集-56.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c7259a69.jpg" alt="数学错题集-57.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c721e84f.jpg" alt="数学错题集-58.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c71f19b9.jpg" alt="数学错题集-59.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c6feba9d.jpg" alt="数学错题集-60.jpg"></p><h2 id="2019数二"><a href="#2019数二" class="headerlink" title="2019数二"></a>2019数二</h2><p><img src="https://bu.dusays.com/2023/01/04/63b57cef090a9.jpg" alt="数学错题集-61.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57cef07015.jpg" alt="数学错题集-62.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57cefe52a9.jpg" alt="数学错题集-63.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57cf0d4784.jpg" alt="数学错题集-64.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57cf154d21.jpg" alt="数学错题集-65.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57cf07c19b.jpg" alt="数学错题集-66.jpg"></p><h2 id="2018数二"><a href="#2018数二" class="headerlink" title="2018数二"></a>2018数二</h2><p><img src="https://bu.dusays.com/2023/01/04/63b57cf18e05d.jpg" alt="数学错题集-67.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57cf13d8e0.jpg" alt="数学错题集-68.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57cf176324.jpg" alt="数学错题集-69.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57cf1879eb.jpg" alt="数学错题集-70.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57d76908cf.jpg" alt="数学错题集-71.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57d76a5afe.jpg" alt="数学错题集-72.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信与回信</title>
      <link href="/posts/d1e8cada.html"/>
      <url>/posts/d1e8cada.html</url>
      
        <content type="html"><![CDATA[<p>可以看作是《春宵苦短，少女前进吧》的后续。</p><blockquote><p>原文：<a href="https://movie.douban.com/review/8521843/">https://movie.douban.com/review/8521843/</a><br>作者：豆瓣用户 一切顺利！</p></blockquote><p><img src="https://bu.dusays.com/2023/01/01/63b198d0d1c47.png" alt="20-3v2.png" title="电影中的进进堂"></p><h2 id="【剧场特典】给“乙女”的信（渣翻）"><a href="#【剧场特典】给“乙女”的信（渣翻）" class="headerlink" title="【剧场特典】给“乙女”的信（渣翻）"></a>【剧场特典】给“乙女”的信（渣翻）</h2><p>拜启。</p><p>问候并祝安康。</p><p>此前能够同往“进进堂”及旧书店，我感到非常欣喜。</p><p>当时怀着邀请你就不能有不周到的想法，心情也变得紧张。但在和你交谈这一年的回忆时，渐渐变得平稳，就像是肚子上顶着刚出锅的肉包子舒服躺下般的惬意。上次有这么美好的感觉，大概是婴儿时初次洗澡的事吧。再次表达谢意。</p><p>不过最近也实在是寒冷呀。为了和无情的寒冷对抗，现在的我正钻在四叠半宿舍的被窝里写下这封信。请原谅这随意的行为。在这连叹气都能冻结住的四叠半内，一切脑力活动不得不在完成在从来都是摊开的被窝上，我强撑着这种严酷生活。</p><p>话说回来，写这封信的理由有两个。</p><p>第一个理由，我仅仅是想要试着给你写信。如果你觉得困扰，今后罢手。</p><p>还有一个是，之前见面的时候忘记约定下次的碰面。实在是大意了。如果你没有觉得“真是受够了”的话，可以再次一起做些什么吗？</p><p>关于应该一起去哪里，请允许我说明一个提案。</p><p>要讲述这个像天启一般进入我脑内的提案，就得从前些日子我和樋口一起去北白川天神宫说起。</p><p>那天早上开始下起雪，东边的群山像撒了层砂糖似的变得洁白。这种天气当然再适合不过读书。我便在宿舍里大口吃着肉馒头熟读玩味康德的《纯粹理性批判》。正用纯粹的心情批判自己理性的时候，樋口穿着落满雪花的夹克突然来了。</p><p>“呀，你。我能拜托件事儿吗？”</p><p>从樋口氏处得知，洛中有个“狸猫文学赏”，似乎会挑选每年写就的狸猫小说中最优一作来进行表彰。“那是什么呀”我还是无法想象。而且再继续听下去，樋口根本连小说都没写过，却由于“常年过着狸猫般生活之事的功绩”而得得到了文学赏的荣誉奖。真是充满狸猫气息的可疑，再加上授奖式还是在东山山麓北白川天神宫内举行这点，愈发令人怀疑。这种《漫画日本昔话》一样的文学赏真的存在吗？毕竟樋口一直就是故弄玄虚的好手。</p><p>“但是说是狸猫，樋口更该是天狗吧。”</p><p>“天狗啦狸猫啦都是同样的呦。不管得到的是马粪还是柿子的茎叶，我是能得到好主义。听说有奖品可以拿，来帮忙搬运吧。”就这样，我们在雪天出门了。</p><p>走在通向北白川天神宫志贺越道上，我就“男女间合适的幽会”一事向樋口请教。不过是想向可以信任的前辈问些一般论的东西罢了。于是樋口给我讲述了“与画中女性梦中相会之术”和“与看不见的恋人互通书信之术”之类的事情。但这些事情对现在的我来说完全没用，只觉得一头雾水。</p><p>听我“想听些更加平凡的方法”之后，樋口唰啦唰啦摸着胡子发出“唔—”的声音。</p><p>“……平凡的东西一点也不了解。”</p><p>向樋口寻求一般论的我真是笨蛋。</p><p>“一牵扯到实际利益就没辙了呀。”</p><p>“喂喂，你的奉承话就免了吧。”</p><p>终于到达北白川天神宫的我们，走过架设在白川上的小桥，穿过阴暗的树林登上了石制台阶。但是周围完全没有举办授奖式的迹象。当我觉得肯定是被谁戏弄之时，樋口突然小声说了句“是柑橘呀”。</p><p>在拜殿后方，我终于发现了满满一纸箱的柑橘。上边还用修行僧人用的法螺压着一张草纸，写着拙劣的“之后的事就交给你了”。</p><p>“你看，很豪气吧！”</p><p>“……这真的是奖品吗？明明是授奖式却谁也不在。简直像是被狸猫骗了。”</p><p>“所以说是自助的形式吧。”</p><p>尽管仍旧半信半疑，我们还是遵从写着“之后的事就交给你了”的草纸，严肃地完成授奖式。然后带着可疑的蜜柑开始返回。搬运大量蜜柑显而易见是我的任务，樋口只负责走在前边随意地吹着法螺。在降雪的东山里，回响出说不上是舒畅还是悲伤的声音。</p><p>说起在“进进堂”共饮咖啡。这旁人看来小小的一步对我们来讲确实是巨大的一步。已经往新世界踏出第一步的当下，犹豫是不会带来进步的。我们应当趁此鼓起勇气向前迈步。但是呀，下一步应该怎么做呢？即使用被《纯粹理性批判》锤炼的理性，我也找不到合适的方案。这是什么缘故呢？</p><p>在白川桥上夸张地跌倒，大概就是因为深陷这些想法而没注意脚下吧。从整个跌落的纸箱里蜜柑咕噜咕噜地滚落出来。滚落出的蜜柑中有一个喊着“老子就从这启程了”纵身跃下川流。只顾着慌慌张张收集其他蜜柑，对落下白川的那个家伙只能放弃。樋口则透过栏杆一边眺望着河面，一边吹起法螺，发出了有些悲伤的响声。</p><p>“嘛别失落呀，你，” 樋口说道，“说不定在不知何处它会被美丽的少女捡到呢。”</p><p>无论如何这种事也是不可能的吧，可能是自己使它掉落的罪恶感使然，我不由得为那颗小小圆圆蜜柑的幸福祈祷起来。小小的圆圆的，又使我联想起你来，我变得更加同情那颗蜜柑。</p><p>正要再次出发的时候，小巧洁白又软乎乎的东西从灰色天空降下。开始还以为是雪花，但是它们粘在肩膀上并没有融化。仔细看发现，那是可爱的羽毛。这东西是从哪里飞来的呢。用手指拈起向着远处，太阳的光线穿透云彩的缝隙染得羽毛银光闪闪。不知为何感到扔掉的话太过可惜，就在我把羽毛收进口袋的瞬间，脑内冷不丁地浮现出“银幕”这个词语。</p><p>银幕。银幕。银幕的冒险！</p><p>银幕的冒险，正是指明去往电影院！这不就是我所探求的下一步吗！昏暗中紧紧依靠着落座，在闪耀着光芒的另一侧进入同样的梦境。从咖啡厅到电影院——这才是正确的发展方向呀！善男信女该行之路。</p><p>我把这件事说出来。</p><p>“这样啊”，樋口如是说到。</p><p>“原来如此，这就是所谓平凡呀。但是平凡才是王道，王道才是王道！世人就是这般催人泪下苦苦用心，在难以分辨的黑暗中紧紧握住意中人的手的吧。”</p><p>之后我们抱着狸猫文学赏奖品的蜜柑箱一路返回。</p><p>那么，因为给你写信浮现出太多开心的事，我不知不觉就写了许多没用的东西。再次献上歉意。总之这封信不过就是“不一起去电影院吗”这种朴素的邀请。平凡才是王道，王道才是王道。以防万一，容我做个补充，我保证不会在黑暗中，不经允许就做握住你的手之类的羞耻事情。如果能有机会共同享受银幕的冒险，荣幸之极。</p><p>静候回音，</p><p>$\qquad$ $\qquad$ $\qquad$ 恐惶谨言。</p><p><img src="https://s2.loli.net/2022/12/28/MtZd3B4heqyo7sn.webp" alt="20-1.webp" title="现实中的进进堂"></p><hr><blockquote><p>原文：<a href="https://www.douban.com/note/643884651">https://www.douban.com/note/643884651</a><br>作者：豆瓣用户 一切顺利！</p></blockquote><h2 id="【剧场特典2】乙女给前辈的回信（自翻）"><a href="#【剧场特典2】乙女给前辈的回信（自翻）" class="headerlink" title="【剧场特典2】乙女给前辈的回信（自翻）"></a>【剧场特典2】乙女给前辈的回信（自翻）</h2><p>拜启。</p><p>你好，感谢之前的郑重来信。</p><p>托你的福，我现在就像才刚擦亮的苹果一样精神。</p><p>拜见了前辈的来信之后，有些无论如何都想传达的记忆咕噜咕噜地涌上心来，所以我就默念着“迸发吧，我的文才！”写下了回信。</p><p>前几天，应羽贯的邀请，我们一起出门要去银阁寺散步。早上开始飘起雪花，从今川通路往上看，能看到大文字也着了美丽的银装。但是一点也不冷。因为我本来就是不怕冷的类型，再加上还穿了羽贯给的软蓬蓬的羽绒服。</p><p>考虑到要去银阁寺，我们在门前町吃了热乎乎的鸡蛋馄饨。吃完之后感觉自己变成了刚出烤箱的面包，热气腾腾的。落在脸颊的雪转瞬就融化了。</p><p>“只是站在旁边就能感受到你传来的热乎空气”，羽贯惊讶地说到，“你为什么那么热乎呢？真想每家放一个取暖呢。”</p><p>非常荣幸，但是到了夏天一定就变得碍事了吧。</p><p>看着周围卖的伴手礼商品穿过门前町的时候，我们和一位不可思议的绅士变成了并行的状态。是位穿着西装套着高级外套、胡子漂亮翘起的老人。并不知道对方的名字，但是感觉和萨尔瓦多•达利非常像，我就在心里决定以“萨尔瓦多老爷爷”来称呼他了。萨尔瓦多老爷爷因为寒冷而瑟瑟发抖，大概他是被我身上多余的热气腾腾吸引过来的吧。可能我这种人真是随身暖炉（小型）一般的存在也说不定。</p><p>“到坡下为止，能允许我同行吗，小姑娘。”（“小姑娘”原文为法语源外来词，后文所有“小姑娘”同此。）</p><p>萨尔瓦多老爷爷行了一礼。</p><p>羽贯回了句“是，先生。”（“是，先生。”原文为法语源外来词。）</p><p>为什么是法语呢？我不明白。难道达利不是西班牙人吗。</p><p>边走下充满观光客的门前町，边和萨尔瓦多老爷爷交谈的内容是：适合刚结识的男女出门的合适的地方。和前辈一样，我也想向可以信赖的过来人寻求智慧的答案。</p><p>“不必困扰。请去电影院吧。”萨尔瓦多老爷爷晃动着手杖如是说。</p><p>“银幕的冒险才是，能为刚结识的男女互相间加深理解的可称为心的旅途的东西。在幕布另一侧展现开的是，从这个世界的偏颇现实中解放出来的梦之世界。电影院的黑暗是人工的甘美的夜晚。独自个体的男女肩靠肩，听着对方的呼吸声，清澈悦耳。时而欢笑时而哭泣，两人感受着相同的梦。这是多么雅致诱人的恋情经营法呀。如何呢，小姑娘？并不是只靠视线相交就可以明白对方的事情。只是费力互相瞪眼的话，前路只会变成争斗。如果不是共同度过短短的夜晚，如果不是共同观看美梦，那可是看不到对方的灵魂呦。”</p><p>从萨尔瓦多老爷爷的大演讲中，我受到了深深的启发。想着必须邀请前辈去感受银幕的冒险，我一下子握紧了热乎乎的小小拳头。</p><p>“受教了。”</p><p>但是羽贯似乎有所不满。“电影什么的不行啦。你想呀，每个人想看的电影都不尽相同。要是勉强两人一起去看电影的话……”</p><p>“有和樋口前辈一起去看过吗？”</p><p>“也不是没去过。我是想看时髦的外国影片啦。但樋口不是只看些低级的东西嘛。看合我口味的电影，樋口就会打瞌睡，看合樋口口味的，我就会打瞌睡。两个人都能看到最后的电影简直一部都没有。”</p><p>“这是说了些什么杀气腾腾的话呀，小姑娘！”</p><p>看着没什么精神的萨尔瓦多老爷爷，不知为何我有点同情。</p><p>不知不觉我们走过门前町，都到了银阁寺的路口。在正好要踏上白川上方小桥的时候，萨尔瓦多老爷爷停住了。从栏杆上注视着河面嘟囔道：“是从哪里流过来的呢？”</p><p>我也驻足去看，有一只颜色鲜艳的蜜柑，在河底非常活跃叽里咕噜地翻来转去。看起来，它简直像是在拼尽全力向我冲过来。</p><p>萨尔瓦多老爷爷突然一下子越过栏杆，羽贯和我都吃惊地屏住了呼吸。真是让人无法联想到是老人的敏捷身手。老爷爷像羽毛似的站在河里，捡起流过去的蜜柑，又轻轻地爬了上来。</p><p>听羽贯说完“吓死了!”，老爷爷边拿手帕擦拭湿漉漉的蜜柑边用得意的语气说：“以前，我可是曾作为杂技员出入过摄影棚呢。”</p><p>老爷爷把那个蜜柑放在了我的手上。</p><p>“就把这个蜜柑给苹果一样的小姑娘吧。”</p><p>“万分感谢。”</p><p>“没问题吧，小姑娘。请去感受银幕的冒险。如果能够共同度过短短的夜晚，共同观看美梦的话——”</p><p>萨尔瓦多老爷爷很熟练地眨眼使了个眼色，抚摸下胡子摇着手杖朝南边的方向走去了。我连向老爷爷道谢，感谢他提供了宝贵意见的机会都没有。如风来，似风去。我想，这简直就像是和电影之神擦肩而过一样。我保持抱着蜜柑的姿势，目送老爷爷的背影离去。</p><p>“真是奇怪的老爷爷呀。”羽贯如是说。</p><p>“是非常出色的人。”</p><p>“你打算拿着那个蜜柑回去吗？没事吧，那可是河里流过来的东西呀。”</p><p>“毕竟也是难得的馈赠之物。”</p><p>那个蜜柑小小圆圆的，滑溜溜地大放光芒。</p><p>从白川上流的方向处传来了“咘—”的奇怪声音。那是修行僧的法螺吧，羽贯这么说到。这么说的话，也真是挺宝贵的声响。</p><p>就这么要踏上归途的时候，羽贯“啊”的一声叫起来，抓住了我羽绒服的下摆。</p><p>“这种地方居然开了个洞？！”</p><p>羽贯给我的软蓬蓬桃色羽绒服上居然开了一个小洞。从中一直有羽毛漏出。这是怎么回事呀。之前还因为身边有那么多软乎乎的白色东西，在想“这雪还真是一时停不下来呀”。</p><p>结果竟然是从羽绒服里漏出的羽毛—真是太羞耻了。真想钻进衣服上的小洞里。话虽如此，这么下去也不行，我就用从萨尔瓦多老爷爷那里得到的蜜柑挡住了破洞，边保护着剩余的羽毛边急匆匆地往回赶。</p><p>到此为止就是想传达给前辈的事情。</p><p>已经明白了我在意的东西，前辈也不需要担心流入白川的蜜柑的去向啦。因为那个蜜柑由我好好地带回家了。还有在北白川天神落在前辈肩头的羽毛，也一定是被我在银阁寺门前掉落又乘风到你身边的吧。</p><p>真是奇遇呢！</p><p>然后，关于接下来要迈出的一步，前辈进行了那么认真的研究，我非常开心。当然我也赞成前辈的提议。</p><p>来吧，向着人工的夜晚中映出的梦之世界。春宵苦短，少女前进吧！</p><p>自心底期待和你的见面。         </p><p>$\qquad$ $\qquad$ $\qquad$ 敬具。</p><p><img src="https://s2.loli.net/2022/12/28/QyLcBd5EPrpICs3.webp" alt="20-2.webp" title="银阁寺"></p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电影推荐《春宵苦短，少女前进吧》</title>
      <link href="/posts/dc1dbc8f.html"/>
      <url>/posts/dc1dbc8f.html</url>
      
        <content type="html"><![CDATA[<p>似乎是官方网站：<a href="https://kurokaminootome.com/">https://kurokaminootome.com/</a></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>以我之愚见，观看一部动画电影时，首要义务是抛弃自己的经验，进入银幕另一侧的世界中去。『在幕布另一侧展现开的是，从这个世界的偏颇现实中解放出来的梦之世界』，这梦之世界中的男女都是自由的。因此不必试图在电影中寻求现实的影子，也毋须将现实中的人际关系与行动逻辑与电影比较。</p><blockquote><p>《日本动画“无影作画”技法的美学研究》<a href="#bib1" id="bib1ref"><sup>[1]</sup></a>：<br>在爱森斯坦看来，动画中的形象就具有这种特性。它们作为一种被画出来的形式，拥有特定的外观，但却如原生质一般活动，总是处在一种尚不具备稳定形式的状态中，<strong>简言之，就是一种可以成为任何事物的潜在能力。这是一种兼具了破坏性与创造性的暴力，它让人们相信，动画形象可以被用来冲破各种限制，从而自由地去进行表达。</strong>……不过，随着迪士尼后来的现实主义转向，动画原生的自由也逐渐被抛弃和抑制了。正像韦尔斯所说，“随着迪士尼的每一次技术进步，他们就越来越远离他们在早期的《糊涂交响曲》中所表现出的原生质的灵活性，强行将动画形式裹挟到新现实主义的实践当中。”从此以后，“动画电影中图形和叙事的无政府状态般的意识形态自由，也让位给了现实情境中的道德评比。” 由此可见，放大和张扬动画“原生质性”的做法就意味着一条与现实主义截然相反的道路，它能够将人们从物质的、现实的、既定的法则和限制中解放出来，以自由的、精神的形态去活动、去表达。</p></blockquote><p>观者若是能真正放下姿态，放下电影指导现实、从中获得启迪教益的急切心态，沉浸到银幕另一侧的世界中，一定能更好地领悟《春宵》本身的美和幽默。</p><div class="tip error"><p>以下包含剧透</p></div><h2 id="推荐理由"><a href="#推荐理由" class="headerlink" title="推荐理由"></a>推荐理由</h2><p>动画是日本流行文化的重要形式之一，如果要对日本动画进行研究，《春宵》就是值得被拿出来作为案例的动画电影之一（此为博主主观臆断）。</p><p>另外，《春宵》也适合推荐给女性友人观看（如果有的话？），这部电影给我的感觉很清爽自然，嗯，就和《狼与香辛料》、《萤火之森》差不多。</p><p>《春宵》是一部非常“日本”的动画，包含了很多鲜明的文化元素<a href="#bib2" id="bib2ref"><sup>[2]</sup></a>。</p><p><img src="https://bu.dusays.com/2023/01/01/63b1944f75a28.png" alt="拼酒的场景布置"></p><p><img src="https://bu.dusays.com/2023/01/01/63b1944d81ff1.png" alt="五山送火"></p><p>这些颇具历史文化气息的元素，在银幕和观众间砌起高墙，并与现实划清界限：它是现代社会的避难所、田园诗式的保留地。没有高楼大厦，没有通勤的人流——鸭川中站着苹果一般的女孩。</p><p>在这块保留地里，一切事物都是『以自由的、精神的形态去活动』，这正是导演汤浅政明所擅长的：</p><p><img src="https://bu.dusays.com/2023/01/02/63b1d22f55bcf.png" alt="愿作深海鱼，四周便填满海水"></p><p><img src="https://bu.dusays.com/2023/01/02/63b1d22f23a23.png" alt="被抓住的书像鱼一样挣扎（需要在电影中观看）"></p><p>与之相应的是视觉上的艳丽，它一方面强调了作品的非现实性和自由的基调，另一方面色彩的对比也调动了情绪的变化：</p><p><img src="https://bu.dusays.com/2023/01/02/63b24f644ce0c.png" alt="酒吧里的酒水"></p><p><img src="https://bu.dusays.com/2023/01/02/63b24f674624e.png" alt="羽贯骗酒"></p><p>黑发少女的一些照片：</p><p><img src="https://bu.dusays.com/2023/06/25/64983e14b78de.png" alt="littlelady.png"></p><p><img src="https://bu.dusays.com/2023/06/25/64983e14ddeb0.png" alt="aihei.png"></p><p><img src="https://bu.dusays.com/2023/06/25/64983e14f0c08.png" alt="drinkchallenge.png"></p><p><img src="https://bu.dusays.com/2023/02/08/63e375a2ed34b.png" alt="动作细节"></p><p>最后附上《春宵》中《四叠半》的彩蛋：</p><p><img src="https://bu.dusays.com/2023/01/02/63b255260828d.png" alt="明石的饼熊玩偶"></p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><blockquote><p>《日本动画“无影作画”技法的美学研究》节选：</p></blockquote><p>他的很多动画都给人一种没有阴影的感觉，不仅仅是没有深色色块所表示的角色暗部，通常也没有角色投影，就连背景也时常没有阴影。或者说，在他的作品中没有“现实”的阴影，即使偶尔在角色身上出现了阴影，那多半也是内心的阴影、想象的阴影、主观的阴影。在汤浅政明看来，阴影就是自然世界和客观现实的符号，它之所以将阴影排除在他的作品之外，就是因为比起外部的现实世界，他更乐意表现内部的心灵世界。</p><p>……</p><p>汤浅政明在这部影片里有意地以时间而非空间为舞台，让形形色色的人们登台表演，上演丰富而又离奇的人生戏剧。有的人在这里上演的只是人生的一个瞬间，有的人则在这里演完了一生——在相同的能指时间内，不同的角色经历了不同的所指时间。在年轻的女主人公的心里，每一个短促的瞬间体验都是丰沛而又鲜活的，时间因此被拉扯地悠远绵长；而在年迈的长者那里，他的感受力早已被岁月磨损，数载年华也如白驹过隙。这一点在片中也有较为直接地表述——当女主角和一群老人一同抬起手表看时间的时候，老人们的指针走得飞快，而女主角的指针则走得十分缓慢。心理时间是相对的、主观的、可以伸缩变形的。在这部影片里，汤浅政明通过各种生动的意象和巧妙的叙事手法，将自身的影像风格很好地融入到对多层次的心理时间的探索当中。 </p><p>……</p><p>外部的现实世界对应着一系列物理法则，这些法则总是限制着事物自我显现的方式。外部世界中的事物遵循着这些法则，因而角色总是被阴影牢牢跟随着。……<strong>我们可以将阴影看成是现实的注脚，在现实之光的朗照之下，事物就不能自行摆脱阴影。而一旦阴影被藏匿起来，影像表征现实的合法性就遭到了动摇，由此观众便会自然地将影像过渡到非现实的领域当中，也即幻觉与想象的精神领域中。</strong> 换言之，阴影通过缺席的方式把叙述的视点从人物的外部引向了内部。在这个过程中我们可以看到，阴影自始至终都被看成是意指现实的符号，它从一开始就肩负着表意的任务，只不过它所肩负的表意任务是通过缺席的方式来履行的。如果说阴影的在场意味着我们所看到的都是现实形象，那么阴影的缺席就意味着眼前的都是心理形象。在汤浅政明这里，他就是通过刻意隐匿各类阴影的方式，使他的观众对其动画影像所表征的对象“另眼相看”的。</p><p>……</p><p>我们也可以这样理解，汤浅政明动画中的角色之所以没有阴影，就是因为他们都只是从某个人物受限的视角内所能观察到的极为扁平的他人形象，对角色阴影的排除其实就是为了强调个人主观视角的局限性。 </p><hr><p><a id="bib1" href="#bib1ref"><sup>[1]</sup></a> 张长. 日本动画“无影作画”技法的美学研究[D].华东师范大学,2019.</p><p><a id="bib2" href="#bib2ref"><sup>[2]</sup></a> 例如 <em><a href="https://www.diva-portal.org/smash/record.jsf?pid=diva2%3A1717186">BEYOND REALIA –CULTURAL ASSOCIATIONS IN THE ENGLISH TRANSLATION OF THE NIGHT IS SHORT, WALK ON GIRL BY MORIMI TOMIHIKO</a></em> 中提及：By carefully selecting these cultural elements, the author constructs a literary style that is reminiscent of modern Japanese literature from Taisho (1912-1926) and early Showa (1926-1989). His style also effectively creates a universe that exudes traditional Japanese aesthetic associations expressed by both cultural objects (e.g., food, art, music, decorative objects) and legendary beings (e.g., gods, monsters).</p>]]></content>
      
      
      <categories>
          
          <category> 闲文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acg </tag>
            
            <tag> 汤浅政明 </tag>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我再也受不了校园暴力了</title>
      <link href="/posts/659fb3be.html"/>
      <url>/posts/659fb3be.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://i0.sinaimg.cn/edu/2014/1121/U5926P42DT20141121134611.jpg" alt="18-1.jpg"></p><p>事情是这样的。</p><p><img src="https://s2.loli.net/2022/11/29/eoEL3b6w7QT8GPD.jpg" alt="18-2.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CppNote</title>
      <link href="/posts/54b4d7a2.html"/>
      <url>/posts/54b4d7a2.html</url>
      
        <content type="html"><![CDATA[<p>本文是通过第五版《C++ primer》进行的查漏补缺。</p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>标准库定义了4个IO对象：</p><ul><li>cin : istream类型的对象，标准输入（standard input）</li><li>cout : ostream类型的对象，标准输出（standard output）</li><li>cerr : ostream类型的对象，标准错误（standard error）</li><li>clog : ostream类型的对象，用来输出程序运行时的一般信息</li></ul><p>一种不用namespace std的写法:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;enter two numbers:&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">    <span class="type">int</span> v1=<span class="number">0</span>, v2=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    std::cin&gt;&gt;v1&gt;&gt;v2;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;the sum of &quot;</span>&lt;&lt;v1&lt;&lt;<span class="string">&quot; and &quot;</span>&lt;&lt;v2&lt;&lt;<span class="string">&quot; is &quot;</span>&lt;&lt;v1+v2&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>std::cout</code> 两个冒号是一个运算符，作用域运算符。它表示我要把<code>std</code>作用域里面的<code>cout</code>拿出来用。</p><p><code>endl</code> 操作符，结束当前行，将设备相关的缓冲区内容刷到屏幕上。</p><p><code>cin</code>可以跳过空格、制表符、换行符等空白字符。</p><p>一般来说，自己创建的头文件，用双引号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>, value=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(std::cin&gt;&gt;value)&#123; <span class="comment">//读取数值直到文件结尾，或读入错误</span></span><br><span class="line">        sum+=value;       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;the sum is &quot;</span>&lt;&lt;sum&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上例中，无效的istream对象会使条件变为假，例如输入一个字母（非int型）。</p><h2 id="基本内置类型"><a href="#基本内置类型" class="headerlink" title="基本内置类型"></a>基本内置类型</h2><p><code>char</code>比较特殊，分为三种：<code>char</code>、<code>signed char</code>、<code>unsigned char</code>，<code>char</code>是<code>signed char</code>或<code>unsigned char</code>其中的一种，由编译器决定：VC编译器、x86上的GCC都把char定义为<code>signed char</code>，而arm-linux-gcc把char定义为<code>unsigned char</code>。</p><p>为了保持程序的移植性，应当明确指出到底是哪一种。</p><p>三者都占1个字节。<code>signed char</code>取值范围是<code>-128~127</code>(有符号位)，<code>unsigned char</code>取值范围是<code>0~255</code>。</p><p>原始的ASCII标准里，定义的字符码值是只有<code>0~127</code>，所以怎么定义的char都刚好装得下。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>记一种写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">std::string <span class="title">book</span><span class="params">(<span class="string">&quot;newbrush&quot;</span>)</span></span>;</span><br><span class="line">    <span class="comment">//what...?</span></span><br><span class="line">    std::cout&lt;&lt;book&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果（输出了字符串）：</span></span><br><span class="line"><span class="comment">//newbrush</span></span><br></pre></td></tr></table></figure><p>初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> units_sold = <span class="number">0</span>; <span class="comment">//以前的写法</span></span><br><span class="line"><span class="type">int</span> units_sold = &#123;<span class="number">0</span>&#125;; <span class="comment">//列表初始化（C++11）</span></span><br><span class="line"><span class="type">int</span> units_sold&#123;<span class="number">0</span>&#125;; <span class="comment">//列表初始化</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">units_sold</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>若使用列表初始化，且初始值存在丢失信息的风险，则编译器报错：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">double</span> ld=<span class="number">3.1415926536</span>;</span><br><span class="line"><span class="type">int</span> a&#123;ld&#125;,b=&#123;ld&#125;; <span class="comment">//报错，转换未执行</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">c</span><span class="params">(ld)</span>,d</span>=ld; <span class="comment">//旧写法，不报错，转换执行，同时丢失了部分值</span></span><br></pre></td></tr></table></figure><p>若只声明而不定义，就在变量前添加<code>extern</code>关键字，且不要显式地初始化变量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i; <span class="comment">//声明 i 而非定义 i</span></span><br><span class="line"><span class="type">int</span> j; <span class="comment">//声明并定义 j</span></span><br></pre></td></tr></table></figure><p>若不希望别的文件通过<code>extern</code>引用，可以使用<code>static</code>，这样作用域就是本文件。</p><p><strong>总结：</strong><code>extern</code>不是定义，是引入（声明）在其他源文件中定义的非<code>static</code>全局变量。</p><p>名字的作用域（scope）：</p><ul><li>同一个名字出现在程序的不同位置，也可能指向不同的实体。</li><li>C++中大多数作用域都以花括号分隔。</li><li>名字的有效区域始于名字的声明语句，以声明语句所在的作用域末端作为结束。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一个不好的例子</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">int</span> reused = <span class="number">42</span>; <span class="comment">// 全局作用域</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> unik = <span class="number">0</span>; <span class="comment">//块作用域</span></span><br><span class="line">    std::cout&lt;&lt;reused&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;unik&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> reused = <span class="number">0</span>; <span class="comment">//同名的新建局部变量，覆盖了全局变量</span></span><br><span class="line"></span><br><span class="line">    std::cout&lt;&lt;reused&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;unik&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout&lt;&lt;::reused&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;unik&lt;&lt;std::endl;</span><br><span class="line">    <span class="comment">//显式地访问全局变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*------------运行结果-----------</span></span><br><span class="line"><span class="comment">42 0</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">42 0</span></span><br><span class="line"><span class="comment">-------------------------------*/</span></span><br></pre></td></tr></table></figure><h2 id="复合类型（compound-type）"><a href="#复合类型（compound-type）" class="headerlink" title="复合类型（compound type）"></a>复合类型（compound type）</h2><p>引用（reference），为对象起的别名：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">1024</span>;</span><br><span class="line"><span class="type">int</span> &amp;refVal = ival; <span class="comment">//refVal 指向ival (是ival的另一个名字)</span></span><br><span class="line"><span class="type">int</span> &amp;refVal2; <span class="comment">//报错，引用必须初始化</span></span><br></pre></td></tr></table></figure><p>定义引用时，把引用和它的初始值绑定在一起，而不是把初始值拷贝给引用。引用不是对象，所以不能定义引用的引用，不能定义指向引用的指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reVal = <span class="number">2</span>; <span class="comment">//把2给refVal指向的对象，即赋给了ival</span></span><br><span class="line"><span class="type">int</span> li = refVal; <span class="comment">//等同于li=ival</span></span><br><span class="line"><span class="type">int</span> &amp;refVal3 = refVal; <span class="comment">//正确：refVal3绑定到了那个与refVal绑定的对象上，即绑定了ival</span></span><br></pre></td></tr></table></figure><p>可以使用取地址符<code>&amp;</code>获取指针所封装的地址：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;ival; <span class="comment">//p是指向ival的指针</span></span><br><span class="line"><span class="type">double</span> *dp = &amp;ival; <span class="comment">//错误！类型不匹配</span></span><br></pre></td></tr></table></figure><p>对于“指针的值+1”的解释：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;hello this is a test&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">233</span>;</span><br><span class="line">    <span class="type">int</span> *p = &amp;a;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;adress: &quot;</span>&lt;&lt;p&lt;&lt;std::endl;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;neirong: &quot;</span>&lt;&lt;*p&lt;&lt;std::endl;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;adress+1: &quot;</span>&lt;&lt;p+<span class="number">1</span>&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*---------------运行结果----------------</span></span><br><span class="line"><span class="comment">hello this is a test</span></span><br><span class="line"><span class="comment">adress: 0x61fe14</span></span><br><span class="line"><span class="comment">neirong: 233</span></span><br><span class="line"><span class="comment">adress+1: 0x61fe18</span></span><br><span class="line"><span class="comment">---------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*----------explanation-----------</span></span><br><span class="line"><span class="comment">p+1的效果反映在地址上（单词拼错小问题）</span></span><br><span class="line"><span class="comment">在博主本人的机器上，int型占4个字节</span></span><br><span class="line"><span class="comment">--------------------------------*/</span></span><br></pre></td></tr></table></figure><p>可以使用解引用符<code>*</code>利用指针访问对象：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;ival; <span class="comment">//p是指向ival的指针</span></span><br><span class="line">std::cout&lt;&lt;*p; <span class="comment">//输出42</span></span><br><span class="line">*p=<span class="number">0</span>;</span><br><span class="line">std::cout&lt;&lt;*p <span class="comment">//输出0</span></span><br></pre></td></tr></table></figure><p>空指针（null pointer），不指向任何对象。在使用一个指针前，可以先检查它是否为空。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p1 = <span class="literal">nullptr</span>; <span class="comment">//C++11 ，推荐写法</span></span><br><span class="line"><span class="type">int</span> *p2 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *p3 = <span class="literal">NULL</span>; <span class="comment">//需要 #include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="type">int</span> zero = <span class="number">0</span>;</span><br><span class="line">p1 = zero; <span class="comment">//错误！类型不匹配</span></span><br></pre></td></tr></table></figure><p>void *指针，纯粹的地址封装，与类型无关。可以用于存放任意对象的地址：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> obj = <span class="number">3.14</span>, *pd = &amp;obj;</span><br><span class="line"><span class="type">void</span> *pv = &amp;obj;</span><br><span class="line">pv = pd;</span><br></pre></td></tr></table></figure><p>指向指针的指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">1024</span>;</span><br><span class="line"><span class="type">int</span> *pi = &amp;ival;</span><br><span class="line"><span class="type">int</span> **ppi = &amp;pi; <span class="comment">//ppi指向一个int型的指针</span></span><br></pre></td></tr></table></figure><p>指针的引用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1024</span>;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line"><span class="type">int</span> *&amp;r = p; <span class="comment">//r是一个对指针p的引用</span></span><br><span class="line">r = &amp;i; <span class="comment">//r引用了一个指针，就是令p指向i</span></span><br><span class="line">*r = <span class="number">0</span>; <span class="comment">//解引用得到i，将i的值改为0</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1024</span>;</span><br><span class="line">    <span class="type">int</span>* p;</span><br><span class="line">    <span class="type">int</span>*&amp; r = p;  <span class="comment">//r是一个对指针p的引用</span></span><br><span class="line">    r = &amp;i;</span><br><span class="line">    cout &lt;&lt; *r &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; *p ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*-----输出------</span></span><br><span class="line"><span class="comment">1024  1024</span></span><br><span class="line"><span class="comment">---------------*/</span></span><br></pre></td></tr></table></figure><h2 id="const限定符"><a href="#const限定符" class="headerlink" title="const限定符"></a>const限定符</h2><p><code>const</code>对象必须初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> i = <span class="built_in">get_size</span>(); <span class="comment">//正确，运行时初始化</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> j = <span class="number">42</span>; <span class="comment">//正确，编译时初始化</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> k; <span class="comment">//错误！未初始化</span></span><br></pre></td></tr></table></figure><p>默认状态下，<code>const</code>对象仅在文件内有效，若想在多个文件间共享<code>const</code>对象，必须在变量的定义之前添加关键字<code>extern</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file_1.cc定义并初始化了一个常量，该常量能被其他文件访问</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">int</span> bufSize = <span class="built_in">fcn</span>();</span><br><span class="line"><span class="comment">//file_1.h头文件</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">int</span> bufSize;</span><br></pre></td></tr></table></figure><p><code>const</code>的引用，对常量的引用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> ci = <span class="number">1024</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;r1 = ci; <span class="comment">//正确</span></span><br><span class="line"><span class="type">int</span> &amp;r2 = ci; <span class="comment">//错误！存在通过r2改变ci（const）的风险</span></span><br></pre></td></tr></table></figure><p>一个奇怪的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;ri = dval; <span class="comment">//允许</span></span><br><span class="line"><span class="type">int</span> &amp;ri = dval; <span class="comment">//错误！因为改变的是编译器生成的中间量</span></span><br></pre></td></tr></table></figure><p>指向常量的指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">double</span> *ptr = &amp;pi; <span class="comment">//错误！存在通过ptr指针修改pi的风险</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> *cptr = &amp;pi;</span><br><span class="line">*cptr = <span class="number">42</span>; <span class="comment">//错误！</span></span><br><span class="line"><span class="type">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line">cptr = &amp;dval; <span class="comment">//正确，但不能通过cptr修改dval的值</span></span><br></pre></td></tr></table></figure><p>const指针（必须初始化）：不变的是指针本身的值，而不是它指向的那个值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> errNumb = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> curErr = &amp;errNumb; <span class="comment">//常指针，顶层</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="number">3.14159</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> *<span class="type">const</span> pip = &amp;pi; <span class="comment">//指向常量的常量指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(*curErr)&#123;</span><br><span class="line">    <span class="built_in">errorHandler</span>();</span><br><span class="line">    *curErr = <span class="number">0</span>; <span class="comment">//正确，试图修改变量errNumb</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*pip = <span class="number">2.71</span>; <span class="comment">//错误！试图修改常量pi</span></span><br></pre></td></tr></table></figure><p>顶层<code>const</code>：表示变量本身是一个常量。底层<code>const</code>：表示指针所指向的对象是一个<code>const</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p1 = &amp;i; <span class="comment">//顶层</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> ci = <span class="number">42</span>; <span class="comment">//顶层</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p2 = &amp;ci; <span class="comment">//底层</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> p3 = p2; <span class="comment">//（左：底层），（右：顶层）</span></span><br><span class="line"></span><br><span class="line">p2 = p3; <span class="comment">//正确。从顶层的角度来说，p2是个变量，p3是个常量，</span></span><br><span class="line">         <span class="comment">//这个赋值没有问题。从底层的角度来说，都是一样的，</span></span><br><span class="line">         <span class="comment">//指向的内容都是不会去修改的</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = p3; <span class="comment">//错误！存在通过*p修改*p3（const）的风险</span></span><br><span class="line">             <span class="comment">//p3的底层是const int ，而这个是int</span></span><br><span class="line"></span><br><span class="line">p2 = &amp;i; <span class="comment">//正确。只是不能通过p2修改i而已</span></span><br></pre></td></tr></table></figure><p><code>constexpr</code>变量（C++11标准）：允许将变量声明为<code>constexpr</code>类型，以便由编译器来验证变量的值是否是一个常量表达式。</p><ul><li>一定是一个常量</li><li>必须用常量表达式初始化</li><li>自定义类型、IO库、string等类型不能被定义为<code>constexpr</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mf = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> limit = mf + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> sz = <span class="built_in">size</span>(); <span class="comment">//只有当size是一个constexpr函数时才正确</span></span><br></pre></td></tr></table></figure><p>指针和<code>constexpr</code>：限定符仅对指针有效，对其所指的对象无关。（对顶层有效，底层无效）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> *np = <span class="literal">nullptr</span>; <span class="comment">//常指针</span></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> i = <span class="number">42</span>;</span><br><span class="line">......</span><br><span class="line"><span class="comment">//i和j必须定义在函数之外</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">const</span> <span class="type">int</span> *p = &amp;i; <span class="comment">//p是常指针，指向常量</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> *p1 = &amp;j; <span class="comment">//p1是常指针，指向变量j</span></span><br></pre></td></tr></table></figure><h2 id="typedef、auto、decltype"><a href="#typedef、auto、decltype" class="headerlink" title="typedef、auto、decltype"></a>typedef、auto、decltype</h2><p>类型别名，提高可读性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> wages;</span><br><span class="line"><span class="keyword">typedef</span> wages base, *p; <span class="comment">//base是double的同义词，p是double *的同义词</span></span><br><span class="line"><span class="keyword">using</span> SI = Sales_item; <span class="comment">//C++11，别名声明。左边是别名</span></span><br></pre></td></tr></table></figure><p>对于指针，类型别名的使用可能会产生意想不到的结果（平时不用就好了）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> *pstring;</span><br><span class="line"><span class="type">const</span> pstring cstr = <span class="number">0</span>; <span class="comment">//指向char的常量指针</span></span><br><span class="line"><span class="type">const</span> pstring *ps; <span class="comment">//ps是指针变量，它的对象是指向char的常量指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *cstr = <span class="number">0</span>; <span class="comment">// ! 是对 const pstring cstr = 0; 的错误理解</span></span><br></pre></td></tr></table></figure><p>auto类型说明符，C++11，让编译器通过初始值推断变量的类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> i = <span class="number">0</span>, *p = &amp;i; <span class="comment">//正确</span></span><br><span class="line"><span class="keyword">auto</span> sz = <span class="number">0</span>, pi = <span class="number">3.14</span>; <span class="comment">//错误！auto已经被推断为int，后面却不一致</span></span><br></pre></td></tr></table></figure><p>看看就好，不要较真，我觉得一般不会用到这些：</p><p><img src="https://s2.loli.net/2022/11/14/UkY4gMpC5uBAzGT.png" alt="17-1.png"></p><p><code>decltype</code>类型说明符，获取表达式的类型。在编译时推导出一个表达式的类型，并且不会计算表达式的值。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">decltype</span>(x) y = <span class="number">1</span>;             <span class="comment">// y -&gt;  int</span></span><br><span class="line"><span class="keyword">decltype</span>(x+y) z = x + y;     <span class="comment">// z - &gt;  int</span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; i = x;</span><br><span class="line"><span class="keyword">decltype</span>(i) j = y;            <span class="comment">// j -&gt; const int&amp;</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">const</span> <span class="title">decltype</span><span class="params">(z)</span> *p </span>= &amp;z;    <span class="comment">// p-&gt; const int *</span></span><br><span class="line"><span class="keyword">decltype</span>(z) *pi = &amp;z;         <span class="comment">// pi -&gt; int*</span></span><br><span class="line"><span class="keyword">decltype</span>(pi) *pp = π        <span class="comment">//pp -&gt; int**</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">decltype</span>(<span class="built_in">f</span>()) sum = x;      <span class="comment">//sum的类型就是函数f返回的类型</span></span><br></pre></td></tr></table></figure><p>auto与decltype类似但是又不同，auto只能根据变量的初始化表达式推导出变量应该具有的类型。decltype将精确的推导出表达式定义的类型，不会舍弃和弃用cv限定符。</p><p>一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">42</span>, *p = &amp;i, &amp;r = i;</span><br><span class="line"><span class="keyword">decltype</span>(*p) c; <span class="comment">//错误！解引用表达式，c的类型为引用，需要初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">decltype</span>(i) e; <span class="comment">//正确，e是一个未初始化的int</span></span><br><span class="line"><span class="keyword">decltype</span>((i)) d; <span class="comment">//错误！d是int&amp;类型，必须初始化</span></span><br><span class="line"><span class="keyword">decltype</span>(((i))) d1 = i; <span class="comment">//正确，d1是int&amp;类型，且已初始化</span></span><br></pre></td></tr></table></figure><h2 id="自定义数据结构、类和头文件"><a href="#自定义数据结构、类和头文件" class="headerlink" title="自定义数据结构、类和头文件"></a>自定义数据结构、类和头文件</h2><p>类定义可以使用关键字<code>class</code>或<code>struct</code>，二者默认的继承、访问权限不同，<code>struct</code>是<code>public</code>的，<code>class</code>是<code>private</code>的。</p><p>编写自己的头文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SALES_DATA_H <span class="comment">//习惯大写</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SALES_DATA_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line">    std::string bookNo;</span><br><span class="line">    <span class="type">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>函数的声明应该放在头文件中，内联函数的定义也应该放在头文件中。</strong></p><p>【实例】分离式编译：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Chapter6.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CHAPTER6_H_INCLUDED</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHAPTER6_H_INCLUDED</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fact</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">// CHAPTER6_H_INCLUDED</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fact.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Chapter6.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fact</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(val==<span class="number">0</span> || val==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> val * <span class="built_in">fact</span>(val<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// factMain.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Chapter6.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;input an int num: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    cout &lt;&lt; num &lt;&lt; <span class="string">&quot;! = &quot;</span> &lt;&lt; <span class="built_in">fact</span>(num) &lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/03/25/641eec8577c68.png" alt="17-1dot5.png"></p><p>如上图，在终端中输入以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ factMain.cpp fact.cpp <span class="literal">-o</span> scexamp</span><br></pre></td></tr></table></figure><h2 id="标准库类型string"><a href="#标准库类型string" class="headerlink" title="标准库类型string"></a>标准库类型string</h2><p><img src="https://s2.loli.net/2022/11/25/HXwmQflsYF41znv.png" alt="17-2.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string s1,s2;</span><br><span class="line">cin&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">cout&lt;&lt;s1&lt;&lt;s2&lt;&lt;endl;</span><br><span class="line"><span class="comment">//输入：hello world</span></span><br><span class="line"><span class="comment">//输出：helloworld</span></span><br><span class="line"><span class="comment">//s1装的是hello，s2是world</span></span><br></pre></td></tr></table></figure><p><code>getline</code>得到的<code>string</code>对象不包含换行符:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string line;</span><br><span class="line">    <span class="comment">//每次读入一整行，包括空白，直到文件末尾</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(cin,line))&#123;</span><br><span class="line">        cout&lt;&lt;line&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字面值和<code>string</code>对象相加：</p><p><img src="https://s2.loli.net/2022/11/25/yMczalb4n3OQCLm.png" alt="17-3.png"></p><p><code>cctype</code>中的一些函数：</p><p><img src="https://s2.loli.net/2022/11/25/b9YDqtAjkcyR2M5.png" alt="17-4.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(string::size_type i=<span class="number">0</span>; i!=s.<span class="built_in">size</span>(); i=i+<span class="number">2</span>)</span><br><span class="line">    s[i]=<span class="string">&#x27;x&#x27;</span>;  <span class="comment">//一个使用string::size_type的例子</span></span><br></pre></td></tr></table></figure><p>从逻辑上讲，<code>size()</code>成员函数应该似乎返回整型数值，但事实上，size操作返回是<code>string::size_type</code>类型的值。string类类型和其他许多库类型都定义了一些配套类型（companion type）。通过这些配套类型，库函数的使用就与机器无关（machine-independent）。size_type就是这些配套类型中的一种。它定义为与unsigned型（<code>unsigned int</code>或<code>unsigned long</code>）具有相同含义，而且保证足够大的能够存储任意的string对象的长度。<code>string::size_type</code>在不同的机器上长度可以不同，并非固定。但只要使用该类型，就使得程序适合机器。string对象的索引也应为size_type类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//程序例子</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;Hello World!!!&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">decltype</span>(s.<span class="built_in">size</span>())punct_cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c : s)&#123; <span class="comment">//for every char in s</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">ispunct</span>(c))++punct_cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//略</span></span><br><span class="line">    string orig = s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;c : s)&#123; <span class="comment">//需要修改字符串s</span></span><br><span class="line">        c = <span class="built_in">toupper</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标准库类型vector"><a href="#标准库类型vector" class="headerlink" title="标准库类型vector"></a>标准库类型vector</h2><p><img src="https://s2.loli.net/2022/11/25/jYlGPQ4V6nuig8J.png" alt="17-5.png"></p><p>访问<code>vector</code>的一种方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; v&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i : v)&#123; <span class="comment">//与上例类似</span></span><br><span class="line">        i*=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : v)&#123;</span><br><span class="line">        std::cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/25/2JFIf4hT1QczuP3.png" alt="17-6.png"></p><h2 id="迭代器（iterator）"><a href="#迭代器（iterator）" class="headerlink" title="迭代器（iterator）"></a>迭代器（iterator）</h2><p>有迭代器的类型都拥有<code>begin</code>和<code>end</code>成员。如果容器为空，则<code>begin</code>和<code>end</code>返回的是同一个迭代器，都是<code>尾后迭代器</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> b = v.<span class="built_in">begin</span>(), e = v.<span class="built_in">end</span>();</span><br><span class="line"><span class="comment">//b表示v的第一个元素，e表示v尾元素的下一位置</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/01/YQj2wMSRmpxkAZ8.png" alt="17-7.png"></p><p>迭代器类型，<code>iterator</code>和<code>const_iterator</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it; <span class="comment">//it能读写vector&lt;int&gt;元素</span></span><br><span class="line">string::iterator it2; <span class="comment">//it2能读写string对象中的字符</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::const_iterator it3; <span class="comment">//it3只能读，不能写</span></span><br><span class="line">string::const_iterator it4; <span class="comment">//it4只能读，不能写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----分--割--线--QAQ-----*/</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="type">const</span> vector&lt;<span class="type">int</span>&gt; cv;</span><br><span class="line"><span class="keyword">auto</span> it1 = v.<span class="built_in">begin</span>(); <span class="comment">//it1的类型是vector&lt;int&gt;::iterator</span></span><br><span class="line"><span class="keyword">auto</span> it2 = cv.<span class="built_in">begin</span>(); <span class="comment">//it2的类型是vector&lt;int&gt;::const_iterator</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----分--割--线--QAQ-----*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//有时我们希望即使对象不是常量，也使用const_iterator，</span></span><br><span class="line"><span class="comment">//C++11引入了cbegin和cend</span></span><br><span class="line"><span class="keyword">auto</span> it3 = v.<span class="built_in">cbegin</span>(); <span class="comment">//it3的类型是vector&lt;int&gt;::const_iterator</span></span><br></pre></td></tr></table></figure><p>结合解引用的成员访问：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string&gt; v;</span><br><span class="line"><span class="keyword">auto</span> it = v.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line">(*it).<span class="built_in">empty</span>();</span><br><span class="line">*it.<span class="built_in">empty</span>(); <span class="comment">//错误！</span></span><br><span class="line">it-&gt;<span class="built_in">empty</span>(); <span class="comment">//箭头运算符：把解引用和成员访问两个操作合在一起</span></span><br></pre></td></tr></table></figure><p><strong>任何一种可能改变vector对象容量的操作，都会使得相应的迭代器失效。</strong></p><p>迭代器运算：</p><p><img src="https://s2.loli.net/2022/12/01/Dh14EGjnps7Kf6H.png" alt="17-8.png"></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>一种写法：<code>int a[]=&#123;1,2,3&#125;;</code>，<code>[]</code>内可以不填数字。</p><p>字符数组的特殊性：字符串字面值的结尾处有一个空字符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a1[] = &#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;+&#x27;</span>&#125;; <span class="comment">//列表初始化，没有空字符</span></span><br><span class="line"><span class="type">char</span> a2[] = &#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;; <span class="comment">//列表初始化，显式写出了空字符</span></span><br><span class="line"><span class="type">char</span> a3[] = <span class="string">&quot;C++&quot;</span>; <span class="comment">//将自动包含空字符</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> a4[<span class="number">6</span>] = <span class="string">&quot;Danial&quot;</span>; <span class="comment">//错误！没有空间放空字符</span></span><br></pre></td></tr></table></figure><p>复杂的数组声明：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *ptrs[<span class="number">10</span>]; <span class="comment">//ptrs是含有10个整型指针的数组</span></span><br><span class="line"><span class="type">int</span> &amp;refs[<span class="number">10</span>] = <span class="comment">/* ？ */</span>; <span class="comment">//错误！不存在引用的数组</span></span><br><span class="line"><span class="built_in">int</span> (*Parray)[<span class="number">10</span>] = &amp;arr; <span class="comment">//Parray指向一个含有10个整数的数组</span></span><br><span class="line"><span class="built_in">int</span> (&amp;arrRef)[<span class="number">10</span>] = arr; <span class="comment">//arrRef引用一个含有10个整数的数组</span></span><br><span class="line"><span class="type">int</span> *(&amp;arry)[<span class="number">10</span>] = ptrs; <span class="comment">//arry是数组的引用，该数组含有10个指针</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/12/MzaSUBXNf5W8rdi.png" alt="17-9.png"></p><p>数组的<code>begin</code>和<code>end</code>函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *p1 = std::<span class="built_in">begin</span>(a);</span><br><span class="line">    <span class="type">int</span> *p2 = std::<span class="built_in">end</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(;p1 != p2; p1++)&#123;</span><br><span class="line">        std::cout&lt;&lt;*p1&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*-----运行结果-----</span></span><br><span class="line"><span class="comment">1 2 3 4</span></span><br><span class="line"><span class="comment">-----------------*/</span></span><br></pre></td></tr></table></figure><p>指针运算：</p><p><img src="https://s2.loli.net/2022/12/12/t3onZmyICzw1viH.png" alt="17-10.png"></p><p>下标和指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ia[]=&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="type">int</span> *p = &amp;ia[<span class="number">2</span>]; <span class="comment">// 指向“4”</span></span><br><span class="line"><span class="type">int</span> j = p[<span class="number">1</span>]; <span class="comment">// j = 6</span></span><br><span class="line"><span class="type">int</span> k = p[<span class="number">-2</span>]; <span class="comment">// k = 0  , string和vector的下标不可以为负</span></span><br></pre></td></tr></table></figure><p>C风格字符串：处理函数定义在<code>cstring</code>头文件中。</p><p><img src="https://bu.dusays.com/2023/01/03/63b3fb10a29b4.png" alt="17-11.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ca[]=&#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;+&#x27;</span>&#125;;</span><br><span class="line">cout&lt;&lt;<span class="built_in">strlen</span>(ca)&lt;&lt;endl; <span class="comment">//错误！ca[]没有以 &#x27;\0&#x27; 结束</span></span><br></pre></td></tr></table></figure><p>与旧代码的接口：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;Hello World&quot;</span>)</span></span>;</span><br><span class="line"><span class="type">char</span> *str = s; <span class="comment">//错误！不能这样用</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *str = s.<span class="built_in">c_str</span>(); <span class="comment">//正确，c风格的string</span></span><br></pre></td></tr></table></figure><p>使用数组初始化<code>vector</code>对象：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> int_arr[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ivec</span><span class="params">(std::begin(int_arr),std::end(int_arr))</span></span>;</span><br><span class="line"><span class="comment">// 左闭右开</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">subVec</span><span class="params">(int_arr+<span class="number">1</span>,int_arr+<span class="number">4</span>)</span></span>; <span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>将所有元素初始化为0：<code>int arr[10][20][30]=&#123;0&#125;;</code></p><p>初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ia2[<span class="number">3</span>][<span class="number">4</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;,</span><br><span class="line">    &#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>&#125;</span><br><span class="line">&#125;;              <span class="comment">//正确</span></span><br><span class="line"><span class="type">int</span> ia3[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>&#125;; <span class="comment">//正确</span></span><br><span class="line"><span class="type">int</span> ia4[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">0</span>&#125;,&#123;<span class="number">4</span>&#125;,&#123;<span class="number">8</span>&#125;&#125;; <span class="comment">// &#123;0,0,0,0,4,0,0,0,8,0,0,0&#125;</span></span><br><span class="line"><span class="type">int</span> ia5[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>&#125;;     <span class="comment">// &#123;0,3,6,9,0,0,0,0,0,0,0,0&#125;</span></span><br></pre></td></tr></table></figure><p>下标引用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> (&amp;row)[<span class="number">4</span>] = ia[<span class="number">1</span>]; <span class="comment">//把row绑定到ia的第二个4元素数组上</span></span><br></pre></td></tr></table></figure><p>使用范围for语句处理多维数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;row : ia)        <span class="comment">//对于外层数组的每一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;col : row) &#123; <span class="comment">//对于内层数组的每一个元素</span></span><br><span class="line">        col = cnt;</span><br><span class="line">        ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*----------------------</span></span><br><span class="line"><span class="comment">在上面的例子中，因为要改变数组元素的值，所以使用引用类型。</span></span><br><span class="line"><span class="comment">对于没有写操作的，可以参考下例：避免数组被自动转成指针</span></span><br><span class="line"><span class="comment">----------------------*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;row : ia)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> col : row)</span><br><span class="line">        cout &lt;&lt; col &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>指针和多维数组：</p><p><img src="https://bu.dusays.com/2023/01/04/63b4f8690ecd0.png" alt="17-12"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//p指向含有4个整数的数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p=ia; p!=ia+<span class="number">3</span>; p++)&#123;</span><br><span class="line">    <span class="comment">//q指向4个整数数组的首元素，也就是说，q指向一个整数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> q=*p; q!=*p+<span class="number">4</span>; q++)</span><br><span class="line">        cout &lt;&lt; *q &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型别名简化多维数组的指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和上例一样</span></span><br><span class="line"><span class="keyword">using</span> int_array = <span class="type">int</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span> (int_array *p = ia; p!=ia+<span class="number">3</span>; p++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> *q = *p; q!=*p+<span class="number">4</span>; q++)</span><br><span class="line">        cout &lt;&lt; *q &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表达式基础"><a href="#表达式基础" class="headerlink" title="表达式基础"></a>表达式基础</h2><p>概念：左值和右值，上网查。</p><p>如果表达式的求值结果是左值，<code>decltype</code>作用于该表达式（不是变量）得到一个引用类型。例如，对于<code>int *p</code>：</p><ul><li>因为解引用运算符生成左值，所以<code>decltype(*p)</code>的结果是<code>int&amp;</code></li><li>因为取地址运算符生成右值，所以<code>decltype(&amp;p)</code>的结果是<code>int **</code></li></ul><p><strong>如果改变了某个运算对象的值，在表达式的其他地方不要再使用这个运算对象。</strong></p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p><code>m%(-n)</code>等于<code>m%n</code>，<code>(-m)%n</code>等于<code>-(m%n)</code>。</p><h2 id="成员访问、条件、位运算符"><a href="#成员访问、条件、位运算符" class="headerlink" title="成员访问、条件、位运算符"></a>成员访问、条件、位运算符</h2><p>成员访问运算符，<code>ptr-&gt;mem</code>等价于<code>(*ptr).mem</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string s1 = <span class="string">&quot;a string&quot;</span>, *p = &amp;s1;</span><br><span class="line"><span class="keyword">auto</span> n = s1.<span class="built_in">size</span>();</span><br><span class="line">n = (*p).<span class="built_in">size</span>();</span><br><span class="line">n = p-&gt;<span class="built_in">size</span>();</span><br></pre></td></tr></table></figure><p>位运算符作用于整数类型。关于符号位如何处理没有明确的规定，所以强烈<strong>建议仅将位运算符用于处理无符号类型</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设char占8位，int占32位</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> bits = <span class="number">0233</span>; <span class="comment">//八进制，二进制为 10011011</span></span><br><span class="line">bits &lt;&lt; <span class="number">8</span>; <span class="comment">//bits提升为int型，然后左移8位</span></span><br></pre></td></tr></table></figure><p>使用位运算符：假设班级中有30个学生，用一个二进制位表示某个学生在测试中是否通过。例子如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> quizl = <span class="number">0</span>;</span><br><span class="line">quizl |= <span class="number">1UL</span> &lt;&lt; <span class="number">27</span>; <span class="comment">//学生27通过了测试</span></span><br><span class="line">quizl &amp;= ~(<span class="number">1UL</span> &lt;&lt; <span class="number">27</span>); <span class="comment">//学生27没有通过测试</span></span><br><span class="line"><span class="type">bool</span> status = quizl &amp; (<span class="number">1UL</span> &lt;&lt; <span class="number">27</span>); <span class="comment">//查询学生27是否通过了测试</span></span><br></pre></td></tr></table></figure><h2 id="sizeof和逗号运算符"><a href="#sizeof和逗号运算符" class="headerlink" title="sizeof和逗号运算符"></a>sizeof和逗号运算符</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Sales_data data, *p;</span><br><span class="line"><span class="built_in">sizeof</span>(Sales_data); <span class="comment">// Sales_data类型的对象所占空间的大小</span></span><br><span class="line"><span class="keyword">sizeof</span> data; <span class="comment">//和上一行结果一样</span></span><br><span class="line"><span class="keyword">sizeof</span> *p;   <span class="comment">//和上一行结果一样</span></span><br><span class="line"><span class="keyword">sizeof</span> p; <span class="comment">//指针所占空间的大小</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sizeof</span> data.revenue; <span class="comment">//对象里的成员的大小</span></span><br><span class="line"><span class="keyword">sizeof</span> Sales_data::revenue; <span class="comment">//C++11，和上一行结果一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sizeof运算能够得到整个数组的大小</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span> sz = <span class="built_in">sizeof</span>(ia) / <span class="built_in">sizeof</span>(*ia);</span><br><span class="line"><span class="type">int</span> arr2[sz]; <span class="comment">//正确</span></span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>看看就好，一般不用：</p><p><img src="https://bu.dusays.com/2023/01/06/63b7acd5aa3a6.png" alt="17-13.png"></p><p>指针的转换：</p><ul><li><code>0</code>或字面值<code>nullptr</code>能够转换成任意指针类型</li><li>指向任意非常量的指针能够转换成<code>void*</code></li><li>指向任意对象的指针能够转换成<code>const void*</code></li></ul><p>显式转换：强制转换<code>cast-name&lt;type&gt;(expression)</code>，<code>cast-name</code>是<code>static_cast</code>、<code>dynamic_cast</code>、<code>const_cast</code>和<code>reinterpret_cast</code>中的一种。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="type">double</span> slope = <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(j) / i;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> d;</span><br><span class="line"><span class="type">void</span> *p = &amp;d;</span><br><span class="line"><span class="type">double</span> *dp = <span class="built_in">static_cast</span>&lt;<span class="type">double</span>*&gt;(p); <span class="comment">//正确</span></span><br></pre></td></tr></table></figure><p><code>const_cast</code>只能改变运算对象的底层<code>const</code>，对于将常量对象转换成非常量对象的行为，称为『去掉const性质（cast away the const）』。</p><p><code>const_cast</code>可以移除底层<code>const</code>，或是给普通的类型添加底层<code>const</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> *cp = &amp;a;</span><br><span class="line">    <span class="type">int</span> *p = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>*&gt;(cp);</span><br><span class="line">    *p = <span class="number">4</span>;  <span class="comment">//允许</span></span><br><span class="line">    cout &lt;&lt; a;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*-------- 对 比 ---------*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> *cp = &amp;a;</span><br><span class="line">    <span class="type">int</span> *p = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>*&gt;(cp);</span><br><span class="line">    *p = <span class="number">4</span>; <span class="comment">//没有定义</span></span><br><span class="line">    cout &lt;&lt; a;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>static_cast</code>不能去掉const性质。<code>const_cast</code>不能改变类型。</p><p><code>reinterpret_cast</code>通常为运算对象的位模式提供较低层次上的重新解释。</p><p><img src="https://bu.dusays.com/2023/01/07/63b859b8c8e1e.png" alt="17-14.png"></p><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p><code>switch-case</code>,case标签必须是整型（小整型、bool型、short、char也都可以）常量表达式。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关于switch-case里面的初始化的一个例子</span></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="keyword">switch</span>(<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="type">int</span> c; <span class="comment">//不能初始化！</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;before c = &quot;</span>&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">            c = <span class="number">1</span>; <span class="comment">//在case1中声明并定义的c可以在这里使用</span></span><br><span class="line">            <span class="type">int</span> a = <span class="number">1</span>; <span class="comment">//用大括号括起来，则可以初始化</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;after c = &quot;</span>&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迭代语句"><a href="#迭代语句" class="headerlink" title="迭代语句"></a>迭代语句</h2><p>范围<code>for</code>语句：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="comment">//范围变量必须是引用类型，这样才能对元素执行写操作</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;r : v)&#123;</span><br><span class="line">    r *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*-------- 对 比 ---------*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> beg=v.<span class="built_in">begin</span>(),end=v.<span class="built_in">end</span>(); beg!=end; ++beg)&#123;</span><br><span class="line">    <span class="keyword">auto</span> &amp;r = *beg; <span class="comment">//r是引用类型才能对元素执行写操作</span></span><br><span class="line">    r *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h2><p><code>goto</code>语句：无条件跳转到同一函数内的另一条语句。一般情况下不要使用<code>goto</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">goto</span> end;</span><br><span class="line">    <span class="type">int</span> ix = <span class="number">10</span>; <span class="comment">//错误！goto语句绕过了一个带初始化的变量定义</span></span><br><span class="line">end:</span><br><span class="line">    <span class="comment">//错误！此处的代码需要使用ix</span></span><br><span class="line">    ix = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向后跳过一个初始化的变量定义是合法的</span></span><br><span class="line">begin:</span><br><span class="line">    <span class="type">int</span> sz = <span class="built_in">get_size</span>();</span><br><span class="line">    <span class="keyword">if</span>(sz&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">goto</span> begin; <span class="comment">//goto语句执行后，将销毁sz</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>运行时的反常行为，例如读取或写入数据时失去数据库链接。</p><p><code>throw</code>表达式：异常检测部分使用<code>throw</code>表达式来表示它遇到了无法解决的问题。</p><p><code>runtime_error</code>是标准库异常类型的一种，定义在<code>stdexcept</code>头文件。它抛出一个异常，终止当前的函数，并把控制权交给处理异常的代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于简单的小程序</span></span><br><span class="line">Sales_item item1,item2;</span><br><span class="line">cin &gt;&gt; item1 &gt;&gt; item2;</span><br><span class="line"><span class="keyword">if</span>(item1.<span class="built_in">isbn</span>() == item2.<span class="built_in">isbn</span>())&#123;</span><br><span class="line">    cout &lt;&lt; item1+item2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//表示成功</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Data must refer to same ISBN&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//表示失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*--------------- 对 比 -----------------*/</span></span><br><span class="line"><span class="keyword">if</span> (item1.<span class="built_in">isbn</span>() != item2.<span class="built_in">isbn</span>())&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;Data must refer to same ISBN&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果程序执行到这里，表示两个ISBN是相同的</span></span><br><span class="line">cout &lt;&lt; item1+item2 &lt;&lt;endl;</span><br></pre></td></tr></table></figure><p><code>try</code>语句块：异常处理部分使用<code>try</code>语句块处理异常，可以有一个或多个<code>catch</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(cin&gt;&gt;item1&gt;&gt;item2)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//执行添加两个Sales_item对象的代码</span></span><br><span class="line">        <span class="comment">//如果添加失败，代码抛出一个runtime_error异常</span></span><br><span class="line">    &#125;<span class="built_in">catch</span>(runtime_error err)&#123;</span><br><span class="line">        <span class="comment">//提醒用户两个ISBN必须一致，询问是否重新输入</span></span><br><span class="line">        cout &lt;&lt; err.<span class="built_in">what</span>() <span class="comment">//返回初始化对象时填入的参数（const char*）</span></span><br><span class="line">             &lt;&lt; <span class="string">&quot;\nTry Again? Enter y or n&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        cin &gt;&gt; c;</span><br><span class="line">        <span class="keyword">if</span> (!cin || c==<span class="string">&#x27;n&#x27;</span>) <span class="keyword">break</span>; <span class="comment">//跳出while</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一套异常类：<code>throw</code>表达式和相关的<code>catch</code>子句之间传递异常的具体信息。这些异常分别定义在4个头文件中：</p><ul><li><code>exception</code>头文件：最通用的异常类<code>exception</code>，只报告异常的发生，不提供额外信息</li><li><code>stdexcept</code>头文件：定义了几种常用的异常类</li><li><code>new</code>头文件：<code>bad_alloc</code>异常类</li><li><code>type_info</code>头文件：<code>bad_cast</code>异常类</li></ul><h2 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h2><p>局部对象：</p><ul><li>自动对象：生命周期从变量声明开始，到函数块末尾结束</li><li>局部静态对象：生命周期从变量声明开始，直到程序结束才销毁</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">count_calls</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a; <span class="comment">//自动对象</span></span><br><span class="line">    <span class="type">static</span> <span class="type">size_t</span> ctr = <span class="number">0</span>; <span class="comment">//局部静态对象</span></span><br><span class="line">    <span class="keyword">return</span> ++ctr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>指针型变量在函数体中需要被改变的写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> *&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="comment">//do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一维数组作为参数，除了将数组名传入函数外，为了规范化，还要将数组的大小作为参数传入：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum_arr</span> <span class="params">(<span class="type">int</span> att[] , <span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组名是首元素的地址，因此还可以写成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum_arr</span> <span class="params">(<span class="type">int</span> *att , <span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">   <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不管是哪种定义，使用函数时都是将数组名作为参数，比如：<code>sum_arr (Ss , 66);</code>。在函数内部对传入的数组进行修改，该数组本身的值也会改变。</p><p>若要防止在函数中修改数组，可以使用<code>const</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum_arr</span> <span class="params">(<span class="type">const</span> <span class="type">int</span> att[] , <span class="type">int</span> size)</span></span></span><br></pre></td></tr></table></figure><p>前面将数组的首元素的地址和长度传入，这样就可以处理所有元素。C++中引入了新的方式，即数组区间：传入数组的首元素地址和末尾地址，参数就是【数组名，数组名+长度】，这样也可以处理所有元素。进一步，也可以传入任意区间。例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum_arr</span><span class="params">(<span class="type">const</span> <span class="type">int</span> *begin,<span class="type">const</span> <span class="type">int</span> *end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> *pt;</span><br><span class="line">    <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(pt = begin ; pt != end ; pt++)</span><br><span class="line">    &#123;</span><br><span class="line">        total = total + *pt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> A[Size] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125; ;</span><br><span class="line"><span class="type">int</span> sum = <span class="built_in">sum_arr</span>(A,A+<span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>二维数组作为参数，与一维类似，有两种声明方式，但有所区别：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> A[ ][<span class="number">4</span>] , <span class="type">int</span> size)</span> <span class="comment">//不能写成 int sum(int A[ ][ ] , int size)，必须将列数写进去，size的值是行数</span></span></span><br><span class="line"><span class="function"><span class="comment">//下面一种写法看看就好：</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> (*A)[<span class="number">4</span>] , <span class="type">int</span> size)</span> <span class="comment">//同样，必须将列数写进去，size的值是行数，而且必须要将*和数组名括起来。</span></span></span><br></pre></td></tr></table></figure><p>至于使用方法都是一样，<code>sum(A，4);</code>。第二维长度有较严格的要求：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x[][<span class="number">5</span>] , <span class="type">int</span> mysize)</span></span>&#123;</span><br><span class="line">    <span class="comment">//do something...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>][<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> b[<span class="number">10</span>][<span class="number">3</span>];</span><br><span class="line"><span class="built_in">f</span>(a,<span class="number">10</span>); <span class="comment">//正确</span></span><br><span class="line"><span class="built_in">f</span>(b,<span class="number">10</span>); <span class="comment">//错误！</span></span><br></pre></td></tr></table></figure><p>如果函数无需改变引用形参的值，最好将其声明为常量引用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isShorter</span><span class="params">(<span class="type">const</span> string &amp;s1, <span class="type">const</span> string &amp;s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1.<span class="built_in">size</span>()&lt;s2.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++允许将变量定义为数组的引用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正确：形参是数组的引用，维度是类型的一部分</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> (&amp;arr)[<span class="number">10</span>])</span></span>&#123; <span class="comment">// ()不能少</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> elem : arr)&#123;</span><br><span class="line">        cout&lt;&lt;elem&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main</code>处理命令行选项。有时需要给<code>main</code>传实参，一种常见的情况是用户设置一组选项来确定函数所要执行的操作。例如，假定<code>main</code>函数位于可执行文件<code>prog</code>内，可以向程序传递下面的选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prog -d -o ofile data0</span><br></pre></td></tr></table></figure><p>这些命令行选项通过两个（可选的）形参传递给<code>main</code>函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span>&#123;<span class="comment">/* do something */</span>&#125;</span><br><span class="line"><span class="comment">/* 第二个形参argv是一个数组，它的元素是指向C风格字符串的指</span></span><br><span class="line"><span class="comment">针；第一个形参argc表示数组中字符串的数量。因为第二个形参是</span></span><br><span class="line"><span class="comment">数组，所以main函数也可以定义成如下的方式： */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span>&#123;<span class="comment">/* do something */</span>&#125;</span><br><span class="line"><span class="comment">//其中argv指向char*</span></span><br></pre></td></tr></table></figure><p>以上面提供的命令行为例，<code>argc</code>应该等于5，<code>argv</code>应该包含如下的C风格字符串：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">argv[<span class="number">0</span>] = <span class="string">&quot;prog&quot;</span>; <span class="comment">//或者argv[0]也可以指向一个空字符串</span></span><br><span class="line">argv[<span class="number">1</span>] = <span class="string">&quot;-d&quot;</span>;</span><br><span class="line">argv[<span class="number">2</span>] = <span class="string">&quot;-o&quot;</span>;</span><br><span class="line">argv[<span class="number">3</span>] = <span class="string">&quot;ofile&quot;</span>;</span><br><span class="line">argv[<span class="number">4</span>] = <span class="string">&quot;data0&quot;</span>;</span><br><span class="line">argv[<span class="number">5</span>] = <span class="number">0</span>; <span class="comment">//最后一个指针之后的元素值保证为 0</span></span><br></pre></td></tr></table></figure><p>含有可变形参的函数：参数个数不固定。如果所有的实参类型相同，可以传递一个名为<code>initializer_list</code>的标准库类型。</p><p><img src="https://bu.dusays.com/2023/01/09/63bbb301623b0.png" alt="17-15.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和vector不一样，initializer_list对象中的元素永远是常量值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_msg</span><span class="params">(initializer_list&lt;string&gt; il)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> beg=il.<span class="built_in">begin</span>(); beg!=il.<span class="built_in">end</span>(); ++beg)&#123;</span><br><span class="line">        cout&lt;&lt;*beg&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//excepted和actual是string对象</span></span><br><span class="line"><span class="keyword">if</span>(excepted!=actual)</span><br><span class="line">    <span class="built_in">error_msg</span>(&#123;<span class="string">&quot;functionX&quot;</span>,excepted,actual&#125;);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">error_msg</span>(&#123;<span class="string">&quot;functionX&quot;</span>,<span class="string">&quot;okey&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>省略符形参：上网查。</p><h2 id="返回类型和return语句"><a href="#返回类型和return语句" class="headerlink" title="返回类型和return语句"></a>返回类型和return语句</h2><p><strong>不要</strong>返回局部对象的引用或指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//严重错误：这个函数试图返回局部对象的引用</span></span><br><span class="line"><span class="function"><span class="type">const</span> string &amp;<span class="title">manip</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string ret;</span><br><span class="line">    <span class="comment">//以某种方式改变一下ret</span></span><br><span class="line">    <span class="keyword">if</span>(!ret.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">return</span> ret;     <span class="comment">//错误！返回局部对象的引用</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Empty&quot;</span>; <span class="comment">//错误！&quot;Empty&quot;是一个局部临时变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列表初始化返回值（C++11）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;string&gt; <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//expected和actual是string对象</span></span><br><span class="line">    <span class="keyword">if</span>(expected.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;; <span class="comment">//返回一个空vector对象</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(expected==actual)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;functionX&quot;</span>,<span class="string">&quot;okay&quot;</span>&#125;; <span class="comment">//返回列表初始化的vector对象</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;functionX&quot;</span>,expected,actual&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main</code>的返回值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一种写法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">if</span>(some_failure)</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE; <span class="comment">//定义在cstdlib头文件中</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> EXIT_SUCCESS; <span class="comment">//同上</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/01/11/63becdd957edf.png" alt="17-16.png"></p><p><img src="https://bu.dusays.com/2023/01/09/63bc1b6ef129c.png" alt="17-17.png"></p><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><p>函数重载：函数名称相同但形参列表不同。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Record <span class="title">lookup</span><span class="params">(<span class="type">const</span> Account&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">lookup</span><span class="params">(<span class="type">const</span> Account&amp;)</span></span>; <span class="comment">//错误！有第一行的情况下不能这么写</span></span><br><span class="line"><span class="function">Record <span class="title">lookup</span><span class="params">(<span class="type">const</span> Phone&amp;)</span></span>;</span><br><span class="line"><span class="function">Record <span class="title">lookup</span><span class="params">(<span class="type">const</span> Name&amp;)</span></span>;</span><br><span class="line">Account acct;</span><br><span class="line">Phone phone;</span><br><span class="line">Record r1 = <span class="built_in">lookup</span>(acct);</span><br><span class="line">Record r2 = <span class="built_in">lookup</span>(phone);</span><br></pre></td></tr></table></figure><p><code>const_cast</code>和重载：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比较两个string对象的长度，返回较短的那个引用</span></span><br><span class="line"><span class="function"><span class="type">const</span> string &amp;<span class="title">shorterString</span><span class="params">(<span class="type">const</span> string &amp;s1, <span class="type">const</span> string &amp;s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1.<span class="built_in">size</span>()&lt;=s2.<span class="built_in">size</span>() ? s1 : s2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string &amp;<span class="title">shorterString</span><span class="params">(string &amp;s1, string &amp;s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> &amp;r = <span class="built_in">shorterString</span>(<span class="built_in">const_cast</span>&lt;<span class="type">const</span> string&amp;&gt;(s1),</span><br><span class="line">                            <span class="built_in">const_cast</span>&lt;<span class="type">const</span> string&amp;&gt;(s2));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">const_cast</span>&lt;string&amp;&gt;(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【实例】 函数重载：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;该函数无须参数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt; <span class="string">&quot;该函数有一个整型参数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt; <span class="string">&quot;该函数有两个整型参数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b=<span class="number">3.14</span>)</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;该函数有两个双精度浮点型参数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">f</span>(<span class="number">2.56</span>, <span class="number">42.0</span>);</span><br><span class="line">    <span class="built_in">f</span>(<span class="number">42</span>);</span><br><span class="line">    <span class="built_in">f</span>(<span class="number">42</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">f</span>(<span class="number">2.56</span>, <span class="number">3.14</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Active code page: <span class="number">65001</span></span><br><span class="line"><span class="built_in">PS</span> C:\Users\arrogance&gt; <span class="built_in">cd</span> <span class="string">&quot;d:\c++code\&quot;</span></span><br><span class="line"><span class="built_in">PS</span> D:\c++code&gt; <span class="keyword">if</span> (<span class="variable">$</span>?) &#123; g++ test.cpp <span class="literal">-o</span> test &#125; ; <span class="keyword">if</span> (<span class="variable">$</span>?) &#123; .\test &#125;</span><br><span class="line">该函数有两个双精度浮点型参数</span><br><span class="line">该函数有一个整型参数</span><br><span class="line">该函数有两个整型参数</span><br><span class="line">该函数有两个双精度浮点型参数</span><br></pre></td></tr></table></figure><h2 id="特殊用途语言特性"><a href="#特殊用途语言特性" class="headerlink" title="特殊用途语言特性"></a>特殊用途语言特性</h2><p>默认实参：一旦某个形参被赋予了默认值，它后面的所有形参都必须有默认值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> string::size_type sz;</span><br><span class="line"><span class="function">string <span class="title">screen</span><span class="params">(sz ht=<span class="number">24</span>, sz wid=<span class="number">80</span>, <span class="type">char</span> backgrnd=<span class="string">&#x27; &#x27;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">string mwindow;</span><br><span class="line">mwindow = <span class="built_in">screen</span>(); <span class="comment">//等价于screen(24,80,&#x27; &#x27;)</span></span><br><span class="line">mwindow = <span class="built_in">screen</span>(<span class="number">66</span>); <span class="comment">//等价于screen(66,80,&#x27; &#x27;)</span></span><br><span class="line">mwindow = <span class="built_in">screen</span>(<span class="number">66</span>,<span class="number">256</span>); <span class="comment">//screen(66,256,&#x27; &#x27;)</span></span><br><span class="line">mwindow = <span class="built_in">screen</span>(<span class="number">66</span>,<span class="number">256</span>,<span class="string">&#x27;#&#x27;</span>); <span class="comment">//screen(66,256,&#x27;#&#x27;)</span></span><br><span class="line"></span><br><span class="line">mwindow = <span class="built_in">screen</span>(,,<span class="string">&#x27;?&#x27;</span>); <span class="comment">//错误！只能省略尾部的实参</span></span><br><span class="line">mwindow = <span class="built_in">screen</span>(<span class="string">&#x27;?&#x27;</span>); <span class="comment">//会发生隐式转换</span></span><br></pre></td></tr></table></figure><p><code>constexpr</code>函数：能用于常量表达式的函数，函数的返回类型及所有的形参都是字面值类型。</p><ul><li>函数体中必须有且仅有一条<code>return</code>语句</li><li><code>constexpr</code>函数被隐式地指定为内联函数</li><li><code>constexpr</code>函数并不要求返回常量表达式</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">new_sz</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">42</span>;&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> foo = <span class="built_in">new_sz</span>(); <span class="comment">//正确，foo是一个常量表达式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">size_t</span> <span class="title">scale</span><span class="params">(<span class="type">size_t</span> cnt)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">new_sz</span>()*cnt;&#125;</span><br><span class="line"><span class="type">int</span> arr[<span class="built_in">scale</span>(<span class="number">2</span>)]; <span class="comment">//正确，scale(2)是常量表达式</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> a2[<span class="built_in">scale</span>(i)]; <span class="comment">//错误！scale(i)不是常量表达式</span></span><br></pre></td></tr></table></figure><p>调试帮助：只在开发过程中使用的代码，发布时屏蔽掉。</p><p><code>assert</code>预处理宏，位于<code>cassert</code>头文件中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果表达式为假，assert输出信息并终止程序的执行</span></span><br><span class="line"><span class="comment">//如果表达式为真，assert什么也不做</span></span><br><span class="line"><span class="built_in">assert</span>(word.<span class="built_in">size</span>()&gt;threshold);</span><br></pre></td></tr></table></figure><p><code>NDEBUG</code>预处理变量：<code>assert</code>的行为依赖<code>NDEBUG</code>预处理变量的状态，如果定义了<code>NDEBUG</code>，则<code>assert</code>无效。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NDEBUG <span class="comment">//关闭调试状态，必须在cassert头文件上面</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br></pre></td></tr></table></figure><p>除了用于<code>assert</code>外，也可以使用<code>NDEBUG</code>编写自己的调试代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span> ia[], <span class="type">size_t</span> size)</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> NDEBUG</span></span><br><span class="line">    <span class="comment">//__func__是编译器定义的一个局部静态变量，用于存放函数的名字</span></span><br><span class="line">    cerr &lt;&lt; __func__ &lt;&lt; <span class="string">&quot;: array size is &quot;</span> &lt;&lt; size &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/01/11/63bec9792c01a.png" alt="17-18.png"></p><h2 id="函数匹配"><a href="#函数匹配" class="headerlink" title="函数匹配"></a>函数匹配</h2><p>这一节看看就好，感觉用处不太。</p><p><img src="https://bu.dusays.com/2023/01/11/63becd3f25693.png" alt="17-19.png"></p><p>例子如下：</p><p><img src="https://bu.dusays.com/2023/01/11/63becd3f51959.png" alt="17-20.png"></p><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p>函数指针，指针指向的是函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">lengthCompare</span><span class="params">(<span class="type">const</span> string&amp;, <span class="type">const</span> string&amp;)</span></span>;</span><br><span class="line"><span class="built_in">bool</span> (*pf)(<span class="type">const</span> string&amp;, <span class="type">const</span> string&amp;); <span class="comment">//括号不能少</span></span><br><span class="line"></span><br><span class="line">pf = lengthCompare;</span><br><span class="line">pf = &amp;lengthCompare; <span class="comment">//与上一行等价，取地址符是可选的</span></span><br><span class="line"><span class="comment">//可以直接使用指向函数的指针调用该函数，无需提前解引用</span></span><br><span class="line"><span class="comment">/*------------ 以下三行语句是等价的 ------------*/</span></span><br><span class="line"><span class="type">bool</span> b1 = <span class="built_in">pf</span>(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;goodbye&quot;</span>);</span><br><span class="line"><span class="type">bool</span> b2 = (*pf)(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;goodbye&quot;</span>);</span><br><span class="line"><span class="type">bool</span> b3 = <span class="built_in">lengthCompare</span>(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;goodbye&quot;</span>);</span><br><span class="line"><span class="comment">/*--------------------------------------------*/</span></span><br></pre></td></tr></table></figure><p>在指向不同函数类型的指针间不存在转换规则（<strong>必须很精准的匹配才可以</strong>）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和上个例子连起来看</span></span><br><span class="line"><span class="function">string::size_type <span class="title">sumLength</span><span class="params">(<span class="type">const</span> string&amp;, <span class="type">const</span> string&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cstringCompare</span><span class="params">(<span class="type">const</span> <span class="type">char</span>*, <span class="type">const</span> <span class="type">char</span>*)</span></span>;</span><br><span class="line">pf = <span class="number">0</span>; <span class="comment">//正确，pf不指向任何函数</span></span><br><span class="line">pf = sumLength; <span class="comment">//错误！返回类型不匹配</span></span><br><span class="line">pf = cstringCompare; <span class="comment">//错误！形参类型不匹配</span></span><br><span class="line">pf = lengthCompare; <span class="comment">//正确，精确匹配</span></span><br></pre></td></tr></table></figure><p>函数指针形参：</p><p>不能定义函数类型的形参，但形参可以是指向函数的指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第三个形参是函数类型，它会自动地转换成指向函数的指针</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">useBigger</span><span class="params">(<span class="type">const</span> string &amp;s1, <span class="type">const</span> string &amp;s2,</span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="type">bool</span> pf(<span class="type">const</span> string &amp;, <span class="type">const</span> string &amp;))</span></span>;</span><br><span class="line"><span class="comment">//等价的声明：显式地将形参定义成指向函数的指针</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">useBigger</span><span class="params">(<span class="type">const</span> string &amp;s1, <span class="type">const</span> string &amp;s2,</span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="type">bool</span> (*pf)(<span class="type">const</span> string &amp;, <span class="type">const</span> string &amp;))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以直接把函数作为实参使用，会自动转换成指针</span></span><br><span class="line"><span class="built_in">useBigger</span>(s1,s2,lengthCompare);</span><br></pre></td></tr></table></figure><p>通过使用类型别名，简化使用函数指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Func和Func2是函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="type">bool</span> <span class="title">Func</span><span class="params">(<span class="type">const</span> string&amp;, <span class="type">const</span> string&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">decltype</span><span class="params">(lengthCompare)</span> Func2</span>; <span class="comment">//等价的类型</span></span><br><span class="line"><span class="comment">//FuncP和FuncP2是指向函数的指针</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">bool</span> <span class="params">(*FuncP)</span><span class="params">(<span class="type">const</span> string&amp;, <span class="type">const</span> string&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">decltype</span><span class="params">(lengthCompare)</span> *FuncP2</span>; <span class="comment">//等价的类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//useBigger的等价声明，其中使用了类型别名</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">useBigger</span><span class="params">(<span class="type">const</span> string&amp;, <span class="type">const</span> string&amp;, Func)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">useBigger</span><span class="params">(<span class="type">const</span> string&amp;, <span class="type">const</span> string&amp;, FuncP2)</span></span>;</span><br></pre></td></tr></table></figure><p>【练习6.54】 编写函数的声明，令其接受两个 int 形参并且返回类型也是 int ；然后声明一个 vector 对象，令其元素是指向该函数的指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//满足题意的函数如下：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="comment">//满足题意的 vector 对象如下：</span></span><br><span class="line">vector&lt;<span class="keyword">decltype</span>(func)* &gt; vF;</span><br></pre></td></tr></table></figure><p>返回指向函数的指针：虽然不能返回一个函数，但是可以返回指向函数类型的指针。<strong>必须把返回类型写成指针形式，编译器不会自动处理。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> F = <span class="built_in">int</span>(<span class="type">int</span>*, <span class="type">int</span>); <span class="comment">//F是函数类型，不是指针</span></span><br><span class="line"><span class="keyword">using</span> PF = <span class="built_in">int</span>(*)(<span class="type">int</span>*, <span class="type">int</span>); <span class="comment">//PF是指针类型</span></span><br><span class="line"></span><br><span class="line"><span class="function">PF <span class="title">f1</span><span class="params">(<span class="type">int</span>)</span></span>; <span class="comment">//正确，PF是指向函数的指针，f1返回指向函数的指针</span></span><br><span class="line"><span class="function">F <span class="title">f1</span><span class="params">(<span class="type">int</span>)</span></span>;  <span class="comment">//错误！F是函数类型，f1不能返回一个函数</span></span><br><span class="line"><span class="function">F *<span class="title">f1</span><span class="params">(<span class="type">int</span>)</span></span>; <span class="comment">//正确，显式地指定返回类型是指向函数的指针</span></span><br></pre></td></tr></table></figure><p>也可以用下面的形式直接声明f1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> (*<span class="built_in">f1</span>(<span class="type">int</span>)) (<span class="type">int</span>*, <span class="type">int</span>);</span><br></pre></td></tr></table></figure><p>从里往外读：<code>f1(int)</code>是一个函数，这个函数返回的是一个指针<code>(*f1(int))</code>，这个指针指向的是一个函数 <code>(int*, int)</code>，这个函数<code>(int*, int)</code>返回的是int型。</p><p>使用尾置返回类型的方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">f1</span><span class="params">(<span class="type">int</span>)</span> -&gt; <span class="title">int</span> <span class="params">(*)</span><span class="params">(<span class="type">int</span>*, <span class="type">int</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>使用尾置返回类型的其他例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 欲使函数返回数组的引用，该数组包含10个string对象</span></span><br><span class="line"><span class="built_in">string</span> (&amp;<span class="built_in">func</span>())[<span class="number">10</span>];</span><br><span class="line"><span class="comment">// 等价于：</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">func</span><span class="params">()</span> -&gt; <span class="title">string</span><span class="params">(&amp;)</span> [10]</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/01/12/63bfa6a382fb2.png" alt="17-21.png"></p><h2 id="定义抽象数据类型"><a href="#定义抽象数据类型" class="headerlink" title="定义抽象数据类型"></a>定义抽象数据类型</h2><p>考虑如下的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line">    <span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> bookNo;&#125;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    std::string bookNo;</span><br><span class="line">    <span class="type">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Sales_data的非成员接口函数</span></span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="type">const</span> Sales_data&amp;, <span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function">std::ostream &amp;<span class="title">print</span><span class="params">(std::ostream&amp;, <span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function">std::istream &amp;<span class="title">read</span><span class="params">(std::istream&amp;, Sales_data&amp;)</span></span>;</span><br></pre></td></tr></table></figure><p>成员都必须在类的内部<strong>声明</strong>，但成员函数体可以<strong>定义</strong>在类内也可以在类外。</p><p>常量成员函数：类的成员函数后面加<code>const</code>，表明这个函数不会修改这个类对象的数据成员。</p><p>两种效果相同的写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在Sales_data内：</span></span><br><span class="line"><span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> bookNo;&#125;</span><br><span class="line"><span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;bookNo;&#125; <span class="comment">//尽管没有必要</span></span><br></pre></td></tr></table></figure><p>关于<code>this</code>的详细解释参考《C++ primer》。</p><p>编译器分两步处理类：首先编译成员的声明，然后才轮到成员函数体。因此成员体可以随意使用类中的其他成员而无需在意这些成员出现的次序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在类的外部定义成员函数</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Sales_data::avg_price</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(units_sold)</span><br><span class="line">        <span class="keyword">return</span> revenue/units_sold;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个返回<code>this</code>对象的函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟复合运算符+=，为了和+=一致，返回为左值，因此需要返回引用</span></span><br><span class="line"><span class="function">Sales_data&amp; <span class="title">Sales_data::combine</span><span class="params">(<span class="type">const</span> Sales_data &amp;rhs)</span></span>&#123; <span class="comment">//right hand side</span></span><br><span class="line">    units_sold += rhs.units_sold; <span class="comment">//把rhs的成员加到this对象的成员上</span></span><br><span class="line">    revenue += rhs.revenue;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">//返回调用该函数的对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义类相关的非成员函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果非成员函数是类接口的组成部分，则应该与类在同一个头文件中声明</span></span><br><span class="line"><span class="comment">//IO对象不能拷贝，只能引用。 需要修改IO对象，不能用底层const</span></span><br><span class="line"><span class="function">istream&amp; <span class="title">read</span><span class="params">(istream &amp;is, Sales_data &amp;item)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> price = <span class="number">0</span>;</span><br><span class="line">    is &gt;&gt; item.bookNo &gt;&gt; item.units_sold &gt;&gt; price;</span><br><span class="line">    item.revenue = price * item.uints_sold;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ostream&amp; <span class="title">print</span><span class="params">(ostream &amp;os, <span class="type">const</span> Sales_data &amp;item)</span></span>&#123;</span><br><span class="line">    os &lt;&lt; item.<span class="built_in">isbn</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.units_sold &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">       &lt;&lt; item.revenue &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.<span class="built_in">avg_price</span>();</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="type">const</span> Sales_data &amp;lhs, <span class="type">const</span> Sales_data &amp;rhs)</span></span>&#123;</span><br><span class="line">    Sales_data sum = lhs;</span><br><span class="line">    sum.<span class="built_in">combine</span>(rhs);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数：</p><ul><li>构造函数与类名同名，没有返回值，用来初始化类对象的数据成员。</li><li>类可以包括多个构造函数。</li><li>构造函数不能被声明为<code>const</code>的<ul><li>当我们创建类的一个<code>const</code>对象时，直到构造函数完成初始化，对象才能真正得到“常量”属性</li></ul></li></ul><p><strong>合成的默认构造函数（synthesized default constructor）</strong>：如果我们的类没有显式地定义构造函数，编译器会为我们隐式地定义一个默认构造函数。对于大多数类来说，这个『合成的默认构造函数』将按照如下规则初始化类的数据成员：</p><ul><li>若存在类内的初始值，用它来初始化成员。</li><li>否则，默认初始化该成员。</li></ul><p><strong>只有当类没有声明任何构造函数时，编译器才会自动生成默认构造函数。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这段代码慢慢读不难懂，详细解释可以参阅《C++ primer》</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line">    <span class="comment">//新增的构造函数</span></span><br><span class="line">    <span class="built_in">Sales_data</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s): <span class="built_in">bookNo</span>(s) &#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s, <span class="type">unsigned</span> n, <span class="type">double</span> p):</span><br><span class="line">               <span class="built_in">bookNo</span>(s), <span class="built_in">units_sold</span>(n), <span class="built_in">revenue</span>(p*n) &#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(std::istream &amp;);</span><br><span class="line">    <span class="comment">//之前已有的其他成员</span></span><br><span class="line">    <span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> bookNo;&#125;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    std::string bookNo;</span><br><span class="line">    <span class="type">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//...之前的代码略</span></span><br><span class="line"><span class="comment">//在类的外部定义构造函数：</span></span><br><span class="line">Sales_data::<span class="built_in">Sales_data</span>(std::istream &amp;is)&#123;</span><br><span class="line">    <span class="built_in">read</span>(is, *<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拷贝、赋值和析构：</p><p>管理动态内存的类通常不能依赖于编译器合成的版本。使用<code>vector</code>或<code>string</code>除外。</p><h2 id="访问控制与封装"><a href="#访问控制与封装" class="headerlink" title="访问控制与封装"></a>访问控制与封装</h2><p>使用访问说明符加强类的封装性：</p><ul><li><code>public</code>：类的接口，在整个程序内可以被访问</li><li><code>private</code>：封装（即隐藏）类的实现细节</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//class和struct定义类唯一的区别就是默认的访问权限不同</span></span><br><span class="line"><span class="comment">//struct默认public， class默认private</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sales_data</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s, <span class="type">unsigned</span> n, <span class="type">double</span> p):</span><br><span class="line">               <span class="built_in">bookNo</span>(s), <span class="built_in">units_sold</span>(n), <span class="built_in">revenue</span>(p*n) &#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s): <span class="built_in">bookNo</span>(s) &#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(std::istream&amp;);</span><br><span class="line">    <span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> bookNo;&#125;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> units_sold ? revenue/units_sold : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::string bookNo;</span><br><span class="line">    <span class="type">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类可以允许其他类或者函数访问它的非公有成员，方法是令其他类或函数成为它的<strong>友元</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line"><span class="comment">// 为Sales_data的非成员函数所做的友元声明</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> Sales_data <span class="title">add</span><span class="params">(<span class="type">const</span> Sales_data&amp;, <span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> std::istream&amp; <span class="title">read</span><span class="params">(std::istream&amp;, Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> std::ostream&amp; <span class="title">print</span><span class="params">(std::ostream&amp;, <span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="comment">// 其他内容与之前一致</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sales_data</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s, <span class="type">unsigned</span> n, <span class="type">double</span> p):</span><br><span class="line">               <span class="built_in">bookNo</span>(s), <span class="built_in">units_sold</span>(n), <span class="built_in">revenue</span>(p*n) &#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s): <span class="built_in">bookNo</span>(s) &#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(std::istream&amp;);</span><br><span class="line">    <span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> bookNo;&#125;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> units_sold ? revenue/units_sold : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::string bookNo;</span><br><span class="line">    <span class="type">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Sales_data接口的非成员组成部分的声明</span></span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="type">const</span> Sales_data&amp;, <span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function">std::istream&amp; <span class="title">read</span><span class="params">(std::istream&amp;, Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function">std::ostream&amp; <span class="title">print</span><span class="params">(std::ostream&amp;, <span class="type">const</span> Sales_data&amp;)</span></span>;</span><br></pre></td></tr></table></figure><p>友元声明只能出现在类定义的内部，但具体位置不限。友元不是类的成员，不受访问控制级别的约束。友元的声明仅指定访问的权限，不是通常意义上的函数声明。因此若希望类的用户能调用某个友元函数，最好在友元声明之外再对函数进行一次声明（有些编译器必须声明，有些可以省略。出于移植性的考虑，最好声明一下）。</p><h2 id="类的其他特性"><a href="#类的其他特性" class="headerlink" title="类的其他特性"></a>类的其他特性</h2><p>定义一个类型成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Screen表示显示器中的一个窗口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> std::string::size_type pos;</span><br><span class="line">    <span class="comment">//等价于 using pos = std::string::size_type;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    pos cursor = <span class="number">0</span>;</span><br><span class="line">    pos height = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line">    std::string contents;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面这样做的原因是，Screen的用户不需要知道Screen使用了一个string对象来存放它的数据，pos隐藏了细节。</p><p>成员函数也支持重载：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> std::string::size_type pos;</span><br><span class="line">    <span class="built_in">Screen</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Screen</span>(pos ht, pos wd, <span class="type">char</span> c): <span class="built_in">height</span>(ht),<span class="built_in">width</span>(wd),<span class="built_in">contents</span>(ht*wd,c)&#123;&#125;</span><br><span class="line">    <span class="comment">// string初始化的一种方法：使用单个字符初始化。</span></span><br><span class="line">    <span class="comment">// string s(10,&#x27;a&#x27;); //直接初始化，s的内容是aaaaaaaaaa</span></span><br><span class="line">    <span class="function"><span class="type">char</span> <span class="title">get</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> contents[cursor];&#125; <span class="comment">// 隐式内联</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">get</span><span class="params">(pos ht, pos wd)</span> <span class="type">const</span></span>; <span class="comment">// 显式内联</span></span><br><span class="line">    <span class="function">Screen&amp; <span class="title">move</span><span class="params">(pos r, pos c)</span></span>;       <span class="comment">// 能在之后被设为内联</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    pos cursor = <span class="number">0</span>;</span><br><span class="line">    pos height = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line">    std::string contents;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Screen&amp; <span class="title">Screen::move</span><span class="params">(pos r, pos c)</span></span>&#123;</span><br><span class="line">    pos row = r*width;</span><br><span class="line">    cursor = row+c;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">//以左值的形式返回对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">Screen::get</span><span class="params">(pos r, pos c)</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    pos row = r*width;</span><br><span class="line">    <span class="keyword">return</span> contents[row+c];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可变数据成员（mutable data member）：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">some_member</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">size_t</span> access_ctr; <span class="comment">//即使在一个const对象内也能被修改</span></span><br><span class="line">    <span class="comment">//其他成员与之前的版本一致，略</span></span><br><span class="line">&#125;；</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Screen::some_member</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    ++access_ctr; <span class="comment">//保存一个计数值，用于记录成员函数被调用的次数</span></span><br><span class="line">    <span class="comment">//该成员需要完成的其他工作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类数据成员的初始值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Window_mgr</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 这个窗口管理类，管理一组Screen</span></span><br><span class="line">    std::vector&lt;Screen&gt; screens&#123;<span class="built_in">Screen</span>(<span class="number">24</span>, <span class="number">80</span>, <span class="string">&#x27; &#x27;</span>)&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>返回<code>*this</code>的成员函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Screen&amp; <span class="title">set</span><span class="params">(<span class="type">char</span>)</span></span>;</span><br><span class="line">    <span class="function">Screen&amp; <span class="title">set</span><span class="params">(pos, pos, <span class="type">char</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 其他成员和之前的版本一致</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Screen&amp; <span class="title">Screen::set</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">    contents[cursor] = c;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Screen&amp; <span class="title">Screen::set</span><span class="params">(pos r, pos col, <span class="type">char</span> ch)</span></span>&#123;</span><br><span class="line">    contents[r*width+col] = ch;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把光标移动到一个指定的位置，然后设置该位置的字符值</span></span><br><span class="line">    myScreen.<span class="built_in">move</span>(<span class="number">4</span>,<span class="number">0</span>).<span class="built_in">set</span>(<span class="string">&#x27;#&#x27;</span>);      <span class="comment">// 神之一手</span></span><br></pre></td></tr></table></figure><p>从<code>const</code>成员函数返回<code>*this</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//根据对象是否是const重载了display函数</span></span><br><span class="line">    <span class="function">Screen&amp; <span class="title">display</span><span class="params">(std::ostream &amp;os)</span></span>&#123;</span><br><span class="line">        <span class="built_in">do_display</span>(os);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">const</span> Screen&amp; <span class="title">display</span><span class="params">(std::ostream &amp;os)</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="built_in">do_display</span>(os);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">do_display</span><span class="params">(std::ostream &amp;os)</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        os &lt;&lt; contents;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其他成员与之前的一致</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类的声明：我们可以仅声明类而暂时不定义它。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>;   <span class="comment">// Screen类的声明</span></span><br></pre></td></tr></table></figure><p>这种声明也叫<strong>前向声明（forward declaration）</strong>，对于类型Screen来说，它在声明之后定义之前是一个<strong>不完全类型（incomplete type）</strong>，不完全类型只能在有限的情况下使用：</p><ul><li>可以定义指向这种类型的指针或引用</li><li>可以声明（但不能定义）以不完全类型作为参数或返回类型的函数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Link_screen</span>&#123;</span><br><span class="line">    Link_screen *next; <span class="comment">//正确</span></span><br><span class="line">    Link_screen *prev; <span class="comment">//正确</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类之间的友元关系：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>&#123;</span><br><span class="line">    <span class="comment">// Window_mgr的成员可以访问Screen类的私有部分</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Window_mgr</span>;</span><br><span class="line">    <span class="comment">// Screen类的剩余部分，略</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 如果一个类指定了友元类，则友元类的成员函</span></span><br><span class="line"><span class="comment">数可以访问此类包括非公有成员在内的所有成员。*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window_mgr</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 窗口中每个屏幕的编号</span></span><br><span class="line">    <span class="keyword">using</span> ScreenIndex = std::vector&lt;Screen&gt;::size_type;</span><br><span class="line">    <span class="comment">// 按编号将指定的Screen重置为空白</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(ScreenIndex)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;Screen&gt; screens&#123;<span class="built_in">Screen</span>(<span class="number">24</span>, <span class="number">80</span>, <span class="string">&#x27; &#x27;</span>)&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Window_mgr::clear</span><span class="params">(ScreenIndex i)</span></span>&#123;</span><br><span class="line">    <span class="comment">// s是一个Screen的引用，指向我们想清空的那个屏幕</span></span><br><span class="line">    Screen &amp;s = screens[i];</span><br><span class="line">    s.contents = <span class="built_in">string</span>(s.height*s.width, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>友元关系不存在传递性。</strong></p><p>令成员函数作为友元：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>&#123;</span><br><span class="line">    <span class="comment">// Window_mgr::clear必须在Screen类之前被声明</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Window_mgr::clear</span><span class="params">(ScreenIndex)</span></span>;</span><br><span class="line">    <span class="comment">// Screen类的剩余部分，略</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*-------------- 顺 序 ---------------*/</span></span><br><span class="line"><span class="comment">//1、定义Window_mgr类，声明clear函数，但不能定义它</span></span><br><span class="line"><span class="comment">//2、定义Screen，包括对于clear的友元声明</span></span><br><span class="line"><span class="comment">//3、定义clear，此时才能使用Screen的成员</span></span><br></pre></td></tr></table></figure><p>友元声明和作用域：参考《C++ Primer》</p><h2 id="类的作用域"><a href="#类的作用域" class="headerlink" title="类的作用域"></a>类的作用域</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Screen::pos ht=<span class="number">24</span>, wd=<span class="number">80</span>; <span class="comment">//使用Screen类定义的pos类型</span></span><br><span class="line"><span class="function">Screen <span class="title">scr</span><span class="params">(ht, wd, <span class="string">&#x27; &#x27;</span>)</span></span>; <span class="comment">//创建了一个Screen对象并初始化</span></span><br><span class="line">Screen *p = &amp;scr;</span><br><span class="line"><span class="type">char</span> c = scr.<span class="built_in">get</span>(); <span class="comment">//访问scr对象的get成员</span></span><br><span class="line">c = p-&gt;<span class="built_in">get</span>(); <span class="comment">//访问所指对象的get成员</span></span><br></pre></td></tr></table></figure><p>对比以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> Window_mgr::clear<span class="comment">/*一旦遇到类名*/</span>(ScreenIndex i)&#123;</span><br><span class="line">    Screen &amp;s = screens[i];</span><br><span class="line">    s.contents = <span class="built_in">string</span>(s.height*s.width, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;   <span class="comment">//直到定义的结束，都是类的作用域之内</span></span><br><span class="line"><span class="comment">/*------------------ 对 比 ---------------------*/</span></span><br><span class="line"><span class="function">Window_mgr::ScreenIndex <span class="title">Window_mgr::addScreen</span><span class="params">(<span class="type">const</span> Screen &amp;s)</span></span>&#123;</span><br><span class="line">    screens.<span class="built_in">push_back</span>(s);</span><br><span class="line">    <span class="keyword">return</span> screens.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">&#125;   <span class="comment">//首先处理返回类型，之后才进入Window_mgr的作用域</span></span><br></pre></td></tr></table></figure><p>成员定义中的名字查找。以下代码仅作原理展示，不能作为作为写代码的满分参考（：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> height;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> std::string::size_type pos;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dummy_fcn</span><span class="params">(pos height)</span></span>&#123;</span><br><span class="line">        cursor = width*height;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    pos cursor = <span class="number">0</span>;</span><br><span class="line">    pos height = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//尽管外层的对象被隐藏了，但我们仍可以用作用域运算符访问它</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Screen::dummy_fcn</span><span class="params">(pos height)</span></span>&#123;</span><br><span class="line">    cursor = width * <span class="keyword">this</span>-&gt;height; <span class="comment">//成员height</span></span><br><span class="line">    cursor = width * Screen::height; <span class="comment">//成员height</span></span><br><span class="line">    cursor = width * ::height; <span class="comment">//全局height</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造函数再探"><a href="#构造函数再探" class="headerlink" title="构造函数再探"></a>构造函数再探</h2><p>有时候初始化列表必不可少。如果成员是<code>const</code>、引用，或者属于某种未提供默认构造函数的类类型，必须通过构造函数初始列表提供初始值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ConstRef</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConstRef</span>(<span class="type">int</span> ii);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> ci;</span><br><span class="line">    <span class="type">int</span> &amp;ri;</span><br><span class="line">&#125;;</span><br><span class="line">ConstRef::<span class="built_in">ConstRef</span>(<span class="type">int</span> ii)&#123;<span class="comment">//赋值：</span></span><br><span class="line">    i = ii;  <span class="comment">//正确</span></span><br><span class="line">    ci = ii; <span class="comment">//错误！</span></span><br><span class="line">    ri = i;  <span class="comment">//错误！ri没有初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确做法，显式地初始化引用和<code>const</code>成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConstRef::<span class="built_in">ConstRef</span>(<span class="type">int</span> ii):<span class="built_in">i</span>(ii), <span class="built_in">ci</span>(ii), <span class="built_in">ri</span>(i)&#123;&#125;</span><br></pre></td></tr></table></figure><p>成员初始化的顺序，构造函数初始值列表中的顺序不会影响实际的初始化顺序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">X</span>(<span class="type">int</span> val):<span class="built_in">j</span>(val), <span class="built_in">i</span>(j)&#123;&#125; <span class="comment">//未定义的：i在j之前被初始化</span></span><br><span class="line">    <span class="comment">//尽量使用参数作为初始化值</span></span><br><span class="line">    <span class="comment">// X(int val):j(val), i(val)&#123;&#125;</span></span><br><span class="line">    <span class="comment">//这样就与i和j的初始化顺序无关了</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>默认实参和构造函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//定义默认构造函数，令其与只接受一个string实参的构造函数功能相同</span></span><br><span class="line">    <span class="built_in">Sales_data</span>(std::string s = <span class="string">&quot;&quot;</span>):<span class="built_in">bookNo</span>(s)&#123;&#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>【练习7.38】有些情况下我们希望提供 cin 作为接受 istream&amp; 参数的构造函数的默认实参，请声明这样的构造函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Sales_data</span>(std::istream&amp; is = std::cin)&#123;is &gt;&gt; *<span class="keyword">this</span>;&#125;</span><br></pre></td></tr></table></figure><p>此时该函数具有了默认构造函数的作用，因此我们原来声明的默认构造函数<code>Sales_data()=default;</code>应该去掉，否则会引起调用的二义性。</p><p>委托构造函数（把自己的一些或全部职责给了其他构造函数）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//非委托构造函数使用对应的实参初始化成员</span></span><br><span class="line">    <span class="built_in">Sales_data</span>(std::string s, <span class="type">unsigned</span> cnt, <span class="type">double</span> price):</span><br><span class="line">        <span class="built_in">bookNo</span>(s), <span class="built_in">units_sold</span>(cnt), <span class="built_in">revenue</span>(cnt*price)&#123;&#125;</span><br><span class="line">    <span class="comment">//其余构造函数委托给另一个构造函数</span></span><br><span class="line">    <span class="built_in">Sales_data</span>():<span class="built_in">Sales_data</span>(<span class="string">&quot;&quot;</span>,<span class="number">0</span>,<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(std::string s):<span class="built_in">Sales_data</span>(s,<span class="number">0</span>,<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(std::istream &amp;is):<span class="built_in">Sales_data</span>()&#123;<span class="built_in">read</span>(is,*<span class="keyword">this</span>);&#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当一个构造函数委托给另一个构造函数时，受委托的构造函数的初始值列表和函数体被依次执行。在<code>Sales_data</code>类中，受委托的构造函数体恰好是空的。假如函数体包含有代码的话，将先执行这些代码，然后控制权才会交还给委托者的函数体。具体参阅配套习题第174页（练习7.41）：</p><p><img src="https://bu.dusays.com/2023/03/27/64218b2ed9656.png" alt="17-21dot5.png"></p><p>默认构造函数的作用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NoDefault</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NoDefault</span>(<span class="type">const</span> std::string&amp;);</span><br><span class="line">    <span class="comment">//还有其他成员，但没有其他构造函数了</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    NoDefault my_mem;</span><br><span class="line">&#125;;</span><br><span class="line">A a; <span class="comment">//错误！不能为A合成构造函数</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="built_in">B</span>()&#123;&#125; <span class="comment">//错误！b_member没有初始值</span></span><br><span class="line">    NoDefault b_member;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>在实际中，如果定义了其他构造函数，最好也提供一个默认构造函数。</strong></p><p>隐式的类类型转换:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string null_book = <span class="string">&quot;9-999-99999-9&quot;</span>;</span><br><span class="line"><span class="comment">//构造一个临时的Sales_data对象</span></span><br><span class="line"><span class="comment">//该对象的units_sold和revenue等于0，bookNo等于null_book</span></span><br><span class="line">item.<span class="built_in">combine</span>(null_book);</span><br></pre></td></tr></table></figure><p>只允许一步类类型转换：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">item.<span class="built_in">combine</span>(<span class="string">&quot;9-999-99999-9&quot;</span>);</span><br><span class="line"><span class="comment">//错误！这里试图经历两种转换：</span></span><br><span class="line"><span class="comment">//1. 把“9-999-99999-9”转换成string</span></span><br><span class="line"><span class="comment">//2. 再把这个（临时的）string转换成Sales_data</span></span><br></pre></td></tr></table></figure><p>下面这三种写法是允许的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">item.<span class="built_in">combine</span>(<span class="built_in">string</span>(<span class="string">&quot;9-999-99999-9&quot;</span>));</span><br><span class="line">item.<span class="built_in">combine</span>(<span class="built_in">Sales_data</span>(<span class="string">&quot;9-999-99999-9&quot;</span>)); <span class="comment">//隐式地转换成string，再显式地转换成Sales_data</span></span><br><span class="line">item.<span class="built_in">combine</span>(cin);</span><br></pre></td></tr></table></figure><p>抑制构造函数定义的隐式转换：explicit（清楚、明白的）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sales_data</span>()=<span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s, <span class="type">unsigned</span> n, <span class="type">double</span> p):</span><br><span class="line">        <span class="built_in">bookNo</span>(s), <span class="built_in">units_sold</span>(n), <span class="built_in">revenue</span>(p*n)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Sales_data</span><span class="params">(<span class="type">const</span> std::string &amp;s)</span>:bookNo(s)&#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Sales_data</span><span class="params">(std::istream&amp;)</span></span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line">item.<span class="built_in">combine</span>(null_book); <span class="comment">//错误！string构造函数是explicit的</span></span><br><span class="line">item.<span class="built_in">combine</span>(cin);       <span class="comment">//错误！istream构造函数是explicit的</span></span><br></pre></td></tr></table></figure><p><code>explicit</code>关键字只允许出现在类内的构造函数声明处：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误！</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Sales_data::Sales_data</span><span class="params">(istream&amp; is)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(is, *<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>explicit</code>构造函数只能用于直接初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Sales_data <span class="title">item1</span><span class="params">(null_book)</span></span>; <span class="comment">//正确，直接初始化</span></span><br><span class="line">Sales_data item2 = null_book;</span><br><span class="line"><span class="comment">//错误！不能将explicit构造函数用于拷贝形式的初始化过程</span></span><br></pre></td></tr></table></figure><p>为转换显式地使用构造函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正确，实参是一个显式构造的Sales_data对象</span></span><br><span class="line">item.<span class="built_in">combine</span>(<span class="built_in">Sales_data</span>(null_book));</span><br><span class="line"><span class="comment">//正确，static_cast可以使用explicit的构造函数</span></span><br><span class="line">item.<span class="built_in">combine</span>(<span class="built_in">static_cast</span>&lt;Sales_data&gt;(cin));</span><br></pre></td></tr></table></figure><p>聚合类 <strong>（aggregate class）</strong>：</p><ul><li>所有成员都是<code>public</code>的</li><li>没有定义任何构造函数</li><li>没有类内初始值</li><li>没有基类，也没有<code>virtual</code>函数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Data</span>&#123;</span><br><span class="line">    <span class="type">int</span> ival;</span><br><span class="line">    string s;</span><br><span class="line">&#125;;</span><br><span class="line">Data val1 = &#123;<span class="number">0</span>, <span class="string">&quot;Anna&quot;</span>&#125;; <span class="comment">//可以使用初始值列表</span></span><br></pre></td></tr></table></figure><p>字面值常量类：（或称“字面值类”）</p><ul><li>数据成员都必须是字面值类型</li><li>类必须至少含有一个<code>constexpr</code>构造函数</li><li>如果一个数据成员含有类内初始值，则内置类型成员的初始值必须是一条常量表达式；或者如果成员属于某种类类型，则初始值必须使用成员自己的<code>constexpr</code>构造函数</li><li>类必须使用析构函数的默认定义，该成员负责销毁类的对象</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个例子，其具体作用暂时不必关心</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Debug</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">Debug</span><span class="params">(<span class="type">bool</span> b=<span class="literal">true</span>)</span>:hw(b), io(b), other(b)&#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">Debug</span><span class="params">(<span class="type">bool</span> h, <span class="type">bool</span> i, <span class="type">bool</span> o)</span>:hw(h),io(i),other(o)&#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">bool</span> <span class="title">any</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> hw||io||other;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_io</span><span class="params">(<span class="type">bool</span> b)</span> </span>&#123;io=b;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_hw</span><span class="params">(<span class="type">bool</span> b)</span> </span>&#123;hw=b;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_other</span><span class="params">(<span class="type">bool</span> b)</span> </span>&#123;hw=b;&#125; <span class="comment">//这里原书可能有误？</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">bool</span> hw;        <span class="comment">//硬件错误，而非IO错误</span></span><br><span class="line">    <span class="type">bool</span> io;        <span class="comment">//IO错误</span></span><br><span class="line">    <span class="type">bool</span> other;     <span class="comment">//其他错误</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>constexpr</code>构造函数用于生成<code>constexpr</code>对象以及<code>constexpr</code>函数的参数或返回类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> Debug <span class="title">io_sub</span><span class="params">(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>)</span></span>; <span class="comment">//调试IO</span></span><br><span class="line"><span class="keyword">if</span>(io_sub.<span class="built_in">any</span>())    <span class="comment">//等价于if(true)</span></span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;print appropriate error messages&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> Debug <span class="title">prod</span><span class="params">(<span class="literal">false</span>)</span></span>;                <span class="comment">//无调试</span></span><br><span class="line"><span class="keyword">if</span>(prod.<span class="built_in">any</span>())      <span class="comment">//等价于if(false)</span></span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;print an error message&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="类的静态成员"><a href="#类的静态成员" class="headerlink" title="类的静态成员"></a>类的静态成员</h2><p>与类本身关联，而不需要与每个对象关联。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">calculate</span><span class="params">()</span></span>&#123;amount+=amount*interestRate;&#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">double</span> <span class="title">rate</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> interestRate;&#125;</span><br><span class="line">    <span class="comment">//static函数不包含this指针，所以不能定义为const函数</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">rate</span><span class="params">(<span class="type">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string owner;</span><br><span class="line">    <span class="type">double</span> amount;</span><br><span class="line">    <span class="type">static</span> <span class="type">double</span> interestRate;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">double</span> <span class="title">initRate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>静态成员存在于任何对象之外，所有对象共享:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> r;</span><br><span class="line">r = Account::<span class="built_in">rate</span>();</span><br><span class="line">Account ac1;</span><br><span class="line">Account *ac2 = &amp;ac1;</span><br><span class="line">r = ac1.<span class="built_in">rate</span>();</span><br><span class="line">r = ac2-&gt;<span class="built_in">rate</span>(); <span class="comment">//与上一行效果相同</span></span><br></pre></td></tr></table></figure><p>可以在类的内部也可以在类的外部定义<strong>静态成员函数</strong>。在外部定义时，不能重复<code>static</code>关键字，<code>static</code>关键字只出现在类内部的声明语句中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Account::rate</span><span class="params">(<span class="type">double</span> newRate)</span></span>&#123;</span><br><span class="line">    interestRate = newRate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态数据成员：</strong></p><p><img src="https://bu.dusays.com/2023/02/04/63dde8a1d30f3.png" alt="17-22.png"></p><p>想要确保对象只定义一次，最好的办法是把静态数据成员的定义与其他非内联函数的定义放到同一个文件中。</p><p>静态成员的类内初始化。通常，类的静态成员不该在类的内部初始化（因为里面仅仅是一个声明）。以下是特殊情况：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">double</span> <span class="title">rate</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> interestRate;&#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">rate</span><span class="params">(<span class="type">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> period = <span class="number">30</span>; <span class="comment">//period是常量表达式，可以用字面值替换</span></span><br><span class="line">    <span class="type">double</span> daily_tbl[period];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//如果在类的内部提供了一个初始值，则成员的定义不能再指定一个初始值了：</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> Account::period;</span><br><span class="line"><span class="comment">//即使一个常量静态数据成员在类内部被初始化了，通常情况下也应该在类的外部定义一下该成员</span></span><br></pre></td></tr></table></figure><p>静态成员能用于某些场景，而普通成员不能：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> Bar mem1; <span class="comment">//正确：静态成员可以是不完全类型</span></span><br><span class="line">    Bar *mem2;       <span class="comment">//正确</span></span><br><span class="line">    Bar mem3;        <span class="comment">//错误！数据成员必须是完全类型</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以使用静态成员作为默认实参，因为它本身不是对象的一部分：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//bkground表示一个在类中稍后定义的静态成员</span></span><br><span class="line">    <span class="function">Screen&amp; <span class="title">clear</span><span class="params">(<span class="type">char</span> = bkground)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">char</span> bkground;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Sales-data-综合（实例）"><a href="#Sales-data-综合（实例）" class="headerlink" title="Sales_data 综合（实例）"></a>Sales_data 综合（实例）</h2><p>目前，我个人更倾向于<code>char* p;</code>的写法。</p><p>关于这之中可能的争议：</p><p><a href="https://stackoverflow.com/questions/6990726/correct-way-of-declaring-pointer-variables-in-c-c">https://stackoverflow.com/questions/6990726/correct-way-of-declaring-pointer-variables-in-c-c</a></p><p><strong>注意：以下程序尚未经过仔细的测试。</strong>（进一步的测试请转到【练习8.7】）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sales_data.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SALES_DATA_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SALES_DATA_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> Sales_data <span class="title">add</span><span class="params">(<span class="type">const</span> Sales_data&amp; lhs, <span class="type">const</span> Sales_data&amp; rhs)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> std::istream&amp; <span class="title">read</span><span class="params">(std::istream&amp; is, Sales_data&amp; item)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> std::ostream&amp; <span class="title">print</span><span class="params">(std::ostream&amp; os, <span class="type">const</span> Sales_data&amp; item)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sales_data</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string&amp; s):<span class="built_in">bookNo</span>(s)&#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string&amp; s,<span class="type">unsigned</span> n,<span class="type">double</span> p):<span class="built_in">bookNo</span>(s),<span class="built_in">units_sold</span>(n),<span class="built_in">revenue</span>(p*n)&#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(std::istream&amp; is);</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> bookNo;&#125;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="type">const</span> Sales_data&amp; item)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> units_sold ? revenue/units_sold : <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">    std::string bookNo;</span><br><span class="line">    <span class="type">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非成员接口函数：友元函数</span></span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="type">const</span> Sales_data&amp; lhs, <span class="type">const</span> Sales_data&amp; rhs)</span></span>;</span><br><span class="line"><span class="function">std::istream&amp; <span class="title">read</span><span class="params">(std::istream&amp; is, Sales_data&amp; item)</span></span>;</span><br><span class="line"><span class="function">std::ostream&amp; <span class="title">print</span><span class="params">(std::ostream&amp; os, <span class="type">const</span> Sales_data&amp; item)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sales_data_Implementation.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Sales_data.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Sales_data::<span class="built_in">Sales_data</span>(std::istream&amp; is)&#123;</span><br><span class="line">    <span class="built_in">read</span>(is,*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Sales_data&amp; <span class="title">Sales_data::combine</span><span class="params">(<span class="type">const</span> Sales_data&amp; item)</span></span>&#123;</span><br><span class="line">    units_sold += item.units_sold;</span><br><span class="line">    revenue += item.revenue;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="type">const</span> Sales_data&amp; lhs, <span class="type">const</span> Sales_data&amp; rhs)</span></span>&#123;</span><br><span class="line">    Sales_data sum = lhs;</span><br><span class="line">    sum.<span class="built_in">combine</span>(rhs);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::istream&amp; <span class="title">read</span><span class="params">(std::istream&amp; is, Sales_data&amp; item)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> price = <span class="number">0</span>;</span><br><span class="line">    is &gt;&gt; item.bookNo &gt;&gt; item.units_sold &gt;&gt; price;</span><br><span class="line">    item.revenue = price*item.units_sold;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::ostream&amp; <span class="title">print</span><span class="params">(std::ostream&amp; os, <span class="type">const</span> Sales_data&amp; item)</span></span>&#123;</span><br><span class="line">    os &lt;&lt; item.<span class="built_in">isbn</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.units_sold &lt;&lt; <span class="string">&quot; &quot;</span> </span><br><span class="line">       &lt;&lt; item.revenue &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.<span class="built_in">avg_price</span>()&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sales_data_Main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Sales_data.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string name = <span class="string">&quot;BOOKONE&quot;</span>;</span><br><span class="line">    <span class="function">Sales_data <span class="title">book1</span><span class="params">(name,<span class="number">18</span>,<span class="number">2.6</span>)</span></span>;</span><br><span class="line">    <span class="function">Sales_data <span class="title">book2</span><span class="params">(cin)</span></span>;</span><br><span class="line">    <span class="built_in">print</span>(cout,book1);</span><br><span class="line">    <span class="built_in">print</span>(cout,book2);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入样例：</span></span><br><span class="line"><span class="comment">BOOKTWO</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">5.5</span></span><br><span class="line"><span class="comment">期望输出：</span></span><br><span class="line"><span class="comment">BOOKONE 18 46.8 2.6</span></span><br><span class="line"><span class="comment">BOOKTWO 10 55 5.5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="IO类"><a href="#IO类" class="headerlink" title="IO类"></a>IO类</h2><p><img src="https://bu.dusays.com/2023/03/13/640ec200609a3.png" alt="17-23.png"></p><p>关于<strong>宽字符</strong>：参见《C++ primer》278 页。</p><p>类型<code>ifstream</code>和<code>istringstream</code>都继承自<code>istream</code>。因此，可以像使用<code>istream</code>对象一样来使用<code>ifstream</code>和<code>istringstream</code>对象。例如，可以对<code>ifstream</code>或<code>istringstream</code>对象调用<code>getline</code>，也可以用<code>&gt;&gt;</code>从一个<code>ifstream</code>或<code>istringstream</code>对象中读取数据。类似的，类型<code>ofstream</code>和<code>ostringstream</code>都继承自<code>ostream</code>。</p><p>IO对象无拷贝或赋值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ofstream out1, out2;</span><br><span class="line">out1 = out2;               <span class="comment">//错误！不能对流对象赋值</span></span><br><span class="line"><span class="function">ofstream <span class="title">print</span><span class="params">(ofstream)</span></span>;  <span class="comment">//错误！不能将形参或返回类型设为流类型</span></span><br><span class="line">out2 = <span class="built_in">print</span>(out2);        <span class="comment">//错误！不能拷贝流对象</span></span><br></pre></td></tr></table></figure><p>读写一个 IO 对象会改变其状态，因此传递和返回的引用不能是<code>const</code>的。</p><p><img src="https://bu.dusays.com/2023/03/13/640edc3ca07fe.png" alt="17-24.png"></p><p>查询流的状态：</p><p>IO 库定义了一个与机器无关的<code>iostate</code>类型，它提供了表达流状态的完整功能。这个类型应作为一个位集合来使用。IO 库定义了 4 个<code>iostate</code>类型的<code>constexpr</code>值，表示特定的位模式。这些值用来表示特定类型的 IO 条件，可以与位运算符一起使用来一次性检测或设置多个标志位。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不同机器里面可能不一样 (?)</span></span><br><span class="line">goodbit = <span class="number">0x0</span></span><br><span class="line">eofbit = <span class="number">0x1</span></span><br><span class="line">failbit = <span class="number">0x2</span></span><br><span class="line">badbit = <span class="number">0x4</span></span><br></pre></td></tr></table></figure><p><code>badbit</code>表示系统级错误，如不可恢复的读写错误。通常情况下，一旦<code>badbit</code>被置位，流就无法再使用了。在发生可恢复错误后，<code>failbit</code>被置位，如期望读取数值却读出一个字符等错误。这种问题通常是可以修正的，流还可以继续使用。如果到达文件结束位置，<code>eofbit</code>和<code>failbit</code>都会被置位。<code>goodbit</code>的值为 0 ，表示流未发生错误。如果<code>badbit</code>、<code>failbit</code>和<code>eofbit</code>任一个被置位，则检测流状态的条件会失败。</p><p>标准库还定义了一组函数来查询这些标志位的状态。操作<code>good</code>在所有错误位均未置位的情况下返回 true，而<code>bad</code>、<code>fail</code>和<code>eof</code>则在对应错误位被置位时返回 true。此外，在<code>badbit</code>被置位时，<code>fail</code>也会返回true 。这意味着，使用<code>good</code>或<code>fail</code>是确定流的总体状态的正确方法。实际上，我们将流当作条件使用的代码就等价于<code>!fail()</code>。而<code>eof</code>和<code>bad</code>操作只能表示特定的错误。</p><p>管理条件状态：</p><p>流对象的<code>rdstate</code>成员返回一个<code>iostate</code>值，对应流的当前状态。<code>setstate</code>操作将给定条件位置位，表示发生了对应错误。<code>clear</code>成员是一个重载的成员：它有一个不接受参数的版本，而另一个版本接受一个<code>iostate</code>类型的参数。</p><p><code>clear</code>不接受参数的版本清除（复位）所有错误标志位。执行<code>clear()</code>后，调用<code>good</code>会返回 true 。我们可以这样使用这些成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> old_state = cin.<span class="built_in">rdstate</span>(); <span class="comment">//记住 cin 的当前状态</span></span><br><span class="line">cin.<span class="built_in">clear</span>();                    <span class="comment">//使 cin 有效</span></span><br><span class="line"><span class="built_in">process_input</span>(cin);             <span class="comment">//使用 cin</span></span><br><span class="line">cin.<span class="built_in">setstate</span>(old_state);        <span class="comment">//将 cin 置为原始状态</span></span><br></pre></td></tr></table></figure><p>带参数的<code>clear</code>版本接受一个<code>iostate</code>值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//复位 failbit 和 badbit ，保持其他标志位不变</span></span><br><span class="line">cin.<span class="built_in">clear</span>(cin.<span class="built_in">rdstate</span>() &amp; ~cin.failbit &amp; ~cin.badbit);</span><br><span class="line"><span class="comment">/*-------------位运算，比较好理解：----------</span></span><br><span class="line"><span class="comment">这里 0 代表无错，1 有错。failbit 中的 1 取反后</span></span><br><span class="line"><span class="comment">变成 0，任何一个数(0/1) &amp; 0 都变成 0，完成置位。</span></span><br><span class="line"><span class="comment">同时 failbit 中的 0 取反后变成 1，任何一个数(0/1)</span></span><br><span class="line"><span class="comment">&amp; 1 都不变。</span></span><br><span class="line"><span class="comment">badbit 同理。</span></span><br><span class="line"><span class="comment">------------------------------------------*/</span></span><br></pre></td></tr></table></figure><p>【练习8.1】编写函数，接受一个 istream&amp; 参数，返回值类型也是 istream&amp; 。此函数须从给定流中读取数据，直到遇到 eof 停止。它将读取的数据打印在标准输出上。完成这些操作后，在返回流之前，对流进行复位，使其处于有效状态。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">istream&amp; <span class="title">f</span><span class="params">(istream&amp; in)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    <span class="keyword">while</span>(in&gt;&gt;v, !in.<span class="built_in">eof</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(in.<span class="built_in">bad</span>()) <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;io-stream error&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(in.<span class="built_in">fail</span>())&#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;Data error, please try again: &quot;</span> &lt;&lt; endl;</span><br><span class="line">            in.<span class="built_in">clear</span>();</span><br><span class="line">            in.<span class="built_in">ignore</span>(<span class="number">100</span>, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; v &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    in.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please enter some integers and press Ctrl+Z to end: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">f</span>(cin);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//问题（未解决）：某些配置无法处理中文，甚至会导致程序的错误</span></span><br></pre></td></tr></table></figure><p><strong>关于上例代码的一些解释（注意：整理自网络，不能严格保证其正确性）</strong>：</p><ul><li>在函数<code>f</code>中，<code>in.ignore(100, &#39;\n&#39;)</code>的作用是忽略输入流中的一些字符，直到遇到换行符为止，或者忽略了 100 个字符。这里的换行符<code>&#39;\n&#39;</code>是因为在输入整数时，用户可能会在输入后按下回车键，导致换行符被输入流中。通过忽略换行符，可以清除输入流中的垃圾数据，使得下一个整数输入操作能够得到正确的输入。忽略字符的操作是在输入流中移动指针，使得下一次读取操作可以从正确的位置开始。</li><li>需要注意的是，如果忽略了指定的最大数量 n 仍然没有遇到终止字符 c，则会设置输入流的<code>failbit</code>标志，表示输入流状态错误。</li><li>它的一个常用功能就是用来清除以回车结束的输入缓冲区的内容，消除上一次输入对下一次输入的影响。例如，<code>cin.ignore(1024, &#39;\n&#39;)</code>，通常把第一个参数设置得足够大，这样是为了只有第二个参数 ‘\n’ 起作用。所以这一句就是把回车（包括回车）之前的所有字符从输入缓冲流中清除出去。</li><li>如果默认不给参数的话，默认参数为<code>cin.ignore(1, EOF)</code>，即把EOF前的1个字符清掉，没有遇到EOF就清掉一个字符然后结束。</li><li><code>in.clear()</code>成员函数用于清除输入流的错误标志，但是它并不会清除输入流中的垃圾数据。</li></ul><p><img src="https://bu.dusays.com/2023/03/28/64225c3108ab5.png" alt="17-25.png" title="上例代码测试结果"></p><p>管理输出缓冲：</p><p><img src="https://bu.dusays.com/2023/03/28/64225ef3e4a4c.png" alt="17-26.png" title="缓冲刷新的原因"></p><p>刷新输出缓冲区：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;hi!&quot;</span> &lt;&lt; endl;  <span class="comment">//输出 hi! 和一个换行，然后刷新缓冲区</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;hi!&quot;</span> &lt;&lt; flush; <span class="comment">//输出 hi! ，然后刷新缓冲区</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;hi!&quot;</span> &lt;&lt; ends;  <span class="comment">//输出 hi! 和一个空字符，然后刷新缓冲区</span></span><br></pre></td></tr></table></figure><p><code>unitbuf</code>操纵符：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; unitbuf;    <span class="comment">//所有输出操作后都会立即刷新缓冲区</span></span><br><span class="line">cout &lt;&lt; nounitbuf;  <span class="comment">//回到正常的缓冲方式</span></span><br></pre></td></tr></table></figure><p><strong>警告：如果程序崩溃，输出缓冲区不会被刷新。</strong></p><p>关联输入和输出流：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cin &gt;&gt; ival;   <span class="comment">//会导致 cout 的缓冲区被刷新</span></span><br></pre></td></tr></table></figure><p><code>tie</code>有两个重载的版本：一个版本不带参数，返回指向输出流的指针。如果本对象当前关联到一个输出流，则返回的就是指向这个流的指针，如果对象未关联到流，则返回空指针。<code>tie</code>的第二个版本接受一个指向<code>ostream</code>的指针，将自己关联到此<code>ostream</code>。即，<code>x.tie(&amp;o)</code>将流<code>x</code>关联到输出流<code>o</code>。</p><p>既可以将一个<code>istream</code>对象关联到另一个<code>ostream</code>，也可以将一个<code>ostream</code>关联到另一个<code>ostream</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cin.<span class="built_in">tie</span>(&amp;cout);  <span class="comment">//仅作展示：标准库将cin和cout关联在一起</span></span><br><span class="line"><span class="comment">// old_tie指向当前关联到cin的流（如果有的话）</span></span><br><span class="line">ostream* old_tie = cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>); <span class="comment">// cin 不再与其他流关联</span></span><br><span class="line"><span class="comment">// 将cin和cerr关联：not a good idea，仅作展示</span></span><br><span class="line">cin.<span class="built_in">tie</span>(&amp;cerr);  <span class="comment">//读取cin会刷新cerr，而不是cout</span></span><br><span class="line">cin.<span class="built_in">tie</span>(old_tie);  <span class="comment">//重建cin和cout的正常关联</span></span><br></pre></td></tr></table></figure><p>每个流同时最多关联到一个流，但多个流可以同时关联到同一个<code>ostream</code>。</p><h2 id="文件输入输出"><a href="#文件输入输出" class="headerlink" title="文件输入输出"></a>文件输入输出</h2><p><img src="https://bu.dusays.com/2023/04/01/6427ff6356b4f.png" alt="17-27.png" title="fstream 特有的操作"></p><p>使用文件流对象：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">in</span><span class="params">(ifile)</span></span>; <span class="comment">//构造一个ifstream并打开给定文件</span></span><br><span class="line">ofstream out;       <span class="comment">//输出文件流未关联到任何文件</span></span><br></pre></td></tr></table></figure><p>在新 C++ 标准中，文件名既可以是库类型 string 对象，也可以是 C 风格字符数组。旧版本的标准库只允许 C 风格字符数组。</p><p>用<code>fstream</code>代替<code>iostream&amp;</code>：在要求使用基类型对象的地方，可以用继承类型的对象来替代。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本例中，假定输入和输出文件的名字是通过传给main的参数来指定的</span></span><br><span class="line"><span class="function">ifstream <span class="title">input</span><span class="params">(argv[<span class="number">1</span>])</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">output</span><span class="params">(argv[<span class="number">2</span>])</span></span>;</span><br><span class="line">Sales_data total;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">read</span>(input, total))&#123; <span class="comment">//读取第一条销售记录</span></span><br><span class="line">    Sales_data trans;   <span class="comment">//保存下一条销售记录的变量</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">read</span>(input, trans))&#123;</span><br><span class="line">        <span class="keyword">if</span>(total.<span class="built_in">isbn</span>()==trans.<span class="built_in">isbn</span>())</span><br><span class="line">            total.<span class="built_in">combine</span>(trans);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">print</span>(output, total) &lt;&lt; endl;</span><br><span class="line">            total = trans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(output, total) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;No data ?!&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>上面的代码中，重要的是对<code>read</code>和<code>print</code>的调用。虽然两个函数定义时指定的形参分别是<code>istream&amp;</code>和<code>ostream&amp;</code>，但我们可以向它们传递<code>fstream</code>对象。</p><p>成员函数<code>open</code>和<code>close</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">in</span><span class="params">(ifile)</span></span>; <span class="comment">//构造一个ifstream并打开给定文件</span></span><br><span class="line">ofstream out;       <span class="comment">//输出文件流未关联到任何文件</span></span><br><span class="line">out.<span class="built_in">open</span>(ifile + <span class="string">&quot;.copy&quot;</span>);  <span class="comment">//打开指定文件</span></span><br><span class="line"><span class="keyword">if</span>(out)&#123;            <span class="comment">//检查open是否成功</span></span><br><span class="line">    <span class="comment">/*---*/</span></span><br><span class="line">&#125;</span><br><span class="line">in.<span class="built_in">close</span>();         <span class="comment">//关闭文件</span></span><br><span class="line">in.<span class="built_in">open</span>(ifile + <span class="string">&quot;2&quot;</span>);  <span class="comment">//打开另一个文件</span></span><br></pre></td></tr></table></figure><p>如果调用<code>open</code>失败，<code>failbit</code>会被置位。如果<code>open</code>成功，流的状态<code>good()</code>会为<code>true</code>。</p><p>自动构造和析构：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main接受一个要处理的文件列表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> p = argv+<span class="number">1</span>; p != argv+argc; p++)&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">input</span><span class="params">(*p)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(input)&#123;  <span class="comment">//如果文件打开成功，“处理”此文件</span></span><br><span class="line">        <span class="built_in">process</span>(input);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;couldn&#x27;t open: &quot;</span> + <span class="built_in">string</span>(*p);</span><br><span class="line">&#125; <span class="comment">//每个循环步input都会离开作用域，因此会被销毁</span></span><br></pre></td></tr></table></figure><p><strong>当一个<code>fstream</code>对象离开其作用域时，与之关联的文件会自动关闭。</strong> 即：当一个<code>fstream</code>对象被销毁时，<code>close</code>会自动被调用。</p><p>【练习8.4】 编写函数，以读模式打开一个文件，将其内容读入到一个string的vector中，将每一行作为一个独立的元素存于vector中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;      <span class="comment">// 路径中最好不要有中文。</span></span><br><span class="line">    <span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">&quot;D:\\c++code\\exercise8-4\\data.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!in)&#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;couldn&#x27;t open file: data.txt&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string line;</span><br><span class="line">    vector&lt;string&gt; words;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(in, line))&#123;</span><br><span class="line">        words.<span class="built_in">push_back</span>(line);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    in.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> it = words.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">while</span>(it!=words.<span class="built_in">end</span>())&#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt;endl;</span><br><span class="line">        ++it;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//data.txt</span><br><span class="line">tianshangdetaiyang</span><br><span class="line">yueliangyigeyang</span><br><span class="line">yiduoyejuhua</span><br><span class="line">zhengpiaoliang</span><br><span class="line">nidemoyang</span><br><span class="line">songniyiduoshan/san chahua</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//输出结果</span><br><span class="line">tianshangdetaiyang</span><br><span class="line">yueliangyigeyang</span><br><span class="line">yiduoyejuhua</span><br><span class="line">zhengpiaoliang</span><br><span class="line">nidemoyang</span><br><span class="line">songniyiduoshan/san chahua</span><br></pre></td></tr></table></figure><p>【练习8.5】重写上面的程序，将每个单词作为一个独立的元素进行存储。</p><p>【解答】将<code>while(getline(in, line))</code>改为<code>while(in &gt;&gt; line)</code>即可。</p><p>文件模式：</p><p><img src="https://bu.dusays.com/2023/04/02/642936e10ad75.png" alt="17-28.png"></p><p><img src="https://bu.dusays.com/2023/04/02/642938a965441.png" alt="17-29.png" title="指定文件模式的限制"></p><p>以<code>out</code>模式打开文件会丢弃已有数据：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在这几条语句中，file1都被截断</span></span><br><span class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">&quot;file1&quot;</span>)</span></span>; <span class="comment">//隐含以输出模式打开文件并截断文件</span></span><br><span class="line"><span class="function">ofstream <span class="title">out2</span><span class="params">(<span class="string">&quot;file1&quot;</span>, ofstream::out)</span></span>;  <span class="comment">//隐含地截断文件</span></span><br><span class="line"><span class="function">ofstream <span class="title">out3</span><span class="params">(<span class="string">&quot;file1&quot;</span>, ofstream::out | ofstream::trunc)</span></span>;</span><br><span class="line"><span class="comment">//为了保留文件内容，我们必须显式指定app模式</span></span><br><span class="line"><span class="function">ofstream <span class="title">app</span><span class="params">(<span class="string">&quot;file2&quot;</span>, ofstream::app)</span></span>; <span class="comment">//隐含为输出模式</span></span><br><span class="line"><span class="function">ofstream <span class="title">app2</span><span class="params">(<span class="string">&quot;file2&quot;</span>, ofstream::out | ofstream::app)</span></span>;</span><br></pre></td></tr></table></figure><p>每次调用<code>open</code>时都会确定文件模式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ofstream out; <span class="comment">//未指定文件打开模式</span></span><br><span class="line">out.<span class="built_in">open</span>(<span class="string">&quot;scratchpad&quot;</span>); <span class="comment">//模式隐含设置为输出和截断</span></span><br><span class="line">out.<span class="built_in">close</span>();</span><br><span class="line">out.<span class="built_in">open</span>(<span class="string">&quot;previous&quot;</span>, ofstream::app); <span class="comment">//模式为输出和追加</span></span><br><span class="line">out.<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure><p>【练习8.7】修改上一节的书店程序，将结果保存到一个文件中。将输出文件名作为第二个参数传递给 main 函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 8_7main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Sales_data.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">3</span>)&#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;Please give the input and output file names&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ifstream <span class="title">in</span><span class="params">(argv[<span class="number">1</span>])</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!in)&#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;Unable to open the input file&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ofstream <span class="title">out</span><span class="params">(argv[<span class="number">2</span>])</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!out)&#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;Unable to open the output file&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Sales_data total;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">read</span>(in, total))&#123; <span class="comment">//读取第一条销售记录</span></span><br><span class="line">        Sales_data trans;   <span class="comment">//保存下一条销售记录的变量</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">read</span>(in, trans))&#123;</span><br><span class="line">            <span class="keyword">if</span>(total.<span class="built_in">isbn</span>()==trans.<span class="built_in">isbn</span>())</span><br><span class="line">                total.<span class="built_in">combine</span>(trans);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">print</span>(out, total) &lt;&lt; endl;</span><br><span class="line">                total = trans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(out, total) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;No data&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件 8_7file_in.txt 内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">war&amp;peace 2 8.8</span><br><span class="line">war&amp;peace 1 9</span><br><span class="line">taoteching 3 3.3</span><br><span class="line">taoteching 6 9</span><br><span class="line">Pride&amp;Prejudice 2 89.64</span><br><span class="line">hewhochangedchina 1926 0.817</span><br></pre></td></tr></table></figure><p>创建 8_7file_out.txt 文件，初始为空。此外还有之前提到的文件 Sales_data.h 和 Sales_data_Implementation.cpp ，将它们放至同一个文件夹中。</p><p>打开 PowerShell ，更改路径（以博主的机器为例）：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:\c++code\exercise8<span class="literal">-7</span></span><br></pre></td></tr></table></figure><p>键入以下命令执行分离式编译：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ <span class="number">8</span>_7main.cpp Sales_data_Implementation.cpp <span class="literal">-o</span> <span class="number">8</span>_7prog</span><br></pre></td></tr></table></figure><p>键入命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\<span class="number">8</span>_7prog.exe <span class="number">8</span>_7file_in.txt <span class="number">8</span>_7file_out.txt</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/04/02/64296b4f10068.png" alt="17-30.png"></p><p>打开 8_7file_out.txt ，发现输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">war&amp;peace 3 26.6 8.86667</span><br><span class="line"></span><br><span class="line">taoteching 9 63.9 7.1</span><br><span class="line"></span><br><span class="line">Pride&amp;Prejudice 2 179.28 89.64</span><br><span class="line"></span><br><span class="line">hewhochangedchina 1926 1573.54 0.817</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果键入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\<span class="number">8</span>_7prog.exe <span class="number">8</span>_7file_in.txt <span class="number">8</span>_7file_out.txt hana.txt</span><br></pre></td></tr></table></figure><p>则 powershell 会显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please give the input and output file names</span><br></pre></td></tr></table></figure><h2 id="string-流"><a href="#string-流" class="headerlink" title="string 流"></a>string 流</h2><p><img src="https://bu.dusays.com/2023/04/03/642a3f53271cf.png" alt="17-31.png"></p><p>使用<code>istringstream</code>：</p><p>考虑这样的例子：有一个文件，列出了一些人名和他们的电话号码。某些人只有一个号码，而另一些则有多个。输入文件格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">morgan 2015552368 8625550123</span><br><span class="line">drew 9735550130</span><br><span class="line">lee 6095550132 2015550175 8005550000</span><br></pre></td></tr></table></figure><p>核心代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">PersonInfo</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    vector&lt;string&gt; phones;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// --------------------</span></span><br><span class="line">string line, word;</span><br><span class="line">vector&lt;PersonInfo&gt; people;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">getline</span>(cin, line))&#123;</span><br><span class="line">    PersonInfo info;</span><br><span class="line">    <span class="function">istringstream <span class="title">record</span><span class="params">(line)</span></span>;</span><br><span class="line">    record &gt;&gt; info.name;</span><br><span class="line">    <span class="keyword">while</span>(record &gt;&gt; word)</span><br><span class="line">        info.phones.<span class="built_in">push_back</span>(word);</span><br><span class="line">    people.<span class="built_in">push_back</span>(info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【练习8.9】 使用 练习8.1 中编写的函数打印一个<code>istringstream</code>对象的内容。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">istream&amp; <span class="title">f</span><span class="params">(istream&amp; in)</span></span>&#123;</span><br><span class="line">    string v;</span><br><span class="line">    <span class="keyword">while</span>(in&gt;&gt;v, !in.<span class="built_in">eof</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(in.<span class="built_in">bad</span>())</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;io-stream error&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(in.<span class="built_in">fail</span>())&#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;Data error, please try again: &quot;</span> &lt;&lt; endl;</span><br><span class="line">            in.<span class="built_in">clear</span>();</span><br><span class="line">            in.<span class="built_in">ignore</span>(<span class="number">1000</span>, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; v &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    in.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ostringstream msg;</span><br><span class="line">    msg &lt;&lt; <span class="string">&quot;C++ Primer 5th Edition&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="function">istringstream <span class="title">in</span><span class="params">(msg.str())</span></span>;</span><br><span class="line">    <span class="built_in">f</span>(in);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C++</span><br><span class="line">Primer</span><br><span class="line">5th</span><br><span class="line">Edition</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重复使用字符串流时，每次都用调用<code>clear</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">record.<span class="built_in">clear</span>(); <span class="comment">// record 是 istringstream 对象</span></span><br></pre></td></tr></table></figure><p>使用<code>ostringstream</code>：</p><p>考虑情景：我们需要验证并改变电话号码的格式。对于无效的电话号码，需要打印错误信息。</p><p>核心代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ostringstream os;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span> &amp;entry : people)&#123; <span class="comment">//对people中的每一项</span></span><br><span class="line">    ostringstream formatted, badNums;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span> &amp;nums : entry.phones)&#123;  <span class="comment">//对每个数</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">valid</span>(nums))&#123;</span><br><span class="line">            badNums &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; nums;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            formatted &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; format(nums);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(badNums.<span class="built_in">str</span>().<span class="built_in">empty</span>())</span><br><span class="line">        os &lt;&lt; entry.name &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">           &lt;&lt; formatted.<span class="built_in">str</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;input error: &quot;</span> &lt;&lt; entry.name</span><br><span class="line">             &lt;&lt; <span class="string">&quot; invalid number(s) &quot;</span> &lt;&lt; badNums.<span class="built_in">str</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; os.<span class="built_in">str</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="顺序容器概述"><a href="#顺序容器概述" class="headerlink" title="顺序容器概述"></a>顺序容器概述</h2><p><img src="https://bu.dusays.com/2023/04/04/642b9722be985.png" alt="17-32.png"></p><p><code>forward_list</code>和<code>array</code>是新 C++ 标准增加的类型。</p><p><code>forward_list</code>没有<code>size</code>操作，因为保存或计算其大小就会比手写链表多出额外的开销。<strong>对其他容器而言，<code>size</code>保证是一个快速的常量时间的操作。</strong></p><p><strong>NOTE ：</strong> 新标准库的容器比旧版本快得多。现代 C++ 程序应该使用标准库容器，而不是更原始的数据结构，如内置数组。</p><p><img src="https://bu.dusays.com/2023/04/04/642b9fd03d97a.png" alt="17-33.png" title="选择容器的基本原则"></p><h2 id="容器库概览"><a href="#容器库概览" class="headerlink" title="容器库概览"></a>容器库概览</h2><p>一种合法的写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;string&gt;&gt; lines; <span class="comment">// vector 的 vector</span></span><br></pre></td></tr></table></figure><p>较旧的编译器可能需要这样写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;string&gt; &gt; lines;</span><br></pre></td></tr></table></figure><p>虽然可以在容器中保存几乎任何类型，但某些容器操作对元素类型有自己的特殊要求。我们可以定义某类容器（即便它的类型不支持特定操作），但这种情况下，就只能使用那些无特殊要求的容器操作。</p><p>例如，顺序容器构造函数的一个版本接受容器大小参数，它使用了元素类型的默认构造函数。但某些类没有默认构造函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假定 noDefault 是一个没有默认构造函数的类型</span></span><br><span class="line"><span class="function">vector&lt;noDefault&gt; <span class="title">v1</span><span class="params">(<span class="number">10</span>, init)</span></span>;  <span class="comment">//正确。提供了元素初始化器</span></span><br><span class="line"><span class="function">vector&lt;noDefault&gt; <span class="title">v2</span><span class="params">(<span class="number">10</span>)</span></span>;        <span class="comment">//错误！必须提供一个元素初始化器</span></span><br></pre></td></tr></table></figure><p>一个更直观的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(std::string b)&#123;a = b;&#125;</span><br><span class="line">    <span class="function">std::string <span class="title">getStr</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> a;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">A <span class="title">aObj</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">std::vector&lt;A&gt; <span class="title">objA</span><span class="params">(<span class="number">5</span>, aObj)</span></span>;</span><br><span class="line">    <span class="keyword">auto</span> it = objA.<span class="built_in">cbegin</span>();</span><br><span class="line">    <span class="keyword">for</span>(; it!=objA.<span class="built_in">cend</span>(); ++it)&#123;</span><br><span class="line">        std::cout &lt;&lt; (*it).<span class="built_in">getStr</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*------- 输出结果 --------</span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">-------------------------*/</span></span><br></pre></td></tr></table></figure><p>上面的代码中，若第 13 行改为<code>std::string aObj(&quot;hello&quot;);</code>也是可以的，这里存在隐式转换。</p><p>若第 14 行写成<code>std::vector&lt;A&gt; objA(5);</code>，就会报错。</p><p><img src="https://bu.dusays.com/2023/04/06/642e8bd490340.png" alt="17-34.png" title="容器操作"></p><p><strong><code>forward_list</code>迭代器不支持递减运算符<code>--</code>。</strong></p><p>迭代器范围（iterator range）： <code>[begin, end)</code></p><p>【练习9.5】 题目描述没什么看头。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ivecit = vector&lt;<span class="type">int</span>&gt;::iterator;</span><br><span class="line"></span><br><span class="line"><span class="function">ivecit <span class="title">search_vec</span><span class="params">(ivecit beg, ivecit end, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(; beg!=end; beg++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(*beg==val) <span class="keyword">return</span> beg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ilist = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> , <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">search_vec</span>(ilist.<span class="built_in">begin</span>(), ilist.<span class="built_in">end</span>(), <span class="number">3</span>)-ilist.<span class="built_in">begin</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">search_vec</span>(ilist.<span class="built_in">begin</span>(), ilist.<span class="built_in">end</span>(), <span class="number">8</span>)-ilist.<span class="built_in">begin</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">7</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过类型别名，可以在不了解容器中元素类型的情况下使用它。如果需要元素类型，可以使用容器的<code>value_type</code>。如果需要元素类型的一个引用，可以使用<code>reference</code>或<code>const_reference</code>。</p><p>为了使用这些类型，必须显式地使用其类名：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list&lt;string&gt;::iterator iter;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::difference_type count;</span><br></pre></td></tr></table></figure><p><code>begin</code>和<code>end</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list&lt;string&gt; a = &#123;<span class="string">&quot;Milton&quot;</span>, <span class="string">&quot;Shakespeare&quot;</span>, <span class="string">&quot;Austen&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> it1 = a.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">auto</span> it2 = a.<span class="built_in">rbegin</span>(); <span class="comment">// list&lt;string&gt;::reverse_iterator</span></span><br><span class="line"><span class="keyword">auto</span> it3 = a.<span class="built_in">cbegin</span>();</span><br><span class="line"><span class="keyword">auto</span> it4 = a.<span class="built_in">crbegin</span>(); <span class="comment">// list&lt;string&gt;::const_reverse_iterator</span></span><br><span class="line"><span class="keyword">auto</span> it7 = a.<span class="built_in">begin</span>(); <span class="comment">// 仅当 a 是 const 时，it7 是 const_iterator</span></span><br><span class="line"><span class="keyword">auto</span> it8 = a.<span class="built_in">cbegin</span>(); <span class="comment">// it8 是 const_iterator</span></span><br></pre></td></tr></table></figure><p><strong>容器定义和初始化：</strong></p><p><img src="https://bu.dusays.com/2023/04/11/64355b082b233.png" alt="17-35.png"></p><p>一个容器初始化为另一个容器的拷贝时，容器类型和元素类型必须相同。不过，当传迭代器参数来拷贝一个范围时（该方法不适用于array），无此要求。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list&lt;string&gt; authors = &#123;<span class="string">&quot;Milton&quot;</span>, <span class="string">&quot;Shakespeare&quot;</span>, <span class="string">&quot;Austen&quot;</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">const</span> <span class="type">char</span>*&gt; articles = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;the&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">list&lt;string&gt; <span class="title">list2</span><span class="params">(authors)</span></span>;      <span class="comment">//正确。类型匹配</span></span><br><span class="line"><span class="function">deque&lt;string&gt; <span class="title">authList</span><span class="params">(authors)</span></span>;  <span class="comment">//错误！容器类型不匹配</span></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">words</span><span class="params">(articles)</span></span>;   <span class="comment">//错误！</span></span><br><span class="line"><span class="comment">//正确。可以将const char* 转换为 string</span></span><br><span class="line"><span class="function">forward_list&lt;string&gt; <span class="title">words</span><span class="params">(articles.begin(), articles.end())</span></span>;</span><br><span class="line"><span class="function">deque&lt;string&gt; <span class="title">authList</span><span class="params">(authors.begin(), it)</span></span>;  <span class="comment">//it是一个迭代器，指向authors的一个元素</span></span><br></pre></td></tr></table></figure><p>与顺序容器大小相关的构造函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ivec</span><span class="params">(<span class="number">10</span>, <span class="number">-1</span>)</span></span>; <span class="comment">//10个int元素，每个都初始化为-1</span></span><br><span class="line"><span class="function">list&lt;string&gt; <span class="title">slis</span><span class="params">(<span class="number">10</span>, <span class="string">&quot;hi!&quot;</span>)</span></span>; <span class="comment">//10个string，每个都初始化为 &quot;hi!&quot;</span></span><br><span class="line"><span class="function">forward_list&lt;<span class="type">int</span>&gt; <span class="title">ifli</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//10个元素，每个都初始化为0</span></span><br><span class="line"><span class="function">deque&lt;string&gt; <span class="title">sdeq</span><span class="params">(<span class="number">10</span>)</span></span>;  <span class="comment">//10个元素，每个都是空string</span></span><br></pre></td></tr></table></figure><p>如果元素类型是内置类型或是具有默认构造函数的类类型，可以只为构造函数提供一个容器大小参数。</p><p>只有顺序容器的构造函数才接受大小参数，关联容器并不支持。</p><p>标准库 array 具有固定大小：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array&lt;<span class="type">int</span>,5&gt; ia1; <span class="comment">//5个默认初始化的 int</span></span><br><span class="line">array&lt;<span class="type">int</span>,5&gt; ia2 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">array&lt;<span class="type">int</span>,5&gt; ia3 = &#123;<span class="number">42</span>&#125;; <span class="comment">//ia3[0]为42，剩余元素为0</span></span><br><span class="line"><span class="comment">//内置数组类型不能进行拷贝，或对象赋值操作。但array无此限制</span></span><br><span class="line">array&lt;<span class="type">int</span>,5&gt; digits = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">array&lt;<span class="type">int</span>,5&gt; copy = digits; <span class="comment">//正确。只要数组类型匹配即合法</span></span><br></pre></td></tr></table></figure><p>array 允许赋值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array&lt;<span class="type">int</span>,10&gt; a1 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">array&lt;<span class="type">int</span>,10&gt; a2 = &#123;<span class="number">0</span>&#125;;      <span class="comment">//所有元素值均为 0</span></span><br><span class="line">a1 = a2;                       <span class="comment">//替换a1中的元素</span></span><br><span class="line">a2 = &#123;<span class="number">0</span>&#125;;    <span class="comment">//错误！不能将一个花括号列表赋予数组</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/04/12/64362b258121c.png" alt="17-36.png" title="容器赋值运算"></p><p>使用<code>assign</code>（仅顺序容器）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list&lt;string&gt; names;</span><br><span class="line">vector&lt;<span class="type">const</span> <span class="type">char</span>*&gt; oldstyle;</span><br><span class="line">names = oldstyle;  <span class="comment">//错误！</span></span><br><span class="line">names.<span class="built_in">assign</span>(oldstyle.<span class="built_in">cbegin</span>(), oldstyle.<span class="built_in">cend</span>());</span><br><span class="line"><span class="comment">//正确。可以将 const char* 转换为 string</span></span><br></pre></td></tr></table></figure><p><code>assign</code>的第二个版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等价于 slist1.clear();</span></span><br><span class="line"><span class="comment">//后跟 slist1.insert(slist1.begin(), 10, &quot;Hiya!&quot;);</span></span><br><span class="line"><span class="function">list&lt;string&gt; <span class="title">slist1</span><span class="params">(<span class="number">1</span>)</span></span>; <span class="comment">//1个元素，为空string</span></span><br><span class="line">slist1.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="string">&quot;Hiya!&quot;</span>); <span class="comment">//10个元素，每个都是 &quot;Hiya!&quot;</span></span><br></pre></td></tr></table></figure><p>使用<code>swap</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;string&gt; <span class="title">svec1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">svec2</span><span class="params">(<span class="number">24</span>)</span></span>;</span><br><span class="line"><span class="built_in">swap</span>(svec1, svec2); <span class="comment">//调用完后svec1包含24个string元素</span></span><br></pre></td></tr></table></figure><p><strong>除 array 外，swap 不对任何元素进行拷贝、删除、插入操作，因此是常数时间开销。</strong></p><p>元素不会被移动的事实意味着，除<code>string</code>外，指向容器的迭代器、引用和指针在<code>swap</code>操作之后都不会失效。它们仍指向<code>swap</code>操作之前所指向的那些元素。但是，在<code>swap</code>之后，这些元素已经属于不同的容器了。例如，假定<code>iter</code>在<code>swap</code>之前指向<code>svec1[3]</code>的<code>string</code>，那么在<code>swap</code>之后它指向<code>svec2[3]</code>的元素。与其他容器不同，对一个<code>string</code>调用<code>swap</code>会导致迭代器、引用和指针失效。</p><p>与其他容器不同，<code>swap</code>两个<code>array</code>会真正交换它们的元素。因此，交换两个<code>array</code>所需的时间与<code>array</code>中元素的数目成正比。</p><p>因此，对于<code>array</code>，在<code>swap</code>操作之后，指针引用和迭代器所绑定的元素保持不变但元素值已经与另一个<code>array</code>中对应元素的值进行了交换。</p><p>在新标准库中，容器既提供成员函数版本的<code>swap</code>，也提供非成员版本的<code>swap</code>。而早期标准库版本只提供成员函数版本的<code>swap</code>。<strong>非成员版本的<code>swap</code>在泛型编程中是非常重要的。统一使用非成员版本的<code>swap</code>是一个好习惯。</strong></p><p>关系运算符：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v1 = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">12</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v2 = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v3 = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v4 = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">12</span>&#125;;</span><br><span class="line">v1 &lt; v2     <span class="comment">//true</span></span><br><span class="line">v1 &lt; v3     <span class="comment">//false</span></span><br><span class="line">v1 == v4    <span class="comment">//true</span></span><br><span class="line">v1 == v2    <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>比较两个容器实际上是进行元素的逐对比较。这些运算符的工作方式与<code>string</code>的关系运算类似:</p><ul><li>如果两个容器具有相同大小且所有元素都两两对应相等，则这两个容器相等；否则两个容器不等。</li><li>如果两个容器大小不同，但较小容器中每个元素都等于较大容器中的对应元素，则较小容器小于较大容器。</li><li>如果两个容器都不是另一个容器的前缀子序列，则它们的比较结果取决于第一个不相等的元素的比较结果。</li></ul><p>只有当容器的元素类型也定义了相应的比较运算符时，才可以用关系运算符比较两个容器：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;Sales_data&gt; storeA, storeB;</span><br><span class="line"><span class="comment">/*------ some code ------*/</span></span><br><span class="line"><span class="keyword">if</span>(storeA &lt; storeB)&#123;<span class="comment">/*---*/</span>&#125; <span class="comment">//错误！Sales_data没有定义&lt;运算符</span></span><br></pre></td></tr></table></figure><h2 id="顺序容器操作"><a href="#顺序容器操作" class="headerlink" title="顺序容器操作"></a>顺序容器操作</h2><p><img src="https://bu.dusays.com/2023/04/15/643a60508ca4f.png" alt="17-37.png"></p><p>由于 string 是一个字符容器，我们也可以用<code>push_back</code>在 string 末尾添加字符：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pluralize</span><span class="params">(<span class="type">size_t</span> cnt, string&amp; word)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;<span class="number">1</span>)</span><br><span class="line">        word.<span class="built_in">push_back</span>(<span class="string">&#x27;s&#x27;</span>);  <span class="comment">//等价于 word += &#x27;s&#x27;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>容器元素是拷贝。</strong></p><p><code>list</code>、<code>forward_list</code>、<code>deque</code>容器支持将元素插到容器头部：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt; ilist;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">size_t</span> ix = <span class="number">0</span>; ix != <span class="number">4</span>; ++ix)</span><br><span class="line">    ilist.<span class="built_in">push_front</span>(ix);</span><br><span class="line"><span class="comment">//执行完毕后，ilist保存序列 3、2、1、0</span></span><br></pre></td></tr></table></figure><p><code>insert</code>成员提供了更一般的功能：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// insert 函数将元素插入到迭代器所指定的位置之前</span></span><br><span class="line">slist.<span class="built_in">insert</span>(iter, <span class="string">&quot;Hello!&quot;</span>); <span class="comment">//将&quot;Hello!&quot;添加到iter之前的位置</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string&gt; svec;</span><br><span class="line">list&lt;string&gt; slist;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于调用 slist.push_front(&quot;Hello!&quot;);</span></span><br><span class="line">slist.<span class="built_in">insert</span>(slist.<span class="built_in">begin</span>(), <span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector不支持push_front，但可以插入到begin()之前</span></span><br><span class="line">svec.<span class="built_in">insert</span>(svec.<span class="built_in">begin</span>(), <span class="string">&quot;Hello!&quot;</span>);</span><br></pre></td></tr></table></figure><p>插入范围元素：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将10个元素插入到svec的末尾，并将所有元素都初始化为&quot;Anna&quot;</span></span><br><span class="line">svec.<span class="built_in">insert</span>(svec.<span class="built_in">end</span>(), <span class="number">10</span>, <span class="string">&quot;Anna&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//接受一对迭代器，或一个初始化列表</span></span><br><span class="line">vector&lt;string&gt; v = &#123;<span class="string">&quot;quasi&quot;</span>, <span class="string">&quot;simba&quot;</span>, <span class="string">&quot;frollo&quot;</span>, <span class="string">&quot;scar&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//将v的最后两个元素添加到slist的开始位置</span></span><br><span class="line">slist.<span class="built_in">insert</span>(slist.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()<span class="number">-2</span>, v.<span class="built_in">end</span>()); <span class="comment">//插入元素会保持v中原有顺序</span></span><br><span class="line">slist.<span class="built_in">insert</span>(slist.<span class="built_in">end</span>(), &#123;<span class="string">&quot;these&quot;</span>, <span class="string">&quot;words&quot;</span>, <span class="string">&quot;will&quot;</span>, <span class="string">&quot;go&quot;</span>, <span class="string">&quot;at&quot;</span>, <span class="string">&quot;the&quot;</span>, <span class="string">&quot;end&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行时错误：迭代器表示要拷贝的范围，不能指向与目的位置相同的容器</span></span><br><span class="line">slist.<span class="built_in">insert</span>(slist.<span class="built_in">begin</span>(), slist.<span class="built_in">begin</span>(), slist.<span class="built_in">end</span>()); <span class="comment">//错误！</span></span><br></pre></td></tr></table></figure><p>使用<code>insert</code>返回值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C++11，insert返回新加入元素的迭代器，如果不插入任何元素，返回第一个参数</span></span><br><span class="line">list&lt;string&gt; lst;</span><br><span class="line"><span class="keyword">auto</span> iter = lst.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;word)&#123;</span><br><span class="line">    iter = lst.<span class="built_in">insert</span>(iter, word);  <span class="comment">//等价于调用 push_front</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>emplace</code>操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在c的末尾构造一个Sales_data对象</span></span><br><span class="line">c.<span class="built_in">emplace_back</span>(<span class="string">&quot;101-1-1&quot;</span>, <span class="number">24</span>, <span class="number">15.99</span>);</span><br><span class="line"></span><br><span class="line">c.<span class="built_in">push_back</span>(<span class="string">&quot;101-1-1&quot;</span>, <span class="number">24</span>, <span class="number">15.99</span>);  <span class="comment">//错误！</span></span><br><span class="line">c.<span class="built_in">push_back</span>(<span class="built_in">Sales_data</span>(<span class="string">&quot;101-1-1&quot;</span>, <span class="number">24</span>, <span class="number">15.99</span>)); <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">c.<span class="built_in">emplace_back</span>();  <span class="comment">//使用Sales_data的默认构造函数</span></span><br><span class="line">c.<span class="built_in">emplace</span>(iter, <span class="string">&quot;101-1-1&quot;</span>); <span class="comment">//使用Sales_data(string)</span></span><br><span class="line">c.<span class="built_in">emplace_front</span>(<span class="string">&quot;101-1-1&quot;</span>, <span class="number">24</span>, <span class="number">15.99</span>);</span><br></pre></td></tr></table></figure><p>【练习9.22】 一个有点奇怪的题目，闲得慌可以看看。</p><p>访问元素：</p><p><img src="https://bu.dusays.com/2023/04/17/643d3a4c2fccc.png" alt="17-38.png"></p><p>访问成员函数返回的是引用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!c.<span class="built_in">empty</span>())&#123;</span><br><span class="line">    c.<span class="built_in">front</span>() = <span class="number">42</span>; <span class="comment">//改变了</span></span><br><span class="line">    <span class="keyword">auto</span> &amp;v = c.<span class="built_in">back</span>();</span><br><span class="line">    v = <span class="number">1024</span>;  <span class="comment">//改变了c中的元素</span></span><br><span class="line">    <span class="keyword">auto</span> v2 = c.<span class="built_in">back</span>(); <span class="comment">//v2不是一个引用，它是c.back()的一个拷贝</span></span><br><span class="line">    v2 = <span class="number">0</span>; <span class="comment">//未改变c中的元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，使用 auto 变量保存这些函数的返回值，如果希望使用此变量改变元素的值，应定义为引用类型。</p><p><img src="https://bu.dusays.com/2023/04/17/643d3e239c31d.png" alt="17-39.png" title="顺序容器的删除操作"></p><p>从容器内部删除元素：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用后，elem1指向原先elem2所指向的位置</span></span><br><span class="line">elem1 = slist.<span class="built_in">erase</span>(elem1, elem2);</span><br></pre></td></tr></table></figure><p>特殊的<code>forward_list</code>操作：</p><p>关于这些操作的实现细节，请参阅《C++ Primer》第313页。</p><p><img src="https://sway.office.com/s/CROZFNBDynghyW67/images/_ovcx7pXmLYaEm" alt="17-40"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">forward_list&lt;<span class="type">int</span>&gt; flst = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> prev = flst.<span class="built_in">before_begin</span>();</span><br><span class="line"><span class="keyword">auto</span> curr = flst.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span>(curr != flst.<span class="built_in">end</span>())&#123;</span><br><span class="line">    <span class="keyword">if</span>(*curr%<span class="number">2</span>)</span><br><span class="line">        curr = flst.<span class="built_in">erase_after</span>(prev);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【练习9.28】编写函数，接受一个<code>forward_list&lt;string&gt;</code>和两个<code>string</code>共三个参数。函数应在链表中查找第一个<code>string</code>，并将第二个<code>string</code>插入到紧接着第一个<code>string</code>之后的位置。若第一个<code>string</code>未在链表中，则将第二个<code>string</code>插入到链表末尾。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;forward_list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_and_insert</span><span class="params">(forward_list&lt;string&gt;&amp; sflst, <span class="type">const</span> string&amp; s1, <span class="type">const</span> string&amp; s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> prev = sflst.<span class="built_in">before_begin</span>();</span><br><span class="line">    <span class="keyword">auto</span> curr = sflst.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="type">bool</span> inserted = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(curr!=sflst.<span class="built_in">end</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(*curr==s1)&#123;</span><br><span class="line">            curr = sflst.<span class="built_in">insert_after</span>(curr, s2);</span><br><span class="line">            inserted = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!inserted)</span><br><span class="line">        sflst.<span class="built_in">insert_after</span>(prev, s2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    forward_list&lt;string&gt; sflst = &#123;<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;!&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;!&quot;</span>&#125;;</span><br><span class="line">    <span class="built_in">test_and_insert</span>(sflst, <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;Sucrose&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> curr=sflst.<span class="built_in">cbegin</span>(); curr!=sflst.<span class="built_in">cend</span>(); curr++)&#123;</span><br><span class="line">        cout &lt;&lt; *curr &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//Hello Sucrose ! world ! </span></span><br></pre></td></tr></table></figure><p>改变容器大小：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">ilist</span><span class="params">(<span class="number">10</span>, <span class="number">42</span>)</span></span>; <span class="comment">//10个int，每个值都是42</span></span><br><span class="line">ilist.<span class="built_in">resize</span>(<span class="number">15</span>);     <span class="comment">//将5个值为0的元素添加到ilist的末尾</span></span><br><span class="line">ilist.<span class="built_in">resize</span>(<span class="number">25</span>, <span class="number">-1</span>); <span class="comment">//将10个值为-1的元素添加到ilist的末尾</span></span><br><span class="line">ilist.<span class="built_in">resize</span>(<span class="number">5</span>);      <span class="comment">//从ilist末尾删除20个元素</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/04/29/644ce58b15821.png" alt="17-41.png" title="顺序容器大小操作"></p><p><strong>容器操作可能使迭代器失效。</strong> 这在不同情况下会有不同的表现，如果你是一个纠结于此类无聊问题的人，请翻阅《C++ primer（第五版）》第315页。</p><p><strong>不要保存 end 返回的迭代器。</strong> 添加或删除元素的循环程序必须反复调用 end ，而不能在循环之前保存 end 返回的选代器，一直当作容器末尾使用。通常 C++ 标准库的实现中 end() 操作都很快，部分就是因为这个原因。</p><h2 id="vector对象是如何增长的"><a href="#vector对象是如何增长的" class="headerlink" title="vector对象是如何增长的"></a>vector对象是如何增长的</h2><p>vector 的底层其实仍然是定长数组，它能够实现动态扩容的原因是增加了避免数量溢出的操作。首先需要指明的是 vector 中元素的数量（长度）n 与它已分配内存最多能包含元素的数量（容量）N 是不一致的，vector 会分开存储这两个量。当向 vector 中添加元素时，如发现 n&gt;N，那么容器会分配一个尺寸为 2N 的数组，然后将旧数据从原本的位置拷贝到新的数组中，再将原来的内存释放。尽管这个操作的渐进复杂度是 O(n)，但是可以证明其均摊复杂度为 O(1)，而在末尾删除元素和访问元素则都仍然是 O(1) 的开销。 因此，只要对 vector 的尺寸估计得当并善用<code>resize()</code>和<code>reserve()</code>，就能使得 vector 的效率与定长数组不会有太大差距。</p><p><img src="https://bu.dusays.com/2023/05/01/644f3010c036d.png" alt="17-42.png" title="容器大小管理操作"></p><p><code>reserve</code>并不改变容器中元素的数量，它仅影响 vector 预先分配多大的内存空间。</p><blockquote><p>只有当需要的内存空间超过当前容量时，<code>reserve</code>调用才会改变 vector 的容量。如果需求大小大于当前容量，<code>reserve</code>至少分配与需求一样大的内存空间（可能更大）。<br>如果需求大小小于或等于当前容量，<code>reserve</code>什么也不做。特别是，当需求大小小于当前容量时，容器不会退回内存空间。因此，在调用<code>reserve</code>之后，<code>capacity</code>将会大于或等于传递给<code>reserve</code>的参数。<br>这样，调用<code>reserve</code>永远也不会减少容器占用的内存空间。类似的，<code>resize</code>成员函数只改变容器中元素的数目，而不是容器的容量。我们同样不能使用<code>resize</code>来减少容器预留的内存空间。<br>在新标准库中，我们可以调用<code>shrink_to_fit</code>来要求deque、vector或string退回不需要的内存空间。此函数指出我们不再需要任何多余的内存空间。但是，具体的实现可以选择忽略此请求。也就是说，调用<code>shrink_to_fit</code>也并不保证一定退回内存空间。</p></blockquote><p><code>capacity</code>和<code>size</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; ivec;</span><br><span class="line"><span class="comment">//size应该为0，capacity的值依赖于具体实现</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ivec: size: &quot;</span> &lt;&lt; ivec.<span class="built_in">size</span>()</span><br><span class="line">     &lt;&lt; <span class="string">&quot; capacity: &quot;</span> &lt;&lt; ivec.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向ivec添加24个元素</span></span><br><span class="line"><span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::size_type ix = <span class="number">0</span>; ix!=<span class="number">24</span>; ix++)</span><br><span class="line">    ivec.<span class="built_in">push_back</span>(ix);</span><br><span class="line"></span><br><span class="line"><span class="comment">//size应该为24，capacity应该大于等于24，具体值依赖于标准库实现</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ivec: size: &quot;</span> &lt;&lt; ivec.<span class="built_in">size</span>()</span><br><span class="line">     &lt;&lt; <span class="string">&quot; capacity: &quot;</span> &lt;&lt; ivec.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-------- possible output ----------</span></span><br><span class="line"><span class="comment">ivec: size: 0 capacity: 0</span></span><br><span class="line"><span class="comment">ivec: size: 24 capacity: 32</span></span><br><span class="line"><span class="comment">------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//预分配一些额外空间</span></span><br><span class="line">ivec.<span class="built_in">reserve</span>(<span class="number">50</span>); <span class="comment">//将capacity至少设定为50，可能会更大</span></span><br><span class="line"><span class="comment">//size应该为24，capacity应该大于等于50，具体值依赖于标准库实现</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ivec: size: &quot;</span> &lt;&lt; ivec.<span class="built_in">size</span>()</span><br><span class="line">     &lt;&lt; <span class="string">&quot; capacity: &quot;</span> &lt;&lt; ivec.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-------- possible output ----------</span></span><br><span class="line"><span class="comment">ivec: size: 24 capacity: 50</span></span><br><span class="line"><span class="comment">------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//接下来可以用光这些预留空间</span></span><br><span class="line"><span class="keyword">while</span>(ivec.<span class="built_in">size</span>()!=ivec.<span class="built_in">capacity</span>())</span><br><span class="line">    ivec.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//capacity应该未改变</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ivec: size: &quot;</span> &lt;&lt; ivec.<span class="built_in">size</span>()</span><br><span class="line">     &lt;&lt; <span class="string">&quot; capacity: &quot;</span> &lt;&lt; ivec.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-------- possible output ----------</span></span><br><span class="line"><span class="comment">ivec: size: 50 capacity: 50</span></span><br><span class="line"><span class="comment">------------------------------------*/</span></span><br><span class="line"></span><br><span class="line">ivec.<span class="built_in">push_back</span>(<span class="number">42</span>); <span class="comment">//再添加一个元素</span></span><br><span class="line"><span class="comment">//size应该为51，capacity应该大于等于51，具体值依赖于标准库实现</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ivec: size: &quot;</span> &lt;&lt; ivec.<span class="built_in">size</span>()</span><br><span class="line">     &lt;&lt; <span class="string">&quot; capacity: &quot;</span> &lt;&lt; ivec.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-------- possible output ----------</span></span><br><span class="line"><span class="comment">ivec: size: 51 capacity: 100</span></span><br><span class="line"><span class="comment">------------------------------------*/</span></span><br><span class="line"></span><br><span class="line">ivec.<span class="built_in">shrink_to_fit</span>(); <span class="comment">//要求归还内存</span></span><br><span class="line"><span class="comment">//size应该未改变，capacity的值依赖于具体实现</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ivec: size: &quot;</span> &lt;&lt; ivec.<span class="built_in">size</span>()</span><br><span class="line">     &lt;&lt; <span class="string">&quot; capacity: &quot;</span> &lt;&lt; ivec.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">//调用 shrink_to_fit() 只是一个请求，标准库并不保证退还内存</span></span><br></pre></td></tr></table></figure><p>只有在执行<code>insert</code>操作时<code>size</code>与<code>capacity</code>相等，或者调用<code>resize</code>或<code>reserve</code>时给定的大小超过当前<code>capacity</code>，vector 才可能重新分配内存空间。会分配多少超过给定容量的额外空间，取决于具体实现。</p><h2 id="额外的string操作"><a href="#额外的string操作" class="headerlink" title="额外的string操作"></a>额外的string操作</h2><p><img src="https://bu.dusays.com/2023/05/21/646980f6ba5b7.png" alt="17-43.png" title="构造string的其他方法"></p><p><img src="https://bu.dusays.com/2023/05/21/64698210df73b.png" alt="17-44.png" title="当作手册来查"></p><p>substr 操作：</p><p><img src="https://bu.dusays.com/2023/05/21/6469837ab648d.png" alt="17-45.png" title="子字符串操作"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;hello world&quot;</span>)</span></span>;</span><br><span class="line">string s2 = s.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">5</span>); <span class="comment">// s2 = &quot;hello&quot;</span></span><br><span class="line">string s3 = s.<span class="built_in">substr</span>(<span class="number">6</span>); <span class="comment">// s3 = &quot;world&quot;</span></span><br><span class="line">string s4 = s.<span class="built_in">substr</span>(<span class="number">6</span>, <span class="number">11</span>); <span class="comment">// s4 = &quot;world&quot;</span></span><br><span class="line">string s5 = s.<span class="built_in">substr</span>(<span class="number">12</span>);  <span class="comment">//抛出一个 out_of_range 异常</span></span><br></pre></td></tr></table></figure><p>【练习9.41】编写程序，从一个<code>vector&lt;char&gt;</code>初始化一个<code>string</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vector提供了data成员函数，返回其内存空间的首地址。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">char</span>&gt; chvec = &#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">    <span class="function">std::string <span class="title">s1</span><span class="params">(chvec.data(), chvec.size())</span></span>;</span><br><span class="line">    std::cout &lt;&lt; s1 &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*---- output -----</span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">------------------*/</span></span><br></pre></td></tr></table></figure><p>【练习9.42】假定你希望每次读取一个字符存入一个 string 中，而且知道最少需要读取 100 个字符，如何提高程序性能？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input_string</span><span class="params">(string&amp; s)</span></span>&#123;</span><br><span class="line">    s.<span class="built_in">reserve</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;c)&#123;</span><br><span class="line">        s.<span class="built_in">push_back</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="built_in">input_string</span>(s);</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*--------------------------------------</span></span><br><span class="line"><span class="comment">asdfa dfhdfh easdf;d&gt;</span></span><br><span class="line"><span class="comment">dfaf</span></span><br><span class="line"><span class="comment">asdgasgas</span></span><br><span class="line"><span class="comment">^Z</span></span><br><span class="line"><span class="comment">asdfadfhdfheasdf;d&gt;dfafasdgasgas</span></span><br><span class="line"><span class="comment">--------------------------------------*/</span></span><br></pre></td></tr></table></figure><p>除了接受迭代器的<code>insert</code>和<code>erase</code>版本外，string 还提供了接受下标的版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">insert</span>(s.<span class="built_in">size</span>(), <span class="number">5</span>, <span class="string">&#x27;!&#x27;</span>); <span class="comment">//在s末尾插入5个感叹号</span></span><br><span class="line">s.<span class="built_in">erase</span>(s.<span class="built_in">size</span>()<span class="number">-5</span>, <span class="number">5</span>); <span class="comment">//从s删除最后5个字符</span></span><br></pre></td></tr></table></figure><p>还提供了接受 C 风格字符数组的<code>insert</code>和<code>assign</code>版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span>* cp = <span class="string">&quot;Stately, plump Buck&quot;</span>;</span><br><span class="line">s.<span class="built_in">assign</span>(cp, <span class="number">7</span>); <span class="comment">// s == &quot;Stately&quot;</span></span><br><span class="line">s.<span class="built_in">insert</span>(s.<span class="built_in">size</span>(), cp+<span class="number">7</span>);  <span class="comment">// s == &quot;Stately, plump Buck&quot;</span></span><br></pre></td></tr></table></figure><p>我们也可以指定来自其他 string 或子字符串的字符插入到当前 string 中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string s = <span class="string">&quot;some string&quot;</span>, s2 = <span class="string">&quot;some other string&quot;</span>;</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">0</span>, s2); <span class="comment">//在s中位置0之前插入s2的拷贝</span></span><br><span class="line"><span class="comment">//在s[0]之前插入s2中s2[0]开始的s2.size()个字符</span></span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">0</span>, s2, <span class="number">0</span>, s2.<span class="built_in">size</span>());</span><br></pre></td></tr></table></figure><p><code>append</code>和<code>replace</code>函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//append 操作是在 string 末尾进行插入操作的一种简写形式</span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;C++ Primer&quot;</span>)</span>, s2 </span>= s;</span><br><span class="line">s.<span class="built_in">insert</span>(s.<span class="built_in">size</span>(), <span class="string">&quot; 4th Ed.&quot;</span>); <span class="comment">// s == &quot;C++ Primer 4th Ed.&quot;</span></span><br><span class="line">s2.<span class="built_in">append</span>(<span class="string">&quot; 4th Ed.&quot;</span>);  <span class="comment">// 等价方法，s == s2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//replace 操作是调用 erase 和 insert 的一种简写形式</span></span><br><span class="line"><span class="comment">//将 &quot;4th&quot; 替换为 &quot;5th&quot; 的等价方法</span></span><br><span class="line">s.<span class="built_in">erase</span>(<span class="number">11</span>, <span class="number">3</span>);       <span class="comment">// s == &quot;C++ Primer Ed.&quot;</span></span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">11</span>, <span class="string">&quot;5th&quot;</span>);  <span class="comment">// s == &quot;C++ Primer 5th Ed.&quot;</span></span><br><span class="line"><span class="comment">//从位置 11 开始，删除3个字符并插入 &quot;5th&quot;</span></span><br><span class="line">s2.<span class="built_in">replace</span>(<span class="number">11</span>, <span class="number">3</span>, <span class="string">&quot;5th&quot;</span>); <span class="comment">//等价方法：s==s2</span></span><br><span class="line"><span class="comment">//s.replace(11, 3, &quot;Fifth&quot;);  也可以，长度无需一样</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/06/10/648462bba1cf7.png" alt="17-46.png" title="修改string的操作"></p><p>【练习9.43 &amp; 练习9.44】如果你真的觉得题目描述有看头的话，就翻书看吧。</p><p>博主的代码，使用 KMP 算法实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getNext</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt;&amp; mynext, std::string&amp; t)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    mynext.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;t.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; t[i]!=t[j]) j=mynext[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(t[i]==t[j]) j++;</span><br><span class="line">        mynext.<span class="built_in">push_back</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function">std::stack&lt;<span class="type">int</span>&gt; <span class="title">kmpfind</span><span class="params">(std::string&amp; s, std::string&amp; t)</span></span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; mynext;</span><br><span class="line">    std::stack&lt;<span class="type">int</span>&gt; tmpans;</span><br><span class="line">    <span class="built_in">getNext</span>(mynext, t);</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; s[i] != t[j]) &#123;</span><br><span class="line">            j = mynext[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==t[j]) j++;</span><br><span class="line">        <span class="keyword">if</span> (j==t.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            tmpans.<span class="built_in">push</span>(i-t.<span class="built_in">size</span>()+<span class="number">1</span>);</span><br><span class="line">            j = mynext[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmpans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">convert2sth</span><span class="params">(std::string&amp; s, std::string&amp; oldVal, std::string&amp; newVal)</span></span>&#123;</span><br><span class="line">    std::stack&lt;<span class="type">int</span>&gt; ayaka = <span class="built_in">kmpfind</span>(s, oldVal);</span><br><span class="line">    <span class="keyword">while</span>(!ayaka.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        s.<span class="built_in">replace</span>(ayaka.<span class="built_in">top</span>(), oldVal.<span class="built_in">size</span>(), newVal);</span><br><span class="line">        ayaka.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::string s, oldVal, newVal;</span><br><span class="line">    std::cin &gt;&gt; s &gt;&gt; oldVal &gt;&gt; newVal;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">convert2sth</span>(s, oldVal, newVal); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  测试样例：前三行是输入，末行是输出</span></span><br><span class="line"><span class="comment"> *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *</span></span><br><span class="line"><span class="comment"> *  ayaka_is_my_waifu_.ayakaayaka_ayakayaka_ayaka123ayaka</span></span><br><span class="line"><span class="comment"> *  ayaka</span></span><br><span class="line"><span class="comment"> *  xiangling</span></span><br><span class="line"><span class="comment"> *  xiangling_is_my_waifu_.xianglingxiangling_xianglingiangling_xiangling123xiangling</span></span><br><span class="line"><span class="comment"> *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *</span></span><br><span class="line"><span class="comment"> *  虽然没有经过仔细的测试，但这个样例真的很令人信服/幸福  (* /ω＼*)</span></span><br><span class="line"><span class="comment"> *  最后我不知道这样的代码好不好，但肯定没有我的算法板子跑的快</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>当然，我的这么一通操作到底是不是画蛇添足，不得而知。相关的讨论：<a href="https://www.zhihu.com/question/392846851">C++string中find函数是用什么算法实现的？他的时间复杂度如何？实际比手写KMP效率相比如何？</a></p><p>书中给出的参考答案：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前略</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">replace_string</span><span class="params">(string&amp; s, <span class="type">const</span> string&amp; oldVal, <span class="type">const</span> string&amp; newVal)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((p=s.<span class="built_in">find</span>(oldVal, p))!=string::npos)&#123;</span><br><span class="line">        s.<span class="built_in">replace</span>(p, oldVal.<span class="built_in">size</span>(), newVal);</span><br><span class="line">        p += newVal.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 后略</span></span><br></pre></td></tr></table></figure><p>【练习9.45 &amp; 练习9.46】 题干没什么可看的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">name_string</span><span class="params">(string&amp; name, <span class="type">const</span> string&amp; prefix, <span class="type">const</span> string&amp; suffix)</span></span>&#123;</span><br><span class="line">    name.<span class="built_in">insert</span>(name.<span class="built_in">begin</span>(), <span class="number">1</span>, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    name.<span class="built_in">insert</span>(name.<span class="built_in">begin</span>(), prefix.<span class="built_in">begin</span>(), prefix.<span class="built_in">end</span>());</span><br><span class="line">    name.<span class="built_in">append</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    name.<span class="built_in">append</span>(suffix.<span class="built_in">begin</span>(), suffix.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// ===================================== //</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">name_string</span><span class="params">(string&amp; name, <span class="type">const</span> string&amp; prefix, <span class="type">const</span> string&amp; suffix)</span></span>&#123;</span><br><span class="line">    name.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">    name.<span class="built_in">insert</span>(<span class="number">0</span>, prefix);</span><br><span class="line">    name.<span class="built_in">insert</span>(name.<span class="built_in">size</span>(), <span class="string">&quot; &quot;</span>);</span><br><span class="line">    name.<span class="built_in">insert</span>(name.<span class="built_in">size</span>(), suffix);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/06/12/6486d4c032bb9.png" alt="17-47.png" title="string 搜索操作"></p><p>string 搜索函数返回一个<code>string::size_type</code>值，该类型是一个<code>unsigned</code>类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">name</span><span class="params">(<span class="string">&quot;AnnaBelle&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">auto</span> pos1 = name.<span class="built_in">find</span>(<span class="string">&quot;Anna&quot;</span>); <span class="comment">// pos1 == 0</span></span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">numbers</span><span class="params">(<span class="string">&quot;0123456789&quot;</span>)</span>, <span class="title">name</span><span class="params">(<span class="string">&quot;r2d2&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">//返回1，即，name 中第一个数字的下标</span></span><br><span class="line"><span class="keyword">auto</span> pos = name.<span class="built_in">find_first_of</span>(numbers);</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">dept</span><span class="params">(<span class="string">&quot;03714p3&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">//返回5，字符 &#x27;p&#x27; 的下标</span></span><br><span class="line"><span class="keyword">auto</span> pos = dept.<span class="built_in">find_first_not_of</span>(numbers);</span><br></pre></td></tr></table></figure><p>查找一整个字符串的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">numbers</span><span class="params">(<span class="string">&quot;0123456789&quot;</span>)</span>, <span class="title">name</span><span class="params">(<span class="string">&quot;r2d2&quot;</span>)</span></span>;</span><br><span class="line">string::size_type pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((pos=name.<span class="built_in">find_first_of</span>(numbers, pos))!=string::npos)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;found number at index: &quot;</span> &lt;&lt; pos &lt;&lt; <span class="string">&quot; element is &quot;</span> &lt;&lt; name[pos] &lt;&lt; endl;</span><br><span class="line">    pos++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*       output</span></span><br><span class="line"><span class="comment"> *  *  *  *  *  *  *  *</span></span><br><span class="line"><span class="comment"> *  found number at index: 1 element is 2</span></span><br><span class="line"><span class="comment"> *  found number at index: 3 element is 2</span></span><br><span class="line"><span class="comment"> *  *  *  *  *  *  *  *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>逆向搜索：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">river</span><span class="params">(<span class="string">&quot;Mississippi&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">auto</span> first_pos = river.<span class="built_in">find</span>(<span class="string">&quot;is&quot;</span>);  <span class="comment">//返回 1</span></span><br><span class="line"><span class="keyword">auto</span> last_pos = river.<span class="built_in">rfind</span>(<span class="string">&quot;is&quot;</span>);  <span class="comment">//返回 4</span></span><br></pre></td></tr></table></figure><p>【练习9.49】 如果一个字母延伸到中线之上，如 d 或 f ，则称其有上出头部分（ascender）。如果一个字母延伸到中线之下，称其有下出头部分（descender）。编写程序，读入一个单词文件，输出最长的既不包括上出头部分，也不包括下出头部分的单词。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find_longest_word</span><span class="params">(ifstream&amp; in)</span></span>&#123;</span><br><span class="line">    string s, longest_word;</span><br><span class="line">    <span class="type">int</span> maxlen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (in &gt;&gt; s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">find_first_of</span>(<span class="string">&quot;bdfghjklpqty&quot;</span>)!=string::npos) <span class="keyword">continue</span>;</span><br><span class="line">        cout &lt;&lt; s &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(maxlen &lt; s.<span class="built_in">size</span>())&#123;</span><br><span class="line">            maxlen = s.<span class="built_in">size</span>();</span><br><span class="line">            longest_word = s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;the longest string is: &quot;</span> &lt;&lt; longest_word &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">in</span><span class="params">(argv[<span class="number">1</span>])</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!in)&#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;cannot open file.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">find_longest_word</span>(in);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">asfdfva  asdfe mm</span><br><span class="line">asdf/:o? asdf sfg aabb jjj</span><br><span class="line">kkk</span><br><span class="line">s</span><br><span class="line">d</span><br><span class="line">asdfasf werg aaa</span><br></pre></td></tr></table></figure><p>命令及输出：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\arrogance&gt; <span class="built_in">cd</span> D:\c++code\exercise9<span class="literal">-49</span></span><br><span class="line"><span class="built_in">PS</span> D:\c++code\exercise9<span class="literal">-49</span>&gt; g++ <span class="number">949</span>main.cpp <span class="literal">-o</span> <span class="number">949</span>prog</span><br><span class="line"><span class="built_in">PS</span> D:\c++code\exercise9<span class="literal">-49</span>&gt; .\<span class="number">949</span>prog.exe <span class="number">949</span>in.txt</span><br><span class="line">mm s aaa</span><br><span class="line">the longest string is: aaa</span><br></pre></td></tr></table></figure><p><code>compare</code>函数：</p><p><img src="https://bu.dusays.com/2023/06/12/6486df8184212.png" alt="17-48.png"></p><p>数值转换：</p><p><img src="https://bu.dusays.com/2023/06/12/648737706da17.png" alt="17-49.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">42</span>;</span><br><span class="line">    string s = <span class="built_in">to_string</span>(i);  cout &lt;&lt; s &lt;&lt;endl;</span><br><span class="line">    <span class="type">double</span> d = <span class="built_in">stod</span>(s);  cout &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">    <span class="type">double</span> akashi = <span class="number">42.23</span>;</span><br><span class="line">    s = <span class="built_in">to_string</span>(akashi);</span><br><span class="line">    cout &lt;&lt; <span class="built_in">stod</span>(s) &lt;&lt; endl &lt;&lt; <span class="built_in">stoi</span>(s) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    string s2 = <span class="string">&quot;pi=3.14!!!??&quot;</span>;</span><br><span class="line">    d = <span class="built_in">stod</span>(s2.<span class="built_in">substr</span>(s2.<span class="built_in">find_first_of</span>(<span class="string">&quot;+-.0123456789&quot;</span>)));</span><br><span class="line">    cout &lt;&lt; d &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  output</span></span><br><span class="line"><span class="comment"> *  *  *  *  *  *</span></span><br><span class="line"><span class="comment"> *  42</span></span><br><span class="line"><span class="comment"> *  42</span></span><br><span class="line"><span class="comment"> *  42.23</span></span><br><span class="line"><span class="comment"> *  42</span></span><br><span class="line"><span class="comment"> *  3.14</span></span><br><span class="line"><span class="comment"> *  *  *  *  *  *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>【练习9.51】设计一个类，它有三个 unsigned 成员，分别表示月、日、年。为其编写构造函数，接受一个表示日期的 string 参数。你的构造函数应该能处理不同数据格式，如<code>January 1,1990</code>、<code>1/1/1900</code>、<code>Jan 1 1900</code>等。 </p><p>我的代码，注意没有检查格式错误：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">mdate</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> std::ostream&amp; <span class="title">print</span><span class="params">(std::ostream&amp; os, <span class="type">const</span> mdate&amp; item)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">mdate</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">mdate</span>(<span class="type">const</span> std::string&amp; s)&#123;</span><br><span class="line">        std::string::size_type pos = <span class="number">0</span>, pre = <span class="number">0</span>;</span><br><span class="line">        std::string wilddata[<span class="number">3</span>] = &#123;<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((pos=s.<span class="built_in">find_first_of</span>(<span class="string">&quot; ,/&quot;</span>, pos))!=std::string::npos)&#123;</span><br><span class="line">            wilddata[k]=s.<span class="built_in">substr</span>(pre, pos-pre);</span><br><span class="line">            pos++; k++;</span><br><span class="line">            pre = pos;</span><br><span class="line">        &#125;</span><br><span class="line">        wilddata[<span class="number">2</span>] = s.<span class="built_in">substr</span>(pre);</span><br><span class="line">        dd = <span class="built_in">stol</span>(wilddata[<span class="number">1</span>]);</span><br><span class="line">        yy = <span class="built_in">stol</span>(wilddata[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(mm2num.<span class="built_in">count</span>(wilddata[<span class="number">0</span>])!=<span class="number">0</span>)&#123;</span><br><span class="line">            mm = mm2num[wilddata[<span class="number">0</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> mm = <span class="built_in">stol</span>(wilddata[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> yy;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> mm;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> dd;</span><br><span class="line">    <span class="type">static</span> std::map&lt;std::string,<span class="type">unsigned</span> <span class="type">long</span>&gt; mm2num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::map&lt;std::string, <span class="type">unsigned</span> <span class="type">long</span>&gt; mdate::mm2num = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;January&quot;</span>, <span class="number">1</span>&#125;,     &#123;<span class="string">&quot;Jan&quot;</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;February&quot;</span>, <span class="number">2</span>&#125;,    &#123;<span class="string">&quot;Feb&quot;</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;March&quot;</span>, <span class="number">3</span>&#125;,       &#123;<span class="string">&quot;Mar&quot;</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;April&quot;</span>, <span class="number">4</span>&#125;,       &#123;<span class="string">&quot;Apr&quot;</span>, <span class="number">4</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;May&quot;</span>, <span class="number">5</span>&#125;,         &#123;<span class="string">&quot;May&quot;</span>, <span class="number">5</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;June&quot;</span>, <span class="number">6</span>&#125;,        &#123;<span class="string">&quot;Jun&quot;</span>, <span class="number">6</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;July&quot;</span>, <span class="number">7</span>&#125;,        &#123;<span class="string">&quot;Jul&quot;</span>, <span class="number">7</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;August&quot;</span>, <span class="number">8</span>&#125;,      &#123;<span class="string">&quot;Aug&quot;</span>, <span class="number">8</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;September&quot;</span>, <span class="number">9</span>&#125;,   &#123;<span class="string">&quot;Sept&quot;</span>, <span class="number">9</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;October&quot;</span>, <span class="number">10</span>&#125;,    &#123;<span class="string">&quot;Oct&quot;</span>, <span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;November&quot;</span>, <span class="number">11</span>&#125;,   &#123;<span class="string">&quot;Nov&quot;</span>, <span class="number">11</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;December&quot;</span>, <span class="number">12</span>&#125;,   &#123;<span class="string">&quot;Dec&quot;</span>, <span class="number">12</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">std::ostream&amp; <span class="title">print</span><span class="params">(std::ostream&amp; os, <span class="type">const</span> mdate&amp; item)</span></span>&#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;中文表述习惯为：&quot;</span> &lt;&lt; item.yy &lt;&lt; <span class="string">&quot;年&quot;</span> &lt;&lt; item.mm &lt;&lt; <span class="string">&quot;月&quot;</span> </span><br><span class="line">       &lt;&lt; item.dd &lt;&lt; <span class="string">&quot;日&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::string line;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(std::cin,line))&#123;</span><br><span class="line">        <span class="keyword">if</span>(line==<span class="string">&quot;quit&quot;</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="function">mdate <span class="title">akashi</span><span class="params">(line)</span></span>;</span><br><span class="line">        <span class="built_in">print</span>(std::cout, akashi);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入输出及命令行信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Oct 23 2003</span><br><span class="line">中文表述习惯为：2003年10月23日</span><br><span class="line">November 11 2018</span><br><span class="line">中文表述习惯为：2018年11月11日</span><br><span class="line">Jan 1,1998</span><br><span class="line">中文表述习惯为：1998年1月1日</span><br><span class="line">Aug,2/2015</span><br><span class="line">中文表述习惯为：2015年8月2日</span><br><span class="line">May/12 2098</span><br><span class="line">中文表述习惯为：2098年5月12日</span><br><span class="line">2 2 2001</span><br><span class="line">中文表述习惯为：2001年2月2日</span><br><span class="line">2/1/1023</span><br><span class="line">中文表述习惯为：1023年2月1日</span><br><span class="line">quit</span><br><span class="line"></span><br><span class="line">Press any key to continue . . .</span><br></pre></td></tr></table></figure><p>以下给出检查某些错误的可能思路：</p><ul><li>若某些特立独行的用户输入诸如<code>/////</code>之类的数据，或者连续多个空格等，会导致数组越界。为此需要重新编写 while 循环内的语句。</li><li>我们的思路是先将输入分成三块，然后分别在块内检查是否合法。如果依靠合法的分隔符都无法分为三块，则直接提示输入格式错误。</li><li>其他细节不表。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>((pos=s.<span class="built_in">find_first_of</span>(<span class="string">&quot; ,/&quot;</span>, pos))!=std::string::npos)&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos!=pre) wilddata[k++]=s.<span class="built_in">substr</span>(pre, pos-pre);</span><br><span class="line">    pre = ++pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k!=<span class="number">2</span>)&#123;<span class="comment">/* error msg */</span>&#125;</span><br><span class="line">wilddata[<span class="number">2</span>] = s.<span class="built_in">substr</span>(pre);</span><br><span class="line"><span class="comment">/* check if wilddata[0,1,2] is valid */</span></span><br></pre></td></tr></table></figure><p>习题册给出的案例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 9_51head.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DATE_H_INCLUDED</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DATE_H_INCLUDED</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">date</span>&#123;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp;, <span class="type">const</span> date&amp;);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">date</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">date</span>(string&amp; ds);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">unsigned</span> <span class="title">y</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> year;&#125;</span><br><span class="line">    <span class="function"><span class="type">unsigned</span> <span class="title">m</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> month;&#125;</span><br><span class="line">    <span class="function"><span class="type">unsigned</span> <span class="title">d</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> day;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">unsigned</span> year, month, day;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> string month_name[] = &#123;<span class="string">&quot;January&quot;</span>, <span class="string">&quot;February&quot;</span>, <span class="string">&quot;March&quot;</span>, <span class="string">&quot;April&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;May&quot;</span>, <span class="string">&quot;June&quot;</span>, <span class="string">&quot;July&quot;</span>, <span class="string">&quot;August&quot;</span>, <span class="string">&quot;September&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;October&quot;</span>, <span class="string">&quot;November&quot;</span>, <span class="string">&quot;December&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> string month_abbr[] = &#123;<span class="string">&quot;Jan&quot;</span>, <span class="string">&quot;Feb&quot;</span>, <span class="string">&quot;Mar&quot;</span>, <span class="string">&quot;Apr&quot;</span>, <span class="string">&quot;May&quot;</span>, <span class="string">&quot;Jun&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;Jul&quot;</span>, <span class="string">&quot;Aug&quot;</span>, <span class="string">&quot;Sept&quot;</span>, <span class="string">&quot;Oct&quot;</span>, <span class="string">&quot;Nov&quot;</span>, <span class="string">&quot;Dec&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> days[] = &#123;<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get_month</span><span class="params">(string&amp; ds, <span class="type">int</span>&amp; end_of_month)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">12</span>; i++)&#123;</span><br><span class="line">        <span class="comment">// 检查每个字符是否与月份简写相等</span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;month_abbr[i].<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ds[j]!=month_abbr[i][j]) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==month_abbr[i].<span class="built_in">size</span>())<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">12</span>) <span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="string">&quot;不是合法月份名&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ds[j]==<span class="string">&#x27; &#x27;</span>)&#123;   <span class="comment">// 空白符，仅是月份简写</span></span><br><span class="line">        end_of_month = j+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(; j&lt;month_name[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">        <span class="keyword">if</span>(ds[j]!=month_name[i][j]) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(j==month_name[i].<span class="built_in">size</span>() &amp;&amp; ds[j]==<span class="string">&#x27; &#x27;</span>)&#123;  <span class="comment">//月份全称</span></span><br><span class="line">        end_of_month = j+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="string">&quot;不是合法月份名&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get_day</span><span class="params">(string&amp; ds, <span class="type">int</span> month, <span class="type">int</span>&amp; p)</span></span>&#123;</span><br><span class="line">    <span class="type">size_t</span> q;</span><br><span class="line">    <span class="type">int</span> day = <span class="built_in">stoi</span>(ds.<span class="built_in">substr</span>(p), &amp;q); <span class="comment">//从p开始的部分转换为日期值</span></span><br><span class="line">    <span class="keyword">if</span>(day&lt;<span class="number">1</span> || day&gt;days[month])</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="string">&quot;不是合法日期值&quot;</span>);</span><br><span class="line">    p += q;</span><br><span class="line">    <span class="keyword">return</span> day;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get_year</span><span class="params">(string&amp; ds, <span class="type">int</span>&amp; p)</span></span>&#123;</span><br><span class="line">    <span class="type">size_t</span> q;</span><br><span class="line">    <span class="type">int</span> year = <span class="built_in">stoi</span>(ds.<span class="built_in">substr</span>(p), &amp;q); <span class="comment">//从p开始的部分转为年</span></span><br><span class="line">    <span class="keyword">if</span>(p+q&lt;ds.<span class="built_in">size</span>())</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="string">&quot;非法结尾内容&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> year;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">date::<span class="built_in">date</span>(string&amp; ds)&#123;</span><br><span class="line">    <span class="type">int</span> p;</span><br><span class="line">    <span class="type">size_t</span> q;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>((p=ds.<span class="built_in">find_first_of</span>(<span class="string">&quot;0123456789&quot;</span>))==string::npos)</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="string">&quot;没有数字，非法日期&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(p&gt;<span class="number">0</span>)&#123;                     <span class="comment">// 月份名格式</span></span><br><span class="line">        month = <span class="built_in">get_month</span>(ds, p);</span><br><span class="line">        day = <span class="built_in">get_day</span>(ds, month, p);</span><br><span class="line">        <span class="keyword">if</span>(ds[p]!=<span class="string">&#x27; &#x27;</span> &amp;&amp; ds[p]!=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="string">&quot;非法间隔符&quot;</span>);</span><br><span class="line">        p++;</span><br><span class="line">        year = <span class="built_in">get_year</span>(ds, p);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;                      <span class="comment">// 月份值格式</span></span><br><span class="line">        month = <span class="built_in">stoi</span>(ds, &amp;q);</span><br><span class="line">        p = q;</span><br><span class="line">        <span class="keyword">if</span>(month&lt;<span class="number">1</span> || month&gt;<span class="number">12</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="string">&quot;不是合法月份值&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(ds[p++]!=<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="string">&quot;非法间隔符&quot;</span>);</span><br><span class="line">        day = <span class="built_in">get_day</span>(ds, month, p);</span><br><span class="line">        <span class="keyword">if</span>(ds[p++]!=<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="string">&quot;非法间隔符&quot;</span>);</span><br><span class="line">        year = <span class="built_in">get_year</span>(ds, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="type">const</span> date&amp; d)&#123;</span><br><span class="line">    out &lt;&lt; d.<span class="built_in">y</span>() &lt;&lt; <span class="string">&quot;年&quot;</span> &lt;&lt; d.<span class="built_in">m</span>() &lt;&lt; <span class="string">&quot;月&quot;</span> &lt;&lt; d.<span class="built_in">d</span>() &lt;&lt; <span class="string">&quot;日&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// DATE_H_INCLUDED</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 9_51main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;9_51head.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string dates[] = &#123;<span class="string">&quot;Jan 1,2014&quot;</span>, <span class="string">&quot;February 1 2014&quot;</span>, <span class="string">&quot;3/1/2014&quot;</span>,</span><br><span class="line">                    <span class="comment">//&quot;Jcn 1,2014&quot;,</span></span><br><span class="line">                    <span class="comment">//&quot;Janvary 1,2014&quot;,</span></span><br><span class="line">                    <span class="comment">//&quot;Jan 32,2014&quot;,</span></span><br><span class="line">                    <span class="comment">//&quot;Jan 1/2014&quot;,</span></span><br><span class="line">                      <span class="string">&quot;3 1 2014&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> ds : dates)&#123;</span><br><span class="line">            <span class="function">date <span class="title">d1</span><span class="params">(ds)</span></span>;</span><br><span class="line">            cout &lt;&lt; d1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">catch</span>(invalid_argument e)&#123;</span><br><span class="line">        cout &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2014年1月1日</span><br><span class="line">2014年2月1日</span><br><span class="line">2014年3月1日</span><br><span class="line">非法间隔符</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意这个案例代码的格式是严格按照题目要求的，稍有不符就判错了。</p><h2 id="容器适配器"><a href="#容器适配器" class="headerlink" title="容器适配器"></a>容器适配器</h2><p>三个顺序容器适配器：<code>stack</code>、<code>queue</code>和<code>priority_queue</code>。</p><p>一个适配器是一种机制，能使得某事物的行为看起来像另一种事物一样。</p><ul><li>例如，<code>stack</code>适配器接受一个顺序容器（<code>array</code>和<code>forward_list</code>除外），并使其操作起来像一个<code>stack</code>一样。</li></ul><p><strong>所有的适配器都要求容器具有添加、删除及方便访问尾元素的能力。</strong></p><p><img src="https://s2.loli.net/2023/06/22/I7gAqmxcMH9tLp2.png" alt="17-50.png" title="所有容器适配器都支持的操作和类型"></p><p>定义一个适配器。该部分内容较晦涩且实际用途不明（至少在我看来是绕了一个大圈实现了某种功能？），具体参阅第五版《C++ primer 中文版》第 329 页。</p><p>默认情况下，<code>stack</code>和<code>queue</code>是基于<code>deque</code>实现的，<code>priority_queue</code>是在<code>vector</code>之上实现的。我们可以创建适配器时，通过第二个参数来指定容器类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; intStack;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/22/Bc2CWHSGt6yMZum.png" alt="17-51.png" title="栈的操作"></p><p><img src="https://s2.loli.net/2023/06/22/O5gUBywDh79f6Wo.png" alt="17-52.png" title="queue 和 priority_queue"></p><p>注意：上图中，<code>q.pop()</code>注释写错了。应该为：“删除首元素 … 不返回此元素”。</p><h2 id="泛型算法概述"><a href="#泛型算法概述" class="headerlink" title="泛型算法概述"></a>泛型算法概述</h2><p>顺序容器只定义了很少的操作：在多数情况下，我们可以添加和删除元素、访问首尾元素、确定容器是否为空以及获得指向首元素或尾元素之后位置的迭代器。</p><p>我们可以想象用户可能还希望做其他很多有用的操作：查找特定元素、替换或删除一个特定值、重排元素顺序等。</p><p>标准库并未给每个容器都定义成员函数来实现这些操作，而是定义了一组<strong>泛型算法（generic algorithm）</strong>：称它们为“算法”，是因为它们实现了一些经典算法的公共接口，如排序和搜索；称它们是“泛型的”，是因为它们可以用于不同类型的元素和多种容器类型（不仅包括标准库类型，如 vector 或 list，还包括内置的数组类型），以及我们将看到的，还能用于其他类型的序列。</p><p>大多数算法都定义在头文件<code>algorithm</code>中。标准库还在头文件<code>numeric</code>中定义了一组数值泛型算法。</p><p>一般情况下，这些算法并不直接操作容器，而是遍历由两个迭代器指定的一个元素范围来进行操作。</p><p>例如，我们有一个 int 的 vector ：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> val = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">auto</span> result = <span class="built_in">find</span>(vec.<span class="built_in">cbegin</span>(), vec.<span class="built_in">cend</span>(), val);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;The value&quot;</span> &lt;&lt; val</span><br><span class="line">     &lt;&lt; (result == vec.<span class="built_in">cend</span>() ? <span class="string">&quot; is not present&quot;</span> : <span class="string">&quot; is present&quot;</span>) &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>例如，一个 string 的 list ：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string val = <span class="string">&quot;a value&quot;</span>;</span><br><span class="line"><span class="keyword">auto</span> result = <span class="built_in">find</span>(lst.<span class="built_in">cbegin</span>(), lst.<span class="built_in">cend</span>(), val);</span><br></pre></td></tr></table></figure><p>类似的，由于指针就像内置数组上的迭代器一样，我们可以用 find 在数组中查找值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ia[] = &#123;<span class="number">27</span>, <span class="number">210</span>, <span class="number">12</span>, <span class="number">47</span>, <span class="number">109</span>, <span class="number">83</span>&#125;;</span><br><span class="line"><span class="type">int</span> val = <span class="number">83</span>;</span><br><span class="line"><span class="type">int</span>* result = <span class="built_in">find</span>(<span class="built_in">begin</span>(ia), <span class="built_in">end</span>(ia), val);</span><br></pre></td></tr></table></figure><p>上例中使用了标准库的<code>begin</code>和<code>end</code>函数，来获得指向 ia 中首元素和尾元素之后位置的指针，并传递给 find .</p><p>还可以在序列的子范围中查找。例如，在<code>ia[1]</code>、<code>ia[2]</code>、<code>ia[3]</code>中查找给定元素：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> result = <span class="built_in">find</span>(ia+<span class="number">1</span>, ia+<span class="number">4</span>, val);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/06/26/64999b2e06053.png" alt="17-53.png"></p><p><strong>迭代器令算法不依赖于容器，但算法依赖于元素类型的操作。</strong></p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p><img src="https://bu.dusays.com/2024/01/01/65929de7312da.png" alt="17-53dot5.png"></p><p><a href="https://www.bilibili.com/video/BV1z64y1U7hs?p=52">https://www.bilibili.com/video/BV1z64y1U7hs?p=52</a></p><h2 id="OOP-概述"><a href="#OOP-概述" class="headerlink" title="OOP 概述"></a>OOP 概述</h2><p>面向对象程序设计（object-oriented programming）的核心思想：</p><ul><li>数据抽象：接口与实现分离</li><li>继承：定义相似的类，并对其相似关系建模</li><li>动态绑定：在一定程度上忽略相似类的区别，以统一的方式使用它们</li></ul><p>通过继承（inheritance），联系在一起的类构成一种层次关系</p><ul><li>基类（base class）：定义共同拥有的成员</li><li>派生类（derived class）：定义特有的成员</li><li>虚函数（virtual function）：基类希望派生类各自定义自己合适的版本</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Quote</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span> n)</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//派生类必须通过使用类派生列表明确指出基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bulk_quote</span> : <span class="keyword">public</span> Quote&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span>)</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//因为 Bulk_quote 在它的类派生列表中使用了 public 关键字，因此</span></span><br><span class="line"><span class="comment">//我们完全可以把 Bulk_quote 对象当成 Quote 对象来使用。</span></span><br></pre></td></tr></table></figure><p>如果基类把一个函数声明成虚函数，则该函数在派生类中<strong>隐式地</strong>也是虚函数。</p><p>动态绑定（dynamic binding），我们能用同一段代码分别处理派生类和基类。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">print_total</span><span class="params">(ostream&amp; os, <span class="type">const</span> Quote&amp; item, <span class="type">size_t</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">//根据传入item形参的对象类型调用 Quote::net_prize 或 Bulk_quote::net_price</span></span><br><span class="line">    <span class="type">double</span> ret = item.<span class="built_in">net_price</span>(n);</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;ISBN: &quot;</span> &lt;&lt; item.<span class="built_in">isbn</span>()</span><br><span class="line">       &lt;&lt; <span class="string">&quot;#sold: &quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;total due: &quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//basic的类型是Quote, bulk的类型是Bulk_quote</span></span><br><span class="line"><span class="built_in">print_total</span>(cout, basic, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">print_total</span>(cout, bulk, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>使用基类的引用（或指针）调用一个虚函数时，将发生动态绑定（也叫运行时绑定：run-time binding）。</p><h2 id="定义基类和派生类"><a href="#定义基类和派生类" class="headerlink" title="定义基类和派生类"></a>定义基类和派生类</h2><p><code>protected</code>访问运算符：基类希望它的派生类有权访问该成员，同时禁止其他用户访问。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Quote</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Quote</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Quote</span>(<span class="type">const</span> std::string&amp; book, <span class="type">double</span> sales_price):</span><br><span class="line">        <span class="built_in">bookNo</span>(book), <span class="built_in">price</span>(sales_price)&#123;&#125;</span><br><span class="line">    <span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span></span>&#123;<span class="keyword">return</span> bookNo;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span> n)</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n*price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Quote</span>() = <span class="keyword">default</span>; <span class="comment">//对析构函数进行动态绑定</span></span><br><span class="line">    <span class="comment">//基类通常都应该定义一个虚析构函数，即使</span></span><br><span class="line">    <span class="comment">//该函数不执行任何实际操作也是如此。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string bookNo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>: <span class="comment">//派生类需要访问的基类（受保护的）成员</span></span><br><span class="line">    <span class="type">double</span> price = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bulk_quote</span> : <span class="keyword">public</span> Quote&#123; <span class="comment">//Bulk_quote 继承自 Quote</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Bulk_quote</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Bulk_quote</span>(<span class="type">const</span> std::string&amp;, <span class="type">double</span>, std::<span class="type">size_t</span>, <span class="type">double</span>);</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span>)</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::<span class="type">size_t</span> min_qty = <span class="number">0</span>; <span class="comment">//适用折扣政策的最低购买量</span></span><br><span class="line">    <span class="type">double</span> discout = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//派生类经常（但不总是）覆盖它继承的虚函数</span></span><br></pre></td></tr></table></figure><p><code>protected</code>访问说明符的作用是控制派生类从基类继承来的成员是否对派生类的用户可见。</p><p>如果一个派生是公有的，则基类的公有成员也是派生类接口的组成部分。同时，在需要基类的引用或指针的地方，都可以使用派生类的对象。</p><p><img src="https://bu.dusays.com/2023/07/31/64c7273f1719d.png" alt="17-54.png" title="17-54.png “小队长大队长”"></p><p>派生类必须使用基类的构造函数来初始化继承来的成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Bulk_quote</span>(<span class="type">const</span> std::string&amp; book, <span class="type">double</span> p, std::<span class="type">size_t</span> qty, <span class="type">double</span> disc):</span><br><span class="line">           <span class="built_in">Quote</span>(book, p), <span class="built_in">min_qty</span>(qty), <span class="built_in">discount</span>(disc)&#123;&#125;</span><br></pre></td></tr></table></figure><p>重写<code>net_price()</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">Bulk_quote::net_price</span><span class="params">(<span class="type">size_t</span> cnt)</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;=min_qty)</span><br><span class="line">        <span class="keyword">return</span> cnt*(<span class="number">1</span>-discount)*price;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> cnt*price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承与静态成员：</p><p>如果基类定义了一个静态成员，则在整个继承体系中只存在该成员的唯一定义。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">statmem</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">const</span> Derived&amp;)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Derived::f</span><span class="params">(<span class="type">const</span> Derived&amp; derived_obj)</span></span>&#123;</span><br><span class="line">    Base::<span class="built_in">statmem</span>();             <span class="comment">//ok</span></span><br><span class="line">    Derived::<span class="built_in">statmem</span>();          <span class="comment">//ok</span></span><br><span class="line">    derived_obj.<span class="built_in">statmem</span>();       <span class="comment">//ok</span></span><br><span class="line">    <span class="built_in">statmem</span>();  <span class="comment">//通过this对象访问，ok</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>派生类的声明：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bulk_quote</span> : <span class="keyword">public</span> Quote;  <span class="comment">//错误！</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bulk_quote</span>;                 <span class="comment">//正确</span></span><br></pre></td></tr></table></figure><p>如果要将某个类用作基类，则该类必须已经定义。</p><p>一个类是基类，同时也可以是一个派生类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;<span class="comment">/*...*/</span>&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D1</span> : <span class="keyword">public</span> Base&#123;<span class="comment">/*...*/</span>&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D2</span> : <span class="keyword">public</span> D1&#123;<span class="comment">/*...*/</span>&#125;;</span><br></pre></td></tr></table></figure><p>防止继承发生：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NoDerived</span> <span class="keyword">final</span>&#123;<span class="comment">/*...*/</span>&#125;; <span class="comment">//不能作为基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;<span class="comment">/*...*/</span>&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Last</span> <span class="keyword">final</span> : Base&#123;<span class="comment">/*...*/</span>&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bad</span> : NoDerived&#123;<span class="comment">/*...*/</span>&#125;;  <span class="comment">//错误！</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bad2</span> : Last&#123;<span class="comment">/*...*/</span>&#125;;      <span class="comment">//错误！</span></span><br></pre></td></tr></table></figure><p>使用基类的引用（或指针）时，实际上编译器并不清楚所绑定对象的真实类型。</p><ul><li>静态类型（static type）：编译时已知</li><li>动态类型（dynamic type）：运行时才可知</li></ul><p>不存在从基类向派生类的隐式类型转换：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Quote base;</span><br><span class="line">Bulk_quote* bulkP = &amp;base;  <span class="comment">//错误</span></span><br><span class="line">Bulk_quote&amp; bulkRef = base; <span class="comment">//错误</span></span><br><span class="line"></span><br><span class="line">Bulk_quote bulk;</span><br><span class="line">Quote* itemP = &amp;bulk;  <span class="comment">//正确</span></span><br><span class="line">Bulk_quote* bulkP = itemP;  <span class="comment">/*错误：编译器只能通过检验静态类型来推断</span></span><br><span class="line"><span class="comment">               但这里可以通过 dynamic_cast 或 static_cast 进行转换*/</span></span><br></pre></td></tr></table></figure><p>在对象间不存在类型转换：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Bulk_quote bulk;   <span class="comment">//派生类对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//派生类特有的部分会被切掉（sliced down）：</span></span><br><span class="line"><span class="function">Quote <span class="title">item</span><span class="params">(bulk)</span></span>;  <span class="comment">//使用 Quote::Quote(const Quote&amp;) 构造函数</span></span><br><span class="line">item = bulk;       <span class="comment">//使用 Quote::operator = (const Quote&amp;)</span></span><br></pre></td></tr></table></figure><p>【练习15.10】 回忆在 8.1 节中的讨论，解释第 284 页中将<code>ifstream</code>传递给<code>Sales_data</code>的<code>read</code>函数的程序是如何工作的。</p><p>【答】 在要求使用基类型对象的地方，可以使用派生类型的对象来代替，是静态类型和动态类型不同的典型例子。</p><h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><p>对虚函数的调用可能在运行时才被解析：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Quote <span class="title">base</span><span class="params">(<span class="string">&quot;0-201-1&quot;</span>, <span class="number">50</span>)</span></span>;</span><br><span class="line"><span class="built_in">print_total</span>(cout, base, <span class="number">10</span>);</span><br><span class="line"><span class="function">Bulk_quote <span class="title">derived</span><span class="params">(<span class="string">&quot;0-201-1&quot;</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">.19</span>)</span></span>;</span><br><span class="line"><span class="built_in">print_total</span>(cout, derived, <span class="number">10</span>);</span><br><span class="line"><span class="comment">//--------- 对 比 ------------</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 动态绑定只有在通过指针或引用调用虚函数时才会发生</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">base = derived; <span class="comment">//把 derived 的 Quote 部分拷贝给 base</span></span><br><span class="line">base.<span class="built_in">net_price</span>(<span class="number">20</span>);  <span class="comment">//调用 Quote::net_price()</span></span><br></pre></td></tr></table></figure><p>基类中的虚函数在派生类中隐式地也是一个虚函数。该函数在基类中的形参必须与派生类中的形参严格匹配。</p><p><code>final</code>和<code>override</code>说明符：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f1</span><span class="params">(<span class="type">int</span>)</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f3</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">D1</span> : B&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f1</span><span class="params">(<span class="type">int</span>)</span> <span class="type">const</span> <span class="keyword">override</span></span>;   <span class="comment">//ok</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f2</span><span class="params">(<span class="type">int</span>)</span> <span class="keyword">override</span></span>;         <span class="comment">//错误！</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f3</span><span class="params">()</span> <span class="keyword">override</span></span>;            <span class="comment">//错误！</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f4</span><span class="params">()</span> <span class="keyword">override</span></span>;            <span class="comment">//错误！</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">D2</span> : B&#123;</span><br><span class="line">    <span class="comment">//从 B 继承 f2() 和 f3() ，覆盖 f1(int)</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f1</span><span class="params">(<span class="type">int</span>)</span> <span class="type">const</span> <span class="keyword">final</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">D3</span> : D2&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f2</span><span class="params">()</span></span>;  <span class="comment">//ok</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f1</span><span class="params">(<span class="type">int</span>)</span> <span class="type">const</span></span>;  <span class="comment">//错误！在 D2 中已经声明为 final</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>如果虚函数使用默认实参，基类和派生类中定义的默认实参最好一致。</strong></p><p>回避虚函数的机制：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//强制调用基类中定义的函数版本而不管 baseP 的动态类型到底是什么</span></span><br><span class="line"><span class="type">double</span> undiscounted = baseP-&gt;Quote::<span class="built_in">net_price</span>(<span class="number">42</span>);</span><br><span class="line"><span class="comment">//该调用将在编译时完成解析</span></span><br></pre></td></tr></table></figure><blockquote><p>什么时候我们需要回避虚函数的默认机制呢？通常是当一个派生类的虚函数调用它覆盖的基类的虚函数版本时。在此情况下，基类的版本通常完成继承层次中所有类型都要做的共同任务，而派生类中定义的版本需要执行一些与派生类本身密切相关的操作。<br>如果一个派生类虚函数需要调用它的基类版本，但是没有使用作用域运算符，则在运行时该调用将被解析为对派生类版本自身的调用，从而导致无限递归。</p></blockquote><p>【练习15.11】 为你的<code>Quote</code>类体系添加一个名为<code>debug</code>的虚函数，令其分别显示每个类的数据成员。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//虚函数的构造练习</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Quote</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">debug</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;bookNo=&quot;</span> &lt;&lt; bookNo &lt;&lt; <span class="string">&quot; price=&quot;</span> &lt;&lt; price &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bulk_quote</span> : <span class="keyword">public</span> Quote&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">debug</span><span class="params">()</span></span>&#123;  <span class="comment">// void debug() override&#123;&#125; ？</span></span><br><span class="line">        Quote::<span class="built_in">debug</span>(); <span class="comment">//bookNo 变量为 private, 所以不能直接访问 bookNo</span></span><br><span class="line">                        <span class="comment">//只能调用基类的 debug() 函数来显示</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;min_qty=&quot;</span> &lt;&lt; min_qty &lt;&lt; <span class="string">&quot; discount=&quot;</span> &lt;&lt; discount &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h2><p>需求：现在我们需要支持多种不同的折扣策略。共同点是每个折扣策略都需要一个购买量值和折扣值。</p><p>分析：我们可以定义一个<code>Disc_quote</code>类来支持不同的折扣策略，其中<code>Disc_quote</code>负责保存购买量值和折扣值。但是，<code>Disc_quote</code>类中的<code>net_price()</code>函数是没有实际含义的，为了防止用户编写出无意义的代码（具体查阅第五版《C++ primer（中文版）》第 540 页），我们必须重新考虑。<strong>我们根本就不希望用户创建<code>Disc_quote</code>对象，<code>Disc_quote</code>类表示的是一本打折书籍的通用概念，而非某种具体的折扣策略。</strong></p><p>做法：将<code>net_price()</code>定义为<strong>纯虚（pure virtual）</strong>函数。一个纯虚函数无须定义，在声明语句的分号之前书写<code>=0</code>就可以将一个虚函数说明为纯虚函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于保存折扣值和购买量的类，派生类使用这些数据可以实现不同的折扣策略</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Disc_quote</span> : <span class="keyword">public</span> Quote&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Disc_quote</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Disc_quote</span>(<span class="type">const</span> std::string&amp; book, <span class="type">double</span> price,</span><br><span class="line">               std::<span class="type">size_t</span> qty, <span class="type">double</span> disc):</span><br><span class="line">               <span class="built_in">Quote</span>(book, price), <span class="built_in">quantity</span>(qty), <span class="built_in">discount</span>(disc)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span>)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    std::<span class="type">size_t</span> quantity = <span class="number">0</span>; <span class="comment">//折扣适用的购买量</span></span><br><span class="line">    <span class="type">double</span> discount = <span class="number">0.0</span>;    <span class="comment">//表示折扣的小数值</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>可以为纯虚函数提供定义，但必须定义在类的外部。</strong></p><p>含有（或未经覆盖直接继承）纯虚函数的类是抽象基类。不能创建抽象基类的对象。</p><p>派生类构造函数只初始化它的直接基类（而不是最顶层的那个）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bulk_quote</span> : <span class="keyword">public</span> Disc_quote&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Bulk_quote</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Bulk_quote</span>(<span class="type">const</span> std::string&amp; book, <span class="type">double</span> price,</span><br><span class="line">               std::<span class="type">size_t</span> qty, <span class="type">double</span> disc):</span><br><span class="line">               <span class="built_in">Disc_quote</span>(book, price, qty, disc)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span>)</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="访问控制与继承"><a href="#访问控制与继承" class="headerlink" title="访问控制与继承"></a>访问控制与继承</h2><p><code>protected</code>说明符：</p><ul><li>和私有成员类似，受保护的成员对<strong>类的用户</strong>不可访问</li><li>和公有成员类似，受保护的成员对<strong>派生类的成员和友元</strong>可访问</li><li>派生类的成员或友元只能通过派生类对象来访问基类的受保护成员。<strong>派生类对于一个基类对象中的受保护成员没有任何访问特权。</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> prot_mem;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sneaky</span> : <span class="keyword">public</span> Base&#123;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">clobber</span><span class="params">(Sneaky&amp;)</span></span>;  <span class="comment">//能访问 Sneaky::prot_mem</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">clobber</span><span class="params">(Base&amp;)</span></span>;    <span class="comment">//不能访问 Base::prot_mem</span></span><br><span class="line">    <span class="type">int</span> j;                         <span class="comment">// j 默认是 private</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clobber</span><span class="params">(Sneaky&amp; s)</span></span>&#123;s.j = s.prot_mem = <span class="number">0</span>;&#125;  <span class="comment">//正确</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clobber</span><span class="params">(Base&amp; b)</span></span>&#123;b.prot_mem = <span class="number">0</span>;&#125;          <span class="comment">//错误！</span></span><br></pre></td></tr></table></figure><p>某个类对其继承来的成员的访问权限受到两个因素的影响：</p><ul><li>在基类中该成员的访问说明符</li><li>在派生类的派生列表中的访问说明符</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pub_mem</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> prot_mem;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> priv_mem;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pub_Derv</span> : <span class="keyword">public</span> Base&#123;</span><br><span class="line">    <span class="comment">//这个类里有两个成员：pub_mem()函数，public的；prot_mem数据成员，protected的</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> prot_mem;&#125;   <span class="comment">//正确。派生类能访问 protected 成员</span></span><br><span class="line">    <span class="function"><span class="type">char</span> <span class="title">g</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> priv_mem;&#125;  <span class="comment">//错误！private 成员对于派生类不可访问</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Priv_Derv</span> : <span class="keyword">private</span> Base&#123;</span><br><span class="line">    <span class="comment">//这个类里有两个成员：pub_mem()函数、prot_mem数据成员。这两个权限都是private</span></span><br><span class="line">    <span class="comment">// private 不影响派生类的访问权限，只是影响对象的访问权限</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">f1</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> prot_mem;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Pub_Derv d1;</span><br><span class="line">Priv_Derv d2;</span><br><span class="line">d1.<span class="built_in">pub_mem</span>(); <span class="comment">//正确</span></span><br><span class="line">d2.<span class="built_in">pub_mem</span>(); <span class="comment">//错误！pub_mem()在派生类Priv_Derv中是private的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//派生访问说明符还可以控制继承自派生类的新类的访问权限</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Derived_from_Public</span> : <span class="keyword">public</span> Pub_Derv&#123;</span><br><span class="line">    <span class="comment">//两个成员：一个public，一个protected</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">use_base</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> prot_mem;&#125; <span class="comment">//正确</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Derived_from_Private</span> : <span class="keyword">public</span> Priv_Derv&#123;</span><br><span class="line">    <span class="comment">//一个都没有了</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">use_base</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> prot_mem;&#125; <span class="comment">//错误！</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>严格来说，<code>private</code>成员可以继承，但只能通过内存地址等非常规方式进行访问。</strong> 下面举例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://blog.csdn.net/k346k346/article/details/49652209</span></span><br><span class="line"><span class="comment">/*如果基类中并没有提供访问私有成员的公有函数，那么其私有成员是否</span></span><br><span class="line"><span class="comment">“存在”呢？还会不会被继承呢？其实，这些私有成员的确是存在的，而且</span></span><br><span class="line"><span class="comment">会被继承，只不过程序员无法通过正常的渠道访问到它们。考察如下程序，</span></span><br><span class="line"><span class="comment">通过一种特殊的方式访问了类的私有成员。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">privateFunc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;this is a private function of base class&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>()&#123;i=<span class="number">5</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:<span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printBaseI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span>* p=<span class="built_in">reinterpret_cast</span>&lt;<span class="type">int</span>*&gt;(<span class="keyword">this</span>);<span class="comment">//获取当前对象的首地址</span></span><br><span class="line">        cout&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">usePrivateFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">void</span> (*func)()=<span class="literal">NULL</span>;</span><br><span class="line">        _asm</span><br><span class="line">        &#123;</span><br><span class="line">            mov eax,A::privateFunc;</span><br><span class="line">            mov func,eax;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">func</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    B b;</span><br><span class="line">    b.<span class="built_in">printBaseI</span>();</span><br><span class="line">    b.<span class="built_in">usePrivateFunction</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=========== 程序输出结果 ==============//</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">this is a private function of base class</span></span><br><span class="line"><span class="comment">//======================================*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-------------------------- 解释 -----------------------------//</span></span><br><span class="line"><span class="comment">（1）虽然类 A 没有提供访问私有成员变量 i 的公有方法，但是</span></span><br><span class="line"><span class="comment">     在类 A（以及类 A 的派生类）对象中，都包含变量 i。</span></span><br><span class="line"><span class="comment">（2）虽然类 A 并没有提供访问私有成员函数 privateFunc() </span></span><br><span class="line"><span class="comment">     的公有函数，但是在程序代码区依然存有函数 privateFunc() </span></span><br><span class="line"><span class="comment">     的代码，通过内联汇编获取该函数的入口地址，仍然可以顺利调用。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">综上所述，类的私有成员一定存在，也一定被继承到派生类中，从大小也可</span></span><br><span class="line"><span class="comment">以看出派生类包含了基类的私有成员，读者可自行考证。只不过受到 C++ </span></span><br><span class="line"><span class="comment">语法的限制，在派生类中访问基类的私有成员只能通过间接的方式进行。</span></span><br><span class="line"><span class="comment">————————————————</span></span><br><span class="line"><span class="comment">版权声明：本文为CSDN博主「恋喵大鲤鱼」的原创文章，遵循CC 4.0 BY-SA</span></span><br><span class="line"><span class="comment">         版权协议，转载请附上原文出处链接及本声明。</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------*/</span></span><br></pre></td></tr></table></figure><p>另外补充：书中的某些表述比较模糊，下面给出一个例子进一步说明某个情况：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只有在派生类中才可以通过派生类对象访问基类的protected成员。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(Derived d)</span></span>&#123;</span><br><span class="line">        d.i = <span class="number">3</span>;<span class="comment">//只有在派生类中才可以通过派生类对象访问基类的protected成员。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Derived derived;</span><br><span class="line"><span class="comment">//    derived.i = 3;//只有在派生类中才可以通过派生类对象访问基类的protected成员。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>友元关系不能继承：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">    <span class="comment">//其他成员与之前版本一致</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Pal</span>;  <span class="comment">// Pal 在访问 Base 的派生类时不具有特殊性</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pal</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(Base b)</span> </span>&#123;<span class="keyword">return</span> b.prot_mem;&#125;     <span class="comment">//正确</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">f2</span><span class="params">(Sneaky s)</span> </span>&#123;<span class="keyword">return</span> s.j;&#125;         <span class="comment">//错误！</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">f3</span><span class="params">(Sneaky s)</span> </span>&#123;<span class="keyword">return</span> s.prot_mem;&#125;  <span class="comment">//正确，虽然看上去有点奇怪</span></span><br><span class="line"><span class="comment">//Pal能够访问Base的成员，这种访问包括了Base对象内嵌在其派生类对象中的情况</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D2</span> : <span class="keyword">public</span> Pal&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mem</span><span class="params">(Base b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b.prot_mem; <span class="comment">//错误！友元关系不能继承</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过使用<code>using</code>改变个别成员的可访问性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::<span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> n;&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    std::<span class="type">size_t</span> n;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">private</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> Base::size;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">using</span> Base::n;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//派生类只能为那些它可以访问的名字提供 using 声明</span></span><br></pre></td></tr></table></figure><p>默认的继承保护级别：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;<span class="comment">/*===*/</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">D1</span> : Base &#123;<span class="comment">/*---*/</span>&#125;;  <span class="comment">//默认 public 继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D2</span> : Base &#123;<span class="comment">/*---*/</span>&#125;;   <span class="comment">//默认 private 继承</span></span><br></pre></td></tr></table></figure><h2 id="未完待续-1"><a href="#未完待续-1" class="headerlink" title="未完待续"></a>未完待续</h2><p>两个未完待续之间的内容并未学习。</p><p><img src="https://bu.dusays.com/2024/01/01/65929de79bf47.png" alt="17-55.png"></p><p><a href="https://www.bilibili.com/video/BV1z64y1U7hs?p=79">https://www.bilibili.com/video/BV1z64y1U7hs?p=79</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几何角度下的一个公式</title>
      <link href="/posts/12839668.html"/>
      <url>/posts/12839668.html</url>
      
        <content type="html"><![CDATA[<p>公式在同济高数七版下册第182页。</p><script type="math/tex; mode=display">\frac{\mathrm{d}}{\mathrm{d}x}\int_{\alpha (x)}^{\beta (x)} f(x,y)\, \mathrm{d}y=\int_{\alpha (x)}^{\beta (x)} f_{x}^{'}(x,y)\, \mathrm{d}y+f[x,\beta (x)]\beta ^{'}(x)-f[x,\alpha (x)]\alpha ^{'}(x)</script><p>不详细推导，只作几何直观的展示。</p><p><strong>NOTICE：</strong> 以下推导中，高阶无穷小忽略没有写出，因为它会在除以$\Delta x$再取极限之后变为$0$.</p><p>先考虑 $\int_{\alpha (x)}^{\beta (x)} f(x,y)\, \mathrm{d}y$ 的几何直观。现在想象一个三维的曲面$z=f(x,y)$，它也许是这样的（随便画一个）：</p><p><img src="https://s2.loli.net/2022/11/10/2tlz85oCXny3qZQ.png" alt="matlabpic.png"></p><p>固定某个选定的$x$值，取曲面$z=f(x,y)$与平面$X=x$的截线：</p><p><img src="https://bu.dusays.com/2023/01/01/63b1960bb292e.png" alt="16-2.png"></p><p>当$x$固定时，$\int_{\alpha (x)}^{\beta (x)} f(x,y)\, \mathrm{d}y$ 是从$\alpha (x)$到$\beta (x)$对$y$的定积分，在上图中它表示红色曲边梯形的面积。</p><p>上图中，红色曲线在曲面$z=f(x,y)$中，清晰起见，曲面$z=f(x,y)$没有画出。$\alpha (x)$和$\beta (x)$是 $x$ 的函数。当$x$变化时，$\alpha (x)$和$\beta (x)$ 的值会相应变化，同时，曲边梯形的形状也会跟着变化。</p><p>$\frac{\mathrm{d}}{\mathrm{d}x}\int_{\alpha (x)}^{\beta (x)} f(x,y)\, \mathrm{d}y$ 即曲边梯形面积对$x$的变化率。为此，我们考察当$x$获得一个很小的增量$\Delta x$时，曲边梯形面积将如何变化。</p><p>先考虑简单情形: $\alpha (x)$和$\beta (x)$为常函数。在此之前，简单回顾一下微分的几何意义：</p><p><img src="https://bu.dusays.com/2023/01/01/63b1960cdbe03.png" alt="16-3.png"></p><p>由此得到启发，既然现在是三维的，我们把“在局部范围内用来近似替代非线性函数的<strong>线性函数</strong>（下图中的蓝色部分）”积起来，就是曲边梯形面积的增量了。</p><p><img src="https://bu.dusays.com/2023/03/06/640556c67dc1e.png" alt="16-4.png"></p><p>它就是$\Delta x \int_{\alpha (x)}^{\beta (x)} f_{x}^{‘}(x,y)\, \mathrm{d}y$ 。问题还没解决，刚刚只是 $\alpha (x)$和$\beta (x)$ 为常函数的情形，在其他情形中，还需要考虑边界处的增量。<strong>注意：</strong> 我们考虑的是曲边梯形面积的增量，而不是什么东西的体积的增量。</p><p><img src="https://bu.dusays.com/2023/01/01/63b1960c62aad.png" alt="16-5.png"></p><p>为区分起见，上图将小矩形挪了位置。宽为$\beta ^{‘}(x) \Delta x$，高可用$f[x,\beta (x)]$替代（连续性），因此小矩形的面积为 $f[x,\beta (x)]\beta ^{‘}(x) \Delta x$ 。同理在另一处也有一个小矩形，面积为 $f[x,\alpha (x)]\alpha ^{‘}(x) \Delta x$ ,它们都是我们关注的曲边梯形面积的增量的一部分。因为积分是从$\alpha$积到$\beta$（或者从N-L公式的角度理解），$f[x,\alpha (x)]\alpha ^{‘}(x) \Delta x$ 前面需要加负号，即 $-f[x,\alpha (x)]\alpha ^{‘}(x) \Delta x$ 。</p><p>将上述所有的增量（<strong>高阶无穷小忽略没有写出</strong>）加起来，两边同除$\Delta x$，再令$\Delta x \rightarrow 0$ ，得：</p><script type="math/tex; mode=display">\frac{\mathrm{d}}{\mathrm{d}x}\int_{\alpha (x)}^{\beta (x)} f(x,y)\, \mathrm{d}y=\int_{\alpha (x)}^{\beta (x)} f_{x}^{'}(x,y)\, \mathrm{d}y+f[x,\beta (x)]\beta ^{'}(x)-f[x,\alpha (x)]\alpha ^{'}(x)</script>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微观经济学笔记</title>
      <link href="/posts/bfc2f920.html"/>
      <url>/posts/bfc2f920.html</url>
      
        <content type="html"><![CDATA[<p>本文是视频 <a href="https://www.bilibili.com/video/BV1AT4y137Fp">微观经济学-中国农业大学</a> 的笔记。</p><p><img src="https://s2.loli.net/2022/11/07/iAHJGzdSeRKCumV.png" alt="Newbrush.png"></p><h2 id="经济与经济学"><a href="#经济与经济学" class="headerlink" title="经济与经济学"></a>经济与经济学</h2><p>为取得经济品的有代价的活动就是<strong>经济</strong>。</p><p><strong>经济学</strong>是研究人们如何利用<strong>稀缺资源</strong>来满足人们<strong>无限需求</strong>的一门社会科学。</p><ul><li>稀缺：相对稀缺</li><li>短缺：绝对</li><li>需求是无限的：生存（有）、享受（好）、发展（自我）</li></ul><p>经济学：解决资源的稀缺性和需求的无限性之间的矛盾。</p><h2 id="经济理论认知"><a href="#经济理论认知" class="headerlink" title="经济理论认知"></a>经济理论认知</h2><p>经济人假说：理性人、利益追求、个性追求</p><ul><li>消费者：满足最大化</li><li>生产者：利润最大化</li></ul><p>社会人：适应社会、</p><p>信息完备性假说：（。。。）</p><p>表达方法：表格法、图线法、文字描述法、数学函数法</p><p>生产可能曲线：在资源一定的情况下，所能够生产的两种商品的最大组合的运动轨迹。</p><h2 id="微观经济学的研究对象"><a href="#微观经济学的研究对象" class="headerlink" title="微观经济学的研究对象"></a>微观经济学的研究对象</h2><p>以价格为核心（价格学、资源稀缺性——价格）、以单个经济单位为研究对象（消费者，生产者）、单个经济单位的经济行为</p><p>说白了就是，解决资源的配置问题。</p><ul><li>生产什么</li><li>生产多少</li><li>为谁生产</li></ul><h2 id="怎样才能学好经济学"><a href="#怎样才能学好经济学" class="headerlink" title="怎样才能学好经济学"></a>怎样才能学好经济学</h2><p>两种研究方法：实证分析法、规范分析法</p><ul><li>实证经济学：就事论事（无价值判断）</li><li>规范经济学：就事论理（有价值判断）<ul><li>福利经济学</li><li>公共财政学</li><li>税收学</li><li>法律</li></ul></li></ul><h2 id="欲望与需求"><a href="#欲望与需求" class="headerlink" title="欲望与需求"></a>欲望与需求</h2><p>定义：需求是消费者在一定时期内，在一定价格水平上，<strong>愿意购买</strong>且<strong>能够购买</strong>的商品量。</p><ul><li>只满足一个，潜在需求</li><li>满足两个，有效需求<ul><li>有效需求=市场容量</li></ul></li></ul><h2 id="影响需求的因素"><a href="#影响需求的因素" class="headerlink" title="影响需求的因素"></a>影响需求的因素</h2><p>因素：</p><ul><li>商品本身的价格(P)</li><li>收入水平(I)<ul><li>第一类：I增Q增，正常品</li><li>第二类：I增Q减，低档品</li></ul></li><li>偏好<ul><li>引导方式：广告、宣传</li></ul></li><li>相关商品的价格<ul><li>$P_x$增，$Q_y$降$\rightarrow$互补品</li><li>$P_x$增，$Q_y$增$\rightarrow$替代品</li><li>$P_x$无论增减，$Q_y$不变$\rightarrow$独立品</li></ul></li><li>未来预期<ul><li>好：Q增加</li><li>差：Q减少</li></ul></li></ul><h2 id="需求规律及其表达"><a href="#需求规律及其表达" class="headerlink" title="需求规律及其表达"></a>需求规律及其表达</h2><p>需求规律：在其他条件不变的情况下，消费者对某种商品的需求量与商品本身的价格呈反向变化。</p><p>需求曲线以符号$D$标记。</p><p>$notice$：需求量是表示的是消费者在<strong>一定时间内</strong>的它的需求量。</p><h2 id="需求规律及其表达（2）"><a href="#需求规律及其表达（2）" class="headerlink" title="需求规律及其表达（2）"></a>需求规律及其表达（2）</h2><p>需求函数：$Q=f(p,p_x,a,c,…)$</p><ul><li>$p:$本身的价格</li><li>$p_x:$有关商品的价格</li><li>$a:$个人偏好</li><li>$c:$预期</li></ul><p>简化：$Q=f(p)$</p><ul><li>当其他条件不变时，$Q$只是$p$的函数</li></ul><p>$e.g.$<br>解释方程$Q=200-5P+2p_x$的含义</p><ul><li>解释：这种商品本身价格提高1单位，需求量减少5单位；$x$的价格提高一单位，需求量增加2单位。这里$x$是替代品。</li></ul><p>市场需求与个人需求：个人需求的加和等于市场。</p><h2 id="需求规律的例外"><a href="#需求规律的例外" class="headerlink" title="需求规律的例外"></a>需求规律的例外</h2><p>情况一：</p><p><img src="https://s2.loli.net/2022/11/07/jT9wQBqL6YlxFrM.png" alt="2dot4case1.png"></p><ul><li>例如：黄金、紧俏物资</li></ul><blockquote><p>无需广告</p></blockquote><p>情况二：</p><p><img src="https://s2.loli.net/2022/11/07/Bv6NX9O5esuwjCp.png" alt="2dot4pic2.png"></p><ul><li>例如：生活必需品(药品、食盐、收费厕所(国外居多；吐槽一下驾照考点外的扫码撒尿服务)、殡葬用品)</li></ul><blockquote><p>提价</p></blockquote><p>情况三：</p><p><img src="https://s2.loli.net/2022/11/07/F4Ul123ReSqTu7W.png" alt="2dot4pic3.png"></p><ul><li>买涨不买跌</li><li>高档消费品（奢侈品）、非生活必需品</li></ul><blockquote><p>定价宜高</p></blockquote><p>情况四：</p><p><img src="https://s2.loli.net/2022/11/07/H2WR4TFEvybg7nl.png" alt="2dot4pic4.png"></p><ul><li>金融产品</li></ul><h2 id="其他因素对需求的影响"><a href="#其他因素对需求的影响" class="headerlink" title="其他因素对需求的影响"></a>其他因素对需求的影响</h2><p>一、价格与需求</p><p><img src="https://s2.loli.net/2022/11/07/mHp8BWEK2cn7oJa.png" alt="2dot5pic1.png"></p><p>单纯由商品价格本身价格变化引起的需求量的变化，叫做<strong>需求量变动</strong>。</p><p>二、非价格因素对需求的影响</p><p>$I_1\rightarrow I_2$时，$Q_1\rightarrow Q_2\quad$  //需求变动</p><p><strong>需求变动</strong>：非价格因素变化所引起的需求量的变化。</p><p><img src="https://s2.loli.net/2022/11/07/QmqM4kz3XiePxKo.png" alt="2dot5pic2.png"></p><h2 id="产量与供给"><a href="#产量与供给" class="headerlink" title="产量与供给"></a>产量与供给</h2><p>定义：<strong>供给</strong>是生产者在一定时期内，一定的价格水平上，愿意而且能够提供的商品量。</p><ul><li>供给$\approx$出售愿望+产量<ul><li>如果只满足其中之一，称为<strong>潜在供给</strong>。</li><li>两个条件都满足，称为<strong>有效供给</strong>。</li><li>区分有效供给、潜在供给$\rightarrow$衡量生产者的实际收入</li></ul></li></ul><h2 id="影响供给的因素"><a href="#影响供给的因素" class="headerlink" title="影响供给的因素"></a>影响供给的因素</h2><ol><li>本身价格 $\quad P$增，$Q_s$增； $\quad P$减，$Q_s$减</li><li>生产成本 $\quad C$增，$Q_s$减； $\quad C$减，$Q_s$增</li><li>技术</li><li>相关商品的价格</li><li>生产者的目标<ul><li>利润最大化</li><li>总产量最大</li><li>平均产量最大</li></ul></li><li>未来预期<ul><li>好$\rightarrow Q_s$增</li><li>差$\rightarrow Q_s$减</li></ul></li></ol><h2 id="供给规律及其表达"><a href="#供给规律及其表达" class="headerlink" title="供给规律及其表达"></a>供给规律及其表达</h2><p>供给规律：在其他条件不变的情况下，某种商品的供给量与商品本身的价格呈同向变化。</p><p>供给曲线：</p><p><img src="https://s2.loli.net/2022/11/07/NhQTanfkAVOwgrY.png" alt="2dot8pic1.png"></p><p>供给函数：$Q_s=f(p,p_x,c,t,…)$</p><p>市场供给=个别供给的总和</p><h2 id="供给规律的例外"><a href="#供给规律的例外" class="headerlink" title="供给规律的例外"></a>供给规律的例外</h2><p>情况一</p><p><img src="https://s2.loli.net/2022/11/07/MJ1AGzIKPwBrfcU.png" alt="2dot9pic1.png"></p><p>例如：饮料类、某些公共产品（地铁、自来水、电力）</p><p>情况二：</p><p><img src="https://s2.loli.net/2022/11/07/M5jpqPnNb4Qz8f2.png" alt="2dot9pic2.png"></p><p>例如：土地、古玩古董</p><p>情况三：</p><p><img src="https://s2.loli.net/2022/11/07/fBnMm43HwDQuyP6.png" alt="2dot9pic3.png"></p><p>举例：流水线作业的、大规模生产的</p><p>情况四：</p><p><img src="https://s2.loli.net/2022/11/07/Tu62kwrYFRiyIsC.png" alt="2dot9pic4.png"></p><p>例如：劳动力（在上图中，$L$表示提供的劳动量，$W$表示工资）</p><h2 id="其他因素对供给的影响"><a href="#其他因素对供给的影响" class="headerlink" title="其他因素对供给的影响"></a>其他因素对供给的影响</h2><p>供给量变动：</p><p><img src="https://s2.loli.net/2022/11/07/DzSE3COImNWRqPB.png" alt="2dot10pic1.png"></p><p><strong>供给变动</strong>：非价格变化引起的</p><p><img src="https://s2.loli.net/2022/11/07/bCs91XAdRaf45BO.png" alt="2dot10pic2.png"></p><h2 id="市场均衡及其形成"><a href="#市场均衡及其形成" class="headerlink" title="市场均衡及其形成"></a>市场均衡及其形成</h2><p>均衡状态：供求力量对比的结果</p><p><img src="https://s2.loli.net/2022/11/07/x3W4tiELfYXqpAl.png" alt="2dot11pic1.png"></p><p>定义：当需求和供给相等的时候，这个状态叫均衡状态，此时的价格叫均衡价格$(P_e)$，此时的数量叫均衡数量$(Q_e)$。</p><p><img src="https://s2.loli.net/2022/11/07/K64ZGbCjOkhoVyl.png" alt="2dot11pic2.png"></p><h2 id="市场均衡的变动"><a href="#市场均衡的变动" class="headerlink" title="市场均衡的变动"></a>市场均衡的变动</h2><p>一、消费者与均衡的问题</p><p><img src="https://s2.loli.net/2022/11/07/6CeElVhcn234oRL.png" alt="2dot12pic1.png"></p><p>总结：单纯需求变动会引起均衡价格和均衡数量同向变化。</p><p>二、生产者与均衡的问题</p><p><img src="https://s2.loli.net/2022/11/07/cI6XOAqiyrN79Rm.png" alt="2dot12pic2.png"></p><p>供给变动：均衡价格反向变化；均衡数量同向变化。</p><p>三、消费者和生产者行为都在变引起的变化</p><p><img src="https://s2.loli.net/2022/11/07/5IcACwT18VavsKB.png" alt="2dot12pic3.png"></p><p>（其他情况的分析方法与之类似。。。）</p><h2 id="支持价格与限制价格"><a href="#支持价格与限制价格" class="headerlink" title="支持价格与限制价格"></a>支持价格与限制价格</h2><p>$notion:\quad$工农业产品的剪刀差</p><p><img src="https://s2.loli.net/2022/11/07/Ml4Uebq3Oj8iRZy.png" alt="2dot13pic1.png"></p><p>$definition:\quad$支持价格，政府制定的高于市场均衡价格的最低销售价格。</p><p><img src="https://s2.loli.net/2022/11/07/XzrUh1vwHIYeJKu.png" alt="2dot13pic2.png"></p><p>方法：政府收购多余商品。</p><p>$definition:\quad$限制价格，低于市场均衡价格的最高销售价。</p><p><img src="https://s2.loli.net/2022/11/07/R9OUoICN2JMWVaw.png" alt="2dot13pic3.png"></p><p>限制价格可能导致的市场现象：黑市、贿赂等。应对方法：凭票供应。</p><h2 id="政府税收"><a href="#政府税收" class="headerlink" title="政府税收"></a>政府税收</h2><p>$notion:$</p><ul><li>消费者剩余，消费者从市场里面的得益。</li><li>生产者剩余，生产者从市场里面的得益。</li></ul><p><img src="https://s2.loli.net/2022/11/07/ZwQgz1yhncE7eaU.png" alt="2dot14pic1.png"></p><p>国家收的税：$E_1A$</p><p><img src="https://s2.loli.net/2022/11/07/mSUniWtgT9yOd6B.png" alt="2dot14pic2.png"></p><p>设$A$点对应价格为$P_2$。$P_0P_1$=消费者税负，$P_0P_2$=生产者税负</p><p><img src="https://s2.loli.net/2022/11/07/VvE2XWZrs8zGdpF.png" alt="2dot14pic3.png"></p><h2 id="政府补贴"><a href="#政府补贴" class="headerlink" title="政府补贴"></a>政府补贴</h2><p><img src="https://s2.loli.net/2022/11/07/UarCBNcSWVXx7wD.png" alt="2dot15pic1.png"></p><p><img src="https://s2.loli.net/2022/11/07/a6E9yexc8uIjJpT.png" alt="2dot15pic2.png"></p><h2 id="需求价格弹性及其计算（1）"><a href="#需求价格弹性及其计算（1）" class="headerlink" title="需求价格弹性及其计算（1）"></a>需求价格弹性及其计算（1）</h2><p>一、弹性</p><script type="math/tex; mode=display">e=\frac{\frac{\Delta Y}{Y}}{\frac{\Delta X}{X}}</script><p>二、需求价格弹性</p><script type="math/tex; mode=display">e=\frac{\Delta Q/Q}{\Delta P/P}</script><p>$definition:\quad$价格变动$1\%$引起的需求量变动的百分比</p><p>$notice:\quad$在一个正常的需求曲线的计算中，为方便$(?)$起见，在公式中加一个负号，则$e$变为正。公式如下：</p><script type="math/tex; mode=display">e=-\frac{\Delta Q/Q}{\Delta P/P}</script><h2 id="需求价格弹性及其计算（2）"><a href="#需求价格弹性及其计算（2）" class="headerlink" title="需求价格弹性及其计算（2）"></a>需求价格弹性及其计算（2）</h2><p>一、点弹性</p><script type="math/tex; mode=display">e=-\frac{\Delta Q/Q}{\Delta P/P}=-\frac{\Delta Q}{\Delta P}\cdot \frac{P}{Q}=-\frac{\Delta Q}{\Delta P}\cdot \frac{P_1}{Q_1}</script><p>精确计算：</p><script type="math/tex; mode=display">e=-\lim_{\Delta P \to 0} \frac{\Delta Q}{\Delta P}\cdot \frac{P}{Q}=-\frac{P}{Q}\cdot \frac{\mathrm{d}Q}{\mathrm{d}P}</script><p>二、弧弹性</p><script type="math/tex; mode=display">e=-\frac{\Delta Q}{\Delta P}\cdot \frac{P}{Q}=-\frac{\Delta Q}{\Delta P}\cdot \frac{\frac{P_1+P_2}{2}}{\frac{Q_1+Q_2}{2}}</script><h2 id="需求价格弹性的类型"><a href="#需求价格弹性的类型" class="headerlink" title="需求价格弹性的类型"></a>需求价格弹性的类型</h2><p>情况一：</p><p><img src="https://s2.loli.net/2022/11/07/FbuEYWQJltmqLRd.png" alt="3dot2pic1.png"></p><p>情况二：</p><p><img src="https://s2.loli.net/2022/11/07/Cgq9eK6tQydPADN.png" alt="3dot2pic2.png"></p><p>情况三：</p><p><img src="https://s2.loli.net/2022/11/07/QYfIE8WDvN5xzap.png" alt="3dot2pic3.png"></p><p>例如：接近于生活必需品的</p><p>其他情况：</p><p><img src="https://s2.loli.net/2022/11/07/hC3v9K1RcqZNmEF.png" alt="3dot2pic4.png"></p><p><strong>总结：</strong></p><p><img src="https://s2.loli.net/2022/11/07/tgpdVYabc2l5XM8.png" alt="3dot2pic5.png"></p><p>$notice:\quad$同一种商品在不同价位上有不同的弹性值。高价位富有弹性，低价位缺乏弹性。</p><h2 id="影响需求价格弹性的因素"><a href="#影响需求价格弹性的因素" class="headerlink" title="影响需求价格弹性的因素"></a>影响需求价格弹性的因素</h2><p>一、商品本身被需要的程度</p><ul><li>越被需要，弹性越小</li><li>越不需要，弹性越大</li></ul><p>二、本身被替代的程度</p><ul><li>易被替代，弹性越大</li></ul><p>三、商品本身占总支出的比重</p><ul><li>比重大$\rightarrow$弹性大</li></ul><p>四、商品的用途的多少</p><ul><li>用途越多，弹性越大</li></ul><p>五、商品的种类的大小</p><ul><li>种类越大，弹性越小</li></ul><p>种类的含义如下图：</p><p><img src="https://s2.loli.net/2022/11/07/gEiQNImjXbchwPn.png" alt="3dot3pic1.png"></p><p><strong>解释</strong>：种类越小，越容易被替代，弹性就大了。</p><p>六、时间因素</p><ul><li>近期弹性小</li><li>远期弹性大</li></ul><p>解释：近期可能没有替代品；长期可能因为技术进步等原因，出现替代品。</p><h2 id="需求价格弹性的用途"><a href="#需求价格弹性的用途" class="headerlink" title="需求价格弹性的用途"></a>需求价格弹性的用途</h2><ul><li>大件$\rightarrow$价格特别关心$\rightarrow$弹性大</li></ul><p>总结：通过人们对价格的关心程度来判断。</p><ul><li>需求价格弹性就是帮助企业进行定价的</li><li>总收益（TR）=P$\cdot$Q</li></ul><p><img src="https://s2.loli.net/2022/11/07/Ke82YCrZjUIuwxB.png" alt="3dot4pic1.png"></p><p><strong>富有弹性，定低价。</strong></p><p><img src="https://s2.loli.net/2022/11/07/qzBrQcRZ6FCsYAX.png" alt="3dot4pic2.png"></p><p><strong>缺乏弹性，定高价。</strong></p><h2 id="需求收入弹性"><a href="#需求收入弹性" class="headerlink" title="需求收入弹性"></a>需求收入弹性</h2><p>$definition:\quad$消费者的收入变化1%所引起的商品需求量的变动百分比。</p><script type="math/tex; mode=display">e_I=\frac{\frac{\Delta Q}{Q}}{\frac{\Delta I}{I}}</script><p>$notion:\quad$公式前<strong>没有负号</strong></p><ul><li>$e_I&gt;0$，正常品<ul><li>$0&lt; e_I&lt;1$，必需品</li><li>$e_I&gt;1$，高档品</li></ul></li><li>$e_I&lt;0$，低档品</li></ul><p>通过$e_I$判断生活水平的高低：</p><p><img src="https://s2.loli.net/2022/11/07/WTz39FPj4o5QSEq.png" alt="3dot5pic1.png"></p><h2 id="需求交叉弹性"><a href="#需求交叉弹性" class="headerlink" title="需求交叉弹性"></a>需求交叉弹性</h2><script type="math/tex; mode=display">e_{yx}=\frac{\frac{\Delta Q_y}{Q_y}}{\frac{\Delta P_x}{P_x}}</script><p>$e_{yx}:\quad x$的价格变化引起的$y$的需求量的改变。</p><p>$notion:\quad$前面<strong>没有负号</strong>。</p><p><img src="https://s2.loli.net/2022/11/07/FgsjxMJ9w5Q8mBu.png" alt="3dot6pic1.png"></p><p>通过需求交叉弹性帮助企业调整产业结构、产品结构：</p><p><img src="https://s2.loli.net/2022/11/07/6xecVNFiIpus9R8.png" alt="3dot6pic2.png"></p><h2 id="供给弹性及其类型"><a href="#供给弹性及其类型" class="headerlink" title="供给弹性及其类型"></a>供给弹性及其类型</h2><p>$definition:\quad$供给弹性，商品的价格变化引起的供给量的变化。</p><script type="math/tex; mode=display">e_s=\frac{\frac{\Delta Q_s}{Q_s}}{\frac{\Delta P}{P}}</script><p>$notice:\quad$<strong>没有负号</strong></p><p>含义：价格变化1%引起的供给量的变动百分比</p><p>$notice:\quad$有和之前相似的<strong>点弹性</strong>、<strong>弧弹性</strong>概念</p><p>类型一：$\quad e_s=\infty \quad$完全有弹性</p><p><img src="https://s2.loli.net/2022/11/07/Yr9bWzihkp42NvC.png" alt="3dot7pic1.png"></p><p>类型二：$\quad e_s=0\quad$完全无弹性</p><p><img src="https://s2.loli.net/2022/11/07/KpQqG9dzTcyMbmj.png" alt="3dot7pic2.png"></p><p>类型三：$\quad e_s=1\quad$单位弹性</p><p>类型四：$\quad e_s&lt;1\quad$缺乏弹性</p><p>类型五：$\quad e_s&gt;1\quad$富有弹性</p><p><img src="https://s2.loli.net/2022/11/07/QTYSxcUK2zvC8gE.png" alt="3dot7pic3.png"></p><blockquote><p>影响大的弹性大，影响小的弹性小</p></blockquote><h2 id="影响供给弹性大小的因素"><a href="#影响供给弹性大小的因素" class="headerlink" title="影响供给弹性大小的因素"></a>影响供给弹性大小的因素</h2><ul><li>生产的难易程度（难$\rightarrow e_s$小）</li><li>生产成本增加幅度的大小（成本增加的幅度大$\rightarrow e_s$小）</li><li>生产规模的大小（规模大的供给弹性小）</li><li>派生供给的难易程度（易$\rightarrow e_s$大）<ul><li>$definition:$ 派生供给：对生产最终产品的原材料、机器设备、半成品和燃料等中间产品的供给。</li></ul></li><li>时间因素（现在$e_s$小，将来$e_s$大）</li></ul><h2 id="欲望与效用"><a href="#欲望与效用" class="headerlink" title="欲望与效用"></a>欲望与效用</h2><p>效用是一种对欲望的满足程度。</p><p>效用的大小和个人的经济条件是有关的。</p><h2 id="边际效用递减规律"><a href="#边际效用递减规律" class="headerlink" title="边际效用递减规律"></a>边际效用递减规律</h2><p>总效用（total utility）：消费一定量的物品获得的总满足程度</p><p>边际效用（marginal utility)：多消费一个单位的商品增加的效用值</p><script type="math/tex; mode=display">MU=\frac{\Delta TU}{\Delta Q}\quad MU=\frac{\mathrm{d}TU}{\mathrm{d}Q}</script><p>解释：增加的消费量引起的总效用的该变量。即：多消费一个产品获得的满足程度。</p><blockquote><p>满足与消费量有关。</p></blockquote><p>边际效用的加和等于总效用 $TU_x=\begin{matrix} \sum_{i=1}^n MU_{xi} \end{matrix}$</p><p><strong>边际效用递减规律</strong>：随着消费量的不断增加，后一单位的边际效用小于前一单位的边际效用。</p><h2 id="消费者最佳决策"><a href="#消费者最佳决策" class="headerlink" title="消费者最佳决策"></a>消费者最佳决策</h2><p>一、为什么要进行消费决策？</p><ul><li>收入是有限的</li><li>时间是有限的</li><li>商品是有限的</li><li>价格是变化的</li></ul><p>二、货币效应</p><script type="math/tex; mode=display">一元钱的边际效用=\frac{一单位的边际效用}{商品价格}</script><p><img src="https://s2.loli.net/2022/11/07/oku7Ycwn2tU5SzP.png" alt="4dot3pic1.png"></p><p><img src="https://s2.loli.net/2022/11/07/rjNtu2nfKBEMyhZ.png" alt="4dot3pic2.png"></p><p>总结：</p><script type="math/tex; mode=display">\begin{cases}\frac{MU_x}{P_x}=\frac{MU_y}{P_y}(最佳条件)\\P_x\cdot X+P_y\cdot Y=I(约束条件)\end{cases}</script><h2 id="消费者剩余"><a href="#消费者剩余" class="headerlink" title="消费者剩余"></a>消费者剩余</h2><p>消费者剩余=愿意支付的货币-实际支付的货币</p><ul><li>愿意支付是根据边际效用的大小来决定的。</li></ul><p><img src="https://s2.loli.net/2022/11/07/nqSoKEfPZiTdXrx.png" alt="4dot4pic1.png"></p><p>启示：</p><ul><li>政府要维持物价水平</li><li>说明发展市场经济是有好处的<ul><li>市场越发达，剩余越多</li></ul></li><li>剩余是存在的</li></ul><h2 id="消费者偏好假设与无差异曲线"><a href="#消费者偏好假设与无差异曲线" class="headerlink" title="消费者偏好假设与无差异曲线"></a>消费者偏好假设与无差异曲线</h2><p>消费者偏好：消费者对商品的喜好程度。</p><blockquote><p>消费的是商品的组合。</p></blockquote><p><strong>三个假设：</strong></p><ol><li>完全性$(completeness)$：消费者在不同的组合中能够区分(tell)，自己更偏向(喜欢)哪个组合</li><li>传递性$(transitivity)$：$a&gt;b,b&gt;c\Rightarrow a&gt;c$</li><li>非饱和性：两个不同的组合，消费者总是喜欢数量大的组合</li></ol><p>无差异曲线（等效用曲线）：</p><p><img src="https://s2.loli.net/2022/11/07/XO5UVbYATBcd6Hj.png" alt="4dot5pic1.png"></p><p>$definition:\quad$能够获得相同满足的两种商品的各种组合的运动轨迹，叫做<strong>无差异曲线</strong>。</p><p>特点：</p><ul><li>无数条。每一条无差异曲线代表唯一的效用水平；位置越高的线代表的效用水平越大。</li><li>任意两条无差异曲线不相交。</li><li>无差异曲线凸向原点。</li></ul><p>一些特例：</p><p><img src="https://s2.loli.net/2022/11/07/NZKCyBV3vrAOqeY.png" alt="4dot5pic2.png"></p><p><img src="https://s2.loli.net/2022/11/07/FNzcb75Rom3wgls.png" alt="4dot5pic3.png"></p><h2 id="预算约束线"><a href="#预算约束线" class="headerlink" title="预算约束线"></a>预算约束线</h2><p>$definition\quad$<strong>预算约束线</strong>：在收入一定的情况下，消费者所能购买的两种商品的<strong>最大</strong>组合的运动轨迹。</p><p><img src="https://s2.loli.net/2022/11/07/eZpx3EVrfkcl2CJ.png" alt="4dot6pic1.png"></p><p>影响因素：</p><ul><li>收入$I$</li><li>价格</li></ul><p><img src="https://s2.loli.net/2022/11/07/sUjyEuAJnedYc9p.png" alt="4dot6pic2.png"></p><p>边际替代率：$MRS_{xy}=\frac{\Delta Y}{\Delta X}$</p><ul><li>指标越大，说明替代越容易</li><li>指标越小，说明替代越难</li><li>边际替代率递减</li></ul><p><img src="https://s2.loli.net/2022/11/07/MkyLaVCqu7ZwsdO.png" alt="4dot6pic3.png"></p><p>证明：</p><p><img src="https://s2.loli.net/2022/11/07/PubljBdtZgo3YsC.png" alt="4dot6pic4.png"></p><h2 id="消费者均衡"><a href="#消费者均衡" class="headerlink" title="消费者均衡"></a>消费者均衡</h2><p>消费者最佳选择问题又称<strong>消费者均衡</strong>。</p><p><img src="https://s2.loli.net/2022/11/07/jeIx3VlvDpOKS4L.png" alt="4dot7pic1.png"></p><p>$definition\quad$ 在收入一定情况下，消费者所买到的能够使效用最大的商品组合，就叫做<strong>消费者均衡</strong>。</p><p>E点的条件：（其中包含一些简单的推导，如果忘记不会可以看视频）</p><p><img src="https://s2.loli.net/2022/11/07/HYniWSXImFVo6xe.png" alt="4dot7pic2.png"></p><p>（和之前用表格推的那节课道理一样）</p><script type="math/tex; mode=display">\begin{cases}\frac{MU_x}{P_x}=\frac{MU_y}{P_y}(均衡条件)\\P_x\cdot X+P_y\cdot Y=I(约束条件)\end{cases}</script><h2 id="消费者均衡的变动"><a href="#消费者均衡的变动" class="headerlink" title="消费者均衡的变动"></a>消费者均衡的变动</h2><p>一、收入变动对消费者均衡的影响</p><p><img src="https://s2.loli.net/2022/11/07/zc8TemMR3yXFb6s.png" alt="4dot8pic1.png"></p><p>$definition\quad$ 收入改变引起的消费者的均衡变动的运动轨迹叫做<strong>收入——消费线</strong>。</p><p><strong>恩格尔曲线：</strong></p><p><img src="https://s2.loli.net/2022/11/07/2JTflcnoSiyDj91.png" alt="4dot8pic2.png"></p><p>二、价格变动对消费者均衡的影响</p><p>研究的假设：$I_0,P_y$ 不变，$P_x$ 变化</p><p><img src="https://s2.loli.net/2022/11/07/hFSo7lGBRaOc2uN.png" alt="4dot8pic3.png"></p><p>$definition\quad$ 收入不变的情况下，由于价格变化所引起的消费者的均衡位置的移动轨迹，就是<strong>价格消费曲线</strong>。</p><p><img src="https://s2.loli.net/2022/11/07/DkQOG4aPUx2Ev87.png" alt="4dot8pic4.png"></p><h2 id="替代效应与收入效应"><a href="#替代效应与收入效应" class="headerlink" title="替代效应与收入效应"></a>替代效应与收入效应</h2><p><img src="https://s2.loli.net/2022/11/07/aChBSw5qR7WDp1G.png" alt="4dot9pic1.png"></p><p>$definition\quad$ 相对价格的变化导致了产品的替代，影响了消费者的需求，叫<strong>替代效应</strong>。</p><p>$definition\quad$ 由于价格变化导致了实际收入的改变，引起了消费者需求改变，叫<strong>收入效应</strong>。</p><p>总效应=替代效应+收入效应</p><p>向政府提供建议：</p><ul><li>替代效应&lt;收入效应：要提高收入</li><li>替代效应&gt;收入效应：调整比价关系</li></ul><h2 id="生产与生产函数"><a href="#生产与生产函数" class="headerlink" title="生产与生产函数"></a>生产与生产函数</h2><p><strong>生产</strong>就是将投入要素转化为产出的活动。</p><p>生产要素：劳动、土地、资本、才能</p><p>产出：有形产品——实体、无形产品——劳务（第三产业）</p><p>$definition\quad$ <strong>生产函数：</strong> 在一定时期内，在技术水平不变的情况下，生产中所使用的各种生产要素与所能生产的最大产量之间的关系。</p><script type="math/tex; mode=display">Q=f(L,K,D)</script><blockquote><p>L劳动、K资本、D土地</p></blockquote><p><strong>柯布$\cdot$道格拉斯生产函数</strong></p><script type="math/tex; mode=display">Q=AL^{\alpha}K^{\beta}</script><p>A：技术进步因素（所有的其他说不清楚的影响因素的集合）</p><p><strong>不变要素和可变要素</strong>：</p><ul><li>不变要素（variable input）：不随着产量变化而变化的要素</li><li>可变要素（fixed input）：随着产量变化而变化的要素</li></ul><p><strong>短期生产和长期生产</strong>：</p><ul><li>短期生产（short run）：在这个时期内，至少有一种不变要素的生产</li><li>长期生产（long run）：在这个时期内，所有要素都是可变的</li></ul><h2 id="短期生产分析"><a href="#短期生产分析" class="headerlink" title="短期生产分析"></a>短期生产分析</h2><script type="math/tex; mode=display">Q=f(L,K_0)</script><blockquote><p>资本要素不变</p></blockquote><p><strong>三个产量指标：</strong></p><ol><li>总产量（Total Product of Labor)<br>$TP_L=Q$</li><li>平均产量（Average Product of Labor）<br>$AP_L=TP_L/L$</li><li>边际产量（Marginal Product of Labor）<br>$MP_L=\frac{\Delta TP_L}{\Delta L}=\frac{\Delta Q}{\Delta L}$</li></ol><p><img src="https://s2.loli.net/2022/11/07/LEzRxk8Mt5JG3p7.png" alt="5dot2pic1.png"></p><p>结论：</p><ul><li>这三条线都有一个最高点</li><li>当$MP_L=0$时，$TP_L$最大<ul><li>总产量等于边际产量的加和（其实就是数学上的求导和积分QAQ）</li></ul></li><li>当$MP_L$与$AP_L$相交时，$AP_L$最大</li></ul><p><strong>边际报酬递减规律：</strong></p><p>$definition\quad$ 在其他条件不变的情况下，单纯增加一种可变要素的使用量，一开始产量以递增的速度增长，然后以递减的速度增长，再继续增加该种要素的使用量，产量就会绝对的减产。这种现象称为边际报酬递减规律。</p><h2 id="生产的合理阶段"><a href="#生产的合理阶段" class="headerlink" title="生产的合理阶段"></a>生产的合理阶段</h2><p>第二阶段是合理阶段。</p><p><img src="https://s2.loli.net/2022/11/07/HKsU8XOBfDpJmai.png" alt="5dot3pic1.png"></p><p>第一阶段可能存在设备的闲置问题。</p><p>具体如何选定第二阶段的$L$值，与生产者的目标有关：</p><ul><li>平均产量最大</li><li>总产量最大</li></ul><p><strong>管理方法：</strong></p><ul><li>第一阶段：开拓市场</li><li>第二阶段：合理阶段</li><li>第三阶段：劳动过剩，浮于事，裁员</li></ul><h2 id="生产决策的工具"><a href="#生产决策的工具" class="headerlink" title="生产决策的工具"></a>生产决策的工具</h2><script type="math/tex; mode=display">Q=f(L,K)</script><p><strong>决策工具——等产量线</strong></p><p>生产同样的产量，可以采取不同的要素组合。</p><p><img src="https://s2.loli.net/2022/11/07/tEXkWKxQ47IyfZC.png" alt="5dot4pic1.png"></p><p>$definition\quad$<strong>等产量线</strong>$\quad$ 能够取得相同产量的两种要素的组合的运动轨迹</p><p>特征：</p><ul><li>有无数条等产量曲线，位置越高，产量水平越高</li><li>任意两条等产量曲线不相交</li><li>凸向原点</li></ul><p><strong>决策工具——等成本线</strong></p><script type="math/tex; mode=display">C_0=P_L\cdot L+P_K\cdot K</script><p><img src="https://s2.loli.net/2022/11/08/g17wxAOVSEGihQb.png" alt="5dot4pic2.png"></p><p>$definition\quad$等成本线$\quad$ 在成本一定的情况下，企业所能购买的两种要素的最大组合的运动轨迹</p><p><img src="https://s2.loli.net/2022/11/08/IychvAu8xCkLqaF.png" alt="5dot4pic3.png"></p><h2 id="生产的合理区域（1）"><a href="#生产的合理区域（1）" class="headerlink" title="生产的合理区域（1）"></a>生产的合理区域（1）</h2><script type="math/tex; mode=display">MRTS_{LK}=\frac{\Delta K}{\Delta L}</script><blockquote><p>T：边际技术替代率<br>LK：劳动对资本替代<br>左式读作：“劳动对资本的边际技术替代率”</p></blockquote><script type="math/tex; mode=display">\Delta Q=0=\Delta TP_L+\Delta TP_K</script><script type="math/tex; mode=display">0=MP_L\cdot \Delta L+MP_K\cdot \Delta K</script><script type="math/tex; mode=display">MRTS_{LK}=-\frac{\Delta K}{\Delta L}=\frac{MP_L}{MP_K}</script><blockquote><p>为方便起见，在前面加个负号。（搞不懂哪里方便了QAQ）</p></blockquote><p>$MP_L$下降，$MP_K$增加，所以$MRTS_{LK}$下降</p><p>结论：要素之间的替代是有限的</p><h2 id="生产的合理区域（2）"><a href="#生产的合理区域（2）" class="headerlink" title="生产的合理区域（2）"></a>生产的合理区域（2）</h2><p><img src="https://s2.loli.net/2022/11/08/lTVS4ofRrAFHhLq.png" alt="5dot5pic1.png"></p><p><img src="https://s2.loli.net/2022/11/08/ZYsyVqEUw5KiDPr.png" alt="5dot5pic2.png"></p><h2 id="生产者的最佳决策"><a href="#生产者的最佳决策" class="headerlink" title="生产者的最佳决策"></a>生产者的最佳决策</h2><p><strong>成本一定，产量决策：</strong></p><p><img src="https://s2.loli.net/2022/11/08/OlxXHFeGkTPiw23.png" alt="5dot6pic1.png"></p><p><strong>产量一定，成本决策：</strong></p><p><img src="https://s2.loli.net/2022/11/08/KsIz7AmjrBtbf9J.png" alt="5dot6pic2.png"></p><p><img src="https://s2.loli.net/2022/11/08/48cMEUtIQnpG9b2.png" alt="5dot6pic3.png"></p><blockquote><p>这里的最佳决策也可以称为<strong>生产者均衡</strong>。</p></blockquote><h2 id="生产扩展线"><a href="#生产扩展线" class="headerlink" title="生产扩展线"></a>生产扩展线</h2><p><img src="https://s2.loli.net/2022/11/08/A2Ke5q1jOtYBvhf.png" alt="5dot7pic1.png"></p><p>不同企业类型划分：</p><p><img src="https://s2.loli.net/2022/11/08/HhQFt6Xq1m78CLb.png" alt="5dot7pic2.png"></p><p>生产扩展线方程：</p><script type="math/tex; mode=display">\frac{MP_L}{P_L}=\frac{MP_K}{P_K}</script><p>为什么有些国家（企业）采取资本密集型，有些国家（企业）采取劳动密集型：</p><p><img src="https://s2.loli.net/2022/11/08/r68sC4FbHY9M1ej.png" alt="5dot7pic3.png"></p><h2 id="规模经济"><a href="#规模经济" class="headerlink" title="规模经济"></a>规模经济</h2><p>$definition\quad$规模经济$\quad$在一个生产过程当中，当所有的要素按照相同的倍数增加的时候，所表现出的产出的变化特征</p><p><strong>规模经济的三种形式（三个阶段）：</strong></p><ol><li>规模报酬递增</li><li>规模报酬不变</li><li>规模报酬递减</li></ol><p><img src="https://s2.loli.net/2022/11/08/mgLNbrZqVU3FGca.png" alt="5dot8pic1.png"></p><p>规模报酬递增的原因</p><ol><li>生产专门化</li><li>管理专门化</li><li>几何因素（重工业等）</li><li>便利条件</li></ol><p>规模报酬不变的原因：</p><ul><li>规模报酬递增的因素吸收完了，受到某种技术的限制</li></ul><p>规模报酬递减的原因：</p><ul><li>管理效率低下</li></ul><h2 id="多角度的成本"><a href="#多角度的成本" class="headerlink" title="多角度的成本"></a>多角度的成本</h2><p>在生产过程中实际发生的支出，为显性成本；在生产过程中经营者主观上感觉到的损失，为隐性成本。</p><p><img src="https://s2.loli.net/2022/11/08/gGRzl6SfiBXaLuT.png" alt="6dot1pic1.png"></p><p>$definiton\quad$ 当一种资源有多种用途时，生产者选择了收益最大的用途后，必然放弃的该资源用于其他用途所可能获得的最大收益，就是<strong>生产这种产品的机会成本</strong>。</p><p>经济成本=会计成本+机会成本</p><p><img src="https://s2.loli.net/2022/11/08/2jTF8lmdwG9qXaZ.png" alt="6dot1pic2.png"></p><h2 id="短期成本分析"><a href="#短期成本分析" class="headerlink" title="短期成本分析"></a>短期成本分析</h2><p>成本函数 $C=f(Q)$</p><p><img src="https://s2.loli.net/2022/11/08/qJgFWxGZOMmbLPR.png" alt="6dot2pic1.png"></p><p>短期总成本=短期固定成本(不变要素的花费)+短期可变成本(可变要素的花费)</p><script type="math/tex; mode=display">STC=TFC+TVC</script><p>或（明确特指短期成本）：</p><script type="math/tex; mode=display">TC=TFC+TVC</script><p><img src="https://s2.loli.net/2022/11/08/wYvR4izQGqALjTn.png" alt="6dot2pic2.png"></p><p><img src="https://s2.loli.net/2022/11/08/m2dyVquj3TgI9bA.png" alt="6dot2pic3.png"></p><h2 id="边际成本分析"><a href="#边际成本分析" class="headerlink" title="边际成本分析"></a>边际成本分析</h2><script type="math/tex; mode=display">MC=\frac{\Delta TC}{\Delta Q}</script><p><img src="https://s2.loli.net/2022/11/08/FvJjcVEXxORQbsL.png" alt="6dot3pic1.png"></p><p><img src="https://s2.loli.net/2022/11/08/7NIdKw2LxsnCoOT.png" alt="6dot3pic2.png"></p><p><img src="https://s2.loli.net/2022/11/08/uEMvOweoY8zNTpj.png" alt="6dot3pic3.png"></p><p>证明思路：</p><p>在AVC的最低点，有：</p><script type="math/tex; mode=display">AVC'=(\frac{TVC}{Q})'=0</script><script type="math/tex; mode=display">TVC'\cdot Q=TVC\cdot Q'</script><script type="math/tex; mode=display">\frac{TVC}{Q}=\frac{TVC'}{Q'}=\frac{\mathrm{d}TVC}{\mathrm{d}Q}</script><script type="math/tex; mode=display">AVC=MC</script><h2 id="长期总成本分析"><a href="#长期总成本分析" class="headerlink" title="长期总成本分析"></a>长期总成本分析</h2><p>规模与成本</p><p><img src="https://s2.loli.net/2022/11/08/McQt2rn9YsxJpiA.png" alt="6dot4pic1.png"></p><p><img src="https://s2.loli.net/2022/11/08/gUzZMAFH7WCNdL2.png" alt="6dot4pic2.png"></p><h2 id="长期平均成本与长期边际成本（1）"><a href="#长期平均成本与长期边际成本（1）" class="headerlink" title="长期平均成本与长期边际成本（1）"></a>长期平均成本与长期边际成本（1）</h2><p>长期平均成本（LAC） $\quad$ 长期边际成本（LMC）</p><script type="math/tex; mode=display">LAC=\frac{LTC}{Q}</script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//视频此处有图画错了</span></span><br><span class="line"><span class="comment">//本笔记中只放正确的</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/08/hKSipPIoXsH9yzA.png" alt="6dot5pic1.png"></p><h2 id="长期平均成本与长期边际成本（2）"><a href="#长期平均成本与长期边际成本（2）" class="headerlink" title="长期平均成本与长期边际成本（2）"></a>长期平均成本与长期边际成本（2）</h2><script type="math/tex; mode=display">LMC=\frac{\Delta LTC}{\Delta Q}</script><p><img src="https://s2.loli.net/2022/11/08/j2VFZCUaTJu1rnp.png" alt="6dot5pic2.png"></p><p><strong>在SAC和LAC决定的这个产量水平上，SMC=LMC</strong></p><blockquote><p>从导数的角度去理解这块内容：STC的导数是SMC，LTC的导数是LMC，LTC是STC的包络线。对于任意一个给定资本规模的STC（当然也可以是给定labor规模的STC，只不过老师的视频中一直以给定资本规模为例），它和LTC在两者的切点处导数值相同。因此在对应的Q值，有：SMC=LMC</p></blockquote><p><img src="https://s2.loli.net/2022/11/08/ISwFQh4YZ7NonsV.png" alt="6dot5pic3.png"></p><p>规模经济的实质就是成本不断降低的经济。</p><h2 id="收益与利润分析（1）"><a href="#收益与利润分析（1）" class="headerlink" title="收益与利润分析（1）"></a>收益与利润分析（1）</h2><p>总收益$\quad TR=P\cdot Q$</p><p>平均收益$\quad AR=\frac{TR}{Q}=\frac{P\cdot Q}{Q}=P$</p><p>边际收益$\quad MR=\frac{\Delta TR}{\Delta Q}$</p><p><img src="https://s2.loli.net/2022/11/08/L6z9TXi8GQWs2Vo.png" alt="6dot6pic1.png"></p><p><img src="https://s2.loli.net/2022/11/08/IiASpYrabT2GJhk.png" alt="6dot6pic2.png"></p><h2 id="收益与利润分析（2）"><a href="#收益与利润分析（2）" class="headerlink" title="收益与利润分析（2）"></a>收益与利润分析（2）</h2><p>利润$\quad \pi =TR-TC$</p><p><img src="https://s2.loli.net/2022/11/08/JKIrxGzj9kXpsRu.png" alt="6dot6pic3.png"></p><blockquote><p>利润最大化的条件是边际收益等于边际成本</p></blockquote><h2 id="完全竞争的四个假设条件"><a href="#完全竞争的四个假设条件" class="headerlink" title="完全竞争的四个假设条件"></a>完全竞争的四个假设条件</h2><p>四种市场：$\quad$完全竞争$\quad$完全垄断$\quad$垄断竞争$\quad$寡头垄断</p><p>完全竞争的条件：</p><ul><li>大数假定<ul><li>有无数多生产者和消费者</li><li>完全竞争厂商没有定价权</li></ul></li><li>产品同质性<ul><li>所有同名产品都是一样的</li><li>厂商没有必要做广告</li></ul></li><li>信息完备性<ul><li>信息是公开、免费的，人们无所不知</li><li>不会出现假冒伪劣等现象</li></ul></li><li>资源完全流动性<ul><li>生产者想生产什么就生产什么</li><li>人（资源）想干什么工作就干什么工作</li><li>人口自由流动</li><li>意味着资源可以达到最佳配置</li></ul></li></ul><p>接近于完全竞争市场的：</p><p>证券市场 $\qquad$ 农产品市场</p><p><img src="https://s2.loli.net/2022/11/08/48WUiDeKcFnJBuN.png" alt="7dot1pic1.png"></p><h2 id="完全竞争厂商的短期均衡"><a href="#完全竞争厂商的短期均衡" class="headerlink" title="完全竞争厂商的短期均衡"></a>完全竞争厂商的短期均衡</h2><p><img src="https://s2.loli.net/2022/11/08/xBrQeNJzqy6g17Z.png" alt="7dot2pic1.png"></p><blockquote><p>注意：这里的利润是<strong>经济利润</strong>，只能说赚的钱比正常的利润要少。</p></blockquote><p><img src="https://s2.loli.net/2022/11/08/7JdncRvCoKbqV2H.png" alt="7dot2pic2.png"></p><blockquote><p>注意这里的小于号，它的记法是出于经济学的习惯而非数学<br>P=AVC，停产点</p></blockquote><h2 id="完全竞争的长期均衡"><a href="#完全竞争的长期均衡" class="headerlink" title="完全竞争的长期均衡"></a>完全竞争的长期均衡</h2><p><img src="https://s2.loli.net/2022/11/08/DHzlPtF6von7UVO.png" alt="7dot3pic1.png"></p><p>完全竞争厂商的长期均衡条件：</p><script type="math/tex; mode=display">MR=SMC=LMC=SAC=LAC</script><p><img src="https://s2.loli.net/2022/11/08/ZGR9Mzy34YWPJag.png" alt="7dot3pic2.png"></p><p>长期均衡是在最佳规模下的最佳产量，是一个行业长期均衡的达到的结果。</p><p>当个别厂商均衡的时候，行业未必均衡。当行业均衡的时候，整个厂商都均衡了。</p><h2 id="完全垄断市场的条件"><a href="#完全垄断市场的条件" class="headerlink" title="完全垄断市场的条件"></a>完全垄断市场的条件</h2><p>三个条件：</p><ol><li>只有一个厂商</li><li>无很近的替代品</li><li><strong>其他厂商无法进入</strong>（最重要）<ul><li>政府特许</li><li>材料垄断</li><li>技术垄断</li><li>不当竞争</li></ul></li></ol><p><img src="https://s2.loli.net/2022/11/08/frz4onIhyQNWjRC.png" alt="8dot1pic1.png"></p><h2 id="完全垄断厂商的短期决策"><a href="#完全垄断厂商的短期决策" class="headerlink" title="完全垄断厂商的短期决策"></a>完全垄断厂商的短期决策</h2><p><img src="https://s2.loli.net/2022/11/08/9LNIEcfqbABuWPw.png" alt="8dot2pic1.png"></p><p><img src="https://s2.loli.net/2022/11/08/QnvObdeGP5FAUYj.png" alt="8dot2pic2.png"></p><p><img src="https://s2.loli.net/2022/11/08/xBvKgtw7QCZspUL.png" alt="8dot2pic3.png"></p><p>少数情况的应对方法：降低成本、刺激消费</p><h2 id="完全垄断厂商的长期决策"><a href="#完全垄断厂商的长期决策" class="headerlink" title="完全垄断厂商的长期决策"></a>完全垄断厂商的长期决策</h2><p><img src="https://s2.loli.net/2022/11/08/xNl92HfESkuhKWz.png" alt="8dot3pic1.png"></p><h2 id="完全垄断厂商的价格歧视"><a href="#完全垄断厂商的价格歧视" class="headerlink" title="完全垄断厂商的价格歧视"></a>完全垄断厂商的价格歧视</h2><p><strong>一级价格歧视</strong></p><ul><li>需求者少</li><li>十分了解消费者的支付能力</li><li>两次、多次收费现象</li></ul><p><img src="https://s2.loli.net/2022/11/08/pG2hyaOuZg3zrDe.png" alt="8dot4pic1.png"></p><p><strong>二级价格歧视</strong>（一部分一部分地单独定价）</p><ul><li>例如：邮政计费、电话计费</li></ul><p><strong>三级价格歧视</strong>（同一个产品在不同的市场上制定不同的价格）</p><p>条件：</p><ul><li>市场之间是分割的</li><li>消费者的需求不同</li></ul><p><img src="https://s2.loli.net/2022/11/08/y8DCZzH61XsSkhW.png" alt="8dot4pic2.png"></p><h2 id="垄断竞争市场的条件"><a href="#垄断竞争市场的条件" class="headerlink" title="垄断竞争市场的条件"></a>垄断竞争市场的条件</h2><p>三个条件：</p><ol><li>有很多厂商</li><li><strong>有很近的替代品</strong> $\rightarrow$ 产品是有差别的</li><li>其他厂商自由进出</li></ol><p>整体产品的三个层次：</p><ul><li>产品的核心（功能）</li><li>产品的实体</li><li>产品的附加服务</li></ul><p><img src="https://s2.loli.net/2022/11/08/pLJkDlXbeITwRuK.png" alt="9dot1pic1.png"></p><p>垄断竞争市场竞争特别激烈</p><p><img src="https://s2.loli.net/2022/11/08/i1CXQ2vWDwFRSgM.png" alt="9dot1pic2.png"></p><h2 id="垄断竞争厂商的短期决策"><a href="#垄断竞争厂商的短期决策" class="headerlink" title="垄断竞争厂商的短期决策"></a>垄断竞争厂商的短期决策</h2><p>垄断竞争厂商达到短期决策均衡满足的条件：</p><ol><li>MR=MC</li><li>在MR=MC决定的产量上D与d相交</li></ol><p><img src="https://s2.loli.net/2022/11/08/PJuoS72Dzn1RBZ9.png" alt="9dot2pic1.png"></p><p><img src="https://s2.loli.net/2022/11/08/HftRExAPzVTkQpe.png" alt="9dot2pic2.png"></p><p>垄断竞争厂商在短期之内，不管怎样调，在市场里的份额没有增加。</p><h2 id="垄断竞争厂商的长期决策"><a href="#垄断竞争厂商的长期决策" class="headerlink" title="垄断竞争厂商的长期决策"></a>垄断竞争厂商的长期决策</h2><p><img src="https://s2.loli.net/2022/11/08/Uydt63jNeqFGL12.png" alt="9dot3pic1.png"></p><p><img src="https://s2.loli.net/2022/11/08/KXreCdG4OZRgQfk.png" alt="9dot3pic2.png"></p><p>垄断竞争长期决策的条件：</p><ol><li>MR=SMC=LMC</li><li>在MR=SMC=LMC决定的产量水平上，d线与LAC相切</li><li>D过d与LAC的切点</li></ol><p>短期决策$\rightarrow$预期变化$\qquad$长期决策$\rightarrow$份额变化</p><blockquote><p>完全竞争价格最低产量最高<br>完全垄断价格最高产量最低<br>垄断竞争居于中间</p></blockquote><h2 id="古诺模型"><a href="#古诺模型" class="headerlink" title="古诺模型"></a>古诺模型</h2><p>寡头垄断市场：只有少数几个大的厂商垄断着市场</p><p>特点：</p><ul><li>只有少数大厂商</li><li>厂商间相互影响</li><li>达成协议</li><li>价格相当稳定</li></ul><p>寡头垄断市场举例：$\quad$ 钢铁公司、化工集团</p><p><img src="https://s2.loli.net/2022/11/08/yfa6QpJGcFHIACs.png" alt="10dot1pic1.png"></p><p>古诺模型的意义：说明寡头之间是相互影响的</p><p><strong>推论：</strong> 如果有$n$个寡头，每一个寡头的产量为$Q_i= \frac{1}{n+1}\cdot Q_0$</p><h2 id="斯威齐模型"><a href="#斯威齐模型" class="headerlink" title="斯威齐模型"></a>斯威齐模型</h2><p><img src="https://s2.loli.net/2022/11/08/JEhBDMNLIOioQgs.png" alt="10dot2pic1.png"></p><p>斯威齐模型认为，寡头垄断的需求曲线<strong>有折弯</strong></p><p><img src="https://s2.loli.net/2022/11/08/sMCZVrEqzpKRcI5.png" alt="10dot2pic2.png"></p><p>寡头垄断市场中，寡头的规模也不是完全相等</p><h2 id="价格领袖制"><a href="#价格领袖制" class="headerlink" title="价格领袖制"></a>价格领袖制</h2><p>目的：确定价格、维护价格稳定</p><p>充当价格领袖的条件：</p><ul><li>成本低的企业</li><li>规模大的寡头</li></ul><p><img src="https://s2.loli.net/2022/11/08/12RhL8ysMKCJawS.png" alt="10dot3pic1.png"></p><h2 id="囚徒困境"><a href="#囚徒困境" class="headerlink" title="囚徒困境"></a>囚徒困境</h2><p><img src="https://s2.loli.net/2022/11/08/aDWA5nNxfYiBS3V.png" alt="10dot4pic1.png"></p><p><strong>卡特尔（cartel）：</strong> 生产者之间的价格和产量协议</p><p>卡特尔本身是个囚徒博弈的问题。</p><h2 id="智猪博弈"><a href="#智猪博弈" class="headerlink" title="智猪博弈"></a>智猪博弈</h2><p><img src="https://s2.loli.net/2022/11/08/QyeUrIp6A19Md3b.png" alt="10dot5pic1.png"></p><p>博弈矩阵：</p><!--网上找资料缝了一个表格，可能会有细节上的错误qwq--><p><style type="text/css"><br>.mytable{<br>    width: 300px;<br>    height: 200px;<br>    margin: 0 auto;<br>}</style></p><table class="mytable"><th class="row-0" style="150px;height:50px;" >    <div class="biaotou">         <div class="biaotoutxt1">小猪策略</div>         <div class="biaotoutxt2">大猪策略</div>    </div> </th> <style>    .biaotou {          line-height: 5px;        text-align: left;    }    .biaotoutxt1 {        color: #FFFFF;        padding: 1px 0 0 65px;    }    .biaotoutxt2 {        color: #FFFFF;        padding: 15px 0 0 5px;    }</style><th>按</th><th>不按</th><tr><th>按</th><th>大=+3<br>小=+1</th><th>大=+2<br>小=+4</th></tr><tr><th>不按</th><th>大=+7<br>小=-1</th><th>大=0<br>小=0</th></tr></table><p><br></p><p><strong>剔除最劣决策法</strong>，最后结果：大猪按，小猪不按</p><blockquote><p>寡头之间是相互影响的，决策是相互依赖的</p></blockquote><h2 id="生产要素市场认知"><a href="#生产要素市场认知" class="headerlink" title="生产要素市场认知"></a>生产要素市场认知</h2><p>生产者使用要素的原则：利润最大化</p><p>产品市场：</p><script type="math/tex; mode=display">MR=MC</script><script type="math/tex; mode=display">MP_L\cdot MR=MC\cdot MP_L</script><script type="math/tex; mode=display">\frac{\Delta Q}{\Delta L}\cdot \frac{\Delta TR}{\Delta Q}=\frac{\Delta TC}{\Delta Q} \cdot \frac{\Delta Q}{\Delta L}</script><script type="math/tex; mode=display">\frac{\Delta TR}{\Delta L}=\frac{\Delta TC}{\Delta L}</script><script type="math/tex; mode=display">\Downarrow</script><script type="math/tex; mode=display">MRP_L=MFC_L</script><p>$notion\quad$边际收益产品（$MRP_L$） $Marginal$ $Rvenue$ $Product$</p><p>$notion\quad$边际要素成本（$MFC_L$） $Marginal$ $Factor$ $Cost$</p><p>生产当中<strong>使用要素的原则</strong>：$MRP_L=MFC_L$</p><p>在完全竞争的要素市场上，工资是一个常数。$MFC_L=W_0(工资)$</p><p><img src="https://s2.loli.net/2022/11/08/2MNwpUZcsABf5mq.png" alt="11dot1pic1.png"></p><blockquote><p>劳动量是工资的函数<br>图形解释：在上图中，因为边际收益产品和工资的单位相同，所以可以一起放在纵轴。边际收益产品先增后减，可以由其含义推得。</p></blockquote><p><img src="https://s2.loli.net/2022/11/08/JYrDnf51qZcvNGd.png" alt="11dot1pic2.png"></p><blockquote><p>粗线部分是劳动的需求曲线<br>解释：上图中的W0,W1,W2可以理解为不同的薪资水平。如果一个企业（or whatever…）的工资水平高，<strong>那就应该</strong>少雇人。在视频中，是以劳动为例来讲的，如果<strong>把横轴变成资本，纵轴变成利息，就形成了资本的需求曲线</strong>；如果<strong>把横轴变成土地，纵轴变成土地价格，就是土地的需求曲线</strong>。</p></blockquote><p>AFC：平均要素成本</p><p><img src="https://s2.loli.net/2022/11/08/HXvJ2VgASKckdoD.png" alt="11dot1pic3.png"></p><p><img src="https://s2.loli.net/2022/11/08/Nj8k62KybTCQI4O.png" alt="11dot1pic4.png"></p><p><img src="https://s2.loli.net/2022/11/08/GvRericVwA7aLfN.png" alt="11dot1pic5.png"></p><h2 id="工资的决定"><a href="#工资的决定" class="headerlink" title="工资的决定"></a>工资的决定</h2><p><img src="https://s2.loli.net/2022/11/08/IUVuKna7xcDYtMq.png" alt="11dot2pic1.png"></p><p>替代效应：$W_\uparrow \rightarrow L_\uparrow$</p><p>收入效应：$W_\uparrow \rightarrow L_\downarrow$</p><p><img src="https://s2.loli.net/2022/11/08/zDMZ9UsYlJ5SPBA.png" alt="11dot2pic2.png"></p><p>提高工资水平的策略：</p><ol><li>需求：<ul><li>提高生产率</li><li>支持涨价</li><li>贸易保护</li></ul></li><li>供给：（减少供给）<ul><li>对移民的限制</li><li>最长工作时间立法</li><li>规定工作的年龄</li><li>禁止使用童工</li><li>强制退休</li><li>制定最低工资法</li></ul></li></ol><h2 id="利息的决定与变动"><a href="#利息的决定与变动" class="headerlink" title="利息的决定与变动"></a>利息的决定与变动</h2><p>$notion\quad$迂回生产论</p><p><img src="https://s2.loli.net/2022/11/08/XMnGpKQiNuoB8cH.png" alt="11dot3pic1.png"></p><p>宽松政策：供给增加，利率下调</p><p>紧缩政策：供给减少，利率上调</p><h2 id="地租的决定"><a href="#地租的决定" class="headerlink" title="地租的决定"></a>地租的决定</h2><script type="math/tex; mode=display">土地价格=\frac{地租(或土地的收入)}{(银行)利率}</script><p><img src="https://s2.loli.net/2022/11/08/lfb3WKXzqSDFGkO.png" alt="11dot4pic1.png"></p><p>准地租（经济地租）：固定资产在短期内获得的报酬</p><script type="math/tex; mode=display">\begin{alignedat}{2}准地租&=固定成本+经济利润 \\     &= \pi +TFC \\\end{alignedat}</script><p><img src="https://s2.loli.net/2022/11/08/myNXLUGR7SFuIO2.png" alt="11dot4pic2.png"></p><p><img src="https://s2.loli.net/2022/11/08/lMqW62d5porfnyw.png" alt="11dot4pic3.png"></p><script type="math/tex; mode=display">\begin{aligned}\int_{0}^{Q_0}(P_0-MC)\,{\rm d}Q &= \int_{0}^{Q_0}P_0\,{\rm d}Q-\int_{0}^{Q_0}MC\,{\rm d}Q \\&= \int_{0}^{Q_0}P_0\,{\rm d}Q-(TC-TFC) \\&= (\int_{0}^{Q_0}P_0\,{\rm d}Q-TC)+TFC \\&= (TR-AVC\cdot Q_0)+TFC\\&= \pi +TFC\end{aligned}</script><script type="math/tex; mode=display">生产者剩余=\pi +TFC</script><p>寻租行为</p><p><img src="https://s2.loli.net/2022/11/08/LvRXmPIMfyYkcNU.png" alt="11dot4pic4.png"></p><h2 id="社会福利及其衡量"><a href="#社会福利及其衡量" class="headerlink" title="社会福利及其衡量"></a>社会福利及其衡量</h2><p><strong>个人福利</strong>是人们的欲望和需要所得到的满足。</p><p><strong>社会福利</strong>是个人福利的总和。</p><p><strong>经济福利</strong>是可以直接或间接用货币衡量的社会福利；<strong>非经济福利</strong>是不能用货币衡量的社会福利。</p><p>对社会福利的研究属于<strong>规范性</strong>的研究。</p><p><strong>帕累托效率</strong>指的是这样一种情况：这时经济已不可能通过改变资源配置，在其他人（至少1人）的效用水平至少不降的情况下，使任何别人（至少1人）的效用水平有所提高。</p><script type="math/tex; mode=display">帕累托无效率 \stackrel{帕累托改进}{\longrightarrow}帕累托效率</script><p>表现：</p><ol><li>交换的帕累托效率</li><li>生产的帕累托效率</li><li>交换与生产的帕累托效率</li></ol><p><img src="https://s2.loli.net/2022/11/08/xcW84nHKuMCOvgN.png" alt="12dot1pic1.png"></p><blockquote><p>交换的帕累托效率<br>解释：A的$MRS_{xy}$大于B，意味着在资源有限的前提下，应当根据贪心的策略将X优先配给A，将Y配给B。由边际效用的规律知，A和B两者的$MRS$值最终会趋于相等。这就是帕累托改进的过程在数值上的表现。</p></blockquote><p><img src="https://s2.loli.net/2022/11/08/4hiuH52DKseJG9c.png" alt="12dot1pic2.png"></p><blockquote><p>生产的帕累托效率</p></blockquote><p>$MRT_{xy}$：边际产品转化率</p><p><img src="https://s2.loli.net/2022/11/08/z4dM3HvmkX5GwJF.png" alt="12dot1pic3.png"></p><blockquote><p>MRT即是此图中的替代率</p></blockquote><p><img src="https://s2.loli.net/2022/11/08/FKHBhtvQ95GapTE.png" alt="12dot1pic4.png"></p><blockquote><p>生产与交换的帕累托效率<br>当$MRS_{xy}=MRT_{xy}$时，社会出清。</p></blockquote><h2 id="收入分配公平程度的衡量"><a href="#收入分配公平程度的衡量" class="headerlink" title="收入分配公平程度的衡量"></a>收入分配公平程度的衡量</h2><p>洛伦茨曲线</p><p><img src="https://s2.loli.net/2022/11/08/vQVUeKGFZD5Im4r.png" alt="12dot2pic1.png"></p><script type="math/tex; mode=display">基尼系数=\frac{A}{A+B}</script><p><img src="https://s2.loli.net/2022/11/08/pGir5DWC4Bnv7t9.png" alt="12dot2pic2.png"></p><ul><li>基尼系数在0.3以下，平均状态</li><li>0.3-0.4，合理状态</li><li>大于0.4，收入差距过大</li><li>大于0.6，暴发户和赤贫阶层同时出现</li></ul><h2 id="外部性及其影响"><a href="#外部性及其影响" class="headerlink" title="外部性及其影响"></a>外部性及其影响</h2><p>消费的外部性：</p><ul><li>正外部性：消费者的消费为其他消费者带来的利益</li><li>负外部性：消费者为其他消费者带来的损害</li></ul><p>生产的外部性：</p><ul><li>正外部性：（例如）养蜜蜂、行业经济</li><li>负外部性：（例如）环境污染</li></ul><blockquote><p>解决生产的负外部性：明确产权、 . . .</p></blockquote><h2 id="信息不完全性"><a href="#信息不完全性" class="headerlink" title="信息不完全性"></a>信息不完全性</h2><p>次品市场和逆向选择$\quad$错误选择（逆向选择）</p><p>信息不对称的情况下，可能产生道德风险。</p><blockquote><p>在市场经济当中，存在市场的失灵。</p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>祝大家考试稳过，生活愉（$y\grave{u}$）快，阖家欢乐（$l\grave{u}o$）！</p><script type="math/tex; mode=display">\mathcal{THE}\quad \mathcal{END}</script>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语错题集</title>
      <link href="/posts/e69d6a3b.html"/>
      <url>/posts/e69d6a3b.html</url>
      
        <content type="html"><![CDATA[<h2 id="Sentence"><a href="#Sentence" class="headerlink" title="Sentence"></a>Sentence</h2><p>Swithing to a seven-hour workday paid off: output went up. In addition, the staff, many of <strong>whom</strong> have been with the company for decades, appreciated getting home earlier.</p><p>The refuge farm itself is actually a nonprofit organization, <strong>one</strong> aiding survivors of drug and alcohol addiction, violence and other horrible experience.</p><p>Competed in 1891, in <strong>what</strong> was known as <em>The Gilded Age</em>, the five-story mansion is now owned by a famous actor who decides to stage a special production of Shakespeare’s <em>Hamlet</em>.</p><p>-We are looking for somebody who is fluent in Spanish. -No problem. I <strong>studied</strong> Spanish for four years at college.</p><p>I hope that we will be able to make it through the tough times and back to the business of working together <strong>on</strong> <strong>behalf</strong> <strong>of</strong> our common goals.</p><p>The laptops made by our company sell best, but nobody could have guessed the place in the market that they <strong>were</strong> <strong>to</strong> <strong>have</strong> 20 years ago.</p><p>In my driving lesson, a traffic rule that impressed me most is that in on time <strong>all</strong> <strong>vehicles</strong> <strong>should</strong> <strong>stop</strong> when the traffic lights turn red.</p><p><strong>Intending</strong> the concert to raise money for hunger relief and to make the public aware of the problem, Geldof invited many famous musicians to take part in  it.</p><p>Whether to favor urban development or the preservation of historical sites is especially controversial in China, where there exists rich history, diversified tradition and cultural <strong>deposits</strong>.(沉积物)</p><p><strong>Had</strong>  <strong>it</strong> <strong>not</strong> <strong>been</strong> for the timely investment from the outside, this company would not be so thriving as it is.</p><p>She <strong>had  intended</strong> to clean out the spare room last week, but it was much too occupied at that time.</p><p>Jinyong, considered one of the greatest ever kongfu fiction writers in China, built a magic land <strong>that</strong> people could escape into every now and then.</p><p><strong>Blanketed</strong>(被覆盖) in smog as winter approached, quite a lot of northen cities nationwide had to close the freeways constantly.</p><p>The regin of the next Japanese emperor will be known as “Reiwa”(令和) era, in <strong>whose</strong> name the character for “harmony” is included.</p><p>Nowadays, the Internet is a popular <strong>channel</strong>(频道；手段) for the public to access  information and voice their opinions.</p><p>The man <strong>circulating</strong> the fake news that 18 firefighters lost their lives in the explosion was arrested.</p><p>-I spent a week in Xiamen last month. -Then you must have been overcharged for sea food many a time, <strong>weren’t</strong> you? This city is known for that.</p><p>-Don’t forget to drop me a line(写信) when you settle down. -Trust me! I won’t. I’ll keep you <strong>posted</strong>.</p><p>I think that conflict is unlikely to happen, but if it <strong>were</strong> <strong>to</strong> <strong>occur</strong>, the interest of both China and the U.S. would be severely damaged.</p><p>Just tell Mike <strong>whoever</strong> has a good knowledge of physics and history is qualified for the position.</p><p>Bella, who is always cheerful, creates a friendly work atmosphere in her office every day, <strong>which</strong> her colleagues find pleasant and relaxing.</p><p>-Many optimistic teenagers owe their personalities to their outgoing parents. -It makes sense. As we all know, a happy parent <strong>makes</strong> <strong>for</strong> a happy child.</p><p>-I can’t understand why he <strong>should</strong> <strong>have</strong> <strong>been</strong> so angary. I meant no offence. -It’s typical of him to be so sensitive.</p><p>The lecture <strong>having</strong> <strong>been</strong> <strong>given</strong>, a lively question-and-answer session followed.</p><p>According to the new regulation, every employee shall be paid <strong>in</strong> <strong>proportion</strong> <strong>to</strong> their work so that productivity can be increased.</p><p>-How was the journey? -Tiring! All the seats in the train <strong>occupied</strong>, I stood all the way.</p><p>A case of suspected food poisoning in the New York has led to 6 high school students <strong>being</strong> <strong>sent</strong> to hospital.</p><p>-I wonder what makes him a good English teacher. -He <strong>served</strong> as a volunteer in the UK for two years, which helps him with his work a lot.</p><p>Despite the heavy snow outside yesterday, everybody in the company <strong>went</strong> <strong>about</strong> their daily tasks as usual.</p><p>Never say anything behind a person’s back <strong>that</strong> you wouldn’t say to his face.</p><p>Unpleasant advice is a good medicine, <strong>which</strong> tastes bitter but is good for health.</p><p>We think the Internet is one of the most important sources <strong>that</strong> we can turn to for new information.</p><p>We will only discuss such problems <strong>as</strong> have something to do with our own interests.</p><p>The great wall is the only one of the buildings on the earth <strong>that</strong> is seen from the moon.</p><p>Zhang Han has determined to go to France for further study. Therefore, <strong>whatever</strong> difficulty it is, she will try her best to make her dream come true.</p><p>Large quantities of water <strong>are needed</strong> for cooling purposes in the iron and steel making process.</p><p>Richness of nightlife is one of the standards that <strong>are  used</strong> to measure a region’s living standard.</p><p>In recent years, many a teacher at the college <strong>has</strong> abandoned teaching in favor of a career as a businessman and more than one of them <strong>has</strong> achieved success.</p><p>All I want to tell you <strong>is</strong> that all <strong>are</strong> equal before the law.</p><p>Every means <strong>has  been</strong> tried to solve the problem, but none is effective.</p><p>Many a student <strong>has</strong> been to Beijing and more than one student <strong>has</strong> ever been to the Great Wall.</p><p>Every boy and every girl in our school <strong>is</strong> required to wear their school uniforms on weekdays.</p><p>Now that the road <strong>has</strong> <strong>been</strong> <strong>completed</strong> and villagers can safely walk all the way to the bottom of the mountain without fear of injury, Mr.Zhang has started working on a second road that leads to a water spring.</p><p>Even if there was a gun in my hand and he <strong>was</strong> <strong>standing</strong> in front of me, I would not shoot him.</p><p><strong>As</strong> <strong>a</strong> <strong>rule</strong>(通常情况下), John works till six o’clock in the afternoon except weekends.</p><p>According to the timetable, the train for Shanghai <strong>leaves</strong> at seven o’clock in the morning.</p><p>-Is Wang Huan a teacher? -Yes. But she <strong>served</strong> in the army for two years.</p><p>-Where is the telephone book? -I <strong>will</strong> <strong>get</strong> it for you.</p><p>David said he would climb Mount Tai with his friends next Sunday if it <strong>didn’t</strong> <strong>rain</strong>.</p><p>The audience burst into laughter because of the <strong>slip</strong> (错误) of the tongue from the host, who said, “ Good ladies, evening and gentlemen! “</p><p>-It was the third time that Rodger <strong>had</strong> <strong>phoned</strong> me to say he had a new job. -It’s difficult to keep a young man in one job for life nowadays.</p><p>When you feel alone, just look at the spaces between your fingers, and remember that’s <strong>where</strong> my fingers fit perfectly.</p><p>Next year’s key challenges include risks in the financial area and old issues that have yet <strong>to</strong> <strong>be</strong> <strong>solved</strong>.</p><p>The application of modern technology like AI in classroom teaching increasingly received a mixed <strong>reception</strong>(欢迎) among students.</p><p>I felt like giving up. I probably <strong>would  have</strong>, but my Dad whispered,”come on! You can make it!”</p><p>“But for the fact that you <strong>studied</strong> here for 3 years, I <strong>wouldn’t</strong> <strong>be</strong> <strong>studying</strong> in this key high school now, facing its endless homework and exams!” the poor girl cried to her helpless father.</p><p>-What makes you so nervous? -The China vs Iran World Cup qualifier will <strong>kick</strong> <strong>off</strong> tonight.</p><p>Just surf the Internet and then call one <strong>of  which</strong> the telephone number is provided.</p><p>Molly finally agreed, <strong>somewhat</strong>(等价于to some degree) reluctantly, to go and see a doctor.</p><p>I know he feels upset about his failure, and I can <strong>relate</strong> <strong>to</strong>(理解) that.</p><p>The company needs to <strong>shake</strong> <strong>off</strong> its outdated image to promote its newly-released product. (shake off one’s image摆脱 $\cdots$ 的形象)</p><p>He was offered a position at the local church school, <strong>after</strong> <strong>which</strong> he went to the Cambridge.</p><p>Usually, I spend my money carefully, as I have to, <strong>given</strong> that I don’t earn that much.</p><p>-Did you tell others that I’m leaving the company soon? You heave such a big mouth ! -I am so sorry about that. It was just a <strong>slip</strong> of the tongue.</p><p>-Would you like to give me the <strong>formula</strong> for success? -Make some mistakes. That’s where you’ll find success<br> (recipe意为“食谱、方法”；receipt意为“收据、契据”)</p><p>Liza <strong>may</strong> well not want to go on the trip —- she hates traveling. (“may well”和“might well”意为“很可能”)</p><p>Morris ordered the flowers and chocolates he would present to his wife on Valentine’s Day <strong>well</strong> <strong>in</strong> <strong>advance</strong>.</p><p>“The Wandering Earth” tells a story that the world goverment decides to move Earth to a new solar system as the sun dies, but unfortunately the Earth is on an apparent <strong>collision</strong> (碰撞) course with Jupiter.</p><h2 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h2><p><strong>consensus</strong>【共识】Secondly,what would be a sufficient(足够) consensus to ground an appeal to social justice?</p><p><strong>fish  in  the  air</strong>【白费力气】</p><p><strong>sit  on  the  fence</strong>【观望.jpg】</p><p><strong>caught  red</strong> <strong>-handed</strong>【抓个现行】</p><p><strong>by  virtue  of</strong>【凭借】</p><p><strong>fat  chance</strong>【渺茫的希望/可能性】</p><p><strong>good  Samaritan</strong>【乐善好施的人】</p><p><strong>fly  off  the  handle</strong>【勃然大怒】</p><p><strong>beat  around  the  bush</strong>【拐弯抹角】</p><p><strong>pull  through</strong>【康复】</p><p><strong>efficient</strong>【高效】</p><p><strong>budget</strong>【预算】</p><p><strong>pension</strong>【退休金】</p><p><strong>on</strong> <strong>account</strong> <strong>of</strong>【由于】</p><p><strong>no  sweat</strong>【小事一桩、没问题】</p><p><strong>associate</strong>【关联】The Reserve has been in the traditional associate unit business since 1968, where reservists fly and maintain aircraft owned by the active duty.</p><p><strong>reserve</strong> 【保留】</p><p><strong>revision</strong> 【调整】Reference works, like guide books, need constant revision and sometimes replacement.</p><p><strong>get</strong> <strong>over</strong>【克服】</p><p><strong>the</strong> <strong>salt</strong> <strong>of</strong> <strong>the</strong> <strong>earth</strong>【社会中坚】</p><p><strong>a</strong> <strong>big</strong> <strong>potato</strong>【大人物】</p><p><strong>the</strong> <strong>apple</strong> <strong>of</strong> <strong>our</strong> <strong>eye</strong>【掌上明珠】</p><p><strong>pull  yourself  together</strong>【重新振作】</p><p><strong>ample</strong>【充足】</p><p><strong>trembled</strong>【颤抖的】</p><p><strong>twisted</strong>【扭曲的】</p><p><strong>send</strong> <strong>over</strong>【发送】</p><p><strong>tentative</strong>【暂时的】</p><p><strong>consistent</strong>【持续的】</p><p><strong>confidential</strong>【机密的】</p><p><strong>beauty  is  in  the  eye  of  the  beholder</strong>【情人眼里出西施】</p><p><strong>conventional</strong>【传统的】</p><p><strong>concrete</strong>【具体的】</p><p><strong>cater</strong> <strong>to</strong>【迎合】</p><p><strong>contrary</strong>【相反、对立的】</p><p><strong>abrupt</strong>【粗鲁的、突然的】</p><p><strong>object</strong> <strong>to</strong>【反对】</p><p><strong>appeal</strong> <strong>to</strong>【吸引】</p><p><strong>expect  (sb)</strong> <strong>to  do</strong> || <strong>anticipate</strong> <strong>(doing)  sth</strong></p><p><strong>a</strong> <strong>tough</strong> <strong>nut</strong>【难对付的人】</p><p><strong>our</strong> <strong>great</strong> <strong>rock</strong>【我们的支持者】</p><p><strong>bring  out</strong>【呈现(方面)】</p><p><strong>sort  out</strong>【分类；处理(问题)】</p><p><strong>on  top  of</strong>【除了】</p><p><strong>in  no  time</strong>【$Leftrightarrow$ $at  once$】(注意要与$at$ $no$ $time$区分)</p><p><strong>account</strong>【账户；描述；$cdots$】</p><p><strong>pick  up  the  pieces</strong>【收拾残局】</p><p><strong>jump  down  your  throat</strong>【训斥某人】</p><p><strong>put  out</strong>【(另)出版】</p><p><strong>phenomenon</strong>【现象】</p><p><strong>roll  out</strong>【推出；离开；$cdots$】</p><p><strong>throw  in  the  towel</strong>【认输】</p><p><strong>the</strong> <strong>best</strong> <strong>fish</strong>【好人】</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AIR相关转载</title>
      <link href="/posts/55a0094f.html"/>
      <url>/posts/55a0094f.html</url>
      
        <content type="html"><![CDATA[<p>首先应该知道，在《AIR》的故事里，隐含着许多和日本神话、传说有关的元素。例如《鸟之诗》的歌词中有“わたつみのような强さ”（“如海神般坚强”）一句，其中的“わたつみ”当训作“绵津见神”，是神话中的海神。Summer篇里神奈母亲的称号文字“八百比丘尼”也是出自古老的人鱼传说。观铃父亲的名字“橘敬介”，也包含着一样的解释。</p><p>日本最古老的书籍《古事记》中卷，“垂仁天皇”一章中，记载着如下的故事：</p><blockquote><p>“垂仁天皇令多迟摩毛理（たじまもり），到常世之国寻找‘非时香果’（非时の香の木の実）。多迟摩毛理终于来到常世之国，采到那种果实，可是在这期间，天皇已经死了。多迟摩毛理在墓前号啕大哭，终于痛哭而死。这种‘非时香果’，就是现在的橘。”</p></blockquote><p>所谓“常世之国”，就像浦岛太郎故事里的龙宫那样，是“超越了时间的世界”，换言之，“在大海彼方的永恒世界”。而且，“非时香果（非时の香の木の実）”，也就是“永远散发香气的树木所结的果实”的意思。</p><p>由上，“橘敬介”这个名字，可以解读为“尊敬橘——‘非时香果’的人”（「非时の香の木の実を」敬う人），即“寻找‘非时香果’的人”（非时の香の木の実を求める人）——也就是“寻找‘常世之国’(‘永恒的世界’)的人”（常世の国（永远の世界）を求める人）。但问题在于，“寻找‘非时香果’的人”，或称“寻找‘常世之国’的人”，和《AIR》之间又有什么关系呢？</p><p>在Summer篇“空梦”一节里，知德对柳也和里叶说过这样的话：</p><blockquote><p>知德：“对统治者来说，可以到达神身边的羽翼是不需要的东西。这样的话，所有的文书都可以修改了吧。将空作海、将鸟作鱼、将火作水，都可以这么互换过来……”<br>柳也：“（前略）正因如此，朝廷害怕翼人作为传说流传下来，会把关于翼人的一切都巧妙地隐藏起来，焚烧、修改书籍，抹杀我们的存在吧。”</p></blockquote><p>《古事记》成书于公元712年，而当时是995年；这两段对话暗示着，当时那些古文书中的“空”字后来已被置换成了“海”字；所以，对“常世之国”的解释——“在大海彼方的永恒世界”，原本很可能是“在天空彼方的永恒世界”。</p><p>《AIR》中“永恒的世界”一语出现得很少，但我认为《AIR》中的“无限”和“永恒”的意义是一样的。</p><p>AIR篇的结尾，“そら”飞向天空之前，曾有这样的一段话：</p><blockquote><p>“她已经不在这片大地上了，而是在那片天空的彼方。<br>那正是天空悲伤的原因。<br>她一直在面对着天空，<br>那片永无止境的苍穹……<br>永无终结的世界。（何も终わりを知ることもなく，続いていく世界）<br>回到那无限（その无限）中去的少女。”</p></blockquote><p>最后一句里的“那无限”所指的，自然是“永无终结”的状态，而且，“天空的彼方”也是指“永无终结的世界”。因此，“永恒”可以等同于这里的“永无终结”。</p><p>于是，“永恒”＝“永无终结”＝“无限”＝“天空的彼方”。</p><p>在《AIR》中，“天空”属于“憧憬的领域”，同时也是“过去的领域”，是“死者的领域”。在“天空中”的人，有神奈、みちる、佳乃的母亲，她们都已经逝去，观铃梦中对“空中的少女”的回忆，最后的结果也是死亡（佳乃决心到天空中去，也等于死的觉悟），等等。所以，所谓“在天空的彼方”，也就是“在（无法触及的）过去的死者的领域”。</p><p>“常世之国”＝“永恒的世界”＝“永无终结的世界”＝“无限”＝“天空的彼方”＝“（无法触及的）过去的死者的领域”，————“寻找‘常世之国’的人”＝“向往（无法触及的）过去的死者的领域的人”＝“被过去的死者束缚的人”。</p><p>很久以前，橘敬介也曾失去了自己的爱人，神尾郁子【译注：观铃的母亲，晴子的姐姐】。所以，很有可能，他正像观铃、美凪和佳乃一样，也是“被过去的死者束缚的人”。就是因为这样，所以敬介才把观铃托付给晴子，自己逃避、离开了吗？</p><p>事实上，在Air篇的8月11日，晴子和敬介之间的对话就强烈地暗示了这个意思：</p><blockquote><p>女：“我现在终于明白了……抛下这个孩子，自己逃掉的你的心情。你失去了心爱的人啊……那是你所爱的人呀。怀抱着各种回忆，共同生活过的人呀。我能理解，你失去她时的心情了。（下略）”<br>男：“你和观铃一起生活到了现在。和我不同啊。”</p></blockquote><p>根据上述理由，再考虑到Air篇的情节，“橘敬介”＝“寻找‘常世之国’的人”＝“寻找无限世界的人”＝“被过去的死者束缚的人”，这应该是合理的推论。</p><p>至于“非时”，就不需要说明了吧？“非时”就是“与时间无关”，“不知何时会结束，一直持续着”。也就是说，所谓“寻找‘非时香果’的人”，也是“寻求永远的世界的人”，是“被过去的死者所束缚的人”。多迟摩毛理的悲剧在于，他去“常世之国”寻找“橘”，等到回来的时候，物是人非，时光已经以令人吃惊的程度流逝过去了。橘敬介不是和他很像吗？他把观铃托付给晴子，自己也同样去寻求什么；但是，等到他回来的时候，观铃和晴子之间的感情已经深厚得无法分离了……</p><p>不过，最大的问题在于，Key的那些人知道多迟摩毛理的故事吗？上面这些猜测也许仅仅只是猜测而已吧……</p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包九讲</title>
      <link href="/posts/e45f505b.html"/>
      <url>/posts/e45f505b.html</url>
      
        <content type="html"><![CDATA[<h2 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h2><p>题目:<br>有N件物品和一个容量为V的背包。第i件物品的费用是$c[i]$，价值是$w[i]$。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p><p>基本思路:<br>这是最基础的背包问题，特点是：每种物品仅有一件，可以选择放或不放。</p><p>用子问题定义状态：即$f[i][v]$表示前$i$件物品恰放入一个容量为$v$的背包可以获得的最大价值。则其状态转移方程便是：$f[i][v]=max(f[i-1][v],f[i-1][v-c[i]]+w[i])$。</p><p>这个方程非常重要，基本上所有跟背包相关的问题的方程都是由它衍生出来的。所以有必要将它详细解释一下：“将前i件物品放入容量为v的背包中”这个子问题，若只考虑第i件物品的策略（放或不放），那么就可以转化为一个只牵扯前i-1件物品的问题。如果不放第i件物品，那么问题就转化为“前i-1件物品放入容量为v的背包中”；如果放第i件物品，那么问题就转化为“前i-1件物品放入剩下的容量为$v-c[i]$的背包中”，此时能获得的最大价值就是$f[i-1][v-c[i]]$再加上通过放入第i件物品获得的价值$w[i]$。</p><p>注意$f[i][v]$有意义当且仅当存在一个前i件物品的子集，其费用总和为v。所以按照这个方程递推完毕后，最终的答案并不一定是$f[N][V]$，而是$f[N][0..V]$的最大值。如果将状态的定义中的“恰”字去掉，在转移方程中就要再加入一项$f[i][v-1]$，这样就可以保证$f[N][V]$就是最后的答案。至于为什么这样就可以，由你自己来体会了。</p><p>优化空间复杂度:<br>以上方法的时间和空间复杂度均为$O(N*V)$，其中时间复杂度基本已经不能再优化了，但空间复杂度却可以优化到$O(V)$。</p><p>先考虑上面讲的基本思路如何实现，肯定是有一个主循环$i=1..N$，每次算出来二维数组$f[i][0..V]$的所有值。那么，如果只用一个数组$f[0..V]$，能不能保证第i次循环结束后$f[v]$中表示的就是我们定义的状态$f[i][v]$呢？$f[i][v]$是由$f[i-1][v]$和$f[i-1][v-c[i]]$两个子问题递推而来，能否保证在推$f[i][v]$时（也即在第i次主循环中推$f[v]$时）能够得到$f[i-1][v]$和$f[i-1][v -c[i]]$的值呢？事实上，这要求在每次主循环中我们以$v=V..0$的顺序推$f[v]$，这样才能保证推$f[v]$时$f[v-c[i]]$保存的是状态$f[i -1][v-c[i]]$的值。伪代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1.</span>.N</span><br><span class="line"><span class="keyword">for</span> v=V.<span class="number">.0</span></span><br><span class="line">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br></pre></td></tr></table></figure><p>其中的$f[v]=max{f[v],f[v-c[i]]}$一句恰就相当于我们的转移方程$f[i][v]=max{f[i-1][v],f[i- 1][v-c[i]]}$，因为现在的$f[v-c[i]]$就相当于原来的$f[i-1][v-c[i]]$。如果将v的循环顺序从上面的逆序改成顺序的话，那么则成了$f[i][v]$由$f[i][v-c[i]]$推知，与本题意不符，但它却是另一个重要的背包问题P02最简捷的解决方案，故学习只用一维数组解01背包问题是十分必要的。</p><p>总结<br>01背包问题是最基本的背包问题，它包含了背包问题中设计状态、方程的最基本思想，另外，别的类型的背包问题往往也可以转换成01背包问题求解。故一定要仔细体会上面基本思路的得出方法，状态转移方程的意义，以及最后怎样优化的空间复杂度。</p><h2 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h2><p>题目:<br>有N种物品和一个容量为V的背包，每种物品都有无限件可用。第i种物品的费用是$c[i]$，价值是$w[i]$。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p><p>基本思路:<br>这个问题非常类似于01背包问题，所不同的是每种物品有无限件。也就是从每种物品的角度考虑，与它相关的策略已并非取或不取两种，而是有取0件、取1件、取2件……等很多种。如果仍然按照解01背包时的思路，令$f[i][v]$表示前i种物品恰放入一个容量为v的背包的最大权值。仍然可以按照每种物品不同的策略写出状态转移方程，像这样 $f[i][v]=max{f[i-1][v-k<em>c[i]]+k</em>w[i]|0&lt;=k<em>c[i]&lt;= v}$ 。这跟01背包问题一样有O(N</em>V)个状态需要求解，但求解每个状态的时间则不是常数了，求解状态$f[i][v]$的时间是$O(v/c[i])$，总的复杂度是超过$O(VN)$的。</p><p>将01背包问题的基本思路加以改进，得到了这样一个清晰的方法。这说明01背包问题的方程的确是很重要，可以推及其它类型的背包问题。但我们还是试图改进这个复杂度。</p><p>一个简单有效的优化:<br>完全背包问题有一个很简单有效的优化，是这样的：若两件物品 i, j 满足$c[i]&lt;=c[j]$且$w[i]&gt;=w[j]$，则将物品j去掉，不用考虑。这个优化的正确性显然：任何情况下都可将价值小费用高得$j$换成物美价廉的$i$，得到至少不会更差的方案。对于随机生成的数据，这个方法往往会大大减少物品的件数，从而加快速度。然而这个并不能改善最坏情况的复杂度，因为有可能特别设计的数据可以一件物品也去不掉。</p><p>转化为01背包问题求解<br>既然01背包问题是最基本的背包问题，那么我们可以考虑把完全背包问题转化为01背包问题来解。最简单的想法是，考虑到第i种物品最多选$V/c[i]$件，于是可以把第i种物品转化为$V/c[i]$件费用及价值均不变的物品，然后求解这个01背包问题。这样完全没有改进基本思路的时间复杂度，但这毕竟给了我们将完全背包问题转化为01背包问题的思路：将一种物品拆成多件物品。</p><p>更高效的转化方法是：把第i种物品拆成费用为 $c[i]<em>2^k$ 、价值为 $w[i]</em>2^k$ 的若干件物品，其中 k 满足 $c[i]*2^k&lt;V$ 。这是二进制的思想，因为不管最优策略选几件第i种物品，总可以表示成若干个2^k件物品的和。这样把每种物品拆成 $O(log(V/c[i]))$ 件物品，是一个很大的改进。但我们有更优的O(VN)的算法。 O(VN)的算法这个算法使用一维数组，先看伪代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1.</span>.N <span class="keyword">for</span> v=<span class="number">0.</span>.V</span><br><span class="line">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br></pre></td></tr></table></figure><p>你会发现，这个伪代码与P01的伪代码只有v的循环次序不同而已。为什么这样一改就可行呢？首先想想为什么P01中要按照$v=V..0$的逆序来循环。这是因为要保证第i次循环中的状态$f[i][v]$是由状态$f[i-1][v-c[i]]$递推而来。换句话说，这正是为了保证每件物品只选一次，保证在考虑“选入第i件物品”这件策略时，依据的是一个绝无已经选入第i件物品的子结果$f[i-1][v-c[i]]$。而现在完全背包的特点恰是每种物品可选无限件，所以在考虑“加选一件第i种物品”这种策略时，却正需要一个可能已选入第i种物品的子结果$f[i][v-c[i]]$，所以就可以并且必须采用v= 0..V的顺序循环。这就是这个简单的程序为何成立的道理。</p><p>这个算法也可以以另外的思路得出。例如，基本思路中的状态转移方程可以等价地变形成这种形式：<br>$f[i][v]=max{f[i-1][v],f[i][v-c[i]]+w[i]}$，将这个方程用一维数组实现，便得到了上面的伪代码。</p><p>总结<br>完全背包问题也是一个相当基础的背包问题，它有两个状态转移方程，分别在“基本思路”以及“$O(VN)$的算法“的小节中给出。希望你能够对这两个状态转移方程都仔细地体会，不仅记住，也要弄明白它们是怎么得出来的，最好能够自己想一种得到这些方程的方法。事实上，对每一道动态规划题目都思考其方程的意义以及如何得来，是加深对动态规划的理解、提高动态规划功力的好方法。</p><h2 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h2><p>题目:<br>有N种物品和一个容量为V的背包。第i种物品最多有$n[i]$件可用，每件费用是$c[i]$，价值是$w[i]$。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p><p>基本算法:<br>这题目和完全背包问题很类似。基本的方程只需将完全背包问题的方程略微一改即可，因为对于第i种物品有$n[i]+1$种策略：取0件，取1件……取 $n[i]$件。令f[i][v]表示前i种物品恰放入一个容量为v的背包的最大权值，则： $f[i][v]=max{f[i-1][v-k<em>c[i]]+ k</em>w[i]|0&lt;=k&lt;=n[i]}$ 。复杂度是 $O(V*∑n[i])$ 。</p><p>转化为01背包问题<br>另一种好想好写的基本方法是转化为01背包求解：把第i种物品换成n[i]件01背包中的物品，则得到了物品数为$∑n[i]$的01背包问题，直接求解，复杂度仍然是$O(V*∑n[i])$。</p><p>但是我们期望将它转化为01背包问题之后能够像完全背包一样降低复杂度。仍然考虑二进制的思想，我们考虑把第i种物品换成若干件物品，使得原问题中第i种物品可取的每种策略——取$0..n[i]$件——均能等价于取若干件代换以后的物品。另外，取超过$n[i]$件的策略必不能出现。</p><p>方法是：将第i种物品分成若干件物品，其中每件物品有一个系数，这件物品的费用和价值均是原来的费用和价值乘以这个系数。使这些系数分别为 $1,2,4,…,2^(k-1),n[i]-2^k+1$，且k是满足$n[i]-2^k+1&gt;0$的最大整数。例如，如果$n[i]$为13，就将这种物品分成系数分别为1,2,4,6的四件物品。</p><p>分成的这几件物品的系数和为n[i]，表明不可能取多于n[i]件的第i种物品。另外这种方法也能保证对于0..n[i]间的每一个整数，均可以用若干个系数的和表示，这个证明可以分$0..2^{k-1}$和$2^k..n[i]$两段来分别讨论得出，并不难，希望你自己思考尝试一下。</p><p>这样就将第i种物品分成了$O(log n[i])$种物品，将原问题转化为了复杂度为$O(V*∑log n[i])$的01背包问题，是很大的改进。</p><p>$O(VN)$的算法<br>多重背包问题同样有O(VN)的算法。这个算法基于基本算法的状态转移方程，但应用单调队列的方法使每个状态的值可以以均摊O(1)的时间求解。由于用单调队列优化的DP已超出了NOIP的范围，故本文不再展开讲解。我最初了解到这个方法是在楼天成的“男人八题”幻灯片上。</p><p>小结<br>这里我们看到了将一个算法的复杂度由 $O(V<em>∑n[i])$ 改进到 $O(V</em>∑log n[i])$ 的过程，还知道了存在应用超出NOIP范围的知识的O(VN)算法。希望你特别注意“拆分物品”的思想和方法，自己证明一下它的正确性，并用尽量简洁的程序来实现。</p><h2 id="混合三种背包问题"><a href="#混合三种背包问题" class="headerlink" title="混合三种背包问题"></a>混合三种背包问题</h2><p>问题:<br>如果将P01、P02、P03混合起来。也就是说，有的物品只可以取一次（01背包），有的物品可以取无限次（完全背包），有的物品可以取的次数有一个上限（多重背包）。应该怎么求解呢？</p><p>01背包与完全背包的混合<br>考虑到在P01和P02中最后给出的伪代码只有一处不同，故如果只有两类物品：一类物品只能取一次，另一类物品可以取无限次，那么只需在对每个物品应用转移方程时，根据物品的类别选用顺序或逆序的循环即可，复杂度是O(VN)。伪代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1.</span>.N</span><br><span class="line"><span class="keyword">if</span>   <span class="comment">//第i件物品是01背包</span></span><br><span class="line"><span class="keyword">for</span> v=V.<span class="number">.0</span></span><br><span class="line">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>   <span class="comment">//第i件物品是完全背包</span></span><br><span class="line"><span class="keyword">for</span> v=<span class="number">0.</span>.V</span><br><span class="line">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br></pre></td></tr></table></figure><p>再加上多重背包<br>如果再加上有的物品最多可以取有限次，那么原则上也可以给出O(VN)的解法：遇到多重背包类型的物品用单调队列解即可。但如果不考虑超过NOIP范围的算法的话，用P03中将每个这类物品分成$O(log n[i])$个01背包的物品的方法也已经很优了。</p><p>小结<br>有人说，困难的题目都是由简单的题目叠加而来的。这句话是否公理暂且存之不论，但它在本讲中已经得到了充分的体现。本来01背包、完全背包、多重背包都不是什么难题，但将它们简单地组合起来以后就得到了这样一道一定能吓倒不少人的题目。但只要基础扎实，领会三种基本背包问题的思想，就可以做到把困难的题目拆分成简单的题目来解决。</p><h2 id="二维费用的背包问题"><a href="#二维费用的背包问题" class="headerlink" title="二维费用的背包问题"></a>二维费用的背包问题</h2><p>问题:<br>二维费用的背包问题是指：对于每件物品，具有两种不同的费用；选择这件物品必须同时付出这两种代价；对于每种代价都有一个可付出的最大值（背包容量）。问怎样选择物品可以得到最大的价值。设这两种代价分别为代价1和代价2，第i件物品所需的两种代价分别为a[i]和b[i]。两种代价可付出的最大值（两种背包容量）分别为V和U。物品的价值为w[i]。</p><p>算法:<br>费用加了一维，只需状态也加一维即可。设$f[i][v][u]$表示前i件物品付出两种代价分别为v和u时可获得的最大价值。状态转移方程就是<br>$f[i][v][u]=max{f[i-1][v][u],f[i-1][v-a[i]][u-b[i]]+w[i]}$。如前述方法，可以只使用二维的数组：当每件物品只可以取一次时变量v和u采用顺序的循环，当物品有如完全背包问题时采用逆序的循环。当物品有如多重背包问题时拆分物品。</p><p>物品总个数的限制<br>有时，“二维费用”的条件是以这样一种隐含的方式给出的：最多只能取M件物品。这事实上相当于每件物品多了一种“件数”的费用，每个物品的件数费用均为1，可以付出的最大件数费用为M。换句话说，设$f[v][m]$表示付出费用v、最多选m件时可得到的最大价值，则根据物品的类型（01、完全、多重）用不同的方法循环更新，最后在f[0..V][0..M]范围内寻找答案。</p><p>另外，如果要求“恰取M件物品”，则在f[0..V][M]范围内寻找答案。</p><p>小结:<br>事实上，当发现由熟悉的动态规划题目变形得来的题目时，在原来的状态中加一纬以满足新的限制是一种比较通用的方法。希望你能从本讲中初步体会到这种方法。</p><h2 id="分组的背包问题"><a href="#分组的背包问题" class="headerlink" title="分组的背包问题"></a>分组的背包问题</h2><p>问题:<br>有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。这些物品被划分为若干组，每组中的物品互相冲突，最多选一件。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p><p>算法<br>这个问题变成了每组物品有若干种策略：是选择本组的某一件，还是一件都不选。也就是说设$f[k][v]$表示前$k$组物品花费费用v能取得的最大权值，则有$f[k][v]=max{f[k-1][v],f[k-1][v-c[i]]+w[i]}$。(物品i属于第k组)</p><p>使用一维数组的伪代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="comment">//所有的组k</span></span><br><span class="line"><span class="keyword">for</span> <span class="comment">//所有的i属于组k</span></span><br><span class="line"><span class="keyword">for</span> v=V.<span class="number">.0</span></span><br><span class="line">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;</span><br></pre></td></tr></table></figure><p>另外，显然可以对每组中的物品应用P02中“一个简单有效的优化”。</p><p>小结:<br>分组的背包问题将彼此互斥的若干物品称为一个组，这建立了一个很好的模型。不少背包问题的变形都可以转化为分组的背包问题（例如P07），由分组的背包问题进一步可定义“泛化物品”的概念，十分有利于解题。</p><h2 id="有依赖的背包问题"><a href="#有依赖的背包问题" class="headerlink" title="有依赖的背包问题"></a>有依赖的背包问题</h2><p>简化的问题:<br>这种背包问题的物品间存在某种“依赖”的关系。也就是说，i依赖于j，表示若选物品i，则必须选物品j。为了简化起见，我们先设没有某个物品既依赖于别的物品，又被别的物品所依赖；另外，没有某件物品同时依赖多件物品。</p><p>算法:<br>这个问题由NOIP2006金明的预算方案一题扩展而来。遵从该题的提法，将不依赖于别的物品的物品称为“主件”，依赖于某主件的物品称为“附件”。由这个问题的简化条件可知所有的物品由若干主件和依赖于每个主件的一个附件集合组成。</p><p>按照背包问题的一般思路，仅考虑一个主件和它的附件集合。可是，可用的策略非常多，包括：一个也不选，仅选择主件，选择主件后再选择一个附件，选择主件后再选择两个附件……无法用状态转移方程来表示如此多的策略。（事实上，设有$n$个附件，则策略有$2^{n+1}$个，为指数级。）</p><p>考虑到所有这些策略都是互斥的（也就是说，你只能选择一种策略），所以一个主件和它的附件集合实际上对应于P06中的一个物品组，每个选择了主件又选择了若干个附件的策略对应于这个物品组中的一个物品，其费用和价值都是这个策略中的物品的值的和。但仅仅是这一步转化并不能给出一个好的算法，因为物品组中的物品还是像原问题的策略一样多。</p><p>再考虑P06中的一句话：可以对每组中的物品应用P02中“一个简单有效的优化”。这提示我们，对于一个物品组中的物品，所有费用相同的物品只留一个价值最大的，不影响结果。所以，我们可以对主件i的“附件集合”先进行一次01背包，得到费用依次为$0..V-c[i]$所有这些值时相应的最大价值$f[0..V-c[i]]$。那么这个主件及它的附件集合相当于$V-c[i]+1$个物品的物品组，其中费用为$c[i]+k$的物品的价值为$f[k]+w[i]$。也就是说原来指数级的策略中有很多策略都是冗余的，通过一次01背包后，将主件i转化为 $V-c[i]+1$个物品的物品组，就可以直接应用P06的算法解决问题了。</p><p>更一般的问题是：依赖关系以图论中“森林”的形式给出（森林即多叉树的集合），也就是说，主件的附件仍然可以具有自己的附件集合，限制只是每个物品最多只依赖于一个物品（只有一个主件）且不出现循环依赖。</p><p>解决这个问题仍然可以用将每个主件及其附件集合转化为物品组的方式。唯一不同的是，由于附件可能还有附件，就不能将每个附件都看作一个一般的01 背包中的物品了。若这个附件也有附件集合，则它必定要被先转化为物品组，然后用分组的背包问题解出主件及其附件集合所对应的附件组中各个费用的附件所对应的价值。</p><p>事实上，这是一种树形DP，其特点是每个父节点都需要对它的各个儿子的属性进行一次DP以求得自己的相关属性。这已经触及到了“泛化物品”的思想。看完P08后，你会发现这个“依赖关系树”每一个子树都等价于一件泛化物品，求某节点为根的子树对应的泛化物品相当于求其所有儿子的对应的泛化物品之和。</p><p>小结:<br>NOIP2006的那道背包问题我做得很失败，写了上百行的代码，却一分未得。后来我通过思考发现通过引入“物品组”和“依赖”的概念可以加深对这题的理解，还可以解决它的推广问题。用物品组的思想考虑那题中极其特殊的依赖关系：物品不能既作主件又作附件，每个主件最多有两个附件，可以发现一个主件和它的两个附件等价于一个由四个物品组成的物品组，这便揭示了问题的某种本质。</p><p>我想说：失败不是什么丢人的事情，从失败中全无收获才是。</p><h2 id="泛化物品"><a href="#泛化物品" class="headerlink" title="泛化物品"></a>泛化物品</h2><p>定义:<br>考虑这样一种物品，它并没有固定的费用和价值，而是它的价值随着你分配给它的费用而变化。这就是泛化物品的概念。</p><p>更严格的定义之。在背包容量为V的背包问题中，泛化物品是一个定义域为0..V中的整数的函数h，当分配给它的费用为v时，能得到的价值就是$h(v)$。</p><p>这个定义有一点点抽象，另一种理解是一个泛化物品就是一个数组$h[0..V]$，给它费用v，可得到价值h[V]。</p><p>一个费用为c价值为w的物品，如果它是01背包中的物品，那么把它看成泛化物品，它就是除了h(c)=w其它函数值都为0的一个函数。如果它是完全背包中的物品，那么它可以看成这样一个函数，仅当v被c整除时有 $h(v)=v/c<em>w$ ，其它函数值均为0。如果它是多重背包中重复次数最多为n的物品，那么它对应的泛化物品的函数有 $h(v)=v/c</em>w$ 仅当v被c整除且 $v/c&lt;=n$ ，其它情况函数值均为0。</p><p>一个物品组可以看作一个泛化物品h。对于一个0..V中的v，若物品组中不存在费用为v的的物品，则$h(v)=0$，否则$h(v)$为所有费用为v的物品的最大价值。P07中每个主件及其附件集合等价于一个物品组，自然也可看作一个泛化物品。</p><p>泛化物品的和</p><p>如果面对两个泛化物品h和l，要用给定的费用从这两个泛化物品中得到最大的价值，怎么求呢？事实上，对于一个给定的费用v，只需枚举将这个费用如何分配给两个泛化物品就可以了。同样的，对于0..V的每一个整数v，可以求得费用v分配到h和l中的最大价值f(v)。也即$f(v)=max{h(k) +l(v-k)|0&lt;=k&lt;=v}$。可以看到，f也是一个由泛化物品h和l决定的定义域为0..V的函数，也就是说，f是一个由泛化物品h和 l决定的泛化物品。</p><p>由此可以定义泛化物品的和：h、l都是泛化物品，若泛化物品f满足$f(v)=max{h(k)+l(v-k)|0&lt;=k&lt;=v}$，则称f是h与l的和，即f=h+l。这个运算的时间复杂度是O(V^2)。</p><p>泛化物品的定义表明：在一个背包问题中，若将两个泛化物品代以它们的和，不影响问题的答案。事实上，对于其中的物品都是泛化物品的背包问题，求它的答案的过程也就是求所有这些泛化物品之和的过程。设此和为s，则答案就是s[0..V]中的最大值。</p><p>背包问题的泛化物品<br>一个背包问题中，可能会给出很多条件，包括每种物品的费用、价值等属性，物品之间的分组、依赖等关系等。但肯定能将问题对应于某个泛化物品。也就是说，给定了所有条件以后，就可以对每个非负整数v求得：若背包容量为v，将物品装入背包可得到的最大价值是多少，这可以认为是定义在非负整数集上的一件泛化物品。这个泛化物品——或者说问题所对应的一个定义域为非负整数的函数——包含了关于问题本身的高度浓缩的信息。一般而言，求得这个泛化物品的一个子域（例如0..V）的值之后，就可以根据这个函数的取值得到背包问题的最终答案。</p><p>综上所述，一般而言，求解背包问题，即求解这个问题所对应的一个函数，即该问题的泛化物品。而求解某个泛化物品的一种方法就是将它表示为若干泛化物品的和然后求之。</p><p>小结<br>本讲可以说都是我自己的原创思想。具体来说，是我在学习函数式编程的 $Scheme$ 语言时，用函数编程的眼光审视各类背包问题得出的理论。这一讲真的很抽象，也许在“模型的抽象程度”这一方面已经超出了NOIP的要求，所以暂且看不懂也没关系。相信随着你的OI之路逐渐延伸，有一天你会理解的。</p><p>我想说：“思考”是一个OIer最重要的品质。简单的问题，深入思考以后，也能发现更多。</p><h2 id="背包问题问法的变化"><a href="#背包问题问法的变化" class="headerlink" title="背包问题问法的变化"></a>背包问题问法的变化</h2><p>以上涉及的各种背包问题都是要求在背包容量（费用）的限制下求可以取到的最大价值，但背包问题还有很多种灵活的问法，在这里值得提一下。但是我认为，只要深入理解了求背包问题最大价值的方法，即使问法变化了，也是不难想出算法的。</p><p>例如，求解最多可以放多少件物品或者最多可以装满多少背包的空间。这都可以根据具体问题利用前面的方程求出所有状态的值（f数组）之后得到。</p><p>还有，如果要求的是“总价值最小”“总件数最小”，只需简单的将上面的状态转移方程中的max改成min即可。</p><p>下面说一些变化更大的问法。</p><p>输出方案<br>一般而言，背包问题是要求一个最优值，如果要求输出这个最优值的方案，可以参照一般动态规划问题输出方案的方法：记录下每个状态的最优值是由状态转移方程的哪一项推出来的，换句话说，记录下它是由哪一个策略推出来的。便可根据这条策略找到上一个状态，从上一个状态接着向前推即可。</p><p>还是以01背包为例，方程为$f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}$。再用一个数组$g[i] [v]$，设g[i][v]=0表示推出f[i][v]的值时是采用了方程的前一项（也即f[i][v]=f[i-1][v]），g[i][v]表示采用了方程的后一项。注意这两项分别表示了两种策略：未选第i个物品及选了第i个物品。那么输出方案的伪代码可以这样写（设最终状态为f[N][V]）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i=N</span><br><span class="line">v=V</span><br><span class="line"><span class="keyword">while</span>(i&gt;<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span>(g[i][v]==<span class="number">0</span>)</span><br><span class="line">print <span class="comment">//&quot;未选第i项物品&quot;</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(g[i][v]==<span class="number">1</span>)</span><br><span class="line">print <span class="comment">//&quot;选了第i项物品&quot;</span></span><br><span class="line">v=v-c[i]</span><br></pre></td></tr></table></figure><p>另外，采用方程的前一项或后一项也可以在输出方案的过程中根据f[i][v]的值实时地求出来，也即不须纪录g数组，将上述代码中的g[i] [v]==0改成$f[i][v]==f[i-1][v]$，g[i][v]==1改成f[i][v]==f[i-1][v-c[i]]+w[i]也可。</p><p>输出字典序最小的最优方案<br>这里“字典序最小”的意思是1..N号物品的选择方案排列出来以后字典序最小。以输出01背包最小字典序的方案为例。</p><p>一般而言，求一个字典序最小的最优方案，只需要在转移时注意策略。首先，子问题的定义要略改一些。我们注意到，如果存在一个选了物品1的最优方案，那么答案一定包含物品1，原问题转化为一个背包容量为v-c[1]，物品为2..N的子问题。反之，如果答案不包含物品1，则转化成背包容量仍为V，物品为2..N的子问题。不管答案怎样，子问题的物品都是以i..N而非前所述的1..i的形式来定义的，所以状态的定义和转移方程都需要改一下。但也许更简易的方法是先把物品逆序排列一下，以下按物品已被逆序排列来叙述。</p><p>在这种情况下，可以按照前面经典的状态转移方程来求值，只是输出方案的时候要注意：从N到1输入时，如果$f[i][v]==f[i-v]$及$f[i][v]==f[i-1][f-c[i]]+w[i]$同时成立，应该按照后者（即选择了物品i）来输出方案。</p><p>求方案总数<br>对于一个给定了背包容量、物品费用、物品间相互关系（分组、依赖等）的背包问题，除了再给定每个物品的价值后求可得到的最大价值外，还可以得到装满背包或将背包装至某一指定容量的方案总数。</p><p>对于这类改变问法的问题，一般只需将状态转移方程中的max改成sum即可。例如若每件物品均是01背包中的物品，转移方程即为$f[i][v]=sum{f[i-1][v],f[i-1][v-c[i]]+w[i]}$，初始条件$f[0][0]=1$。</p><p>事实上，这样做可行的原因在于状态转移方程已经考察了所有可能的背包组成方案。</p><p>最优方案的总数<br>这里的最优方案是指物品总价值最大的方案。还是以01背包为例。</p><p>结合求最大总价值和方案总数两个问题的思路，最优方案的总数可以这样求：f[i][v]意义同前述，g[i][v]表示这个子问题的最优方案的总数，则在求f[i][v]的同时求g[i][v]的伪代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1.</span>.N</span><br><span class="line"><span class="keyword">for</span> v=<span class="number">0.</span>.V</span><br><span class="line">f[i][v]=max&#123;f[i<span class="number">-1</span>][v],f[i<span class="number">-1</span>][v-c[i]]+w[i]&#125;</span><br><span class="line">g[i][v]=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span>(f[i][v]==f[i<span class="number">-1</span>][v])</span><br><span class="line"><span class="built_in">inc</span>(g[i][v],g[i<span class="number">-1</span>][v]</span><br><span class="line"><span class="keyword">if</span>(f[i][v]==f[i<span class="number">-1</span>][v-c[i]]+w[i])</span><br><span class="line"><span class="built_in">inc</span>(g[i][v],g[i<span class="number">-1</span>][v-c[i]])</span><br></pre></td></tr></table></figure><p>如果你是第一次看到这样的问题，请仔细体会上面的伪代码。</p><p>小结<br>显然，这里不可能穷尽背包类动态规划问题所有的问法。甚至还存在一类将背包类动态规划问题与其它领域（例如数论、图论）结合起来的问题，在这篇论背包问题的专文中也不会论及。但只要深刻领会前述所有类别的背包问题的思路和状态转移方程，遇到其它的变形问法，只要题目难度还属于NOIP，应该也不难想出算法。</p><p>触类旁通、举一反三，应该也是一个OIer应有的品质吧。</p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高考数学杂题</title>
      <link href="/posts/edb66c8e.html"/>
      <url>/posts/edb66c8e.html</url>
      
        <content type="html"><![CDATA[<p>以前的笔记。</p><h2 id="一些组合题"><a href="#一些组合题" class="headerlink" title="一些组合题"></a>一些组合题</h2><h3 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h3><p>已知$(1+\dfrac{1}{2}x)^n$展开式的各项依次记为$a_1(x),a_2(x),…,a_{n+1}(x),$设函数$F(x)=\sum\limits_{k=1}^{n+1}ka_k(x)$。求证：$\forall x_1,x_2 \in [0,2],$恒有$|F(x_1)-F(x_2)|\leqslant 2^{n-1}(n+2)-1$。</p><p><strong>分析：</strong></p><p>答案中给出的解法比较繁琐，其实可以考虑用$\sum\limits$的一些化简技巧和二项式定理。</p><p>由题意 :</p><script type="math/tex; mode=display">F(x)=\sum\limits_{r=0}^n(r+1)C^r_n(\dfrac{1}{2}\ x)^r</script><p>这里把$(r+1)$展开 :</p><script type="math/tex; mode=display">F(x)=\sum\limits_{r=0}^n[rC^r_n(\dfrac{1}{2}\ x)^r+C^r_n(\dfrac{1}{2}\ x)^r]</script><script type="math/tex; mode=display">F(x)=\sum\limits_{r=1}^nrC^r_n(\dfrac{1}{2}\ x)^r+\sum\limits_{r=0}^nC^r_n(\dfrac{1}{2}\ x)^r</script><p>由二项式展开注意到$\sum\limits_{r=0}^nC^r_n(\dfrac{1}{2}\ x)^r=(1+\dfrac{1}{2}\ x)^n$，并且由于$rC^r_n=nC^{r-1}_{n-1}$，我们有: </p><script type="math/tex; mode=display">F(x)=n\sum\limits_{r=1}^nC^{r-1}_{n-1}(\dfrac{1}{2}\ x)^r+(1+\dfrac{1}{2}\ x)^n</script><p>为了配凑得到二项式展开的形式，注意到: </p><script type="math/tex; mode=display">\sum\limits_{r=1}^nC^{r-1}_{n-1}(\dfrac{1}{2}\ x)^r=\dfrac{1}{2}\ x\sum\limits_{r-1=0}^{n-1}C^{r-1}_{n-1}(\dfrac{1}{2}\ x)^{r-1}</script><p>由二项式定理继续化简：</p><script type="math/tex; mode=display">F(x)=\dfrac{1}{2}\ xn(1+\dfrac{1}{2}\ x)^{n-1}+(1+\dfrac{1}{2}\ x)^{n}</script><p>最终得到: </p><script type="math/tex; mode=display">F(x)=(1+\dfrac{1}{2}\ x)^{n-1}[\dfrac{1}{2}\ x(n+1)+1]</script><p>得到$F(x)$的表达式，根据单调性，命题成立。</p><p>另外，还有一种方法，不用求公式也可以证出来，但是很难想到。</p><h3 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h3><p>现有一只青蛙，初始时在$\text{n}$号荷叶上。当祂某一时刻在$\text{k}$号荷叶上时，下一时刻江等概率地随机跳到$1,2,…,k$号荷叶之一上，直至跳到$\text{1}$号荷叶为止。当$\text{n=5}$时，平均一共跳了几次？</p><p><strong>分析：</strong></p><p>设这个期望为$E(n)$，即，我们期望这个蛙在$n$的时候跳$E(n)$次可以到$1$。</p><p>先考虑跳一步会怎么样：显然这只蛙可以以$1/n$的概率跳到$1-n$的任一点。那么，这之后呢？我们设第一步以$1/n$的概率跳到了$k$，<strong>之后这只蛙就要再跳$E(k)$次到终点</strong>。</p><p>得到递归方程：</p><script type="math/tex; mode=display">\begin{cases}E(n)=\dfrac{1}{n}(\sum\limits_{r=1}^nE(i)+n) \\E(1)=0\end{cases}</script><p>代入数据解之即可。</p><h3 id="例三"><a href="#例三" class="headerlink" title="例三"></a>例三</h3><p>已知$\text{A}$与$\text{B}$是集合$\{1,2,,3,\cdots,100 \}$的两个子集，<br>满足:$\text{A}$与$\text{B}$的元素个数相同，且$A\bigcap B=\varnothing .$若$n \in A$时，总有$2n+2 \in B.$试问：集合$A\bigcup B$中最多有多少个元素?</p><p><strong>分析：</strong></p><p>建立一个从$\text{A}$到$\text{B}$的映射:）</p><script type="math/tex; mode=display">f:x\rightarrow2x+2</script><p>因为$\forall n\in A,$都可以通过$f$映射到$B,$并且容易知道这个映射是不会产生冲突的，又因为$A\bigcap B=\varnothing,A,B$元素个数相同。所以$f$建立了一一对应的关系。</p><p>首先考虑，最小的元素是放在$A$还是放在$B$？注意到$f$是将小一点的元素变大,所以最小的元素必然放在$A$集合里面。那么这个元素的象自然在$B$里面。</p><p>反复进行这样的过程：找出未被标记的最小元素放到$A$里面，这个元素的象放到$B$里面，然后标记这两个元素。</p><h3 id="错排问题"><a href="#错排问题" class="headerlink" title="错排问题"></a>错排问题</h3><p>例：元旦前夕某宿舍的四位同学各写一张贺卡先集中起来，然后每人从中拿一张别人送出的贺卡，则四张贺卡的不同分配方案有多少种？</p><p><strong>分析：</strong></p><p>考虑容斥。$\text{PS:}$<a href="https://oi-wiki.org/math/inclusion-exclusion-principle/">《容斥原理》</a></p><p>由容斥的思想，多加的减回去，然后又多减了，再加回去…列出式子：</p><script type="math/tex; mode=display">A_4^4-A_3^3C_4^1+A_2^2C_4^2-A_1^1C_4^3+A_0^0C_4^4</script><p>例题解决，考虑更一般的情况：$n$个有序元素，全部改变其位置的排列数是多少？</p><p>设$f(n)$表示$n$个元素全部错位的排列数，容斥一下得到：</p><script type="math/tex; mode=display">f(n)=\sum\limits_{k=0}^n(-1)^kA_{n-k}^{n-k}C_n^k</script><p>化简之后就得到了那个公式。</p><p>另外，也可以通过动态规划得到递推关系，参考：<a href="https://www.luogu.org/blog/P6174/post-cuo-pai">小学生都能看懂的错排问题解析</a>。不过由递推式得到公式似乎并不容易，wikipedia上有较为详细的推导。</p><h2 id="一些几何题"><a href="#一些几何题" class="headerlink" title="一些几何题"></a>一些几何题</h2><h3 id="例一-1"><a href="#例一-1" class="headerlink" title="例一"></a>例一</h3><p>已知直线$y=a$交抛物线$y=x^2$于$\text{A,B}$两点，若该抛物线上存在点$\text{C,}$使得$\angle \text{ACB}$为直角，则实数$a$的取值范围是?</p><p><strong>分析：</strong></p><p>直角转化为圆相关，注意到二次函数会在远处的导数趋向于$+\infty$，但仅仅是趋向——而圆不同，圆的“左顶点”处是竖直下来的，所以如果$a$很大，绝对是可行的，所以$a$的范围一定是某个数到正无穷，找到这个特殊情况即可。</p><h3 id="例二-1"><a href="#例二-1" class="headerlink" title="例二"></a>例二</h3><p>已知椭圆$\text{C:}\dfrac{x^2}{4}+ \dfrac{y^2}{3}=1$的左右焦点分别为$F_1,F_2,$点$A$在椭圆上且满足$AF_2 \perp F_1F_2$.若$P$是椭圆上的动点，则$\overrightarrow{F_1P}\cdot \overrightarrow{F_2A}$的最大值是？</p><p><strong>分析：</strong></p><p>善用向量乘法的定义（投影那部分）可以看出答案，很多类似的题目也同理。答案是$\dfrac{3}{2} \sqrt{3}$.</p><h3 id="例三-1"><a href="#例三-1" class="headerlink" title="例三"></a>例三</h3><p>已知$A,B,C,D$四点共面$,BC=2$，$AB^2+AC^2=20,$ $\overrightarrow{CD}=3\overrightarrow{CA},$则$|\overrightarrow{BD}|$的最大值为?</p><p><strong>分析：</strong>（袋鼠角度）</p><p>由余弦定理：$AB^2+AC^2-2AB\cdot ACcosA=4$</p><p>所以$AB\cdot CDcosA=24$</p><p>${BD}^2=AB^2+\dfrac{4}{9}CD^2+\dfrac{4}{3}BA\cdot CDcosA$</p><p>即：$BD^2=AB^2+\dfrac{4}{9}CD^2+32$</p><p>又因为$AB^2+\dfrac{1}{9}CD^2=20$</p><p>所以$BD^2=52+\dfrac{1}{3}CD^2$</p><p>由三角形三边关系：$BD+2\geqslant CD$得：</p><script type="math/tex; mode=display">BD+2\geqslant \sqrt{3BD^2-52\cdot 3}</script><p>化简得：$BD^2-2BD-80\leqslant 0$</p><p>得到$BD\in[0,10],$故$BD_{max}=10$。</p><p><strong>拓展：</strong>事实上可以得到$BD \in [8,10]$。</p><h3 id="例四"><a href="#例四" class="headerlink" title="例四"></a>例四</h3><p>如果$\text{A}$的座標為$(1,1),F_1$是橢圓$\dfrac{x^2}{9}+\dfrac{y^2}{5}=1$的左焦點，$\text{P}$是橢圓上的動點，則$|PA|+|PF_1|$的最小值為？</p><p><strong>分析：</strong></p><p>這道簡單題放在這裡給自己提個醒：遇到圓錐曲線題不要一昧想著計算。答案是$6-\sqrt2.$</p><h3 id="例五"><a href="#例五" class="headerlink" title="例五"></a>例五</h3><p>在平面直角坐标系$xOy$中，圆$\text{C1:}(x-1)^2+y^2=2,$圆$\text{C2:}(x-m)^2+(y+m)^2=m^2,$若圆$\text{C2}$上存在点$P$满足：过点$P$向圆$\text{C1}$作两条切线$PA,PB,$切点为$A,B,\triangle ABP$的面积为$\text{1},$则正数$m$的取值范围是?</p><p><strong>分析：</strong></p><p>以下是答案的思路。</p><p>注意到$\triangle ABP$的面积是定值，从而点$P$的位置应该具有某种确定性，故首先由$\triangle ABP$的面积来确定点$P$所满足的条件，进而江问题转化为圆与圆有公共点的问题来加以处理。</p><p>设$P(x,y),$设$PA,PB$的夹角为$2\theta.$</p><p>$\triangle ABP$的面积$S=\dfrac{1}{2}PA^2sin2\theta.$</p><script type="math/tex; mode=display">S=PA^2\cdot sin\theta \cdot cos\theta</script><script type="math/tex; mode=display">S=PA^2\cdot \dfrac{\sqrt2}{PC_1}\cdot \dfrac{PA}{PC_1}=1</script><script type="math/tex; mode=display">\sqrt2 PA^3=PC_1^2=PA^2+2</script><script type="math/tex; mode=display">\therefore PA=\sqrt2,PC_1=2</script><p>$\therefore$点$P$在圆$(x-1)^2+y^2=4$上。</p><p>根据圆与圆的位置关系可知：</p><script type="math/tex; mode=display">|m-2|\leqslant \sqrt{(m-1)^2+m^2}\leqslant m+2</script><p>解得$1\leqslant m\leqslant 3+2\sqrt3$</p><h2 id="矩阵在圆锥曲线中的应用"><a href="#矩阵在圆锥曲线中的应用" class="headerlink" title="矩阵在圆锥曲线中的应用"></a>矩阵在圆锥曲线中的应用</h2><p>高二学完矩阵的时候就有这种想法，用矩阵建立一个平面点集到自身的映射，根据我的瞎猜只能方便的处理斜率相关的问题，如若涉及到长度或是角度关系用它好像不行(?)</p><p>对于椭圆$\dfrac{x^2}{a^2}+\dfrac{y^2}{b^2}=1,(a&gt;b&gt;0)$我们采用矩阵$T=\begin{pmatrix}\dfrac{b}{a}&amp;0\\0&amp;1\end{pmatrix}$建立一个平面点集到自身的映射(这里我是受到$hash$技术的启发)。同时注意到我们找到的矩阵不可以将不同的点映射到同一个点，这体现为：<strong>这个矩阵必须是可逆的。</strong></p><p>显然$T=\begin{pmatrix}\dfrac{b}{a}&amp;0\\0&amp;1\end{pmatrix}$是可逆的。<br>假设两点$A(x_1,y_1),B(x_2,y_2)$在椭圆上，则$k_{AB}=\dfrac{y_1-y_2}{x_1-x_2}$.</p><p>进行变换$T:$ $A-&gt;A^{‘},B-&gt;B^{‘}$。</p><script type="math/tex; mode=display">\begin{pmatrix}\dfrac{b}{a}&0\\0&1\end{pmatrix}A=A'=(\dfrac{bx_1}{a},y_1)</script><script type="math/tex; mode=display">\begin{pmatrix}\dfrac{b}{a}&0\\0&1\end{pmatrix}B=B'=(\dfrac{bx_2}{a},y_2)</script><p>于是得到：</p><script type="math/tex; mode=display">k_{A'B'}=\dfrac{y_1'-y_2'}{x_1'-x_2'}=\dfrac{y_1-y_2}{\dfrac{bx_1}{a}-\dfrac{bx_2}{a}}=\dfrac{a}{b}k_{AB}</script><p>找到了这两者之间的关系，就可以很方便地解决一些问题。</p><h3 id="例一-2"><a href="#例一-2" class="headerlink" title="例一"></a>例一</h3><p><img src="https://i.loli.net/2018/12/01/5c028172d01d1.png" alt="11-1"></p><p>在平面直角坐标系$xOy$中，椭圆$\text{E}:\dfrac{x^2}{a^2}+\dfrac{y^2}{b^2}=1(a&gt;b&gt;0)$的离心率为$\dfrac{\sqrt2}{2},$直线$l:y=\dfrac{1}{2}x$与椭圆$\text{E}$相交于$\text{A,B}$两点，$AB=2 \sqrt5,C,D$是椭圆$\text{E}$上异于$\text{A,B}$的两点，且直线$AC,BD$相交于点$M,$直线$AD,BC$相交于点$N$。<br>求证$MN$的斜率为定值。</p><p><strong>分析：</strong></p><p>采用上述矩阵将椭圆变换成圆之后我们发现$M’N’\perp A’B’$那么很容易得到$k_{A’B’}$,然后$k_{M’N’}$也出来了，于是就可以直接得到$k_{MN}$。</p><p><strong>Hint：使用矩阵进行映射处理椭圆，有时可以大大简化计算(有时不可以，具体情况具体分析)。特别注意在处理角度或长度问题时，此种方法不再适用。（因为不方便处理，甚至是无法解决，因为对应的方程组不可解(?)），显然，这种方法不能得全分。</strong></p><h2 id="一些函数题"><a href="#一些函数题" class="headerlink" title="一些函数题"></a>一些函数题</h2><h3 id="例一-3"><a href="#例一-3" class="headerlink" title="例一"></a>例一</h3><p>已知函数$f(x)=\dfrac{log_2x-1}{log_2x+1},$若$f(x_1)+f(2x_2)=1$(其中$x_1,x_2$均大于$2$)，则$f(x_1x_2)$的最小值为?</p><p><strong>分析：</strong>这题本不难，但是因为一些奇怪的原因没有做出来。</p><p>$\because f(x_1)+f(2x_2)=1$</p><p>$\therefore\dfrac{log_2x_1-1}{log_2x_1+1}+\dfrac{log_22x_2-1}{log_22x_2+1}=1$</p><p>$\therefore \dfrac{log_2x_1-1}{log_2x_1+1}+\dfrac{log_2x_2}{log_2x_2+2}=1$</p><p>化简得$log_2x_2=\dfrac{4}{log_2x_1-1}$</p><p>$\therefore log_2(x_1x_2)=log_2x_1+log_2x_2$</p><p>$log_2(x_1x_2)=log_2x_1+\dfrac{4}{log_2x_1-1}\geqslant 5$</p><p>当且仅当$log_2x_1=3$时等号成立。</p><p>$\therefore f(x_1x_2)=\dfrac{log_2(x_1x_2)-1}{log_2(x_1x_2)+1}$</p><p>$\therefore f(x_1x_2)=1-\dfrac{2}{log_2(x_1x_2)+1}\geqslant\dfrac{2}{3}$</p><h3 id="例二-2"><a href="#例二-2" class="headerlink" title="例二"></a>例二</h3><p>函数$f(x)=\sqrt{x-3}+ \sqrt{12-3x}$的值域为?</p><p><strong>分析(三角换元)：</strong>要注意定义域。</p><p>$D=[3,4],$则$(x-3) \in[0,1]$</p><p>令$x-3=sin^2 \theta,\theta \in [0,\dfrac{\pi}{2}],$则：</p><script type="math/tex; mode=display">f(x)=\sqrt{x-3}+\sqrt{3(4-x)}</script><script type="math/tex; mode=display">f(x)=sin \theta+ \sqrt{3(1-sin^2 \theta)}</script><script type="math/tex; mode=display">f(x)=sin \theta+ \sqrt{3}cos \theta=2sin( \theta+ \dfrac{ \pi}{3})</script><p>至此，问题已不难解决。</p><h3 id="洛必达法则的应用"><a href="#洛必达法则的应用" class="headerlink" title="洛必达法则的应用"></a>洛必达法则的应用</h3><h4 id="洛必达法则1："><a href="#洛必达法则1：" class="headerlink" title="洛必达法则1："></a>洛必达法则1：</h4><p>若(1)$\lim\limits_{x\to a(\infty)}f(x)=\lim\limits_{x\to a(\infty)}g(x)=0$；(2)在点$a$的某一邻域(不含点$a$)(或$|a|$充分大)内$f’(x),g’(x)$都存在且$g’(x)\ne 0$；(3)$\lim\limits_{x\to a(\infty)}\dfrac{f’(x)}{g’(x)}$存在(或无穷大)，则$\lim\limits_{x\to a(\infty)}\dfrac{f(x)}{g(x)}= \lim\limits_{x\to a(\infty)}\dfrac{f’(x)}{g’(x)}.$</p><h4 id="洛必达法则2："><a href="#洛必达法则2：" class="headerlink" title="洛必达法则2："></a>洛必达法则2：</h4><p>若(1)$\lim\limits_{x\to a(\infty)}f(x)=\lim\limits_{x\to a(\infty)}g(x)=\infty$；(2)在点$a$的某一邻域(不含点$a$)(或$|a|$充分大)内$f’(x),g’(x)$都存在且$g’(x)\ne 0$；(3)$\lim\limits_{x\to a(\infty)}\dfrac{f’(x)}{g’(x)}$存在(或无穷大)，则$\lim\limits_{x\to a(\infty)}\dfrac{f(x)}{g(x)}= \lim\limits_{x\to a(\infty)}\dfrac{f’(x)}{g’(x)}.$</p><h3 id="例三-2"><a href="#例三-2" class="headerlink" title="例三"></a>例三</h3><p>设函数$f(x)=x-\ln(x+\sqrt{1+x^2}).$若$x\geqslant0$时，恒有$f(x)\leqslant ax^3,$试求实数$a$的取值范围。</p><p><strong>分析：</strong></p><p>求导发现这是一个奇函数，又$f(x)$单调增。猜想$x\to0$时$(ax^3)’\geqslant f’(x).$然后洛必达：</p><script type="math/tex; mode=display">3a\geqslant \lim\limits_{\varepsilon\to0}\dfrac{1}{\varepsilon ^2}(1-\dfrac{1}{\sqrt{1+\varepsilon ^2}})</script><script type="math/tex; mode=display">\lim\limits_{\varepsilon\to0}\dfrac{1}{\varepsilon ^2}(1-\dfrac{1}{\sqrt{1+\varepsilon ^2}})=\dfrac{1}{2}</script><script type="math/tex; mode=display">\therefore a\geqslant \dfrac{1}{6}</script><p>这样就避免了分类讨论。</p><h2 id="一些不等式"><a href="#一些不等式" class="headerlink" title="一些不等式"></a>一些不等式</h2><h3 id="例一-4"><a href="#例一-4" class="headerlink" title="例一"></a>例一</h3><p>若实数$x,y$满足$2x^2+xy-y^2=1,$则$\dfrac{x-2y}{5x^2-2xy+2y^2}$的最大值为?</p><p><strong>分析：</strong></p><p>给出的条件中，独立变量有两个，因为用$x$表示$y$或用$y$表示$x$均不方便，可引入第三个变量来表示$x,y$.</p><p>首先因式分解，由$2x^2+xy-y^2=1,$得$(2x-y)(x+y)=1,$设$2x-y=t,x+y=\dfrac{1}{t},$其中$t\ne 0.$</p><p>解得：</p><script type="math/tex; mode=display">\begin{cases}x=\dfrac{1}{3}t+\dfrac{1}{3t}\\y=\dfrac{2}{3t}-\dfrac{1}{3}t\end{cases}</script><p>現在，已經轉化為一道比較常規的題了。</p><p><strong>拓展：</strong>试求$5x^2-2xy+2y^2$的最值。(hint:构造齐次式)</p><h3 id="Bernoulli不等式"><a href="#Bernoulli不等式" class="headerlink" title="Bernoulli不等式"></a>Bernoulli不等式</h3><script type="math/tex; mode=display">(1+x)^n\geqslant 1+nx(x\geqslant -1)</script><p>可以用数学归纳法证明，或许可以用于放缩。</p><h2 id="一些数列题"><a href="#一些数列题" class="headerlink" title="一些数列题"></a>一些数列题</h2><h3 id="例一-2015江苏卷"><a href="#例一-2015江苏卷" class="headerlink" title="例一 (2015江苏卷)"></a>例一 (2015江苏卷)</h3><p>设$a_1,a_2,a_3,a_4$是各项为正数且公差为$d(d\ne 0)$的等差数列。问是否存在$a_1,d$使得$a_1,a_2^2,a_3^3,a_4^4$依次构成等比数列?</p><p><strong>分析：</strong></p><p>本题主要是计算，计算没问题就行。</p><p>先假设存在。则$q=$</p><script type="math/tex; mode=display">\dfrac{(a_1+d)^2}{a_1}=\dfrac{(a_1+2d)^3}{(a_1+d)^2}=\dfrac{(a_1+3d)^4}{(a_1+2d)^3}</script><script type="math/tex; mode=display">\therefore (a_1+d)^2(a_1+3d)^4=(a_1+2d)^6</script><script type="math/tex; mode=display">\therefore d^2+9a_1d+a_1^2=0</script><p>且$(a_1+d)^2=-7a_1d.$</p><script type="math/tex; mode=display">\therefore q=-7d=\dfrac{(a_1+2d)^3}{-7a_1d}</script><p>$\mathcal{A}:$当$d&gt;0$时，易知$q&lt;0,$不成立。</p><p>$\mathcal{B}:$当$d&lt;0$时</p><script type="math/tex; mode=display">\because \dfrac{(a_1+d)^2}{a_1}=\dfrac{(a_1+2d)^3}{(a_1+d)^2}</script><script type="math/tex; mode=display">\therefore d^3=2a_1^3+4a_1d^2</script><p>显然右式大于零，左式小于零，矛盾。</p><p>综上，不存在$a_1,d$使得$a_1,a_2^2,a_3^3,a_4^4$依次构成等比数列。</p><h3 id="例二-3"><a href="#例二-3" class="headerlink" title="例二"></a>例二</h3><p>已知$\{a_n\}$是公差为$d$的等差数列，$\{b_n\}$是公比为$q$的等比数列，$q\ne1 \&amp; q\ne -1,$正整数组$E=(m,p,r)(m&lt;p&lt;r).$</p><p>问：若数组$E$中的三个数构成公差大于$1$的等差数列，且$a_m+b_p=a_p+b_r=a_r+b_m$，求$q$的最大值。</p><p><strong>分析：</strong></p><p>先用通项公式表示$b_1$,设数组$E$的公差为$d’$，然后。。。具体来讲是这样的(年代久远的混乱的草稿中硕果仅存的步骤)：</p><script type="math/tex; mode=display">\begin{cases}(p-1)d+b_1q^{r-1}=(r-1)d+b_1q^{m-1}\\(m-1)d+b_1q^{p-1}=(p-1)d+b_1q^{r-1}\end{cases}</script><script type="math/tex; mode=display">\therefore (r-m)d=b_1(q^{p-1}-q^{m-1})</script><script type="math/tex; mode=display">\therefore b_1=\dfrac{(r-m)d}{q^{p-1}-q^{m-1}}</script><p>回代到最上面的那个式子：</p><script type="math/tex; mode=display">\dfrac{q^{p-1}-q^{r-1}}{q^{p-1}-q^{m-1}}=\dfrac{p-m}{r-m}</script><script type="math/tex; mode=display">\because \begin{cases}p-m=d'\\r-m=2d'\end{cases}</script><script type="math/tex; mode=display">\dfrac{q^{d'}-q^{2d'}}{q^{d'}-1}=\dfrac{d'}{2d'}=\dfrac{1}{2}</script><p>解得$q^{d’}=-\dfrac{1}{2}$或$q^{d’}=1$（舍）</p><script type="math/tex; mode=display">\because d'>1\& d'\in Z</script><script type="math/tex; mode=display">\therefore d'_{min}=3</script><script type="math/tex; mode=display">\therefore q_{max}=\sqrt[3]{-\dfrac{1}{2}}</script>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高中数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滤镜-锐黑</title>
      <link href="/posts/c8cced9.html"/>
      <url>/posts/c8cced9.html</url>
      
        <content type="html"><![CDATA[<p>好，支持四通bridgeman。</p><p><img src="https://s2.loli.net/2022/10/14/cYA86SWIyeMQfiu.jpg" alt="9-1.jpg" title="博主真迹"></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>板子备忘</title>
      <link href="/posts/9e22caea.html"/>
      <url>/posts/9e22caea.html</url>
      
        <content type="html"><![CDATA[<p>以前用过的算法模板。</p><h2 id="线性筛素数"><a href="#线性筛素数" class="headerlink" title="线性筛素数"></a>线性筛素数</h2><p>给定一个范围N，你需要处理M个某数字是否为质数的询问（每个数字均在范围1-N内）</p><p>在没有读入优化的情况下，这份代码提交到洛谷上速度尚可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">10000100</span>;</span><br><span class="line"><span class="type">bool</span> composite[MAXN];</span><br><span class="line"><span class="type">int</span> prime[MAXN],tail;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_prime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    composite[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">    composite[<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!composite[i])prime[tail++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;tail&amp;&amp;i*prime[j]&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            composite[i*prime[j]]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i%prime[j]))<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,t,temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;t);</span><br><span class="line">    <span class="built_in">get_prime</span>(n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">        <span class="keyword">if</span>(composite[temp])<span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="KMP字符串匹配"><a href="#KMP字符串匹配" class="headerlink" title="KMP字符串匹配"></a>KMP字符串匹配</h2><blockquote><p>KMP：一个人能走的多远不在于他在顺境时能走的多快，而在于他在逆境时多久能找到曾经的自己。</p></blockquote><p>对着ryf的博客思路自己写的代码实现，直观但是效率低（会超时）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tsize, ssize;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; mynext;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getNext</span><span class="params">(std::string &amp;t)</span></span>&#123;</span><br><span class="line">    mynext.<span class="built_in">resize</span>(tsize);</span><br><span class="line">    mynext[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;tsize; i++)&#123;</span><br><span class="line">        <span class="type">int</span> k=mynext[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">while</span>((t[i] != t[k]) &amp;&amp; (k!=<span class="number">0</span>))k=mynext[k<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(t[i] == t[k])mynext[i]=k+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> mynext[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">output</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kmp</span><span class="params">(std::string &amp;s, std::string &amp;t, <span class="type">int</span> startpos)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = startpos, j = <span class="number">0</span>;</span><br><span class="line">    ssize = s.<span class="built_in">size</span>(), tsize = t.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">getNext</span>(t);</span><br><span class="line">    <span class="keyword">while</span>(s[i]!=t[<span class="number">0</span>])&#123;i++;&#125;</span><br><span class="line">    <span class="type">int</span> icopy = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(i+tsize&lt;=ssize)&#123;</span><br><span class="line">        <span class="keyword">while</span>(s[i]!=t[<span class="number">0</span>] &amp;&amp; i+tsize&lt;ssize)&#123;i++; icopy=i;&#125;</span><br><span class="line">        <span class="keyword">if</span>(s[icopy]==t[j])&#123;</span><br><span class="line">            icopy++, j++;</span><br><span class="line">            <span class="keyword">if</span>(j==tsize)&#123;</span><br><span class="line">                <span class="built_in">output</span>(i);</span><br><span class="line">                i += j-mynext[j<span class="number">-1</span>];</span><br><span class="line">                icopy = i; j = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(i+tsize&gt;=ssize)<span class="keyword">return</span>;</span><br><span class="line">            i += j-mynext[j<span class="number">-1</span>];</span><br><span class="line">            icopy = i; j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::string s, t;</span><br><span class="line">    std::cin&gt;&gt;s&gt;&gt;t;</span><br><span class="line">    <span class="built_in">kmp</span>(s, t, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i = mynext.<span class="built_in">begin</span>(); i != mynext.<span class="built_in">end</span>(); i++)&#123;</span><br><span class="line">        std::cout&lt;&lt;*i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提交入口： <a href="https://www.luogu.com.cn/problem/P3375">https://www.luogu.com.cn/problem/P3375</a></p><p><img src="https://bu.dusays.com/2023/01/21/63cb64be3a38a.gif" alt="9-0.gif"></p><p>根据<a href="https://www.bilibili.com/video/BV1PD4y1o7nd">教学视频</a>改进的可用版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXL = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> s[MAXL], t[MAXL];</span><br><span class="line"><span class="type">int</span> mynext[MAXL], ssize, tsize;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">output</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//题目要求下标从1开始</span></span><br><span class="line">    <span class="comment">//仅在输出时作相应处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*   需要其他形式的KMP可以由以下代码改：</span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    void getNext(int* next, const string&amp; s) &#123;</span></span><br><span class="line"><span class="comment">        int j = 0;</span></span><br><span class="line"><span class="comment">        next[0] = 0;</span></span><br><span class="line"><span class="comment">        for(int i = 1; i &lt; s.size(); i++) &#123;</span></span><br><span class="line"><span class="comment">            while (j &gt; 0 &amp;&amp; s[i] != s[j]) &#123;</span></span><br><span class="line"><span class="comment">                j = next[j - 1];</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            if (s[i] == s[j]) &#123;</span></span><br><span class="line"><span class="comment">                j++;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            next[i] = j;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    int strStr(string haystack, string needle) &#123;</span></span><br><span class="line"><span class="comment">        if (needle.size() == 0) &#123;</span></span><br><span class="line"><span class="comment">            return 0;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        int next[needle.size()];</span></span><br><span class="line"><span class="comment">        getNext(next, needle);</span></span><br><span class="line"><span class="comment">        int j = 0;</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; haystack.size(); i++) &#123;</span></span><br><span class="line"><span class="comment">            while(j &gt; 0 &amp;&amp; haystack[i] != needle[j]) &#123;</span></span><br><span class="line"><span class="comment">                j = next[j - 1];</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            if (haystack[i] == needle[j]) &#123;</span></span><br><span class="line"><span class="comment">                j++;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            if (j == needle.size() ) &#123;</span></span><br><span class="line"><span class="comment">                return (i - needle.size() + 1);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return -1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getNext</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    mynext[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;tsize; i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; t[i]!=t[j]) j=mynext[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(t[i]==t[j]) j++;</span><br><span class="line">        mynext[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kmpfind</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tsize)&#123;<span class="built_in">printf</span>(<span class="string">&quot;寻找内容为空串！\n&quot;</span>); <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="built_in">getNext</span>();</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ssize; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; s[i] != t[j]) &#123;</span><br><span class="line">            j = mynext[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==t[j]) j++;</span><br><span class="line">        <span class="keyword">if</span> (j==tsize) &#123;</span><br><span class="line">            <span class="built_in">output</span>(i-tsize+<span class="number">1</span>);</span><br><span class="line">            j = mynext[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,s,t);</span><br><span class="line">    ssize=<span class="built_in">strlen</span>(s); tsize=<span class="built_in">strlen</span>(t);</span><br><span class="line">    <span class="comment">//本程序下标都是从0开始</span></span><br><span class="line">    <span class="built_in">kmpfind</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;tsize; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,mynext[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">10010</span>;</span><br><span class="line"><span class="type">int</span> uset[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">makeset</span><span class="params">(<span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)uset[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x!=uset[x])uset[x]=<span class="built_in">find</span>(uset[x]);</span><br><span class="line">    <span class="keyword">return</span> uset[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unionset</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x);</span><br><span class="line">    y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span>;</span><br><span class="line">    uset[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m; cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">makeset</span>(n+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> z,x,y;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;z,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(z==<span class="number">1</span>)<span class="built_in">unionset</span>(x,y);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(z==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Y\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;N\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自适应辛普森"><a href="#自适应辛普森" class="headerlink" title="自适应辛普森"></a>自适应辛普森</h2><p>题面：<a href="https://www.luogu.com.cn/problem/P4525">https://www.luogu.com.cn/problem/P4525</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> a,b,c,d,L,R;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">f</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (c*x+d)/(a*x+b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">simpson</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> mid = l+(r-l)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">f</span>(l)+<span class="number">4</span>*<span class="built_in">f</span>(mid)+<span class="built_in">f</span>(r))/<span class="number">6.0</span>*(r-l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">asr</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r, <span class="type">double</span> eps, <span class="type">double</span> S, <span class="type">int</span> cnt)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> mid = l+(r-l)/<span class="number">2</span>;</span><br><span class="line">    <span class="type">double</span> s1 = <span class="built_in">simpson</span>(l, mid), s2 = <span class="built_in">simpson</span>(mid, r);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(s1+s2-S)&lt;=<span class="number">15</span>*eps &amp;&amp; cnt&lt;=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> s1+s2+(s1+s2-S)/<span class="number">15.0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">asr</span>(l, mid, eps/<span class="number">2</span>, s1, cnt<span class="number">-1</span>) + <span class="built_in">asr</span>(mid, r, eps/<span class="number">2</span>, s2, cnt<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">calc</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r, <span class="type">double</span> eps)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">asr</span>(l, r, eps, <span class="built_in">simpson</span>(l,r), <span class="number">12</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf%lf%lf%lf&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d,&amp;L,&amp;R);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.6lf&quot;</span>,<span class="built_in">calc</span>(L,R,<span class="number">1e-6</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Huffman树"><a href="#Huffman树" class="headerlink" title="Huffman树"></a>Huffman树</h2><blockquote><p>参考：<a href="https://blog.csdn.net/weixin_43191865/article/details/97974221">https://blog.csdn.net/weixin_43191865/article/details/97974221</a></p></blockquote><p>一些概念：</p><ul><li>结点的带权路径长度：指的是从根结点到该结点之间的路径长度与该结点的权的乘积。</li><li>树的带权路径长度为树中所有叶子结点的带权路径长度之和，通常记作<code>WPL</code>。例如下图所示的这颗树的带权路径长度为：<code>WPL=7*1+5*2+2*3+4*3</code></li></ul><p><img src="https://s2.loli.net/2022/12/18/1CwKHR7EAjt2WUM.png" alt="9-1.png"></p><p>当用n个结点（都做叶子结点且都有各自的权值）试图构建一棵树时，如果构建的这棵树的带权路径长度最小，称这棵树为“最优二叉树”，有时也叫“赫夫曼树”或者“哈夫曼树”。在构建哈弗曼树时，只需要遵循一个原则：权重越大的结点离树根越近。</p><p>例如：3 4 5 8 ，设最后答案为ans</p><p>首先我们选3 4，合并节点，新点权值为7，并加入原序列，ans+=(3+4)</p><p><img src="https://bu.dusays.com/2023/04/02/64290c1eadee0.png" alt="9-2.png"></p><p>然后新序列中合并5和7，新点权值为12，ans+=(5+7)</p><p><img src="https://bu.dusays.com/2023/04/02/64290c1ebcd3e.png" alt="9-3.png"></p><p>最后合并12和8，新节点为20，跳出循环，ans+=(12+8)</p><p><img src="https://bu.dusays.com/2023/04/02/64290c1ecb63a.png" alt="9-4.png"></p><p>最后的哈夫曼树就是右边黑色的那棵树，答案就是ans。</p><p>对于某一个节点，因为其被合并之后的值给了新的节点，而新的节点合并的时候又会加上这个值，实际上是不断为答案作贡献的。</p><p><strong>k叉哈夫曼树：</strong> 为保证其根节点可以选到k个子树，假设节点个数为n，需要满足<code>(n-1)mod(k-1)==0</code>的条件，若不满足，为原序列<code>补0</code>。</p><p>例题：<a href="https://www.luogu.com.cn/problem/P2168">NOI2015荷马史诗</a></p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    LL w,depth;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node&amp; v)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(w!=v.w) <span class="keyword">return</span> w&gt;v.w;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> depth&gt;v.depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">std::priority_queue&lt;node&gt; qwq;</span><br><span class="line">LL n,k,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        LL tempw;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;tempw);</span><br><span class="line">        qwq.<span class="built_in">push</span>((node)&#123;tempw,<span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LL qwqsize = qwq.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span>((qwqsize<span class="number">-1</span>)%(k<span class="number">-1</span>))&#123;</span><br><span class="line">        qwq.<span class="built_in">push</span>((node)&#123;<span class="number">0</span>,<span class="number">1</span>&#125;);</span><br><span class="line">        qwqsize++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(qwqsize&gt;=k)&#123;</span><br><span class="line">        LL tw = <span class="number">0</span>,tdep = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=k; i++)&#123;</span><br><span class="line">            node tq = qwq.<span class="built_in">top</span>();</span><br><span class="line">            qwq.<span class="built_in">pop</span>(); qwqsize--;</span><br><span class="line">            tdep = <span class="built_in">MAX</span>(tdep,tq.depth);</span><br><span class="line">            tw += tq.w;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += tw;</span><br><span class="line">        qwq.<span class="built_in">push</span>((node)&#123;tw,tdep+<span class="number">1</span>&#125;);</span><br><span class="line">        qwqsize++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n%lld&quot;</span>,ans,qwq.<span class="built_in">top</span>().depth<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p>例题：<a href="https://www.luogu.com.cn/problem/P1983">https://www.luogu.com.cn/problem/P1983</a></p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">5e7</span>+<span class="number">10</span>; <span class="comment">//算出来的空间花费远比这个多，windows会阻止运行，算错了？</span></span><br><span class="line"><span class="type">int</span> tot,head[MAXN],n,m,spot[MAXN],in[MAXN],ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,next;&#125;edge[MAXM];</span><br><span class="line"><span class="type">bool</span> isspot[MAXN],has[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125; <span class="comment">//本题不应当采用这种存图方式，但我直接用has数组避免重构了</span></span><br><span class="line"></span><br><span class="line">std::queue&lt;<span class="type">int</span>&gt; qwq;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">toposort</span><span class="params">()</span></span>&#123;    <span class="comment">//这里的toposort为适应题目做了改造</span></span><br><span class="line">    <span class="type">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!in[i])&#123; </span><br><span class="line">            qwq.<span class="built_in">push</span>(i);</span><br><span class="line">            cnt1++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> x = qwq.<span class="built_in">front</span>();</span><br><span class="line">        qwq.<span class="built_in">pop</span>(); cnt1--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">            <span class="type">int</span> y=edge[i].v; in[y]--;</span><br><span class="line">            <span class="keyword">if</span>(!in[y])&#123;</span><br><span class="line">                qwq.<span class="built_in">push</span>(y);</span><br><span class="line">                cnt2++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!cnt1)&#123;ans++; cnt1=cnt2; cnt2=<span class="number">0</span>;&#125;  <span class="comment">//神之一手（雾）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> s; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s);</span><br><span class="line">        <span class="built_in">memset</span>(isspot,<span class="literal">false</span>,<span class="built_in">sizeof</span>(isspot));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=s;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;spot[j]);</span><br><span class="line">            isspot[spot[j]]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=spot[<span class="number">1</span>];j&lt;=spot[s];j++)&#123; <span class="comment">//连续站点枚举</span></span><br><span class="line">            <span class="keyword">if</span>(!isspot[j])&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=s;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(has[spot[k]][j])<span class="keyword">continue</span>;</span><br><span class="line">                    has[spot[k]][j] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">addedge</span>(spot[k],j);</span><br><span class="line">                    in[j]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">toposort</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><p>给出一个无向图，求出最小生成树，如果该图不连通，则输出orz</p><p><strong>输入格式：</strong></p><p>第一行包含两个整数N、M，表示该图共有N个结点和M条无向边。（N&lt;=5000，M&lt;=200000）</p><p>接下来M行每行包含三个整数Xi、Yi、Zi，表示有一条长度为Zi的无向边连接结点Xi、Yi</p><p><strong>输出格式：</strong></p><p>输出包含一个数，即最小生成树的各边的长度之和；如果该图不连通则输出orz</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//kruscal</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">200000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> u,v,w;&#125;edge[MAXM];</span><br><span class="line"><span class="type">int</span> uset[MAXN],n,m,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(uset[x]!=x)uset[x]=<span class="built_in">find</span>(uset[x]);</span><br><span class="line">    <span class="keyword">return</span> uset[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unionset</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x);</span><br><span class="line">    y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span>;</span><br><span class="line">    uset[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Edge x,Edge y)</span></span>&#123;<span class="keyword">return</span> x.w&lt;y.w;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        edge[i].u=x;</span><br><span class="line">        edge[i].v=y;</span><br><span class="line">        edge[i].w=z;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(edge+<span class="number">1</span>,edge+<span class="number">1</span>+m,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)uset[i]=i;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">find</span>(edge[i].u);</span><br><span class="line">        <span class="type">int</span> y=<span class="built_in">find</span>(edge[i].v);</span><br><span class="line">        <span class="keyword">if</span>(x==y)<span class="keyword">continue</span>;</span><br><span class="line">        ans+=edge[i].w;</span><br><span class="line">        <span class="built_in">unionset</span>(x,y);</span><br><span class="line">        <span class="keyword">if</span>(++cnt==n<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt&lt;n<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">&quot;orz&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单源最短路径"><a href="#单源最短路径" class="headerlink" title="单源最短路径"></a>单源最短路径</h2><p>给出一个有向图，请输出从某一点出发到所有点的最短路径长度。</p><p><strong>输入格式：</strong></p><p>第一行包含三个整数N、M、S，分别表示点的个数、有向边的个数、出发点的编号。</p><p>接下来M行每行包含三个整数Fi、Gi、Wi，分别表示第i条有向边的出发点、目标点和长度。</p><p><strong>输出格式：</strong></p><p>一行，包含N个用空格分隔的整数，其中第i个整数表示从点S出发到点i的最短路径长度（若S=i则最短路径长度为0，若从点S无法到达点i，则最短路径长度为2147483647）</p><p>$SPFA$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM 500010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 10010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,s,dis[MAXN];</span><br><span class="line"><span class="type">bool</span> inq[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,w,next;&#125;edge[MAXM];</span><br><span class="line"><span class="type">int</span> tot,head[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].w=z;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; qwq;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis[i]=INF;</span><br><span class="line">    </span><br><span class="line">    qwq.<span class="built_in">push</span>(s);</span><br><span class="line">    dis[s]=<span class="number">0</span>;inq[s]=<span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=qwq.<span class="built_in">front</span>();</span><br><span class="line">        qwq.<span class="built_in">pop</span>(); inq[x]=<span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">            <span class="type">int</span> y=edge[i].v;</span><br><span class="line">            <span class="keyword">if</span>(dis[y]&gt;dis[x]+edge[i].w)&#123;</span><br><span class="line">                dis[y]=dis[x]+edge[i].w;</span><br><span class="line">                <span class="keyword">if</span>(!inq[y])&#123;qwq.<span class="built_in">push</span>(y);inq[y]=<span class="literal">true</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">spfa</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">     <span class="keyword">if</span>(s==i)<span class="built_in">printf</span>(<span class="string">&quot;0 &quot;</span>);</span><br><span class="line">     <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$Dijkstra$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM 200010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF =<span class="number">2147483647</span>;</span><br><span class="line"><span class="type">int</span> n,m,s,dis[MAXN];</span><br><span class="line"><span class="type">bool</span> done[MAXN];</span><br><span class="line"><span class="type">int</span> tot,head[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,w,next;&#125;edge[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].w=z;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,dist;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node&amp; v)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dist&gt;v.dist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;node&gt; qwq;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis[i]=INF;</span><br><span class="line">    dis[s]=<span class="number">0</span>;</span><br><span class="line">    qwq.<span class="built_in">push</span>((node)&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node front=qwq.<span class="built_in">top</span>(); qwq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> u=front.u,dist=front.dist;</span><br><span class="line">        <span class="keyword">if</span>(done[u])<span class="keyword">continue</span>;</span><br><span class="line">        done[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> y=edge[i].v,z=edge[i].w;</span><br><span class="line">            <span class="keyword">if</span>(dis[u]+z&lt;dis[y])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[y]=dis[u]+z;</span><br><span class="line">                qwq.<span class="built_in">push</span>((node)&#123;y,dis[y]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line">    <span class="type">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dijkstra</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><p>已知一个数列，你需要进行下面两种操作：</p><p>1.将某一个数加上x</p><p>2.求出某区间每一个数的和</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">500010</span>;</span><br><span class="line"><span class="type">int</span> c[MAXN],n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        s+=c[i];</span><br><span class="line">        i-=<span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">        c[i]+=value;</span><br><span class="line">        i+=<span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> temp;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">        <span class="built_in">update</span>(i,temp);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> flag,x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;flag,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>) <span class="built_in">update</span>(x,y);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">sum</span>(y)-<span class="built_in">sum</span>(x<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>已知一个数列，你需要进行下面两种操作：</p><p>1.将某区间每一个数数加上x</p><p>2.求出某一个数的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">500010</span>;</span><br><span class="line"><span class="type">int</span> c[MAXN],n,m,pre,now;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        s+=c[i];</span><br><span class="line">        i-=<span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">        c[i]+=value;</span><br><span class="line">        i+=<span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;now);</span><br><span class="line">        <span class="built_in">update</span>(i,now-pre);</span><br><span class="line">        pre=now;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> flag,x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;flag,&amp;x);</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> y,k;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;y,&amp;k);</span><br><span class="line">            <span class="built_in">update</span>(x,k);<span class="built_in">update</span>(y+<span class="number">1</span>,-k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">sum</span>(x));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最近公共祖先"><a href="#最近公共祖先" class="headerlink" title="最近公共祖先"></a>最近公共祖先</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">500010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = MAXN<span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> max0,n,m,tot,head[MAXN];</span><br><span class="line"><span class="type">int</span> fa[MAXN][<span class="number">25</span>],dep[MAXN],s;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,next;&#125;edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lcainit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=max0;i++)</span><br><span class="line">    <span class="keyword">if</span>(fa[x][i<span class="number">-1</span>])fa[x][i]=fa[fa[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">        <span class="type">int</span> y=edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(y!=fa[x][<span class="number">0</span>])&#123;</span><br><span class="line">            fa[y][<span class="number">0</span>]=x;</span><br><span class="line">            dep[y]=dep[x]+<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">lcainit</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v])<span class="built_in">swap</span>(u,v);</span><br><span class="line">    <span class="type">int</span> delta=dep[u]-dep[v];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;=max0;x++)</span><br><span class="line">    <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;x)&amp;delta)u=fa[u][x];</span><br><span class="line">    <span class="keyword">if</span>(u==v)<span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=max0;x&gt;=<span class="number">0</span>;x--)</span><br><span class="line">    <span class="keyword">if</span>(fa[u][x]!=fa[v][x])&#123;</span><br><span class="line">        u=fa[u][x];</span><br><span class="line">        v=fa[v][x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line">    max0=(<span class="type">int</span>)(<span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">2</span>))+<span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y);<span class="built_in">addedge</span>(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">lcainit</span>(s);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">lca</span>(a,b));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="割边"><a href="#割边" class="headerlink" title="割边"></a>割边</h2><p>提交入口：<a href="https://www.luogu.com.cn/problem/T103481">https://www.luogu.com.cn/problem/T103481</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a,b) ((a)&lt;(b)?(a):(b))</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> head[MAXN],tot,n,m,num,dfn[MAXN],low[MAXN],ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,next;&#125;edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> in_edge)</span></span>&#123;</span><br><span class="line">    dfn[x]=low[x]=++num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">        <span class="type">int</span> y=edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[y])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(y,i); <span class="comment">//把事情当作已经完成是理解递归的关键</span></span><br><span class="line">            low[x]=<span class="built_in">MIN</span>(low[x], low[y]);</span><br><span class="line">            <span class="keyword">if</span>(dfn[x]&lt;low[y]) ans++; <span class="comment">//割边判定</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i!=(in_edge^<span class="number">1</span>))</span><br><span class="line">            low[x]=<span class="built_in">MIN</span>(low[x], dfn[y]);</span><br><span class="line">        <span class="comment">//不能通过来时的对应边访问父亲，但可以通过其他重边访问父亲</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=m; i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y); <span class="built_in">addedge</span>(y,x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]) <span class="built_in">tarjan</span>(i,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若需要输出割边：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a,b) ((a)&lt;(b)?(a):(b))</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> head[MAXN],tot,n,m,num,dfn[MAXN],low[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,next;&#125;edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">bool</span> isbridge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> in_edge)</span></span>&#123;</span><br><span class="line">    dfn[x]=low[x]=++num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">        <span class="type">int</span> y=edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[y])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(y,i); <span class="comment">//把事情当作已经完成是理解递归的关键</span></span><br><span class="line">            low[x]=<span class="built_in">MIN</span>(low[x], low[y]);</span><br><span class="line">            <span class="keyword">if</span>(dfn[x]&lt;low[y])&#123;</span><br><span class="line">                isbridge[i]=isbridge[i^<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i!=(in_edge^<span class="number">1</span>))</span><br><span class="line">            low[x]=<span class="built_in">MIN</span>(low[x], dfn[y]);</span><br><span class="line">        <span class="comment">//不能通过来时的对应边访问父亲，但可以通过其他重边访问父亲</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=m; i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y); <span class="built_in">addedge</span>(y,x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]) <span class="built_in">tarjan</span>(i,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;tot; i+=<span class="number">2</span>) <span class="comment">//无向图</span></span><br><span class="line">        <span class="keyword">if</span>(isbridge[i]) <span class="comment">//i^1在前是因为edge[].v是到达的点</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,edge[i^<span class="number">1</span>].v,edge[i].v);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="割点"><a href="#割点" class="headerlink" title="割点"></a>割点</h2><p>提交入口： <a href="https://www.luogu.com.cn/problem/P3388">https://www.luogu.com.cn/problem/P3388</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a,b) ((a)&lt;(b)?(a):(b))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e4</span>+<span class="number">3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1e5</span>+<span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> n,m,head[MAXN],tot,ans;</span><br><span class="line"><span class="type">int</span> num,dfn[MAXN],low[MAXN],sroot;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,next;&#125;edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">bool</span> iscut[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    dfn[x]=low[x]=++num;</span><br><span class="line">    <span class="type">int</span> mflag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">        <span class="type">int</span> y=edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[y])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(y);</span><br><span class="line">            low[x]=<span class="built_in">MIN</span>(low[x],low[y]);</span><br><span class="line">            <span class="keyword">if</span>(low[y]&gt;=dfn[x])&#123;</span><br><span class="line">                mflag++; </span><br><span class="line">                <span class="keyword">if</span>(x!=sroot || mflag&gt;<span class="number">1</span>)iscut[x]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> low[x]=<span class="built_in">MIN</span>(low[x],dfn[y]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(x==y)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">addedge</span>(x,y); <span class="built_in">addedge</span>(y,x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])sroot=i,<span class="built_in">tarjan</span>(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(iscut[i])ans++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(iscut[i])<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="强连通分量缩点"><a href="#强连通分量缩点" class="headerlink" title="强连通分量缩点"></a>强连通分量缩点</h2><p>题目描述：<a href="https://www.luogu.org/problemnew/show/P3387">https://www.luogu.org/problemnew/show/P3387</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a,b) ((a)&lt;(b)?(a):(b))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e4</span>+<span class="number">3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm=<span class="number">1e5</span>+<span class="number">3</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,next;&#125;;</span><br><span class="line">Edge edge[maxm],edge2[maxm];</span><br><span class="line"><span class="type">int</span> head[maxn],w[maxn],dfn[maxn],low[maxn],stac[maxn],color[maxn];</span><br><span class="line"><span class="type">int</span> n,m,tot,num,top,cnt,ans;</span><br><span class="line"><span class="type">int</span> head2[maxn],W[maxn],tot2,sum[maxn];</span><br><span class="line"><span class="type">bool</span> ins[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    edge2[++tot2].v=y;</span><br><span class="line">    edge2[tot2].next=head2[x];</span><br><span class="line">    head2[x]=tot2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;w[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sum[x])<span class="keyword">return</span> sum[x];</span><br><span class="line">    <span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head2[x];i;i=edge2[i].next)&#123;</span><br><span class="line">        temp=<span class="built_in">MAX</span>(temp,<span class="built_in">dfs</span>(edge2[i].v));</span><br><span class="line">    &#125;</span><br><span class="line">    sum[x]=W[x]+temp;</span><br><span class="line">    <span class="keyword">return</span> sum[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    low[x]=dfn[x]=++num;</span><br><span class="line">    stac[++top]=x; ins[x]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">        <span class="type">int</span> y=edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[y])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(y);</span><br><span class="line">            low[x]=<span class="built_in">MIN</span>(low[x],low[y]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ins[y])&#123;</span><br><span class="line">            low[x]=<span class="built_in">MIN</span>(low[x],dfn[y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[x]==low[x])&#123;</span><br><span class="line">        ++cnt; <span class="type">int</span> y;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            y=stac[top--]; ins[y]=<span class="literal">false</span>;</span><br><span class="line">            color[y]=cnt;</span><br><span class="line">            W[cnt]+=w[y];</span><br><span class="line">        &#125;<span class="keyword">while</span>(x!=y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">input</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])<span class="built_in">tarjan</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">1</span>;x&lt;=n;x++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">            <span class="type">int</span> y=edge[i].v;</span><br><span class="line">            <span class="keyword">if</span>(color[x]!=color[y])&#123;</span><br><span class="line">                <span class="built_in">addedge2</span>(color[x],color[y]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!sum[i])&#123;</span><br><span class="line">            ans=<span class="built_in">MAX</span>(ans,<span class="built_in">dfs</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非压位高精"><a href="#非压位高精" class="headerlink" title="非压位高精"></a>非压位高精</h2><p>虽然重载的运算符两边数据类型都是Bigint，但因为自动强制转换，所以用[Bigint] * [int]也不会错。</p><p>在大数除int、大数对int取余时，效率不及专门功能的函数</p><p>参考：CSDN用户 代号4101</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXLEN = <span class="number">1000</span>;  <span class="comment">//最长的数字长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Bigint</span>&#123;</span><br><span class="line">    <span class="type">int</span> d[MAXLEN],len;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clean</span><span class="params">()</span></span>&#123;<span class="keyword">while</span>(len&gt;<span class="number">1</span>&amp;&amp;!d[len<span class="number">-1</span>])len--;&#125; <span class="comment">//去前导0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Bigint</span>()&#123;<span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="built_in">sizeof</span>(d));len=<span class="number">1</span>;&#125;</span><br><span class="line">    <span class="built_in">Bigint</span>(<span class="type">int</span> num)&#123;*<span class="keyword">this</span>=num;&#125;</span><br><span class="line">    <span class="built_in">Bigint</span>(<span class="type">char</span>* num)&#123;*<span class="keyword">this</span>=num;&#125;</span><br><span class="line"></span><br><span class="line">    Bigint <span class="keyword">operator</span> = (<span class="type">const</span> <span class="type">char</span>* num)&#123;</span><br><span class="line">        len=<span class="built_in">strlen</span>(num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)d[i]=num[len<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="built_in">clean</span>();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Bigint <span class="keyword">operator</span> = (<span class="type">int</span> num)&#123;</span><br><span class="line">        <span class="type">char</span> s[MAXLEN];</span><br><span class="line">        <span class="built_in">sprintf</span>(s,<span class="string">&quot;%d&quot;</span>,num);</span><br><span class="line">        *<span class="keyword">this</span>=s;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Bigint <span class="keyword">operator</span> + (<span class="type">const</span> Bigint&amp; b)&#123; <span class="comment">//只能大数加小数</span></span><br><span class="line">        Bigint c=*<span class="keyword">this</span>; <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;b.len;i++)&#123;</span><br><span class="line">            c.d[i]+=b.d[i];</span><br><span class="line">            <span class="keyword">if</span>(c.d[i]&gt;<span class="number">9</span>)c.d[i]%=<span class="number">10</span>,c.d[i+<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(c.d[i]&gt;<span class="number">9</span>)c.d[i++]%=<span class="number">10</span>,c.d[i]++;</span><br><span class="line">        c.len=<span class="built_in">MAX</span>(len,b.len);</span><br><span class="line">        <span class="keyword">if</span>(c.d[i]&amp;&amp;c.len&lt;=i)c.len=i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Bigint <span class="keyword">operator</span> - (<span class="type">const</span> Bigint&amp; b)&#123; <span class="comment">//不能用小数减大数</span></span><br><span class="line">        Bigint c=*<span class="keyword">this</span>; <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;b.len;i++)&#123;</span><br><span class="line">            c.d[i]-=b.d[i];</span><br><span class="line">            <span class="keyword">if</span>(c.d[i]&lt;<span class="number">0</span>)c.d[i]+=<span class="number">10</span>,c.d[i+<span class="number">1</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(c.d[i]&lt;<span class="number">0</span>)c.d[i++]+=<span class="number">10</span>,c.d[i]--;</span><br><span class="line">        c.<span class="built_in">clean</span>();</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Bigint <span class="keyword">operator</span> * (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="type">int</span> i,j; Bigint c;</span><br><span class="line">        c.len=len+b.len;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;b.len;j++)</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">                c.d[i+j]+=d[i]*b.d[j];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;c.len<span class="number">-1</span>;i++)</span><br><span class="line">            c.d[i+<span class="number">1</span>]+=c.d[i]/<span class="number">10</span>,c.d[i]%=<span class="number">10</span>;</span><br><span class="line">        c.<span class="built_in">clean</span>();</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Bigint <span class="keyword">operator</span> / (<span class="type">const</span> Bigint&amp; b)&#123;</span><br><span class="line">        <span class="type">int</span> i,j;</span><br><span class="line">        Bigint c=*<span class="keyword">this</span>,a=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            a=a*<span class="number">10</span>+d[i];</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)<span class="keyword">if</span>(a&lt;b*(j+<span class="number">1</span>))<span class="keyword">break</span>;</span><br><span class="line">            c.d[i]=j;</span><br><span class="line">            a=a-b*j;</span><br><span class="line">        &#125;</span><br><span class="line">        c.<span class="built_in">clean</span>();</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Bigint <span class="keyword">operator</span> % (<span class="type">const</span> Bigint&amp; b)&#123;</span><br><span class="line">        <span class="type">int</span> i,j; Bigint a=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            a=a*<span class="number">10</span>+d[i];</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)<span class="keyword">if</span>(a&lt;b*(j+<span class="number">1</span>))<span class="keyword">break</span>;</span><br><span class="line">            a=a-b*j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Bigint <span class="keyword">operator</span> += (<span class="type">const</span> Bigint&amp; b)&#123;</span><br><span class="line">        *<span class="keyword">this</span>=*<span class="keyword">this</span>+b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len!=b.len)<span class="keyword">return</span> len&lt;b.len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">            <span class="keyword">if</span>(d[i]!=b.d[i])<span class="keyword">return</span> d[i]&lt;b.d[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &gt; (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;<span class="keyword">return</span> b&lt;*<span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt;= (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;<span class="keyword">return</span> !(b&lt;*<span class="keyword">this</span>);&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &gt;= (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;<span class="keyword">return</span> !(*<span class="keyword">this</span>&lt;b);&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> != (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;<span class="keyword">return</span> b&lt;*<span class="keyword">this</span>||*<span class="keyword">this</span>&lt;b;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;<span class="keyword">return</span> !(b&lt;*<span class="keyword">this</span>)&amp;&amp;!(b&gt;*<span class="keyword">this</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">str</span><span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="type">char</span> s[MAXLEN]=&#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)s[len<span class="number">-1</span>-i]=d[i]+<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream&amp; in,Bigint&amp; x)&#123;</span><br><span class="line">    string s; in&gt;&gt;s;</span><br><span class="line">    x=s.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; out,<span class="type">const</span> Bigint&amp; x)&#123;</span><br><span class="line">    out&lt;&lt;x.<span class="built_in">str</span>();</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;     <span class="comment">//just an example...</span></span><br><span class="line">    Bigint s=<span class="number">0</span>,t;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;t)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t.len==<span class="number">1</span>&amp;&amp;!t.d[<span class="number">0</span>])<span class="keyword">break</span>;</span><br><span class="line">        s=s+t;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="压位高精"><a href="#压位高精" class="headerlink" title="压位高精"></a>压位高精</h2><p>题面：<a href="https://www.luogu.com.cn/problem/P2152">https://www.luogu.com.cn/problem/P2152</a></p><p>自己缝的稍慢版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> uint;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a,b) ((a)&lt;(b)?(a):(b))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">rd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+(ch^<span class="number">48</span>),ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> base=<span class="number">10000</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> limit=<span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> power_10[]=&#123;<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">1000</span>,<span class="number">1000</span>,<span class="number">10000</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Bigint</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[N],len;</span><br><span class="line">    <span class="built_in">Bigint</span>()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a)),len=<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clean</span><span class="params">()</span></span>&#123;<span class="keyword">while</span>(len&gt;<span class="number">1</span>&amp;&amp;!a[len<span class="number">-1</span>])len--;&#125; <span class="comment">//去前导0</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(x)a[len++]=x%base,x/=base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">char</span> s[N];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">        len=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> n=<span class="built_in">strlen</span>(s),t=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(rint i=n<span class="number">-1</span>;~i;--i,++t) &#123;</span><br><span class="line">            a[len<span class="number">-1</span>]+=(s[i]-<span class="string">&#x27;0&#x27;</span>)*power_10[t];</span><br><span class="line">            <span class="keyword">if</span>(t+<span class="number">1</span>==limit)t=<span class="number">-1</span>,++len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!t)--len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">char</span> c=<span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,a[len<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(rint i=len<span class="number">-2</span>;i&gt;=<span class="number">0</span>;--i)<span class="built_in">printf</span>(<span class="string">&quot;%0*lld&quot;</span>,limit,a[i]);</span><br><span class="line">        <span class="keyword">if</span>(~c)<span class="built_in">putchar</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Bigint</span>(<span class="type">int</span> num)&#123;*<span class="keyword">this</span>=num;&#125;</span><br><span class="line">    <span class="built_in">Bigint</span>(<span class="type">char</span>* num)&#123;*<span class="keyword">this</span>=num;&#125;</span><br><span class="line">    Bigint <span class="keyword">operator</span> = (<span class="type">const</span> <span class="type">char</span>* num)&#123;</span><br><span class="line">        len=<span class="built_in">strlen</span>(num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)a[i]=num[len<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="built_in">clean</span>();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Bigint <span class="keyword">operator</span> = (<span class="type">int</span> num)&#123;</span><br><span class="line">        <span class="type">char</span> s[N];</span><br><span class="line">        <span class="built_in">sprintf</span>(s,<span class="string">&quot;%d&quot;</span>,num);</span><br><span class="line">        *<span class="keyword">this</span>=s;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len!=b.len)<span class="keyword">return</span> len&lt;b.len;</span><br><span class="line">        <span class="keyword">for</span>(rint i=len<span class="number">-1</span>;~i;i--)</span><br><span class="line">            <span class="keyword">if</span>(a[i]!=b.a[i])<span class="keyword">return</span> a[i]&lt;b.a[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &gt; (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;<span class="keyword">return</span> b&lt;*<span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt;= (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;<span class="keyword">return</span> !(b&lt;*<span class="keyword">this</span>);&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &gt;= (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;<span class="keyword">return</span> !(*<span class="keyword">this</span>&lt;b);&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> != (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;<span class="keyword">return</span> b&lt;*<span class="keyword">this</span>||*<span class="keyword">this</span>&lt;b;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;<span class="keyword">return</span> !(b&lt;*<span class="keyword">this</span>)&amp;&amp;!(b&gt;*<span class="keyword">this</span>);&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Bigint <span class="keyword">operator</span> + (<span class="type">const</span> Bigint &amp;a,<span class="type">const</span> Bigint &amp;b) &#123;</span><br><span class="line">    Bigint c;<span class="type">int</span> mx=<span class="built_in">MAX</span>(a.len,b.len);c.len=mx;</span><br><span class="line">    <span class="keyword">for</span>(rint i=<span class="number">0</span>;i&lt;mx;++i)c.a[i]=a.a[i]+b.a[i];</span><br><span class="line">    <span class="keyword">for</span>(rint i=<span class="number">0</span>;i&lt;mx;++i)<span class="keyword">if</span>(c.a[i]&gt;=base)++c.a[i+<span class="number">1</span>],c.a[i]-=base;</span><br><span class="line">    <span class="keyword">if</span>(c.a[c.len])++c.len;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">Bigint <span class="keyword">operator</span> - (<span class="type">const</span> Bigint &amp;a,<span class="type">const</span> Bigint &amp;b) &#123;</span><br><span class="line">    Bigint c;<span class="type">int</span> mx=a.len;c.len=mx;</span><br><span class="line">    <span class="keyword">for</span>(rint i=<span class="number">0</span>;i&lt;mx;++i)c.a[i]=a.a[i]-b.a[i];</span><br><span class="line">    <span class="keyword">for</span>(rint i=<span class="number">0</span>;i&lt;mx;++i)<span class="keyword">if</span>(c.a[i]&lt;<span class="number">0</span>)--c.a[i+<span class="number">1</span>],c.a[i]+=base;</span><br><span class="line">    <span class="keyword">while</span>(c.len&amp;&amp;!c.a[c.len<span class="number">-1</span>])--c.len;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">Bigint <span class="keyword">operator</span> * (<span class="type">const</span> Bigint &amp;a,<span class="type">const</span> Bigint &amp;b) &#123;</span><br><span class="line">    Bigint c;<span class="type">int</span> mx=a.len+b.len<span class="number">-1</span>;c.len=mx;</span><br><span class="line">    <span class="keyword">for</span>(rint i=<span class="number">0</span>,mxa=a.len;i&lt;mxa;++i)</span><br><span class="line">        <span class="keyword">for</span>(rint j=<span class="number">0</span>,mxb=b.len;j&lt;mxb;++j) &#123;</span><br><span class="line">            c.a[i+j]+=a.a[i]*b.a[j];</span><br><span class="line">            <span class="keyword">if</span>(c.a[i+j]&gt;=base)c.a[i+j+<span class="number">1</span>]+=c.a[i+j]/base,c.a[i+j]%=base;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(c.a[c.len])++c.len;</span><br><span class="line">    <span class="keyword">return</span> c; </span><br><span class="line">&#125;</span><br><span class="line">Bigint <span class="keyword">operator</span> / (<span class="type">const</span> Bigint &amp;a,<span class="type">const</span> <span class="type">int</span> &amp;b) &#123;</span><br><span class="line">    Bigint c;<span class="type">int</span> mx=a.len;</span><br><span class="line">    LL now=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(rint i=mx<span class="number">-1</span>,s=<span class="number">0</span>;~i;--i) &#123;</span><br><span class="line">        now=now*base+a.a[i];</span><br><span class="line">        <span class="keyword">if</span>(now/b)s=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!s)<span class="keyword">continue</span>;</span><br><span class="line">        c.a[c.len++]=now/b;</span><br><span class="line">        now%=b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(c.a,c.a+c.len);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Bigint <span class="title">biggcd</span><span class="params">(Bigint x,Bigint y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> xcnt2=<span class="number">0</span>, ycnt2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(x.a[<span class="number">0</span>]&amp;<span class="number">1</span>))&#123;xcnt2++; x=x/<span class="number">2</span>;&#125;</span><br><span class="line">    <span class="keyword">while</span>(!(y.a[<span class="number">0</span>]&amp;<span class="number">1</span>))&#123;ycnt2++; y=y/<span class="number">2</span>;&#125;</span><br><span class="line">    <span class="type">int</span> z=<span class="built_in">MIN</span>(xcnt2,ycnt2);</span><br><span class="line">    <span class="keyword">while</span>(x!=y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;y)&#123;<span class="built_in">swap</span>(x,y);&#125;</span><br><span class="line">        x=x-y;</span><br><span class="line">        <span class="keyword">while</span>(!(x.a[<span class="number">0</span>]&amp;<span class="number">1</span>))&#123;x=x/<span class="number">2</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Bigint temp = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(z--)&#123;x=x*temp;&#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Bigint a,b;</span><br><span class="line">    a.<span class="built_in">read</span>(); b.<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">biggcd</span>(a,b).<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面给出更好的版本，注意与原代码有改动：</p><ul><li>增加了<code>biggcd</code></li><li>在 class 中图省事将所有权限改成了 public ，这并不推荐</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//来源: https://paste.ubuntu.com/p/7VKYzpC7dn/</span></span><br><span class="line"><span class="comment">//作者：小黑AWM+MashPlant</span></span><br><span class="line"><span class="comment">//注：可以直接把BigInt和一样用cin cout都行，就是高精乘为了速度才用了FFT降低了精度，有需要可以自行更改。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a,b) ((a)&lt;(b)?(a):(b))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line">    <span class="type">double</span> x,y;</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> _x = <span class="number">0.0</span>,<span class="type">double</span> _y = <span class="number">0.0</span>)&#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>-(<span class="type">const</span> Complex &amp;b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(x - b.x,y - b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>+(<span class="type">const</span> Complex &amp;b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(x + b.x,y + b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>*(<span class="type">const</span> Complex &amp;b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(x*b.x - y*b.y,x*b.y + y*b.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(Complex y[],<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,j = len/<span class="number">2</span>;i&lt;len<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j)    <span class="built_in">swap</span>(y[i],y[j]);</span><br><span class="line">        k = len/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &gt;= k)&#123;</span><br><span class="line">            j = j - k;</span><br><span class="line">            k = k/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; k)    j+=k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fft</span><span class="params">(Complex y[],<span class="type">int</span> len,<span class="type">int</span> on)</span></span>&#123;</span><br><span class="line">    <span class="built_in">change</span>(y,len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> h = <span class="number">2</span>;h &lt;= len;h&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="function">Complex <span class="title">wn</span><span class="params">(cos(on*<span class="number">2</span>*PI/h),sin(on*<span class="number">2</span>*PI/h))</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; len;j += h)&#123;</span><br><span class="line">            <span class="function">Complex <span class="title">w</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = j;k &lt; j + h/<span class="number">2</span>;k++)&#123;</span><br><span class="line">                Complex u = y[k];</span><br><span class="line">                Complex t = w*y[k + h/<span class="number">2</span>];</span><br><span class="line">                y[k] = u + t;</span><br><span class="line">                y[k + h/<span class="number">2</span>] = u - t;</span><br><span class="line">                w = w*wn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(on == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">            y[i].x /= len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BigInt</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Value(x, nega) ((nega) ? -(x) : (x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> At(vec, index) ((index) &lt; vec.size() ? vec[(index)] : 0)</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">absComp</span><span class="params">(<span class="type">const</span> BigInt &amp;lhs, <span class="type">const</span> BigInt &amp;rhs)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lhs.<span class="built_in">size</span>() != rhs.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> lhs.<span class="built_in">size</span>() &lt; rhs.<span class="built_in">size</span>() ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = lhs.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span> (lhs[i] != rhs[i])</span><br><span class="line">                <span class="keyword">return</span> lhs[i] &lt; rhs[i] ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">using</span> Long = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">static</span> <span class="type">int</span> Exp = <span class="number">9</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">static</span> Long Mod = <span class="number">1000000000</span>;</span><br><span class="line">    <span class="keyword">mutable</span> std::vector&lt;Long&gt; val;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">bool</span> nega = <span class="literal">false</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">trim</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (val.<span class="built_in">size</span>() &amp;&amp; val.<span class="built_in">back</span>() == <span class="number">0</span>)</span><br><span class="line">            val.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">if</span> (val.<span class="built_in">empty</span>())</span><br><span class="line">            nega = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> val.<span class="built_in">size</span>(); &#125;</span><br><span class="line">    Long &amp;<span class="keyword">operator</span>[](<span class="type">int</span> index) <span class="type">const</span> &#123; <span class="keyword">return</span> val[index]; &#125;</span><br><span class="line">    <span class="function">Long &amp;<span class="title">back</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> val.<span class="built_in">back</span>(); &#125;</span><br><span class="line">    <span class="built_in">BigInt</span>(<span class="type">int</span> size, <span class="type">bool</span> nega) : <span class="built_in">val</span>(size), <span class="built_in">nega</span>(nega) &#123;&#125;</span><br><span class="line">    <span class="built_in">BigInt</span>(<span class="type">const</span> std::vector&lt;Long&gt; &amp;val, <span class="type">bool</span> nega) : <span class="built_in">val</span>(val), <span class="built_in">nega</span>(nega) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> BigInt &amp;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (n.nega)</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = n.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == n.<span class="built_in">size</span>() - <span class="number">1</span>)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, n[i]);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%0*lld&quot;</span>, n.Exp, n[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> os;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>+(<span class="type">const</span> BigInt &amp;lhs, <span class="type">const</span> BigInt &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">BigInt <span class="title">ret</span><span class="params">(lhs)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> ret += rhs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>-(<span class="type">const</span> BigInt &amp;lhs, <span class="type">const</span> BigInt &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">BigInt <span class="title">ret</span><span class="params">(lhs)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> ret -= rhs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">BigInt</span>(Long x = <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">            x = -x, nega = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt;= Mod)</span><br><span class="line">            val.<span class="built_in">push_back</span>(x % Mod), x /= Mod;</span><br><span class="line">        <span class="keyword">if</span> (x)</span><br><span class="line">            val.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">BigInt</span>(<span class="type">const</span> <span class="type">char</span> *s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> bound = <span class="number">0</span>, pos;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            nega = <span class="literal">true</span>, bound = <span class="number">1</span>;</span><br><span class="line">        Long cur = <span class="number">0</span>, pow = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (pos = <span class="built_in">strlen</span>(s) - <span class="number">1</span>; pos &gt;= Exp + bound - <span class="number">1</span>; pos -= Exp, val.<span class="built_in">push_back</span>(cur), cur = <span class="number">0</span>, pow = <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = pos; i &gt; pos - Exp; --i)</span><br><span class="line">                cur += (s[i] - <span class="string">&#x27;0&#x27;</span>) * pow, pow *= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span> (cur = <span class="number">0</span>, pow = <span class="number">1</span>; pos &gt;= bound; --pos)</span><br><span class="line">            cur += (s[pos] - <span class="string">&#x27;0&#x27;</span>) * pow, pow *= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (cur)</span><br><span class="line">            val.<span class="built_in">push_back</span>(cur);</span><br><span class="line">    &#125;</span><br><span class="line">    BigInt &amp;<span class="keyword">operator</span>=(<span class="type">const</span> <span class="type">char</span> *s)&#123;</span><br><span class="line">        BigInt <span class="built_in">n</span>(s);</span><br><span class="line">        *<span class="keyword">this</span> = n;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    BigInt &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Long x)&#123;</span><br><span class="line">        BigInt <span class="built_in">n</span>(x);</span><br><span class="line">        *<span class="keyword">this</span> = n;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, BigInt &amp;n)&#123;</span><br><span class="line">        string s;</span><br><span class="line">        is &gt;&gt; s;</span><br><span class="line">        n=(<span class="type">char</span>*)s.<span class="built_in">data</span>();</span><br><span class="line">        <span class="keyword">return</span> is;</span><br><span class="line">    &#125;</span><br><span class="line">    BigInt &amp;<span class="keyword">operator</span>+=(<span class="type">const</span> BigInt &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> cap = std::<span class="built_in">max</span>(<span class="built_in">size</span>(), rhs.<span class="built_in">size</span>()) + <span class="number">1</span>;</span><br><span class="line">        val.<span class="built_in">resize</span>(cap);</span><br><span class="line">        <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cap - <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            val[i] = <span class="built_in">Value</span>(val[i], nega) + <span class="built_in">Value</span>(<span class="built_in">At</span>(rhs, i), rhs.nega) + carry, carry = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (val[i] &gt;= Mod)</span><br><span class="line">                val[i] -= Mod, carry = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (val[i] &lt; <span class="number">0</span>)</span><br><span class="line">                val[i] += Mod, carry = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((val.<span class="built_in">back</span>() = carry) == <span class="number">-1</span>) <span class="comment">//assert(val.back() == 1 or 0 or -1)</span></span><br><span class="line">        &#123;</span><br><span class="line">            nega = <span class="literal">true</span>, val.<span class="built_in">pop_back</span>();</span><br><span class="line">            <span class="type">bool</span> tailZero = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cap - <span class="number">1</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (tailZero &amp;&amp; val[i])</span><br><span class="line">                    val[i] = Mod - val[i], tailZero = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    val[i] = Mod - <span class="number">1</span> - val[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">trim</span>();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>-(<span class="type">const</span> BigInt &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">BigInt <span class="title">ret</span><span class="params">(rhs)</span></span>;</span><br><span class="line">        ret.nega ^= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    BigInt &amp;<span class="keyword">operator</span>-=(<span class="type">const</span> BigInt &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        rhs.nega ^= <span class="number">1</span>;</span><br><span class="line">        *<span class="keyword">this</span> += rhs;</span><br><span class="line">        rhs.nega ^= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>*(<span class="type">const</span> BigInt &amp;lhs, <span class="type">const</span> BigInt &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> len=<span class="number">1</span>;</span><br><span class="line">        BigInt ll=lhs,rr=rhs;</span><br><span class="line">        ll.nega = lhs.nega ^ rhs.nega;</span><br><span class="line">        <span class="keyword">while</span>(len&lt;<span class="number">2</span>*lhs.<span class="built_in">size</span>()||len&lt;<span class="number">2</span>*rhs.<span class="built_in">size</span>())len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        ll.val.<span class="built_in">resize</span>(len),rr.val.<span class="built_in">resize</span>(len);</span><br><span class="line">        Complex x1[len],x2[len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="function">Complex <span class="title">nx</span><span class="params">(ll[i],<span class="number">0.0</span>)</span>,<span class="title">ny</span><span class="params">(rr[i],<span class="number">0.0</span>)</span></span>;</span><br><span class="line">            x1[i]=nx;</span><br><span class="line">            x2[i]=ny;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fft</span>(x1,len,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">fft</span>(x2,len,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; len; i++)</span><br><span class="line">            x1[i] = x1[i] * x2[i];</span><br><span class="line">        <span class="built_in">fft</span>( x1 , len , <span class="number">-1</span> );</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; len; i++)</span><br><span class="line">            ll[i] = <span class="built_in">int</span>( x1[i].x + <span class="number">0.5</span> );</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; len; i++)&#123;</span><br><span class="line">            ll[i+<span class="number">1</span>]+=ll[i]/Mod;</span><br><span class="line">            ll[i]%=Mod;</span><br><span class="line">        &#125;</span><br><span class="line">        ll.<span class="built_in">trim</span>();</span><br><span class="line">        <span class="keyword">return</span> ll;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>*(<span class="type">const</span> BigInt &amp;lhs, <span class="type">const</span> Long &amp;x)&#123;</span><br><span class="line">        BigInt ret=lhs;</span><br><span class="line">        <span class="type">bool</span> negat = ( x &lt; <span class="number">0</span> );</span><br><span class="line">        Long xx = (negat) ? -x : x;</span><br><span class="line">        ret.nega ^= negat;</span><br><span class="line">        ret.val.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        ret.val.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; ret.<span class="built_in">size</span>(); i++)</span><br><span class="line">            ret[i]*=xx;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; ret.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            ret[i+<span class="number">1</span>]+=ret[i]/Mod;</span><br><span class="line">            ret[i] %= Mod;</span><br><span class="line">        &#125;</span><br><span class="line">        ret.<span class="built_in">trim</span>();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    BigInt &amp;<span class="keyword">operator</span>*=(<span class="type">const</span> BigInt &amp;rhs) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> * rhs; &#125;</span><br><span class="line">    BigInt &amp;<span class="keyword">operator</span>*=(<span class="type">const</span> Long &amp;x) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> * x; &#125;</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>/(<span class="type">const</span> BigInt &amp;lhs, <span class="type">const</span> BigInt &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">static</span> std::vector&lt;BigInt&gt; powTwo&#123;<span class="built_in">BigInt</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">static</span> std::vector&lt;BigInt&gt; estimate;</span><br><span class="line">        estimate.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">absComp</span>(lhs, rhs) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">BigInt</span>();</span><br><span class="line">        BigInt cur = rhs;</span><br><span class="line">        <span class="type">int</span> cmp;</span><br><span class="line">        <span class="keyword">while</span> ((cmp = <span class="built_in">absComp</span>(cur, lhs)) &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            estimate.<span class="built_in">push_back</span>(cur), cur += cur;</span><br><span class="line">            <span class="keyword">if</span> (estimate.<span class="built_in">size</span>() &gt;= powTwo.<span class="built_in">size</span>())</span><br><span class="line">                powTwo.<span class="built_in">push_back</span>(powTwo.<span class="built_in">back</span>() + powTwo.<span class="built_in">back</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">BigInt</span>(powTwo.<span class="built_in">back</span>().val, lhs.nega ^ rhs.nega);</span><br><span class="line">        BigInt ret = powTwo[estimate.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">        cur = estimate[estimate.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = estimate.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; cmp != <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span> ((cmp = <span class="built_in">absComp</span>(cur + estimate[i], lhs)) &lt;= <span class="number">0</span>)</span><br><span class="line">                cur += estimate[i], ret += powTwo[i];</span><br><span class="line">        ret.nega = lhs.nega ^ rhs.nega;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>/(<span class="type">const</span> BigInt &amp;num,<span class="type">const</span> Long &amp;x)&#123;</span><br><span class="line">        <span class="type">bool</span> negat = ( x &lt; <span class="number">0</span> );</span><br><span class="line">        Long xx = (negat) ? -x : x;</span><br><span class="line">        BigInt ret;</span><br><span class="line">        Long k = <span class="number">0</span>;</span><br><span class="line">        ret.val.<span class="built_in">resize</span>( num.<span class="built_in">size</span>() );</span><br><span class="line">        ret.nega = (num.nega ^ negat);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = num.<span class="built_in">size</span>() - <span class="number">1</span> ;i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            ret[i] = ( k * Mod + num[i]) / xx;</span><br><span class="line">            k = ( k * Mod + num[i]) % xx;</span><br><span class="line">        &#125;</span><br><span class="line">        ret.<span class="built_in">trim</span>();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> BigInt &amp;rhs) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> nega == rhs.nega &amp;&amp; val == rhs.val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> BigInt &amp;rhs) <span class="type">const</span> &#123; <span class="keyword">return</span> nega != rhs.nega || val != rhs.val; &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> BigInt &amp;rhs) <span class="type">const</span> &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> &lt; rhs); &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> BigInt &amp;rhs) <span class="type">const</span> &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> &lt;= rhs); &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> BigInt &amp;rhs) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nega &amp;&amp; !rhs.nega)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!nega &amp;&amp; rhs.nega)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> cmp = <span class="built_in">absComp</span>(*<span class="keyword">this</span>, rhs);</span><br><span class="line">        <span class="keyword">return</span> nega ? cmp &gt;= <span class="number">0</span> : cmp &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> BigInt &amp;rhs) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nega &amp;&amp; !rhs.nega)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!nega &amp;&amp; rhs.nega)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">absComp</span>(*<span class="keyword">this</span>, rhs) &lt; <span class="number">0</span>) ^ nega;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">const</span> BigInt &amp;rhs)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::<span class="built_in">swap</span>(val, rhs.val);</span><br><span class="line">        std::<span class="built_in">swap</span>(nega, rhs.nega);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">BigInt <span class="title">biggcd</span><span class="params">(BigInt x,BigInt y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> xcnt2=<span class="number">0</span>, ycnt2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(x.val[<span class="number">0</span>]&amp;<span class="number">1</span>))&#123;xcnt2++; x=x/<span class="number">2</span>;&#125;</span><br><span class="line">    <span class="keyword">while</span>(!(y.val[<span class="number">0</span>]&amp;<span class="number">1</span>))&#123;ycnt2++; y=y/<span class="number">2</span>;&#125;</span><br><span class="line">    <span class="type">int</span> z=<span class="built_in">MIN</span>(xcnt2,ycnt2);</span><br><span class="line">    <span class="keyword">while</span>(x!=y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;y)&#123;<span class="built_in">swap</span>(x,y);&#125;</span><br><span class="line">        x=x-y;</span><br><span class="line">        <span class="keyword">while</span>(!(x.val[<span class="number">0</span>]&amp;<span class="number">1</span>))&#123;x=x/<span class="number">2</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    BigInt temp = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(z--)&#123;x=x*temp;&#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">BigInt ba,bb;</span></span><br><span class="line"><span class="comment">int main()&#123;</span></span><br><span class="line"><span class="comment">    cin&gt;&gt;ba&gt;&gt;bb;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; ba + bb &lt;&lt; &#x27;\n&#x27;;//和</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; ba - bb &lt;&lt; &#x27;\n&#x27;;//差</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; ba * bb &lt;&lt; &#x27;\n&#x27;;//积</span></span><br><span class="line"><span class="comment">    BigInt d;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; (d = ba / bb) &lt;&lt; &#x27;\n&#x27;;//商</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; ba - d * bb &lt;&lt; &#x27;\n&#x27;;//余</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">BigInt a,b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">biggcd</span>(a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作为对比，给出原作者的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//作者：小黑AWM+MashPlant</span></span><br><span class="line"><span class="comment">//注：可以直接把BigInt和一样用cin cout都行，就是高精乘为了速度才用了FFT降低了精度，有需要可以自行更改。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line">    <span class="type">double</span> x,y;</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> _x = <span class="number">0.0</span>,<span class="type">double</span> _y = <span class="number">0.0</span>)&#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>-(<span class="type">const</span> Complex &amp;b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(x - b.x,y - b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>+(<span class="type">const</span> Complex &amp;b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(x + b.x,y + b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>*(<span class="type">const</span> Complex &amp;b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(x*b.x - y*b.y,x*b.y + y*b.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(Complex y[],<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,j = len/<span class="number">2</span>;i&lt;len<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j)    <span class="built_in">swap</span>(y[i],y[j]);</span><br><span class="line">        k = len/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &gt;= k)&#123;</span><br><span class="line">            j = j - k;</span><br><span class="line">            k = k/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; k)    j+=k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fft</span><span class="params">(Complex y[],<span class="type">int</span> len,<span class="type">int</span> on)</span></span>&#123;</span><br><span class="line">    <span class="built_in">change</span>(y,len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> h = <span class="number">2</span>;h &lt;= len;h&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="function">Complex <span class="title">wn</span><span class="params">(cos(on*<span class="number">2</span>*PI/h),sin(on*<span class="number">2</span>*PI/h))</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; len;j += h)&#123;</span><br><span class="line">            <span class="function">Complex <span class="title">w</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = j;k &lt; j + h/<span class="number">2</span>;k++)&#123;</span><br><span class="line">                Complex u = y[k];</span><br><span class="line">                Complex t = w*y[k + h/<span class="number">2</span>];</span><br><span class="line">                y[k] = u + t;</span><br><span class="line">                y[k + h/<span class="number">2</span>] = u - t;</span><br><span class="line">                w = w*wn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(on == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">            y[i].x /= len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BigInt</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Value(x, nega) ((nega) ? -(x) : (x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> At(vec, index) ((index) &lt; vec.size() ? vec[(index)] : 0)</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">absComp</span><span class="params">(<span class="type">const</span> BigInt &amp;lhs, <span class="type">const</span> BigInt &amp;rhs)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lhs.<span class="built_in">size</span>() != rhs.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> lhs.<span class="built_in">size</span>() &lt; rhs.<span class="built_in">size</span>() ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = lhs.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span> (lhs[i] != rhs[i])</span><br><span class="line">                <span class="keyword">return</span> lhs[i] &lt; rhs[i] ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">using</span> Long = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">static</span> <span class="type">int</span> Exp = <span class="number">9</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">static</span> Long Mod = <span class="number">1000000000</span>;</span><br><span class="line">    <span class="keyword">mutable</span> std::vector&lt;Long&gt; val;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">bool</span> nega = <span class="literal">false</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">trim</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (val.<span class="built_in">size</span>() &amp;&amp; val.<span class="built_in">back</span>() == <span class="number">0</span>)</span><br><span class="line">            val.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">if</span> (val.<span class="built_in">empty</span>())</span><br><span class="line">            nega = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> val.<span class="built_in">size</span>(); &#125;</span><br><span class="line">    Long &amp;<span class="keyword">operator</span>[](<span class="type">int</span> index) <span class="type">const</span> &#123; <span class="keyword">return</span> val[index]; &#125;</span><br><span class="line">    <span class="function">Long &amp;<span class="title">back</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> val.<span class="built_in">back</span>(); &#125;</span><br><span class="line">    <span class="built_in">BigInt</span>(<span class="type">int</span> size, <span class="type">bool</span> nega) : <span class="built_in">val</span>(size), <span class="built_in">nega</span>(nega) &#123;&#125;</span><br><span class="line">    <span class="built_in">BigInt</span>(<span class="type">const</span> std::vector&lt;Long&gt; &amp;val, <span class="type">bool</span> nega) : <span class="built_in">val</span>(val), <span class="built_in">nega</span>(nega) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> BigInt &amp;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (n.nega)</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = n.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == n.<span class="built_in">size</span>() - <span class="number">1</span>)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, n[i]);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%0*lld&quot;</span>, n.Exp, n[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> os;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>+(<span class="type">const</span> BigInt &amp;lhs, <span class="type">const</span> BigInt &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">BigInt <span class="title">ret</span><span class="params">(lhs)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> ret += rhs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>-(<span class="type">const</span> BigInt &amp;lhs, <span class="type">const</span> BigInt &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">BigInt <span class="title">ret</span><span class="params">(lhs)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> ret -= rhs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">BigInt</span>(Long x = <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">            x = -x, nega = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt;= Mod)</span><br><span class="line">            val.<span class="built_in">push_back</span>(x % Mod), x /= Mod;</span><br><span class="line">        <span class="keyword">if</span> (x)</span><br><span class="line">            val.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">BigInt</span>(<span class="type">const</span> <span class="type">char</span> *s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> bound = <span class="number">0</span>, pos;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            nega = <span class="literal">true</span>, bound = <span class="number">1</span>;</span><br><span class="line">        Long cur = <span class="number">0</span>, pow = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (pos = <span class="built_in">strlen</span>(s) - <span class="number">1</span>; pos &gt;= Exp + bound - <span class="number">1</span>; pos -= Exp, val.<span class="built_in">push_back</span>(cur), cur = <span class="number">0</span>, pow = <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = pos; i &gt; pos - Exp; --i)</span><br><span class="line">                cur += (s[i] - <span class="string">&#x27;0&#x27;</span>) * pow, pow *= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span> (cur = <span class="number">0</span>, pow = <span class="number">1</span>; pos &gt;= bound; --pos)</span><br><span class="line">            cur += (s[pos] - <span class="string">&#x27;0&#x27;</span>) * pow, pow *= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (cur)</span><br><span class="line">            val.<span class="built_in">push_back</span>(cur);</span><br><span class="line">    &#125;</span><br><span class="line">    BigInt &amp;<span class="keyword">operator</span>=(<span class="type">const</span> <span class="type">char</span> *s)&#123;</span><br><span class="line">        BigInt <span class="built_in">n</span>(s);</span><br><span class="line">        *<span class="keyword">this</span> = n;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    BigInt &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Long x)&#123;</span><br><span class="line">        BigInt <span class="built_in">n</span>(x);</span><br><span class="line">        *<span class="keyword">this</span> = n;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, BigInt &amp;n)&#123;</span><br><span class="line">        string s;</span><br><span class="line">        is &gt;&gt; s;</span><br><span class="line">        n=(<span class="type">char</span>*)s.<span class="built_in">data</span>();</span><br><span class="line">        <span class="keyword">return</span> is;</span><br><span class="line">    &#125;</span><br><span class="line">    BigInt &amp;<span class="keyword">operator</span>+=(<span class="type">const</span> BigInt &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> cap = std::<span class="built_in">max</span>(<span class="built_in">size</span>(), rhs.<span class="built_in">size</span>()) + <span class="number">1</span>;</span><br><span class="line">        val.<span class="built_in">resize</span>(cap);</span><br><span class="line">        <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cap - <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            val[i] = <span class="built_in">Value</span>(val[i], nega) + <span class="built_in">Value</span>(<span class="built_in">At</span>(rhs, i), rhs.nega) + carry, carry = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (val[i] &gt;= Mod)</span><br><span class="line">                val[i] -= Mod, carry = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (val[i] &lt; <span class="number">0</span>)</span><br><span class="line">                val[i] += Mod, carry = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((val.<span class="built_in">back</span>() = carry) == <span class="number">-1</span>) <span class="comment">//assert(val.back() == 1 or 0 or -1)</span></span><br><span class="line">        &#123;</span><br><span class="line">            nega = <span class="literal">true</span>, val.<span class="built_in">pop_back</span>();</span><br><span class="line">            <span class="type">bool</span> tailZero = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cap - <span class="number">1</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (tailZero &amp;&amp; val[i])</span><br><span class="line">                    val[i] = Mod - val[i], tailZero = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    val[i] = Mod - <span class="number">1</span> - val[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">trim</span>();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>-(<span class="type">const</span> BigInt &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">BigInt <span class="title">ret</span><span class="params">(rhs)</span></span>;</span><br><span class="line">        ret.nega ^= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    BigInt &amp;<span class="keyword">operator</span>-=(<span class="type">const</span> BigInt &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        rhs.nega ^= <span class="number">1</span>;</span><br><span class="line">        *<span class="keyword">this</span> += rhs;</span><br><span class="line">        rhs.nega ^= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>*(<span class="type">const</span> BigInt &amp;lhs, <span class="type">const</span> BigInt &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> len=<span class="number">1</span>;</span><br><span class="line">        BigInt ll=lhs,rr=rhs;</span><br><span class="line">        ll.nega = lhs.nega ^ rhs.nega;</span><br><span class="line">        <span class="keyword">while</span>(len&lt;<span class="number">2</span>*lhs.<span class="built_in">size</span>()||len&lt;<span class="number">2</span>*rhs.<span class="built_in">size</span>())len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        ll.val.<span class="built_in">resize</span>(len),rr.val.<span class="built_in">resize</span>(len);</span><br><span class="line">        Complex x1[len],x2[len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="function">Complex <span class="title">nx</span><span class="params">(ll[i],<span class="number">0.0</span>)</span>,<span class="title">ny</span><span class="params">(rr[i],<span class="number">0.0</span>)</span></span>;</span><br><span class="line">            x1[i]=nx;</span><br><span class="line">            x2[i]=ny;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fft</span>(x1,len,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">fft</span>(x2,len,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; len; i++)</span><br><span class="line">            x1[i] = x1[i] * x2[i];</span><br><span class="line">        <span class="built_in">fft</span>( x1 , len , <span class="number">-1</span> );</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; len; i++)</span><br><span class="line">            ll[i] = <span class="built_in">int</span>( x1[i].x + <span class="number">0.5</span> );</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; len; i++)&#123;</span><br><span class="line">            ll[i+<span class="number">1</span>]+=ll[i]/Mod;</span><br><span class="line">            ll[i]%=Mod;</span><br><span class="line">        &#125;</span><br><span class="line">        ll.<span class="built_in">trim</span>();</span><br><span class="line">        <span class="keyword">return</span> ll;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>*(<span class="type">const</span> BigInt &amp;lhs, <span class="type">const</span> Long &amp;x)&#123;</span><br><span class="line">        BigInt ret=lhs;</span><br><span class="line">        <span class="type">bool</span> negat = ( x &lt; <span class="number">0</span> );</span><br><span class="line">        Long xx = (negat) ? -x : x;</span><br><span class="line">        ret.nega ^= negat;</span><br><span class="line">        ret.val.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        ret.val.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; ret.<span class="built_in">size</span>(); i++)</span><br><span class="line">            ret[i]*=xx;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; ret.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            ret[i+<span class="number">1</span>]+=ret[i]/Mod;</span><br><span class="line">            ret[i] %= Mod;</span><br><span class="line">        &#125;</span><br><span class="line">        ret.<span class="built_in">trim</span>();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    BigInt &amp;<span class="keyword">operator</span>*=(<span class="type">const</span> BigInt &amp;rhs) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> * rhs; &#125;</span><br><span class="line">    BigInt &amp;<span class="keyword">operator</span>*=(<span class="type">const</span> Long &amp;x) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> * x; &#125;</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>/(<span class="type">const</span> BigInt &amp;lhs, <span class="type">const</span> BigInt &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">static</span> std::vector&lt;BigInt&gt; powTwo&#123;<span class="built_in">BigInt</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">static</span> std::vector&lt;BigInt&gt; estimate;</span><br><span class="line">        estimate.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">absComp</span>(lhs, rhs) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">BigInt</span>();</span><br><span class="line">        BigInt cur = rhs;</span><br><span class="line">        <span class="type">int</span> cmp;</span><br><span class="line">        <span class="keyword">while</span> ((cmp = <span class="built_in">absComp</span>(cur, lhs)) &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            estimate.<span class="built_in">push_back</span>(cur), cur += cur;</span><br><span class="line">            <span class="keyword">if</span> (estimate.<span class="built_in">size</span>() &gt;= powTwo.<span class="built_in">size</span>())</span><br><span class="line">                powTwo.<span class="built_in">push_back</span>(powTwo.<span class="built_in">back</span>() + powTwo.<span class="built_in">back</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">BigInt</span>(powTwo.<span class="built_in">back</span>().val, lhs.nega ^ rhs.nega);</span><br><span class="line">        BigInt ret = powTwo[estimate.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">        cur = estimate[estimate.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = estimate.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; cmp != <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span> ((cmp = <span class="built_in">absComp</span>(cur + estimate[i], lhs)) &lt;= <span class="number">0</span>)</span><br><span class="line">                cur += estimate[i], ret += powTwo[i];</span><br><span class="line">        ret.nega = lhs.nega ^ rhs.nega;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>/(<span class="type">const</span> BigInt &amp;num,<span class="type">const</span> Long &amp;x)&#123;</span><br><span class="line">        <span class="type">bool</span> negat = ( x &lt; <span class="number">0</span> );</span><br><span class="line">        Long xx = (negat) ? -x : x;</span><br><span class="line">        BigInt ret;</span><br><span class="line">        Long k = <span class="number">0</span>;</span><br><span class="line">        ret.val.<span class="built_in">resize</span>( num.<span class="built_in">size</span>() );</span><br><span class="line">        ret.nega = (num.nega ^ negat);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = num.<span class="built_in">size</span>() - <span class="number">1</span> ;i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            ret[i] = ( k * Mod + num[i]) / xx;</span><br><span class="line">            k = ( k * Mod + num[i]) % xx;</span><br><span class="line">        &#125;</span><br><span class="line">        ret.<span class="built_in">trim</span>();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> BigInt &amp;rhs) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> nega == rhs.nega &amp;&amp; val == rhs.val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> BigInt &amp;rhs) <span class="type">const</span> &#123; <span class="keyword">return</span> nega != rhs.nega || val != rhs.val; &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> BigInt &amp;rhs) <span class="type">const</span> &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> &lt; rhs); &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> BigInt &amp;rhs) <span class="type">const</span> &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> &lt;= rhs); &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> BigInt &amp;rhs) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nega &amp;&amp; !rhs.nega)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!nega &amp;&amp; rhs.nega)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> cmp = <span class="built_in">absComp</span>(*<span class="keyword">this</span>, rhs);</span><br><span class="line">        <span class="keyword">return</span> nega ? cmp &gt;= <span class="number">0</span> : cmp &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> BigInt &amp;rhs) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nega &amp;&amp; !rhs.nega)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!nega &amp;&amp; rhs.nega)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">absComp</span>(*<span class="keyword">this</span>, rhs) &lt; <span class="number">0</span>) ^ nega;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">const</span> BigInt &amp;rhs)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::<span class="built_in">swap</span>(val, rhs.val);</span><br><span class="line">        std::<span class="built_in">swap</span>(nega, rhs.nega);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">BigInt ba,bb;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;ba&gt;&gt;bb;</span><br><span class="line">    cout &lt;&lt; ba + bb &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;<span class="comment">//和</span></span><br><span class="line">    cout &lt;&lt; ba - bb &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;<span class="comment">//差</span></span><br><span class="line">    cout &lt;&lt; ba * bb &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;<span class="comment">//积</span></span><br><span class="line">    BigInt d;</span><br><span class="line">    cout &lt;&lt; (d = ba / bb) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;<span class="comment">//商</span></span><br><span class="line">    cout &lt;&lt; ba - d * bb &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;<span class="comment">//余</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分图最大匹配"><a href="#二分图最大匹配" class="headerlink" title="二分图最大匹配"></a>二分图最大匹配</h2><p>题目链接：<a href="https://www.luogu.com.cn/problem/P3386">https://www.luogu.com.cn/problem/P3386</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxvertex=<span class="number">503</span>&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxedge=<span class="number">5e4</span>+<span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> tot,n,m,e,ans;</span><br><span class="line"><span class="type">int</span> head[maxvertex],match[maxvertex&gt;&gt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,next;&#125;edge[maxedge];</span><br><span class="line"><span class="type">bool</span> vis[maxvertex&gt;&gt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x],y;i;i=edge[i].next)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[y=edge[i].v])&#123;</span><br><span class="line">            vis[y]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>((!match[y]) || <span class="built_in">dfs</span>(match[y]))&#123;</span><br><span class="line">                match[y]=x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;e);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=e;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dfs</span>(i))&#123;ans++;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字典树-Trie"><a href="#字典树-Trie" class="headerlink" title="字典树 (Trie)"></a>字典树 (Trie)</h2><blockquote><p>本文章的 Trie 内容参考自 oi-wiki.org/string/trie</p></blockquote><p>结构体封装的模板：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">trie</span> &#123;</span><br><span class="line">  <span class="type">int</span> nex[<span class="number">100000</span>][<span class="number">26</span>], cnt;</span><br><span class="line">  <span class="type">bool</span> exist[<span class="number">100000</span>];  <span class="comment">// 该结点结尾的字符串是否存在</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> l)</span> </span>&#123;  <span class="comment">// 插入字符串</span></span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">      <span class="type">int</span> c = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">      <span class="keyword">if</span> (!nex[p][c]) nex[p][c] = ++cnt;  <span class="comment">// 如果没有，就添加结点</span></span><br><span class="line">      p = nex[p][c];</span><br><span class="line">    &#125;</span><br><span class="line">    exist[p] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> l)</span> </span>&#123;  <span class="comment">// 查找字符串</span></span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">      <span class="type">int</span> c = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">      <span class="keyword">if</span> (!nex[p][c]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      p = nex[p][c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> exist[p];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>题目： <a href="https://www.luogu.com.cn/problem/P2580">https://www.luogu.com.cn/problem/P2580</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5e5</span>+<span class="number">3</span>;</span><br><span class="line"><span class="type">char</span> s[<span class="number">55</span>];</span><br><span class="line"><span class="type">int</span> n,m,nex[MAXN][<span class="number">26</span>],tag[MAXN],cnt=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;s[j];j++)&#123;</span><br><span class="line">            <span class="type">int</span> c = s[j]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(!nex[p][c])nex[p][c]=++cnt;</span><br><span class="line">            p=nex[p][c];</span><br><span class="line">        &#125;</span><br><span class="line">        tag[p] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;s[j];j++)&#123;</span><br><span class="line">            <span class="type">int</span> c = s[j]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            p=nex[p][c];</span><br><span class="line">            <span class="keyword">if</span>(!p)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tag[p]==<span class="number">1</span>)&#123;</span><br><span class="line">            tag[p]=<span class="number">2</span>;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tag[p]==<span class="number">2</span>) <span class="built_in">puts</span>(<span class="string">&quot;REPEAT&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;WRONG&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="01-Trie"><a href="#01-Trie" class="headerlink" title="01-Trie"></a>01-Trie</h2><p>题面： <a href="https://www.luogu.com.cn/problem/P4551">https://www.luogu.com.cn/problem/P4551</a></p><p>注意：以下按数位权值从高到低建立<code>trie</code>。</p><p><img src="https://bu.dusays.com/2023/02/14/63eb825f31ee3.jpg" alt="9-5.jpg"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span>+<span class="number">3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm = maxn<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,w,next;&#125;edge[maxm&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> head[maxn],tot,dis[maxn];</span><br><span class="line"><span class="type">int</span> n,m,ans,cnt=<span class="number">1</span>,nex[maxn&lt;&lt;<span class="number">5</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].w=z;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>,p=<span class="number">1</span>;~i;i--)&#123;</span><br><span class="line">        <span class="type">int</span> c = ((x&gt;&gt;i)&amp;<span class="number">1</span>); <span class="comment">//二进制从（权值）高位向低位取</span></span><br><span class="line">        <span class="keyword">if</span>(!nex[p][c])nex[p][c]=++cnt;</span><br><span class="line">        p=nex[p][c];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>,p=<span class="number">1</span>;~i;i--)&#123;</span><br><span class="line">        <span class="type">int</span> c = ((x&gt;&gt;i)&amp;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(nex[p][c^<span class="number">1</span>])&#123;  <span class="comment">//贪心</span></span><br><span class="line">            p=nex[p][c^<span class="number">1</span>];</span><br><span class="line">            res |= (<span class="number">1</span>&lt;&lt;i);  <span class="comment">//第i位（从低权位向高权位数）置1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> p=nex[p][c];</span><br><span class="line">    &#125;</span><br><span class="line">    ans=<span class="built_in">MAX</span>(ans,res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="built_in">insert</span>(dis[x]);</span><br><span class="line">    <span class="built_in">get</span>(dis[x]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">        <span class="type">int</span> y=edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(y==fa)<span class="keyword">continue</span>;</span><br><span class="line">        dis[y]=dis[x]^edge[i].w;</span><br><span class="line">        <span class="built_in">dfs</span>(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y,z);</span><br><span class="line">        <span class="built_in">addedge</span>(y,x,z);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="维护异或和"><a href="#维护异或和" class="headerlink" title="维护异或和"></a>维护异或和</h3><p>注意：以下按权值从低位到高位建立<code>trie</code>。</p><p>对于每一个节点，记录以下三个量：</p><ul><li><code>ch[o][0/1]</code> 指节点 o 的两个儿子，<code>ch[o][0]</code>指下一位是 0，同理<code>ch[o][1]</code>指下一位是 1。</li><li><code>w[o]</code>指节点 o 到其父亲节点这条边上数值的数量（权值）。每插入一个数字<code>x</code>，<code>x</code>二进制拆分后在 trie 上路径的权值都会<code>+1</code>。</li><li><code>xorv[o]</code>指以 o 为根的子树维护的异或和。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">maintain</span><span class="params">(<span class="type">int</span> o)</span></span>&#123;</span><br><span class="line">    w[o] = xorv[o] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ch[o][<span class="number">0</span>])&#123;</span><br><span class="line">        w[o] += w[ch[o][<span class="number">0</span>]];</span><br><span class="line">        xorv[o] ^= xorv[ch[o][<span class="number">0</span>]] &lt;&lt; <span class="number">1</span>; <span class="comment">//挪位置，末位补0，对应o到ch[o][0]这条边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch[o][<span class="number">1</span>])&#123;</span><br><span class="line">        w[o] += w[ch[o][<span class="number">1</span>]];</span><br><span class="line">        xorv[o] ^= (xorv[ch[o][<span class="number">1</span>]] &lt;&lt; <span class="number">1</span>) | (w[ch[o][<span class="number">1</span>]] &amp; <span class="number">1</span>); </span><br><span class="line">    &#125; <span class="comment">//因为ch[o][1]是经过1从o下来的，所以这个“经过的1”的这一位的异或和就是w[ch[o][1]]的奇偶性</span></span><br><span class="line">    w[o] = w[o] &amp; <span class="number">1</span>; <span class="comment">//这句话删掉也可以？因为上文就只利用了他的奇偶性。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入和删除，只需要修改叶子节点的<code>w[]</code>即可，在回溯的过程中一路维护：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> trie &#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXH = <span class="number">21</span>;</span><br><span class="line"><span class="type">int</span> ch[_ * (MAXH + <span class="number">1</span>)][<span class="number">2</span>], w[_ * (MAXH + <span class="number">1</span>)], xorv[_ * (MAXH + <span class="number">1</span>)];</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>;  <span class="comment">// 这里的 _ 是一个 int 型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mknode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ++tot;</span><br><span class="line">  ch[tot][<span class="number">1</span>] = ch[tot][<span class="number">0</span>] = w[tot] = xorv[tot] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">maintain</span><span class="params">(<span class="type">int</span> o)</span> </span>&#123;</span><br><span class="line">  w[o] = xorv[o] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (ch[o][<span class="number">0</span>]) &#123;</span><br><span class="line">    w[o] += w[ch[o][<span class="number">0</span>]];</span><br><span class="line">    xorv[o] ^= xorv[ch[o][<span class="number">0</span>]] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (ch[o][<span class="number">1</span>]) &#123;</span><br><span class="line">    w[o] += w[ch[o][<span class="number">1</span>]];</span><br><span class="line">    xorv[o] ^= (xorv[ch[o][<span class="number">1</span>]] &lt;&lt; <span class="number">1</span>) | (w[ch[o][<span class="number">1</span>]] &amp; <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  w[o] = w[o] &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;o, <span class="type">int</span> x, <span class="type">int</span> dp)</span> </span>&#123; <span class="comment">//看懂过，没时间别再看</span></span><br><span class="line">  <span class="keyword">if</span> (!o) o = <span class="built_in">mknode</span>();</span><br><span class="line">  <span class="keyword">if</span> (dp &gt; MAXH) <span class="keyword">return</span> (<span class="type">void</span>)(w[o]++);</span><br><span class="line">  <span class="built_in">insert</span>(ch[o][x &amp; <span class="number">1</span>], x &gt;&gt; <span class="number">1</span>, dp + <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">maintain</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(<span class="type">int</span> o, <span class="type">int</span> x, <span class="type">int</span> dp)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (dp &gt; <span class="number">20</span>) <span class="keyword">return</span> (<span class="type">void</span>)(w[o]--);</span><br><span class="line">  <span class="built_in">erase</span>(ch[o][x &amp; <span class="number">1</span>], x &gt;&gt; <span class="number">1</span>, dp + <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">maintain</span>(o);</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace trie</span></span><br></pre></td></tr></table></figure><p>注意：这里的<code>MAXH</code>指 trie 的深度，也就是强制让每一个叶子节点到根的距离为<code>MAXH</code>。对于一些比较小的值，可能有时候不需要建立这么深（例如：如果插入数字<code>4</code>，分解成二进制后为<code>100</code>，从根开始插入<code>001</code>这三位即可），但是我们强制插入<code>MAXH</code>位。这样做的目的是为了便于全局<code>+1</code>时处理进位。例如：如果原数字是<code>3</code>（<code>11</code>），递增之后变成<code>4</code>（<code>100</code>），如果当初插入<code>3</code>时只插入了<code>2</code>位，那这里的进位就没了。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tarjan </tag>
            
            <tag> KMP </tag>
            
            <tag> lca </tag>
            
            <tag> 埃氏筛 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 自适应辛普森 </tag>
            
            <tag> Huffman树 </tag>
            
            <tag> 拓扑排序 </tag>
            
            <tag> kruscal </tag>
            
            <tag> spfa </tag>
            
            <tag> dijkstra </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 割边 </tag>
            
            <tag> 割点 </tag>
            
            <tag> 高精度 </tag>
            
            <tag> 二分图 </tag>
            
            <tag> Trie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode407</title>
      <link href="/posts/5f46c25d.html"/>
      <url>/posts/5f46c25d.html</url>
      
        <content type="html"><![CDATA[<p>正经解法比较复杂，这里贴出一个相对简单的解法。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个 m x n 的矩阵，其中的值均为非负整数，代表二维高度图每个单元的高度，请计算图中形状最多能接多少体积的雨水。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;= m,n &lt;= 200</span><br><span class="line">0 &lt;= heightMap[i][j] &lt;= 2*10^4</span><br></pre></td></tr></table></figure><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p><img src="https://assets.leetcode.com/uploads/2021/04/08/trap1-3d.jpg" alt="8-1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 下雨后，雨水将会被上图蓝色的方块中。总的接雨水量为1+2+1=4。</span><br></pre></td></tr></table></figure><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p><img src="https://assets.leetcode.com/uploads/2021/04/08/trap2-3d.jpg" alt="8-2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]</span><br><span class="line">输出: 10</span><br></pre></td></tr></table></figure><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>首先需要明确一点，该题中不存在“空洞”，否则数据不足以描述房屋的状态。即不存在以下（左视图）情况：</p><p><img src="https://s2.loli.net/2022/09/27/m8bp5xUGv7jSaL2.png" alt="8-3.png"></p><p>引理：沿水平方向任切一刀去除下层后，接水体积只会减少被切除部分中水的体积（若存在）。</p><p>解释：考虑使用一个锋利的铁板去切，切后仍用铁板托住上层，则上下两层的水均不会流出。</p><p>由引理，问题规模缩小。</p><h3 id="代码实现（无优化）"><a href="#代码实现（无优化）" class="headerlink" title="代码实现（无优化）"></a>代码实现（无优化）</h3><p>记最高高度为<code>MAXH</code>，从第一层（从上往下数）开始切，<code>for k 1 to MAXH</code>，则切下来的上层可记为<code>MAX(0,a[i][j]-MAXH+k)</code>，对新的矩阵dfs元素为零的连通块，同时记录连通块大小。注意若连通块通向边界，则水流出，该连通块作废。遍历完第k层后k++，继续计算。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> a[<span class="number">203</span>][<span class="number">203</span>];</span><br><span class="line"><span class="type">int</span> MAXH=<span class="number">-1</span>,m,n,ans;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">203</span>*<span class="number">203</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mmap</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> <span class="number">203</span>*(x<span class="number">-1</span>)+y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">            MAXH=<span class="built_in">MAX</span>(MAXH,a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">bool</span> _myflag,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    vis[<span class="built_in">mmap</span>(x,y)]=<span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>((x==<span class="number">1</span>)||(x==m)||(y==<span class="number">1</span>)||(y==n))&#123;</span><br><span class="line">        _myflag=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">0</span>;p&lt;<span class="number">4</span>;p++)&#123;</span><br><span class="line">        <span class="type">int</span> nx=x+dir[p][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> ny=y+dir[p][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(vis[<span class="built_in">mmap</span>(nx,ny)]||(nx&lt;<span class="number">1</span>)||(nx&gt;m)||(ny&lt;<span class="number">1</span>)||(ny&gt;n))<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">MAX</span>(<span class="number">0</span>,a[nx][ny]-MAXH+k))<span class="keyword">continue</span>;</span><br><span class="line">        cnt+=<span class="built_in">dfs</span>(nx,ny,_myflag,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!_myflag)cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">input</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=MAXH;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">MAX</span>(<span class="number">0</span>,a[i][j]-MAXH+k))vis[<span class="built_in">mmap</span>(i,j)]=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(vis[<span class="built_in">mmap</span>(i,j)])<span class="keyword">continue</span>;</span><br><span class="line">                ans+=<span class="built_in">dfs</span>(i,j,<span class="literal">true</span>,k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码实现（优化后）"><a href="#代码实现（优化后）" class="headerlink" title="代码实现（优化后）"></a>代码实现（优化后）</h3><p>上面的代码中，首次找到某一层的全部连通块后，记录连通块的位置，不再进行dfs，改为查询已记录位置下方是否有零。</p><p>该改进的原理是：因不存在空洞，下一层的零元连通块是上层零元连通块的子集。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> a[<span class="number">203</span>][<span class="number">203</span>],pos[<span class="number">202</span>*<span class="number">202</span>][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> MAXH=<span class="number">-1</span>,m,n,ans,cnt;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">203</span>*<span class="number">203</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mmap</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> <span class="number">203</span>*(x<span class="number">-1</span>)+y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">            MAXH=<span class="built_in">MAX</span>(MAXH,a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k,<span class="type">bool</span> s)</span></span>&#123;</span><br><span class="line">    vis[<span class="built_in">mmap</span>(x,y)]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(s)&#123;</span><br><span class="line">        pos[++cnt][<span class="number">0</span>]=x;</span><br><span class="line">        pos[cnt][<span class="number">1</span>]=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">0</span>;p&lt;<span class="number">4</span>;p++)&#123;</span><br><span class="line">        <span class="type">int</span> nx=x+dir[p][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> ny=y+dir[p][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(vis[<span class="built_in">mmap</span>(nx,ny)]||(nx&lt;<span class="number">1</span>)||(nx&gt;m)||(ny&lt;<span class="number">1</span>)||(ny&gt;n))<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">MAX</span>(<span class="number">0</span>,a[nx][ny]-MAXH+k))<span class="keyword">continue</span>;</span><br><span class="line">        cnt+=<span class="built_in">dfs</span>(nx,ny,k,s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">input</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=MAXH;k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> ha=<span class="number">1</span>;ha&lt;=cnt;ha++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[pos[ha][<span class="number">0</span>]][pos[ha][<span class="number">1</span>]]-MAXH+k&lt;=<span class="number">0</span>)ans++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">MAX</span>(<span class="number">0</span>,a[<span class="number">1</span>][j]-MAXH+k))vis[<span class="built_in">mmap</span>(<span class="number">1</span>,j)]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(vis[<span class="built_in">mmap</span>(<span class="number">1</span>,j)])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(<span class="number">1</span>,j,k,<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">MAX</span>(<span class="number">0</span>,a[m][j]-MAXH+k))vis[<span class="built_in">mmap</span>(m,j)]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(vis[<span class="built_in">mmap</span>(m,j)])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(m,j,k,<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">MAX</span>(<span class="number">0</span>,a[i][<span class="number">1</span>]-MAXH+k))vis[<span class="built_in">mmap</span>(i,<span class="number">1</span>)]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(vis[<span class="built_in">mmap</span>(i,<span class="number">1</span>)])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(i,<span class="number">1</span>,k,<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">MAX</span>(<span class="number">0</span>,a[i][n]-MAXH+k))vis[<span class="built_in">mmap</span>(i,n)]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(vis[<span class="built_in">mmap</span>(i,n)])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(i,n,k,<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">MAX</span>(<span class="number">0</span>,a[i][j]-MAXH+k))vis[<span class="built_in">mmap</span>(i,j)]=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(vis[<span class="built_in">mmap</span>(i,j)])<span class="keyword">continue</span>;</span><br><span class="line">                ans+=<span class="built_in">dfs</span>(i,j,k,<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!ans)<span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>new918</title>
      <link href="/posts/e1e3cea2.html"/>
      <url>/posts/e1e3cea2.html</url>
      
        <content type="html"><![CDATA[<p>呵，今夜无眠。</p><p><img src="https://s2.loli.net/2022/12/28/EiYv8nyIVgSBHhu.jpg" alt="7-1.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疫情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一件小事</title>
      <link href="/posts/9c06e4a8.html"/>
      <url>/posts/9c06e4a8.html</url>
      
        <content type="html"><![CDATA[<p>我的某位中学老师在班上扯淡的时候，和大家聊过这么件事：他的母亲动手术需要子女签字，他妹妹去的时候医生却问她：“家里有兄弟吗？有？字让他签，你签了不算。”</p><p><em>“你签了不算。”</em> 为什么？因为这个医生重男轻女，认为家庭中只有男人可以做主？如果止步于此，往往会导向对传统观念的批评之类的陈词滥调，为了弄清楚事情背后的逻辑，必须从另一种角度审视“家里只有男人可以做主”意味着什么。</p><p>换个说法，例如“张三替李四做主”。这意味着李四被外人欺负时，张三会为李四出头，这种出头有时是伴随着暴力的——毋庸多疑，初中学生的混混组织即是很好的例证，而有时虽然形式上温和，但最终的保障手段依然是暴力的。</p><p>但李四并非白白地拿了好处，李四须将自己的部分权利让渡出去，与张三形成一个捆绑的整体，失去一些独立性。李四是不能与外人背着张三作出决定的，因为如果张三不认可这个决定，决定就会失效。</p><p>这种基于暴力的主从关系，在以前和现在相当多的时候表现为性别身份。但在现代社会，随着女性更多地参与劳动，我们看到越来越多的基于经济的主从关系。如果止步于此，未免天真了些，经济权力是权力的重要部分，但还远远不够。因为基于暴力的主从关系仍然存在，甚至可与经济上相反的主从关系并行不悖。更关键的，即在上面的例子中，我们看到，李四在一些方面是和张三形成了利益共同体的，但事实上，即使张三不维护李四，基于张三单方面的暴力，这种主从关系，尤其在旧社会，仍然可以成立。</p><p>来看一个简单的例子。不少人在现实中不会对身边的家暴行为发声（报警未必有效），安慰自己别人的家事旁人莫管，这其实是忌惮家暴者的暴力。</p><p>这并不意味着仔细挑选价值观相近的生活伴侣就能独善其身，因为暴力不会止步于家庭单元。小到男女之间，大到国家层面，暴力已经在不知不觉中完成了对人的驯化，侵入了生活的方方面面，成为一种存在于集体潜意识中的恐怖。</p><p>回顾文章开头的例子。<em>“家中只有男人可以做主”</em>， 一旦某人接受了这一观点，哪怕他是一个短视的、无法预测事件发展的人，也能绕过对暴力的想象，在事实上求得一个安稳的局面。<strong>对于上文提到的医生而言，则是避开了可能的医闹。</strong></p><p>为什么性别平等难以实现？为什么校园暴力中很少有同伴为被欺凌者发声？为什么社会事件只有成为舆论热点才能得到处理？暴力是如何在中国的现代社会中发挥作用的？一个中国人如果从不思考这些问题，在这些问题降临到自己头上的时候，恐怕会一时没了神，又羞愧又无措吧！</p><p>暴力的不对等所导致的不平等，可能远比常人想象的要严重得多。当一个人因为暴力上的不对等而刻意思考回避可能激怒对方的措辞、但对方不会时，两个人就已经不在平等的位置上了。</p><p>设想这样的情景：一个女人在遇到块头比自己大很多的陌生男人提出冒犯性的要求/攻击性、侮辱性的举动时，能小声地骂一句“傻逼”然后快速溜走，已经算是很勇了——但这仍是有风险的，因为你不知道陌生人的脾性如何。</p><p>再来看最后一例：</p><blockquote><p>(引用自知乎用户 <a href="https://www.zhihu.com/people/feng-yi-nan-77-11">@风衣男</a>)<br><strong>问题：</strong> 湖南一男子车上脱鞋光脚搭前座女子头上，如何看待男子的行为？<br><strong>问题描述：</strong> 9月17日，湖南怀化。一男子在大巴车上脱鞋休息，然后把脚放在前座女子头上，十分没有素质。据目击者称，旁边大哥跟他沟通，但是没什么效果，他就继续把那个腿放在前排，两人就在那理论。 <a href="https://news.hbtv.com.cn/p/2277964.html">新闻链接</a><br><strong>回答原文：</strong><br>有一次坐硬座去武汉，由于接近始发站，车上人很少，当我到达座位的时候，有一个三十五左右的小伙，脱鞋穿袜子躺在三人排的座位上，我的座位在对面，咱也不能说啥，坐下吧。<br>谁知道五分钟后这玩意坐起来了，靠窗坐的，脚伸到对面的座位上放着，在我旁边，咱脸皮薄啊，没好意思说，以为一会就收回去了，结果等了十分钟，这玩意刷上短视频了，还超大声，实在忍不住提醒小伙把鞋穿上，这玩意用眼白翻我一下，装没听到，卧槽，真是婶子能忍你叔不能忍啊！我直接脱鞋脚也放在对面，由于逛了一天的展会，夏天又容易出汗，那味道我都想觉得酸爽，一分钟后小伙又翻白眼瞅我一下，没想到这货挺能坚持，啥话也不说，一直到十分钟后小伙默默地穿上了鞋，又过了十分钟看我没动静，小声提醒我:大哥，这样不好吧，咱把鞋穿上吧！我也学着小伙用眼白翻了它一下，没搭理他，<strong>我感觉要不是我一米八二，一百七十斤的块头小伙没把握，能直接骂我</strong>，就这样又过了十分钟感觉也差不多了，正好也到了下一站，为了不破坏我这个遵纪守法好公民的形象，咱也把鞋穿上了。<br>随着上车的人开始找座位，小伙去车厢交界处抽烟了，这一走就是三小时没见，一直到车厢坐满了才回来！回来也是背靠座位打盹养神，视频也不刷了！<br>有些人，总觉得哪里都是它们家，没有边界感，只有当你用实际行动告诉它该怎么做的时候，它才会有所改变！</p></blockquote><p>一个人付诸暴力的能力很大程度上影响了他的生活方式。</p><p>至于暴力在社会和国家层面是怎样发挥影响的，目前只有一些粗糙幼稚的想法，就不放了。</p>]]></content>
      
      
      <categories>
          
          <category> 闲文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诡辩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直面真实的世界</title>
      <link href="/posts/6e7d8092.html"/>
      <url>/posts/6e7d8092.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>偶然读到一篇很好的文章，作者是清华的劳东燕教授，转载如下。</p></blockquote><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>踌躇许久，仍不知道2021年的总结，要从哪里写起。 </p><p>过去的一年于我而言，算是地过得平静，少了明眼可见的中伤，也不复求而不得的失望。然而，内心的郁结之处并未消散，同时迷茫之感与日俱增。 </p><p>记得2019年曾读到一句话，大意是，2019年是过去十年中最糟糕的一年，同时也是未来十年里最美好的一年。当时只道是揶揄，如今回看，倒是颇有些洞察先机的意味。<br>疫情之下，岁月静好的想象终于难以维续，因为兵荒马乱的日子，距离每个人都几乎只有一步之遥。就在不久之前，又一个城市经历了围城之困。谁能保证，武汉与西安所经历的一切，就不会降临到我们自己的身上？即便没有围城之困，在经济下行和失业降薪的风潮之下，谁又知道前方会有什么遭遇在等着我们？ </p><p>在一个到处充斥正能量话语的社会，不安感却像潮水一样，迅速地在全社会蔓延。在不安感的支配下，对自由的追求时常成为被讥讽的对象，而人们对于权力的渐趋集中，对于以安全为名的各式管控，对于以大数据追踪为基础的技术统治，日益表现出无所谓甚至是欢迎的态度。 </p><p>2020年的我，愤慨与感喟都主要围绕自身的遭遇，试着全面接纳在不期然中降临的中年心态；终究，我们中的很多人，都或迟或早地要步入中年，从生理到心理。2021年的我，似乎更多觉察到的是周遭的变化，对于周遭世界与很多事物，都被迫经历重新认识的过程。 </p><h2 id="在荒谬中生活"><a href="#在荒谬中生活" class="headerlink" title="在荒谬中生活"></a>在荒谬中生活</h2><p>疫情的连锁反应，加上时局的变动，导致光怪陆离的社会现象此起彼伏。 </p><p>发表一份记录疫情下日常生活之种种的日记，得做好被约谈的准备。声援一下因课堂言论被开除的同行，甚至要面临“被精神病”的遭遇；在自媒体的接力呼吁之下，好不容易从精神病院出来，最终却只能在年关来临之际，选择从此别离家乡。 </p><p>冰天雪地里，怀胎八月的孕妇在医院门外坐等流产，而突发心脏病的老人，以必须核酸检测为由，在无情的等待中失去救治的机会。一位妈妈接到中学放假的女儿，在已通过十八轮核酸检测的情况下，仍被卡点拦着不让回家，在冬日的寒夜彷徨街头直到天明。 </p><p>山东的某位镇委书记告诫上访人员，有一百种手段“刑事”对方；河南的某位县长更是杀气腾腾地喊话，春节期间要对恶意返乡者先隔离再拘留。 </p><p>以上种种，多么希望只是个例，可惜不是。那位声称有一百种手段“刑事”上访人员的镇委书记，想必不会认为自己说的内容有错，而只会怪自己政治上幼稚，把不能说而一直在做的事说出了口，还不小心被录了音。的确，她道出的是现实。刑法中多的是手段来对付上访人员，包括寻衅滋事罪、敲诈勒索罪以及扰乱国家机关工作秩序罪等，都是实务中常用的罪名。 </p><p>那位在冬日寒夜与女儿一起彷徨街头的妈妈，曾这样哭诉：“如果每一个教训都要付出生命的代价，才能成为教训的时候，这样是不是太惨痛了？……你们是执法部门，但是天理人情呀，我们是不是把人放在了第一位？” 她的哭诉让人潸然泪下。然而，在这起事件中，究竟谁是为恶者，谁需要对结果负责呢？答案是没有。就像当地街道办的工作人员回应的那样，我们无能为力，这个事情也不能说卡点人员做得不对。 </p><p>一切都是以安全或稳定为名，宣称是为了民众的福祉。可悲的是，无论是医院的保安还是卡点的人员，每个人都在尽忠职守，犹如螺丝钉那样，认真贯彻来自上面的规定，同时却对具体个人的苦难视若无睹，甚至本身就是他人苦难的肇因。 </p><p>单纯人性的恶，尽管看起来触目惊心，其实并不那么可怕，因为但凡有正常理性的人，都能做出正确的判断。就像重庆那位男子为实现再婚目的，不惜将一对亲生儿女从高楼抛下，谁都会发出恶魔在人间的斥责。然而，制度造成的恶，因其以日常化甚至是平庸的面目出现，导致人们普遍地不加提防，所以具有高度的传染性。纵观20世纪的浩劫，几乎都是由制度性的恶所造成，恶劣的制度加持人性的黑暗，一再地酿成难以想象的悲剧。 </p><p>在恍惚中，我听到国家机器在那里嘎吱嘎吱转动的声音，反应敏捷，运作有序，却缺乏任何温情，显得理性而冷酷。在这样的国家机器眼中，抽象的群体至高无上，而具体的成员毫无价值。事实上，作为群体的民众被抬举得越高，作为个体的成员就愈发地无足轻重。两种理念竟能并行不悖地存在，世界就是如此的荒谬。 </p><p>荒谬的不止于此。当初以自由为名而得以迅猛发展的网络与数据技术，正在成为新的统治工具，给作为社会成员的我们套上日益沉重的枷锁。技术本身以造福于社会为名而被大力倡导，但现实中它们经常被用于监控与操纵，包括进行愚弄。 </p><p>就比如，个人在朋友圈发布的信息，不时会遇到只有自己可见的情况，而发布者往往还并不知情。同时，与主流不同的声音越来越难以发出，即便侥幸通过发布环节的审查，也会被技术迅速地捕捉。此外，在技术的统治之下，个人被大数据系统所误伤，也经常不知道找谁理论，每个人都身不由己地陷入匿名的魔阵之中。 </p><p>学生时代在王小波的书中读到花剌子模国信使的故事，觉得匪夷所思。怎么会有这样的制度安排呢？凡是给国王带来好消息的信使，就会得到提升，给国王带来坏消息的人，则会被送去喂老虎。坏消息难道会因为信使的不传达而消失吗？然而，此种类似于寓言的故事，在现实中一再地上演。 </p><p>当下的社会治理中，不管什么层级，重要的往往不是出现了相应的问题，而是相应问题是否成为了舆情事件。于是乎，不解决问题，而只解决提出问题的人，成为治理中的惯常手段。把任何有影响力的事件都单纯地当作舆情问题，导致问题不仅没有解决，而且越来越多。本来微不足道的小事，最后变成天大的事。 </p><p>更为荒谬的是，很多被套上枷锁的人，不仅不愤怒于自由的丧失，还颇为怡然自得，就像温水中被煮的青蛙。并且，虽然自己也是被统治者，却特别善于为统治者着想。一切都是为了大局嘛，限制自由算什么，牺牲他人的权益更是不值一提。也正是在这样的社会氛围下，普通个人为维护自身的正当权益，被迫承担越来越多的污名。 </p><p>与此同时，越来越多的人，对于他人的不幸表现出不加掩饰的冷酷，甚至想方设法要从当事人的身上找出错处来。这种下意识的言行，折射出一种颇为微妙的内在心理：那些遭遇不幸的人们，完全（或至少部分）是由于自身的过错所导致，而我没有这样的问题，所以我是安全的，不幸不至于降临到我的身上。 </p><p>可以说，正是真实世界中安全感与稳定预期的严重匮乏，酿生了此类扭曲的自我臆想。当全社会陷入这样的臆想，被害人有错论的泛滥成灾，也就变得容易理解。只有纯洁无辜的被害人才被认为值得同情，而这样的被害人少之又少，人们自然可以心安理得地拒绝施予同情。基本的同情心与同理心，在这个社会，变得越来越稀缺，日渐地成为奢侈品。 </p><h2 id="在迷茫中忙碌"><a href="#在迷茫中忙碌" class="headerlink" title="在迷茫中忙碌"></a>在迷茫中忙碌</h2><p>人到中年，突然发现需要重新认识这个世界，在反思自己是否有些矫情的同时，我有一种不知身在何处的惘然。直面荒谬，又时常无能为力。所以，尽管早过了不惑之年，反而愈加地困惑与迷茫。 </p><p>公众号停更一年，期间除因出版社的提议而发布过新书的信息外，没有专门写过或推送过任何文章。偶尔有朋友或学生问起，多是以忙的理由来搪塞。但从内心来说，停更的主要原因恐怕还是迷茫。 </p><p>迷茫首先表现在，但凡涉及社会性的问题，我已经完全不知道，言说的边界究竟在哪里，也因此不知道自己可以写些什么。当2021年的诺贝尔和平奖揭晓，授予菲律宾记者玛丽亚·蕾莎与俄罗斯《新报》总编辑德米特里·穆拉托夫时，国内报道的是“以表彰二人做出的贡献”，而外媒的报道则是“以表彰二人为捍卫言论ZY做出的贡献”。不知从何时起，言论ZY竟成为讳莫如深的词汇。 </p><p>迷茫还表现在，除了可能给自己带来麻烦之外，我不知道这样的公共写作有什么意义。在公知被普遍污名化的今天，无论是民众还是政府，包括这个时代的青年，都不怎么欢迎指摘社会问题的知识分子。我看过一段视频，是一位年轻女孩挖苦讥讽公知的，被她点名道姓的那些人物，都曾是我们这一代年轻时颇为尊敬的知识界人物。看完之后，心里顿觉一阵寒意，不由地想起鲁迅先生的小说《药》中的人物夏瑜。夏瑜的牺牲有什么意义呢？大概只有作为人血馒头的意义。他为之付出生命的民众，就是那样对待他的。 </p><p>实际上，不止是公号文章的写作，甚至于对学术写作，我也开始陷于意义的迷茫之中。观察近些年来的法律实践，发现学术性写作除了为个人的安身立命提供些许本钱，原以为的推进中国法治的意义，纯属一厢情愿。法学理论的研究，越来越像学界中人的自娱自乐，表面的繁盛掩盖不了内里的空虚与犬儒。在学术日益内卷化的今天，论文写作的意义往往只在于发表。说到底，在理论对法治的设想与实务对法制的践行日益背道而驰的今天，也不要奢望理论能对实务产生多少影响。 </p><p>更为迷茫的是，在这一年中，我试着让自己收敛与合规，但终究发现，很多时候都会被逼到忍无可忍退无可退的地步。也许，是我的忍耐力不够吧。很多事情，但凡还有一点做人的血性，我都疑惑，怎么能忍得下来。无止境的忍耐，无原则的退让，最终会让自己都鄙视自己，那样苟且地活着，真是枉称为人。反之，不想忍耐的话，就要经常处于愤怒的状态，还可能被认为是麻烦人物，免不了陷入四面楚歌的境地。 </p><p>让人迷茫的还有，关于努力的意义。一直笃信越努力越幸运的我，突然间就陷入迷茫之中，不知道努力的意义何在。这些年来，努力前所未有地贬值，就像遭遇了严重的通货膨胀。所谓的“贬值”，不只意味着更多的努力换不来更高的收入，也意味着随着阶层提升渠道的收紧，拼命的努力也不见得能改变自身的命运；“贬值”还意味着，对很多社会问题所作的努力，难以获得真正有意义的改善。 </p><p>就比如，包括我本人在内的法界同行与媒体同仁，这两年在人脸识别的问题上做了不少的努力。两年之前北京地铁在准备推广人脸识别时，因遭遇舆论的反对而搁置；两年之后北京已有五个地铁站悄然推行人脸识别，预计很快就将全面铺开。不止如此，小区、商场、学校等各类公共场合，借疫情防控的东风，人脸识别技术的适用都有愈演愈烈之势。 </p><p>如果所做的努力没有意义，那我们还要继续选择努力吗？然而，不努力又能如何？恐怕只会使处境更为糟糕。所以，就只能在迷茫中忙碌，在忙碌中迷茫。在努力遭遇断崖式贬值的今天，这样的迷茫具有相当的普遍性，也无怪乎“内卷”与“躺平”，会成为具有时代标志性的关键词。 </p><p>“内卷”的本意是不必要的复杂化或缺乏进步的自我重复，对于努力的贬值现象，用“马尔萨斯陷阱”来形容可能更为准确。不过，“内卷”的字面意思直白易懂，也比较形象：既然没法对外使力，那就只能卷入内部的过度竞争。在努力的作用微乎其微的情况下，“躺平”也相应成为一种不失明智的处世立场。不再接受打鸡血式的激励，也许是年轻一代在用自己的方式，来表达消极的抗争，以部分地消解外在环境对个体的规训吧。 </p><h2 id="在适应中反省"><a href="#在适应中反省" class="headerlink" title="在适应中反省"></a>在适应中反省</h2><p>从年轻时候开始，我便认为法治在中国的实现，在自己的有生之年只是时间的问题。然而，这种盲目的乐观遭到了现实的痛殴。眼见着依法治国日益地变成以刑治国，法家主义的法制卷土重来，有时会有悲从中来之感。我不算悲观的人，但仍难以完全消化外部环境的冲击带来的沮丧与失望。我很想兜售正能量，但在春节返乡也要被冠以恶意的年代，实在是说不出口。在程式化的政治话语漫天飞舞的时代，作为学者，至少应该保持起码的真诚。一味地回避现实中的种种，终不免沦为虚伪与投机。 </p><p>我始终认为，与给予虚幻的希望相比，认清与直面现实是第一位的。就像在对女儿的教育上，我选择让她看到世界的真实面目，不会刻意掩饰其中的丑陋与残酷，给她一个修饰过后的美丽新世界。作为初一的学生，我推荐她看《那不勒斯四部曲》，让她自己去思考女性命运与两性平等的话题。前不久她主动提出要看《辛德勒的名单》，我也表示同意，陪她一起观看，并且在看完后与她探讨，为什么这样的影片会有震撼人心的力量。 </p><p>所以，我的女儿虽然成绩平平，在他人看来可能毫不出彩，但在我眼里，她自有她的出色之处。她对优秀影视作品的鉴赏力与领悟力，远超同龄的孩子，对于一些政治与社会问题的判断，也胜过许多脑袋空空的成年人。 </p><p>直面现实，接受世界残酷的一面，是走向成熟必须要经历的过程，不然，心理上就永远只处于蒙昧的幼童时期。就像有句话说的，“凡是听不得残酷真相的人，一般都活在婴儿阶段。人的成熟，一半是对美好事物的追求，一半是对残酷真相的接纳。” </p><p>我始终不认为，将各种社会问题搁在那里，不让人说破，不让大家知晓，便是所谓的正能量。如果正能量要依靠掩饰而获得，连直面的勇气都没有，这样的正能量，未免透着一股掩耳盗铃式的虚弱。 </p><p>只是，在直面现实的同时，如何让自己不至于变得愤世嫉俗或是随波逐流，是颇费思量的事。在外部环境变动的同时，对个人来说，势必面临如何调整与适应的命题。完全坚守原先的自我，会因为与外部环境格格不入而遭受痛苦；反过来，选择成为变色龙，也终究会由于迷失自我而陷于空虚。在两端之间怎样平衡，如何在适应外部环境变动的同时保持独立的自我，可能是很多人正面临的困扰。我也是如此。 </p><p>年岁渐长，终究发现，对任何个人来说，时运都是第一位的。再生猛的人，也强不过时运，中国人喜欢讲天命，或许与此有关。但是，特定的时运之下，作为个人仍会有一些选择的空间。 </p><p>所谓的适应，肯定不是通过一味地扭曲与改变自身而顺从于外部环境。单方面的顺从，只会造就苟且的自我。就像法律一样，作为个人，我们不仅必须适应外部环境的变动，而且需要具备自我演进的能力，通过以我为主的选择不断地实现自我更新。这正是卢曼系统论所给予的启发。 </p><p>相应地，在对外部环境的变动保持敏感并调整认知的同时，需要努力培养内在的生命力，以形成更为强大的自我。一个强健的、具有内在生命力的自我，会更有能力化约外部环境带来的冲击，同时拒绝犬儒与投机。 </p><p>所以，在得知近几年国内位列TOP2的两所大学，70%以上的毕业生都选择公务员与教师等体制内职位时，我在表示理解的同时，也感到有些惋惜。表示理解是因为，我知道身边的这些年轻人面临巨大的生存压力，普遍都高度地焦虑；感到惋惜则是源于，选择体制内的职位意味着选择了安稳，而安稳的职位通常天花板很低，风险变小的同时自然收益也少。 </p><p>我特别期望，无论身处哪个年龄层，都不要因为疫情的久拖不决与经济的低迷下滑，就放弃自己的梦想，降低自我的期待。我们需要做出调整，也需要适应外部环境，但不是通过放弃梦想与降低期待来实现。不应该让疫情偷走自己的梦想。 </p><p>就像我的一个学生对我说的，在遇到眼高手低的批评时，为什么要让高处的眼睛去就低处的双手，而不是反过来努力抬高双手的位置呢？因此，在遇到眼高手低的批评时，或许值得庆幸的是，自己至少还有“眼高”的优势，比眼低手低总是要更胜一筹。就目前的情况来说，所能做的，就是努力让自己的内心安静下来，以一种“面壁十年图破壁”的耐心，在韬光养晦的同时积蓄实力。我对自己的期望也是如此。 </p><p>回看过往的研究，我关注的命题一直是，如何使包括刑法在内的法律系统适应社会外部环境的变化。反思这种研究立场，不足之处在于只关注“社会秩序如何可能”的问题，其实真正需要关注的应当是“良善的社会秩序如何可能”。基于此，实有必要对原先的研究立场做出调整。 </p><p>法律不只是一个功能系统，需要不断适应外部的社会环境；同时它也是一个意义系统，承载着时代的价值观与道德底线。因此，在做法学研究时，不仅需要有社会理论的视野，政治哲学的视角也不可或缺，因为后者关注的恰恰是“良善”的维度。当法律人不断地宣称民众应当信仰法律时，其间的法律显然不应当是法家主义意义上的法律。 </p><p>在为人处世上，也有一些需要调整的地方。遇到不怀好意的攻讦，以往的我，下意识的选择会是忍让退却与保持距离。可能多少是受了“恶人自我恶人磨”的处世哲学的影响。反思这样的做法会发现，很多人都是像我这么想的，总希望有别的恶人去施行惩治。也正是这样的处世哲学，导致在中国社会吃亏的经常是君子与老实人，而小人与恶人们往往占尽便宜。 </p><p>可以说，正是包括我在内的很多人选择忍让退却，才让恶人能肆无忌惮地继续为恶。在某种意义上，对于周遭环境的日渐恶化，选择忍让退却的我们，其实都负有消极不作为的责任。这并非君子之风，而是犬儒懦弱的表现。以德报怨，那何以报德呢？在不拉低自己的前提下，是应该考虑坚决反击的。 </p><p>在微博上读到一句话：“你真正吸引的人，永远欣赏的是你骄傲的样子，而不是你故作谦卑和故作讨喜的样子。”谨将这话送给此刻可能迷茫彷徨的你，也送给我自己。 </p><p>“如果你选择利用自己的地位和影响力，去为那些没有发言权的人发声；如果你选择不仅与强者为伍，还会同情帮扶弱者；如果你时刻设身处地为那些没有像你这般地位的人着想，那么你的存在，将不仅是你家人的骄傲，更是无数因为你的帮助而改变命运的成千上万人的骄傲。”这是J.K.罗琳在哈佛大学毕业典礼致辞中的一段话，我特别喜欢。在我看来，这才是真正的正能量。愿你我都能拥有这样的正能量。 </p><p>2022年1月29日</p><p>完稿于清华园</p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疫情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>影评《千年女优》</title>
      <link href="/posts/a33ec8c1.html"/>
      <url>/posts/a33ec8c1.html</url>
      
        <content type="html"><![CDATA[<div class="tip error"><p>本文包含少量剧透</p></div><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>2001年，蒙特利尔，加拿大。</p><p>当《千年女优》拿下电影节大奖时，动画电影再次证明了自己毫不逊色的表现力。 </p><p>《千年女优》可以理解为“昭和女影星的传记”，女主藤原是日本银映电影公司的巨星，她演绎了日本诸多时代的故事，这些故事与千代子的真实经历交织在一起，亦真亦幻，娓娓讲述了动荡时代里一个少女的情思。</p><p><img src="https://bu.dusays.com/2023/01/01/63b19759e502c.jpg" alt="4-1.jpg"></p><p>影片开头，立花源也和摄影师前去拜访隐居的千代子，为她拍摄个人纪录片。他们在千代子的回忆叙事中“扮演”了其他角色，见证了千代子的一生。</p><p>从影片的观感来说，把与千代子相遇的人——甚至包括在重要时刻改变了她人生轨迹的人（例如搭载千代子的货车司机），全部换成源也和摄影师，多少有种诙谐、揶揄人生的意味。也许在千代子看来，那些人不过是步履匆匆的过客，在特定的时间行特定之事，具体是谁都无所谓，甚至，他们只是“现象”？实在是有趣的想法。</p><p>世间为舞台，冠笄皆伶人。</p><p>千代子在学生时期，包庇了一个进步画家。她对画家未完成的作品感到好奇，画家表示，他的故乡，到了冬天就会被绵延至天边的白雪覆盖，战争结束后，他要在那里感受刺骨的寒冷，完成作品。</p><p>这时，镜头移至窗外——拨开夜的伪装，便现出一轮明月来。</p><p>这是十四夜的月亮。</p><p>“我更喜欢这时候的月亮，满月从下一天开始就会月缺，而十四夜的月亮却还有明天”，画家攥紧拳头，“有被称为明天的希望。”</p><p>浪漫飘渺的东西总能catch到年轻的女孩——千代子也不例外。这为她一生的追寻埋下伏笔。</p><p>千代子借拍电影之名来到满洲（日据时代的中国东北）寻找画家——画家曾表示要在这里同伙伴们一起战斗。千代子搭乘的火车因乱脱轨，打开车门时，镜头便切到千代子参演的电影中去了……</p><blockquote><p>注：影片中，火车的报纸上写着“大量日裔革命人士遭检举”；按照设定，画家是作为反战派遭到当权者的迫害；千代子曾回忆道：“我的孩童时代，整个世界都危机重重，什么东西都一个劲往右拐，不过，当时的我更看重的是少女杂志。”<br>B站的《千年女优》评论区处于关闭状态，大约又是出于一些无聊的原因，当然这和近年舆论环境收紧密不可分。</p></blockquote><p>这类镜头切换在《千年女优》中十分常见，今敏娴熟地用这种手法将fiction和真实经历糅杂在一起，营造出真假莫辨的观感。</p><script type="math/tex; mode=display">fiction_{千年女优}=\begin{cases}reality, & \text {千代子的经历} \\fiction, &\text{千代子参演的电影}\end{cases}</script><p>虚构中的真实，虚构中的虚构。</p><p>有意思的是，千代子这个形象本身也是有现实参照的。</p><script type="math/tex; mode=display">原节子 \stackrel{f}{\longrightarrow}千代子</script><blockquote><p>注：原节子参演电影《东京物语》。<br>插一嘴无关的，《东京物语》是一部老电影了，画面黑白，剧情据说感动了许多人，其独特的镜头也被一些人狠狠吹捧了一番。但我个人对此比较无感，可能是因为家庭原因很难对这些东西共情吧，血缘是亲情的既不充分也不必要条件呢。<br>扯远了，再扯点别的。《东京物语》是一个老东西了，而老东西往往难逃一个被当作装逼资本的命运。或有另一种情况：怀念过去的时代，试图证明它比现在更好。这种做法背后的逻辑是显然的：我经历过那个年代，而你们（潜在的听众）没有，我见识的多，所以我资格老，我是前辈，而前辈就是给后辈敬重的。类似的说法有很多，例如以前的人比现在的人纯粹等等。<br>不过，单就『以前的时代比现在好』这个判断来说，在最大公约数的带领下，或真。</p></blockquote><p>电影末尾，千代子讲述完毕。仿佛完成使命一般，她体力不支，倒在病床上。</p><p>千代子活得很久了，多年的隐居生活使她对时间的感受颇为迟钝，曾经的事就如同梦一般虚幻。立花源也带来的钥匙打开了她珍贵的回忆。是时候结束了，生命的最后时刻，她想起从前，在未满的月夜下与画家拉钩的时候，在摄制组的吆喝声中从战国穿越到大正昭和的时候，飘雪的隆冬里只身一人前往北海道的时候……这多少给千代子一点安慰，抚平她的心绪，自己的一生没有那么不堪，但也到此为止了。火箭从象征着轮回的莲花状发射台上起飞，千代子踏上了新的追逐旅途。</p><p>然而萍水相逢，千代子真的会爱上那位画家吗？或许她只是将曾经的约定贯彻到底罢了：去北海道一起看雪。少时的承诺往往会成为执念一般的东西——“当作明天的作业，约好了”。这种执念是回溯过去的线索，在飞速变化的当下提供存在的实感。千代子的执念贯穿了她的一生，让她放弃执念就像让她否定一生一样，所以她只能在千年的轮回里不断追逐。虽然到最后，仅是寻着死者的影子罢了，但也没必要说千代子的追逐是徒劳的，就像一场无疾而终的暗恋、抑或是无法走到终点的旅途，其意义就在于本身，个中滋味，不足为外人道。荷马曾言：“追逐影子的人，自己就是影子”，千代子在追寻的过程中，把对画家的追求具象化为爱情，其实是瞒过自己的手段。弥留之际，千代子揣着钥匙，终于承认：“我喜欢的是追寻着那个人的自己”，与自己达成了和解。</p><p>千代子的遗言完成了对自我精神的解剖。她的一生中，眼前总有一个画家，其形象却十分模糊，这种不确定性增长了千代子对画家的幻想，她仿佛已然置身于广阔而雪白的风景中去了。值得一提的是，千代子是没有家的，作为影视巨星，却经历着心灵的流浪。精神上的无所适从伴随着现实中的动荡不安，也许，千代子在追寻中渐渐明白，自己憧憬的对象，只是由温馨模糊的回忆培养起来的抽象感觉罢了，如果画家活到和平年代，与千代子成家，也未必能抹去她心中无家可归的感觉，她也势必重回追寻的旅途。人生的本质是诗意的，人是诗意地栖息在大地上的，然而在消磨自我的现实里，她只能在白雪覆盖的旷野中，体味一派苍凉而已。</p><p>等待千代子的，究竟是家还是无边的旷野呢？</p><p>作为唤起内心深处感动的作品，这部电影本身可以理解为对某种美的追求，哪怕只是一个残缺的幻影。今敏在2010年也因癌症走到人生的终点，葬礼曲正是《千年女优》的片尾曲：（音乐播放器只能在电脑平板上加载）</p><html><center><head>    <meta charset="utf-8">    <title></title></head><body>    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="https://music.163.com/outchain/player?type=2&id=29774186&auto=0&height=66"></iframe></body></center></html><p>……<br>平行并列的行星<br>隐喻般衬出今时今日<br>肆意烂漫的花之原野<br>仍记得你的模样<br>……</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>千代子的性格中必然有较常人缺失的部分。她息影的理由是：“不想让他看见变老的自己”。然而这种担心——画家不会喜欢变老的千代子，完全出于自己的想象。但同时，她却坚信自己对老去的画家的爱，这种矛盾折射出千代子性格中迎合他人的倾向。至少在这段臆想的感情中她没有将自己置于与画家对等的位置，自己与画家仅一面之缘，没有深厚的感情基础，也没有很多足够吸引画家的闪光点，潜意识里要用自己的青春和容貌代偿（画家岁数比千代子大一些）。妄自菲薄的人在人际关系中难以舒适自处，这也是为什么千代子在happy ending（与画家在一起）中仍可能茫然若失。这种倾向是因为过于依赖他者之肯定获取自身的价值。</p><blockquote><p>注：当然，在happy ending中千代子还是可能获得相对满意的人生的。世界上有太多不满意但能维持下去的关系了，而单方面的妄自菲薄导致的不对等真的算是微不足道的一种了。至于他们能不能一直走下去，又是另一说了。</p></blockquote><p><img src="https://s2.loli.net/2022/10/07/Da38LJIWmyXiw5P.jpg" alt="4-2.jpg"></p><p>千代子成长于单亲家庭，这对千代子的性格塑造有着怎样的影响？</p><blockquote><p>注：这里千代子的母亲用一种political correct对抗另一种political correct，很多人因此觉得其母富有智慧，在保护女儿。这当然也是一种解释，但结合后面的剧情，更有可能“女人保护家庭生儿育女也是本分”就是其母的真实想法。<br>political correct 1 ：传统保守观点下的“女人保护家庭生儿育女也是本分”<br>political correct 2 ：帝国侵略扩张背景下的“为国捐躯”，对于千代子来说是到满洲“为国拍电影”</p></blockquote><p>千代子的母亲是否过分控制？有没有在精神上打压千代子？一个女人失去丈夫，能依赖自身的强大，不觉得周围的世界危险失序，不因此控制子女，这样的人有多可贵？又能有多少？但可喜可贺，一个寡妇的力量并没有强大到当千代子夹在两种political correct之间时，替她做出选择。</p><p>千代子的追逐构成了对人生困境的隐喻，而这种困境往往是自己一手构筑的，一个人的命运就是他的性格。成为演员经济独立后，千代子已经摆脱控制，她完全可以放下画家，但她却将自己束缚在里面，因此她一生一世都在追逐的途中。设置一个无法实现的目标正好可以填补心灵的空虚，这和很多人的假装努力非常类似。当我们回到莫比乌斯环的起点时，往往会感到困惑——我们陷入了一个自虐的陷阱，精神上的画地为牢使我们心安，受困于此，则不必迈向前方。</p><blockquote><p>注：番剧《欢迎来到NHK》，主角也是和千代子一样囿于自己构筑的困境之中。</p></blockquote><p>人是一种会把自己困起来的生物。</p><p>当然，也有一种简单但说得通的解释：千代子因为幼时缺少关爱（父爱？），在遇见平等待己的喜欢的人时，会非常在乎，而千代子这种成长经历的人会非常注重感情的忠贞，在没有找到画家之前很难变易。这是她原生家庭影响的延续。</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>果真如此吗？</p><p>千代子仅是一个原生家庭不幸、因奇怪的执念离经叛道的性格上的软弱者吗？或许在某些瞬间里她确实沉溺于自身的软弱，但人是复杂而立体的，换个角度，千代子却是“非理性”最好的代言人。</p><p>“非理性”并非无视科学规律、否定经验，也不是拿起锤子重新评估一切价值，“非理性”是一种生活的态度：在认清世界荒诞，人生不必有其意义之后，一个人愿意遵循内心的冲动，肯定激情的力量——哪怕从短期、局部的视角来看它是无益，甚至有害的。在社会中宣扬理性与克制、鼓吹小不忍则乱大谋，往往意味着个人激情的压抑，与此同时，污秽的黑泥也在妥协中滋长。非理性则要求个人尊严和价值的回归，在表现上可以是一句岂有此理，是拍案而起目眦尽裂，也可以是旁人难以理解的固执、沉默和坚守不易。</p><p><img src="https://bu.dusays.com/2023/01/01/63b197961a670.jpg" alt="4-3.jpg"></p><p>千代子的时间在遇到画家之后便停滞了（这种停滞体现在千代子表现出的“少女感”上），而在这之前是潺潺流动的——依着生活的惯性和世俗社会的既定轨迹，她得以前进。如果一切正常，她大抵会和同时代的多数女人一样，找一个门当户对的男人成家，将他送上战场，然后在扩张的尘嚣中见证帝国的末路。但在这命定的相遇之后，她发现自己应当拥有的东西，决定不再延续往日的道路。于是，画家的钥匙成了一根逃离现实的危险诱人的稻草，它通向一种未知的激情，当这种激情显示力量的时候，千代子就与毫无故事性的日常分道扬镳了。</p><p><img src="https://bu.dusays.com/2023/01/01/63b1972fefa82.jpg" alt="4-4.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 闲文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acg </tag>
            
            <tag> 电影 </tag>
            
            <tag> 今敏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蒙德之风</title>
      <link href="/posts/b15be653.html"/>
      <url>/posts/b15be653.html</url>
      
        <content type="html"><![CDATA[<p>赶到砂糖家时已是深夜。冲完澡后，荧把揩水毛巾搭在肩上走出浴室，光脚踩在铺满房间的毛茸茸的地毯上，脚心传来柔软的摩挲触感，壁灯的罩笼里流出温婉的火光。</p><p>砂糖正在熟睡。</p><p>荧嗅了嗅发间的皂香，她想起这是砂糖的毛巾——二人的气味混在一起，令人莫名安心。</p><p>灯灭，浓郁的黑向四周涌来。</p><p>荧是见识过这种黑的。</p><p>当她终于离开尘歌壶，孑然一身面对寒冬、大海和黑夜的时候，一种强烈的孤独感便油然而生。</p><p>那是派蒙走后数天的一个晚上。之后，荧就很少往壶里钻了。</p><p>但是她笑了，手中腾起一团火焰，照亮房间。</p><p>“真是辛苦呢，今晚就放过你吧♪”</p><hr><p>“这是做蜜酱胡萝卜煎肉的好天气！旅行者，去把我们的锅端来，我们要煎三十个呢。”</p><p>荧困惑地张张眼，被窝里只有她和砂糖。</p><p>东方泼出鱼肚般的染白，酒鬼们宿醉未醒，城门的守卫刚刚轮班。一切都慵懒地像古朴的风景画，能掸出灰尘的味道，风车也只有在人们睁眼的时候，才肯吱呀呀地转一转。</p><p>羽球节就是这样的一个早晨。</p><hr><p>（过程略）</p><p>（你在期待什么？）</p><p><img src="https://pic1.zhimg.com/80/v2-ff7cd917d1d24bf8d410870aa9527afa_1440w.jpg?source=1940ef5c" alt="whatareulooking4"></p><hr><p>“你——为什么——这么熟练♀呃嗯♀”砂糖艰难地咽了咽口水，“平时生活里——都在，干些什么啊？”</p><p>她懊恼地发现自己弄湿了床单，耳朵也耷拉下来。</p><p>砂糖侧首望向窗外，白皙的小臂护在胸前。枕头被压出恰到好处的凹陷，些许散发落在里面，另一些则被微风带起，停在她的嘴角。她抿抿嘴，试图获取发丝的触感，尽量不去想今天发生的事。无暇的脸庞与肩下的锁骨、玲珑的双乳一起，为勃勃的春日平添几分妩媚。风车悠悠转着，她忽然想到，便要这蒙德的风吹干洗后的床单了，当清风拂起床单的白色滚边，裁剪地面上的光影时，她的心一定会回到这个躁动的早晨吧。</p><p>风带来故事的种子，时间使之发芽。</p><p>“C’est la vie.”</p><p>荧想起那些枫丹好先生们常说的话，好看地一笑。</p>]]></content>
      
      
      <categories>
          
          <category> 闲文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思梦之榻</title>
      <link href="/posts/3e6d3ecb.html"/>
      <url>/posts/3e6d3ecb.html</url>
      
        <content type="html"><![CDATA[<p>闷热的夏午，我憋着口气难以入眠。扰人清静的鸟雀和屋外的添水，古朴的撞击声将时间拉长，我看见时间被拉成丝的模样。</p><p>“要是绫华在就好了。”我如此想。</p><p>绫华在时，只消片刻，四周的空间便会曼出沁人的薄寒。</p><p>这样想着，绫华就倏然出现了。</p><p>她就在那里，全身赤裸，坐在桌前的垫子上，脚心好看地翻开，马尾轻微晃动，双乳在光线的明暗下看不真切。</p><p>坐忘。</p><p>神里流剑道的最高奥义，意在忘却自身达到心灵的岿然之境 。境界高者形容枯槁，似一段老木，甚至能与周遭环境融为一体，不分彼此。</p><p>但现在，老木抽出新芽。</p><p>绫华起身颔首，披上外套遮住身体，莞尔一笑。</p><p>“我在想，也许——你会想我呢。”</p>]]></content>
      
      
      <categories>
          
          <category> 闲文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>一个hexo博客折腾了好久。目前有基本功能，但还不完善，等什么时候整完了继续写。</p><p>总的来说就是一个个人的树洞吧，目前国内环境挺糟的，这里那里都不让说话，所以gitee什么的是不会考虑的。</p><p>本博客是按照 anzhiy.cn 的教程一步一步搭的积木。</p><p>现在是2022年9月11日，想要的功能基本都有了，其他很多的功能并不需要<psw>（当然主要是我懒）</psw>。设计的终点果然就是简洁，而生活的终点是断舍离？</p><p>博客的图片都放在第三方图床里，如果挂了可与我联系。</p><div class="tip warning"><p>代码模块测试：</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 500015</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM MAXN-1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,max0,d,tot,x,y,tempu,tempv;</span><br><span class="line"><span class="type">int</span> size[MAXN],head[MAXN],dep[MAXN];</span><br><span class="line"><span class="type">int</span> fa[MAXN&lt;&lt;<span class="number">1</span>][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v,next;</span><br><span class="line">&#125;edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].u=x;</span><br><span class="line">    edge[tot].v=y;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    max0=(<span class="type">int</span>)(<span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">2</span>))+<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y);<span class="built_in">addedge</span>(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcainit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=max0;i++)</span><br><span class="line">    <span class="keyword">if</span>(fa[x][i<span class="number">-1</span>]) fa[x][i]=fa[fa[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y=edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(y!=fa[x][<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            fa[y][<span class="number">0</span>]=x;dep[y]=dep[x]+<span class="number">1</span>;</span><br><span class="line">            size[x]+=<span class="built_in">lcainit</span>(y);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> size[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v])<span class="built_in">swap</span>(u,v);</span><br><span class="line">    <span class="type">int</span> delta=dep[u]-dep[v];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;=max0;x++)</span><br><span class="line">    <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;x)&amp;delta)u=fa[u][x];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(u==v)<span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=max0;x&gt;=<span class="number">0</span>;x--)</span><br><span class="line">    <span class="keyword">if</span>(fa[u][x]!=fa[v][x])</span><br><span class="line">    &#123;</span><br><span class="line">        u=fa[u][x];</span><br><span class="line">        v=fa[v][x];</span><br><span class="line">    &#125;</span><br><span class="line">    tempu=u; tempv=v;</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;MAXN;i++) size[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">input</span>();</span><br><span class="line">    <span class="built_in">lcainit</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> m; cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(x==y)&#123;<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="type">int</span> lca=<span class="built_in">LCA</span>(x,y);</span><br><span class="line">        <span class="keyword">if</span>(dep[x]&lt;dep[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line">        d=dep[x]+dep[y]-(dep[lca]&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(d&amp;<span class="number">1</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(dep[x]==dep[y])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> ans=n-size[tempu]-size[tempv];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans); <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> delta=d&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> midson,mid;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=max0;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;(delta<span class="number">-1</span>))</span><br><span class="line">            x=fa[x][i],delta-=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">            <span class="keyword">if</span>(delta==<span class="number">1</span>)</span><br><span class="line">            midson=x,mid=fa[x][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans=size[mid]-size[midson];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>latex测试：</p></div><script type="math/tex; mode=display">E=mc^2</script><script type="math/tex; mode=display">A=\iint_{D_{yz}} \sqrt{1+(\frac{\partial x}{\partial y})^2 + (\frac{\partial x}{\partial z})^2} \, \mathrm{d}y\,\mathrm{d}z</script>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>QAQ</title>
      <link href="/QAQ/index.html"/>
      <url>/QAQ/index.html</url>
      
        <content type="html"><![CDATA[<p>这是一个隐藏彩蛋 QAQ</p><!-- flag of hidden posts -->]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>About</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>看别人博客 about 页面的都是好人。</p><h2 id="About-this-blog"><a href="#About-this-blog" class="headerlink" title="About this blog :"></a>About this blog :</h2><p>这个博客是我记录各种东西的地方，笔记或是生活，也有一些不成熟的想法。</p><p>曾经写过博客，后来烂尾了。现在开一个 Github Pages 倒也轻车熟路。<code>.github.io</code>真的方便，主打一个完全免费，折腾完之后就省心省力。</p><p>自认没有输出内容的水平，因此并未向任何人分享这个博客，更没有友链，目前只被 Bing 收录。</p><p>这是一个界面花哨的博客，如果需要专注阅读，请打开阅读模式。有的时候我也会想换一个简约的主题，例如 <a href="https://frame.zhangyongqi.com/">Frame</a> 那样的，但是要支持数学公式、目录、tag、分类归档、HTML 混合 MarkDown 编写文章，当我拿着这些要求去一一比对的时候，才发现 Butterfly 已经足够了。</p><h2 id="About-me"><a href="#About-me" class="headerlink" title="About me :"></a>About me :</h2><p>喜提研零。</p><center>= = = 无情分割线 = = =</center><p>挂科仙人，大学挂了十几门。后来因为一些契机（也许就是开了这个博客也说不定？），有了一些思想和心态上的转变，大四卯足了劲修学分，才按时拿到双证。</p><p>并没有被退学，甚至没有留级，非常奇妙。某学期一口气挂了五门课，收到了疑似的学业警告，因为是电话口头通知的。</p><p>现于嘉丽顿大学就读，也许将要被放逐到社会中去。</p><p>深刻了解自己的平庸，但目前也不期待多数人会走上的人生道路。除去一些将我推出去的力量，我对动荡的生活还有一种内在的渴望。这种精神上的不安定，恐怕注定了我难以循规蹈矩地生活。用毛姆的话来说，这或许是 “浪漫主义对平凡无奇生活的反抗” 。</p><h2 id="Contact-me"><a href="#Contact-me" class="headerlink" title="Contact me :"></a>Contact me :</h2><p>请在留言板留言，我每周都会巡视一次。<del>反正应该也没人会发现一个连博主都不宣传的博客。</del></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: 'ZhuZiAYuanJWD';  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: 'iconfont' !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /*  .bangumi-active {    background: #dbecfe !important;    border-radius: 10px !important;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: #dbecfe !important;    border-radius: 10px !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  */  /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme='dark'] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme='dark'] .card-widget {    background: #121212 !important;  }    [data-theme='dark'] div#post {    background: #121212 !important;  }    [data-theme='dark'] div#tag {    background: #121212 !important;  }    [data-theme='dark'] div#archive {    background: #121212 !important;  }    [data-theme='dark'] div#page {    background: #121212 !important;  }    [data-theme='dark'] div#category {    background: #121212 !important;  }    [data-theme='dark'] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #5CA1FF;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #5CA1FF;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* 鼠标图标 */  body {    cursor: url('/img/x1.cur'), auto;  }  a,  [type='button']:not(:disabled),  [type='reset']:not(:disabled),  [type='submit']:not(:disabled),  button:not(:disabled) {    cursor: url('/img/x2.cur'), auto !important;  }  /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #5CA1FF;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft JhengHei', 'Microsoft YaHei', sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--heo-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }  ]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[!function(c){var l,h,a,t,i,v='<svg><symbol id="icon-dragon_chen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-498.122105 265.620211L431.157895 754.526316V485.052632h-66.074948c-14.470737 110.645895-44.355368 197.066105-102.696421 260.742736l-39.747368-36.432842C306.526316 617.876211 323.368421 462.901895 323.368421 242.526316V215.578947h377.263158v53.894737H377.182316c-0.404211 58.260211-2.209684 112.128-6.359579 161.684211H700.631579v53.894737h-122.152421a481.172211 481.172211 0 0 0 76.826947 119.70021l66.479158-39.855158 27.728842 46.214737-54.460631 32.687158c29.507368 24.953263 63.757474 45.675789 102.80421 58.098526l-16.303158 51.361684c-134.224842-42.711579-222.773895-167.073684-261.551158-268.207157H485.052632v221.857684l68.985263-41.391158 27.728842 46.214737-109.783579 65.886316zM646.736842 377.263158h-215.578947v-53.894737h215.578947v53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-dog_xu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-375.592421 150.393263c33.684211 44.544 75.210105 74.698105 124.739369 90.812632l11.425684 3.718737 10.401684-6.009264C781.204211 727.740632 808.421053 622.565053 808.421053 592.842105h-53.894737c0 22.069895-19.132632 80.869053-33.711158 103.504842-34.816-14.605474-64.538947-39.262316-89.249684-74.13221 48.316632-55.269053 92.079158-117.328842 120.535579-179.900632l-49.044211-22.285473c-23.767579 52.250947-59.742316 104.717474-100.055579 152.656842-24.010105-50.930526-41.148632-115.927579-51.658105-195.395369H700.631579v-53.894737h-155.189895A1848.050526 1848.050526 0 0 1 538.947368 161.684211h-53.894736c0 58.206316 2.155789 112.074105 6.494315 161.68421H323.368421v26.947368c0 216.549053-13.177263 263.545263-100.702316 359.046737l39.747369 36.432842c63.326316-69.093053 92.806737-118.272 105.714526-206.848H485.052632v-53.894736h-111.319579a1742.147368 1742.147368 0 0 0 3.449263-107.789474h120.158316c12.611368 98.250105 35.031579 177.475368 67.395368 238.187789-61.978947 65.536-128.053895 117.975579-173.298526 142.282106l25.519158 47.481263c47.589053-25.573053 114.095158-77.446737 177.55621-142.821053z m125.170526-411.971368l-80.842105-80.842106-38.103579 38.103579 80.842105 80.842106 38.103579-38.103579z" fill="#231F20" ></path></symbol><symbol id="icon-dog" viewBox="0 0 1024 1024"><path d="M894.814316 904.434526l83.240421-183.134315-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939369-185.263158-0.134737-7.922526-0.134737-33.953684-0.134736-55.996631-30.693053 15.306105-70.090105 19.887158-106.09179 19.887157-92.752842 0-163.624421-23.983158-210.647579-71.275789a192.512 192.512 0 0 1-27.944421-36.513684H377.263158v377.263158c342.662737 0 403.105684 51.092211 494.592 128.377263 7.922526 6.682947 15.521684 13.312 22.959158 19.86021z" fill="#85C3DE" ></path><path d="M326.063158 282.947368c0 34.250105-13.231158 44.463158-29.642105 44.463158s-29.642105-10.213053-29.642106-44.463158c0-34.223158 13.231158-44.463158 29.642106-44.463157s29.642105 10.24 29.642105 44.463157zM269.473684 430.295579v311.646316L190.275368 916.210526h59.203369L323.368421 753.637053V377.263158h-26.947368c-119.403789 0-172.732632-53.382737-185.505685-107.789474h35.624421c51.092211 0 68.581053-15.764211 120.535579-62.544842 12.773053-11.506526 28.079158-25.276632 47.023158-41.741474l18.351158-15.952842-69.658947-99.139368-44.085895 30.989474 41.768421 59.472842c-11.183158 9.862737-20.884211 18.593684-29.480421 26.327579C180.736 212.156632 176.235789 215.578947 146.539789 215.578947H53.894737v26.947369c0 88.710737 66.910316 178.149053 215.578947 187.769263z m216.710737-161.414737c2.290526 71.733895 28.698947 136.326737 75.048421 182.918737C618.711579 509.628632 702.437053 538.947368 810.091789 538.947368c18.593684 0 36.190316-1.158737 52.628211-3.449263 3.745684 111.265684 33.630316 170.334316 51.496421 196.015158l-38.507789 84.722526C782.174316 742.049684 688.774737 700.631579 377.263158 700.631579v53.894737c34.277053 0 65.697684 0.512 94.639158 1.509052L374.595368 970.105263h59.203369l96.013474-211.240421c66.182737 4.338526 117.005474 11.829895 157.911578 22.016L626.229895 916.210526h59.176421l54.16421-119.134315c47.616 18.405053 79.737263 42.091789 113.125053 69.739789L805.753263 970.105263h59.203369l113.071157-248.778105-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939368-185.263158C985.168842 498.553263 1024 447.811368 1024 377.263158c0-95.205053-66.506105-161.684211-161.684211-161.684211v53.894737c65.482105 0 107.789474 42.307368 107.789474 107.789474 0 89.088-87.013053 107.789474-160.013474 107.789474-92.752842 0-163.624421-23.983158-210.647578-71.27579-30.315789-30.504421-45.891368-65.832421-53.35579-98.735158 11.210105 6.952421 22.932211 13.338947 35.274105 19.186527l23.04-48.720843c-92.106105-43.654737-148.992-128.646737-219.243789-243.981473l-46.026105 28.05221c49.448421 81.246316 92.968421 148.506947 147.051789 199.302737z" fill="#231F20" ></path></symbol><symbol id="icon-goat" viewBox="0 0 1024 1024"><path d="M548.378947 646.736842a952.32 952.32 0 0 1 140.90779-161.68421H107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L66.721684 754.526316h417.172211c20.345263-41.472 43.654737-77.446737 64.485052-107.789474z" fill="#F7C768" ></path><path d="M608.256 144.734316C555.762526 115.577263 506.098526 107.789474 485.052632 107.789474V53.894737c32.579368 0 91.270737 11.452632 149.369263 43.735579 75.290947 41.822316 130.694737 94.531368 171.385263 150.878316C755.873684 288.013474 697.101474 323.368421 646.736842 323.368421h-107.789474v-53.894737h107.789474c20.506947 0 48.424421-11.210105 80.437895-31.285895a471.04 471.04 0 0 0-118.918737-93.453473zM832.673684 342.231579c-16.384 0-29.642105 10.24-29.642105 44.463158 0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642105-44.463158c0-34.223158-13.231158-44.463158-29.642105-44.463158zM1024 619.789474C1024 347.109053 901.066105 122.448842 686.753684 3.395368l-26.165895 47.104C914.324211 191.461053 964.688842 440.400842 969.647158 592.842105h-84.506947c-17.92-35.624421-45.352421-69.12-87.013053-101.995789l-16.788211-13.285053-16.734315 13.392842c-66.128842 52.897684-134.629053 127.083789-187.311158 209.677474H102.965895l-8.272842-20.318316C159.043368 617.013895 161.684211 603.109053 161.684211 485.052632v-53.894737h485.052631v-53.894737H161.684211c0-80.384 14.309053-110.026105 66.586947-137.916632l-25.384421-47.535158C123.365053 234.226526 107.789474 291.920842 107.789474 377.263158v107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L110.618947 862.315789h58.206316l-43.897263-107.789473h103.477895l43.897263 107.789473h58.206316l-43.897263-107.789473h259.47621C508.981895 824.939789 485.052632 899.152842 485.052632 970.105263h53.894736c0-68.688842 27.270737-144.060632 68.958316-215.578947H687.157895c7.410526 0 13.473684 6.063158 13.473684 13.473684V862.315789h53.894737v-94.315789c0-37.160421-30.208-67.368421-67.368421-67.368421h-44.65179c40.771368-58.017684 89.438316-111.427368 138.913684-153.626947C841.512421 600.037053 862.315789 655.225263 862.315789 754.526316h53.894737c0-38.912-2.748632-74.482526-11.102315-107.789474H1024v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-goat_wei" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 50.202947c52.304842 70.925474 136.973474 152.144842 232.528843 190.383158l19.994947-50.041263c-109.271579-43.708632-202.805895-152.629895-238.780632-217.49221H808.421053v-53.894737H538.947368v-53.894737h215.578948v-53.894737h-215.578948V161.684211h-53.894736v161.68421h-215.578948v53.894737h215.578948v53.894737H215.578947v53.894737h255.757474c-35.974737 64.862316-129.536 173.783579-238.807579 217.49221l20.021895 50.041263c95.528421-38.238316 180.197053-119.484632 232.501895-190.383158V808.421053h53.894736v-246.218106z" fill="#231F20" ></path></symbol><symbol id="icon-dragon" viewBox="0 0 1024 1024"><path d="M366.376421 344.441263l152.980211-152.98021c43.142737-43.142737 141.204211-9.216 270.201263 115.738947-15.225263 9.835789-25.114947 15.818105-44.13979 32.256s-38.076632 35.489684-59.418947 56.832c-4.203789 4.203789-51.173053 53.221053-78.740211 82.027789-10.805895-12.126316-22.743579-24.171789-34.654315-36.082526L493.136842 362.792421l-54.218105 54.218105-72.542316-72.569263zM862.315789 512c0 46.834526-45.352421 80.842105-107.789473 80.842105-108.948211 0-189.359158-28.806737-267.129263-56.697263C414.100211 509.871158 344.872421 485.052632 258.182737 485.052632 80.788211 485.052632 0 588.126316 0 683.897263h53.894737C73.216 659.779368 135.302737 646.736842 177.340632 646.736842c77.338947 0 223.124211 23.282526 291.893894 47.912421C547.462737 722.701474 615.989895 754.526316 734.315789 754.526316 862.315789 754.526316 916.210526 670.315789 916.210526 512h-53.894737z" fill="#FF8787" ></path><path d="M552.421053 1024c-69.766737 0-113.825684-13.958737-156.402527-27.459368-54.487579-17.273263-110.807579-35.004632-232.421052-26.516211l-3.826527-53.733053c131.718737-9.458526 195.934316 10.967579 252.52379 28.887579 42.226526 13.365895 78.686316 24.926316 140.126316 24.926316 92.752842 0 148.210526-57.936842 148.210526-113.960421 0-16.949895-5.524211-101.618526-114.634105-101.618526-64.970105 0-112.747789 23.336421-163.328 48.02021C365.325474 830.571789 300.301474 862.315789 204.288 862.315789 85.908211 862.315789 0 787.294316 0 683.897263 0 588.126316 80.788211 485.052632 258.182737 485.052632c86.689684 0 155.917474 24.818526 229.214316 51.09221 45.810526 16.410947 92.564211 33.172211 145.488842 44.166737 9.000421-7.033263 13.850947-16.276211 13.850947-26.758737 0-37.187368-37.672421-74.859789-74.13221-111.265684l-3.287579-3.287579 38.103579-38.103579 3.260631 3.287579C652.853895 446.275368 700.631579 494.026105 700.631579 553.552842c0 12.719158-2.802526 24.926316-7.976421 36.109474A594.997895 594.997895 0 0 0 754.526316 592.842105c62.437053 0 107.789474-34.007579 107.789473-80.842105 0-58.853053-52.870737-110.268632-108.840421-164.702316l-8.057263-7.841684c-19.024842 16.437895-38.076632 35.489684-59.418947 56.832l-38.103579-38.103579c74.805895-74.832842 134.898526-134.898526 268.314947-141.931789V55.619368c-63.407158 7.787789-120.993684 39.424-121.667368 39.801264l-15.818105 8.811789-14.120421-11.344842C731.701895 66.452211 709.712842 53.894737 673.684211 53.894737c-41.418105 0-74.347789 25.869474-109.190737 53.301895-26.624 20.911158-54.137263 42.549895-86.851369 53.194105L469.342316 161.684211h-69.093053l-105.525895 105.525894-38.103579-38.130526L324.015158 161.684211H161.684211V107.789474h303.104c22.231579-8.272842 43.708632-25.168842 66.398315-42.981053C569.829053 34.438737 613.618526 0 673.684211 0c48.909474 0 81.408 17.946947 110.888421 40.097684C813.702737 26.300632 877.729684 0 943.157895 0h26.947368v323.368421h-53.894737v-53.167158c-54.164211 3.098947-92.914526 15.845053-127.002947 36.675369l1.832421 1.778526C852.587789 368.505263 916.210526 430.376421 916.210526 512c0 60.928-43.708632 109.945263-107.789473 127.622737V700.631579h53.894736v-53.894737h53.894737v53.894737h53.894737v53.894737h-53.894737v53.894737h-53.894737v-53.894737h-53.894736c-29.722947 0-53.894737-24.171789-53.894737-53.894737v-53.894737c-118.325895 0-207.063579-31.797895-285.318737-59.877053C400.437895 562.229895 335.494737 538.947368 258.182737 538.947368 117.059368 538.947368 53.894737 611.732211 53.894737 683.897263 53.894737 757.221053 115.738947 808.421053 204.288 808.421053c11.910737 0 23.228632-0.538947 34.034526-1.536C248.454737 796.321684 269.473684 770.640842 269.473684 739.166316c0-33.118316-43.088842-70.979368-58.152421-81.596632l30.935579-44.139789c8.299789 5.793684 81.111579 58.664421 81.111579 125.736421 0 19.429053-4.527158 37.052632-10.994526 52.304842 30.773895-10.051368 58.314105-23.498105 86.662737-37.349053C452.877474 727.848421 508.577684 700.631579 585.997474 700.631579 702.410105 700.631579 754.526316 778.725053 754.526316 856.144842 754.526316 938.657684 678.912 1024 552.421053 1024z m-21.180632-623.104L493.136842 362.792421l137.889684-137.889684 38.103579 38.103579-137.889684 137.889684z m-126.760421-18.351158l-38.103579-38.103579 152.980211-152.98021 38.103579 38.103579-152.980211 152.98021z m282.004211-218.624c15.494737-9.754947 43.331368-31.447579 43.331368-31.447579-25.734737-27.809684-49.556211-33.333895-67.368421-29.07621-19.240421 4.608-37.753263 24.602947-37.753263 24.602947s42.253474 22.447158 61.790316 35.920842z" fill="#231F20" ></path></symbol><symbol id="icon-horse" viewBox="0 0 1024 1024"><path d="M776.003368 646.736842c16.599579-99.947789 43.439158-181.086316 83.213474-256.538947l6.817684-12.934737H269.473684c-36.756211 0-53.894737 54.945684-53.894737 92.05221 0 46.753684 6.656 77.527579 70.278737 176.074106l84.533895 128.269473L498.876632 646.736842h277.126736z" fill="#FFAF6E" ></path><path d="M1024 0v404.210526c0 33.333895 0 134.736842-92.079158 134.736842h-13.824l-78.362947-109.056c-22.743579 49.906526-40.340211 103.046737-53.490527 162.950737h115.092211C937.310316 592.842105 970.105263 625.637053 970.105263 661.638737c0 60.631579-69.389474 154.300632-77.312 164.75621l-43.008-32.471579C875.466105 759.861895 916.210526 693.813895 916.210526 661.638737c0-5.982316-8.919579-14.901895-14.901894-14.901895h-125.332211C761.128421 736.121263 754.526316 840.569263 754.526316 970.105263h-53.894737c0-283.971368 31.097263-453.605053 110.888421-605.049263l20.318316-38.534737 112.801684 156.995369c14.443789-4.419368 25.465263-20.938105 25.465263-79.306106V0h53.894737z m-161.684211 161.684211h53.894737V0h-53.894737v80.842105c-17.381053-14.955789-38.184421-26.947368-80.842105-26.947368h-134.736842v53.894737h134.736842c37.672421 0 80.842105 40.906105 80.842105 53.894737z m-107.789473 0h-215.578948v53.894736h161.684211l53.894737-53.894736zM300.894316 766.544842L400.680421 916.210526h64.754526l-95.043368-142.551579L498.876632 646.736842h167.855157a1212.631579 1212.631579 0 0 1 9.431579-53.894737h-199.383579l-175.885473 173.702737z m109.97221-184.400842l-37.861052-38.319158-132.419369 130.802526C173.729684 571.095579 161.684211 529.812211 161.684211 469.315368 161.684211 398.578526 199.464421 323.368421 269.473684 323.368421h323.368421l53.894737-53.894737H269.473684c-6.709895 0-13.258105 0.565895-19.698526 1.482105C234.927158 249.451789 204.638316 215.578947 160.633263 215.578947 65.967158 215.578947 0 349.291789 0 469.315368c0 70.170947 16.141474 136.650105 49.232842 202.671158L6.197895 723.833263l41.472 34.41179 66.128842-79.737264-8.704-16.033684C83.105684 622.133895 53.894737 558.214737 53.894737 469.315368 53.894737 368.451368 106.765474 269.473684 160.633263 269.473684c13.231158 0 25.815579 9.889684 35.43579 20.533895C142.874947 321.967158 107.789474 388.500211 107.789474 469.315368c0 78.201263 19.698526 130.937263 93.642105 243.981474l-55.296 54.622316L280.899368 970.105263h64.754527l-130.048-195.072 195.260631-192.889263z" fill="#231F20" ></path></symbol><symbol id="icon-monkey_shen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 134.736842h161.684211v53.894737h53.894737V269.473684h-215.578948V161.684211h-53.894736v107.789473h-215.578948v431.157895h53.894737v-53.894737h161.684211v215.578947h53.894736v-215.578947z m0-161.68421h161.684211v107.789473h-161.684211v-107.789473z m-215.578947 0h161.684211v107.789473h-161.684211v-107.789473z m215.578947-161.684211h161.684211v107.789474h-161.684211v-107.789474z m-215.578947 0h161.684211v107.789474h-161.684211v-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-ox_chou" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-161.68421 188.631579h-159.555369c13.985684-172.813474 43.115789-357.429895 70.817684-385.158737L700.631579 269.473684H323.368421v53.894737h107.169684c-1.940211 45.756632-8.192 103.962947-15.76421 161.684211H323.368421v53.894736h83.968c-9.862737 68.446316-20.264421 130.128842-25.734737 161.684211H215.578947v53.894737h592.842106v-53.894737z m-346.543158-161.684211h149.800421a3313.717895 3313.717895 0 0 0-16.842105 161.684211h-158.477474c6.036211-35.247158 16.114526-95.636211 25.519158-161.684211z m22.608842-215.578947h171.735579c-15.198316 41.121684-27.405474 100.594526-36.890948 161.684211h-150.123789c7.383579-57.505684 13.419789-115.361684 15.279158-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-monkey" viewBox="0 0 1024 1024"><path d="M757.733053 485.052632H565.894737a80.842105 80.842105 0 0 0-80.842105 80.842105v215.578947c0 40.96 43.546947 99.678316 77.446736 139.210105C596.426105 960.215579 603.055158 970.105263 603.055158 970.105263H754.526316s15.144421-18.674526 45.891368-58.071579S862.315789 809.984 862.315789 717.608421c0-89.573053-47.993263-166.346105-104.582736-232.555789z" fill="#C3D686" ></path><path d="M538.947368 1024h-53.894736c0-32.794947 25.869474-87.417263 77.446736-103.316211C528.599579 881.152 485.052632 822.433684 485.052632 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h80.842105v53.894737h-80.842105a26.947368 26.947368 0 0 0-26.947369 26.947368c0 19.725474 36.675368 77.473684 92.133053 134.736842h88.602947c20.210526-14.147368 88.737684-71.464421 88.737685-198.602105 0-108.382316-93.237895-202.967579-168.151579-278.986105-49.502316-50.202947-88.576-89.842526-98.735158-128.61979-11.749053-44.732632-21.584842-112.586105-26.327579-148.318315H377.263158c-45.136842 0-89.519158 8.434526-121.802105 53.894736H431.157895v53.894737c-97.28 0-107.789474 113.071158-107.789474 161.684211v53.894737h53.894737v161.68421h-53.894737v-107.789474h-26.947368c-170.253474 0-188.631579-94.234947-188.631579-134.736842 0-31.043368 35.220211-72.326737 55.727158-93.722947 2.694737-14.686316 5.847579-28.348632 9.431579-41.013895H161.684211V215.578947h31.528421C239.642947 120.993684 317.224421 107.789474 377.263158 107.789474h185.640421l2.802526 23.794526c0.134737 1.050947 12.719158 106.657684 27.944421 164.756211 6.494316 24.872421 44.624842 63.514947 84.965053 104.448C760.481684 483.813053 862.315789 587.129263 862.315789 717.608421c0 92.375579-31.124211 155.028211-61.898105 194.425263C904.919579 892.146526 970.105263 803.004632 970.105263 673.684211c0-91.405474-42.819368-154.381474-84.237474-215.255579C847.791158 402.458947 808.421053 344.576 808.421053 269.473684c0-119.349895 87.093895-161.684211 161.68421-161.68421v53.894737c-32.417684 0-107.789474 10.509474-107.789474 107.789473 0 58.502737 31.555368 104.933053 68.096 158.639158C974.282105 492.597895 1024 565.679158 1024 673.684211c0 177.286737-108.301474 296.421053-269.473684 296.421052h-161.684211c-37.672421 0-53.894737 40.906105-53.894737 53.894737zM229.214316 269.473684a384.808421 384.808421 0 0 0-14.012632 58.341053l-1.401263 8.488421-6.090105 6.117053c-22.878316 22.932211-44.813474 52.601263-46.026105 62.275368 0 56.805053 53.76 75.264 107.789473 79.386947V431.157895c0-58.691368 13.473684-119.619368 46.511158-161.684211h-86.770526zM323.368421 1024h-53.894737c0-32.794947 25.869474-87.417263 77.446737-103.316211C313.020632 881.152 269.473684 822.433684 269.473684 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h45.16379A188.847158 188.847158 0 0 1 565.894737 592.842105h134.736842v53.894737h-134.736842c-74.293895 0-134.736842 60.442947-134.736842 134.736842v26.516211l-53.894737 0.377263V781.473684c0-9.162105 0.646737-18.135579 1.913263-26.947368H350.315789c-14.848 0-26.947368 12.072421-26.947368 26.947368 0 19.725474 36.675368 77.473684 92.133053 134.736842H431.157895v53.894737h-53.894737c-37.672421 0-53.894737 40.906105-53.894737 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-horse_wu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 26.947368h269.473685v-53.894736H538.947368v-161.684211h161.684211v-53.894737H411.001263c12.045474-33.28 20.156632-69.793684 20.156632-107.789473h-53.894737c0 121.963789-105.364211 233.391158-106.415158 234.496l38.858105 37.349052c2.883368-3.018105 43.816421-46.133895 77.392842-110.160842H485.052632v161.684211H215.578947v53.894736h269.473685v323.368421h53.894736V538.947368z" fill="#231F20" ></path></symbol><symbol id="icon-ox" viewBox="0 0 1025 1024"><path d="M540.294737 754.526316h215.578947c20.210526 0 35.112421 1.374316 53.894737 4.581052 91.863579 15.656421 145.354105 67.691789 161.684211 86.069895V916.210526h53.894736V635.580632l-7.895579-7.895579c-9.269895-9.269895-36.513684-49.232842-44.032-196.527158H540.294737a161.684211 161.684211 0 0 0-161.684211 161.68421v131.098948c43.304421 20.210526 97.28 30.585263 161.684211 30.585263z" fill="#FFAF6E" ></path><path d="M1025.347368 635.580632V916.210526h-53.894736v-71.033263c-16.330105-18.405053-69.820632-70.413474-161.684211-86.069895V916.210526h-53.894737v-161.68421h-107.789473v215.578947h-53.894737V700.631579h161.68421c100.998737 0 172.570947 38.669474 215.578948 71.868632v-115.738948c-33.684211-43.627789-51.712-137.458526-53.706106-279.498105H701.978947c-76.934737 0-127.218526-26.219789-175.804631-51.550316a1556.048842 1556.048842 0 0 0-26.839579-13.743158c-26.839579 26.004211-66.209684 44.921263-115.738948 55.511579 24.441263 22.986105 60.874105 52.116211 106.469053 72.838737l-22.312421 49.044211c-76.584421-34.816-129.589895-88.926316-150.824421-113.125053-10.644211 0.619789-21.477053 1.024-32.687158 1.024a473.734737 473.734737 0 0 1-123.365053-15.952842l-93.022315 186.314105 68.581052 53.86779C167.882105 579.557053 237.891368 538.947368 324.715789 538.947368v53.894737c-95.986526 0-170.361263 62.490947-171.088842 63.137684l-16.78821 14.282106-136.838737-107.358316 109.729684-219.809684C46.430316 314.448842 1.347368 267.371789 1.347368 199.868632 1.347368 89.815579 121.586526 53.894737 163.031579 53.894737v53.894737c-14.120421 0-107.789474 17.165474-107.789474 92.079158C55.242105 290.465684 192.188632 323.368421 284.240842 323.368421c67.907368 0 122.421895-12.988632 157.696-35.624421-42.711579-14.336-95.097263-23.120842-169.337263-18.324211l-3.503158-53.786947c95.878737-6.117053 160.148211 8.515368 211.429053 28.833684C484.244211 235.439158 486.4 225.818947 486.4 215.578947c0-48.855579-57.829053-76.288-58.394947-76.557473l22.393263-49.017263C454.063158 91.648 540.294737 131.826526 540.294737 215.578947c0 18.566737-3.422316 35.84-9.997474 51.631158 7.060211 3.584 13.985684 7.168 20.776421 10.698106C597.854316 302.322526 638.248421 323.368421 701.978947 323.368421h269.473685v26.947368c0 214.689684 35.220211 266.590316 45.999157 277.369264l7.895579 7.895579z m-729.384421 25.141894l-98.789052 118.541474 86.797473 137.835789 45.594948-28.725894-65.913263-104.690527 37.052631-44.43621C358.642526 785.192421 439.080421 808.421053 540.294737 808.421053v-53.894737c-99.893895 0-175.077053-24.549053-223.474526-72.946527l-20.857264-20.857263z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit_mao" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-377.263158-188.631579h107.789474v323.368421c-20.48 0-39.936-11.264-40.016842-11.317895l-27.728842 46.214737c3.206737 1.940211 32.660211 18.997895 67.745684 18.997895 30.746947 0 53.894737-23.147789 53.894737-53.894737V269.473684h-215.578948v538.947369h53.894737V323.368421z m-107.789473 242.526316v-242.526316h-53.894737v196.904421l-107.789474 40.421053v-243.927579l169.094737-48.316632-14.821053-51.819789L269.473684 276.102737v304.801684l-36.405895 13.662316 18.917053 50.472421 178.741895-67.018105c-5.039158 69.928421-55.269053 106.981053-165.133474 122.933894l7.733895 53.328842C325.712842 746.657684 485.052632 723.536842 485.052632 565.894737z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit" viewBox="0 0 1024 1024"><path d="M680.96 488.744421a1666.667789 1666.667789 0 0 0-54.433684-23.95621c-16.006737 12.234105-33.899789 20.264421-60.631579 20.264421h-80.842105c-36.810105 0-83.644632 30.396632-104.394106 67.772631-42.819368 77.123368-53.409684 117.813895-11.021473 201.701053C397.096421 808.879158 431.157895 876.409263 431.157895 970.105263h338.539789l68.338527-138.859789c20.129684-40.96 24.252632-73.701053 24.252631-110.349474 0.026947-57.397895-25.061053-159.717053-181.328842-232.151579z" fill="#FFBDD8" ></path><path d="M862.315789 720.896c0 36.621474-4.122947 69.389474-24.252631 110.349474L769.697684 970.105263H485.052632v-53.894737h48.370526C507.877053 880.074105 485.052632 833.509053 485.052632 781.473684c0-59.418947 24.171789-113.313684 63.218526-152.360421l38.103579 38.103579A161.091368 161.091368 0 0 0 538.947368 781.473684c0 54.784 35.381895 104.043789 63.514948 134.736842h133.712842l53.490526-108.759579c15.710316-31.851789 18.755368-55.834947 18.755369-86.554947 0-80.976842-63.434105-150.096842-178.607158-195.503158-17.542737 8.138105-38.292211 13.554526-63.919158 13.554526h-80.842105c-13.958737 0-43.924211 15.979789-57.290106 40.016843l-47.104-26.165895C401.408 515.449263 448.242526 485.052632 485.052632 485.052632h80.842105c37.268211 0 57.478737-15.440842 79.090526-36.45979C625.367579 336.195368 549.753263 269.473684 485.052632 269.473684h-107.789474a21.288421 21.288421 0 0 0-5.955369 2.021053A683.762526 683.762526 0 0 0 302.187789 194.021053c-35.84-34.223158-61.763368-58.933895-94.908631-79.440842A42.442105 42.442105 0 0 0 185.478737 107.789474a22.824421 22.824421 0 0 0-17.381053 7.194947c-10.913684 11.425684-6.063158 28.240842 1.428211 39.181474 21.989053 32.121263 47.912421 56.858947 83.752421 91.109052 20.614737 19.671579 49.259789 43.169684 77.392842 63.08379C281.007158 367.400421 215.578947 484.432842 215.578947 592.842105c0 74.482526 24.791579 124.065684 51.065264 176.586106C294.534737 825.209263 323.368421 882.903579 323.368421 970.105263h-53.894737c0-74.482526-24.791579-124.065684-51.065263-176.586105C190.517895 737.738105 161.684211 680.043789 161.684211 592.842105c0-90.866526 42.226526-197.685895 93.453473-274.485894a803.759158 803.759158 0 0 1-39.046737-34.115369C177.852632 247.754105 150.231579 221.399579 125.035789 184.616421c-24.441263-35.759158-22.797474-78.686316 4.069053-106.819368 26.300632-27.567158 70.898526-31.043368 106.522947-9.000421 37.941895 23.444211 65.562947 49.798737 103.774316 86.258526 9.970526 9.512421 33.037474 32.309895 56.93979 60.550737h68.634947c-27.621053-37.780211-60.416-72.730947-88.522105-99.543579-28.833684-27.540211-54.730105-52.116211-84.533895-74.024421L326.305684 0.296421c31.232 23.228632 57.802105 48.532211 87.309474 76.719158 53.840842 51.388632 94.450526 100.594526 121.74821 146.83621 82.836211 26.650947 150.042947 116.870737 165.025685 230.750316l1.724631 13.177263-9.404631 9.404632c-3.772632 3.772632-7.706947 7.653053-11.802948 11.587368C837.227789 561.178947 862.315789 663.498105 862.315789 720.896zM309.463579 754.526316c3.934316 8.057263 7.895579 16.087579 11.991579 24.144842C348.887579 832.970105 377.263158 889.128421 377.263158 970.105263h53.894737c0-93.696-34.061474-161.226105-61.520842-215.578947h-60.173474z m597.90821 53.894737c-3.422316 9.404632-7.814737 19.806316-13.770105 31.959579L829.790316 970.105263h60.065684l52.143158-105.957052c10.778947-21.935158 17.515789-40.016842 21.90821-55.727158h-56.535579zM514.694737 390.736842c0-34.223158-13.231158-44.463158-29.642105-44.463158s-29.642105 10.24-29.642106 44.463158c0 34.250105 13.231158 44.463158 29.642106 44.463158s29.642105-10.213053 29.642105-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rat_zi" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 188.631579v-215.578947h269.473685v-53.894737H538.947368v-39.585684c26.543158-18.081684 94.585263-65.050947 177.852632-127.488L700.631579 215.578947H323.368421v53.894737h295.316211a4221.008842 4221.008842 0 0 1-121.640421 85.369263l-11.991579 8.003369V431.157895H242.526316v53.894737h242.526316v215.578947c0 48.343579-13.850947 53.894737-134.736843 53.894737v53.894737c105.391158 0 188.631579 0 188.631579-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-rat" viewBox="0 0 1024 1024"><path d="M727.659789 431.157895c-132.581053 0-220.348632 47.454316-285.803789 154.354526-19.779368 32.309895-15.845053 76.503579-9.404632 96.579368 3.260632 10.159158 7.760842 18.647579 12.422737 25.546106C464.761263 737.010526 499.927579 754.526316 538.947368 754.526316h66.829474c1.158737 17.893053-1.967158 34.762105-15.144421 53.975579-12.692211 18.539789-37.807158 40.151579-56.32 54.810947 25.249684-0.673684 52.709053-0.997053 83.240421-0.997053C877.487158 862.315789 970.105263 711.922526 970.105263 571.176421 936.421053 512 882.364632 431.157895 727.659789 431.157895z" fill="#85C3DE" ></path><path d="M210.432 1012.897684l-43.573895-31.690105c106.954105-147.051789 185.317053-171.196632 423.828211-172.705684 21.396211-31.258947 16.249263-56.266105 9.377684-89.70779-3.557053-17.138526-7.221895-34.842947-7.221895-54.433684 0-68.958316 25.330526-104.636632 63.407158-136.973474l34.896842 41.040842c-29.453474 25.061053-44.409263 46.780632-44.409263 95.932632 0 14.093474 2.937263 28.402526 6.063158 43.546947 5.901474 28.510316 12.8 62.032842-1.131789 99.462737 166.373053-10.24 264.542316-96.902737 264.542315-236.193684C916.210526 418.330947 827.580632 323.368421 684.921263 323.368421c-83.644632 0-153.303579 29.696-174.187789 39.612632a224.875789 224.875789 0 0 1-20.533895 31.339789l-41.741474-34.115368 20.884211 17.057684-20.911158-16.976842C448.781474 359.828211 485.052632 314.287158 485.052632 262.736842c0-34.816-8.946526-60.766316-26.570106-77.069474-17.515789-16.249263-44.786526-24.602947-81.219368-24.953263V323.368421h-53.894737V109.783579l24.872421-1.913263c64.700632-4.931368 114.095158 7.895579 146.863158 38.238316C524.207158 173.056 538.947368 212.291368 538.947368 262.736842c0 11.102316-1.131789 21.908211-3.072 32.202105 37.268211-12.584421 89.842526-25.465263 149.045895-25.465263C858.165895 269.473684 970.105263 387.907368 970.105263 571.176421 970.105263 711.922526 877.487158 862.315789 617.552842 862.315789c-258.667789 0-311.942737 19.698526-407.120842 150.581895z m19.105684-256.835368c-12.045474 0-24.387368-0.565895-37.025684-1.64379l-22.096842-1.859368-2.425263-22.016C167.747368 728.144842 161.684211 672.444632 161.684211 631.026526c0-103.585684 21.450105-178.903579 53.894736-259.045052V107.789474h53.894737v274.782315l-2.021052 4.904422C235.439158 465.758316 215.578947 533.800421 215.578947 631.026526c0 22.878316 2.101895 51.442526 3.826527 70.979369 99.678316 2.802526 172.813474-35.408842 222.450526-116.493474l48.020211 24.090947c-11.237053 28.133053-11.371789 51.577263-0.377264 67.853474 9.701053 14.282105 28.645053 23.174737 49.448421 23.174737v53.894737c-39.019789 0-74.186105-17.515789-94.073263-46.888421a100.244211 100.244211 0 0 1-12.422737-25.546106c-53.221053 49.178947-121.128421 73.943579-202.913684 73.970527zM379.957895 525.473684c0-34.223158-13.231158-44.463158-29.642106-44.463158s-29.642105 10.24-29.642105 44.463158c0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642106-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rooster_you" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-215.578947-188.631579h-161.684211v-26.947368h161.684211V242.526316H269.473684v53.894737h161.684211v26.947368h-161.684211v485.052632h53.894737v-53.894737h377.263158v53.894737h53.894737V323.368421zM323.368421 646.736842h377.263158v53.894737H323.368421v-53.894737z m0-269.473684h107.789474c0 103.316211-72.784842 107.654737-81.084632 107.789474L350.315789 538.947368c46.592 0 134.736842-33.792 134.736843-161.68421h53.894736v107.789474c0 29.722947 24.171789 53.894737 53.894737 53.894736h107.789474v53.894737H323.368421v-215.578947z m377.263158 0v107.789474h-107.789474v-107.789474h107.789474z m-215.578947-80.842105h53.894736v26.947368h-53.894736v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-rooster" viewBox="0 0 1024 1024"><path d="M891.688421 506.421895C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V116.224l-323.368421 195.745684V323.368421c0 78.524632 14.928842 131.664842 29.372632 183.053474 12.611368 44.894316 24.522105 87.282526 24.522105 140.314947 0 101.618526-77.931789 176.693895-168.286316 203.991579l5.416422 11.587368h215.578947c24.333474 0 43.385263-0.242526 58.556631-2.128842C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947z" fill="#FF8787" ></path><path d="M673.684211 354.357895c-16.384 0-29.642105-10.213053-29.642106-44.463158 0-34.223158 13.231158-44.463158 29.642106-44.463158s29.642105 10.24 29.642105 44.463158c0 34.250105-13.258105 44.463158-29.642105 44.463158zM540.106105 970.105263l-50.58021-107.789474h156.05221l50.607158 107.789474h59.553684l-51.60421-109.918316C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V107.789474c0-59.445895-48.343579-107.789474-107.789473-107.789474a107.924211 107.924211 0 0 0-107.789474 106.172632 100.890947 100.890947 0 0 0-24.117895-3.314527 88.710737 88.710737 0 0 0-88.602947 88.602948c0 20.668632 5.227789 39.720421 10.671158 53.921684l-99.489684 59.688421 93.749894 14.470737V377.263158c0 14.416842-5.901474 21.692632-33.360842 49.152l-11.129263 11.129263C398.228211 326.521263 324.985263 269.473684 215.740632 269.473684 96.768 269.473684 0 366.241684 0 485.214316V646.736842h53.894737v-161.522526A162.007579 162.007579 0 0 1 215.740632 323.368421c82.081684 0 140.422737 36.244211 240.64 152.252632l-38.615579 38.615579C367.804632 461.285053 323.098947 431.157895 259.584 431.157895A151.983158 151.983158 0 0 0 107.789474 582.952421V754.526316h53.894737v-171.573895A98.007579 98.007579 0 0 1 259.584 485.052632c46.322526 0 79.629474 20.911158 137.027368 86.016l18.970948 21.530947 128.080842-128.080842C572.200421 435.981474 592.842105 415.366737 592.842105 377.263158v-97.926737l23.309474-14.120421-13.662316-23.04c-0.161684-0.242526-14.578526-24.899368-14.578526-50.688 0-19.132632 15.575579-34.708211 34.70821-34.708211 5.093053 0 26.785684 3.179789 39.558737 18.647579l26.327579 46.026106 39.774316-24.090948-20.372211-49.367579C704.754526 140.449684 700.631579 117.517474 700.631579 107.789474c0-29.722947 24.171789-53.894737 53.894737-53.894737s53.894737 24.171789 53.894737 53.894737v215.578947c0 85.935158 16.680421 145.300211 31.366736 197.632C851.887158 564.008421 862.315789 601.141895 862.315789 646.736842c0 95.285895-99.408842 161.684211-188.631578 161.684211h-209.461895l-68.419369-145.704421C375.242105 618.954105 338.108632 592.842105 296.448 592.842105A80.976842 80.976842 0 0 0 215.578947 673.711158V862.315789h53.894737v-188.604631c0-14.874947 12.099368-26.974316 26.974316-26.974316 20.533895 0 38.965895 14.147368 50.553263 38.858105L480.579368 970.105263h59.526737z" fill="#231F20" ></path></symbol><symbol id="icon-snake_si" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-242.041263 180.762947l-52.116211-13.797052C657.219368 749.864421 651.425684 754.526316 619.789474 754.526316h-242.526316V485.052632h269.473684v53.894736h53.894737V215.578947H323.368421v538.947369c0 29.722947 24.171789 53.894737 53.894737 53.894737h242.526316c77.689263 0 91.189895-51.065263 108.274526-115.658106zM377.263158 269.473684h269.473684v161.684211H377.263158v-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-tiger_yin" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-257.42821 299.250526l-107.789474-53.894737-24.117895 48.208843 107.789474 53.894736 24.117895-48.208842z m-269.473685-5.658947l-24.117894-48.208842-107.789474 53.894737 24.117895 48.208842 107.789473-53.894737zM700.631579 431.157895h-161.684211v-53.894737h107.789474v-53.894737H377.263158v53.894737h107.789474v53.894737h-161.684211v323.368421h53.894737v-53.894737h269.473684v53.894737h53.894737V431.157895z m-161.684211 161.68421h107.789474v53.894737h-107.789474v-53.894737z m-161.68421 0h107.789474v53.894737h-107.789474v-53.894737z m161.68421-107.789473h107.789474v53.894736h-107.789474v-53.894736z m-161.68421 0h107.789474v53.894736h-107.789474v-53.894736zM754.526316 215.578947h-223.097263l-20.803369-62.410105-51.119158 17.057684L474.624 215.578947H269.473684v107.789474h53.894737v-53.894737h377.263158v53.894737h53.894737V215.578947z" fill="#231F20" ></path></symbol><symbol id="icon-snake" viewBox="0 0 1024 1024"><path d="M107.789474 790.474105c0-72.434526 67.880421-91.513263 121.451789-91.513263 74.401684 0 153.815579 34.438737 237.891369 70.925474 50.580211 21.935158 104.609684 45.325474 162.250105 63.083789-52.412632 44.786526-118.784 74.347789-195.152842 83.078737-143.171368 16.357053-326.440421 7.006316-326.440421-125.574737zM377.263158 215.578947c-15.575579 0-30.288842 3.449263-43.654737 9.377685A250.691368 250.691368 0 0 0 323.368421 296.421053c0 115.550316 76.422737 169.391158 137.83579 212.614736 8.138105 5.712842 16.141474 11.371789 23.848421 17.057685V323.368421a107.789474 107.789474 0 0 0-107.789474-107.789474z" fill="#C3D686" ></path><path d="M671.528421 788.857263c44.328421 11.964632 89.626947 19.563789 136.892632 19.56379 89.168842 0 161.684211-60.442947 161.68421-134.736842s-72.515368-134.736842-161.68421-134.736843c-19.078737 0-37.025684 1.509053-54.218106 4.015158-0.754526-101.402947-38.211368-172.355368-79.413894-219.648L673.684211 323.368421a1749.962105 1749.962105 0 0 1-79.036632-1.751579c45.702737 35.866947 108.705684 107.870316 105.984 232.367158 0 0.431158-0.080842 0.808421-0.10779 1.239579-34.923789 10.994526-66.155789 26.731789-95.097263 45.190737a163.085474 163.085474 0 0 0-15.845052-42.388211c-21.557895-39.639579-60.065684-66.775579-97.360842-93.022316C433.098105 423.343158 377.263158 384 377.263158 296.421053c0-130.290526 108.274526-188.631579 215.578947-188.631579 64.134737 0 132.715789 12.045474 214.366316 37.807158C802.330947 180.250947 780.099368 209.381053 700.631579 214.635789V161.684211h-53.894737v53.679157c-63.272421-1.024-104.528842-5.200842-104.986947-5.254736l-5.578106 53.598315C538.408421 263.949474 592.357053 269.473684 673.684211 269.473684c125.170526 0 188.631579-48.128 188.631578-143.063579V106.981053l-18.432-6.144C747.789474 68.823579 668.025263 53.894737 592.842105 53.894737c-158.666105 0-269.473684 99.732211-269.473684 242.526316 0 115.550316 76.422737 169.391158 137.83579 212.614736 33.684211 23.713684 65.509053 46.106947 81.003789 74.698106 9.539368 17.542737 13.285053 33.414737 12.341895 47.750737 21.153684 9.108211 42.118737 17.839158 62.949052 25.977263C671.151158 620.193684 729.977263 592.842105 808.421053 592.842105c59.445895 0 107.789474 36.271158 107.789473 80.842106s-48.343579 80.842105-107.789473 80.842105c-105.472 0-203.237053-42.388211-297.768421-83.429053-94.800842-41.094737-184.346947-79.952842-281.411369-79.952842C122.718316 591.171368 53.894737 644.715789 53.894737 727.578947c0 79.063579 67.098947 136.434526 159.555368 136.434527 142.174316 0 230.426947-66.883368 306.79579-129.886316 31.420632 13.419789 62.787368 26.058105 94.450526 37.133474-47.077053 49.637053-110.969263 82.566737-186.610526 91.270736l5.066105 53.625264c93.453474-7.006316 143.144421 9.350737 195.718737 26.543157 46.457263 15.225263 94.127158 30.854737 169.822316 30.854737 19.994947 0 41.957053-1.077895 66.344421-3.557052l-5.416421-53.625263c-105.283368 10.778947-158.100211-6.548211-213.935158-24.872422-22.150737-7.275789-44.624842-14.632421-70.305684-20.345263a334.848 334.848 0 0 0 96.14821-82.297263z m-458.078316 21.261474C162.573474 810.118737 107.789474 784.276211 107.789474 727.578947c0-60.847158 62.733474-82.539789 121.451789-82.539789 77.850947 0 154.731789 30.288842 235.250526 64.943158-66.263579 52.924632-139.722105 100.136421-251.041684 100.136421z" fill="#231F20" ></path></symbol><symbol id="icon-tiger" viewBox="0 0 1024 1024"><path d="M431.157895 162.250105V134.736842c0-41.552842-39.289263-80.842105-80.842106-80.842105-28.833684 0-57.128421 4.661895-58.314105 4.850526L269.473684 62.490947v83.887158C144.788211 223.824842 89.222737 346.839579 66.991158 431.157895h266.051368c240.747789 0 415.851789 107.789474 415.85179 269.473684-14.848-25.114947-43.924211-53.894737-88.68379-53.894737-67.988211 0-121.263158 71.033263-121.263158 161.684211 0 66.802526 30.477474 119.888842 60.712421 156.16 12.638316 15.171368 36.055579 37.726316 59.014737 58.88 5.066105 0.107789 9.781895 0.538947 15.009685 0.538947 219.297684 0 350.315789-191.811368 350.315789-377.263158C1024 327.545263 679.855158 172.813474 431.157895 162.250105z" fill="#F7C768" ></path><path d="M673.684211 1024c-114.768842 0-188.820211-33.333895-254.167579-62.787368-53.625263-24.144842-99.974737-45.002105-161.28-45.002106-40.448 0-83.590737 23.255579-103.639579 45.16379l-39.747369-36.432842C142.497684 894.787368 199.168 862.315789 258.236632 862.315789c68.392421 0 119.861895 21.288421 172.921263 45.056V673.684211c0-35.166316-17.542737-64.107789-30.639158-80.815158-15.198316 9.835789-32.067368 18.890105-50.741895 26.947368l-21.342316-49.475368C469.800421 509.413053 485.052632 377.317053 485.052632 323.368421V221.642105A597.827368 597.827368 0 0 0 404.210526 215.578947h-26.947368V134.736842c0-12.099368-14.848-26.947368-26.947369-26.947368-9.377684 0-18.836211 0.592842-26.947368 1.347368V269.473684h-53.894737V211.671579c-136.030316 102.912-158.450526 266.886737-161.306947 295.882105 9.135158 9.108211 38.992842 25.061053 71.976421 38.669474l38.103579-59.365053 12.449684-1.589894C321.212632 473.653895 377.263158 392.192 377.263158 323.368421h53.894737c0 88.333474-68.796632 192.242526-180.870737 213.342316l-48.397474 75.398737-20.291368-7.437474C53.894737 557.756632 53.894737 523.317895 53.894737 512c0-50.041263 37.025684-254.733474 215.578947-365.621895V62.490947l22.528-3.745684C293.187368 58.556632 321.482105 53.894737 350.315789 53.894737c41.552842 0 80.842105 39.289263 80.842106 80.842105v27.513263c248.697263 10.563368 592.842105 165.295158 592.842105 484.486737 0 185.451789-131.018105 377.263158-350.315789 377.263158z m-13.473685-323.368421c-36.513684 0-67.368421 49.367579-67.368421 107.789474 0 85.746526 68.096 145.084632 89.465263 161.549473 91.540211-2.533053 164.378947-45.487158 213.827369-107.654737H700.631579v-53.894736h230.238316c8.919579-17.273263 16.357053-35.354947 22.285473-53.894737h-239.885473l-6.467369-17.650527C706.290526 735.582316 692.439579 700.631579 660.210526 700.631579zM485.052632 931.112421c33.926737 14.066526 70.521263 26.597053 114.607157 33.468632C569.424842 928.309895 538.947368 875.223579 538.947368 808.421053c0-90.650947 53.274947-161.684211 121.263158-161.684211 44.759579 0 73.835789 28.779789 88.68379 53.894737h217.007158c2.775579-17.866105 4.203789-35.920842 4.203789-53.894737 0-38.938947-5.658947-74.752-15.925895-107.627789l-126.706526 126.679579-38.103579-38.103579L932.001684 485.052632a367.939368 367.939368 0 0 0-57.775158-81.596632l-154.543158 154.543158-38.103579-38.103579 153.573053-153.573053a537.869474 537.869474 0 0 0-82.593684-56.751158l-140.665263 140.638316-38.103579-38.103579 128.134737-128.134737A794.731789 794.731789 0 0 0 538.947368 231.046737V323.368421c0 50.149053-11.102316 156.698947-95.932631 236.328421 18.378105 23.417263 42.037895 63.407158 42.037895 113.987369v257.42821zM215.578947 431.157895v-53.894737c39.774316 0 53.894737-29.022316 53.894737-53.894737h53.894737c0 53.571368-37.025684 107.789474-107.789474 107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-boar" viewBox="0 0 1024 1024"><path d="M732.079158 377.263158c-107.789474 0-186.421895 31.393684-281.869474 126.841263L180.331789 773.982316C257.724632 807.909053 348.725895 808.421053 485.052632 808.421053h96.013473c55.834947-34.411789 133.551158-53.894737 227.354948-53.894737h121.344L970.105263 680.555789V572.631579c0-94.315789-130.236632-195.368421-238.026105-195.368421z" fill="#FFBDD8" ></path><path d="M808.421053 700.631579v53.894737c-196.446316 0-323.368421 84.641684-323.368421 215.578947h-53.894737c0-163.705263 148.075789-269.473684 377.263158-269.473684z m-323.368421 107.789474v-53.894737c-158.342737 0-245.598316 0-319.649685-49.367579L158.612211 700.631579H80.842105c-21.692632 0-26.624-14.821053-26.947368-26.947368v-82.620632c84.156632-11.183158 161.684211-74.913684 161.68421-186.853053V215.578947H161.684211v161.684211H134.736842c-66.964211 0-134.736842 37.025684-134.736842 107.789474h53.894737c0-42.630737 52.870737-53.894737 80.842105-53.894737h24.629895C147.132632 504.912842 85.153684 538.947368 26.947368 538.947368H0v134.736843c0 32.498526 21.530947 80.842105 80.842105 80.842105h61.682527c32.687158 20.506947 67.125895 33.145263 105.957052 41.013895A232.879158 232.879158 0 0 0 215.578947 916.210526h53.894737c0-41.930105 14.012632-80.303158 39.424-112.505263C358.885053 808.151579 415.959579 808.421053 485.052632 808.421053z m-72.946527-342.420211L323.368421 554.738526V431.157895h-53.894737v253.682526l180.736-180.736-38.103579-38.103579zM323.368421 161.684211h-53.894737v190.032842a769.536 769.536 0 0 1 53.894737-49.098106V161.684211z m323.368421-53.894737c-72.623158 0-146.809263 23.336421-215.578947 58.637473V107.789474h-53.894737v154.138947C458.832842 205.392842 555.331368 161.684211 646.736842 161.684211c148.587789 0 269.473684 120.885895 269.473684 269.473684v235.654737L809.579789 862.315789h61.359158L970.105263 680.555789V431.157895c0-178.310737-145.057684-323.368421-323.368421-323.368421z" fill="#231F20" ></path></symbol><symbol id="icon-boar_hai" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M309.975579 804.756211l-27.136-46.592c103.073684-60.011789 183.026526-132.473263 241.475368-219.24379H350.315789l-13.473684-50.283789c58.88-33.980632 99.435789-117.571368 118.703158-165.295158H242.526316v-53.894737h538.947368v53.894737h-268.18021c-12.395789 34.088421-42.469053 106.603789-90.435369 161.68421h134.009263a680.555789 680.555789 0 0 0 46.349474-107.708631l51.092211 17.057684c-58.421895 175.265684-171.034947 309.490526-344.333474 410.381474z m192.350316-2.937264L467.806316 760.454737c88.414316-73.728 154.516211-158.773895 202.105263-259.907369l48.801684 22.959158a797.372632 797.372632 0 0 1-82.351158 137.781895c32.741053 15.009684 83.456 44.867368 137.647158 101.591579l-38.938947 37.268211c-57.236211-59.877053-109.325474-85.557895-133.766737-95.178106a850.997895 850.997895 0 0 1-98.977684 96.848842z m48.613052-536.872421l-80.842105-53.894737 29.884632-44.840421 80.842105 53.894737-29.884632 44.840421zM512 53.894737C259.395368 53.894737 53.894737 259.395368 53.894737 512s205.500632 458.105263 458.105263 458.105263c9.081263 0 17.973895-0.835368 26.947368-1.374316v-53.894736c-8.946526 0.619789-17.866105 1.374316-26.947368 1.374315-222.881684 0-404.210526-181.328842-404.210526-404.210526S289.118316 107.789474 512 107.789474s404.210526 181.328842 404.210526 404.210526c0 195.206737-139.075368 358.507789-323.368421 396.045474v54.460631c214.096842-38.346105 377.263158-225.549474 377.263158-450.533052C970.105263 259.395368 764.604632 53.894737 512 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-bilibili1" viewBox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75H212.377a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3" ></path><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3" ></path></symbol><symbol id="icon-yinle" viewBox="0 0 1024 1024"><path d="M512.2976 0a531.2 531.2 0 0 0-512 548.48V960h128V548.48a398.72 398.72 0 0 1 384-411.52 398.72 398.72 0 0 1 384 411.52V960h128V548.48A531.2 531.2 0 0 0 512.2976 0z" fill="#5c8add" ></path><path d="M64.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path><path d="M704.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path></symbol><symbol id="icon-icon-test-copy" viewBox="0 0 1024 1024"><path d="M512 512m-229.517241 0a229.517241 229.517241 0 1 0 459.034482 0 229.517241 229.517241 0 1 0-459.034482 0Z" fill="#5c8add" ></path><path d="M512 1024A512 512 0 1 1 1024 512 512 512 0 0 1 512 1024z m0-141.241379A370.758621 370.758621 0 1 0 141.241379 512 370.758621 370.758621 0 0 0 512 882.758621z" fill="#5c8add" ></path></symbol><symbol id="icon-V" viewBox="0 0 1024 1024"><path d="M1012.47774251 492.58192592L544.94137566 87.22962963a49.96686561 49.96686561 0 0 0-65.88275132 0L11.63784127 492.6975097c-21.03624691 18.26223633-23.3479224 49.93219048-5.08568606 70.96843739 18.03106878 21.03624691 49.93219048 23.3479224 70.96843738 5.08568607L512 191.83294532l434.71057495 376.91868784c9.47786949 8.20644797 21.26741446 12.25188008 32.82579189 12.13629629 14.10122046 0 27.97127337-5.77918871 38.02706173-17.33756613 18.14665256-20.92066314 15.95056084-52.70620106-5.08568606-70.9684374z" fill="#5c8add" ></path><path d="M109.30613051 567.59579541V896.89396825c0 42.53482892 34.90629982 77.44112875 77.44112875 77.44112875h220.76500882V666.30433862c0-25.54401411 20.92066314-46.46467725 46.46467724-46.46467724h116.16169313c25.54401411 0 46.46467725 20.92066314 46.46467725 46.46467724V974.335097h220.76500882c42.53482892 0 77.44112875-34.90629982 77.44112874-77.44112875l0.11558377-329.29817284L512 218.18604586 109.30613051 567.59579541zM848.00203175 197.49655027h-63.91782716c-12.82979894 0-23.23233862 10.40253968-23.23233863 23.23233862v24.27259259l110.49808818 95.70336508V220.72888889h-0.11558377c0-12.82979894-10.40253968-23.23233862-23.23233862-23.23233862zM905.44716754 83.18419754s-34.90629982 56.86721693-89.11508994 100.32671603c152.68616579 13.98563668 127.83565432-133.26809171 127.83565432-133.2680917-134.07717813-10.28695591-132.92134039 102.29164021-131.072 127.83565432 20.92066314-20.92066314 49.70102293-62.64640564 92.35143562-94.89427865zM798.53217637 174.61096297c-19.64924162-16.52847972-40.56990476-43.45949912-51.203612-53.97762258 0 0 32.94137566 20.57391182 56.40488184 49.3542716 2.42725926-18.37782011 6.47269135-93.3916896-93.16052205-85.3008254 0 0-13.98563668 104.71889947 87.95925221 89.92417638z" fill="#5c8add" ></path></symbol><symbol id="icon-zhifeiji" viewBox="0 0 1167 1024"><path d="M41.201759 463.52493L1110.665064 30.117647c10.32605-4.159104 21.942857 0.860504 26.101961 11.043137 1.434174 3.728852 1.864426 7.744538 1.003921 11.616807L949.033691 978.823529c-2.151261 10.89972-12.764146 17.927171-23.663865 15.632493-2.72493-0.573669-5.306443-1.721008-7.601121-3.298599L634.80624 789.79944l-163.065546 133.951821c-16.492997 13.62465-40.87395 11.186555-54.498599-5.306443-3.011765-3.728852-5.306443-7.887955-6.884034-12.477311l-102.973669-313.080112-265.178712-91.787115c-10.469468-3.585434-16.062745-15.058824-12.333893-25.528291 1.864426-5.44986 6.023529-9.895798 11.329972-12.047059z" fill="#FCFDFC" ></path><path d="M929.385512 1023.569748c-3.155182 0-6.453782-0.286835-9.752381-1.003922-6.740616-1.434174-12.907563-4.015686-18.50084-8.031372L635.953579 825.940616l-146.142297 120.040336c-13.911485 11.473389-31.408403 16.779832-49.335574 15.058824-17.927171-1.721008-34.133333-10.32605-45.463305-24.237535-5.306443-6.453782-9.322129-13.768067-11.903642-21.79944l-98.527731-299.598879-251.697479-87.19776c-12.333894-4.302521-22.229692-13.05098-27.966386-24.811204s-6.453782-24.954622-2.151261-37.288515c4.589356-13.337815 14.771989-23.9507 27.82297-29.257143L1099.908761 3.585434c24.954622-10.039216 53.351261 2.007843 63.533894 26.819048 3.585434 8.891877 4.445938 18.644258 2.581513 28.109804L977.143495 984.560224c-4.732773 23.090196-25.098039 39.009524-47.757983 39.009524z m-294.579272-233.770308l282.962465 201.357983c2.294678 1.577591 4.87619 2.72493 7.601121 3.298599 10.89972 2.151261 21.512605-4.87619 23.663865-15.632493L1137.914364 52.777591c0.860504-3.872269 0.430252-7.887955-1.003922-11.616807-4.159104-10.32605-15.919328-15.202241-26.101961-11.043137L41.201759 463.52493c-5.306443 2.151261-9.465546 6.597199-11.47339 12.047059-1.721008 5.019608-1.434174 10.469468 0.860505 15.345658 2.294678 4.87619 6.453782 8.461625 11.473389 10.182633l265.178711 91.787115L410.214644 905.967507c1.434174 4.589356 3.872269 8.748459 6.884033 12.477311 6.597199 8.031373 15.919328 12.907563 26.101961 13.911485 10.32605 1.003922 20.365266-2.007843 28.396639-8.605042l163.208963-133.951821z" fill="#4A4A4A" ></path><path d="M307.097557 592.743978l105.698599 316.091876c6.310364 18.787675 26.532213 28.970308 45.319888 22.659944 4.159104-1.434174 7.887955-3.442017 11.186555-6.166946l164.786555-133.951821-165.360224-118.892997c297.017367-287.982073 447.462185-433.980952 451.191036-437.853222 0.573669-0.573669 2.581513-3.442017 0.430252-7.027451-1.290756-1.577591-3.298599-3.298599-7.027451-2.15126-202.218487 120.327171-404.293557 242.805602-606.22521 367.291877z" fill="#CAE0EE" ></path><path d="M446.786072 934.794398c-5.736695 0-11.329972-1.290756-16.636414-3.872269-8.891877-4.445938-15.632493-12.047059-18.787675-21.512605L305.376549 592.313725l1.003921-0.573669C507.308201 467.684034 711.391114 344.058263 912.60568 224.161345l0.286835-0.143418c3.585434-1.147339 6.310364-0.286835 8.605042 2.581513l0.143417 0.143417c2.438095 4.015686 0.573669 7.457703-0.573669 8.74846-3.872269 4.015686-155.177591 150.87507-450.043698 436.705882l165.503642 119.036414-166.220728 135.09916c-3.442017 2.868347-7.457703 5.019608-11.760225 6.453782-3.728852 1.290756-7.744538 2.007843-11.760224 2.007843z m-137.967507-341.333334l105.268348 314.944538c2.868347 8.748459 9.035294 15.77591 17.210084 19.935014 8.17479 4.159104 17.496919 4.732773 26.245378 1.864426 3.872269-1.290756 7.60112-3.298599 10.756302-5.880112l163.352381-132.804482L466.434252 672.627451l1.290756-1.147339C763.308201 384.932213 915.043775 237.642577 918.772627 233.626891c0 0 2.007843-2.294678 0.286835-5.306443-1.003922-1.290756-2.438095-2.438095-5.306443-1.577591-200.784314 119.610084-404.293557 242.94902-604.934454 366.718207z" fill="#CAE0EE" ></path><path d="M460.840974 924.898599l7.457703-253.561904 165.933894 119.896918-168.658824 135.959664c-1.290756 1.003922-3.011765 0.860504-4.015686-0.430252-0.430252-0.430252-0.717087-1.147339-0.717087-1.864426z" fill="#94C3E2" ></path><path d="M463.709322 929.344538c-1.290756 0-2.438095-0.573669-3.2986-1.577591-0.573669-0.860504-1.003922-1.864426-1.003921-2.868348l7.60112-256.286834 169.519328 122.621848-1.434174 1.147339-168.658823 135.959664c-0.860504 0.717087-1.721008 1.003922-2.72493 1.003922z m6.023529-255.282913l-7.457703 250.836974c0 0.286835 0.143417 0.717087 0.286835 1.003922 0.430252 0.573669 1.434174 0.717087 2.007843 0.286835l167.22465-134.812325-162.061625-117.315406z" fill="#94C3E2" ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1079 1024"><path d="M695.355535 432.666896c-0.553495-1.10699-0.885592-2.186305-1.383737-3.265619-0.193723-0.193723-0.193723-0.359772-0.359771-0.719543-12.508983-26.318678-39.436506-43.366319-69.325226-41.013966-39.076734 3.265619-68.439634 39.021384-65.312388 79.841627 0.857917 10.516401 3.653066 20.147211 7.998 28.83708 19.78744 46.659613 11.097571 103.448181-25.377737 141.750022l-191.094085 199.950001a118.088119 118.088119 0 0 1-171.998513 0c-47.434506-49.537786-47.434506-130.098956 0-179.636742l71.234782-74.389703-0.52582-0.553494a75.911814 75.911814 0 0 0 24.326097-61.880721c-3.127246-40.820243-37.3609-71.51153-76.437634-68.24591a69.463599 69.463599 0 0 0-46.908685 23.966325l-0.166049-0.193723-72.618519 75.856464c-103.226783 107.793115-103.226783 282.36538 0 390.158495 103.171433 107.793115 270.299193 107.793115 373.498301 0l191.619904-200.1714c80.256748-83.992838 97.636485-208.307773 52.83108-310.289193z" fill="#5c8add" ></path><path d="M1002.047012 80.865592c-103.226783-107.82079-270.382217-107.82079-373.581325 0l-191.619905 200.199075c-80.284423 83.854464-97.66416 208.197074-52.997128 310.233843 0.52582 1.079315 0.857917 2.15863 1.383737 3.26562 0.166048 0.166048 0.166048 0.359772 0.332097 0.719543 12.536658 26.291004 39.46418 43.366319 69.3529 41.013966 39.076734-3.265619 68.439634-39.021384 65.312388-79.869302a78.679288 78.679288 0 0 0-7.998-28.864755c-19.78744-46.631938-11.097571-103.448181 25.377737-141.750022l191.287808-199.839302a118.088119 118.088119 0 0 1 172.026188 0c47.434506 49.537786 47.434506 130.126631 0 179.692091l-71.234782 74.417378 0.52582 0.553495a75.939489 75.939489 0 0 0-24.353772 61.88072c3.15492 40.847917 37.3609 71.51153 76.465309 68.245911a69.463599 69.463599 0 0 0 46.908685-23.938651l0.166049 0.166048 72.646194-75.856464c103.03306-107.82079 103.03306-282.642127 0-390.269194z" fill="#5c8add" ></path></symbol><symbol id="icon-liaotian" viewBox="0 0 1171 1024"><path d="M1068.71699 0.243751H102.193768C46.228437 0.243751 0.500666 45.045267 0.500666 99.74309v696.251622c0 54.697824 45.727771 99.450589 101.693102 99.450589h329.113198l120.851966 114.465677a48.652788 48.652788 0 0 0 66.641644 0l120.851966-114.465677h329.064448c55.965331 0 101.741852-44.752765 101.741852-99.450589V99.74309C1170.458842 45.045267 1124.682321 0.243751 1068.71699 0.243751z m-439.776354 596.849784h-370.989696c-27.933915 0-50.846551-22.425133-50.846551-49.774045 0-27.348912 22.912636-49.725294 50.846551-49.725294h370.989696c27.933915 0 50.846551 22.376382 50.846551 49.725294 0 27.348912-22.912636 49.774045-50.846551 49.774045z m287.18795-211.381252H254.782171a50.456549 50.456549 0 0 1-50.846551-49.725294c0-27.397662 22.912636-49.774045 50.846551-49.774045h661.346415c27.933915 0 50.846551 22.376382 50.846551 49.774045 0 27.348912-22.912636 49.725294-50.846551 49.725294z" fill="#5C8ADD" ></path></symbol><symbol id="icon-xinfeng" viewBox="0 0 1400 1024"><path d="M1301.63733163 214.78520234a207.81921797 207.81921797 0 0 1 7.02423018 52.42036465v489.73590176a205.10753818 205.10753818 0 0 1-205.05853125 205.05853125H283.05853124A205.15654424 205.15654424 0 0 1 77.99999999 756.79444971V267.20556699a201.36672685 201.36672685 0 0 1 7.02423106-52.42036465L586.24393329 562.1905874c69.44187217 51.96297217 146.36536612 49.13694404 214.1736961 0zM1103.60303056 62.0000167H283.05853124A204.50312753 204.50312753 0 0 0 106.37462518 163.41030547l489.71956641 335.75823018c62.43397646 50.77048623 127.85733457 50.31309463 194.62019765 0L1280.28693749 163.41030547A204.68281729 204.68281729 0 0 0 1103.60303056 62.0000167z m0 0" fill="#5c8add" ></path></symbol><symbol id="icon-QQ1" viewBox="0 0 1024 1024"><path d="M0 512a512 512 0 1 0 1024 0A512 512 0 1 0 0 512z" fill="#18ACFC" ></path><path d="M500.113 228.39c118.396-1.518 178.924 61.004 201 156 3.497 15.048 0.15 34.807 0 50 27.143 5.682 33.087 60.106 10 75v1h1c8.26 14.33 19.04 28.125 26 44 7.332 16.723 9.306 35.16 14 55 4.024 17.01-2.287 51.505-10 57-0.771 0.683-2.231 1.312-3 2-14.601-3.016-30.377-16.865-38-27-3.065-4.074-5.275-9.672-10-12-0.395 21.568-12.503 41.15-22 55-3.514 5.123-14.073 13.217-14 18 3.691 2.836 8.305 2.956 13 5 10.513 4.577 25.449 13.168 32 22 2.334 3.146 5.548 7.555 7 11 16.193 38.414-36.527 48.314-63 54-27.185 5.839-77.818-10.224-92-19-8.749-5.414-16.863-18.573-29-19-3.666 2.389-14.438 1.132-20 1-16.829 32.804-101.913 47.868-148 31-14.061-5.146-43.398-17.695-38-40 4.437-18.327 19.947-29.224 35-37 5.759-2.975 18.915-4.419 22-10-13.141-8.988-24.521-28.659-31-44-3.412-8.077-4.193-25.775-9-32-7.789 12.245-32.097 36.91-52 33-3.071-4.553-7.213-9.097-9-15-4.792-15.835-1.81-40.379 2-54 8.117-29.02 16.965-50.623 32-72 4.672-6.643 11.425-12.135 16-19-8.945-9.733-6.951-37.536-1-49 4.002-7.709 9.701-7.413 10-20-1.92-3.022-0.071-8.604-1-13-4.383-20.75 3.273-47.552 9-63 19.8-53.421 53.712-90.466 105-112 11.986-5.033 25.833-7.783 39-11 5.322-1.3 11.969 0.518 16-2z" fill="#FFFFFF" ></path></symbol><symbol id="icon-rss" viewBox="0 0 1024 1024"><path d="M749.61196492 908.06119793C749.61196492 560.41848146 463.58151854 274.36328126 115.93880207 274.36328126V115.93880207c434.50388795 0 792.12239584 357.61850789 792.12239586 792.12239586zM224.55858562 690.72261555a108.91682943 108.91682943 0 0 1 108.69404499 108.74355267C333.25263061 859.29616292 284.24005737 908.06119793 224.31104736 908.06119793 164.48105265 908.06119793 115.96355592 859.41993206 115.96355592 799.46616822s48.69077351-108.71879883 108.61978351-108.74355267zM641.01693522 908.06119793h-153.96879069c0-203.60020956-167.50913289-371.13409627-371.10934246-371.13409629v-153.96879068c288.03550619 0 525.07813313 237.11688843 525.07813315 525.10288697z" fill="#FFA500" ></path></symbol><symbol id="icon-youxiang" viewBox="0 0 1024 1024"><path d="M583.60666667 972h-68.08c-8.43333333 0-15.33333333-6.9-15.33333334-15.33333333V609.52c0-8.43333333 6.9-15.33333333 15.33333334-15.33333333h68.08c8.43333333 0 15.33333333 6.9 15.33333333 15.33333333V956.66666667c0 8.43333333-6.9 15.33333333-15.33333333 15.33333333z" fill="#629FF9" ></path><path d="M294.42 167c-113.62 0-205.77333333 92-205.77333333 205.31333333v336.72h411.39333333V372.31333333c0.15333333-113.31333333-92-205.31333333-205.62-205.31333333z" fill="#2166CC" ></path><path d="M519.97333333 627H216.98666667c-25.45333333 0-46-20.54666667-46-46V393.78c0-25.45333333 20.54666667-46 46-46h302.98666666c25.45333333 0 46 20.54666667 46 46V581c0 25.45333333-20.54666667 46-46 46z" fill="#D2E4FF" ></path><path d="M565.97333333 397a49.22 49.22 0 0 0-49.37333333-49.22H220.36c-27.29333333 0-49.37333333 22.08-49.37333333 49.22v10.27333333l179.4 94.60666667c11.34666667 5.98 24.84 5.98 36.18666666 0l179.4-94.60666667v-10.27333333z" fill="#FFFFFF" ></path><path d="M730.5 167h-427.8v0.46c109.78666667 4.29333333 197.49333333 94.3 197.49333333 205.00666667v336.72h411.39333334c27.29333333 0 49.37333333-22.08 49.37333333-49.22V397c0-126.96-103.19333333-230-230.46-230z" fill="#4E8DF6" ></path><path d="M845.80666667 52H681.12666667c-9.04666667 0-16.40666667 7.36-16.40666667 16.40666667v336.72a24.67133333 24.67133333 0 1 0 49.37333333 0V134.18666667h131.71333334c9.04666667 0 16.40666667-7.36 16.40666666-16.40666667V68.40666667c0-9.04666667-7.36-16.40666667-16.40666666-16.40666667z" fill="#2166CC" ></path><path d="M896.25333333 659.81333333h-35.11333333c-8.43333333 0-15.33333333-6.9-15.33333333-15.33333333v-35.11333333c0-8.43333333 6.9-15.33333333 15.33333333-15.33333334h35.11333333c8.43333333 0 15.33333333 6.9 15.33333334 15.33333334v35.11333333c0 8.58666667-6.9 15.33333333-15.33333334 15.33333333z" fill="#FFFFFF" ></path><path d="M88.8 709.18666667l-24.22666667 131.40666666c-9.66 54.43333333 26.83333333 98.59333333 81.26666667 98.59333334h213.9c54.58666667 0 106.56666667-44.16 116.22666667-98.59333334l23.15333333-131.40666666H88.8z" fill="#2974CE" ></path></symbol><symbol id="icon-gitHub" viewBox="0 0 1049 1024"><path d="M523.6581816 52C262.83923907 52 52 262.8401375 52 523.6581816c0 208.49703047 135.09433812 384.97758117 322.50789391 447.44906532 23.42658172 4.68531653 32.01647887-10.15136894 32.01647796-22.64584583 0-10.93210574-0.78163433-48.41463703-0.78163433-87.45953855-131.18885996 28.11189824-158.5200223-56.22379738-158.52002231-56.22379739-21.08437312-54.66232469-52.3201152-68.71827336-52.3201152-68.71827335-42.94858371-28.89353348 3.12384382-28.89353348 3.12384384-28.89353348 47.63479867 3.12384382 72.62285398 48.41643391 72.62285398 48.4164339 42.16784782 71.84121875 110.10538527 51.53758242 137.43654672 39.04400399 3.90457972-30.45500618 16.3990566-51.5393793 29.67427028-63.25222094-104.64023039-10.93300418-214.74561566-51.53848086-214.74561657-232.70524742 0-51.53848086 18.74126609-93.70632867 48.4164339-126.50444187-4.68621496-11.71284164-21.08527156-60.12837711 4.6844181-124.94207075 0 0 39.82563922-12.49447688 129.62738726 48.41463704 37.48253129-10.15136894 78.08980484-15.61742227 117.91454562-15.61742137s80.43201433 5.46605242 117.91454473 15.61742137c89.80264648-60.90911391 129.62828571-48.41463703 129.62828571-48.41463704 25.76879122 64.81369363 9.37063305 113.22922911 4.68531651 124.94207075 30.45410773 32.79721477 48.41463703 74.96506258 48.41463703 126.50444187 0 181.16676656-110.10538527 220.99150644-215.52545401 232.70524742 17.1797934 14.83668547 32.01647887 42.94858371 32.01647886 87.45953946 0 63.25222094-0.78163433 114.009965-0.78163523 129.62738636 0 12.49447688 8.59079468 27.33116234 32.01737731 22.64584583 187.41265734-62.4705866 322.50699547-238.95203574 322.50699546-447.44996375C995.31636231 262.8401375 783.69369203 52 523.6581816 52z" fill="#663399" ></path><path d="M230.82365863 729.03136735c-0.7807359 2.34310703-4.68531653 3.12384382-7.80916035 1.56237113s-5.46605242-4.68531653-3.90368129-7.02842356c0.7807359-2.34220859 4.68531653-3.12384382 7.80826192-1.56147269s4.68531653 4.68531653 3.90457972 7.02752512z m18.7412661 21.08437312c-2.34220859 2.34220859-7.02752512 0.78163433-9.37063305-2.34310703-3.12294539-3.12294539-3.90457972-7.80826192-1.5614727-10.15136894 2.34220859-2.34220859 6.24678922-0.7807359 9.37063305 2.34310702 3.12384382 3.90457972 3.90457972 8.58899782 1.5614727 10.15136895zM268.30618992 777.44690281c-3.12294539 2.34220859-7.80826192 0-10.15136895-3.90457972-3.12384382-3.90457972-3.12384382-9.37063305 0-10.93210574 3.12384382-2.34310703 7.80916035 0 10.15226739 3.90457972 3.12294539 3.90368129 3.12294539 8.58899782 0 10.93210574z m25.76968965 26.55042555c-2.34220859 3.12294539-7.80916035 2.34220859-12.49447688-1.56237113-3.90457972-3.90368129-5.46605242-9.37063305-2.34220859-11.71284164 2.34220859-3.12384382 7.80826192-2.34310703 12.49447687 1.56147269 3.90368129 3.12384382 4.68531653 8.58989625 2.3422086 11.71374008z m35.1403227 14.83668637c-0.78163433 3.90457972-6.24768766 5.46605242-11.71374008 3.90457972-5.46605242-1.5614727-8.58899782-6.24768766-7.80916036-9.37063305 0.78163433-3.90457972 6.24768766-5.46605242 11.71374009-3.90457972 5.46605242 1.5614727 8.58899782 5.46605242 7.80916035 9.37063305z m38.26416562 3.12384382c0 3.90457972-4.68621496 7.02752512-10.15226738 7.02752512-5.46605242 0-10.15226738-3.12294539-10.15226739-7.02752512s4.68621496-7.02842356 10.15226739-7.02842445c5.46605242 0 10.15226738 3.12384382 10.15226738 7.02842445z m35.92016106-6.24768766c0.78163433 3.90457972-3.12384382 7.80916035-8.58899872 8.58989625-5.46695086 0.78163433-10.15226738-1.5614727-10.93390172-5.46605241-0.77983747-3.90457972 3.12384382-7.80916035 8.5907947-8.58899872 5.46605242-0.78163433 10.15136894 1.56057426 10.93210574 5.46515488z m0 0" fill="#663399" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1024 1024"><path d="M832.61667555 181.33447111h-164.32545185l74.45617778-74.45617778c12.84020148-12.84020148 12.84020148-30.8140563 0-43.65425778-12.84020148-12.84020148-30.8140563-12.84020148-43.65425778 0L573.2882963 189.04101925H450.04420741L324.2272237 63.23617185c-10.26730667-12.84020148-25.68040297-15.40096-41.08136295-7.70654815-2.57289482 0-2.57289482 2.57289482-5.13365334 5.13365333-12.84020148 12.84020148-12.84020148 30.8140563 0 43.65425779l77.02907259 77.02907259h-164.32545185c-89.86927408 0-164.32545185 74.45617778-164.32545185 164.32545184v408.24073483c0 87.29637925 74.45617778 161.75255703 164.32545185 161.75255703h25.68040296c0 30.8140563 25.68040297 53.92156445 53.92156444 53.92156444s53.92156445-25.68040297 53.92156445-53.92156444H704.23893333c2.57289482 30.8140563 28.24116148 53.92156445 59.05521778 51.34866964 28.24116148-2.57289482 48.78791111-23.10750815 51.34866964-51.34866964h20.53461333c89.86927408 0 164.32545185-74.45617778 164.32545184-164.32545186V343.09916445c-2.56075852-89.86927408-77.02907259-161.76469333-166.88621037-161.76469334z m-5.13365333 634.19429926H200.99527111c-33.37481482 0-59.05521778-28.24116148-61.61597629-61.61597629l-2.57289482-415.94728297c0-33.37481482 28.24116148-61.6159763 61.6159763-61.61597629h626.48775111c33.37481482 0 59.05521778 28.24116148 61.61597629 61.61597629l2.57289482 415.94728297c-2.57289482 35.93557333-28.24116148 61.6159763-61.6159763 61.61597629z" fill="#ff7299" ></path><path d="M403.82919111 417.55534222l15.40096 77.0290726-205.40681481 38.50846815-15.40096-77.0290726 205.40681481-38.50846815z m197.70026667 77.0290726l15.40096-77.0290726 205.40681481 38.50846815-15.40096 77.0290726-205.40681481-38.50846815z m41.08136297 161.75255703c0 2.57289482 0 7.70654815-2.57289483 10.26730667-12.84020148 28.24116148-41.08136297 46.2150163-74.45617777 48.78791111-20.53461333 0-41.08136297-10.26730667-53.92156445-25.68040296-15.40096 15.40096-33.37481482 25.68040297-53.92156445 25.68040296-30.8140563-2.57289482-59.05521778-20.53461333-74.45617777-48.78791111 0-2.57289482-2.57289482-5.13365333-2.57289481-10.26730667 0-10.26730667 7.70654815-17.97385482 17.97385481-20.53461333h2.57289482c7.70654815 0 12.84020148 2.57289482 15.40096 10.26730666 0 0 20.53461333 28.24116148 38.50846815 28.24116149 35.94770963 0 35.94770963-30.8140563 56.48232296-53.92156445 23.10750815 25.68040297 23.10750815 53.92156445 56.48232296 53.92156445 23.10750815 0 38.50846815-28.24116148 38.50846815-28.24116149 2.57289482-5.13365333 10.26730667-10.26730667 15.40096-10.26730666 10.26730667-2.57289482 17.97385482 5.13365333 20.53461333 15.40096v5.13365333h0.0364089z" fill="#ff7299" ></path></symbol></svg>',o=(o=document.getElementsByTagName("script"))[o.length-1].getAttribute("data-injectcss"),p=function(c,l){l.parentNode.insertBefore(c,l)};if(o&&!c.__iconfont__svg__cssinject__){c.__iconfont__svg__cssinject__=!0;try{document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>")}catch(c){console&&console.log(c)}}function d(){i||(i=!0,a())}function m(){try{t.documentElement.doScroll("left")}catch(c){return void setTimeout(m,50)}d()}l=function(){var c,l=document.createElement("div");l.innerHTML=v,v=null,(l=l.getElementsByTagName("svg")[0])&&(l.setAttribute("aria-hidden","true"),l.style.position="absolute",l.style.width=0,l.style.height=0,l.style.overflow="hidden",l=l,(c=document.body).firstChild?p(l,c.firstChild):c.appendChild(l))},document.addEventListener?~["complete","loaded","interactive"].indexOf(document.readyState)?setTimeout(l,0):(h=function(){document.removeEventListener("DOMContentLoaded",h,!1),l()},document.addEventListener("DOMContentLoaded",h,!1)):document.attachEvent&&(a=l,t=c.document,i=!1,m(),t.onreadystatechange=function(){"complete"==t.readyState&&(t.onreadystatechange=null,d())})}(window);]]></content>
      
    </entry>
    
    
  
</search>
