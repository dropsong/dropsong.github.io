<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dropsong&#39;s</title>
  
  <subtitle>tree hole</subtitle>
  <link href="https://dropsong.github.io/atom.xml" rel="self"/>
  
  <link href="https://dropsong.github.io/"/>
  <updated>2025-01-05T13:54:47.077Z</updated>
  <id>https://dropsong.github.io/</id>
  
  <author>
    <name>dropsong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2024 总结</title>
    <link href="https://dropsong.github.io/posts/c49dbf78.html"/>
    <id>https://dropsong.github.io/posts/c49dbf78.html</id>
    <published>2025-01-05T13:36:08.000Z</published>
    <updated>2025-01-05T13:54:47.077Z</updated>
    
    <content type="html"><![CDATA[<p>先占坑，考完试填坑。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先占坑，考完试填坑。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="生活" scheme="https://dropsong.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Java 零碎笔记</title>
    <link href="https://dropsong.github.io/posts/a5f2d934.html"/>
    <id>https://dropsong.github.io/posts/a5f2d934.html</id>
    <published>2024-12-15T14:21:51.000Z</published>
    <updated>2024-12-15T15:12:35.651Z</updated>
    
    <content type="html"><![CDATA[<p>接手了一个前后端不分离的学校项目，似乎历史悠久。</p><p>以后一些关于 Java 的零碎笔记可能也会放在这里。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>在 linux 上配置 Java 环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openjdk-17-jdk</span><br></pre></td></tr></table></figure><p>在 vscode 上配置 java 开发环境，安装推荐插件即可。然后在 <code>settings.json</code> 中：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;java.configuration.runtimes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JavaSE-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/lib/jvm/java-17-openjdk-amd64&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>一个 java 的 <code>HelloWorld.java</code> 程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 terminal 中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java</span><br><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure><p>输出 <code>Hello, World!</code> 。</p><p>在官网安装 tomcat（例如：apache-tomcat-9.0.96.tar.gz）。</p><p>然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -xvzf apache-tomcat-9.0.96.tar.gz -C /opt/</span><br><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">sudo <span class="built_in">mv</span> apache-tomcat-9.0.96 tomcat9</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">su root</span><br><span class="line"><span class="built_in">cd</span> /opt/tomcat9/bin</span><br><span class="line">sudo ./startup.sh</span><br></pre></td></tr></table></figure><p>如果一切正常，会得到类似如下的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Using CATALINA_BASE:   /opt/tomcat9</span><br><span class="line">Using CATALINA_HOME:   /opt/tomcat9</span><br><span class="line">Using CATALINA_TMPDIR: /opt/tomcat9/temp</span><br><span class="line">Using JRE_HOME:        /usr</span><br><span class="line">Using CLASSPATH:       /opt/tomcat9/bin/bootstrap.jar:/opt/tomcat9/bin/tomcat-juli.jar</span><br><span class="line">Using CATALINA_OPTS:   </span><br><span class="line">Tomcat started.</span><br></pre></td></tr></table></figure><p>打开浏览器，访问 <code>http://localhost:8080</code>，可以看到 Tomcat 的欢迎页面。</p><p>安装 Maven :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install maven</span><br></pre></td></tr></table></figure><p><code>mvn clean package</code> 是 Maven 的一个常用命令，用于清理项目并打包构建应用。它包含以下两部分操作：</p><ol><li><strong>clean</strong>：Maven 会删除之前的构建文件，清理 <code>target</code> 目录（这是 Maven 默认的输出目录）。清理操作确保新的构建不会受到上一次构建遗留文件的影响。</li><li><strong>package</strong>：这个阶段会根据项目的 <code>pom.xml</code> 文件中定义的构建配置，编译源代码、运行测试（如果有的话），然后将项目打包成一个可执行的格式，比如 JAR（Java Archive）或 WAR（Web Archive）文件。这个打包的文件会存放在 <code>target</code> 目录下。</li></ol><p>这个命令常用于 Java 项目的标准构建流程。如果项目配置了 Maven，执行该命令后生成的 JAR 或 WAR 文件就是最终要运行或部署的可执行文件。</p><p>但是这个命令非常慢！试情况我们可以跳过一些不必要的过程（参考<a href="https://stackoverflow.com/questions/21090915/the-maven-build-takes-too-long">The maven build takes too long</a>），在项目文件夹下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -DskipTests -T 1C -Dmaven.javadoc.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>将编译好的 WAR 文件部署到 Tomcat。通常，使用 Maven 构建后，WAR 文件会生成在 <code>target/</code> 目录下。将该文件复制到 Tomcat 的 <code>webapps/</code> 目录中。Tomcat 会自动解压和部署这个 WAR 文件。</p><p>部署成功后，打开浏览器，访问： <code>http://localhost:8080/your-project-name</code> .</p><h1 id="零碎操作"><a href="#零碎操作" class="headerlink" title="零碎操作"></a>零碎操作</h1><p>进入 mysql 命令行，建立 database ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 表名;</span><br></pre></td></tr></table></figure><p>导入数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p 表名 &lt; .sql文件路径</span><br></pre></td></tr></table></figure><p>按项目要求，修改密码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;你知道的太多了&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;接手了一个前后端不分离的学校项目，似乎历史悠久。&lt;/p&gt;
&lt;p&gt;以后一些关于 Java 的零碎笔记可能也会放在这里。&lt;/p&gt;
&lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h1</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://dropsong.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>工程数学</title>
    <link href="https://dropsong.github.io/posts/70707e46.html"/>
    <id>https://dropsong.github.io/posts/70707e46.html</id>
    <published>2024-11-24T14:15:15.000Z</published>
    <updated>2025-01-05T14:11:53.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="矩阵论"><a href="#矩阵论" class="headerlink" title="矩阵论"></a>矩阵论</h1><p>一些内容补充可以参考之前的线性代数笔记。</p><p>矩阵论（上）：</p><div class="row"><iframe src="https://drive.google.com/file/d/1_hr3beNETh4BuP_dC56z-CanZj7VSAom/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录</strong><br>矩阵及其基本运算  4<br>矩阵的特征值与特征向量  5<br>特征值估计（圆盘定理）  7<br>LU 分解（Doolittle 分解，Crout 分解…）  12<br>QR 分解  26<br>满秩分解  27<br>奇异值分解  31<br>线性空间的基、维数与坐标  35<br>过渡矩阵  40<br>子空间交与和（和空间、直和、补空间）  47<br>广义逆  58<br>赋范线性空间  77<br>柯西不等式  83<br>方阵空间上的范数  85<br>向量范数的诱导范数  91<br>赋范线性空间中的距离  97<br>对角占优  100<br>内积空间  102<br>内积空间的度量矩阵  109<br>正交多项式  117</p></blockquote><p>矩阵论（下）：</p><div class="row"><iframe src="https://drive.google.com/file/d/1oIzE19iDoQkOFjlJ6an3y-p6T1ESo2VF/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录</strong><br>线性变换及其运算  1<br>不变子空间  13<br>表示矩阵  14<br>λ 矩阵  28<br>Smith 标准型、不变因子  31<br>初等因子  33<br>k 阶行列式因子  35<br>Jordan 块  46<br>Jordan 标准形  47<br>凯莱-哈密顿定理  59<br>零化多项式、最小多项式  61<br>常系数线性微分方程组  73<br>矩阵的高次幂（Jordan标准型法） 76<br>矩阵函数的幂级数定义  77<br>利用若尔当标准型求矩阵函数  83<br>矩阵函数的一般定义与计算  85<br>一阶常系数微分方程组的初值问题  91<br>n 阶常系数线性微分方程  97</p></blockquote><h1 id="数值分析"><a href="#数值分析" class="headerlink" title="数值分析"></a>数值分析</h1><p>数值分析（上）：</p><div class="row"><iframe src="https://drive.google.com/file/d/1QWepbP1XJfODGaW721caKKg-BWE7-0XV/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录</strong><br>数值分析的研究对象和特点  1<br>误差的来源与分类（模型误差、观测误差、截断误差、舍入误差、有效数字） 5<br>减少误差的原则  17<br>数学问题的稳定性、病态良态  23<br>数值稳定性  29<br>迭代法的构造  36<br>迭代法的收敛性与收敛速度  42<br>事后估计、事前估计  48<br>平均收敛速度  51<br>渐近收敛速度  52<br>雅可比迭代公式  54<br>高斯-赛德尔公式  55<br>SOR 迭代法  60<br>迭代法的矩阵表示  62<br>非线性方程的数值解法  75<br>二分法  79<br>试位法  83<br>不动点迭代  88<br>迭代法的收敛性（利普希茨常数、…） 91<br>p 阶收敛  99<br>艾特金加速法  104<br>斯蒂芬森迭代法  106<br>牛顿（Newton）迭代法  114<br>牛顿迭代法的收敛性  119<br>牛顿迭代法的重根处理（…、弦截法）  123<br>解非线性方程组的迭代法  131<br>不动点迭代法  134<br>牛顿迭代法  138</p></blockquote><p>数值分析（下）：</p><div class="row"><iframe src="https://drive.google.com/file/d/1Z3MUTnMLpDMnZzWD0ws4wCCLyrDrFgSI/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录</strong><br><strong>第五章 数值逼近方法和数值微积分</strong><br>插值问题与插值多项式  4<br>插值余项与误差估计  11<br>线性插值与二次插值  17<br>拉格朗日插值  20<br>均差与牛顿插值公式  31<br>Runge 现象  50<br>埃尔米特插值  52<br>埃尔米特插值的拉格朗日型插值基函数法  54<br>牛顿型 Hermite 插值  60<br>连续函数的最佳平方逼近  66<br>===&gt; 问题的提法与求解  70<br>===&gt; 基于幂函数的最佳平方逼近  84<br>===&gt; 基于正交多项式的逼近函数类  88<br>===&gt; 五种重要的正交多项式  91<br>数值求积公式及代数精度  107<br>插值型求积公式  113<br>Newton-Cotes公式  116<br>复化求积公式  124<br>龙贝格求积法  134<br>高斯型求积公式（高斯-勒让德公式、高斯-切比雪夫求积公式 …） 148<br>数值微分  160<br>泰勒展开法求数值微分  162<br>用插值多项式函数求数值微分  167<br>将数值微分转化为求数值积分  175<br><strong>第六章  常微分方程的数值解法</strong><br>欧拉法  186<br>梯形法  193<br>预估校正法（改进欧拉法） 197<br>单步法的误差分析和稳定性<br>===&gt; 整体截断误差和局部截断误差  198<br>===&gt; 收敛性和整体截断误差  204<br>===&gt; 稳定性  207<br>龙格库塔方法  214<br>标准四阶 R-K 方法的绝对稳定区域  229<br>变步长的龙格—库塔方法  231<br>线性多步法  233<br>预估-校正算法  243<br>多环节的 Adams 预估－校正公式  246</p></blockquote><h1 id="运筹学"><a href="#运筹学" class="headerlink" title="运筹学"></a>运筹学</h1><div class="row"><iframe src="https://drive.google.com/file/d/1r_B4ce51ffYDzGTw7U0rSRbDE85G2XmS/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录</strong><br>线性规划问题及其数学模型  1<br>单纯形法原理  5<br>单纯形法计算步骤  12<br>单纯形法的进一步讨论（人工变量、两阶段） 16<br>线性规划的对偶问题  21<br>对偶问题的基本性质  26<br>===&gt; 单纯形法计算的矩阵描述  27<br>===&gt; 对偶问题的基本性质  29<br>影子价格  31<br>对偶单纯形法  33<br>灵敏度分析  36<br>非线性规划的基本概念  44<br>无约束极值问题  50<br>约束极值问题  56<br>===&gt; 最优性条件  56<br>===&gt; 制约函数法  73</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;矩阵论&quot;&gt;&lt;a href=&quot;#矩阵论&quot; class=&quot;headerlink&quot; title=&quot;矩阵论&quot;&gt;&lt;/a&gt;矩阵论&lt;/h1&gt;&lt;p&gt;一些内容补充可以参考之前的线性代数笔记。&lt;/p&gt;
&lt;p&gt;矩阵论（上）：&lt;/p&gt;


	&lt;div class=&quot;row&quot;&gt;
		&lt;if</summary>
      
    
    
    
    <category term="数学" scheme="https://dropsong.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="线性代数" scheme="https://dropsong.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
    <category term="矩阵论" scheme="https://dropsong.github.io/tags/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
    <category term="数值分析" scheme="https://dropsong.github.io/tags/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/"/>
    
    <category term="运筹学" scheme="https://dropsong.github.io/tags/%E8%BF%90%E7%AD%B9%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>工作笔记一</title>
    <link href="https://dropsong.github.io/posts/b9315374.html"/>
    <id>https://dropsong.github.io/posts/b9315374.html</id>
    <published>2024-11-10T14:22:04.000Z</published>
    <updated>2024-12-15T15:07:10.728Z</updated>
    
    <content type="html"><![CDATA[<p>os : windows11</p><p>一些外部链接如果不能访问，可以尝试去 archive.org 查看。</p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>参考： <a href="https://www.bilibili.com/video/BV14s4y1i7Vf">https://www.bilibili.com/video/BV14s4y1i7Vf</a></p><h2 id="简介、安装"><a href="#简介、安装" class="headerlink" title="简介、安装"></a>简介、安装</h2><p>问题：在实际生产中，应用程序的部署、环境配置过程往往非常复杂。</p><p>Docker 是一个用于 build, run, share 应用程序的平台。</p><p>Docker 和 虚拟机的区别：</p><p><img src="https://s2.loli.net/2024/11/10/8oENtB3Lbfj7g6d.png" alt="93-1.png"></p><p>基本原理和概念：</p><p><img src="https://s2.loli.net/2024/11/10/YVSoThfkgOptKDL.png" alt="93-2.png"></p><p>镜像就是一个模板，容器就是这个模板的一个实例（可以有一个，也可以有多个）。</p><p>镜像如何分享给别人呢？<strong>Docker 仓库</strong>是用来存储 docker 镜像的地方。最流行的仓库就是 <strong>Dockerhub</strong>，我们可以在这个平台下载各种镜像，也可以将自己的镜像上传，这样就可以实现镜像的共享和复用。</p><p>下载安装不提。</p><p>启动 docker, 在命令行中键入 <code>docker version</code>，可以看到输出了 Client 和 Server 下面的一堆信息。</p><p><strong>docker client 和 docker daemon 之间通过 Socket 或者 RESTful API 进行通信。</strong></p><p>Docker Daemon 是服务端的守护进程，负责管理 Docker 的各种资源。</p><h2 id="容器化、Dockerfile"><a href="#容器化、Dockerfile" class="headerlink" title="容器化、Dockerfile"></a>容器化、Dockerfile</h2><p>容器化（containerization），就是将应用程序打包成容器，然后在容器中运行应用程序的过程。</p><ul><li>创建一个 Dockerfile</li><li>使用 Dockerfile 构建镜像</li><li>使用镜像创建和运行容器</li></ul><p>Dockerfile 是一个文本文件，用来告诉 Docker 如何构建镜像。一个简单的示例：</p><p><img src="https://s2.loli.net/2024/11/10/6WNCzeTdjLmn4QZ.png" alt="93-3.png"></p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>mkdir HelloDocker, touch file <code>index.js</code> :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello Docker&quot;</span>)</span><br></pre></td></tr></table></figure><p>we can run this code with nodejs.</p><p>如果我们想要在另一个环境中运行这个应用程序，需要：</p><ol><li>安装操作系统</li><li>安装 JavaScript 运行环境（NodeJS）</li><li>复制应用程序、依赖包、配置文件</li><li>执行启动命令运行程序</li></ol><p><strong>有了 Docker 之后，就可以把这些步骤写到 Dockerfile 中。</strong> 剩下的工作交给 Docker 自动完成。</p><p>我们需要先指定一个基础镜像，镜像是按层次结构来构建的，每一层都是基于上一层。</p><p>touch file <code>HelloDocker/Dockerfile</code> :</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">14</span>-alpine</span><br></pre></td></tr></table></figure><p>14 表示 nodejs 的版本，<code>alpine</code> 表示这个镜像是基于 alpine 这个 Linux 发行版（一个非常轻量级的发行版）来构建的。</p><p>源路径：相对于 Dockerfile 文件的路径。<br>目标路径：相对于镜像的路径。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> index.js /index.js</span></span><br></pre></td></tr></table></figure><p>然后我们需要在镜像中运行应用程序：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;node&quot;</span>, <span class="string">&quot;/index.js&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>完成。完整的 Dockerfile 如下：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">14</span>-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> index.js /index.js</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;node&quot;</span>, <span class="string">&quot;/index.js&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>在 terminal 中键入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t hello-docker .</span><br></pre></td></tr></table></figure><p>如果一切顺利，镜像就构建完成了。</p><p>可以使用 <code>docker image ls</code> 查看所有的镜像。</p><p>运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-docker</span><br></pre></td></tr></table></figure><p>一些 docker 命令：</p><p><img src="https://s2.loli.net/2024/11/10/YIQk5exACP3cbU1.png" alt="93-4.png"></p><h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><p>前提：需要 Java 环境。</p><p>下载：<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p><p>解压，配置环境变量。</p><p>启动：在 bin 目录下 <code>.\elasticsearch.bat</code> ，若配置了环境变量，也可以直接 <code>elasticsearch</code> 。</p><p>访问 <a href="https://localhost:9200/">https://localhost:9200/</a> 。</p><p>若忘记密码，则需要重新配置密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS D:\elasticsearch\elasticsearch-8.15.3\bin&gt; elasticsearch-reset-password -u elastic</span><br><span class="line">warning: ignoring JAVA_HOME=C:\Program Files\Microsoft\jdk-17.0.9.8-hotspot\; using bundled JDK</span><br><span class="line">This tool will reset the password of the [elastic] user to an autogenerated value.</span><br><span class="line">The password will be printed in the console.</span><br><span class="line">Please confirm that you would like to continue [y/N]y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Password for the [elastic] user successfully reset.</span><br><span class="line">New value: (here will be your new password)</span><br></pre></td></tr></table></figure><p>注意，修改密码时，ElasticSearch 需要处于启动状态。</p><p>拓展资料：</p><ul><li><a href="https://www.bilibili.com/video/BV1yb421J7oX">Elastic Search是什么？Lucene是什么？架构是怎么样的？</a></li><li><a href="https://elastic.ac.cn/guide/en/elasticsearch/reference/current/starting-elasticsearch.html#_run_elasticsearch_from_the_command_line">启动 Elasticsearch</a></li></ul><div class="row"><iframe src="https://drive.google.com/file/d/1ZhyDc1snNy-ii3YAhTUTdaueMITLAMt1/preview" style="width:100%; height:550px"></iframe></div><h1 id="MinIO"><a href="#MinIO" class="headerlink" title="MinIO"></a>MinIO</h1><p>MinIO 是根据 GNU Affero 通用公共许可证 v3.0 发布的对象存储系统。它与 Amazon S3 云存储服务 API 兼容。它能够处理非结构化数据，例如照片、视频、日志文件、备份和容器映像，支持的最大对象大小为 50TB。</p><p>下载：<a href="https://min.io/download?license=agpl&amp;platform=windows#/windows">https://min.io/download?license=agpl&amp;platform=windows#/windows</a></p><p>注意不要下载到企业版本。</p><p>拓展资料：</p><ul><li><a href="https://cloud.google.com/learn/what-is-object-storage?hl=zh-CN">什么是对象存储？</a></li><li><a href="https://tonybai.com/2020/03/16/build-high-performance-object-storage-with-minio-part1-prototype/">使用minio搭建高性能对象存储-第一部分：原型</a></li><li><a href="https://blog.csdn.net/The_girl_wait_me/article/details/124605007">文件服务器MinIO的下载与安装</a></li></ul><h2 id="什么是对象存储"><a href="#什么是对象存储" class="headerlink" title="什么是对象存储"></a>什么是对象存储</h2><p>对象存储也称为基于对象的存储，是一种计算机数据存储架构，旨在处理大量非结构化数据。与其他架构不同，它将数据指定为不同的单元，并捆绑元数据和唯一标识符，用于查找和访问每个数据单元。</p><p>这些单元（或对象）可以存储在本地，但通常存储在云端，以便于从任何地方轻松访问数据。由于对象存储具有横向扩容能力，它的可伸缩性几乎没有限制，并且存储大量数据的成本也低于块存储等其他存储方法。</p><p>如今的许多数据都是非结构化的，无法很好地存储在传统数据库中，包括电子邮件、媒体和音频文件、网页、传感器数据和其他类型的数字内容。因此，寻找高效且经济实惠的方法来存储和管理这类数据成为了一个难点。越来越多的企业将对象存储作为存储静态内容、数据架构和备份的首选方法。</p><p><strong>对象存储的定义</strong> :</p><blockquote><p>对象存储是用于存储非结构化数据的数据存储架构，它将数据划分为单元（对象），并存储在结构扁平的数据环境中。每个对象都包含数据以及应用可用于轻松访问和检索对象的元数据和唯一标识符。</p></blockquote><h2 id="对象存储的工作原理"><a href="#对象存储的工作原理" class="headerlink" title="对象存储的工作原理"></a>对象存储的工作原理</h2><p>在对象存储中，一个文件的数据块被共同保存为一个对象，并连同其相关的元数据和自定义标识符放入被称为存储池的扁平数据环境中。</p><p>当您需要访问数据时，对象存储系统将使用唯一标识符和元数据来查找所需的对象，例如图片或音频文件。您还可以自定义元数据，从而添加可用于其他用途（例如用于数据分析的检索）的上下文。  </p><p>您可以使用 RESTful API、HTTP 和 HTTPS 查询对象元数据，以查找和访问对象。由于对象存储在全局存储池中，因此您可以快速轻松地找到所需的确切数据。此外，扁平环境使您能够快速扩容，即便是 PB 或 EB 级负载也毫不费力。存储池可以分布在多个对象存储设备和地理位置中，因此规模不受限制。随着数据量的增长，您只需向池中添加更多存储设备即可。</p><p>对象存储的优势（例如弹性和可伸缩性）使其成为管理云基础设施中非结构化数据的理想选择。那么，什么是云对象存储呢？顾名思义，也就是作为按需云服务提供的基于对象的存储。事实上，对于大多数大型云服务提供商而言，云对象存储是主要的存储格式。</p><h2 id="对象存储、文件存储、块存储"><a href="#对象存储、文件存储、块存储" class="headerlink" title="对象存储、文件存储、块存储"></a>对象存储、文件存储、块存储</h2><p>多年来，随着互联网的发展以及数据源和数据类型的不断丰富，全世界的数据存储需求也在不断演变。传统的文件存储和块存储并不能很好地处理产生的海量数据，尤其是天生不适合结构化数据存储方法的非结构化数据。 </p><p>那么，对象存储与文件存储和块存储有什么区别呢？</p><h3 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h3><p>文件存储将数据存储和整理到文件夹中，类似于您保存在办公室的纸质文件系统中的物理文件。如果您需要某个文件中的信息，则需要知道哪个房间、文件柜、抽屉和文件夹包含该特定文件。文件存储使用相同的分层存储结构，文件被命名，以元数据标记，然后放入文件夹中。</p><p>要找到某个数据，您需要知道查找该数据的正确路径。随着时间的推移，文件变得越来越多，搜索和检索数据文件可能会变得非常耗时。虽然可伸缩性较为有限，但通过这种方法可以很容易地存储几乎任何类型的少量数据，并且可供多个用户同时访问。</p><h3 id="块存储"><a href="#块存储" class="headerlink" title="块存储"></a>块存储</h3><p>块存储在文件存储的基础上提升了性能，它将文件拆分为多个单独的块并单独存储。块存储系统会为每个原始数据块分配一个唯一标识符，当您需要访问完整的文件时，系统将使用唯一标识符将数据块重组为完整的文件。块存储不需要单一的数据路径，因此您可以将其存储在最方便的位置，并且在需要时仍然能够快速检索。</p><p>块存储非常适合需要处理大量事务型数据或使用任务关键型应用的组织，可提供低延迟和一致的性能。但是，块存储费用高昂，不提供元数据功能，并且需要操作系统才能访问块。</p><h3 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h3><p>如前所述，对象存储将文件存储为扁平数据环境（即存储池）中的独立对象，对象包含全部数据、唯一标识符和详细元数据（元数据包含关于数据、权限、政策和其他应急情况的信息）。对象存储最适合非结构化数据的静态存储，您只写入一次数据，但可能需要多次读取。</p><p>虽然对象存储不需要目录、文件夹和其他复杂的分层结构，但却不适合用来存储不断变化的动态数据，因为修改对象需要重写整个对象。根据您的速度和性能要求，在某些情况下文件存储和块存储可能仍然适合您的需求。  </p><p>对象存储有哪些优势？</p><ul><li>高可伸缩性<ul><li>您可以轻松横向扩容对象存储的扁平架构，而不会受到文件存储或块存储那样的限制。对象存储基本没有大小限制，因此只需添加新设备，即可将数据扩大到 EB 级。</li></ul></li><li>降低复杂性<ul><li>对象存储没有文件夹或目录，也就不具有层次结构系统的大多数复杂性。由于没有复杂的树或分区，检索文件变得十分轻松，因为您不需要知道确切位置。</li></ul></li><li>易于搜索<ul><li>元数据是对象的一部分，使您无需借助单独的应用即可轻松搜索和导航。它也更加灵活，并且可以深度自定义。您可以使用各种属性和信息来为对象添加标记，例如用量、费用以及自动删除、保留和分层的政策。</li></ul></li><li>弹性<ul><li>对象存储可以自动复制数据并存储在多个设备和多个地理位置。这有助于防范服务中断和数据丢失，并可为灾难恢复策略提供支持。</li></ul></li><li>成本效益<ul><li>对象存储在设计时考虑了成本因素，与基于文件和块的系统相比，能够以更低的价格存储大量数据。使用对象存储时，您只为需要的容量付费，即使存储大量数据，也能很好地控制费用。</li></ul></li></ul><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><p><a href="https://developer.aliyun.com/article/1134566">https://developer.aliyun.com/article/1134566</a></p><p>启用管理插件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><p>访问管理界面： <code>http://localhost:15672</code> .</p><p>默认的用户名和密码是：</p><ul><li>用户名: guest</li><li>密码: guest</li></ul><p>默认的 RabbitMQ 服务端口通常是 5672（用于 AMQP 协议），而 15672 是管理界面的端口。</p><p>拓展资料：</p><ul><li><a href="https://kucw.io/blog/2020/11/rabbitmq/">RabbitMQ 介紹（二）- RabbitMQ 用法介紹</a></li><li><a href="https://developer.aliyun.com/article/1148418">Linux安装RabbitMq（图文解说详细版）</a></li><li><a href="https://developer.aliyun.com/article/1134566">RabbitMQ Windows 安装、配置、使用 - 小白教程</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;os : windows11&lt;/p&gt;
&lt;p&gt;一些外部链接如果不能访问，可以尝试去 archive.org 查看。&lt;/p&gt;
&lt;h1 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink&quot; title=&quot;Docker&quot;&gt;&lt;/a&gt;Dock</summary>
      
    
    
    
    <category term="转载" scheme="https://dropsong.github.io/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
    <category term="搜索引擎" scheme="https://dropsong.github.io/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    <category term="docker" scheme="https://dropsong.github.io/tags/docker/"/>
    
    <category term="ElasticSearch" scheme="https://dropsong.github.io/tags/ElasticSearch/"/>
    
    <category term="MinIO" scheme="https://dropsong.github.io/tags/MinIO/"/>
    
    <category term="RabbitMQ" scheme="https://dropsong.github.io/tags/RabbitMQ/"/>
    
    <category term="中间件" scheme="https://dropsong.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="对象存储" scheme="https://dropsong.github.io/tags/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>电网的分形层析成像</title>
    <link href="https://dropsong.github.io/posts/f33a0f8e.html"/>
    <id>https://dropsong.github.io/posts/f33a0f8e.html</id>
    <published>2024-11-04T04:29:37.000Z</published>
    <updated>2024-11-29T14:07:29.481Z</updated>
    
    <content type="html"><![CDATA[<p>Fractal Tomography for Power Grids 《电网的分形层析成像》</p><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>这本书引入了一种新的 <strong>分形断层扫描（Fractal Tomograph，FT）</strong> 概念来研究电网中的大、小扰动。书中发现了一种称为<strong>活动网络孪生（Active Network Twins，ANT）的数学表达式，其与人类DNA有着惊人的相似性</strong>。ANT构成了分析的主干。<strong>线路潮流和负荷电压是由ANT组成的，被称为构成断层扫描的分形</strong>。前三章讨论了这些新概念。一个显著的特点是，对断层扫描进行细微观察就足以检测到电网在过去、现在或未来的问题。<strong>基因编辑类似的方法</strong>在第四章中被解释用来控制潮流和电压。<strong>书中用假设的网络图示说明了美加地区令人费解的环流、印度的一次城市停电以及尼泊尔的断电情况，并且在第五章和第六章中简洁地确定了原因</strong>。频率交汇点及区块链方法应用于电力成本（第七章、第八章）是全新的视角。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>这部分介绍了分形理论的历史背景及其在电网中的应用。</p><p>豪斯多夫维数（Hausdorff Numbers）用于数学描述形状。尽管分形的数学形式已经非常丰富，但其与自然现象的物理依赖性仍然难以解释。引文中提到了“Get the physics right, rest is mathematics”（“抓住物理规律，其余只是数学”）的指导思想，作者<strong>以此为基础将分形应用于电网分析。</strong></p><p><strong>电网中的分形</strong>：</p><ul><li>传统的曼德布罗分形方法不考虑物理拓扑，而电网的MW（兆瓦）和电压模式与物理拓扑有直接关系。<strong>通过对电网中功率平衡和基尔霍夫定律的分析，可以得出电力和电压的分形表达式</strong>，这些分形<strong>可用于断层扫描分析（tomographic analysis）</strong>，帮助预测故障、控制异常和管理流量逆转等问题。</li><li>电网中的<strong>分形表达式始终保留了与生成它们的“种子”（即电力或电压）的联系</strong>，这与数值方法的区别在于后者会与原始数据脱节。</li></ul><h2 id="Active-Network-Twins"><a href="#Active-Network-Twins" class="headerlink" title="Active Network Twins"></a>Active Network Twins</h2><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>提出创新概念 <strong>主动网络双胞胎（ANT）</strong> ，用于电网中<strong>计算线流和电压</strong>。这一概念<strong>与人类DNA的作用相似</strong>，它决定了电网的性能和行为。该章的重点是介绍ANT的背景、定义、公式推导，以及其在电网中的实际应用。</p><p>作者指出，电力系统像人类身体一样，依赖于能量的流动和系统的稳定性。ANT像DNA一样，包含了电网的重要参数和拓扑结构信息，它可以用于描述电力系统中各种物理量（如电压、功率）的关系和演化。</p><p>电网的拓扑结构和参数通过<strong>Z矩阵</strong>（阻抗矩阵）来描述，负载被表示为阻抗。ANT则是这一结构中的一个核心元素，可以在不依赖复杂迭代方法的情况下，快速计算电网中的线流和电压。ANT的定义和作用类比于人类DNA中的基因，它记录了电网元件与发电机之间的关系。</p><h3 id="ANT与DNA的类比"><a href="#ANT与DNA的类比" class="headerlink" title="ANT与DNA的类比"></a>ANT与DNA的类比</h3><p>ANT与DNA的结构类似，具体表现为：</p><ul><li><strong>I²</strong>（电流平方）被视为电网的“基因”，而电网参数则相当于“核苷酸”。</li><li>ANT方程中的网络参数和电流平方一起定义了电网元件的电气特性。</li></ul><p><img src="https://bu.dusays.com/2024/11/04/67284f473fa54.png" alt="fig2_1.png"></p><p>图2.1展示了DNA与ANT的类比，DNA中的双螺旋结构对应于ANT中电流平方与网络参数的相互作用。</p><h3 id="相关公式"><a href="#相关公式" class="headerlink" title="相关公式"></a>相关公式</h3><p>ANT的推导基于电力系统的基本电路定律。以下是一些重要的公式：</p><ul><li><p>设Z-net是电网的阻抗矩阵，其中包含负载阻抗。对于一个元件 $ e $ ，其连接的节点为 $ m $ 和 $ n $，则该元件的电压可以表示为：</p><script type="math/tex; mode=display">v_{ei} = \xi_{ei} I_{ii}</script><p>其中，$ \xi_{ei} $ 是电网阻抗矩阵的相关元素，$ I_{ii} $ 是发电机的电流平方。</p></li><li><p>功率计算可以通过以下公式进行：</p><script type="math/tex; mode=display">p_{ei} + jq_{ei} = \left( \xi_{ei} \xi_{ei}^* y_e^* \right) I_{ii}^2</script><p>这里，ANT项为 $ \xi_{ei} \xi_{ei}^{*} y_{e}^{*} $ ，类似于DNA的双链。</p></li><li><p>进一步推导中，发电机的功率可以表示为：</p><script type="math/tex; mode=display">P_i + j Q_i = I_{ii}^2 (R_{ii} + jX_{ii})</script><p>其中，$ R_{ii} $ 和 $ X_{ii} $ 分别为阻抗矩阵的实部和虚部（即阻抗的实部和虚部）。由此，可以通过发电机功率计算出网络中各元件的电流平方和功率。</p></li></ul><p>为了简化计算，ANT引入了<strong>平方域</strong>的概念。传统电力系统分析使用的是基尔霍夫电流定律（KCL）下的线性域，而在ANT方法中，使用电流平方（I²）来表示电力系统中的功率流动。</p><ul><li><strong>I²域的好处</strong>：电流平方始终为正数，避免了交流电波形中电流的正负交替。在平方域内，非线性的电力系统变量转化为线性的SD变量（平方域电压和电流），简化了系统分析。</li></ul><p>在这一框架下，ANT可以像CT扫描一样，通过计算网络中的元件功率，分析系统中潜在的异常和问题。ANT在网络分析中的好处是，它可以预先计算，并且不需要复杂的迭代求解。</p><h3 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h3><p><img src="https://bu.dusays.com/2024/11/04/67284f4711b4c.png" alt="fig2_4.png"></p><p>图2.4展示了一个简化的电网系统，该系统由两个发电机组成，分别向两个不同的负载提供功率。通过ANT和平方域，可以轻松地计算出每个负载消耗的功率。</p><p>公式计算如下：</p><ul><li>$ Z = Z_{net} = \left[ \frac{40}{3} || 40 \right] = [10] $</li><li>电流平方 $ I_{11}^2 = \frac{100 \times 10^6}{10} = 10 \times 10^6 $</li><li><p>功率分布：</p><script type="math/tex; mode=display">\text{Power in } \frac{40}{3} \Omega = (ANT)_{40/3,1} \times I_{11}^2 + (ANT)_{40/3,2} \times I_{22}^2 = 225 \, \text{MW}</script><script type="math/tex; mode=display">\text{Power in } 40 \Omega = (ANT)_{40,1} \times I_{11}^2 + (ANT)_{40,2} \times I_{22}^2 = 75 \, \text{MW}</script></li></ul><h3 id="ANT的优势"><a href="#ANT的优势" class="headerlink" title="ANT的优势"></a>ANT的优势</h3><ul><li>ANT方法不依赖于传统的基尔霍夫电流定律（KCL），而是通过直接的功率计算来分析电网。</li><li><strong>无需迭代求解</strong>，可以快速响应电网的操作需求。</li><li>ANT能帮助电网操作员分析系统的运行状态，并提供线流、负载电压的诊断信息。</li></ul><h2 id="Fractals-and-Tomographs"><a href="#Fractals-and-Tomographs" class="headerlink" title="Fractals and Tomographs"></a>Fractals and Tomographs</h2><h3 id="概要-1"><a href="#概要-1" class="headerlink" title="概要"></a>概要</h3><p>介绍了分形在电力系统中的应用，尤其是<strong>如何通过分形断层图分析电网中的功率和电压模式</strong>。作者强调，通过将电力系统中的物理现象（如线流和电压）与分形图案相结合，可以深入理解电网的运行状况。</p><p>电网中的功率流动和电压变化是一种可测量的物理现象。通过将这些现象与分形数学结合，作者提出了<strong>分形断层图（fractal tomographs）</strong> 的概念。它<strong>类似于CT扫描图</strong>，可以帮助电网操作员诊断和监测电网中的异常行为。</p><h3 id="线流分形（Lineflow-Fractals）"><a href="#线流分形（Lineflow-Fractals）" class="headerlink" title="线流分形（Lineflow Fractals）"></a>线流分形（Lineflow Fractals）</h3><p>电网的拓扑结构可通过<strong>节点-元件矩阵（Node-Element Matrix）</strong> 来表示。该矩阵描述了网络中各个节点（如发电机和负载）之间的连接关系。对于一个简单的4节点、5元件系统，节点-元件矩阵可以通过以下方式定义：</p><ul><li>假设传输线元件连接节点1-3、2-3、1-4、2-4和3-4，且各节点带有负载阻抗，则可以构建一个节点-元件矩阵A，列表示元件，行表示节点。</li></ul><p>电压和功率的分形可以从该节点-元件矩阵推导出来。具体来说，通过计算分形系数，可以得到每个元件的线流和电压模式。</p><h3 id="电压分形（Voltage-Fractals）"><a href="#电压分形（Voltage-Fractals）" class="headerlink" title="电压分形（Voltage Fractals）"></a>电压分形（Voltage Fractals）</h3><p><strong>电压分形描述了电力系统中电压的分布模式，尤其是负载节点的电压分布。</strong> 通过计算电压分形，可以预测电网中的低电压区域，帮助操作员采取适当的措施避免过载或电压崩溃。</p><p>电压分形是线流分形的延伸。通过将各节点的电压模式与网络的拓扑结构结合，生成断层图，展示电网中电压的分布情况。</p><h3 id="负载分形（Load-Fractals）"><a href="#负载分形（Load-Fractals）" class="headerlink" title="负载分形（Load Fractals）"></a>负载分形（Load Fractals）</h3><p>负载分形描述了负载节点的功率消耗模式。电网中的负载往往分布不均匀，不同节点的功率消耗受到网络中其他节点的影响。通过负载分形，可以分析各负载节点的功率需求，预测潜在的负荷问题。</p><p><img src="https://bu.dusays.com/2024/11/04/67284f471589c.png" alt="fig3_2.png"></p><p>例如，图3.2展示了一个三节点系统，其中每个节点连接到负载和发电机。通过计算负载分形，可以得出各节点消耗的功率，并评估网络中的功率平衡情况。</p><h3 id="相关公式-1"><a href="#相关公式-1" class="headerlink" title="相关公式"></a>相关公式</h3><p>在电网分析中，分形通过数学公式推导出来。以下是一些重要的公式：</p><ul><li><p><strong>线流分形公式</strong>：电网中任意元件的线流可以表示为：</p><script type="math/tex; mode=display">p_{ei} + jq_{ei} = \left( \xi_{ei} \xi_{ei}^* y_e^* \right) I_{ii}^2</script><p>其中，$ \xi_{ei} $ 是电网的阻抗矩阵元素，$ I_{ii}^2 $ 是发电机的电流平方，$ p_{ei} $ 和 $ q_{ei} $ 分别为元件的有功功率和无功功率。</p></li><li><p><strong>电压分形公式</strong>：电压分形表示电网中节点电压的分布模式。对于某个元件，其电压可以表示为：</p><script type="math/tex; mode=display">v_{ei} = \xi_{ei} I_{ii}</script><p>其中，$ v_{ei} $ 是元件的电压，$ \xi_{ei} $ 是网络中的分形系数，$ I_{ii} $ 是发电机的电流。</p></li><li><p><strong>负载分形公式</strong>：负载分形描述了负载节点的功率消耗模式。总的负载功率可以通过以下公式计算：</p><script type="math/tex; mode=display">P_{\text{load}} = \sum_{i=1}^{n} \text{fractal power of load}_i</script><p>该公式说明，负载节点的功率是所有发电机分形功率的总和。</p></li></ul><h3 id="分形断层图（Fractal-Tomographs）作用"><a href="#分形断层图（Fractal-Tomographs）作用" class="headerlink" title="分形断层图（Fractal Tomographs）作用"></a>分形断层图（Fractal Tomographs）作用</h3><p>分形断层图的关键在于它可以像医学中的CT扫描一样，<strong>识别电网中的异常情况</strong>。通过分形断层图，操作员可以识别电网中的高线流区域、低电压区、功率流反转等问题，并采取适当的修正措施。</p><p><img src="https://bu.dusays.com/2024/11/04/67284f474d44a.png" alt="fig3_5.png"></p><p>图3.5展示了一个元件的分形断层图，外圈代表发电机的功率，内圈代表元件的阻抗和负载。通过分形断层图，可以将电网中的每个发电机与负载之间的关系具体化，便于操作员识别问题。</p><p>分形断层图的优点：</p><ul><li><strong>非迭代计算</strong>：分形断层图不需要迭代计算，可以快速得出电网的状态。</li><li><strong>前向和后向计算</strong>：操作员可以通过分形断层图进行前向计算（预测未来的电网状态）或后向计算（分析过去的黑启动或故障）。</li><li><strong>简化复杂系统</strong>：分形断层图将复杂的电网分析问题简化为多个分形计算，使得系统的可操作性大大提高。</li></ul><h2 id="Editing"><a href="#Editing" class="headerlink" title="Editing"></a>Editing</h2><h3 id="概要-2"><a href="#概要-2" class="headerlink" title="概要"></a>概要</h3><p>第4章 <strong>Editing（编辑）</strong> 介绍了如何通过分形断层图（Fractal Tomographs）<strong>对电网进行修正</strong>，以提高其运行效率，预防故障或解决问题。作者提出了一种<strong>编辑分形的概念，类似于基因编辑</strong>，目的是通过对分形的修改来影响电网的整体行为，进而优化其性能。</p><h3 id="39节点新英格兰系统的实例"><a href="#39节点新英格兰系统的实例" class="headerlink" title="39节点新英格兰系统的实例"></a>39节点新英格兰系统的实例</h3><p>为了展示分形编辑的应用，作者以<strong>39节点的新英格兰电网系统</strong>为例。该系统包含39个节点和多个发电机，电网操作员可以通过分形断层图分析系统中的各个线流和电压。以下是该系统的关键要素：</p><ul><li><strong>网络结构</strong>：包含发电机、传输线和负载节点，系统拓扑结构通过节点-元件矩阵表示。</li><li><strong>功率流动</strong>：各个发电机的功率通过传输线输送到负载，各条传输线上的线流由发电机的分形贡献决定。</li></ul><h3 id="分形编辑的关键步骤"><a href="#分形编辑的关键步骤" class="headerlink" title="分形编辑的关键步骤"></a>分形编辑的关键步骤</h3><p>分形编辑的过程包括以下几个步骤：</p><ol><li><p><strong>构建分形断层图</strong>：<br>使用网络的拓扑结构和发电机的功率，计算出各个元件的分形断层图。这些断层图包含了电网中的线流分形和电压分形。</p></li><li><p><strong>分析异常情况</strong>：<br>通过分形断层图，识别电网中的异常情况，比如某条传输线的线流过大、某个节点的电压过高或功率反向流动等。这些问题会导致系统不稳定。</p></li><li><p><strong>编辑分形</strong>：<br>根据异常情况，调整相关元件的分形。类似于基因编辑，通过修改分形，可以影响电网的功率流动和电压分布。例如，减少某个发电机的分形贡献，或者重新分配功率负荷，都是常见的编辑操作。</p></li><li><p><strong>重新计算线流和电压</strong>：<br>编辑完成后，重新计算整个系统的线流和电压，确保系统回到正常运行状态。此过程不需要迭代，可以通过一次性计算完成。</p></li></ol><h2 id="Power-Reversals-and-Loop-Flows"><a href="#Power-Reversals-and-Loop-Flows" class="headerlink" title="Power Reversals and Loop Flows"></a>Power Reversals and Loop Flows</h2><h3 id="概要-3"><a href="#概要-3" class="headerlink" title="概要"></a>概要</h3><p>第5章 Power Reversals and Loop Flows（功率反转与环流）探讨了<strong>电网中功率反转与环流的问题</strong>，分析了这些现象如何影响电网的稳定性与安全性，并<strong>通过分形断层图提供解决方案</strong>。</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li><strong>功率反转（Power Reversals）</strong> 是指电力在传输线上反向流动的现象，即电力从负载端回流到发电端。功率反转会导致传输线的实际功率流与预期方向相反，这可能导致线路过载、设备损坏，甚至引发更大范围的系统故障。</li><li><strong>环流（Loop Flows）</strong> 是指电力在电网中的环路中循环流动，而不是按照预定路径输送到负载。这些环流可能是由电网中某些区域的电力过剩或不足引起的，常见于电力市场环境下的不同电力供应商之间的互联。</li></ul><p>这些现象不仅对电网的运行效率产生负面影响，还可能造成<strong>传输线的拥塞，导致局部地区电力不足或过载</strong>。作者通过数学建模和分形断层图分析，提出了检测和解决这些问题的方法。</p><p><img src="https://bu.dusays.com/2024/11/04/67284f48f2934.png" alt="fig5_1.png"></p><p>图5.1展示了<strong>美国和加拿大的地理电网布局</strong>，其中五大湖区的湖边环流问题尤为严重。功率流在不同的区域间来回流动，甚至可能导致不稳定的电压和频率波动。</p><h3 id="线流断层图的公式"><a href="#线流断层图的公式" class="headerlink" title="线流断层图的公式"></a>线流断层图的公式</h3><p><strong>线流计算公式</strong>：在线流断层图中，每条传输线的功率可以表示为多个发电机的分形贡献之和：</p><script type="math/tex; mode=display">p_e = \sum_{i=1}^{n} \text{Fractal Power of Generator } i \text{ on line } e</script><p>如果某条线出现功率反转，则可以通过减小相关发电机的分形贡献来解决问题。</p><p><strong>反向功率的公式推导</strong>：功率反转发生时，可以表示为：</p><script type="math/tex; mode=display">P_{\text{reversal}} = -P_{\text{expected}}</script><p>当线路功率反转时，传输方向与预期相反，因此需要调整发电机的输出或修改网络拓扑结构，以防止系统过载。</p><h3 id="环流与相角调节器（Phase-Angle-Regulator-PAR）的解决方案"><a href="#环流与相角调节器（Phase-Angle-Regulator-PAR）的解决方案" class="headerlink" title="环流与相角调节器（Phase-Angle Regulator, PAR）的解决方案"></a>环流与相角调节器（Phase-Angle Regulator, PAR）的解决方案</h3><p>环流问题通常发生在电力市场的自由交易过程中，由于不同区域的发电量和负荷分布不均，导致电力无法按预期路径传输。为了解决这一问题，作者提出了使用 <strong>相角调节器（PAR）</strong> 来控制环流。相角调节器通过调整传输线路的相位角，改变功率流动的方向，从而防止电力在环路中循环。</p><p><img src="https://bu.dusays.com/2024/11/04/67284f4b7fa14.png" alt="fig5_7.png"></p><p>图5.7展示了环流、功率反转与拥塞的关系，通过合理使用相角调节器，可以有效减少传输线的拥塞，平衡系统中的功率流动。</p><h3 id="环流的检测与控制"><a href="#环流的检测与控制" class="headerlink" title="环流的检测与控制"></a>环流的检测与控制</h3><p><strong>环流的检测可以通过分形断层图进行。</strong> 分形断层图为电网操作员提供了电力在不同路径上的流动信息，并帮助他们快速识别功率反转或环流问题。通过分形分析，操作员可以提前发现问题并采取相应措施。</p><p><strong>分形断层图的构建过程</strong>：</p><ol><li><strong>构建电网拓扑结构</strong>：使用节点-元件矩阵表示电网的连接情况。</li><li><strong>计算分形贡献</strong>：通过发电机的功率贡献计算各个传输线的分形功率。</li><li><strong>分析功率流动</strong>：通过分形断层图识别功率反转和环流区域，并计算各个元件的功率流动。</li></ol><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>作者通过一个实际案例分析了美国-加拿大电网中的一次环流现象。在2003年发生的北美大停电事件中，功率反转和环流是导致大规模停电的主要原因之一。通过分形断层图的分析，作者指出了电网操作员在检测和处理环流时存在的挑战，并展示了如何通过分形编辑来解决这些问题。</p><p>环流与功率反转的影响：</p><ul><li><strong>系统稳定性</strong>：环流和功率反转会导致传输线过载，甚至引发整个系统的不稳定性。</li><li><strong>资源分配效率低下</strong>：由于电力在不必要的环路中循环，导致资源的浪费，电网的运行效率大大降低。</li><li><strong>市场运作的复杂性</strong>：在电力市场中，环流和功率反转会使得电价波动更加剧烈，并可能导致区域之间的电力交易冲突。</li></ul><h2 id="Blackouts"><a href="#Blackouts" class="headerlink" title="Blackouts"></a>Blackouts</h2><h3 id="概要-4"><a href="#概要-4" class="headerlink" title="概要"></a>概要</h3><p>第6章 Blackouts（停电）主要讨论了电网中的<strong>大规模停电事件，分析了其原因、影响及预防措施</strong>。通过分形断层图的应用，作者提出了一种<strong>创新的停电分析方法</strong>，能够帮助操作员更好地理解停电的演变过程，并在停电发生前及时采取措施。该章包括若干重要停电事件的案例分析，如印度孟买网络和2003年美国-加拿大大停电。</p><h3 id="孟买网络的案例分析"><a href="#孟买网络的案例分析" class="headerlink" title="孟买网络的案例分析"></a>孟买网络的案例分析</h3><p>作者首先分析了<strong>孟买网络</strong>中的一次停电事件。孟买的电力网络复杂，负载密集，因此对传输线的要求非常高。通过分形断层图，作者识别出该网络中多个节点的电压过低和线流过载，这些异常现象会导致停电的发生。</p><ul><li><strong>电压断层图</strong>：分形断层图可以实时监控电压的变化，低电压区域表示负载压力较大，操作员可以通过编辑分形来增加该区域的电压供应。</li><li><strong>线流断层图</strong>：线流过载是导致停电的直接原因。通过断层图，可以识别出哪些传输线已经接近其容量极限，并通过功率重新分配来减少负载。</li></ul><h3 id="2003年美国-加拿大大停电的案例分析"><a href="#2003年美国-加拿大大停电的案例分析" class="headerlink" title="2003年美国-加拿大大停电的案例分析"></a>2003年美国-加拿大大停电的案例分析</h3><p>通过分形断层图，作者分析了这次停电的演变过程。停电的主要原因是俄亥俄州的一条传输线失效，随后连锁反应导致多个发电机失效，功率分配失衡，最终导致整个系统崩溃。</p><p>作者通过构建电压和线流断层图，<strong>展示了功率流动是如何从一个区域扩展到其他区域的</strong>，最终导致整个系统的频率失控和黑启动。</p><h2 id="Frequency-Rendezvous"><a href="#Frequency-Rendezvous" class="headerlink" title="Frequency Rendezvous"></a>Frequency Rendezvous</h2><h3 id="概要-5"><a href="#概要-5" class="headerlink" title="概要"></a>概要</h3><p>第7章 Frequency Rendezvous（频率会合）介绍了<strong>电力系统中频率协调和同步的问题</strong>，并提出了一种<strong>基于分形分析的频率会合动态模型</strong>。频率会合是指在电力系统发生扰动时，多个发电机的频率通过动态调整，最终达到一致。该章讨论了频率会合的基本概念、数学模型以及通过分形断层图分析频率会合的应用。</p><h3 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h3><p>在电力系统中，<strong>发电机的频率稳定性是系统可靠运行的关键。</strong> 当系统受到扰动时，发电机之间的频率会发生变化。如果频率不能尽快恢复一致，系统可能会出现频率失稳，甚至导致大范围的电力崩溃。因此，理解和控制频率会合过程对于电网的稳定性至关重要。</p><p><strong>当发电机频率不一致时，系统内部会产生频率振荡，导致功率波动</strong>。通过分形断层图，作者能够分析和预测这些频率波动，并提出调整策略，使各个发电机的频率趋向一致。</p><h3 id="频率会合的动态模型"><a href="#频率会合的动态模型" class="headerlink" title="频率会合的动态模型"></a>频率会合的动态模型</h3><p>频率会合的过程可以通过动态模型来描述。作者提出了一个新的频率会合公式，用于计算发电机频率的变化过程。该公式考虑了发电机的特征频率、负载和系统阻抗之间的关系。</p><ul><li><strong>频率会合公式</strong>：<script type="math/tex; mode=display">\omega_s = \sum_{i=1}^{n} k_i \omega_i</script></li></ul><p>其中，$ \omega_s $ 是系统的会合频率，$ \omega_i $ 是第 $i$ 台发电机的频率，$ k_i $ 是频率分形系数，用于表示各个发电机对系统会合频率的贡献。</p><p>会合频率是多个发电机频率的加权平均值，权重由发电机的分形系数决定。通过调整各个发电机的输出功率，系统可以逐渐达到频率同步。</p><h3 id="频率会合的物理含义"><a href="#频率会合的物理含义" class="headerlink" title="频率会合的物理含义"></a>频率会合的物理含义</h3><ul><li><p><strong>频率动态</strong>：当电网受到扰动时，发电机的频率会发生变化。为了保持系统稳定，发电机需要通过频率调整实现同步。频率会合是系统趋向稳定的过程，类似于多个发电机寻找共同的频率“目标”。</p></li><li><p><strong>系统阻抗的影响</strong>：频率不仅受到发电机特征的影响，还与系统的阻抗有关。随着频率的变化，系统的阻抗也会发生动态调整。这种动态阻抗会对频率会合产生反馈作用，影响会合速度和效果。</p></li></ul><h3 id="分形断层图在频率会合中的应用"><a href="#分形断层图在频率会合中的应用" class="headerlink" title="分形断层图在频率会合中的应用"></a>分形断层图在频率会合中的应用</h3><p>通过分形断层图，操作员可以实时监测各个发电机的频率变化，并预测系统的会合频率。分形断层图提供了发电机频率变化的可视化信息，帮助操作员更好地理解频率动态。</p><p><strong>分形断层图的构建步骤</strong>：</p><ol><li><strong>构建系统拓扑结构</strong>：通过节点-元件矩阵描述系统的电气连接。</li><li><strong>计算分形系数</strong>：根据各个发电机的特征频率和系统阻抗，计算频率会合的分形系数。</li><li><strong>分析频率会合</strong>：使用分形断层图监控系统的频率会合动态，预测系统达到稳定频率的时间和过程。</li></ol><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>作者通过实例展示了频率会合的过程及其对系统稳定性的影响。</p><p><img src="https://bu.dusays.com/2024/11/04/67284f496dcad.png" alt="fig7_2.png"></p><p>图7.2展示了一个简单的电力系统模型，其中多个发电机在发生扰动后逐渐达到频率会合。通过频率会合公式和分形断层图，作者展示了如何计算各个发电机的频率变化，并分析会合过程中的功率流动。</p><h3 id="频率会合对电网的影响"><a href="#频率会合对电网的影响" class="headerlink" title="频率会合对电网的影响"></a>频率会合对电网的影响</h3><ul><li><strong>系统稳定性</strong>：频率会合是电网稳定性的关键因素之一。通过协调发电机的频率，系统可以避免因频率失调而导致的功率波动和设备损坏。</li><li><strong>频率振荡</strong>：如果频率会合过程较慢或不顺利，系统可能会产生频率振荡，导致功率流动不稳定。通过分形断层图，操作员可以提前预测频率振荡，并采取措施减轻其影响。</li><li><strong>预防黑启动</strong>：频率会合对于黑启动后的系统恢复非常重要。通过频率会合，系统可以逐渐恢复正常运行，避免在恢复过程中出现频率失控的问题。</li></ul><h2 id="MW-Blockchain"><a href="#MW-Blockchain" class="headerlink" title="MW-Blockchain"></a>MW-Blockchain</h2><h3 id="概要-6"><a href="#概要-6" class="headerlink" title="概要"></a>概要</h3><p>第8章 MW-Blockchain（MW区块链）介绍了一个全新的概念，<strong>将区块链技术应用于电网中的兆瓦（MW）交易管理</strong>。作者提出通过区块链技术跟踪电网中各个发电机和负载之间的功率交易，以实现<strong>更透明、公正的电力市场结算系统</strong>。这一章深入探讨了如何在电力系统中应用区块链来管理功率流动和电力成本。</p><p>传统电力市场中，电价的确定和功率流动的跟踪通常依赖于中央调度系统，可能导致信息不对称、透明度不足的问题。通过区块链，电力系统中的所有交易都可以公开记录，确保每个发电机和负载都能公平参与市场，减少电价争议。</p><h3 id="区块链在电力系统中的应用"><a href="#区块链在电力系统中的应用" class="headerlink" title="区块链在电力系统中的应用"></a>区块链在电力系统中的应用</h3><p>作者提出了<strong>MW区块链</strong>的概念，旨在通过区块链技术跟踪电网中的每一兆瓦电力流动。具体应用场景包括：</p><ul><li><strong>电力交易记录</strong>：通过区块链记录每一笔功率流动（发电机向负载的电力传输），确保每次交易的准确性和可追溯性。</li><li><strong>电力定价透明</strong>：区块链提供了一个透明的市场平台，所有参与者都能看到每个发电机的输出功率和每个负载的需求情况，从而确保电价的公正性。</li><li><strong>收入分配</strong>：根据区块链上记录的功率流动数据，系统可以准确计算每个发电机应获得的收入，并确保收入分配过程的透明和公平。</li></ul><h3 id="区块链的基本结构"><a href="#区块链的基本结构" class="headerlink" title="区块链的基本结构"></a>区块链的基本结构</h3><p>在MW区块链中，每个区块记录了以下关键信息：</p><ol><li><strong>发电机的功率输出</strong>：每个发电机的功率输出通过区块链记录，确保电力交易的透明性。</li><li><strong>传输线的功率流动</strong>：电力在传输线上的流动也被记录，提供了一个完整的电力流动图。</li><li><strong>负载的功率消耗</strong>：记录每个负载节点的功率消耗，以确保电力供应和需求的平衡。</li><li><strong>时间戳</strong>：每一笔功率交易都带有时间戳，确保功率流动的时间序列清晰可见。</li></ol><h3 id="相关公式-2"><a href="#相关公式-2" class="headerlink" title="相关公式"></a>相关公式</h3><p>MW区块链的核心在于功率流动的精确计算。通过分形断层图和区块链结合，电力交易中的功率流动可以通过以下公式描述：</p><ul><li><p><strong>功率流动公式</strong>：</p><script type="math/tex; mode=display">P_{\text{flow}} = \sum_{i=1}^{n} P_{\text{gen}, i} - \sum_{j=1}^{m} P_{\text{load}, j}</script><p>该公式表示电网中各发电机和负载之间的功率流动，区块链可以记录并实时更新这些数据。</p></li><li><p><strong>电价计算公式</strong>：</p><script type="math/tex; mode=display">C_{\text{MW}} = \frac{P_{\text{flow}}}{\text{Cost of Power Generation per MW}}</script><p>电价基于每兆瓦功率的生成成本进行计算，通过区块链记录和验证每一笔交易，确保定价的透明性。</p></li><li><p><strong>收入分配公式</strong>：</p><script type="math/tex; mode=display">\text{Revenue}_{\text{gen}, i} = P_{\text{gen}, i} \times C_{\text{MW}}</script><p>每个发电机的收入由其输出功率乘以每兆瓦电力的市场定价计算得出。</p></li></ul><h3 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析"></a>案例分析</h3><p>作者通过一个简单的六节点电网实例，展示了如何使用区块链技术来跟踪和管理电网中的功率流动。</p><p><img src="https://bu.dusays.com/2024/11/04/67284f499c85a.png" alt="fig8_1.png"></p><p><strong>实例1</strong>：图8.1展示了一个小型电网，其中有多个发电机和负载。通过区块链技术，系统可以准确记录每个发电机的功率输出和负载的功率消耗，并根据功率流动计算每个发电机应获得的收入。</p><p><img src="https://bu.dusays.com/2024/11/04/67284f4a98509.png" alt="fig8_2.png"></p><p><strong>实例2</strong>：作者进一步分析了一个六节点系统（图8.2），通过区块链记录各个传输线上的功率流动，计算各个发电机和负载的交易成本和电价。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Fractal Tomography for Power Grids 《电网的分形层析成像》&lt;/p&gt;
&lt;h2 id=&quot;总览&quot;&gt;&lt;a href=&quot;#总览&quot; class=&quot;headerlink&quot; title=&quot;总览&quot;&gt;&lt;/a&gt;总览&lt;/h2&gt;&lt;p&gt;这本书引入了一种新的 &lt;stro</summary>
      
    
    
    
    <category term="杂项" scheme="https://dropsong.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="阅读报告" scheme="https://dropsong.github.io/tags/%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>DRF Note</title>
    <link href="https://dropsong.github.io/posts/2ab4a7a3.html"/>
    <id>https://dropsong.github.io/posts/2ab4a7a3.html</id>
    <published>2024-10-31T13:13:48.000Z</published>
    <updated>2024-12-01T14:32:05.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h2 id="前后端不分离"><a href="#前后端不分离" class="headerlink" title="前后端不分离"></a>前后端不分离</h2><p>在前后端不分离的应用模式中，前端页面看到的效果都是由后端控制，由后端渲染页面或重定向，也就是后端需要控制前端的展示，<strong>前端与后端的耦合度很高</strong>。</p><p>这种应用模式比较适合纯网页应用，但是当后端对接 App 时， App 可能并不需要后端返回一个 HTML 网页，而仅仅是数据本身，所以后端原本返回网页的接口不适用于前端 App 应用，为了对接 App 后端还需再开发一套接口。</p><p><img src="https://s2.loli.net/2024/10/31/8UXlbRckEPfj431.png" alt="91-1.png"></p><h2 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h2><p>在前后端分离的应用模式中，<strong>后端仅返回前端所需的数据，不再渲染 HTML 页面，不再控制前端的效果</strong>。至于前端用户看到什么效果，从后端请求的数据如何加载到前端中，都由前端自己决定，网页有网页的处理方式， App 有 App 的处理方式，但无论哪种前端，所需的数据基本相同，后端仅需开发一套逻辑对外提供数据即可。</p><p><img src="https://s2.loli.net/2024/10/31/XSgUJVkBMQlnvHF.png" alt="91-2.png"></p><h1 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>RESTful 是一种软件架构风格、<strong>设计风格</strong>，而不是标准，只是提供了一组设计原则和约束条件。</p><p>REST 全称是 Representational State Transfer，中文意思是<strong>表征状态转移</strong>。如果一个架构符合 REST 的约束条件和原则，我们就称它为 RESTful 架构。一个简单的点是，相比我们之前编写的 Django 代码，符合 REST 约束的会<strong>更规范地设计 url</strong> .</p><p>理论上 REST 架构风格并不是绑定在 HTTP 上，只不过目前 HTTP 是唯一与 REST 相关的实例。 所以我们这里描述的 REST 也是通过 HTTP 实现的 REST。</p><p><strong>RESTful 的核心操作：URL 定位资源，用 HTTP 动词（GET,POST,PUT,DELETE）描述操作。</strong></p><p>相关文章：<br><a href="https://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html">https://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html</a></p><p>错误示范：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/getAllCars</span><br><span class="line">/createNewCar</span><br><span class="line">/deleteAllRedCars</span><br></pre></td></tr></table></figure><p>应该改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET     /Cars</span><br><span class="line">POST    /Cars</span><br><span class="line">PUT     /Cars/2   # 这个2仅是示例</span><br><span class="line">DELETE  /Cars?color=Red</span><br></pre></td></tr></table></figure><p>这种设计极大地减少了 urls 的数量。对于某一个资源的操作，它们的 url 是相同的。<strong>每一个资源，对应到后端，就是一个模型类。</strong></p><h2 id="安装-DRF"><a href="#安装-DRF" class="headerlink" title="安装 DRF"></a>安装 DRF</h2><p>DRF 官网： <a href="https://www.django-rest-framework.org/">https://www.django-rest-framework.org/</a></p><p>我这里装在了虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework</span><br><span class="line">pip install markdown       <span class="comment"># Markdown support for the browsable API.</span></span><br><span class="line">pip install django-filter  <span class="comment"># Filtering support</span></span><br></pre></td></tr></table></figure><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>创建一个 Django 项目 day1031, 创建应用 books.</p><p>在 <code>./day1031/settings.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>      <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果想使用基于浏览器的可视化的 API 目录，并且希望获得一个登录登出功能，那么可以在根路由下添加下面的路由，这个功能类似 Django 自带的 admin 后台：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./day1031/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include <span class="comment"># add</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>)) <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>迁移。runserver.</p><p>现在就可以访问 <a href="http://127.0.0.1:8000/api-auth/login/">http://127.0.0.1:8000/api-auth/login/</a> 了。</p><p>新增 <code>./books/urls.py</code> 。</p><p>在 <code>./day1031/urls.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;api/&#x27;</span>, include(<span class="string">&#x27;books.urls&#x27;</span>)),</span><br></pre></td></tr></table></figure><p>这么做的目的是，访问自己的应用时有一个前缀。其实也可以不这么做，这里只是教学演示。</p><p>在 <code>./books/models.py</code> 中增加下面内容：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义图书模型类 BookInfo</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    <span class="comment"># verbose_name 用于在后台管理中，不显示 “btitle”，而是“图书标题”</span></span><br><span class="line">    btitle = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">&#x27;图书标题&#x27;</span>)</span><br><span class="line">    bpub_date = models.DateField(verbose_name=<span class="string">&#x27;出版时间&#x27;</span>)</span><br><span class="line">    bread = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;阅读量&#x27;</span>)</span><br><span class="line">    bcomment = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;评论量&#x27;</span>)</span><br><span class="line">    is_delete = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">&#x27;逻辑删除&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_books&#x27;</span> <span class="comment"># 指明数据库表名，写不写都行</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;图书&#x27;</span>  <span class="comment"># 在admin站点中显示的名称</span></span><br><span class="line">        verbose_name_plural = verbose_name <span class="comment"># 显示的复数名称</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;定义每个数据对象的显示信息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;图书:《&quot;</span>+self.btitle+<span class="string">&quot;》&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义英雄模型类HeroInfo</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroInfo</span>(models.Model):</span><br><span class="line">    GENDER_CHOICES = (</span><br><span class="line">        (<span class="number">0</span>, <span class="string">&#x27;female&#x27;</span>),</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    hname = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">&#x27;名称&#x27;</span>)</span><br><span class="line">    hgender = models.SmallIntegerField(choices=GENDER_CHOICES, default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;性别&#x27;</span>)</span><br><span class="line">    hcomment = models.CharField(max_length=<span class="number">200</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;描述信息&#x27;</span>)</span><br><span class="line">    hbook = models.ForeignKey(BookInfo, on_delete=models.CASCADE, verbose_name=<span class="string">&#x27;图书&#x27;</span>) <span class="comment">#外键</span></span><br><span class="line">    is_delete = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">&#x27;逻辑删除&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_heros&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;英雄&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.hname</span><br></pre></td></tr></table></figure><p>新增 <code>./books/serializers.py</code> ：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> books.models <span class="keyword">import</span> BookInfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;专门用于对图书进行进行序列化和反序列化的类: 序列化器类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        <span class="comment"># 当前序列化器在序列化数据的时候,使用哪个模型</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        <span class="comment"># fields = [&quot;id&quot;,&quot;btitle&quot;] # 多个字段可以使用列表声明,如果是所有字段都要转换,则使用 &#x27;__all__&#x27;</span></span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span> <span class="comment"># 多个字段可以使用列表声明,如果是所有字段都要转换,则使用 &#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure><p>上面的代码之后解释。</p><p>在 <code>./books/urls.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="comment"># 之前导入的是函数视图，现在改为类视图，参见：</span></span><br><span class="line"><span class="comment"># https://github.com/dropsong/py_webServer/blob/master/day1010/booktest/urls.py</span></span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> BookInfoAPIView</span><br><span class="line"></span><br><span class="line">urlpatterns = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建路由对象</span></span><br><span class="line">routers = DefaultRouter()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过路由对象对视图类进行路由生成</span></span><br><span class="line"><span class="comment"># 通过 restful 设计，注册类视图</span></span><br><span class="line">routers.register(<span class="string">&quot;books&quot;</span>,BookInfoAPIView) </span><br><span class="line"></span><br><span class="line">urlpatterns+=routers.urls</span><br></pre></td></tr></table></figure><p>在 <code>./books/views.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> books.models <span class="keyword">import</span> BookInfo</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> BookInfoSerializer</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoAPIView</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    <span class="comment"># 当前视图类所有方法使用得数据结果集是谁?(从哪一个模型里查数据)</span></span><br><span class="line">    queryset = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># 当前视图类使用序列化器类是谁</span></span><br><span class="line">    serializer_class = BookInfoSerializer</span><br></pre></td></tr></table></figure><p>上面的 queryset 和 serializer_class 实际上是面向切面编程，传值进去之后，会为框架所用。</p><p>在 <code>./day1031/setting.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;books&#x27;</span>,  <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>迁移，运行。</p><p><img src="https://s2.loli.net/2024/11/01/VseUm3GvEK7Ykta.jpg" alt="91-3.jpeg"></p><p>这个可视化的页面是方便观察、管理的，实际上前端只需要拿到 json 就行了。</p><p>我们可以通过 <code>http://127.0.0.1:8000/api/books/1/</code>（这个链接符合 REST 规范）进行修改等操作。</p><p>这里的数据修改可以在数据库中看到同步：</p><p><img src="https://bu.dusays.com/2024/11/01/6724c15dd9fe9.png" alt="91-4.png"></p><p>简单的原理总结：</p><p><img src="https://s2.loli.net/2024/11/01/YWXR5BZlqCTne2s.png" alt="91-5.png"></p><p>之后做项目的时候，前端已经写好了，启动上，这个时候我们就可以专注于写后端。这就是前后端分离。</p><h1 id="序列化概述"><a href="#序列化概述" class="headerlink" title="序列化概述"></a>序列化概述</h1><p><img src="https://bu.dusays.com/2024/11/01/6724d766ac98e.png" alt="91-6.png"></p><p>安装 pygments :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pygments --proxy=<span class="string">&quot;127.0.0.1:7897&quot;</span></span><br></pre></td></tr></table></figure><p>出于演示目的，创建一个新的名为 snippets 的 app :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py startapp snippets</span><br></pre></td></tr></table></figure><p>在 <code>./day1031/settings.py</code> 中增加下面内容：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;books&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;snippets&#x27;</span>,  <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在 <code>./snippets/models.py</code> 中增加下面内容：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pygments.lexers <span class="keyword">import</span> get_all_lexers</span><br><span class="line"><span class="keyword">from</span> pygments.styles <span class="keyword">import</span> get_all_styles</span><br><span class="line"></span><br><span class="line">LEXERS = [item <span class="keyword">for</span> item <span class="keyword">in</span> get_all_lexers() <span class="keyword">if</span> item[<span class="number">1</span>]]</span><br><span class="line">LANGUAGE_CHOICES = <span class="built_in">sorted</span>([(item[<span class="number">1</span>][<span class="number">0</span>], item[<span class="number">0</span>]) <span class="keyword">for</span> item <span class="keyword">in</span> LEXERS])</span><br><span class="line">STYLE_CHOICES = <span class="built_in">sorted</span>([(item, item) <span class="keyword">for</span> item <span class="keyword">in</span> get_all_styles()])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Snippet</span>(models.Model):</span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>, blank=<span class="literal">True</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    code = models.TextField()</span><br><span class="line">    linenos = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    language = models.CharField(choices=LANGUAGE_CHOICES, default=<span class="string">&#x27;python&#x27;</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    style = models.CharField(choices=STYLE_CHOICES, default=<span class="string">&#x27;friendly&#x27;</span>, max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        ordering = [<span class="string">&#x27;created&#x27;</span>]</span><br></pre></td></tr></table></figure><p>迁移，这里我们只迁移新的应用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations snippets</span><br><span class="line">python3 manage.py migrate snippets</span><br></pre></td></tr></table></figure><p>新建 <code>./snippets/serializers.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet, LANGUAGE_CHOICES, STYLE_CHOICES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在序列化类中没有的字段，查询时得不到，新增也不需要提交这个字段</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetSerializer</span>(serializers.Serializer):</span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField(read_only=<span class="literal">True</span>) <span class="comment"># readonly GET 时需要，POST 时不需要</span></span><br><span class="line">    title = serializers.CharField(required=<span class="literal">False</span>, allow_blank=<span class="literal">True</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    code = serializers.CharField(style=&#123;<span class="string">&#x27;base_template&#x27;</span>: <span class="string">&#x27;textarea.html&#x27;</span>&#125;) <span class="comment"># style 是为了测试方便</span></span><br><span class="line">    linenos = serializers.BooleanField(required=<span class="literal">False</span>)</span><br><span class="line">    language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default=<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">    style = serializers.ChoiceField(choices=STYLE_CHOICES, default=<span class="string">&#x27;friendly&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># validated 验证后的</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Create and return a new `Snippet` instance, given the validated data.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 现在这个函数好像没做什么，但是之后我们会填写自己的逻辑</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 数据已经经过序列化的验证。若验证后想做一些自己的操作，然后再 save ，就可以在这里写代码</span></span><br><span class="line">        <span class="keyword">return</span> Snippet.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># instance 用来帮我们查出实例（想想 books/2 这个链接）</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Update and return an existing `Snippet` instance, given the validated data.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 如果前端提交为空，也不会赋空值，而是原来的值</span></span><br><span class="line">        instance.title = validated_data.get(<span class="string">&#x27;title&#x27;</span>, instance.title)</span><br><span class="line">        instance.code = validated_data.get(<span class="string">&#x27;code&#x27;</span>, instance.code)</span><br><span class="line">        instance.linenos = validated_data.get(<span class="string">&#x27;linenos&#x27;</span>, instance.linenos)</span><br><span class="line">        instance.language = validated_data.get(<span class="string">&#x27;language&#x27;</span>, instance.language)</span><br><span class="line">        instance.style = validated_data.get(<span class="string">&#x27;style&#x27;</span>, instance.style)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br></pre></td></tr></table></figure><p>这里我们可以看到，相比于直接继承 <code>serializers.ModelSerializer</code> ，继承其父类 <code>serializers.Serializer</code> 会需要更多代码，同时也意味着可以在更大程度上自定义。</p><h1 id="序列化器的使用"><a href="#序列化器的使用" class="headerlink" title="序列化器的使用"></a>序列化器的使用</h1><p>进入 django shell :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py shell</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from snippets.models import Snippet</span><br><span class="line">&gt;&gt;&gt; from snippets.serializers import SnippetSerializer</span><br><span class="line">&gt;&gt;&gt; from rest_framework.renderers import JSONRenderer</span><br><span class="line">&gt;&gt;&gt; from rest_framework.parsers import JSONParser</span><br><span class="line">&gt;&gt;&gt; snippet = Snippet(code=<span class="string">&#x27;foo = &quot;bar&quot;\n&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; snippet.save()</span><br><span class="line">&gt;&gt;&gt; snippet = Snippet(code=<span class="string">&#x27;print(&quot;hello, world&quot;)\n&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; snippet.save()</span><br></pre></td></tr></table></figure><p>这个时候就可以在数据库中看到更新的数据。</p><p>观察一下序列化：</p><p><img src="https://s2.loli.net/2024/11/02/gtzxda2XnmJOq3N.png" alt="91-7.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ser1.data</span><br><span class="line">&#123;<span class="string">&#x27;id&#x27;</span>: 2, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;print(&quot;hello, world&quot;)\n&#x27;</span>, <span class="string">&#x27;linenos&#x27;</span>: False, <span class="string">&#x27;language&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;style&#x27;</span>: <span class="string">&#x27;friendly&#x27;</span>&#125;</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(ser1)</span><br><span class="line">&lt;class <span class="string">&#x27;snippets.serializers.SnippetSerializer&#x27;</span>&gt;</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(ser1.data)</span><br><span class="line">&lt;class <span class="string">&#x27;rest_framework.utils.serializer_helpers.ReturnDict&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>同时可以看到:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; issubclass(<span class="built_in">type</span>(ser1.data), dict)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>说明我们可以把它当作字典用。</p><p>上面只是中间结果（例如 False 其实是不合规范的，实际上要 false），要完成最终的序列化过程，我们还需要将数据转换成 json 格式。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; content = JSONRenderer().render(ser1.data)</span><br><span class="line">&gt;&gt;&gt; content</span><br><span class="line">b<span class="string">&#x27;&#123;&quot;id&quot;:2,&quot;title&quot;:&quot;&quot;,&quot;code&quot;:&quot;print(\\&quot;hello, world\\&quot;)\\n&quot;,&quot;linenos&quot;:false,&quot;language&quot;:&quot;python&quot;,&quot;style&quot;:&quot;friendly&quot;&#125;&#x27;</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(content)</span><br><span class="line">&lt;class <span class="string">&#x27;bytes&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>顺带一提，实际我们这里只是理解框架做的事情，真正写项目的时候不会用到这些。</p><p>反序列化则是上面过程的逆向：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import io</span><br><span class="line">&gt;&gt;&gt; stream = io.BytesIO(content)</span><br><span class="line">&gt;&gt;&gt; type(stream)</span><br><span class="line">&lt;class &#x27;_io.BytesIO&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; data = JSONParser().parse(stream)</span><br><span class="line">&gt;&gt;&gt; data</span><br><span class="line">&#123;&#x27;id&#x27;: 2, &#x27;title&#x27;: &#x27;&#x27;, &#x27;code&#x27;: &#x27;print(&quot;hello, world&quot;)\n&#x27;, &#x27;linenos&#x27;: False, &#x27;language&#x27;: &#x27;python&#x27;, &#x27;style&#x27;: &#x27;friendly&#x27;&#125;</span><br><span class="line">&gt;&gt;&gt; serializer = SnippetSerializer(data=data)</span><br><span class="line">&gt;&gt;&gt; serializer.is_valid()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; serializer.validated_data</span><br><span class="line">&#123;&#x27;title&#x27;: &#x27;&#x27;, &#x27;code&#x27;: &#x27;print(&quot;hello, world&quot;)&#x27;, &#x27;linenos&#x27;: False, &#x27;language&#x27;: &#x27;python&#x27;, &#x27;style&#x27;: &#x27;friendly&#x27;&#125;</span><br><span class="line">&gt;&gt;&gt; serializer.save()</span><br><span class="line">&lt;Snippet: Snippet object (3)&gt;</span><br></pre></td></tr></table></figure><p>在上面的操作之后，就可以在数据库中看到新增了一条数据。</p><p>也可以同时序列化多个对象，只需要为 serializer 添加一个 <code>many=True</code> 的标志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ser2 = SnippetSerializer(Snippet.objects.all(), many=True)</span><br></pre></td></tr></table></figure><h1 id="ModelSerializers"><a href="#ModelSerializers" class="headerlink" title="ModelSerializers"></a>ModelSerializers</h1><p>正如之前的演示一样，ModelSerializers 要方便的多，若想只选择几个字段而不是全部，打开之前代码的注释，运行即可看到效果。</p><p>DRF 的序列化类有一个 repr 属性，可以通过打印序列化器类实例的结构（representation）查看它的所有字段。以下操作在 Django Shell 中进行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from snippets.serializers import SnippetSerializer</span><br><span class="line">&gt;&gt;&gt; serializer = SnippetSerializer()</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(repr(serializer))</span><br></pre></td></tr></table></figure><p>It’s important to remember that <code>ModelSerializer</code> classes don’t do anything particularly magical, they are simply a shortcut for creating serializer classes:</p><ul><li>An automatically determined set of fields.</li><li>Simple default implementations for the <code>create()</code> and <code>update()</code> methods.</li></ul><h1 id="编写常规的Django视图"><a href="#编写常规的Django视图" class="headerlink" title="编写常规的Django视图"></a>编写常规的Django视图</h1><p>在 <code>./snippets/views.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">snippet_list</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    List all code snippets, or create a new snippet.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        snippets = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data, safe=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        data = JSONParser().parse(request)</span><br><span class="line">        serializer = SnippetSerializer(data=data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(serializer.data, status=<span class="number">201</span>)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.errors, status=<span class="number">400</span>)</span><br></pre></td></tr></table></figure><p>Note that because we want to be able to POST to this view from clients that won’t have a CSRF token we need to mark the view as <code>csrf_exempt</code>. This isn’t something that you’d normally want to do, and REST framework views actually use more sensible behavior than this, but it’ll do for our purposes right now.</p><p>新增 <code>./snippets/urls.py</code> ：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.snippet_list),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在 <code>./day1031/urls.py</code> 中新增路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;snippets.urls&#x27;</span>)), </span><br></pre></td></tr></table></figure><p>这时运行 server, 就可以在 <code>http://127.0.0.1:8000/snippets/</code> 中看到：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foo = \&quot;bar\&quot;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;print(\&quot;hello, world\&quot;)\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;print(\&quot;hello, world\&quot;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>我们解析一下这次的逻辑：<br>浏览器接受到访问 <code>http://127.0.0.1:8000/snippets/</code> 的请求，到 <code>./day1031/urls.py</code> 中寻找路由，由于 <code>snippets.urls</code> 被包含了，所以实际上也会查询到 <code>./snippets/urls.py</code> 中的路由，查询到路由信息，转到视图函数 <code>snippet_list</code> ，执行相关逻辑。</p><p>在 <code>./snippets/views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">snippet_detail</span>(<span class="params">request, pk</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Retrieve, update or delete a code snippet.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        snippet = Snippet.objects.get(pk=pk)</span><br><span class="line">    <span class="keyword">except</span> Snippet.DoesNotExist:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(status=<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        serializer = SnippetSerializer(snippet)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;PUT&#x27;</span>:</span><br><span class="line">        data = JSONParser().parse(request)</span><br><span class="line">        serializer = SnippetSerializer(snippet, data=data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.errors, status=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;DELETE&#x27;</span>:</span><br><span class="line">        snippet.delete()</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(status=<span class="number">204</span>)</span><br></pre></td></tr></table></figure><p>在 <code>./snippets/urls.py</code> 中配置路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, views.snippet_detail),</span><br></pre></td></tr></table></figure><p>我们就可以在 <code>http://127.0.0.1:8000/snippets/1/</code> 中查看详情：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foo = \&quot;bar\&quot;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>使用 postman 验证上面的代码逻辑。</p><p>在 vscode 中安装 postman 插件，如下操作：</p><p><img src="https://s2.loli.net/2024/11/03/GiWHNXgRY5u3bqo.png" alt="91-8.png" title="DELETE 操作"></p><p>在前端 <code>http://127.0.0.1:8000/snippets/</code> 中可以看到，第一条数据已经被删除：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;print(\&quot;hello, world\&quot;)\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;print(\&quot;hello, world\&quot;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>同时后端数据库中的对应数据也被删除。</p><p>在测试一下 PUT 的逻辑：</p><p><img src="https://s2.loli.net/2024/11/03/gmPsluKREaFzxqb.png" alt="91-9.png"></p><p>我们在前端 <code>http://127.0.0.1:8000/snippets/2/</code> 中看到，数据已经被修改：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;print(\&quot;hello, world\&quot;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>同时后端的数据库中，相应数据也已经被修改。</p><p>下面测试 POST（新增）：</p><p><img src="https://s2.loli.net/2024/11/03/RTm2avgDXBAWsfO.png" alt="91-10.png" title="这里 id 值没有具体的影响"></p><p>在前端 <code>http://127.0.0.1:8000/snippets/</code> 中可以看到新增了数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;print(\&quot;hello, world\&quot;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;print(\&quot;hello, world\&quot;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asdf&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;print(\&quot;hello, how are you\&quot;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>同时在后端数据库中也看到了相应数据。</p><h1 id="API-视图"><a href="#API-视图" class="headerlink" title="API 视图"></a>API 视图</h1><p>使用 <code>@api_view</code> 装饰器将一个传统的 Django 视图改造成 DRF 的 API 视图。</p><p>编写 <code>./snippets/views_v2.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DRF 的 API 视图</span></span><br><span class="line"><span class="comment"># views.py 和 views_v2.py 只能有一个能成为 views.py</span></span><br><span class="line"><span class="comment"># 谁成为 views.py 谁就是真正起作用的那个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">snippet_list</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    List all code snippets, or create a new snippet.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        snippets = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data) <span class="comment"># 注意这里改成了 Response</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        serializer = SnippetSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;PUT&#x27;</span>, <span class="string">&#x27;DELETE&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">snippet_detail</span>(<span class="params">request, pk</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Retrieve, update or delete a code snippet.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        snippet = Snippet.objects.get(pk=pk)</span><br><span class="line">    <span class="keyword">except</span> Snippet.DoesNotExist:</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_404_NOT_FOUND)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        serializer = SnippetSerializer(snippet)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;PUT&#x27;</span>:</span><br><span class="line">        serializer = SnippetSerializer(snippet, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;DELETE&#x27;</span>:</span><br><span class="line">        snippet.delete()</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></table></figure><p>运行以后，就可以在前端 <code>http://127.0.0.1:8000/snippets/</code> 看到 DRF 为我们生成的页面（而不是之前的只有 JSON 数据），类似于之前的 books 应用：</p><p><img src="https://s2.loli.net/2024/11/03/fh2Pk67qITsrZg9.png" alt="91-11.png"></p><p>补充：<br>DRF 引入了一个扩展 Django 常规 <code>HttpRequest</code> 对象的 <code>Request</code> 对象，并提供了更灵活的请求解析能力。<code>Request</code> 对象的核心功能是 <code>request.data</code> 属性，它和 <code>request.POST</code> 类似，但对于使用 Web API 更为有用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.POST # 只处理表单数据 只适用于 POST 方法</span><br><span class="line">request.data # 处理任意数据 适用于 POST，PUT 和 PATCH 等方法</span><br></pre></td></tr></table></figure><p>但是现在有一个问题，我们无法在前端访问 <code>http://127.0.0.1:8000/snippets.json</code> ，而之前的 books 可以，这怎么解决呢？</p><p>在 <code>./snippets/urls.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns <span class="comment"># add</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.snippet_list),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, views.snippet_detail),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns = format_suffix_patterns(urlpatterns) <span class="comment"># add</span></span><br></pre></td></tr></table></figure><p>同时在 <code>./snippets/views.py</code> 中作修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">snippet_list</span>(<span class="params">request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">snippet_detail</span>(<span class="params">request, pk, <span class="built_in">format</span> = <span class="literal">None</span></span>):</span><br><span class="line">  <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>现在就可以在 <code>http://127.0.0.1:8000/snippets.json</code> 中看到 json 数据。<br>访问 <code>http://127.0.0.1:8000/snippets/2.json</code> 也同样可以看到 json 数据。</p><p>截至目前的代码可以参见：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1031">https://github.com/dropsong/py_webServer/tree/master/day1031</a></p><h1 id="基于类的视图"><a href="#基于类的视图" class="headerlink" title="基于类的视图"></a>基于类的视图</h1><p>我们复制一份上面的代码，在这基础上修改。新的代码会在后面放出。</p><p>在 <code>./snippets/views.py</code> 中（全部代码）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetList</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    List all snippets, or create a new snippet.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        snippets = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        serializer = SnippetSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure><p>在 <code>./snippets/urls.py</code> 中（全部代码）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.SnippetList.as_view()),</span><br><span class="line">    <span class="comment"># path(&#x27;snippets/&lt;int:pk&gt;/&#x27;, views.SnippetDetail.as_view()),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns = format_suffix_patterns(urlpatterns)</span><br></pre></td></tr></table></figure><p>在 <code>./snippets/views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetDetail</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Retrieve, update or delete a snippet instance.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_object</span>(<span class="params">self, pk</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> Snippet.objects.get(pk=pk)</span><br><span class="line">        <span class="keyword">except</span> Snippet.DoesNotExist:</span><br><span class="line">            <span class="keyword">raise</span> Http404</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, pk, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        snippet = self.get_object(pk)</span><br><span class="line">        serializer = SnippetSerializer(snippet)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, pk, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        snippet = self.get_object(pk)</span><br><span class="line">        <span class="comment"># 修改时会传入 snippet 实例</span></span><br><span class="line">        serializer = SnippetSerializer(snippet, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, request, pk, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        snippet = self.get_object(pk)</span><br><span class="line">        snippet.delete()</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></table></figure><p>同时在 <code>./snippets/urls.py</code> 中将注释打开。</p><p>runserver, 一切正常。</p><p>本节的代码参见：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1103">https://github.com/dropsong/py_webServer/tree/master/day1103</a></p><h1 id="使用混合类（mixins）"><a href="#使用混合类（mixins）" class="headerlink" title="使用混合类（mixins）"></a>使用混合类（mixins）</h1><p><img src="https://s2.loli.net/2024/11/04/8bYNhCWfXt5gDzF.png" alt="91-12.png"></p><p>观察下面的代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">    snippets = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer = SnippetSerializer(snippets, many=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">    serializer = SnippetSerializer(data=request.data)</span><br><span class="line">    <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">    <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure><p>痛点：其实很多时候，这里的写法固定，能否更方便程序员开发呢？</p><p>其实这里使用混合类，就是为了寻求不同层次的封装。回忆最开始的时候，我们使用了一个非常强大的 ModelViewSet，就是舍弃了一些自由，换来了方便。</p><p>官网资料：<br><a href="https://www.django-rest-framework.org/tutorial/3-class-based-views/">https://www.django-rest-framework.org/tutorial/3-class-based-views/</a><br>在其中找到 <strong>Using mixins</strong> 部分，这里不再赘述。</p><p>一些总结：</p><p><img src="https://s2.loli.net/2024/11/07/eQrwq3LOHTEi6yY.png" alt="91-12dot5.png"></p><h1 id="Authentication-amp-Permissions"><a href="#Authentication-amp-Permissions" class="headerlink" title="Authentication &amp; Permissions"></a>Authentication &amp; Permissions</h1><p>我们在之前的代码基础上进行修改。</p><p>在 <code>./snippets/models.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pygments.lexers <span class="keyword">import</span> get_all_lexers</span><br><span class="line"><span class="keyword">from</span> pygments.styles <span class="keyword">import</span> get_all_styles</span><br><span class="line"></span><br><span class="line">LEXERS = [item <span class="keyword">for</span> item <span class="keyword">in</span> get_all_lexers() <span class="keyword">if</span> item[<span class="number">1</span>]]</span><br><span class="line">LANGUAGE_CHOICES = <span class="built_in">sorted</span>([(item[<span class="number">1</span>][<span class="number">0</span>], item[<span class="number">0</span>]) <span class="keyword">for</span> item <span class="keyword">in</span> LEXERS])</span><br><span class="line">STYLE_CHOICES = <span class="built_in">sorted</span>([(item, item) <span class="keyword">for</span> item <span class="keyword">in</span> get_all_styles()])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Snippet （代码）片段</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Snippet</span>(models.Model):</span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>, blank=<span class="literal">True</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    code = models.TextField()</span><br><span class="line">    linenos = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    language = models.CharField(choices=LANGUAGE_CHOICES, default=<span class="string">&#x27;python&#x27;</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    style = models.CharField(choices=STYLE_CHOICES, default=<span class="string">&#x27;friendly&#x27;</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    owner = models.ForeignKey(<span class="string">&#x27;auth.User&#x27;</span>, related_name=<span class="string">&#x27;snippets&#x27;</span>, on_delete=models.CASCADE)  <span class="comment"># add</span></span><br><span class="line">    highlighted = models.TextField()       <span class="comment"># add</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        ordering = [<span class="string">&#x27;created&#x27;</span>]</span><br></pre></td></tr></table></figure><p>在上面的代码中：</p><ul><li><code>related_name=&#39;snippets&#39;</code> 是反向关联的名称，定义了从 User 模型访问 Snippet 的方式。设定 <code>related_name=&#39;snippets&#39;</code> 后，可以通过 <code>user.snippets.all()</code> 获取某个 User 实例下的所有 Snippet 实例。</li><li><code>on_delete=models.CASCADE</code> 决定当关联的 User 被删除时的行为。<code>models.CASCADE</code> 表示删除 User 时，所有关联的 Snippet 也会被删除，以保持数据库的一致性。</li></ul><p>迁移（这里会遇到一点小情况，具体在官网可查）。</p><p>将 <code>./snippets/models.py</code> 修改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pygments.lexers <span class="keyword">import</span> get_all_lexers</span><br><span class="line"><span class="keyword">from</span> pygments.styles <span class="keyword">import</span> get_all_styles</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pygments.lexers <span class="keyword">import</span> get_lexer_by_name</span><br><span class="line"><span class="keyword">from</span> pygments.formatters.html <span class="keyword">import</span> HtmlFormatter</span><br><span class="line"><span class="keyword">from</span> pygments <span class="keyword">import</span> highlight</span><br><span class="line"></span><br><span class="line">LEXERS = [item <span class="keyword">for</span> item <span class="keyword">in</span> get_all_lexers() <span class="keyword">if</span> item[<span class="number">1</span>]]</span><br><span class="line">LANGUAGE_CHOICES = <span class="built_in">sorted</span>([(item[<span class="number">1</span>][<span class="number">0</span>], item[<span class="number">0</span>]) <span class="keyword">for</span> item <span class="keyword">in</span> LEXERS])</span><br><span class="line">STYLE_CHOICES = <span class="built_in">sorted</span>([(item, item) <span class="keyword">for</span> item <span class="keyword">in</span> get_all_styles()])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Snippet （代码）片段</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Snippet</span>(models.Model):</span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>, blank=<span class="literal">True</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    code = models.TextField()</span><br><span class="line">    linenos = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    language = models.CharField(choices=LANGUAGE_CHOICES, default=<span class="string">&#x27;python&#x27;</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    style = models.CharField(choices=STYLE_CHOICES, default=<span class="string">&#x27;friendly&#x27;</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    owner = models.ForeignKey(<span class="string">&#x27;auth.User&#x27;</span>, related_name=<span class="string">&#x27;snippets&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    highlighted = models.TextField(default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        ordering = [<span class="string">&#x27;created&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存的时候，需要改变行为，这个时候就要重写 save</span></span><br><span class="line">    <span class="comment"># 里面具体的逻辑可以暂时不用关心</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Use the `pygments` library to create a highlighted HTML</span></span><br><span class="line"><span class="string">        representation of the code snippet.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        lexer = get_lexer_by_name(self.language)</span><br><span class="line">        linenos = <span class="string">&#x27;table&#x27;</span> <span class="keyword">if</span> self.linenos <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">        options = &#123;<span class="string">&#x27;title&#x27;</span>: self.title&#125; <span class="keyword">if</span> self.title <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">        formatter = HtmlFormatter(style=self.style, linenos=linenos,</span><br><span class="line">                                  full=<span class="literal">True</span>, **options)</span><br><span class="line">        self.highlighted = highlight(self.code, lexer, formatter)</span><br><span class="line">        <span class="built_in">super</span>().save(*args, **kwargs)</span><br></pre></td></tr></table></figure><p>上面，我们为 Snippet 模型添加了两个字段，其中关于代码高亮的字段，我们在 save 方法里处理了。但是那个 user 字段呢？我们在序列化 Snippet 的时候，这个 User 字段当然也要序列化。在 <code>./snippets/serializers.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    snippets = serializers.PrimaryKeyRelatedField(many=<span class="literal">True</span>, queryset=Snippet.objects.<span class="built_in">all</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;snippets&#x27;</span>]</span><br></pre></td></tr></table></figure><p>将 <code>./snippets/views.py</code> 修改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer, UserSerializer</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status, generics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetList</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    List all snippets, or create a new snippet.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        snippets = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        serializer = SnippetSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetDetail</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Retrieve, update or delete a snippet instance.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_object</span>(<span class="params">self, pk</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> Snippet.objects.get(pk=pk)</span><br><span class="line">        <span class="keyword">except</span> Snippet.DoesNotExist:</span><br><span class="line">            <span class="keyword">raise</span> Http404</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, pk, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        snippet = self.get_object(pk)</span><br><span class="line">        serializer = SnippetSerializer(snippet)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, pk, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        snippet = self.get_object(pk)</span><br><span class="line">        <span class="comment"># 修改时会传入 snippet 实例</span></span><br><span class="line">        serializer = SnippetSerializer(snippet, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, request, pk, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        snippet = self.get_object(pk)</span><br><span class="line">        snippet.delete()</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserList</span>(generics.ListAPIView):</span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDetail</span>(generics.RetrieveAPIView):</span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br></pre></td></tr></table></figure><p>在 <code>./snippets/urls.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;users/&#x27;</span>, views.UserList.as_view()),</span><br><span class="line">path(<span class="string">&#x27;users/&lt;int:pk&gt;/&#x27;</span>, views.UserDetail.as_view()),</span><br></pre></td></tr></table></figure><p>runserver, 在 <code>127.0.0.1:8000/users/</code> 中可以看到：</p><p><img src="https://s2.loli.net/2024/11/04/xGpwE42NzbMCsho.png" alt="91-13.png"></p><p>并且详情页可以访问。</p><p>这个 User 可以看到之后，再和 Snippets 关联等之后的操作就会比较方便。</p><p><strong>回顾一下我们的目标，我们希望代码片段的 owner 是通过登录状态自动获取的。</strong></p><p>目前为止的代码：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1104">https://github.com/dropsong/py_webServer/tree/master/day1104</a></p><p>下面为方便起见，我们使用 ModelSerializer 和 ModelViewSet. 我们另起一份代码。</p><p>将 <code>./snippets/serializers.py</code> 修改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet, LANGUAGE_CHOICES, STYLE_CHOICES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Snippet</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;linenos&#x27;</span>, <span class="string">&#x27;language&#x27;</span>, <span class="string">&#x27;style&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    snippets = serializers.PrimaryKeyRelatedField(many=<span class="literal">True</span>, queryset=Snippet.objects.<span class="built_in">all</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;snippets&#x27;</span>]</span><br></pre></td></tr></table></figure><p>类似地，我们修改 <code>./snippets/views.py</code> 和 <code>./snippets/urls.py</code> 如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer, UserSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetList</span>(generics.ListCreateAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetDetail</span>(generics.RetrieveUpdateDestroyAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserAPIView</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> UserAPIView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.SnippetList.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, views.SnippetDetail.as_view()),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">routers = DefaultRouter()</span><br><span class="line">routers.register(<span class="string">&quot;users&quot;</span>, UserAPIView)</span><br><span class="line"></span><br><span class="line">urlpatterns += routers.urls</span><br></pre></td></tr></table></figure><p>运行，尝试在前端提交 Snippets, 报错如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">IntegrityError at /snippets/</span><br><span class="line">NOT NULL constraint failed: snippets_snippet.owner_id</span><br><span class="line">Request Method:    POST</span><br><span class="line">Request URL:    http://127.0.0.1:8000/snippets/</span><br><span class="line">Django Version:    4.2</span><br><span class="line">Exception Type:    IntegrityError</span><br><span class="line">Exception Value:    </span><br><span class="line">NOT NULL constraint failed: snippets_snippet.owner_id</span><br><span class="line">Exception Location:    /home/zhiyue/myenv/lib/python3.11/site-packages/django/db/backends/sqlite3/base.py, line 328, in execute</span><br><span class="line">Raised during:    snippets.views.SnippetsAPIView</span><br></pre></td></tr></table></figure><p><strong>此时无法添加新的代码片段，因为它的外键字段 owner 没有定义序列化方法。</strong></p><p>修改 <code>./snippets/views.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer, UserSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetList</span>(generics.ListCreateAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写这个函数，就可以改变新增行为，面向切面编程</span></span><br><span class="line">    <span class="comment"># 具体细节在继承关系里，需要看源码</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_create</span>(<span class="params">self, serializer</span>):</span><br><span class="line">        serializer.save(owner=self.request.user)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetDetail</span>(generics.RetrieveUpdateDestroyAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserAPIView</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br></pre></td></tr></table></figure><p>runserver, 访问前端 <code>127.0.0.1:8000/snippets/</code> ，<strong>登录 admin 账户</strong>，再次发 POST 请求，可以成功。</p><p><strong>新的需求：</strong> 我们希望 owner 这个字段新增的时候不需要由前端给后端，但是显示代码片段的时候还是要显示。</p><p>修改 <code>./snippets/serializers.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># owner 是一个 User 对象</span></span><br><span class="line">    owner = serializers.ReadOnlyField(source=<span class="string">&#x27;owner.username&#x27;</span>)</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Snippet</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;linenos&#x27;</span>, <span class="string">&#x27;language&#x27;</span>, <span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;owner&#x27;</span>)</span><br></pre></td></tr></table></figure><p>runserver, 可以在前端 <code>127.0.0.1:8000/snippets/</code> 中看到 owner.</p><p>为了可以看到 json 数据，以及之后的方便，我们将代码改为与官网统一。修改 <code>./snippets/views.py</code> 和 <code>./snippets/urls.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer, UserSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetList</span>(generics.ListCreateAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写这个函数，就可以改变新增行为，面向切面编程</span></span><br><span class="line">    <span class="comment"># 具体细节在继承关系里，需要看源码</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_create</span>(<span class="params">self, serializer</span>):</span><br><span class="line">        serializer.save(owner=self.request.user)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetDetail</span>(generics.RetrieveUpdateDestroyAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserList</span>(generics.ListAPIView):</span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDetail</span>(generics.RetrieveAPIView):</span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.SnippetList.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, views.SnippetDetail.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;users/&#x27;</span>, views.UserList.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;users/&lt;int:pk&gt;/&#x27;</span>, views.UserDetail.as_view()),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns = format_suffix_patterns(urlpatterns)</span><br></pre></td></tr></table></figure><p><strong>新的需求：</strong> 在前端 <code>127.0.0.1:8000/snippets/</code> ，只有登录的用户才有下面的 POST 框，未登录的用户没有。</p><p>还是面向切面编程，在 <code>./snippets/views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics, permissions</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetList</span>(generics.ListCreateAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line">    permission_classes = (permissions.IsAuthenticatedOrReadOnly,)  <span class="comment"># add</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写这个函数，就可以改变新增行为，面向切面编程</span></span><br><span class="line">    <span class="comment"># 具体细节在继承关系里，需要看源码</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_create</span>(<span class="params">self, serializer</span>):</span><br><span class="line">        serializer.save(owner=self.request.user)</span><br></pre></td></tr></table></figure><p>runserver, 可以看到，登出后，下方无 POST 框。</p><p>同理，我们在详情页也做类似的操作：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetDetail</span>(generics.RetrieveUpdateDestroyAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line">    permission_classes = (permissions.IsAuthenticatedOrReadOnly,) <span class="comment"># add</span></span><br></pre></td></tr></table></figure><p>效果不再展示。</p><p><strong>问题/需求</strong> : 现在登录之后，A 用户可以修改 B 用户的 snippets .</p><p>新建 <code>./snippets/permissions.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IsOwnerOrReadOnly</span>(permissions.BasePermission):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Custom permission to only allow owners of an object to edit it.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 详情页中才能写这个函数，因为只有详情也才有 obj(对象)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_object_permission</span>(<span class="params">self, request, view, obj</span>):</span><br><span class="line">        <span class="comment"># Read permissions are allowed to any request,</span></span><br><span class="line">        <span class="comment"># so we&#x27;ll always allow GET, HEAD or OPTIONS requests.</span></span><br><span class="line">        <span class="keyword">if</span> request.method <span class="keyword">in</span> permissions.SAFE_METHODS:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Write permissions are only allowed to the owner of the snippet.</span></span><br><span class="line">        <span class="keyword">return</span> obj.owner == request.user</span><br></pre></td></tr></table></figure><p>对 <code>./snippets/views.py</code> 作如下修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.permissions <span class="keyword">import</span> IsOwnerOrReadOnly</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetDetail</span>(generics.RetrieveUpdateDestroyAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line">    permission_classes = (permissions.IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly)</span><br></pre></td></tr></table></figure><p>runserver, 用户查看不是自己的代码时，下方无 PUT 框。</p><h1 id="Relationships-amp-Hyperlinked-APIs"><a href="#Relationships-amp-Hyperlinked-APIs" class="headerlink" title="Relationships &amp; Hyperlinked APIs"></a>Relationships &amp; Hyperlinked APIs</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>我们在前端 <code>127.0.0.1:8000/</code> 中，只能看到 books，看不到 snippets. 如下：</p><p><img src="https://s2.loli.net/2024/11/09/6KhmOLiBZ1eb49y.png" alt="91-14.png"></p><p>仅管我们在 <code>./day1031/urls.py</code>(全局的 url) 中已经写了：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;books.urls&#x27;</span>)), <span class="comment"># 使用自己应用内的路由,例如 &#x27;api/&#x27; ，但为方便我们就留空</span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;snippets.urls&#x27;</span>)), </span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>)), <span class="comment"># 有这个，才有 DRF 的登录</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Relationships"><a href="#Relationships" class="headerlink" title="Relationships"></a>Relationships</h2><p>在 <code>./snippets/views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.reverse <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api_root</span>(<span class="params">request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> Response(&#123;</span><br><span class="line">        <span class="string">&#x27;users&#x27;</span>: reverse(<span class="string">&#x27;user-list&#x27;</span>, request=request, <span class="built_in">format</span>=<span class="built_in">format</span>),</span><br><span class="line">        <span class="string">&#x27;snippets&#x27;</span>: reverse(<span class="string">&#x27;snippet-list&#x27;</span>, request=request, <span class="built_in">format</span>=<span class="built_in">format</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>然后在 <code>./snippets/urls.py</code> 中，作出修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.api_root),  <span class="comment"># add</span></span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.SnippetList.as_view(), name = <span class="string">&#x27;snippet-list&#x27;</span>), <span class="comment"># modify</span></span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, views.SnippetDetail.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;users/&#x27;</span>, views.UserList.as_view(), name = <span class="string">&#x27;user-list&#x27;</span>), <span class="comment"># modify</span></span><br><span class="line">    path(<span class="string">&#x27;users/&lt;int:pk&gt;/&#x27;</span>, views.UserDetail.as_view()),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns = format_suffix_patterns(urlpatterns)</span><br></pre></td></tr></table></figure><p>然后在 <code>./day1031/urls.py</code>(全局 urls) 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># path(&#x27;&#x27;, include(&#x27;books.urls&#x27;)), # 使用自己应用内的路由,例如 &#x27;api/&#x27; ，但为方便我们就留空</span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;snippets.urls&#x27;</span>)), </span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>)), <span class="comment"># 有这个，才有 DRF 的登录</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>将 books 注释掉。这个不是好的解决方案，我们之后再处理。</p><h2 id="Hyperlinked-APIs"><a href="#Hyperlinked-APIs" class="headerlink" title="Hyperlinked APIs"></a>Hyperlinked APIs</h2><p>需求：我们想要做一些代码高亮的活。</p><p>在 <code>./snippets/urls.py</code> 中新增路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.api_root),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.SnippetList.as_view(), name = <span class="string">&#x27;snippet-list&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, views.SnippetDetail.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/highlight/&#x27;</span>, views.SnippetHighlight.as_view()), <span class="comment"># add</span></span><br><span class="line">    path(<span class="string">&#x27;users/&#x27;</span>, views.UserList.as_view(), name = <span class="string">&#x27;user-list&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;users/&lt;int:pk&gt;/&#x27;</span>, views.UserDetail.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在 <code>./snippets/views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetHighlight</span>(generics.GenericAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    renderer_classes = [renderers.StaticHTMLRenderer] <span class="comment"># 配置渲染器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        snippet = self.get_object() <span class="comment"># 在详情页中拿到了某个 snippet 对象</span></span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br></pre></td></tr></table></figure><p>runserver, 访问 <code>127.0.0.1:8000/snippets/6/highlight/</code>, 效果：</p><p><img src="https://s2.loli.net/2024/11/09/IPSRyCDcitXVJFL.png" alt="91-15.png"></p><p>但是实际上，我们在 <code>127.0.0.1:8000/snippets/6/</code> 看到的效果是这样的：</p><p><img src="https://s2.loli.net/2024/11/09/MeYzcdym7wp4F39.png" alt="91-16.png"></p><p><strong>新的需求：</strong> 我们不希望代码直接堆积在 <code>127.0.0.1:8000/snippets/6/</code> 里，而是 <code>&quot;code&quot;:</code> 后面放一个链接，可以跳转到 <code>127.0.0.1:8000/snippets/6/highlight/</code> .</p><p>目前为止的代码可以参见：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1107">https://github.com/dropsong/py_webServer/tree/master/day1107</a></p><p><strong>我们另起一份代码。</strong></p><p>在 <code>./snippets/serializers.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># owner 是一个 User 对象</span></span><br><span class="line">    owner = serializers.ReadOnlyField(source=<span class="string">&#x27;owner.username&#x27;</span>)</span><br><span class="line">    highlight = serializers.HyperlinkedIdentityField(view_name=<span class="string">&#x27;snippet-highlight&#x27;</span>, <span class="built_in">format</span>=<span class="string">&#x27;html&#x27;</span>) <span class="comment"># add</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Snippet</span><br><span class="line">        <span class="comment"># 顺序不要求</span></span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;linenos&#x27;</span>, <span class="string">&#x27;language&#x27;</span>, <span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;owner&#x27;</span>, <span class="string">&#x27;highlight&#x27;</span>) <span class="comment"># modify</span></span><br></pre></td></tr></table></figure><p>同时在 <code>./snippets/urls.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.api_root),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.SnippetList.as_view(), name = <span class="string">&#x27;snippet-list&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, views.SnippetDetail.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/highlight/&#x27;</span>, views.SnippetHighlight.as_view(), name = <span class="string">&#x27;snippet-highlight&#x27;</span>), <span class="comment"># modify</span></span><br><span class="line">    path(<span class="string">&#x27;users/&#x27;</span>, views.UserList.as_view(), name = <span class="string">&#x27;user-list&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;users/&lt;int:pk&gt;/&#x27;</span>, views.UserDetail.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>runserver, 效果：</p><p><img src="https://s2.loli.net/2024/11/09/g9iIqfTC4ezZjtw.png" alt="91-17.png"></p><p>在 <code>./snippets/serializers.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 之前的不要了</span></span><br><span class="line"><span class="comment"># class SnippetSerializer(serializers.ModelSerializer):</span></span><br><span class="line"><span class="comment">#     # owner 是一个 User 对象</span></span><br><span class="line"><span class="comment">#     owner = serializers.ReadOnlyField(source=&#x27;owner.username&#x27;)</span></span><br><span class="line"><span class="comment">#     highlight = serializers.HyperlinkedIdentityField(view_name=&#x27;snippet-highlight&#x27;, format=&#x27;html&#x27;)</span></span><br><span class="line"><span class="comment">#     class Meta:</span></span><br><span class="line"><span class="comment">#         model = Snippet</span></span><br><span class="line"><span class="comment">#         # 顺序不要求</span></span><br><span class="line"><span class="comment">#         fields = (&#x27;id&#x27;, &#x27;title&#x27;, &#x27;code&#x27;, &#x27;linenos&#x27;, &#x27;language&#x27;, &#x27;style&#x27;, &#x27;owner&#x27;, &#x27;highlight&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetSerializer</span>(serializers.HyperlinkedModelSerializer): <span class="comment"># modify</span></span><br><span class="line">    <span class="comment"># owner 是一个 User 对象</span></span><br><span class="line">    owner = serializers.ReadOnlyField(source=<span class="string">&#x27;owner.username&#x27;</span>)</span><br><span class="line">    highlight = serializers.HyperlinkedIdentityField(view_name=<span class="string">&#x27;snippet-highlight&#x27;</span>, <span class="built_in">format</span>=<span class="string">&#x27;html&#x27;</span>)</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Snippet</span><br><span class="line">        <span class="comment"># 顺序不要求</span></span><br><span class="line">        fields = (<span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;linenos&#x27;</span>, <span class="string">&#x27;language&#x27;</span>, <span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;owner&#x27;</span>, <span class="string">&#x27;highlight&#x27;</span>) <span class="comment"># modify</span></span><br></pre></td></tr></table></figure><p>同时在 <code>./snippets/urls.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.api_root),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.SnippetList.as_view(), name = <span class="string">&#x27;snippet-list&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, views.SnippetDetail.as_view(), name = <span class="string">&#x27;snippet-detail&#x27;</span>), <span class="comment"># modify</span></span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/highlight/&#x27;</span>, views.SnippetHighlight.as_view(), name = <span class="string">&#x27;snippet-highlight&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;users/&#x27;</span>, views.UserList.as_view(), name = <span class="string">&#x27;user-list&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;users/&lt;int:pk&gt;/&#x27;</span>, views.UserDetail.as_view(), name = <span class="string">&#x27;user-detail&#x27;</span>), <span class="comment"># modify</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>runserver, 效果：</p><p><img src="https://s2.loli.net/2024/11/09/WASekHcL9aDQo3V.png" alt="91-18.png"></p><h2 id="Pagination"><a href="#Pagination" class="headerlink" title="Pagination"></a>Pagination</h2><p>在 <code>./day1031/settings.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局分页功能</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span>: <span class="number">2</span>  <span class="comment"># 演示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的作用是在列表页增加分页功能。</p><p>runserver, 成功。</p><p>目前为止的代码：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1109">https://github.com/dropsong/py_webServer/tree/master/day1109</a></p><h1 id="ViewSets"><a href="#ViewSets" class="headerlink" title="ViewSets"></a>ViewSets</h1><p>目标：和 <code>./snippets/views.py</code> 相比，<code>./books/views.py</code> 相当简洁，我们如何一步一步将 <code>./snippets/views.py</code> 简化？</p><p><strong>我们另起一份代码。</strong></p><p>将 <code>snippets/views.py</code> 修改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer, UserSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics, permissions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># we delete this:</span></span><br><span class="line"><span class="comment"># class SnippetList(generics.ListCreateAPIView):</span></span><br><span class="line"><span class="comment">#     queryset = Snippet.objects.all()</span></span><br><span class="line"><span class="comment">#     serializer_class = SnippetSerializer</span></span><br><span class="line"><span class="comment">#     permission_classes = (permissions.IsAuthenticatedOrReadOnly,)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#     # 重写这个函数，就可以改变新增行为，面向切面编程</span></span><br><span class="line"><span class="comment">#     # 具体细节在继承关系里，需要看源码</span></span><br><span class="line"><span class="comment">#     def perform_create(self, serializer):</span></span><br><span class="line"><span class="comment">#         serializer.save(owner=self.request.user)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">from</span> snippets.permissions <span class="keyword">import</span> IsOwnerOrReadOnly</span><br><span class="line"><span class="comment"># class SnippetDetail(generics.RetrieveUpdateDestroyAPIView):</span></span><br><span class="line"><span class="comment">#     queryset = Snippet.objects.all()</span></span><br><span class="line"><span class="comment">#     serializer_class = SnippetSerializer</span></span><br><span class="line"><span class="comment">#     permission_classes = (permissions.IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetViewSet</span>(viewsets.ModelViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This ViewSet automatically provides `list`, `create`, `retrieve`,</span></span><br><span class="line"><span class="string">    `update` and `destroy` actions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Additionally we also provide an extra `highlight` action.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line">    permission_classes = [permissions.IsAuthenticatedOrReadOnly,</span><br><span class="line">                          IsOwnerOrReadOnly]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(<span class="params">detail=<span class="literal">True</span>, renderer_classes=[renderers.StaticHTMLRenderer]</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">highlight</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        snippet = self.get_object()</span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_create</span>(<span class="params">self, serializer</span>):</span><br><span class="line">        serializer.save(owner=self.request.user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">    </span><br><span class="line"><span class="comment"># we delete this:</span></span><br><span class="line"><span class="comment"># class UserList(generics.ListAPIView):</span></span><br><span class="line"><span class="comment">#     queryset = User.objects.all()</span></span><br><span class="line"><span class="comment">#     serializer_class = UserSerializer</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># class UserDetail(generics.RetrieveAPIView):</span></span><br><span class="line"><span class="comment">#     queryset = User.objects.all()</span></span><br><span class="line"><span class="comment">#     serializer_class = UserSerializer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserViewSet</span>(viewsets.ReadOnlyModelViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This viewset automatically provides `list` and `retrieve` actions.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetHighlight</span>(generics.GenericAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    renderer_classes = [renderers.StaticHTMLRenderer] <span class="comment"># 配置渲染器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        snippet = self.get_object() <span class="comment"># 在详情页中拿到了某个 snippet 对象</span></span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.reverse <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api_root</span>(<span class="params">request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> Response(&#123;</span><br><span class="line">        <span class="string">&#x27;users&#x27;</span>: reverse(<span class="string">&#x27;user-list&#x27;</span>, request=request, <span class="built_in">format</span>=<span class="built_in">format</span>),</span><br><span class="line">        <span class="string">&#x27;snippets&#x27;</span>: reverse(<span class="string">&#x27;snippet-list&#x27;</span>, request=request, <span class="built_in">format</span>=<span class="built_in">format</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>将 <code>./snippets/urls.py</code> 修改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> snippets.views <span class="keyword">import</span> SnippetViewSet, api_root, UserViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"></span><br><span class="line">snippet_list = SnippetViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;post&#x27;</span>: <span class="string">&#x27;create&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">snippet_detail = SnippetViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;retrieve&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;put&#x27;</span>: <span class="string">&#x27;update&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;patch&#x27;</span>: <span class="string">&#x27;partial_update&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;delete&#x27;</span>: <span class="string">&#x27;destroy&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">snippet_highlight = SnippetViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;highlight&#x27;</span></span><br><span class="line">&#125;, renderer_classes=[renderers.StaticHTMLRenderer])</span><br><span class="line">user_list = UserViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;list&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">user_detail = UserViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;retrieve&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, api_root),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, snippet_list, name = <span class="string">&#x27;snippet-list&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, snippet_detail, name = <span class="string">&#x27;snippet-detail&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/highlight/&#x27;</span>, snippet_highlight, name = <span class="string">&#x27;snippet-highlight&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;users/&#x27;</span>, user_list, name = <span class="string">&#x27;user-list&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;users/&lt;int:pk&gt;/&#x27;</span>, user_detail, name = <span class="string">&#x27;user-detail&#x27;</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns = format_suffix_patterns(urlpatterns)</span><br></pre></td></tr></table></figure><p>runserver, 功能一切正常。</p><p>目前为止的代码：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1110">https://github.com/dropsong/py_webServer/tree/master/day1110</a></p><h1 id="Routers"><a href="#Routers" class="headerlink" title="Routers"></a>Routers</h1><p>目标：简化 <code>./snippets/urls.py</code> .</p><p><strong>我们另起一份代码。</strong></p><p>修改 <code>./snippets/views.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer, UserSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics, permissions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># we delete this:</span></span><br><span class="line"><span class="comment"># class SnippetList(generics.ListCreateAPIView):</span></span><br><span class="line"><span class="comment">#     queryset = Snippet.objects.all()</span></span><br><span class="line"><span class="comment">#     serializer_class = SnippetSerializer</span></span><br><span class="line"><span class="comment">#     permission_classes = (permissions.IsAuthenticatedOrReadOnly,)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#     # 重写这个函数，就可以改变新增行为，面向切面编程</span></span><br><span class="line"><span class="comment">#     # 具体细节在继承关系里，需要看源码</span></span><br><span class="line"><span class="comment">#     def perform_create(self, serializer):</span></span><br><span class="line"><span class="comment">#         serializer.save(owner=self.request.user)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">from</span> snippets.permissions <span class="keyword">import</span> IsOwnerOrReadOnly</span><br><span class="line"><span class="comment"># class SnippetDetail(generics.RetrieveUpdateDestroyAPIView):</span></span><br><span class="line"><span class="comment">#     queryset = Snippet.objects.all()</span></span><br><span class="line"><span class="comment">#     serializer_class = SnippetSerializer</span></span><br><span class="line"><span class="comment">#     permission_classes = (permissions.IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetViewSet</span>(viewsets.ModelViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This ViewSet automatically provides `list`, `create`, `retrieve`,</span></span><br><span class="line"><span class="string">    `update` and `destroy` actions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Additionally we also provide an extra `highlight` action.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line">    permission_classes = [permissions.IsAuthenticatedOrReadOnly,</span><br><span class="line">                          IsOwnerOrReadOnly]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(<span class="params">detail=<span class="literal">True</span>, renderer_classes=[renderers.StaticHTMLRenderer]</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">highlight</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        snippet = self.get_object()</span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_create</span>(<span class="params">self, serializer</span>):</span><br><span class="line">        serializer.save(owner=self.request.user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">    </span><br><span class="line"><span class="comment"># we delete this:</span></span><br><span class="line"><span class="comment"># class UserList(generics.ListAPIView):</span></span><br><span class="line"><span class="comment">#     queryset = User.objects.all()</span></span><br><span class="line"><span class="comment">#     serializer_class = UserSerializer</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># class UserDetail(generics.RetrieveAPIView):</span></span><br><span class="line"><span class="comment">#     queryset = User.objects.all()</span></span><br><span class="line"><span class="comment">#     serializer_class = UserSerializer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserViewSet</span>(viewsets.ReadOnlyModelViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This viewset automatically provides `list` and `retrieve` actions.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetHighlight</span>(generics.GenericAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    renderer_classes = [renderers.StaticHTMLRenderer] <span class="comment"># 配置渲染器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        snippet = self.get_object() <span class="comment"># 在详情页中拿到了某个 snippet 对象</span></span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.reverse <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api_root</span>(<span class="params">request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> Response(&#123;</span><br><span class="line">        <span class="string">&#x27;users&#x27;</span>: reverse(<span class="string">&#x27;user-list&#x27;</span>, request=request, <span class="built_in">format</span>=<span class="built_in">format</span>),</span><br><span class="line">        <span class="string">&#x27;snippets&#x27;</span>: reverse(<span class="string">&#x27;snippet-list&#x27;</span>, request=request, <span class="built_in">format</span>=<span class="built_in">format</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>修改 <code>./snippets/urls.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> snippets.views <span class="keyword">import</span> SnippetViewSet, api_root, UserViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下删除：</span></span><br><span class="line"><span class="comment"># snippet_list = SnippetViewSet.as_view(&#123;</span></span><br><span class="line"><span class="comment">#     &#x27;get&#x27;: &#x27;list&#x27;,</span></span><br><span class="line"><span class="comment">#     &#x27;post&#x27;: &#x27;create&#x27;</span></span><br><span class="line"><span class="comment"># &#125;)</span></span><br><span class="line"><span class="comment"># snippet_detail = SnippetViewSet.as_view(&#123;</span></span><br><span class="line"><span class="comment">#     &#x27;get&#x27;: &#x27;retrieve&#x27;,</span></span><br><span class="line"><span class="comment">#     &#x27;put&#x27;: &#x27;update&#x27;,</span></span><br><span class="line"><span class="comment">#     &#x27;patch&#x27;: &#x27;partial_update&#x27;,</span></span><br><span class="line"><span class="comment">#     &#x27;delete&#x27;: &#x27;destroy&#x27;</span></span><br><span class="line"><span class="comment"># &#125;)</span></span><br><span class="line"><span class="comment"># snippet_highlight = SnippetViewSet.as_view(&#123;</span></span><br><span class="line"><span class="comment">#     &#x27;get&#x27;: &#x27;highlight&#x27;</span></span><br><span class="line"><span class="comment"># &#125;, renderer_classes=[renderers.StaticHTMLRenderer])</span></span><br><span class="line"><span class="comment"># user_list = UserViewSet.as_view(&#123;</span></span><br><span class="line"><span class="comment">#     &#x27;get&#x27;: &#x27;list&#x27;</span></span><br><span class="line"><span class="comment"># &#125;)</span></span><br><span class="line"><span class="comment"># user_detail = UserViewSet.as_view(&#123;</span></span><br><span class="line"><span class="comment">#     &#x27;get&#x27;: &#x27;retrieve&#x27;</span></span><br><span class="line"><span class="comment"># &#125;)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># urlpatterns = [</span></span><br><span class="line"><span class="comment">#     path(&#x27;&#x27;, api_root),</span></span><br><span class="line"><span class="comment">#     path(&#x27;snippets/&#x27;, snippet_list, name = &#x27;snippet-list&#x27;),</span></span><br><span class="line"><span class="comment">#     path(&#x27;snippets/&lt;int:pk&gt;/&#x27;, snippet_detail, name = &#x27;snippet-detail&#x27;),</span></span><br><span class="line"><span class="comment">#     path(&#x27;snippets/&lt;int:pk&gt;/highlight/&#x27;, snippet_highlight, name = &#x27;snippet-highlight&#x27;),</span></span><br><span class="line"><span class="comment">#     path(&#x27;users/&#x27;, user_list, name = &#x27;user-list&#x27;),</span></span><br><span class="line"><span class="comment">#     path(&#x27;users/&lt;int:pk&gt;/&#x27;, user_detail, name = &#x27;user-detail&#x27;),</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># urlpatterns = format_suffix_patterns(urlpatterns)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a router and register our ViewSets with it.</span></span><br><span class="line">router = DefaultRouter()</span><br><span class="line">router.register(<span class="string">r&#x27;snippets&#x27;</span>, SnippetViewSet, basename=<span class="string">&#x27;snippet&#x27;</span>)</span><br><span class="line">router.register(<span class="string">r&#x27;users&#x27;</span>, UserViewSet, basename=<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The API URLs are now determined automatically by the router.</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(router.urls)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>修改 <code>./snippets/serializers.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet, LANGUAGE_CHOICES, STYLE_CHOICES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># class SnippetSerializer(serializers.ModelSerializer):</span></span><br><span class="line"><span class="comment">#     # owner 是一个 User 对象</span></span><br><span class="line"><span class="comment">#     owner = serializers.ReadOnlyField(source=&#x27;owner.username&#x27;)</span></span><br><span class="line"><span class="comment">#     highlight = serializers.HyperlinkedIdentityField(view_name=&#x27;snippet-highlight&#x27;, format=&#x27;html&#x27;)</span></span><br><span class="line"><span class="comment">#     class Meta:</span></span><br><span class="line"><span class="comment">#         model = Snippet</span></span><br><span class="line"><span class="comment">#         # 顺序不要求</span></span><br><span class="line"><span class="comment">#         fields = (&#x27;id&#x27;, &#x27;title&#x27;, &#x27;code&#x27;, &#x27;linenos&#x27;, &#x27;language&#x27;, &#x27;style&#x27;, &#x27;owner&#x27;, &#x27;highlight&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetSerializer</span>(serializers.HyperlinkedModelSerializer):</span><br><span class="line">    <span class="comment"># owner 是一个 User 对象</span></span><br><span class="line">    owner = serializers.ReadOnlyField(source=<span class="string">&#x27;owner.username&#x27;</span>)</span><br><span class="line">    <span class="comment"># highlight = serializers.HyperlinkedIdentityField(view_name=&#x27;snippet-highlight&#x27;, format=&#x27;html&#x27;)</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Snippet</span><br><span class="line">        <span class="comment"># 顺序不要求</span></span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;linenos&#x27;</span>, <span class="string">&#x27;language&#x27;</span>, <span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;owner&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    snippets = serializers.PrimaryKeyRelatedField(many=<span class="literal">True</span>, queryset=Snippet.objects.<span class="built_in">all</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;snippets&#x27;</span>]</span><br></pre></td></tr></table></figure><p>runserver, 成功。</p><h1 id="API-Guide"><a href="#API-Guide" class="headerlink" title="API Guide"></a>API Guide</h1><h2 id="快速了解"><a href="#快速了解" class="headerlink" title="快速了解"></a>快速了解</h2><p>参见： <a href="https://www.django-rest-framework.org/api-guide/requests/">官网 API Guide</a>，可在下拉菜单中选择相应内容。</p><p>主要关注内容：</p><ul><li>Request parsing<ul><li><code>.data</code></li><li><code>.query_params</code></li><li><code>.parsers</code></li></ul></li><li>Authentication<ul><li><code>.user</code></li></ul></li></ul><p>这部分内容可以在调试中学习体会：</p><p><img src="https://s2.loli.net/2024/11/10/S3TCbsNO4gxQmDz.png" alt="91-19.png"></p><p><code>request._request</code> :</p><ul><li>Django 原生的 request 对象</li><li>RESTframework 的 Request 对象扩展了 Django 的 HttpRequest 对象，所以 Django 原生的标准属性和方法也是可用的。例如 <code>request.META</code> 和 <code>request.session</code> 字典正常可用。</li><li>由于实现原因，Request 该类不继承自 HttpRequest 类，而是使用 composition 扩展了该类。</li></ul><p>后略。</p><p>几个值得注意的内容：</p><ul><li><a href="https://www.django-rest-framework.org/api-guide/viewsets/">https://www.django-rest-framework.org/api-guide/viewsets/</a></li><li><a href="https://www.django-rest-framework.org/api-guide/routers/">https://www.django-rest-framework.org/api-guide/routers/</a><ul><li>Note: If using namespacing with hyperlinked serializers you’ll also need to ensure that any <code>view_name</code> parameters on the serializers correctly reflect the namespace. In the examples above you’d need to include a parameter such as <code>view_name=&#39;app_name:user-detail&#39;</code> for serializer fields hyperlinked to the user detail view.</li></ul></li></ul><blockquote><p>解析器是干什么的？<br>因为前后端分离，可能采用 json、xml、html 等各种不同格式的内容，后端必须要有一个解析器来解析前端发送过来的数据，也就是翻译器。对应地，后端也有一个渲染器 Render ,将后端的数据翻译成前端明白的格式。</p></blockquote><p>下面简单演示一下 FileUploadParser .</p><p>新建一个应用 guide.</p><p>注册应用 <code>./day1031/settings.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;books&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;snippets&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;guide&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>配置全局 <code>./day1031/urls.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># path(&#x27;&#x27;, include(&#x27;books.urls&#x27;)), # 使用自己应用内的路由,例如 &#x27;api/&#x27; ，但为方便我们就留空</span></span><br><span class="line">    <span class="comment"># path(&#x27;&#x27;, include(&#x27;snippets.urls&#x27;)), </span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;guide.urls&#x27;</span>)), </span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>)), <span class="comment"># 有这个，才有 DRF 的登录</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>注意这里将之前的一些代码注释掉了，想要实现之前的功能需要恢复。</p><p>新增 <code>./guide/urls.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include, re_path</span><br><span class="line"><span class="keyword">from</span> guide.views <span class="keyword">import</span> FileUploadView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;upload/&lt;str:filename&gt;/&#x27;</span>, FileUploadView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>将 <code>./guide/views.py</code> 修改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> FileUploadParser</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileUploadView</span>(views.APIView):</span><br><span class="line">    parser_classes = [FileUploadParser]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, filename, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        file_obj = request.data[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="comment"># do some stuff with uploaded file</span></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="keyword">return</span> Response(status=<span class="number">204</span>)</span><br></pre></td></tr></table></figure><p>runserver, 可以进入 <code>127.0.0.1:8000/upload/aaa</code>，但是不能进入 <code>127.0.0.1:8000</code> 或者 <code>127.0.0.1:8000/upload</code> .</p><p>在 <code>file_obj = request.data[&#39;file&#39;]</code> 这行前面打断点，启动调试。</p><p>在 postman 中：</p><p><img src="https://s2.loli.net/2024/11/16/YctbDrdTuSpPMmU.png" alt="91-20.png"></p><p>在 Body 中选择 binary, 上传一个文件，向 <code>127.0.0.1:8000/upload/test/</code> 发送 PUT 请求。</p><p><img src="https://bu.dusays.com/2024/11/16/6738094ce24ed.png" alt="91-21.png"></p><p>调试中点击继续，得到 postman 的结果：</p><p><img src="https://s2.loli.net/2024/11/16/L1ECfAIslYXeKyF.png" alt="91-22.png"></p><p>下面简单演示一下 StaticHTMLRenderer .</p><p>modify <code>./guide/views.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> FileUploadParser</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileUploadView</span>(views.APIView):</span><br><span class="line">    parser_classes = [FileUploadParser]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, filename, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        file_obj = request.data[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="comment"># do some stuff with uploaded file</span></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="keyword">return</span> Response(status=<span class="number">204</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view, renderer_classes</span><br><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> StaticHTMLRenderer</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@renderer_classes(<span class="params">[StaticHTMLRenderer]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_html_view</span>(<span class="params">request</span>):</span><br><span class="line">    data = <span class="string">&#x27;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, world&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> Response(data)</span><br></pre></td></tr></table></figure><p>modify <code>./guide/urls.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include, re_path</span><br><span class="line"><span class="keyword">from</span> guide.views <span class="keyword">import</span> FileUploadView, simple_html_view</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;upload/&lt;str:filename&gt;/&#x27;</span>, FileUploadView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;simple_html_view/&#x27;</span>, simple_html_view),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>runserver, 效果：在前端 <code>127.0.0.1:8000/simple_html_view/</code> 看到渲染好的 Hello,world .</p><h2 id="Serializers"><a href="#Serializers" class="headerlink" title="Serializers"></a>Serializers</h2><p>修改 <code>./guide/models.py</code> ：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Comment</span>(models.Model):</span><br><span class="line">    email=models.EmailField()</span><br><span class="line">    content = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 酒店预订、入住日期、离开日期</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Event</span>(models.Model):</span><br><span class="line">    description = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    start = models.DateTimeField()</span><br><span class="line">    finish = models.DateTimeField()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 酒店预订、姓名、房间号、日期</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Event1</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    room_number = models.IntegerField()</span><br><span class="line">    date = models.DateField()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    owner = models.ForeignKey(<span class="string">&#x27;auth.User&#x27;</span>,related_name=<span class="string">&#x27;accounts&#x27;</span>,on_delete=models.CASCADE,default=<span class="literal">None</span>,db_constraint=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>迁移。</p><p>新增 <code>./guide/serializers.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> guide.models <span class="keyword">import</span> Comment</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentSerializer</span>(serializers.Serializer):</span><br><span class="line">    email = serializers.EmailField()</span><br><span class="line">    content = serializers.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    created = serializers.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        <span class="keyword">return</span> Comment.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">        instance.email = validated_data.get(<span class="string">&#x27;email&#x27;</span>, instance.email)</span><br><span class="line">        instance.content = validated_data.get(<span class="string">&#x27;content&#x27;</span>, instance.content)</span><br><span class="line">        instance.created = validated_data.get(<span class="string">&#x27;created&#x27;</span>, instance.created)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br></pre></td></tr></table></figure><p>补充一个小细节：<br>Calling <code>.save()</code> will either create a new instance, or update an existing instance, depending on if an existing instance was passed when instantiating the serializer class:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .save() will create a new instance.</span></span><br><span class="line">serializer = CommentSerializer(data=data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># .save() will update the existing `comment` instance.</span></span><br><span class="line">serializer = CommentSerializer(comment, data=data)</span><br></pre></td></tr></table></figure><p>这里的保存方式和代码中的 create, update 是对应的：</p><p><img src="https://s2.loli.net/2024/11/16/GIBPgqMfliysnTL.png" alt="91-23.png"></p><p>完善一下 comment 的功能：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> FileUploadParser</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileUploadView</span>(views.APIView):</span><br><span class="line">    parser_classes = [FileUploadParser]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, filename, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        file_obj = request.data[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="comment"># do some stuff with uploaded file</span></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="keyword">return</span> Response(status=<span class="number">204</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view, renderer_classes</span><br><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> StaticHTMLRenderer</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@renderer_classes(<span class="params">[StaticHTMLRenderer]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_html_view</span>(<span class="params">request</span>):</span><br><span class="line">    data = <span class="string">&#x27;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, world&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> Response(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Comment</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> CommentSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Comment.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CommentSerializer</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include, re_path</span><br><span class="line"><span class="keyword">from</span> guide.views <span class="keyword">import</span> FileUploadView, simple_html_view, CommentViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line"></span><br><span class="line">router.register(<span class="string">r&#x27;comment&#x27;</span>, CommentViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;upload/&lt;str:filename&gt;/&#x27;</span>, FileUploadView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;simple_html_view/&#x27;</span>, simple_html_view),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns += router.urls</span><br></pre></td></tr></table></figure><p>runserver, worked.</p><p><strong>新的需求：</strong> 做一个<strong>字段级验证</strong>，如果 comment 内容里没有 <code>nihao</code> 就报错。</p><p>修改 <code>./guide/serializers.py</code> 为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> guide.models <span class="keyword">import</span> Comment</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentSerializer</span>(serializers.Serializer):</span><br><span class="line">    email = serializers.EmailField()</span><br><span class="line">    content = serializers.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    created = serializers.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        <span class="keyword">return</span> Comment.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">        instance.email = validated_data.get(<span class="string">&#x27;email&#x27;</span>, instance.email)</span><br><span class="line">        instance.content = validated_data.get(<span class="string">&#x27;content&#x27;</span>, instance.content)</span><br><span class="line">        instance.created = validated_data.get(<span class="string">&#x27;created&#x27;</span>, instance.created)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_content</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Check that the comment is about nihao.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;nihao&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;not about nihao&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><p>runserver, worked.</p><p><strong>新的需求：</strong> 现在需要做一个<strong>对象级别的验证</strong> 。</p><p>做如下新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/serializers.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    description = serializers.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    start = serializers.DateTimeField()</span><br><span class="line">    finish = serializers.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Event</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;description&#x27;</span>, <span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;finish&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Check that start is before finish.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;start&#x27;</span>] &gt; data[<span class="string">&#x27;finish&#x27;</span>]:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;finish must occur after start&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Event.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = EventSerializer</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/urls.py</span></span><br><span class="line">router.register(<span class="string">r&#x27;event&#x27;</span>, EventViewSet)</span><br></pre></td></tr></table></figure><p>runserver, worked.</p><p><strong>验证器参数：</strong> （我们不再在代码中体现，而只是给出简单的例子）, Individual fields on a serializer can include validators, by declaring them on the field instance, for example:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">multiple_of_ten</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">if</span> value % <span class="number">10</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&#x27;Not a multiple of ten&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameRecord</span>(serializers.Serializer):</span><br><span class="line">    score = serializers.IntegerField(validators=[multiple_of_ten])</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>Serializer classes can also include reusable validators that are applied to the complete set of field data. These validators are included by declaring them on an inner <code>Meta</code> class, like so:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventSerializer</span>(serializers.Serializer):</span><br><span class="line">    name = serializers.CharField()</span><br><span class="line">    room_number = serializers.IntegerField(choices=[<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">201</span>])</span><br><span class="line">    date = serializers.DateField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        <span class="comment"># Each room only has one event per day.</span></span><br><span class="line">        validators = [</span><br><span class="line">            UniqueTogetherValidator(</span><br><span class="line">                queryset=Event.objects.<span class="built_in">all</span>(),</span><br><span class="line">                fields=[<span class="string">&#x27;room_number&#x27;</span>, <span class="string">&#x27;date&#x27;</span>]</span><br><span class="line">            )</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p>为演示目的，在全局的 url 配置中注释掉 snippets 的部分。</p><p>一些奇妙的改动：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/serializers.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> guide.models <span class="keyword">import</span> Comment, Event, Event1, Account</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentSerializer</span>(serializers.Serializer):</span><br><span class="line">    email = serializers.EmailField()</span><br><span class="line">    content = serializers.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    created = serializers.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        <span class="keyword">return</span> Comment.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">        instance.email = validated_data.get(<span class="string">&#x27;email&#x27;</span>, instance.email)</span><br><span class="line">        instance.content = validated_data.get(<span class="string">&#x27;content&#x27;</span>, instance.content)</span><br><span class="line">        instance.created = validated_data.get(<span class="string">&#x27;created&#x27;</span>, instance.created)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_content</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Check that the comment is about nihao.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;nihao&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;not about nihao&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    description = serializers.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    start = serializers.DateTimeField()</span><br><span class="line">    finish = serializers.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Event</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;description&#x27;</span>, <span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;finish&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Check that start is before finish.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;start&#x27;</span>] &gt; data[<span class="string">&#x27;finish&#x27;</span>]:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;finish must occur after start&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># add</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreateUserSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = (<span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        extra_kwargs = &#123;<span class="string">&#x27;password&#x27;</span>: &#123;<span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>&#125;&#125; <span class="comment"># 如果没有这句，会露出密码(密文)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        user = User(</span><br><span class="line">            email=validated_data[<span class="string">&#x27;email&#x27;</span>],</span><br><span class="line">            username=validated_data[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        )</span><br><span class="line">        user.set_password(validated_data[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">        user.save()</span><br><span class="line">        <span class="keyword">return</span> user</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> FileUploadParser</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileUploadView</span>(views.APIView):</span><br><span class="line">    parser_classes = [FileUploadParser]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, filename, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        file_obj = request.data[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="comment"># do some stuff with uploaded file</span></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="keyword">return</span> Response(status=<span class="number">204</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view, renderer_classes</span><br><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> StaticHTMLRenderer</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@renderer_classes(<span class="params">[StaticHTMLRenderer]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_html_view</span>(<span class="params">request</span>):</span><br><span class="line">    data = <span class="string">&#x27;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, world&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> Response(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Comment.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CommentSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Event.objects.<span class="built_in">all</span>().order_by(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    serializer_class = EventSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># add</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CreateUserSerializer</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include, re_path</span><br><span class="line"><span class="keyword">from</span> guide.views <span class="keyword">import</span> FileUploadView, UserViewSet, simple_html_view, CommentViewSet, EventViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line"></span><br><span class="line">router.register(<span class="string">r&#x27;comment&#x27;</span>, CommentViewSet)</span><br><span class="line">router.register(<span class="string">r&#x27;event&#x27;</span>, EventViewSet)</span><br><span class="line">router.register(<span class="string">r&#x27;users&#x27;</span>, UserViewSet) <span class="comment"># add</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;upload/&lt;str:filename&gt;/&#x27;</span>, FileUploadView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;simple_html_view/&#x27;</span>, simple_html_view),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns += router.urls</span><br></pre></td></tr></table></figure><p>runserver, 可以在前端看到一些 User 的改动。</p><h2 id="BaseSerializer"><a href="#BaseSerializer" class="headerlink" title="BaseSerializer"></a>BaseSerializer</h2><p>这是 DRF 中其它序列化器的基类，一般不直接使用。所以，下面的内容看看就好。</p><p>Serializer 类直接继承了 BaseSerializer 类,所以两者具有基本相同的 API:</p><ul><li><code>.data</code> 返回传出的原始数据。</li><li><code>.is_valid()</code> 反序列化并验证传入的数据。</li><li><code>.validated_data</code> 返回经过验证后的传入数据。</li><li><code>.errors</code> 返回验证期间的错误。</li><li><code>.save()</code> 将验证的数据保留到对象实例中。</li></ul><p>它还有可以覆写的四种方法：<br><code>.to_representation()</code> 重写此方法来改变读取操作的序列化结果。<br><code>.to_internal_value()</code> 重写此方法来改变写入操作的序列化结果。<br><code>.create() 和 .update()</code> 重写其中一个或两个来改变保存实例时的动作。</p><p>因为此类提供与 Serializer 类相同的接口，所以可以将它与现有的基于类的通用视图一起使用，就像使用常规 Serializer 或 ModelSerializer 一样。<strong>区别是 BaseSerializer 类并不会在可浏览的 API 页面中生成 HTML 表单。</strong></p><h1 id="Serializer-fields"><a href="#Serializer-fields" class="headerlink" title="Serializer fields"></a>Serializer fields</h1><h2 id="Core-arguments"><a href="#Core-arguments" class="headerlink" title="Core arguments"></a>Core arguments</h2><p>注意这里的标题是和官网对应的。</p><p><code>read_only</code>, <code>write_only</code> 不再赘述。</p><p><code>required</code> :<br>Normally an error will be raised if a field is not supplied during deserialization. Set to false if this field is not required to be present during deserialization.</p><p>例子：<br>我们在 <code>./guide/serializers.py</code> 中，修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentSerializer</span>(serializers.Serializer):</span><br><span class="line">    email = serializers.EmailField()</span><br><span class="line">    content = serializers.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    created = serializers.DateTimeField(required=<span class="literal">False</span>) <span class="comment"># modified</span></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>效果：POST 时前端无须提交 Created .</p><p>可以在官网查看：<code>allow_null</code>, <code>source</code>, <code>validators</code>, <code>label</code>, <code>help_text</code>, <code>initial</code> .</p><p><code>style</code> 例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use &lt;input type=&quot;password&quot;&gt; for the input.</span></span><br><span class="line">password = serializers.CharField(</span><br><span class="line">    style=&#123;<span class="string">&#x27;input_type&#x27;</span>: <span class="string">&#x27;password&#x27;</span>&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="String-fields"><a href="#String-fields" class="headerlink" title="String fields"></a>String fields</h2><p>可以上官网查看，有些还是挺有用的。</p><p><code>EmailField</code>, <code>RegexField</code> .</p><p><code>SlugField</code> :<br>这个可以实现的，正则也能实现，只不过这个更简单一点（代价是功能受限）。</p><p><code>URLField</code>, <code>UUIDField</code>, <code>FilePathField</code>, <code>IPAddressField</code> .</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>可以在官网查看 Numeric fields, Date and time fields, Choice selection fields 等。</p><p>这里演示一下 ChoiceField ：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/serializers.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentSerializer</span>(serializers.Serializer):</span><br><span class="line">    email = serializers.EmailField()</span><br><span class="line">    <span class="comment"># content = serializers.CharField(max_length=200)</span></span><br><span class="line">    content = serializers.ChoiceField(choices=[<span class="number">100</span>, <span class="number">101</span>])</span><br><span class="line">    created = serializers.DateTimeField(required=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/11/24/ruVdtHbJEnpk8DW.png" alt="91-24.png"></p><p>回滚此次改动。</p><h1 id="Serializer-relations"><a href="#Serializer-relations" class="headerlink" title="Serializer relations"></a>Serializer relations</h1><p><a href="https://www.django-rest-framework.org/api-guide/relations/">https://www.django-rest-framework.org/api-guide/relations/</a></p><p>在 <code>./guide/models.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 唱片和歌曲的模型类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Album</span>(models.Model):  <span class="comment"># 唱片</span></span><br><span class="line">    album_name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    artist = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.album_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Track</span>(models.Model):  <span class="comment"># 歌曲</span></span><br><span class="line">    album = models.ForeignKey(Album, related_name=<span class="string">&#x27;tracks&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    order = models.IntegerField()</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    duration = models.IntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        unique_together = [<span class="string">&#x27;album&#x27;</span>, <span class="string">&#x27;order&#x27;</span>]</span><br><span class="line">        ordering = [<span class="string">&#x27;order&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%d: %s&#x27;</span> % (self.order, self.title)</span><br></pre></td></tr></table></figure><p>迁移。</p><p>在 <code>./guide/admin.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">admin.site.register(Album)</span><br><span class="line">admin.site.register(Track)</span><br></pre></td></tr></table></figure><p>一通操作：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/serializers.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlbumSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Album</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrackSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Track</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlbumViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Album.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = AlbumSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrackViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Track.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = TrackSerializer</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/urls.py</span></span><br><span class="line">router.register(<span class="string">r&#x27;albums&#x27;</span>, AlbumViewSet)</span><br><span class="line">router.register(<span class="string">r&#x27;tracks&#x27;</span>, TrackViewSet)</span><br></pre></td></tr></table></figure><p>runserver, worked:</p><p><img src="https://s2.loli.net/2024/11/24/Wgh4z9GX8tPejwa.png" alt="91-25.png"></p><p><strong>新的需求：</strong> 我们想要在唱片下面顺便显示一些歌曲。</p><p>作修改如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/serializers.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlbumSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    tracks = serializers.StringRelatedField(many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Album</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;album_name&#x27;</span>, <span class="string">&#x27;artist&#x27;</span>, <span class="string">&#x27;tracks&#x27;</span>]</span><br></pre></td></tr></table></figure><p>效果，前端得到：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;next&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;previous&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;results&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;album_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;唱片1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;artist&quot;</span><span class="punctuation">:</span> <span class="string">&quot;周杰伦&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tracks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;1: 蚂蚁&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;2: 东风破&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>目前为止的代码：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1110_2">https://github.com/dropsong/py_webServer/tree/master/day1110_2</a></p><h1 id="Nested-relationships"><a href="#Nested-relationships" class="headerlink" title="Nested relationships"></a>Nested relationships</h1><p>嵌套关联。</p><p><strong>我们另起一份代码。</strong></p><p>将 <code>./guide/serializers.py</code> 修改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> guide.models <span class="keyword">import</span> Album, Comment, Event, Event1, Account, Track</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentSerializer</span>(serializers.Serializer):</span><br><span class="line">    email = serializers.EmailField()</span><br><span class="line">    content = serializers.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    <span class="comment"># content = serializers.ChoiceField(choices=[100, 101])</span></span><br><span class="line">    created = serializers.DateTimeField(required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        <span class="keyword">return</span> Comment.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">        instance.email = validated_data.get(<span class="string">&#x27;email&#x27;</span>, instance.email)</span><br><span class="line">        instance.content = validated_data.get(<span class="string">&#x27;content&#x27;</span>, instance.content)</span><br><span class="line">        instance.created = validated_data.get(<span class="string">&#x27;created&#x27;</span>, instance.created)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_content</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Check that the comment is about nihao.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;nihao&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;not about nihao&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    description = serializers.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    start = serializers.DateTimeField()</span><br><span class="line">    finish = serializers.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Event</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;description&#x27;</span>, <span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;finish&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Check that start is before finish.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;start&#x27;</span>] &gt; data[<span class="string">&#x27;finish&#x27;</span>]:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;finish must occur after start&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreateUserSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = (<span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        extra_kwargs = &#123;<span class="string">&#x27;password&#x27;</span>: &#123;<span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>&#125;&#125; <span class="comment"># 如果没有这句，会露出密码(密文)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        user = User(</span><br><span class="line">            email=validated_data[<span class="string">&#x27;email&#x27;</span>],</span><br><span class="line">            username=validated_data[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        )</span><br><span class="line">        user.set_password(validated_data[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">        user.save()</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrackSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Track</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套关联</span></span><br><span class="line"><span class="comment"># we deleted sth and add this:</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlbumSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    tracks = TrackSerializer(many=<span class="literal">True</span>, read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Album</span><br><span class="line">        fields = [<span class="string">&#x27;album_name&#x27;</span>, <span class="string">&#x27;artist&#x27;</span>, <span class="string">&#x27;tracks&#x27;</span>]</span><br></pre></td></tr></table></figure><p>runserver, on front page <code>127.0.0.1:8000/albums/</code> we see: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;count&quot;: 2,</span><br><span class="line">    &quot;next&quot;: null,</span><br><span class="line">    &quot;previous&quot;: null,</span><br><span class="line">    &quot;results&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;album_name&quot;: &quot;唱片1&quot;,</span><br><span class="line">            &quot;artist&quot;: &quot;周杰伦&quot;,</span><br><span class="line">            &quot;tracks&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;id&quot;: 1,</span><br><span class="line">                    &quot;order&quot;: 1,</span><br><span class="line">                    &quot;title&quot;: &quot;蚂蚁&quot;,</span><br><span class="line">                    &quot;duration&quot;: 300,</span><br><span class="line">                    &quot;album&quot;: 1</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;id&quot;: 2,</span><br><span class="line">                    &quot;order&quot;: 2,</span><br><span class="line">                    &quot;title&quot;: &quot;东风破&quot;,</span><br><span class="line">                    &quot;duration&quot;: 400,</span><br><span class="line">                    &quot;album&quot;: 1</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;album_name&quot;: &quot;唱片2&quot;,</span><br><span class="line">            &quot;artist&quot;: &quot;朴树&quot;,</span><br><span class="line">            &quot;tracks&quot;: []</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>新的需求：</strong> 能否在 Album 页面 POST 的时候（就是那个按钮），一并提交歌曲的信息呢？</p><p>作修改如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/serializers.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrackSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Track</span><br><span class="line">        fields = [<span class="string">&#x27;order&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;duration&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套关联</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlbumSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># tracks = TrackSerializer(many=True, read_only=True)</span></span><br><span class="line">    tracks = TrackSerializer(many=<span class="literal">True</span>) <span class="comment"># 修改时，需要去掉 read_only 属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Album</span><br><span class="line">        fields = [<span class="string">&#x27;album_name&#x27;</span>, <span class="string">&#x27;artist&#x27;</span>, <span class="string">&#x27;tracks&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接近于固定写法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        tracks_data = validated_data.pop(<span class="string">&#x27;tracks&#x27;</span>)</span><br><span class="line">        album = Album.objects.create(**validated_data) <span class="comment"># 保存一类</span></span><br><span class="line">        <span class="comment"># 保存多类</span></span><br><span class="line">        <span class="keyword">for</span> track_data <span class="keyword">in</span> tracks_data:</span><br><span class="line">            Track.objects.create(album=album, **track_data)</span><br><span class="line">        <span class="keyword">return</span> album</span><br></pre></td></tr></table></figure><p>runserver, on front page <code>127.0.0.1:8000/albums/</code> we POST this: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;album_name&quot;: &quot;唱片3&quot;,</span><br><span class="line">    &quot;artist&quot;: &quot;好妹妹&quot;,</span><br><span class="line">    &quot;tracks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;order&quot;: 1,</span><br><span class="line">            &quot;title&quot;: &quot;你飞到城市另一边&quot;,</span><br><span class="line">            &quot;duration&quot;: 300</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;order&quot;: 2,</span><br><span class="line">            &quot;title&quot;: &quot;冬&quot;,</span><br><span class="line">            &quot;duration&quot;: 400</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>worked.</p><p>目前为止的代码：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1125">https://github.com/dropsong/py_webServer/tree/master/day1125</a></p><h1 id="自定义关系类型字段"><a href="#自定义关系类型字段" class="headerlink" title="自定义关系类型字段"></a>自定义关系类型字段</h1><p>Custom relational fields.</p><p><strong>我们另起一份代码。</strong></p><p>修改 <code>./guide/serializers.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> guide.models <span class="keyword">import</span> Album, Comment, Event, Event1, Account, Track</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentSerializer</span>(serializers.Serializer):</span><br><span class="line">    email = serializers.EmailField()</span><br><span class="line">    content = serializers.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    <span class="comment"># content = serializers.ChoiceField(choices=[100, 101])</span></span><br><span class="line">    created = serializers.DateTimeField(required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        <span class="keyword">return</span> Comment.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">        instance.email = validated_data.get(<span class="string">&#x27;email&#x27;</span>, instance.email)</span><br><span class="line">        instance.content = validated_data.get(<span class="string">&#x27;content&#x27;</span>, instance.content)</span><br><span class="line">        instance.created = validated_data.get(<span class="string">&#x27;created&#x27;</span>, instance.created)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_content</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Check that the comment is about nihao.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;nihao&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;not about nihao&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    description = serializers.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    start = serializers.DateTimeField()</span><br><span class="line">    finish = serializers.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Event</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;description&#x27;</span>, <span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;finish&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Check that start is before finish.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;start&#x27;</span>] &gt; data[<span class="string">&#x27;finish&#x27;</span>]:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;finish must occur after start&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreateUserSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = (<span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        extra_kwargs = &#123;<span class="string">&#x27;password&#x27;</span>: &#123;<span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>&#125;&#125; <span class="comment"># 如果没有这句，会露出密码(密文)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        user = User(</span><br><span class="line">            email=validated_data[<span class="string">&#x27;email&#x27;</span>],</span><br><span class="line">            username=validated_data[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        )</span><br><span class="line">        user.set_password(validated_data[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">        user.save()</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrackSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Track</span><br><span class="line">        fields = [<span class="string">&#x27;order&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;duration&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 自定义关系字段，之前都是 CharField 之类的，这里我们自定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrackListingField</span>(serializers.RelatedField):</span><br><span class="line">    <span class="comment"># 改变查询时显示的样式</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_representation</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="comment"># 时长格式： 秒 -&gt; 几分几秒</span></span><br><span class="line">        duration = time.strftime(<span class="string">&#x27;%M:%S&#x27;</span>, time.gmtime(value.duration))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Track %d: %s (%s)&#x27;</span> % (value.order, value.title, duration)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlbumSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    tracks = TrackListingField(many=<span class="literal">True</span>, read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Album</span><br><span class="line">        fields = [<span class="string">&#x27;album_name&#x27;</span>, <span class="string">&#x27;artist&#x27;</span>, <span class="string">&#x27;tracks&#x27;</span>]</span><br></pre></td></tr></table></figure><p>runserver, on front page <code>127.0.0.1:8000/albums/</code> we see:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;next&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1:8000/albums/?page=2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;previous&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;results&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;album_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;唱片1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;artist&quot;</span><span class="punctuation">:</span> <span class="string">&quot;周杰伦&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tracks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;Track 1: 蚂蚁 (05:00)&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;Track 2: 东风破 (06:40)&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;album_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;唱片2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;artist&quot;</span><span class="punctuation">:</span> <span class="string">&quot;朴树&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tracks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>worked.</p><h1 id="Validators"><a href="#Validators" class="headerlink" title="Validators"></a>Validators</h1><h2 id="Validators-1"><a href="#Validators-1" class="headerlink" title="Validators"></a>Validators</h2><p>在全局 url 配置中打开注释，修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;api2/&#x27;</span>, include(<span class="string">&#x27;books.urls&#x27;</span>)), <span class="comment"># 使用自己应用内的路由,例如 &#x27;api/&#x27; ，但为方便我们就留空</span></span><br><span class="line">    <span class="comment"># path(&#x27;&#x27;, include(&#x27;snippets.urls&#x27;)), </span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;guide.urls&#x27;</span>)), </span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>)), <span class="comment"># 有这个，才有 DRF 的登录</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们现在使用 UniqueValidator 防止重复添加同一本书。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./books/serializers.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> rest_framework.validators <span class="keyword">import</span> UniqueValidator</span><br><span class="line"><span class="keyword">from</span> books.models <span class="keyword">import</span> BookInfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># 和 models.py 不能冲突</span></span><br><span class="line">    btitle = serializers.CharField(max_length=<span class="number">20</span>, validators=[UniqueValidator(queryset=BookInfo.objects.<span class="built_in">all</span>())])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        <span class="comment"># 当前序列化器在序列化数据的时候,使用哪个模型</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;btitle&#x27;</span>, <span class="string">&#x27;bpub_date&#x27;</span>, <span class="string">&#x27;bread&#x27;</span>, <span class="string">&#x27;bcomment&#x27;</span>]</span><br></pre></td></tr></table></figure><p>runserver, 效果：不能再添加一本书名重复的书籍。</p><p>另外可以关注：</p><ul><li><code>UniqueForDateValidator</code></li><li><code>UniqueForMonthValidator</code></li><li><code>UniqueForYearValidator</code></li></ul><h2 id="Advanced-field-defaults"><a href="#Advanced-field-defaults" class="headerlink" title="Advanced field defaults"></a>Advanced field defaults</h2><p>CurrentUserDefault:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./books/serializers.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> rest_framework.validators <span class="keyword">import</span> UniqueValidator</span><br><span class="line"><span class="keyword">from</span> books.models <span class="keyword">import</span> BookInfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># 和 models.py 不能冲突</span></span><br><span class="line">    btitle = serializers.CharField(max_length=<span class="number">20</span>, validators=[UniqueValidator(queryset=BookInfo.objects.<span class="built_in">all</span>())])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示登录的用户（仅展示功能，这个效果意味不明）</span></span><br><span class="line">    owner = serializers.CharField(</span><br><span class="line">        default=serializers.CurrentUserDefault()</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        <span class="comment"># 当前序列化器在序列化数据的时候,使用哪个模型</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;btitle&#x27;</span>, <span class="string">&#x27;bpub_date&#x27;</span>, <span class="string">&#x27;bread&#x27;</span>, <span class="string">&#x27;bcomment&#x27;</span>, <span class="string">&#x27;owner&#x27;</span>]</span><br></pre></td></tr></table></figure><p>效果：展示已经登录的用户。</p><h1 id="Permissions"><a href="#Permissions" class="headerlink" title="Permissions"></a>Permissions</h1><p>在全局 settings 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: [   <span class="comment"># add</span></span><br><span class="line">        <span class="string">&#x27;rest_framework.permissions.IsAuthenticated&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：访问网站的任何资源，若未登录，都会提示 <code>Authentication credentials were not provided.</code></p><p>为了之后的演示，我们将上面的新增代码注释掉。</p><p>在 <code>./guide/views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view, permission_classes</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@permission_classes(<span class="params">[IsAuthenticated]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example_view</span>(<span class="params">request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">    content = &#123;</span><br><span class="line">        <span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;request was permitted&#x27;</span>  <span class="comment"># 注意，文本显示允许</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Response(content)</span><br></pre></td></tr></table></figure><p>在 <code>./guide/urls.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;upload/&lt;str:filename&gt;/&#x27;</span>, FileUploadView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;simple_html_view/&#x27;</span>, simple_html_view),</span><br><span class="line">    path(<span class="string">&#x27;example_view/&#x27;</span>, example_view),  <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>runserver, 在未登录状态下访问 <code>127.0.0.1:8000/example_view/</code> 提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authentication credentials were not provided.</span><br></pre></td></tr></table></figure><p>若登录，则提示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;request was permitted&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>另外可以关注 API Reference 里面的：</p><ul><li>IsAuthenticated</li><li>IsAdminUser</li><li>IsAuthenticatedOrReadOnly</li></ul><h1 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h1><p>做缓存只能做查询的缓存，新增、修改、删除的缓存是做不了的。</p><p>我们对 snippet 页面做一个缓存：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./sinppets/views.py</span></span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer, UserSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics, permissions</span><br><span class="line"><span class="keyword">from</span> snippets.permissions <span class="keyword">import</span> IsOwnerOrReadOnly</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.cache <span class="keyword">import</span> cache_page</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.vary <span class="keyword">import</span> vary_on_cookie, vary_on_headers</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetViewSet</span>(viewsets.ModelViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This ViewSet automatically provides `list`, `create`, `retrieve`,</span></span><br><span class="line"><span class="string">    `update` and `destroy` actions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Additionally we also provide an extra `highlight` action.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line">    permission_classes = [permissions.IsAuthenticatedOrReadOnly,</span><br><span class="line">                          IsOwnerOrReadOnly]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写列表页</span></span><br><span class="line">    <span class="comment"># With cookie: cache requested url for each user for 2 hours</span></span><br><span class="line">                                            <span class="comment"># add ------------------</span></span><br><span class="line"><span class="meta">    @method_decorator(<span class="params">cache_page(<span class="params"><span class="number">60</span> * <span class="number">60</span> * <span class="number">2</span></span>)</span>) </span></span><br><span class="line"><span class="meta">    @method_decorator(<span class="params">vary_on_cookie</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line"></span><br><span class="line">        page = self.paginate_queryset(queryset)</span><br><span class="line">        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            serializer = self.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> self.get_paginated_response(serializer.data)</span><br><span class="line">        </span><br><span class="line">        serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(<span class="params">detail=<span class="literal">True</span>, renderer_classes=[renderers.StaticHTMLRenderer]</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">highlight</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        snippet = self.get_object()</span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_create</span>(<span class="params">self, serializer</span>):</span><br><span class="line">        serializer.save(owner=self.request.user) </span><br><span class="line">                                             <span class="comment"># ----------------- add</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserViewSet</span>(viewsets.ReadOnlyModelViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This viewset automatically provides `list` and `retrieve` actions.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetHighlight</span>(generics.GenericAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    renderer_classes = [renderers.StaticHTMLRenderer] <span class="comment"># 配置渲染器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        snippet = self.get_object() <span class="comment"># 在详情页中拿到了某个 snippet 对象</span></span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.reverse <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api_root</span>(<span class="params">request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> Response(&#123;</span><br><span class="line">        <span class="string">&#x27;users&#x27;</span>: reverse(<span class="string">&#x27;user-list&#x27;</span>, request=request, <span class="built_in">format</span>=<span class="built_in">format</span>),</span><br><span class="line">        <span class="string">&#x27;snippets&#x27;</span>: reverse(<span class="string">&#x27;snippet-list&#x27;</span>, request=request, <span class="built_in">format</span>=<span class="built_in">format</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>没做缓存、刚设置缓存、设置缓存之后取数据是三种不同的速度，平均就时间而言：刚设置缓存 &gt; 没做缓存 &gt; 设置缓存之后。</p><p><img src="https://s2.loli.net/2024/11/28/tI9FopidhZOA6RC.jpg" alt="91-26.jpeg"></p><p>但是我们目前实现的缓存<strong>还比较低级</strong>。例如我们在 <code>127.0.0.1:8000/snippets/2/</code> 中删除一条数据，再次访问 <code>127.0.0.1:8000/snippets/</code>，会发现数据仍然存在，因为<strong>缓存没有失效</strong>（在后端的数据库中也可以印证，数据其实已经删除了）。</p><p>缓存需要在数据发生变更的时候失效，自己写，在 <code>perform</code> 里处理。不用过于担心，或者这个在 redis 中实现也比较方便。</p><h1 id="Throttling-限流"><a href="#Throttling-限流" class="headerlink" title="Throttling 限流"></a>Throttling 限流</h1><p>限流是为了防止爬虫。</p><p>在全局 setting 里：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_PERMISSION_CLASSES&#x27;: [</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.permissions.IsAuthenticated&#x27;,</span></span><br><span class="line">    <span class="comment"># ]</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: [   <span class="comment"># ------------------------ add</span></span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.AnonRateThrottle&#x27;</span>,  <span class="comment"># 匿名的</span></span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.UserRateThrottle&#x27;</span>   <span class="comment"># 已经登录的</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;1/sec&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;500/day&#x27;</span></span><br><span class="line">    &#125;                               <span class="comment"># ------------------------- add</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：未登录，则一秒内最多访问一次；登录，则每天可以访问 500 次（随便设的）。</p><p>下面尝试局部的限流：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局 settings</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_PERMISSION_CLASSES&#x27;: [</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.permissions.IsAuthenticated&#x27;,</span></span><br><span class="line">    <span class="comment"># ]</span></span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_THROTTLE_CLASSES&#x27;: [</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.throttling.AnonRateThrottle&#x27;,  # 匿名的</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.throttling.UserRateThrottle&#x27;   # 已经登录的</span></span><br><span class="line">    <span class="comment"># ],</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;1/hour&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;10/min&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/views.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExampleView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    throttle_classes = [UserRateThrottle]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;request was permitted&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response(content)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;upload/&lt;str:filename&gt;/&#x27;</span>, FileUploadView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;simple_html_view/&#x27;</span>, simple_html_view),</span><br><span class="line">    path(<span class="string">&#x27;example_view/&#x27;</span>, example_view),</span><br><span class="line">    path(<span class="string">&#x27;example_view1/&#x27;</span>, ExampleView.as_view()),  <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>上面的是用类，下面尝试用视图函数来实现：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> FileUploadParser</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileUploadView</span>(views.APIView):</span><br><span class="line">    parser_classes = [FileUploadParser]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, filename, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        file_obj = request.data[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="comment"># do some stuff with uploaded file</span></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="keyword">return</span> Response(status=<span class="number">204</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view, renderer_classes</span><br><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> StaticHTMLRenderer</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@renderer_classes(<span class="params">[StaticHTMLRenderer]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_html_view</span>(<span class="params">request</span>):</span><br><span class="line">    data = <span class="string">&#x27;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, world&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> Response(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Comment.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CommentSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Event.objects.<span class="built_in">all</span>().order_by(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    serializer_class = EventSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CreateUserSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlbumViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Album.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = AlbumSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrackViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Track.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = TrackSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view, permission_classes, throttle_classes <span class="comment"># add</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@permission_classes(<span class="params">[IsAuthenticated]</span>)</span></span><br><span class="line"><span class="meta">@throttle_classes(<span class="params">[UserRateThrottle]</span>)  </span><span class="comment"># add</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example_view</span>(<span class="params">request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">    content = &#123;</span><br><span class="line">        <span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;request was permitted&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Response(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExampleView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    throttle_classes = [UserRateThrottle]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;request was permitted&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response(content)</span><br></pre></td></tr></table></figure><p>runserver, 在 <code>127.0.0.1:8000/example_view/</code> 实现了类似的效果。</p><p><strong>如何识别客户端？</strong></p><blockquote><p>要限流，就必须识别客户端。DRF 如何判断、区分当前客户端的身份呢？<br>DRF 利用 HTTP 报头的 <code>&#39;x-forwarded-for&#39;</code> 或 WSGI 中的 <code>&#39;remote-addr&#39;</code> 变量来唯一标识客户端的 IP 地址。如果存在 <code>&#39;x-forwarded-for&#39;</code> 头部属性，则使用它，否则将使用 WSGI 中 <code>&#39;remote-addr&#39;</code> 变量的值。<br>在代理的情况下，如果想严格标识唯一的客户端 IP 地址，需要首先设置 <code>NUM_PROXIES</code> 来配置 API 后面运行的应用程序代理的数量。此设置应为大于等于 0 的整数。如果设置为非零，则一旦排除了任何应用程序代理 IP 地址，客户端 IP 将被标识为 <code>&#39;x-forwarded-for&#39;</code> 头中的最后一个 IP 地址。如果设置为零，则 <code>&#39;remote-addr&#39;</code> 的值将始终用作标识 IP 地址。重要的是要清楚，如果配置了 <code>NUM_PROXIES</code>, 那么 NAT(网络地址转换) 网关后面的所有客户机都将被视为单个客户机。</p></blockquote><p><strong>新的需求：</strong> 我们发现，上面的限流都是读的全局 settings, 因此限流策略是一样的。但是我们想在不同的页面实现不同的限流策略。</p><p>新建文件 <code>./guide/throttles.py</code>: </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BurstRateThrottle</span>(<span class="title class_ inherited__">UserRateThrottle</span>):</span><br><span class="line">    scope = <span class="string">&#x27;burst&#x27;</span></span><br></pre></td></tr></table></figure><p>在 <code>./guide/views.py</code> 中，我们注释掉之前的，改写：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExampleView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment"># throttle_classes = [UserRateThrottle]</span></span><br><span class="line">    throttle_classes = [BurstRateThrottle]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;request was permitted&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response(content)</span><br></pre></td></tr></table></figure><p>在全家 settings 中配置：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_PERMISSION_CLASSES&#x27;: [</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.permissions.IsAuthenticated&#x27;,</span></span><br><span class="line">    <span class="comment"># ]</span></span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_THROTTLE_CLASSES&#x27;: [</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.throttling.AnonRateThrottle&#x27;,  # 匿名的</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.throttling.UserRateThrottle&#x27;   # 已经登录的</span></span><br><span class="line">    <span class="comment"># ],</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;1/hour&#x27;</span>,</span><br><span class="line">        <span class="comment"># &#x27;user&#x27;: &#x27;10/min&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;burst&#x27;</span>: <span class="string">&#x27;5/min&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一种更简单的方法：</strong> 去官网查找内容 <code>ScopedRateThrottle</code> .</p><h1 id="Filtering"><a href="#Filtering" class="headerlink" title="Filtering"></a>Filtering</h1><p>之前已经装过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-filter</span><br></pre></td></tr></table></figure><p>在全局 settings 中注册应用：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;books&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;snippets&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;guide&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django_filters&#x27;</span>  <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在全局 settings 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_PERMISSION_CLASSES&#x27;: [</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.permissions.IsAuthenticated&#x27;,</span></span><br><span class="line">    <span class="comment"># ]</span></span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_THROTTLE_CLASSES&#x27;: [</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.throttling.AnonRateThrottle&#x27;,  # 匿名的</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.throttling.UserRateThrottle&#x27;   # 已经登录的</span></span><br><span class="line">    <span class="comment"># ],</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;1/hour&#x27;</span>,</span><br><span class="line">        <span class="comment"># &#x27;user&#x27;: &#x27;10/min&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;burst&#x27;</span>: <span class="string">&#x27;5/min&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;DEFAULT_FILTER_BACKENDS&#x27;</span>: [<span class="string">&#x27;django_filters.rest_framework.DjangoFilterBackend&#x27;</span>], <span class="comment"># add</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方便起见，我们修改一下 <code>./guide/serializers.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrackSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Track</span><br><span class="line">        fields = [<span class="string">&#x27;album&#x27;</span>, <span class="string">&#x27;order&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;duration&#x27;</span>]</span><br></pre></td></tr></table></figure><p>现在我们具体地实现一下过滤功能：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> filters</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrackViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    filter_backends = [DjangoFilterBackend,filters.SearchFilter,filters.OrderingFilter]</span><br><span class="line">    filterset_fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">    search_fields = [<span class="string">&#x27;order&#x27;</span>,<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;album__album_name&#x27;</span>] <span class="comment">#外键加入两个下划线</span></span><br><span class="line">    ordering_fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line">    queryset = Track.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = TrackSerializer</span><br></pre></td></tr></table></figure><p>runserver, easy to play around. worked.</p><p>目前为止的代码：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1128">https://github.com/dropsong/py_webServer/tree/master/day1128</a></p><h1 id="Pagination-1"><a href="#Pagination-1" class="headerlink" title="Pagination"></a>Pagination</h1><p><strong>我们另起一份代码。</strong></p><p>在 <code>./guide/views.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页类    add</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StandardResultsSetPagination</span>(<span class="title class_ inherited__">PageNumberPagination</span>):</span><br><span class="line">    page_size = <span class="number">2</span>   <span class="comment"># 数字小是仅作演示</span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;page_size&#x27;</span>  <span class="comment"># 这个名字不能改</span></span><br><span class="line">    max_page_size = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrackViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    filter_backends = [DjangoFilterBackend,filters.SearchFilter,filters.OrderingFilter]</span><br><span class="line">    filterset_fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">    search_fields = [<span class="string">&#x27;order&#x27;</span>,<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;album__album_name&#x27;</span>] <span class="comment">#外键加入两个下划线</span></span><br><span class="line">    ordering_fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line">    queryset = Track.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = TrackSerializer</span><br><span class="line">    pagination_class = StandardResultsSetPagination  <span class="comment"># add</span></span><br></pre></td></tr></table></figure><p>为了防止之前分页设置的影响，我们在全局 settings 中注释掉：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_PAGINATION_CLASS&#x27;: &#x27;rest_framework.pagination.PageNumberPagination&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;PAGE_SIZE&#x27;: 2,</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;1/hour&#x27;</span>,</span><br><span class="line">        <span class="comment"># &#x27;user&#x27;: &#x27;10/min&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;burst&#x27;</span>: <span class="string">&#x27;5/min&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;DEFAULT_FILTER_BACKENDS&#x27;</span>: [<span class="string">&#x27;django_filters.rest_framework.DjangoFilterBackend&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>runserver, on front page <code>127.0.0.1:8000/tracks/</code> we see it worked.</p><p>但是这和之前的有什么区别呢？</p><p>我们可以手动地调整请求 url 为： <code>127.0.0.1:8000/tracks/?page_size=3</code>, 可以看到很好地实现了效果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;h2 id=&quot;前后端不分离&quot;&gt;&lt;a href=&quot;#前后端不分离&quot; class=&quot;headerlink&quot; title=&quot;前后端不分离&quot;&gt;&lt;/a&gt;前</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="DRF" scheme="https://dropsong.github.io/tags/DRF/"/>
    
    <category term="后端" scheme="https://dropsong.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Django" scheme="https://dropsong.github.io/tags/Django/"/>
    
    <category term="postman" scheme="https://dropsong.github.io/tags/postman/"/>
    
    <category term="网页缓存" scheme="https://dropsong.github.io/tags/%E7%BD%91%E9%A1%B5%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Python 高级</title>
    <link href="https://dropsong.github.io/posts/eadf1d9.html"/>
    <id>https://dropsong.github.io/posts/eadf1d9.html</id>
    <published>2024-10-22T12:41:29.000Z</published>
    <updated>2024-10-31T13:09:45.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p>内网穿透原理图：</p><p><img src="https://s2.loli.net/2024/10/21/zoUnOfhdAH7kBEx.png" alt="90-1.png"></p><p>但是这种技术妨碍了 ISP 收互联网企业的带宽费用，因此 ISP 不会喜欢这种技术。</p><p>代码：<br><a href="https://github.com/dropsong/py_webServer">https://github.com/dropsong/py_webServer</a></p><h1 id="GIL（全局解释器锁）"><a href="#GIL（全局解释器锁）" class="headerlink" title="GIL（全局解释器锁）"></a>GIL（全局解释器锁）</h1><p>Python 语言和 GIL 没有关系。仅仅是由于<strong>历史原因</strong>在 Cpython 虚拟机(解释器)，<strong>难以移除</strong> GIL。</p><p>GIL：全局解释器锁。<strong>每个线程在执行的过程都需要先获取 GIL</strong>，保证同一时刻只有一个线程可以执行代码。</p><p>线程释放 GIL 锁的情况： 在 IO 操作等可能会引起阻塞的 system call 之前，可以暂时释放 GIL，但在执行完毕后，必须重新获取 GIL，Python 3.x 使用计时器（执行时间达到阈值后，当前线程释放GIL）或 Python 2.x tickets 计数达到 100</p><p><strong>Python 使用多进程是可以利用多核的 CPU 资源的。</strong></p><p><strong>多线程爬取比单线程性能有提升</strong>，因为遇到 IO 阻塞会自动释放 GIL 锁</p><h1 id="私有化"><a href="#私有化" class="headerlink" title="私有化"></a>私有化</h1><ul><li><code>xx</code>: 公有变量</li><li><code>_x</code>: 单前置下划线，私有化属性或方法，<code>from somemodule import *</code> 禁止导入，类对象和子类可以访问</li><li><code>__xx</code>：双前置下划线，避免与子类中的属性命名冲突，无法在外部直接访问（名字重整所以访问不到）</li><li><code>__xx__</code>:双前后下划线，用户名字空间的魔法对象或属性。例如:<code>__init__</code> ，<strong>不要自己发明这样的名字</strong></li><li><code>xx_</code>:单后置下划线，用于避免与 Python 关键词的冲突</li></ul><h1 id="模块导入问题"><a href="#模块导入问题" class="headerlink" title="模块导入问题"></a>模块导入问题</h1><p>不可变类型的全局变量用 from 方式导入的时候，相当于一份拷贝，在一个文件中修改，对另一个文件中的值没有影响。</p><h1 id="多继承的解决方案"><a href="#多继承的解决方案" class="headerlink" title="多继承的解决方案"></a>多继承的解决方案</h1><p>总结：</p><ol><li>使用 <code>super()</code></li><li>使用 <code>*args</code>、<code>**kwargs</code></li></ol><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;******多继承使用 super().__init__ 发生的状态******&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, *args, **kwargs</span>): <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;parent 的 init 开始被调用&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;parent 的 init 结束被调用&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son1</span>(<span class="title class_ inherited__">Parent</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, *args, **kwargs</span>): <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Son1 的 init 开始被调用&#x27;</span>)</span><br><span class="line">        self.age = age</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, *args, **kwargs) <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Son1 的 init 结束被调用&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span>(<span class="title class_ inherited__">Parent</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender, *args, **kwargs</span>): <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Son2 的 init 开始被调用&#x27;</span>)</span><br><span class="line">        self.gender = gender</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, *args, **kwargs) <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Son2 的 init 结束被调用&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Grandson</span>(Son1, Son2):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, gender</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Grandson 的 init 开始被调用&#x27;</span>)</span><br><span class="line">        <span class="comment"># 多继承时，相对于使用类名.__init__方法，要把每个父类全部写一遍</span></span><br><span class="line">        <span class="comment"># 而 super 只用一句话，执行了全部父类的方法，这也是为何多继承需要全部传参的一个原因</span></span><br><span class="line">        <span class="comment"># super(Grandson, self).__init__(name, age, gender)</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age, gender)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Grandson 的 init 结束被调用&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Grandson.__mro__) <span class="comment">#打印出来顺序是谁，将来调用的就是谁</span></span><br><span class="line">gs = Grandson(<span class="string">&#x27;grandson&#x27;</span>, <span class="number">12</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;姓名：&#x27;</span>, gs.name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;年龄：&#x27;</span>, gs.age)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;性别：&#x27;</span>, gs.gender)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;******多继承使用 super().__init__ 发生的状态******\n\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">******多继承使用 super().__init__ 发生的状态******</span></span><br><span class="line"><span class="string">(&lt;class &#x27;__main__.Grandson&#x27;&gt;, &lt;class &#x27;__main__.Son1&#x27;&gt;, &lt;class &#x27;__main__.Son2&#x27;&gt;, &lt;class &#x27;__main__.Parent&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span></span><br><span class="line"><span class="string">Grandson 的 init 开始被调用</span></span><br><span class="line"><span class="string">Son1 的 init 开始被调用</span></span><br><span class="line"><span class="string">Son2 的 init 开始被调用</span></span><br><span class="line"><span class="string">parent 的 init 开始被调用</span></span><br><span class="line"><span class="string">parent 的 init 结束被调用</span></span><br><span class="line"><span class="string">Son2 的 init 结束被调用</span></span><br><span class="line"><span class="string">Son1 的 init 结束被调用</span></span><br><span class="line"><span class="string">Grandson 的 init 结束被调用</span></span><br><span class="line"><span class="string">姓名： grandson</span></span><br><span class="line"><span class="string">年龄： 12</span></span><br><span class="line"><span class="string">性别： 男</span></span><br><span class="line"><span class="string">******多继承使用 super().__init__ 发生的状态******</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="静态方法和类方法"><a href="#静态方法和类方法" class="headerlink" title="静态方法和类方法"></a>静态方法和类方法</h1><h2 id="类属性、实例属性"><a href="#类属性、实例属性" class="headerlink" title="类属性、实例属性"></a>类属性、实例属性</h2><p>实例属性属于对象，类属性属于类。</p><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Province</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># 类属性</span></span><br><span class="line">    country = <span class="string">&#x27;中国&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="comment"># 实例属性</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个实例对象</span></span><br><span class="line">obj = Province(<span class="string">&#x27;山东省&#x27;</span>)</span><br><span class="line"><span class="comment"># 直接访问实例属性</span></span><br><span class="line"><span class="built_in">print</span>(obj.name)</span><br><span class="line"><span class="comment"># 直接访问类属性</span></span><br><span class="line">Province.country</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">山东省</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>实例属性需要通过对象来访，类属性通过类访问。</strong></p><p>类属性在内存中只保存一份，实例属性在每个对象中都要保存一份。</p><h2 id="实例方法、静态方法、类方法"><a href="#实例方法、静态方法、类方法" class="headerlink" title="实例方法、静态方法、类方法"></a>实例方法、静态方法、类方法</h2><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ord_func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 定义实例方法，至少有一个 self 参数 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># print(self.name)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;实例方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">class_func</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 定义类方法，至少有一个 cls 参数 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;类方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">static_func</span>():</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 定义静态方法 ，无默认参数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;静态方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f = Foo(<span class="string">&quot;中国&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用实例方法</span></span><br><span class="line">f.ord_func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用类方法</span></span><br><span class="line">Foo.class_func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用静态方法</span></span><br><span class="line">Foo.static_func()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">实例方法</span></span><br><span class="line"><span class="string">类方法</span></span><br><span class="line"><span class="string">静态方法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="property-属性"><a href="#property-属性" class="headerlink" title="property 属性"></a>property 属性</h1><p>一种懒人方法，可以不用写括号。</p><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;I am func&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 property 属性</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;I am prop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">foo_obj = Foo()</span><br><span class="line">foo_obj.func() <span class="comment"># 调用实例方法</span></span><br><span class="line">foo_obj.prop <span class="comment"># 调用 property 属性</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">I am func</span></span><br><span class="line"><span class="string">I am prop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>property 属性可以用来实现只能读不能写的属性。 <del>（想必这就是莽蛇语言的独到之处了吧）</del></p><p>但是也可以有别的方法去写：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Goods</span>:</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">price</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;@property&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @price.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">price</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;@price.setter&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @price.deleter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">price</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;@price.deleter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = Goods()</span><br><span class="line">obj.price </span><br><span class="line">obj.price = <span class="number">123</span> <span class="comment"># 自动执行 @price.setter 修饰的 price 方法，并将 123 赋值给方法的参数</span></span><br><span class="line"><span class="keyword">del</span> obj.price <span class="comment"># 自动执行 @price.deleter 修饰的 price 方法</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@property</span></span><br><span class="line"><span class="string">@price.setter</span></span><br><span class="line"><span class="string">@price.deleter</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>使用类属性的方式创建 property 属性</strong>时，经典类和新式类无区别：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;laowang&#x27;</span></span><br><span class="line"></span><br><span class="line">    BAR = <span class="built_in">property</span>(get_bar)</span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">reuslt = obj.BAR <span class="comment"># 自动调用 get_bar 方法，并获取方法的返回值</span></span><br><span class="line"><span class="built_in">print</span>(reuslt)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">laowang</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>上面这种写法可以拓展为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;getter...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;laowang&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_bar</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;必须两个参数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;setter...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;set value&#x27;</span> + value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">del_bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;deleter...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;laowang&#x27;</span></span><br><span class="line"></span><br><span class="line">    BAR = <span class="built_in">property</span>(get_bar, set_bar, del_bar, <span class="string">&quot;description...&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">obj.BAR   <span class="comment"># 自动调用第一个参数中定义的方法：get_bar</span></span><br><span class="line">obj.BAR = <span class="string">&quot;alex&quot;</span>  <span class="comment"># 自动调用第二个参数中定义的方法：set_bar 方法，并将“alex”当作参数传入</span></span><br><span class="line">desc = Foo.BAR.__doc__  <span class="comment"># 自动获取第四个参数中设置的值：description...</span></span><br><span class="line"><span class="built_in">print</span>(desc)</span><br><span class="line"><span class="keyword">del</span> obj.BAR  <span class="comment"># 自动调用第三个参数中定义的方法：del_bar 方法</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">getter...</span></span><br><span class="line"><span class="string">setter...</span></span><br><span class="line"><span class="string">description...</span></span><br><span class="line"><span class="string">deleter...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>使用 property 升级 getter 和 setter 方法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Money</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__money = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getMoney</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__money</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setMoney</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, <span class="built_in">int</span>):</span><br><span class="line">            self.__money = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;error:不是整型数字&quot;</span>)</span><br><span class="line">            <span class="comment"># 定义一个属性，当对这个 money 设置值时调用 setMoney,当获取值时调用 getMoney</span></span><br><span class="line"></span><br><span class="line">    money = <span class="built_in">property</span>(getMoney, setMoney)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Money()</span><br><span class="line">a.money = <span class="number">100</span> <span class="comment"># 调用 setMoney 方法</span></span><br><span class="line"><span class="built_in">print</span>(a.money) <span class="comment"># 调用 getMoney 方法</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="魔法属性-call"><a href="#魔法属性-call" class="headerlink" title="魔法属性 call"></a>魔法属性 call</h1><p>对象后面加括号，触发执行。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__call__&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = Foo() <span class="comment"># 执行 __init__</span></span><br><span class="line">obj() <span class="comment"># 执行 __call__&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">__call__</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>莽蛇语言魅力时刻。</p><h1 id="with-与“上下文管理器”"><a href="#with-与“上下文管理器”" class="headerlink" title="with 与“上下文管理器”"></a>with 与“上下文管理器”</h1><p>场景：应用程序打开某些资源并执行完业务逻辑之后，必须做的一件事就是要关闭（断开）该资源。</p><p><strong>普通版：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">m1</span>():</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    f.write(<span class="string">&quot;python 之禅&quot;</span>)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>这样写有一个潜在的问题，如果在调用 write 的过程中，出现了异常进而导致后续代码无法继续执行，close 方法无法被正常调用，因此资源就会一直被该程序占用者释放。那么该如何改进代码呢？</p><p><strong>进阶版：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">m2</span>():</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f.write(<span class="string">&quot;python 之禅&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;oops error&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p>缺点是写起来太麻烦。</p><p><strong>高级版：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">m3</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;Python 之禅&quot;</span>)</span><br></pre></td></tr></table></figure><p>一种更加简洁、优雅的方式就是用 <strong>with 关键字</strong>。类似于 C++ 的 RAII 。</p><p><strong>上下文管理器</strong>的实现和魔法属性 <code>__enter__()</code> 和 <code>__exit__()</code> 有关，和 C++ 原理上差不多，但是碍于 Python 混乱的语法，稍微显得麻烦一点，此处略去。</p><p>实现上下文管理器的另外方式：<br>Python 还提供了一个 contextmanager 的装饰器，更进一步简化了上下文管理器的实现方式。通过 yield 将函数分割成两部分，yield 之前的语句在 <code>__enter__</code> 方法中执行，yield 之后的语句在 <code>__exit__</code> 方法中执行。紧跟在 yield 后面的值是函数的返回值。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_open</span>(<span class="params">path, mode</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(path, mode)</span><br><span class="line">        <span class="keyword">yield</span> f</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="keyword">with</span> my_open(<span class="string">&#x27;out.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;hello , the simplest context manager&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="MySQL-知识补充"><a href="#MySQL-知识补充" class="headerlink" title="MySQL 知识补充"></a>MySQL 知识补充</h1><p>绕个弯补充一下，之后会可能会用到。</p><h2 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h2><p>例子：</p><p><img src="https://s2.loli.net/2024/10/23/5BrHzRV8aN9pfm3.png" alt="90-2.png"></p><p>用字符串拼接的方式去进行 sql 是非常危险的。</p><p>解决方法，直接传到 <code>execute()</code> 中，不要分两步写：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">params = [find_name]</span><br><span class="line">count = cs1.execute(<span class="string">&#x27;select * from goods where name=%s&#x27;</span>, params)</span><br></pre></td></tr></table></figure><h2 id="账户管理"><a href="#账户管理" class="headerlink" title="账户管理"></a>账户管理</h2><p>在生产环境下操作数据库时，绝对不可以使用 root 账户连接，而是创建特定的账户，授予这个账户特定的操作权限。</p><p>MySQL 的账户可以分为以下几种：</p><ul><li>服务实例级账号：启动了一个 mysql，即为一个数据库实例；如果某用户如 root,拥有服务实例级分配的权限，那么该账号就可以删除所有的数据库、连同这些库中的表</li><li>数据库级别账号：对特定数据库执行增删改查的所有操作</li><li>数据表级别账号：对特定表执行增删改查等所有操作</li><li>字段级别的权限：对某些表的特定字段进行操作</li><li>存储程序级别的账号：对存储程序进行增删改查的操作</li></ul><p>注册新用户及之后的一些操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> mysql.user;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> mysql.infoschema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.session    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.sys        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;yanfei&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> akashi.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;yanfei&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> mysql.user;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> mysql.infoschema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.session    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.sys        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> yanfei           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>使用 <code>sudo mysql -u yanfei -p</code> 进入之后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> akashi             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> use akashi;</span><br><span class="line">Reading <span class="keyword">table</span> information <span class="keyword">for</span> completion <span class="keyword">of</span> <span class="keyword">table</span> <span class="keyword">and</span> <span class="keyword">column</span> names</span><br><span class="line">You can turn off this feature <span class="keyword">to</span> <span class="keyword">get</span> a quicker startup <span class="keyword">with</span> <span class="operator">-</span>A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_akashi <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> goods            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> miaochuan        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> goods limit <span class="number">5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------------+-----------+------------+----------+------------------+------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name                        <span class="operator">|</span> cate_name <span class="operator">|</span> brand_name <span class="operator">|</span> price    <span class="operator">|</span> is_show          <span class="operator">|</span> is_saleoff             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------------+-----------+------------+----------+------------------+------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> r510vc <span class="number">15.6</span> 英寸笔记本      <span class="operator">|</span> 笔记本    <span class="operator">|</span> 华硕       <span class="operator">|</span> <span class="number">3399.000</span> <span class="operator">|</span> <span class="number">0x01</span>             <span class="operator">|</span> <span class="number">0x00</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> g150th <span class="number">15.6</span> 英寸游戏本      <span class="operator">|</span> 游戏本    <span class="operator">|</span> 雷神       <span class="operator">|</span> <span class="number">8499.000</span> <span class="operator">|</span> <span class="number">0x01</span>             <span class="operator">|</span> <span class="number">0x00</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> x550cc <span class="number">15.6</span> 英寸笔记本      <span class="operator">|</span> 笔记本    <span class="operator">|</span> 华硕       <span class="operator">|</span> <span class="number">2799.000</span> <span class="operator">|</span> <span class="number">0x01</span>             <span class="operator">|</span> <span class="number">0x00</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> x240 超极本                 <span class="operator">|</span> 超级本    <span class="operator">|</span> 联想       <span class="operator">|</span> <span class="number">4880.000</span> <span class="operator">|</span> <span class="number">0x01</span>             <span class="operator">|</span> <span class="number">0x00</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> u330p <span class="number">13.3</span> 英寸超极本       <span class="operator">|</span> 超级本    <span class="operator">|</span> 联想       <span class="operator">|</span> <span class="number">4299.000</span> <span class="operator">|</span> <span class="number">0x01</span>             <span class="operator">|</span> <span class="number">0x00</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------------+-----------+------------+----------+------------------+------------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> goods <span class="keyword">values</span>(<span class="number">6</span>, 非常厉害的笔记本, 笔记本 ,联想, <span class="number">3333.0</span>);</span><br><span class="line">ERROR <span class="number">1142</span> (<span class="number">42000</span>): <span class="keyword">INSERT</span> command denied <span class="keyword">to</span> <span class="keyword">user</span> <span class="string">&#x27;yanfei&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">for</span> <span class="keyword">table</span> <span class="string">&#x27;goods&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="主从配置"><a href="#主从配置" class="headerlink" title="主从配置"></a>主从配置</h2><h3 id="主机操作"><a href="#主机操作" class="headerlink" title="主机操作"></a>主机操作</h3><p>在主机上配置账户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;backup&#x27;</span>@<span class="string">&#x27;192.168.19.129&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"># <span class="number">192.168</span><span class="number">.19</span><span class="number">.129</span> 是从机的 IP</span><br><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;backup&#x27;</span>@<span class="string">&#x27;192.168.19.129&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>修改 mysql 的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"></span><br><span class="line">log_bin = /var/log/mysql/mysql-bin.log</span><br><span class="line">server-id = 1</span><br><span class="line">expire_logs_days = 1</span><br><span class="line">max_binlog_size = 100M</span><br><span class="line">binlog_do_db = <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>重启 mysql 服务（重启之前确保 test 数据库是存在的）:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure><p>查看二进制日志是否生成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;log_%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="从机操作"><a href="#从机操作" class="headerlink" title="从机操作"></a>从机操作</h3><p>修改 mysql 的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p>添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server-id = 2</span><br><span class="line">expire_logs_days = 10</span><br><span class="line">max_binlog_size = 100M</span><br></pre></td></tr></table></figure><p>重启服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure><p>配置主从库之间的通信：</p><p><img src="https://s2.loli.net/2024/10/24/oICvga6SjksDUmx.png" alt="90-3.png"></p><p>从机上设置从库（129 机）与主库（130 机）进行通信。先把从机的 test 数据库清空，模板：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span></span><br><span class="line">MASTER_HOST<span class="operator">=</span><span class="string">&#x27;master_host_name&#x27;</span>,</span><br><span class="line">MASTER_USER<span class="operator">=</span><span class="string">&#x27;replication_user_name&#x27;</span>,#backup</span><br><span class="line">MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;replication_password&#x27;</span>, #<span class="number">123</span></span><br><span class="line">MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;recorded_log_file_name&#x27;</span>, # mysql<span class="operator">-</span>bin<span class="number">.000056</span></span><br><span class="line">MASTER_LOG_POS<span class="operator">=</span>recorded_log_position; # <span class="number">155</span></span><br></pre></td></tr></table></figure><p>作为一个可以参考的实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER TO</span><br><span class="line">MASTER_HOST=&#x27;192.168.19.130&#x27;,</span><br><span class="line">MASTER_USER=&#x27;backup&#x27;,</span><br><span class="line">MASTER_PASSWORD=&#x27;123&#x27;,</span><br><span class="line">MASTER_LOG_FILE=&#x27;mysql-bin.000149&#x27;,</span><br><span class="line">MASTER_LOG_POS=155;</span><br></pre></td></tr></table></figure><p><code>START SLAVE;</code> 开启主从同步线程（关闭用 <code>stop slave</code>）。</p><p><code>show slave status\G</code> ，一个可能的输出是：</p><p><img src="https://s2.loli.net/2024/10/24/reZftIPqCJHKbL2.png" alt="90-4.png"></p><p>针对多个数据库，设置为：</p><p><img src="https://bu.dusays.com/2024/10/24/671a16fe29f2c.png" alt="90-5.png"></p><h1 id="迷你-web-框架"><a href="#迷你-web-框架" class="headerlink" title="迷你 web 框架"></a>迷你 web 框架</h1><p>本节实现一个 mini frame web 框架。功能类似一个迷你的 Django .</p><p><img src="https://s2.loli.net/2024/10/24/5JlHCr97Ten1Nqd.jpg" alt="90-6.jpeg"></p><h2 id="定义-WSGI-接口"><a href="#定义-WSGI-接口" class="headerlink" title="定义 WSGI 接口"></a>定义 WSGI 接口</h2><p>WSGI 接口定义非常简单，它只要求 Web 开发者实现一个函数，就可以响应 HTTP 请求。我们来看一个最简单的 Web 版本的“Hello World!”：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">application</span>(<span class="params">environ, start_response</span>):</span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure><p>上面的 <code>application()</code> 函数就是符合 WSGI 标准的一个 HTTP 处理函数，它接收两个参数：</p><ul><li><code>environ</code>：一个包含所有 HTTP 请求信息的 dict 对象。</li><li><code>start_response</code>：一个发送 HTTP 响应的函数。</li></ul><p><code>application()</code> 函数必须由 WSGI 服务器来调用。我们现在做的 web 服务器项目，就是一个既能解析静态网页，又能解析动态网页的服务器。</p><p>web 框架传递的字典的一个实际例子（不需要掌握）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x27;HTTP_ACCEPT_LANGUAGE&#x27;: &#x27;zh-cn&#x27;,</span><br><span class="line">    &#x27;wsgi.file_wrapper&#x27;: &lt;built-infunctionuwsgi_sendfile&gt;,</span><br><span class="line">    &#x27;HTTP_UPGRADE_INSECURE_REQUESTS&#x27;: &#x27;1&#x27;,</span><br><span class="line">    &#x27;uwsgi.version&#x27;: b&#x27;2.0.15&#x27;,</span><br><span class="line">    &#x27;REMOTE_ADDR&#x27;: &#x27;172.16.7.1&#x27;,</span><br><span class="line">    &#x27;wsgi.errors&#x27;: &lt;_io.TextIOWrappername=2mode=&#x27;w&#x27;encoding=&#x27;UTF-8&#x27;&gt;,</span><br><span class="line">    &#x27;wsgi.version&#x27;: (1,0),</span><br><span class="line">    &#x27;REMOTE_PORT&#x27;: &#x27;40432&#x27;,</span><br><span class="line">    &#x27;REQUEST_URI&#x27;: &#x27;/&#x27;,</span><br><span class="line">    &#x27;SERVER_PORT&#x27;: &#x27;8000&#x27;,</span><br><span class="line">    &#x27;wsgi.multithread&#x27;: False,</span><br><span class="line">    &#x27;HTTP_ACCEPT&#x27;: &#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;,</span><br><span class="line">    &#x27;HTTP_HOST&#x27;: &#x27;172.16.7.152: 8000&#x27;,</span><br><span class="line">    &#x27;wsgi.run_once&#x27;: False,</span><br><span class="line">    &#x27;wsgi.input&#x27;: &lt;uwsgi._Inputobjectat0x7f7faecdc9c0&gt;,</span><br><span class="line">    &#x27;SERVER_PROTOCOL&#x27;: &#x27;HTTP/1.1&#x27;,</span><br><span class="line">    &#x27;REQUEST_METHOD&#x27;: &#x27;GET&#x27;,</span><br><span class="line">    &#x27;HTTP_ACCEPT_ENCODING&#x27;: &#x27;gzip,deflate&#x27;,</span><br><span class="line">    &#x27;HTTP_CONNECTION&#x27;: &#x27;keep-alive&#x27;,</span><br><span class="line">    &#x27;uwsgi.node&#x27;: b&#x27;ubuntu&#x27;,</span><br><span class="line">    &#x27;HTTP_DNT&#x27;: &#x27;1&#x27;,</span><br><span class="line">    &#x27;UWSGI_ROUTER&#x27;: &#x27;http&#x27;,</span><br><span class="line">    &#x27;SCRIPT_NAME&#x27;: &#x27;&#x27;,</span><br><span class="line">    &#x27;wsgi.multiprocess&#x27;: False,</span><br><span class="line">    &#x27;QUERY_STRING&#x27;: &#x27;&#x27;,</span><br><span class="line">    &#x27;PATH_INFO&#x27;: &#x27;/index.html&#x27;,</span><br><span class="line">    &#x27;wsgi.url_scheme&#x27;: &#x27;http&#x27;,</span><br><span class="line">    &#x27;HTTP_USER_AGENT&#x27;: &#x27;Mozilla/5.0(Macintosh;IntelMacOSX10_12_5)AppleWebKit/603.2.4(KHTML,likeGecko)Version/10.1.1Safari/603.2.4&#x27;,</span><br><span class="line">    &#x27;SERVER_NAME&#x27;: &#x27;ubuntu&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>如果请求是不是 html，是动态请求，后缀是 <code>.py</code>，那如何处理呢？</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># author luke</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WSGIServer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1. 创建套接字</span></span><br><span class="line">        self.tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 绑定</span></span><br><span class="line">        self.tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">7890</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 变为监听套接字</span></span><br><span class="line">        self.tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">service_client</span>(<span class="params">self, new_socket</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;为这个浏览器返回数据&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 接收浏览器发送过来的请求 ，即http请求</span></span><br><span class="line">        <span class="comment"># GET / HTTP/1.1</span></span><br><span class="line">        <span class="comment"># .....</span></span><br><span class="line">        request = new_socket.recv(<span class="number">1024</span>).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="comment"># print(&quot;&gt;&gt;&gt;&quot;*50)</span></span><br><span class="line">        <span class="comment"># print(request)</span></span><br><span class="line"></span><br><span class="line">        request_lines = request.splitlines()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&gt;&quot;</span> * <span class="number">20</span>)</span><br><span class="line">        <span class="built_in">print</span>(request_lines)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># GET /index.html HTTP/1.1</span></span><br><span class="line">        <span class="comment"># get post put del</span></span><br><span class="line">        file_name = <span class="string">&quot;&quot;</span></span><br><span class="line">        ret = re.<span class="keyword">match</span>(<span class="string">r&quot;[^/]+(/[^ ]*)&quot;</span>, request_lines[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            file_name = ret.group(<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># print(&quot;*&quot;*50, file_name)</span></span><br><span class="line">            <span class="keyword">if</span> file_name == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                file_name = <span class="string">&quot;/index.html&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 返回http格式的数据，给浏览器</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_name.endswith(<span class="string">&quot;.py&quot;</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;./html&quot;</span> + file_name, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                response = <span class="string">&quot;HTTP/1.1 404 NOT FOUND\r\n&quot;</span></span><br><span class="line">                response += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">                response += <span class="string">&quot;------file not found-----&quot;</span></span><br><span class="line">                new_socket.send(response.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                html_content = f.read()</span><br><span class="line">                f.close()</span><br><span class="line">                <span class="comment"># 2.1 准备发送给浏览器的数据---header</span></span><br><span class="line">                response = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">                response += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">                <span class="comment"># 2.2 准备发送给浏览器的数据---boy</span></span><br><span class="line">                <span class="comment"># response += &quot;hahahhah&quot;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将response header发送给浏览器</span></span><br><span class="line">                new_socket.send(response.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">                <span class="comment"># 将response body发送给浏览器</span></span><br><span class="line">                new_socket.send(html_content)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 2.2 如果是以.py结尾，那么就认为是动态资源的请求</span></span><br><span class="line">            header = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">            header += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">            body = <span class="string">&quot;hahahah %s &quot;</span> % time.ctime()</span><br><span class="line"></span><br><span class="line">            response = header + body</span><br><span class="line">            <span class="comment"># 发送response给浏览器</span></span><br><span class="line">            new_socket.send(response.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭套接</span></span><br><span class="line">        new_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_forever</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;用来完成整体的控制&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 4. 等待新客户端的链接</span></span><br><span class="line">            new_socket, client_addr = self.tcp_server_socket.accept()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 5. 为这个客户端服务</span></span><br><span class="line">            p = multiprocessing.Process(target=self.service_client, args=(new_socket,))</span><br><span class="line">            p.start()</span><br><span class="line"></span><br><span class="line">            new_socket.close()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭监听套接字</span></span><br><span class="line">        self.tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;控制整体，创建一个web 服务器对象，然后调用这个对象的run_forever方法运行&quot;&quot;&quot;</span></span><br><span class="line">    wsgi_server = WSGIServer()</span><br><span class="line">    wsgi_server.run_forever()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/10/25/ClMAvtNXp219oSa.png" alt="90-7.png"></p><p>上面的代码已经接下来的几个版本，参考代码：<br><a href="https://github.com/dropsong/py_webServer/tree/master/web_mini_frame">https://github.com/dropsong/py_webServer/tree/master/web_mini_frame</a></p><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>可以在函数里面定义函数，例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">line6</span>(<span class="params">k, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_line</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="built_in">print</span>(k*x+b)</span><br><span class="line">    <span class="keyword">return</span> create_line</span><br><span class="line"></span><br><span class="line"><span class="comment"># l1 是 create_line 函数，函数中 k 的值是 1，b 的值是 2</span></span><br><span class="line">l1 = line6(<span class="number">2</span>, <span class="number">3</span>) </span><br><span class="line">l1(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>函数、匿名函数、闭包、对象当做实参时有什么区别？</p><ol><li>匿名函数能够完成基本的<strong>简单功能</strong>，传递是这个函数的引用<strong>只有功能(lambda)</strong></li><li>普通函数能够完成<strong>较为复杂的功能</strong>，传递是这个函数的引用<strong>只有功能</strong></li><li>闭包能够将较为复杂的功能，传递是这个闭包中的<strong>函数以及数据</strong>，因此传递是功能+数据（<strong>相对于对象，占用空间少</strong>）</li><li>对象能够完成最为复杂的功能，传递是<strong>很多数据+很多功能</strong>，因此传递是功能+数据</li></ol><p><strong>闭包引用了外部函数的局部变量，若外部函数的局部变量没有及时释放，会消耗内存。</strong></p><p>闭包中对变量的修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个代码会报错</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    x = <span class="number">200</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----1----x=%d&quot;</span> % x)</span><br><span class="line">        x = <span class="number">100</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----2----x=%d&quot;</span> % x)</span><br><span class="line">    <span class="keyword">return</span> test2</span><br><span class="line"></span><br><span class="line">t1 = test1()</span><br><span class="line">t1()</span><br></pre></td></tr></table></figure><p>因为我们打印 x 时，没有提前定义，需要在打印之前增加 <code>nonlocal x</code> ，使用外部函数的变量。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以正常运行</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    x = <span class="number">200</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> x</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----1----x=%d&quot;</span> % x)</span><br><span class="line">        x = <span class="number">100</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----2----x=%d&quot;</span> % x)</span><br><span class="line">    <span class="keyword">return</span> test2</span><br><span class="line"></span><br><span class="line">t1 = test1()</span><br><span class="line">t1()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">----1----x=200</span></span><br><span class="line"><span class="string">----2----x=100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><h2 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h2><p>初创公司有 N 个业务部门，基础平台部门负责提供底层的功能，如：数据库操作、redis 调用、监控 API 等功能。业务部门使用基础功能时，只需调用基础平台提供的功能即可。如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############### 基础平台提供的功能如下 ###############</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f1&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f2&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f3</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f3&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f4</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f4&#x27;</span>)</span><br><span class="line"><span class="comment">############### 业务部门 A 调用基础平台提供的功能 ###############</span></span><br><span class="line">f1()</span><br><span class="line">f2()</span><br><span class="line">f3()</span><br><span class="line">f4()</span><br><span class="line"><span class="comment">############### 业务部门 B 调用基础平台提供的功能 ###############</span></span><br><span class="line">f1()</span><br><span class="line">f2()</span><br><span class="line">f3()</span><br><span class="line">f4()</span><br></pre></td></tr></table></figure><p>目前公司有条不紊的进行着，但是，以前基础平台的开发人员在写代码时候没有关注验证相关的问题，即：基础平台的提供的功能可以被任何人使用。现在需要对基础平台的所有功能<strong>进行重构，为平台提供的所有功能添加验证机制</strong>，即：执行功能前，先进行验证。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>遵循<strong>开放封闭原则</strong>，对拓展开放，对修改闭合。使用装饰器：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">w1</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="comment"># 验证 1</span></span><br><span class="line">        <span class="comment"># 验证 2</span></span><br><span class="line">        <span class="comment"># 验证 3</span></span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f3</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f4</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f4&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>实际例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 装饰器一定是内部有闭包的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_func</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----permission check1----&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----permission check2----&#x27;</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> call_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@set_func</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----test1-----&#x27;</span>)</span><br><span class="line"></span><br><span class="line">test1()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">----permission check1----</span></span><br><span class="line"><span class="string">----permission check2----</span></span><br><span class="line"><span class="string">----test1-----</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>关于一些原理上的细节：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_func</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--- 开始进行装饰 ---&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----permission check1----&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----permission check2----&#x27;</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> call_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@set_func</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----test1-----&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">--- 开始进行装饰 ---</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">即使没有调用 test1() ，</span></span><br><span class="line"><span class="string">这段代码也相当于执行了：</span></span><br><span class="line"><span class="string">test1 = set_func(test1)</span></span><br><span class="line"><span class="string">因此会有输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_func</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--- 开始进行装饰 ---&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_func</span>(<span class="params">a</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----permission check1----&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----permission check2----&#x27;</span>)</span><br><span class="line">        func(a)</span><br><span class="line">    <span class="keyword">return</span> call_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@set_func</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----test1----- %d&#x27;</span> % num)</span><br><span class="line"></span><br><span class="line">test1(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">--- 开始进行装饰 ---</span></span><br><span class="line"><span class="string">----permission check1----</span></span><br><span class="line"><span class="string">----permission check2----</span></span><br><span class="line"><span class="string">----test1----- 3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="多个装饰器装饰同一个函数"><a href="#多个装饰器装饰同一个函数" class="headerlink" title="多个装饰器装饰同一个函数"></a>多个装饰器装饰同一个函数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_first</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---开始进行装饰权限 1 的功能---&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_func</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---这是权限验证 1----&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> call_func</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_second</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---开始进行装饰权限 2 的功能---&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_func</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---这是权限验证 2----&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> call_func</span><br><span class="line"></span><br><span class="line"><span class="comment"># 离函数越近的先装饰</span></span><br><span class="line"><span class="meta">@add_first</span></span><br><span class="line"><span class="meta">@add_second</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----test1-----&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后装饰的先执行</span></span><br><span class="line">test1()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">---开始进行装饰权限 2 的功能---</span></span><br><span class="line"><span class="string">---开始进行装饰权限 1 的功能---</span></span><br><span class="line"><span class="string">---这是权限验证 1----</span></span><br><span class="line"><span class="string">---这是权限验证 2----</span></span><br><span class="line"><span class="string">----test1-----</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">一种解释：</span></span><br><span class="line"><span class="string">s = add_second(test1)</span></span><br><span class="line"><span class="string">f = add_first(s)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>一个更具体的例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义函数：完成包裹数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeBold</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapped</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;b&gt;&quot;</span> + fn() + <span class="string">&quot;&lt;/b&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数：完成包裹数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeItalic</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapped</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;i&gt;&quot;</span> + fn() + <span class="string">&quot;&lt;/i&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="meta">@makeBold</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world-1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@makeItalic</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world-2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@makeBold</span></span><br><span class="line"><span class="meta">@makeItalic</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test3</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world-3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test1())</span><br><span class="line"><span class="built_in">print</span>(test2())</span><br><span class="line"><span class="built_in">print</span>(test3())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;b&gt;hello world-1&lt;/b&gt;</span></span><br><span class="line"><span class="string">&lt;i&gt;hello world-2&lt;/i&gt;</span></span><br><span class="line"><span class="string">&lt;b&gt;&lt;i&gt;hello world-3&lt;/i&gt;&lt;/b&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>装饰器(decorator)功能有很多，具体来说：</p><ol><li>引入日志，在执行某个函数前或者函数后记录日志</li><li>函数执行时间统计</li><li>执行函数前预备处理</li><li>执行函数后清理功能</li><li>权限校验等场景</li><li>缓存</li><li>等</li></ol><h3 id="被装饰的函数带返回值"><a href="#被装饰的函数带返回值" class="headerlink" title="被装饰的函数带返回值"></a>被装饰的函数带返回值</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timefun</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapped_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s called at %s&quot;</span> % (func.__name__, ctime()))</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapped_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am foo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getInfo</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;----hahah---&#x27;</span></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">foo()</span><br><span class="line">ret=getInfo()</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">foo called at Sun Oct 27 22:30:36 2024</span></span><br><span class="line"><span class="string">I am foo</span></span><br><span class="line"><span class="string">foo called at Sun Oct 27 22:30:37 2024</span></span><br><span class="line"><span class="string">I am foo</span></span><br><span class="line"><span class="string">getInfo called at Sun Oct 27 22:30:37 2024</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>注意，上面的代码没有拿到返回值，应该修改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timefun</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapped_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s called at %s&quot;</span> % (func.__name__, ctime()))</span><br><span class="line">        <span class="keyword">return</span> func() <span class="comment"># modified</span></span><br><span class="line">    <span class="keyword">return</span> wrapped_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am foo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getInfo</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;----hahah---&#x27;</span></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">foo()</span><br><span class="line">ret=getInfo()</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">foo called at Sun Oct 27 22:35:25 2024</span></span><br><span class="line"><span class="string">I am foo</span></span><br><span class="line"><span class="string">foo called at Sun Oct 27 22:35:26 2024</span></span><br><span class="line"><span class="string">I am foo</span></span><br><span class="line"><span class="string">getInfo called at Sun Oct 27 22:35:26 2024</span></span><br><span class="line"><span class="string">----hahah---</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>一般情况下为了让装饰器更通用，都可以加上 return .</strong></p><h3 id="装饰器带参数"><a href="#装饰器带参数" class="headerlink" title="装饰器带参数"></a>装饰器带参数</h3><p>装饰器带参数，在原有装饰器的基础上，设置外部变量。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timefun_arg</span>(<span class="params">pre=<span class="string">&quot;hello&quot;</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timefun</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapped_func</span>():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s called at %s&quot;</span> % (func.__name__, pre))</span><br><span class="line">            <span class="keyword">return</span> func()</span><br><span class="line">        <span class="keyword">return</span> wrapped_func</span><br><span class="line">    <span class="keyword">return</span> timefun</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面的装饰过程</span></span><br><span class="line"><span class="comment"># 1. 调用 timefun_arg(&quot;wangdao&quot;)</span></span><br><span class="line"><span class="comment"># 2. 将步骤 1 得到的返回值，即 time_fun 返回， 然后 time_fun(foo)</span></span><br><span class="line"><span class="comment"># 3. 将 time_fun(foo)的结果返回，即 wrapped_func</span></span><br><span class="line"><span class="comment"># 4. 让 foo = wrapped_fun，即 foo 现在指向 wrapped_func</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun_arg(<span class="params"><span class="string">&quot;wangdao&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am foo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun_arg(<span class="params"><span class="string">&quot;python&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">too</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am too&quot;</span>)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo()</span><br><span class="line">too()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">too()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">foo called at wangdao</span></span><br><span class="line"><span class="string">I am foo</span></span><br><span class="line"><span class="string">foo called at wangdao</span></span><br><span class="line"><span class="string">I am foo</span></span><br><span class="line"><span class="string">too called at python</span></span><br><span class="line"><span class="string">I am too</span></span><br><span class="line"><span class="string">too called at python</span></span><br><span class="line"><span class="string">I am too</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><p>前期提要：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwds</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;I am call&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">I am call</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>装饰器函数其实是这样一个接口约束，它必须接受一个 callable 对象作为参数，然后返回一个 callable 对象。在 Python 中一般 callable 对象都是函数，但也有例外。只要某个对象重写了 <code>__call__()</code> 方法，那么这个对象就是 callable 的。</p><p>一个具体的例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func</span>):</span><br><span class="line">        self.__func = func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwds</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;I am call&#x27;</span>)</span><br><span class="line">        self.__func(*args, **kwds)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I am foo &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># t = Test(foo)</span></span><br><span class="line"><span class="comment"># t()</span></span><br><span class="line"></span><br><span class="line">foo(<span class="string">&#x27;akashi&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">I am call</span></span><br><span class="line"><span class="string">I am foo akashi</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="装饰后的注释问题"><a href="#装饰后的注释问题" class="headerlink" title="装饰后的注释问题"></a>装饰后的注释问题</h2><p>问题演示和解决方法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;decorator&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Calling decorated function...&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Docstring&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Called example function&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(example.__name__, example.__doc__) <span class="comment">#wper decorator</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">wper decorator</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_new_decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)   </span><span class="comment"># focus this</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;decorator&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Calling decorated function...&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_new_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example1</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;I am example1&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Called example1 function&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(example1.__name__, example1.__doc__) <span class="comment"># example Docstring</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">example1 I am example1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="迷你-web-框架（续）"><a href="#迷你-web-框架（续）" class="headerlink" title="迷你 web 框架（续）"></a>迷你 web 框架（续）</h1><p>本节概要：<br>之前，去替换 html 模板中的变量时，替换的内容是随意写的，现在要替换的内容是从 mysql 数据库中查出来的，并把装饰器应用到框架里。</p><h2 id="version-6"><a href="#version-6" class="headerlink" title="version 6"></a>version 6</h2><p>在之前的 version 5 基础上，作如下改变。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mini_frame.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># author luke</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">URL_FUNC_DICT = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">route</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_func</span>(<span class="params">func</span>):</span><br><span class="line">        URL_FUNC_DICT[url] = func</span><br><span class="line">        <span class="comment"># def call_func(*args, **kwargs):</span></span><br><span class="line">            <span class="comment"># return func(*args, **kwargs)</span></span><br><span class="line">        <span class="comment"># return call_func</span></span><br><span class="line">    <span class="keyword">return</span> set_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/index.py&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./templates/index.html&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#这是实际要从数据库里边查出来</span></span><br><span class="line">    my_stock_info = <span class="string">&quot;哈哈哈，我是本月最佳员工。。。。&quot;</span></span><br><span class="line"></span><br><span class="line">    content = re.sub(<span class="string">r&quot;\&#123;%content%\&#125;&quot;</span>, my_stock_info, content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/center.py&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">center</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./templates/center.html&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line"></span><br><span class="line">    my_stock_info = <span class="string">&quot;这里是从mysql查询出来的数据。。。&quot;</span></span><br><span class="line"></span><br><span class="line">    content = re.sub(<span class="string">r&quot;\&#123;%content%\&#125;&quot;</span>, my_stock_info, content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">application</span>(<span class="params">environ, start_response</span>):</span><br><span class="line">    <span class="comment"># 由mini_frame框架添加响应码和头部</span></span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)])</span><br><span class="line">    file_name = environ[<span class="string">&#x27;PATH_INFO&#x27;</span>]</span><br><span class="line">    <span class="comment"># file_name = &quot;/index.py&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> URL_FUNC_DICT[file_name]() <span class="comment"># 加括号是为了执行</span></span><br></pre></td></tr></table></figure><p>修改要点：</p><ul><li>使用字典替换 if 判断</li><li>使用装饰器实现路由功能</li></ul><h2 id="伪静态、静态、动态"><a href="#伪静态、静态、动态" class="headerlink" title="伪静态、静态、动态"></a>伪静态、静态、动态</h2><p>目前开发的网站其实都是动态网站，只是 URL 上有些区别，一般 URL 分为静态 URL、动态 URL、伪静态 URL 。</p><p><strong>静态 URL</strong> 类似于 <code>/news/2012-5-18/110.html</code> ，一般称为真静态 URL，每个网页<strong>有真实的物理路径</strong>，也就是真实存在服务器里的。</p><ul><li>网站打开速度快</li><li>网址结构比较友好，利于记忆</li><li>如果是中大型网站，则产生的页面特别多，不好管理</li><li>有利于 SEO</li></ul><p><strong>动态 URL</strong> 类似于 <code>/NewsMore.asp?id=5</code> 或者 <code>/DaiKuan.php?id=17</code> ，带有？号的 URL，一般称为动态网址，每个 URL 只是一个<strong>逻辑地址</strong>，并不是真实物理存在服务器硬盘里的。</p><ul><li>适合中大型网站，修改页面很方便</li><li>因为要进行运算，所以打开速度稍慢，不过这个可以忽略不计，服务器缓存技术可以解决该问题</li><li>URL 结构稍稍复杂，不利于记忆</li><li>搜索引擎已经能够很好地理解动态 URL，所以对 SEO 没有什么减分的影响（特别复杂的 URL 结构除外）</li></ul><p><strong>伪静态 URL</strong> 类似于 <code>/course/74.html</code> ，和真静态 URL 类似。通过伪静态规则把动态 URL 伪装成静态网址，也是<strong>逻辑地址</strong>，不存在物理地址。</p><ul><li>URL 比较友好，利于记忆</li><li>适合大中型网站，是个折中方案</li><li>设置麻烦，服务器要支持重写规则</li><li>增加服务器负担，速度变慢（虽然可以忽略）</li><li>可能造成动态 URL 和静态 URL 都被搜索引擎收录（可以用 robots 禁止掉动态地址）</li></ul><p>关于伪静态规则，一个具体的例子：</p><p><img src="https://bu.dusays.com/2024/10/28/671f575ce315f.png" alt="90-8.png"></p><h2 id="version-7"><a href="#version-7" class="headerlink" title="version 7"></a>version 7</h2><p>实现伪静态，作如下修改。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mini_frame.py</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">URL_FUNC_DICT = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">route</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_func</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="comment"># URL_FUNC_DICT[&quot;/index.py&quot;] = index</span></span><br><span class="line">        URL_FUNC_DICT[url] = func</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def call_func(*args, **kwargs):</span></span><br><span class="line">    <span class="comment">#   return func(*args, **kwargs)</span></span><br><span class="line">    <span class="comment"># return call_func</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> set_func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/index.html&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./templates/index.html&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line"></span><br><span class="line">    my_stock_info = <span class="string">&quot;哈哈哈哈 这是你的本月名称.....&quot;</span></span><br><span class="line"></span><br><span class="line">    content = re.sub(<span class="string">r&quot;\&#123;%content%\&#125;&quot;</span>, my_stock_info, content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/center.html&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">center</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./templates/center.html&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line"></span><br><span class="line">    my_stock_info = <span class="string">&quot;这里是从mysql查询出来的数据。。。&quot;</span></span><br><span class="line"></span><br><span class="line">    content = re.sub(<span class="string">r&quot;\&#123;%content%\&#125;&quot;</span>, my_stock_info, content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">application</span>(<span class="params">env, start_response</span>):</span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)])</span><br><span class="line"></span><br><span class="line">    file_name = env[<span class="string">&#x27;PATH_INFO&#x27;</span>]</span><br><span class="line">    <span class="comment"># file_name = &quot;/index.py&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># if file_name == &quot;/index.py&quot;:</span></span><br><span class="line">    <span class="comment">#     return index()</span></span><br><span class="line">    <span class="comment"># elif file_name == &quot;/center.py&quot;:</span></span><br><span class="line">    <span class="comment">#     return center()</span></span><br><span class="line">    <span class="comment"># else:</span></span><br><span class="line">    <span class="comment">#     return &#x27;Hello World! 我爱你中国....&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        func = URL_FUNC_DICT[file_name]</span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line">        <span class="comment"># return URL_FUNC_DICT[file_name]()</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ret:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;产生了异常：%s&quot;</span> % <span class="built_in">str</span>(ret)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># web_server.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># import dynamic.mini_frame</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WSGIServer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, port, app, static_path</span>):</span><br><span class="line">        <span class="comment"># 1. 创建套接字</span></span><br><span class="line">        self.tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 绑定</span></span><br><span class="line">        self.tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, port))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 变为监听套接字</span></span><br><span class="line">        self.tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">        self.application = app</span><br><span class="line">        self.static_path = static_path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">service_client</span>(<span class="params">self, new_socket</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;为这个客户端返回数据&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 接收浏览器发送过来的请求 ，即http请求  </span></span><br><span class="line">        <span class="comment"># GET / HTTP/1.1</span></span><br><span class="line">        <span class="comment"># .....</span></span><br><span class="line">        request = new_socket.recv(<span class="number">1024</span>).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="comment"># print(&quot;&gt;&gt;&gt;&quot;*50)</span></span><br><span class="line">        <span class="comment"># print(request)</span></span><br><span class="line">        <span class="keyword">if</span> request:</span><br><span class="line">            request_lines = request.splitlines()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&gt;&quot;</span>*<span class="number">20</span>)</span><br><span class="line">            <span class="built_in">print</span>(request_lines)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># GET /index.html HTTP/1.1</span></span><br><span class="line">            <span class="comment"># get post put del</span></span><br><span class="line">            file_name = <span class="string">&quot;&quot;</span></span><br><span class="line">            ret = re.<span class="keyword">match</span>(<span class="string">r&quot;[^/]+(/[^ ]*)&quot;</span>, request_lines[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> ret:</span><br><span class="line">                file_name = ret.group(<span class="number">1</span>)</span><br><span class="line">                <span class="comment"># print(&quot;*&quot;*50, file_name)</span></span><br><span class="line">                <span class="keyword">if</span> file_name == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                    file_name = <span class="string">&quot;/index.html&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 2. 返回http格式的数据，给浏览器</span></span><br><span class="line">            <span class="comment"># 2.1 如果请求的资源不是以.html结尾，那么就认为是静态资源（css/js/png，jpg等）</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> file_name.endswith(<span class="string">&quot;.html&quot;</span>):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    f = <span class="built_in">open</span>(self.static_path + file_name, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    response = <span class="string">&quot;HTTP/1.1 404 NOT FOUND\r\n&quot;</span></span><br><span class="line">                    response += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">                    response += <span class="string">&quot;------file not found-----&quot;</span></span><br><span class="line">                    new_socket.send(response.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    html_content = f.read()</span><br><span class="line">                    f.close()</span><br><span class="line">                    <span class="comment"># 2.1 准备发送给浏览器的数据---header</span></span><br><span class="line">                    response = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">                    response += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">                    <span class="comment"># 2.2 准备发送给浏览器的数据---boy</span></span><br><span class="line">                    <span class="comment"># response += &quot;hahahhah&quot;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 将response header发送给浏览器</span></span><br><span class="line">                    new_socket.send(response.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">                    <span class="comment"># 将response ic.mini_frame.applicationbody发送给浏览器</span></span><br><span class="line">                    new_socket.send(html_content)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 2.2 如果是以.py结尾，那么就认为是动态资源的请求</span></span><br><span class="line"></span><br><span class="line">                env = <span class="built_in">dict</span>()  <span class="comment"># 这个字典中存放的是web服务器要传递给 web框架的数据信息</span></span><br><span class="line">                env[<span class="string">&#x27;PATH_INFO&#x27;</span>] = file_name</span><br><span class="line">                <span class="comment"># &#123;&quot;PATH_INFO&quot;: &quot;/index.py&quot;&#125;</span></span><br><span class="line">                <span class="comment"># body = dynamic.mini_frame.application(env, self.set_response_header)</span></span><br><span class="line">                body = self.application(env, self.set_response_header)</span><br><span class="line"></span><br><span class="line">                header = <span class="string">&quot;HTTP/1.1 %s\r\n&quot;</span> % self.status</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> temp <span class="keyword">in</span> self.headers:</span><br><span class="line">                    header += <span class="string">&quot;%s:%s\r\n&quot;</span> % (temp[<span class="number">0</span>], temp[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">                header += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">                response = header+body</span><br><span class="line">                <span class="comment"># 发送response给浏览器</span></span><br><span class="line">                new_socket.send(response.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭套接</span></span><br><span class="line">        new_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_response_header</span>(<span class="params">self, status, headers</span>):</span><br><span class="line">        self.status = status</span><br><span class="line">        self.headers = [(<span class="string">&quot;server&quot;</span>, <span class="string">&quot;mini_web v8.8&quot;</span>)]</span><br><span class="line">        self.headers += headers</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_forever</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;用来完成整体的控制&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 4. 等待新客户端的链接</span></span><br><span class="line">            new_socket, client_addr = self.tcp_server_socket.accept()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 5. 为这个客户端服务</span></span><br><span class="line">            p = multiprocessing.Process(target=self.service_client, args=(new_socket,))</span><br><span class="line">            p.start()</span><br><span class="line"></span><br><span class="line">            new_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭监听套接字</span></span><br><span class="line">        self.tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;控制整体，创建一个web 服务器对象，然后调用这个对象的run_forever方法运行&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            port = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])  <span class="comment"># 7890</span></span><br><span class="line">            frame_app_name = sys.argv[<span class="number">2</span>]  <span class="comment"># mini_frame:application</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> ret:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;端口输入错误。。。。。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请按照以下方式运行:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;python3 xxxx.py 7890 mini_frame:application&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># mini_frame:application</span></span><br><span class="line">    ret = re.<span class="keyword">match</span>(<span class="string">r&quot;([^:]+):(.*)&quot;</span>, frame_app_name)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        frame_name = ret.group(<span class="number">1</span>)  <span class="comment"># mini_frame</span></span><br><span class="line">        app_name = ret.group(<span class="number">2</span>)  <span class="comment"># application</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请按照以下方式运行:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;python3 xxxx.py 7890 mini_frame:application&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./web_server.conf&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        conf_info = <span class="built_in">eval</span>(f.read())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 此时 conf_info是一个字典里面的数据为：</span></span><br><span class="line">    <span class="comment"># &#123;</span></span><br><span class="line">    <span class="comment">#     &quot;static_path&quot;:&quot;./static&quot;,</span></span><br><span class="line">    <span class="comment">#     &quot;dynamic_path&quot;:&quot;./dynamic&quot;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sys.path.append(conf_info[<span class="string">&#x27;dynamic_path&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># import frame_name ---&gt;找frame_name.py</span></span><br><span class="line">    frame = <span class="built_in">__import__</span>(frame_name)  <span class="comment"># 返回值标记这 导入的这个模板</span></span><br><span class="line">    app = <span class="built_in">getattr</span>(frame, app_name)  <span class="comment"># 此时app就指向了 dynamic/mini_frame模块中的application这个函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(app)</span></span><br><span class="line"></span><br><span class="line">    wsgi_server = WSGIServer(port, app, conf_info[<span class="string">&#x27;static_path&#x27;</span>])</span><br><span class="line">    wsgi_server.run_forever()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>本次修改总结：<br>将字典里存放的 key 作了修改。另外模板里的 html 文件也作了相应修改（没有展示），将链接指向了 <code>/index.html</code> 和 <code>/center.html</code> 。</p><h2 id="version-8"><a href="#version-8" class="headerlink" title="version 8"></a>version 8</h2><p>从数据库查询数据，替换模板中的变量。</p><p>准备数据的过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database stock_db charset<span class="operator">=</span>utf8;</span><br><span class="line">use stock_db</span><br><span class="line">source <span class="operator">/</span>home<span class="operator">/</span>zhiyue<span class="operator">/</span>Downloads<span class="operator">/</span>stock_db.sql</span><br></pre></td></tr></table></figure><p>（这个 sql 文件不重要，我们这里只是演示）</p><p>表中的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> focus;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> note_info                <span class="operator">|</span> info_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------------------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 你确定要买这个？         <span class="operator">|</span>      <span class="number">36</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 利好                     <span class="operator">|</span>      <span class="number">37</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span>                          <span class="operator">|</span>      <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span>                          <span class="operator">|</span>      <span class="number">89</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">13</span> <span class="operator">|</span>                          <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------------------+---------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> info limit <span class="number">5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------------+--------+----------+-------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> code   <span class="operator">|</span> short        <span class="operator">|</span> chg    <span class="operator">|</span> turnover <span class="operator">|</span> price <span class="operator">|</span> highs <span class="operator">|</span> <span class="type">time</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------------+--------+----------+-------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="number">000007</span> <span class="operator">|</span> 全新好       <span class="operator">|</span> <span class="number">10.01</span><span class="operator">%</span> <span class="operator">|</span> <span class="number">4.40</span><span class="operator">%</span>    <span class="operator">|</span> <span class="number">16.05</span> <span class="operator">|</span> <span class="number">14.60</span> <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-18</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> <span class="number">000036</span> <span class="operator">|</span> 华联控股     <span class="operator">|</span> <span class="number">10.04</span><span class="operator">%</span> <span class="operator">|</span> <span class="number">10.80</span><span class="operator">%</span>   <span class="operator">|</span> <span class="number">11.29</span> <span class="operator">|</span> <span class="number">10.26</span> <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> <span class="number">000039</span> <span class="operator">|</span> 中集集团     <span class="operator">|</span> <span class="number">1.35</span><span class="operator">%</span>  <span class="operator">|</span> <span class="number">1.78</span><span class="operator">%</span>    <span class="operator">|</span> <span class="number">18.07</span> <span class="operator">|</span> <span class="number">18.06</span> <span class="operator">|</span> <span class="number">2019</span><span class="number">-06</span><span class="number">-28</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> <span class="number">000050</span> <span class="operator">|</span> 深天马A      <span class="operator">|</span> <span class="number">4.38</span><span class="operator">%</span>  <span class="operator">|</span> <span class="number">4.65</span><span class="operator">%</span>    <span class="operator">|</span> <span class="number">22.86</span> <span class="operator">|</span> <span class="number">22.02</span> <span class="operator">|</span> <span class="number">2017</span><span class="number">-07</span><span class="number">-19</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> <span class="number">000056</span> <span class="operator">|</span> 皇庭国际     <span class="operator">|</span> <span class="number">0.39</span><span class="operator">%</span>  <span class="operator">|</span> <span class="number">0.65</span><span class="operator">%</span>    <span class="operator">|</span> <span class="number">12.96</span> <span class="operator">|</span> <span class="number">12.91</span> <span class="operator">|</span> <span class="number">2017</span><span class="number">-07</span><span class="number">-20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------------+--------+----------+-------+-------+------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>现在，我们希望实现如下的效果：</p><p><img src="https://s2.loli.net/2024/10/28/opfrBlOsIAw29Ge.png" alt="90-9.png"></p><p>代码参见：<br><a href="https://github.com/dropsong/py_webServer/tree/master/web_mini_frame/version8">https://github.com/dropsong/py_webServer/tree/master/web_mini_frame/version8</a></p><h2 id="version-9"><a href="#version-9" class="headerlink" title="version 9"></a>version 9</h2><p>让路由支持正则，实现增删改功能。</p><p><a href="https://github.com/dropsong/py_webServer/tree/master/web_mini_frame/version9">https://github.com/dropsong/py_webServer/tree/master/web_mini_frame/version9</a></p><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.WARNING,</span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(filename)s[line:%(lineno)d] -%(levelname)s: %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始使用 log 功能</span></span><br><span class="line">logging.debug(<span class="string">&#x27;这是 loggging debug message&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;这是 loggging info message&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;这是 loggging a warning message&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;这是 an loggging error message&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;这是 loggging critical message&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2017-11-06 23:07:35,725 - log1.py[line:9] - WARNING: 这是 loggging a warning message</span></span><br><span class="line"><span class="string">2017-11-06 23:07:35,725 - log1.py[line:10] - ERROR: 这是 an loggging err or message</span></span><br><span class="line"><span class="string">2017-11-06 23:07:35,725 - log1.py[line:11] - CRITICAL: 这是 loggging critical message</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>写到文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.WARNING,</span><br><span class="line">                    filename=<span class="string">&#x27;log.txt&#x27;</span>,</span><br><span class="line">                    filemode=<span class="string">&#x27;w&#x27;</span>,</span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(filename)s[line:%(lineno)d] -%(levelname)s: %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始使用 log 功能</span></span><br><span class="line">logging.debug(<span class="string">&#x27;这是 loggging debug message&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;这是 loggging info message&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;这是 loggging a warning message&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;这是 an loggging error message&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;这是 loggging critical message&#x27;</span>)</span><br></pre></td></tr></table></figure><p>既把日志输出到控制台，又写入文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="comment"># 第一步，创建一个 logger</span></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.INFO) <span class="comment"># Log 等级总开关</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步，创建一个 handler，用于写入日志文件</span></span><br><span class="line">logfile = <span class="string">&#x27;./log.txt&#x27;</span></span><br><span class="line">fh = logging.FileHandler(logfile, mode=<span class="string">&#x27;a&#x27;</span>) <span class="comment"># open 的打开模式这里可以进行参考</span></span><br><span class="line">fh.setLevel(logging.DEBUG) <span class="comment"># 输出到 file 的 log 等级的开关</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三步，再创建一个 handler，用于输出到控制台</span></span><br><span class="line">ch = logging.StreamHandler()</span><br><span class="line">ch.setLevel(logging.WARNING) <span class="comment"># 输出到 console 的 log 等级的开关</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四步，定义 handler 的输出格式</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">&quot;%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s&quot;</span>)</span><br><span class="line">fh.setFormatter(formatter)</span><br><span class="line">ch.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第五步，将 logger 添加到 handler 里面</span></span><br><span class="line">logger.addHandler(fh)</span><br><span class="line">logger.addHandler(ch)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line">logger.debug(<span class="string">&#x27;这是 logger debug message&#x27;</span>)</span><br><span class="line">logger.info(<span class="string">&#x27;这是 logger info message&#x27;</span>)</span><br><span class="line">logger.warning(<span class="string">&#x27;这是 logger warning message&#x27;</span>)</span><br><span class="line">logger.error(<span class="string">&#x27;这是 logger error message&#x27;</span>)</span><br><span class="line">logger.critical(<span class="string">&#x27;这是 logger critical message&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h1><p>C, C++ 中无此设计。</p><p>我们想做一个类，这个类是用代码生成的。</p><h2 id="类也是对象"><a href="#类也是对象" class="headerlink" title="类也是对象"></a>类也是对象</h2><p>类的本质仍然是一个对象，于是可以做如下操作：</p><ol><li>将它赋值给一个变量</li><li>拷贝它</li><li>为它增加属性</li><li>将它作为函数参数进行传递</li></ol><p>下面展示自由的 Python 语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectCreator</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">my_object = ObjectCreator()</span><br><span class="line"><span class="built_in">print</span>(my_object)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ObjectCreator) <span class="comment"># 你可以打印一个类，因为它其实也是一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">echo</span>(<span class="params">obj</span>):</span><br><span class="line">    <span class="built_in">print</span>(obj)</span><br><span class="line"></span><br><span class="line">echo(ObjectCreator)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(ObjectCreator, <span class="string">&#x27;new_attribute&#x27;</span>))</span><br><span class="line"></span><br><span class="line">ObjectCreator.new_attribute = <span class="string">&#x27;foo&#x27;</span> <span class="comment"># 你可以为类增加属性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(ObjectCreator, <span class="string">&#x27;new_attribute&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把类名给一个变量</span></span><br><span class="line">val = ObjectCreator</span><br><span class="line"><span class="built_in">print</span>(val)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(my_object))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(ObjectCreator))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;__main__.ObjectCreator object at 0x7f15b9e8b050&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.ObjectCreator&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.ObjectCreator&#x27;&gt;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.ObjectCreator&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.ObjectCreator&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;type&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>创建类出来的那个类，叫<strong>元类</strong>。</p><h2 id="使用-type-创建类"><a href="#使用-type-创建类" class="headerlink" title="使用 type 创建类"></a>使用 type 创建类</h2><p>type 还有一种完全不同的功能，动态地创建类。</p><p>type 可以接受一个类的描述作为参数，然后返回一个类。（要知道，根据传入参数的不同，同一个函数拥有两种完全不同的用法是一件很傻的事情，但这在 Python 中是为了保持向后兼容性）</p><p>用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type(类名, 由父类名称组成的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Test2 = <span class="built_in">type</span>(<span class="string">&#x27;Test2&#x27;</span>, (), &#123;&#125;)</span><br><span class="line"><span class="built_in">print</span>(Test2)</span><br><span class="line"></span><br><span class="line">Foo = <span class="built_in">type</span>(<span class="string">&#x27;Foo&#x27;</span>, (), &#123;<span class="string">&#x27;bar&#x27;</span>:<span class="literal">True</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(Foo.bar)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承</span></span><br><span class="line">FooChild = <span class="built_in">type</span>(<span class="string">&#x27;FooChild&#x27;</span>, (Foo,), &#123;&#125;)</span><br><span class="line"><span class="built_in">print</span>(FooChild.bar)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建带有方法的类</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">echo_bar</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(self.bar)</span><br><span class="line"></span><br><span class="line"><span class="comment">#让 FooChild 类中的 echo_bar 属性，指向了上面定义的函数</span></span><br><span class="line">FooChild = <span class="built_in">type</span>(<span class="string">&#x27;FooChild&#x27;</span>, (Foo,), &#123;<span class="string">&#x27;echo_bar&#x27;</span>: echo_bar&#125;) </span><br><span class="line"></span><br><span class="line">my_foo = FooChild()</span><br><span class="line">my_foo.echo_bar()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.Test2&#x27;&gt;</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>一个更完整的例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_b</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(self.num)</span><br><span class="line"></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_static</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----haha-----&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_class</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="built_in">print</span>(cls.num)</span><br><span class="line"></span><br><span class="line">B = <span class="built_in">type</span>(<span class="string">&quot;B&quot;</span>, (A,), &#123;<span class="string">&quot;print_b&quot;</span>: print_b, <span class="string">&quot;print_static&quot;</span>: print_static,<span class="string">&quot;print_class&quot;</span>: print_class&#125;)</span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.print_b()</span><br><span class="line">b.print_static()</span><br><span class="line">b.print_class()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">----haha-----</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="metaclass-属性"><a href="#metaclass-属性" class="headerlink" title="metaclass 属性"></a>metaclass 属性</h2><p>当我们写下如下的代码时：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">Bar</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>Python 做了如下的操作：</p><ol><li>Foo 中有 <code>__metaclass__</code> 这个属性吗？如果是，Python 会通过 <code>__metaclass__</code> 创建一个名字为 Foo 的类(对象)</li><li>如果 Python 没有找到 <code>__metaclass__</code>，它会继续在 Bar（父类）中寻找 <code>__metaclass__</code> 属性，并尝试做和前面同样的操作。</li><li>如果 Python 在任何父类中都找不到 <code>__metaclass__</code> ，它就会在模块层次中去寻找 <code>__metaclass__</code> ，并尝试做同样的操作。</li><li>如果还是找不到 <code>__metaclass__</code> ,Python 就会用内置的 type 来创建这个类对象。</li></ol><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 效果：将 Foo 的属性 bar 改成了 BAR</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upper_attr</span>(<span class="params">class_name, class_parents, class_attr</span>):</span><br><span class="line">    <span class="comment">#遍历属性字典，把不是__开头的属性名字变为大写</span></span><br><span class="line">    new_attr = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> name,value <span class="keyword">in</span> class_attr.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">&quot;__&quot;</span>):</span><br><span class="line">            new_attr[name.upper()] = value</span><br><span class="line"></span><br><span class="line">    <span class="comment">#调用 type 来创建一个类，这里的返回值给了 Foo</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">type</span>(class_name, class_parents, new_attr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="built_in">object</span>, metaclass=upper_attr):</span><br><span class="line">    bar = <span class="string">&#x27;bip&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(Foo, <span class="string">&#x27;bar&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(Foo, <span class="string">&#x27;BAR&#x27;</span>))</span><br><span class="line"></span><br><span class="line">f = Foo()</span><br><span class="line"><span class="built_in">print</span>(f.BAR)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">bip</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>上面的代码中 metaclass 是用了一个函数，接下来使用一个类：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UpperAttrMetaClass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="comment"># __new__ 是在__init__之前被调用的特殊方法</span></span><br><span class="line">    <span class="comment"># __new__是用来创建对象并返回之的方法</span></span><br><span class="line">    <span class="comment"># 而__init__只是用来将传入的参数初始化给对象</span></span><br><span class="line">    <span class="comment"># 你很少用到__new__，除非你希望能够控制对象的创建</span></span><br><span class="line">    <span class="comment"># 这里，创建的对象是类，我们希望能够自定义它，所以我们这里改写__new__</span></span><br><span class="line">    <span class="comment"># 如果你希望的话，你也可以在__init__中做些事情</span></span><br><span class="line">    <span class="comment"># 还有一些高级的用法会涉及到改写__call__特殊方法，但是我们这里不用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, class_name, class_parents, class_attr</span>):</span><br><span class="line">        <span class="comment"># 遍历属性字典，把不是__开头的属性名字变为大写</span></span><br><span class="line">        new_attr = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> name, value <span class="keyword">in</span> class_attr.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">&quot;__&quot;</span>):</span><br><span class="line">                new_attr[name.upper()] = value</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方法 1：通过&#x27;type&#x27;来做类对象的创建</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(class_name, class_parents, new_attr)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方法 2：复用 type.__new__方法</span></span><br><span class="line">        <span class="comment"># 这就是基本的 OOP 编程，没什么魔法</span></span><br><span class="line">        <span class="comment"># return type.__new__(cls, class_name, class_parents, new_attr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python3 的用法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="built_in">object</span>, metaclass=UpperAttrMetaClass):</span><br><span class="line">    bar = <span class="string">&#x27;bip&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(Foo, <span class="string">&#x27;bar&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(Foo, <span class="string">&#x27;BAR&#x27;</span>))</span><br><span class="line">f = Foo()</span><br><span class="line"><span class="built_in">print</span>(f.BAR)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">bip</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>“元类就是深度的魔法，99%的用户应该根本不必为此操心。如果你想搞清楚究竟是否需要用到元类，那么你就不需要它。那些实际用到元类的人都非常清楚地知道他们需要做什么，而且根本不需要解释为什么要用元类。” （Python 界的领袖 Tim Peters）</p></blockquote><h1 id="元类实现-ORM"><a href="#元类实现-ORM" class="headerlink" title="元类实现 ORM"></a>元类实现 ORM</h1><p>ORM 是 Django 的核心思想，“Object Relational Mapping”，即对象-关系映射，简称 ORM。（JAVA 也是 ORM）</p><p>一句话理解：创建一个实例对象，用创建它的类名当做数据表名，用创建它的类属性对应数据表的字段，当对这个实例对象操作时，能够对应 MySQL 语句。</p><h2 id="需求场景-1"><a href="#需求场景-1" class="headerlink" title="需求场景"></a>需求场景</h2><p>我们在之前的 Django 开发中已经看到，我们写的类属性“好像”变成了对象属性（这使我们写代码更方便了），但这是怎么回事呢？</p><p><img src="https://bu.dusays.com/2024/10/30/67223d4973072.png" alt="90-10.png"></p><p>所谓的 ORM 就是让开发者在操作数据库的时候，能够像操作对象时通过 <code>xxxx.属性=yyyy</code> 一样简单，这是开发 ORM 的初衷。</p><p>本节完成一个和 insert 类似的 ORM ，简单地展示一下原理。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个类的工作：将 User 类的类属性删除，然后增加一些东西返回</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ModelMetaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span><br><span class="line">        mappings = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="comment"># 判断是否需要保存</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="comment"># 判断是否是指定的 StringField 或者 IntegerField 的实例对象</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, <span class="built_in">tuple</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Found mapping: %s ==&gt; %s&#x27;</span> % (k, v)) <span class="comment"># 日志</span></span><br><span class="line">                mappings[k] = v</span><br><span class="line">                <span class="comment"># example:</span></span><br><span class="line">                <span class="comment"># k: uid</span></span><br><span class="line">                <span class="comment"># v: (&#x27;uid&#x27;, &quot;int unsigned&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删除这些已经在字典中存储的属性</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> mappings.keys():</span><br><span class="line">            attrs.pop(k)</span><br><span class="line"></span><br><span class="line">        attrs[<span class="string">&#x27;__mappings__&#x27;</span>] = mappings <span class="comment"># 保存属性和列的映射关系</span></span><br><span class="line">        attrs[<span class="string">&#x27;__table__&#x27;</span>] = name <span class="comment"># 假设表名和类名一致</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(metaclass=ModelMetaclass):</span><br><span class="line">    uid = (<span class="string">&#x27;uid&#x27;</span>, <span class="string">&quot;int unsigned&quot;</span>)</span><br><span class="line">    name = (<span class="string">&#x27;username&#x27;</span>, <span class="string">&quot;varchar(30)&quot;</span>)</span><br><span class="line">    email = (<span class="string">&#x27;email&#x27;</span>, <span class="string">&quot;varchar(30)&quot;</span>)</span><br><span class="line">    password = (<span class="string">&#x27;password&#x27;</span>, <span class="string">&quot;varchar(30)&quot;</span>)</span><br><span class="line">    <span class="comment"># 我们要将上面的四个变成对象属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">        <span class="keyword">for</span> name, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="comment"># 通过 setattr 可以给对象新增属性</span></span><br><span class="line">            <span class="built_in">setattr</span>(self, name, value) </span><br><span class="line">            <span class="comment"># 这种操作只有写框架会需要，平时不需要</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self</span>):</span><br><span class="line">        fields = []</span><br><span class="line">        args = []</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__mappings__.items():</span><br><span class="line">            fields.append(v[<span class="number">0</span>])</span><br><span class="line">            args.append(<span class="built_in">getattr</span>(self, k, <span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line">        sql = <span class="string">&#x27;insert into %s (%s) values (%s)&#x27;</span> % (self.__table__, <span class="string">&#x27;,&#x27;</span>.join(fields), <span class="string">&#x27;,&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> args]))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;SQL: %s&#x27;</span> % sql)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非常魔幻的写法。在 C++ 的构造函数中，你不会需要将 uid=, name= 这些写出来，</span></span><br><span class="line"><span class="comment"># 这里 Python 写出来，是直接传给了 __init__</span></span><br><span class="line">u = User(uid=<span class="number">12345</span>, name=<span class="string">&#x27;Michael&#x27;</span>, email=<span class="string">&#x27;test@orm.org&#x27;</span>, password=<span class="string">&#x27;my-pwd&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(u.__dict__) <span class="comment"># 打印对象属性</span></span><br><span class="line">u.save()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Found mapping: uid ==&gt; (&#x27;uid&#x27;, &#x27;int unsigned&#x27;)</span></span><br><span class="line"><span class="string">Found mapping: name ==&gt; (&#x27;username&#x27;, &#x27;varchar(30)&#x27;)</span></span><br><span class="line"><span class="string">Found mapping: email ==&gt; (&#x27;email&#x27;, &#x27;varchar(30)&#x27;)</span></span><br><span class="line"><span class="string">Found mapping: password ==&gt; (&#x27;password&#x27;, &#x27;varchar(30)&#x27;)</span></span><br><span class="line"><span class="string">&#123;&#x27;uid&#x27;: 12345, &#x27;name&#x27;: &#x27;Michael&#x27;, &#x27;email&#x27;: &#x27;test@orm.org&#x27;, &#x27;password&#x27;: &#x27;my-pwd&#x27;&#125;</span></span><br><span class="line"><span class="string">SQL: insert into User (uid,username,email,password) values (12345,Michael,test@orm.org,my-pwd)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>一点微小的改进（增加了类型校验）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ModelMetaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span><br><span class="line">        mappings = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="comment"># 判断是否需要保存</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="comment"># 判断是否是指定的 StringField 或者 IntegerField 的实例对象</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, <span class="built_in">tuple</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Found mapping: %s ==&gt; %s&#x27;</span> % (k, v))</span><br><span class="line">                mappings[k] = v</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删除这些已经在字典中存储的属性</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> mappings.keys():</span><br><span class="line">            attrs.pop(k)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将之前的 uid/name/email/password 以及对应的对象引用、类名字</span></span><br><span class="line">        attrs[<span class="string">&#x27;__mappings__&#x27;</span>] = mappings <span class="comment"># 保存属性和列的映射关系</span></span><br><span class="line">        attrs[<span class="string">&#x27;__table__&#x27;</span>] = name <span class="comment"># 假设表名和类名一致</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(metaclass=ModelMetaclass):</span><br><span class="line">    uid = (<span class="string">&#x27;uid&#x27;</span>, <span class="string">&quot;int unsigned&quot;</span>)</span><br><span class="line">    name = (<span class="string">&#x27;username&#x27;</span>, <span class="string">&quot;varchar(30)&quot;</span>)</span><br><span class="line">    email = (<span class="string">&#x27;email&#x27;</span>, <span class="string">&quot;varchar(30)&quot;</span>)</span><br><span class="line">    password = (<span class="string">&#x27;password&#x27;</span>, <span class="string">&quot;varchar(30)&quot;</span>)</span><br><span class="line">    <span class="comment"># 当指定元类之后，以上的类属性将不在类中，而是在__mappings__属性指定的字典中存储</span></span><br><span class="line">    <span class="comment"># 以上 User 类中有</span></span><br><span class="line">    <span class="comment"># __mappings__ = &#123;</span></span><br><span class="line">    <span class="comment"># &quot;uid&quot;: (&#x27;uid&#x27;, &quot;int unsigned&quot;)</span></span><br><span class="line">    <span class="comment"># &quot;name&quot;: (&#x27;username&#x27;, &quot;varchar(30)&quot;)</span></span><br><span class="line">    <span class="comment"># &quot;email&quot;: (&#x27;email&#x27;, &quot;varchar(30)&quot;)</span></span><br><span class="line">    <span class="comment"># &quot;password&quot;: (&#x27;password&#x27;, &quot;varchar(30)&quot;)</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="comment"># __table__ = &quot;User&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">        <span class="keyword">for</span> name, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="built_in">setattr</span>(self, name, value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self</span>):</span><br><span class="line">        fields = []</span><br><span class="line">        args = []</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__mappings__.items():</span><br><span class="line">            fields.append(v[<span class="number">0</span>])</span><br><span class="line">            args.append(<span class="built_in">getattr</span>(self, k, <span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line">        args_temp = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> temp <span class="keyword">in</span> args:</span><br><span class="line">            <span class="comment"># 模拟做类型校验</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(temp, <span class="built_in">int</span>):</span><br><span class="line">                args_temp.append(<span class="built_in">str</span>(temp))</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(temp, <span class="built_in">str</span>):</span><br><span class="line">                args_temp.append(<span class="string">&quot;&quot;&quot;&#x27;%s&#x27;&quot;&quot;&quot;</span> % temp)</span><br><span class="line"></span><br><span class="line">        sql = <span class="string">&#x27;insert into %s (%s) values (%s)&#x27;</span> % (self.__table__, <span class="string">&#x27;,&#x27;</span>.join(fields), <span class="string">&#x27;,&#x27;</span>.join(args_temp))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;SQL: %s&#x27;</span> % sql)</span><br><span class="line"></span><br><span class="line">u = User(uid=<span class="number">12345</span>, name=<span class="string">&#x27;Michael&#x27;</span>, email=<span class="string">&#x27;test@orm.org&#x27;</span>, password=<span class="string">&#x27;my-pwd&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(u.__dict__)</span><br><span class="line">u.save()</span><br></pre></td></tr></table></figure><p><strong>模拟 ORM 中的继承：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ModelMetaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span><br><span class="line">        mappings = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="comment"># 判断是否需要保存</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="comment"># 判断是否是指定的 StringField 或者 IntegerField 的实例对象</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, <span class="built_in">tuple</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Found mapping: %s ==&gt; %s&#x27;</span> % (k, v))</span><br><span class="line">                mappings[k] = v</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删除这些已经在字典中存储的属性</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> mappings.keys():</span><br><span class="line">            attrs.pop(k)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将之前的 uid/name/email/password 以及对应的对象引用、类名字</span></span><br><span class="line">        attrs[<span class="string">&#x27;__mappings__&#x27;</span>] = mappings <span class="comment"># 保存属性和列的映射关系</span></span><br><span class="line">        attrs[<span class="string">&#x27;__table__&#x27;</span>] = name <span class="comment"># 假设表名和类名一致</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls, name, bases, attrs)</span><br><span class="line">        <span class="comment"># return super().__new__(cls, name, bases, attrs)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Model</span>(<span class="built_in">object</span>, metaclass=ModelMetaclass):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">        <span class="keyword">for</span> name, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="built_in">setattr</span>(self, name, value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self</span>):</span><br><span class="line">        fields = []</span><br><span class="line">        args = []</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__mappings__.items():</span><br><span class="line">            fields.append(v[<span class="number">0</span>])</span><br><span class="line">            args.append(<span class="built_in">getattr</span>(self, k, <span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line">        args_temp = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> temp <span class="keyword">in</span> args:</span><br><span class="line">            <span class="comment"># 模拟做类型校验</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(temp, <span class="built_in">int</span>):</span><br><span class="line">                args_temp.append(<span class="built_in">str</span>(temp))</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(temp, <span class="built_in">str</span>):</span><br><span class="line">                args_temp.append(<span class="string">&quot;&quot;&quot;&#x27;%s&#x27;&quot;&quot;&quot;</span> % temp)</span><br><span class="line"></span><br><span class="line">        sql = <span class="string">&#x27;insert into %s (%s) values (%s)&#x27;</span> % (self.__table__, <span class="string">&#x27;,&#x27;</span>.join(fields), <span class="string">&#x27;,&#x27;</span>.join(args_temp))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;SQL: %s&#x27;</span> % sql)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    uid = (<span class="string">&#x27;uid&#x27;</span>, <span class="string">&quot;int unsigned&quot;</span>)</span><br><span class="line">    name = (<span class="string">&#x27;username&#x27;</span>, <span class="string">&quot;varchar(30)&quot;</span>)</span><br><span class="line">    email = (<span class="string">&#x27;email&#x27;</span>, <span class="string">&quot;varchar(30)&quot;</span>)</span><br><span class="line">    password = (<span class="string">&#x27;password&#x27;</span>, <span class="string">&quot;varchar(30)&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">u = User(uid=<span class="number">12345</span>, name=<span class="string">&#x27;Michael&#x27;</span>, email=<span class="string">&#x27;test@orm.org&#x27;</span>, password=<span class="string">&#x27;my-pwd&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(u.__dict__)</span><br><span class="line">u.save()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Found mapping: uid ==&gt; (&#x27;uid&#x27;, &#x27;int unsigned&#x27;)</span></span><br><span class="line"><span class="string">Found mapping: name ==&gt; (&#x27;username&#x27;, &#x27;varchar(30)&#x27;)</span></span><br><span class="line"><span class="string">Found mapping: email ==&gt; (&#x27;email&#x27;, &#x27;varchar(30)&#x27;)</span></span><br><span class="line"><span class="string">Found mapping: password ==&gt; (&#x27;password&#x27;, &#x27;varchar(30)&#x27;)</span></span><br><span class="line"><span class="string">&#123;&#x27;uid&#x27;: 12345, &#x27;name&#x27;: &#x27;Michael&#x27;, &#x27;email&#x27;: &#x27;test@orm.org&#x27;, &#x27;password&#x27;: &#x27;my-pwd&#x27;&#125;</span></span><br><span class="line"><span class="string">SQL: insert into User (uid,username,email,password) values (12345,&#x27;Michael&#x27;,&#x27;test@orm.org&#x27;,&#x27;my-pwd&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="接口类与抽象类"><a href="#接口类与抽象类" class="headerlink" title="接口类与抽象类"></a>接口类与抽象类</h1><p>没什么好说的，和 C++ 笔记里的东西差不多，这里只放几个例子。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">payment</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self,money</span>):</span><br><span class="line">        e=Exception(<span class="string">&#x27;缺少编写 pay 方法&#x27;</span>)</span><br><span class="line">        <span class="keyword">raise</span> e  <span class="comment">#手动抛异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span>(<span class="title class_ inherited__">payment</span>):</span><br><span class="line">    <span class="comment"># 这里类的方法不是一致的 pay,导致后面调用的时候找不到 pay</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paying</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支付函数，总体负责支付，对应支付的对象和要支付的金额</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">payment, money</span>):</span><br><span class="line">    payment.pay(money)</span><br><span class="line"></span><br><span class="line">p = Alipay() <span class="comment"># 不报错</span></span><br><span class="line">pay(p, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;/home/zhiyue/Documents/1030work/test.py&quot;, line 16, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    pay(p, 200)</span></span><br><span class="line"><span class="string">  File &quot;/home/zhiyue/Documents/1030work/test.py&quot;, line 13, in pay</span></span><br><span class="line"><span class="string">    payment.pay(money)</span></span><br><span class="line"><span class="string">  File &quot;/home/zhiyue/Documents/1030work/test.py&quot;, line 4, in pay</span></span><br><span class="line"><span class="string">    raise e  #手动抛异常</span></span><br><span class="line"><span class="string">    ^^^^^^^</span></span><br><span class="line"><span class="string">Exception: 缺少编写 pay 方法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alipay 没有 pay 方法，走到父类的 pay 方法后报错</span></span><br></pre></td></tr></table></figure><p>然而这样的代码还是可以改进，我们希望在编写代码的时候就能发现问题，而不是调用的时候才报错，为此引出抽象类。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> abstractmethod, ABCMeta</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>(metaclass= ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self,money</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paying</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = Alipay()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">TypeError: Can&#x27;t instantiate abstract class Alipay with abstract method pay</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>原因和 C++ 中的一致。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;内网穿透&quot;&gt;&lt;a href=&quot;#内网穿透&quot; class=&quot;headerlink&quot; title=&quot;内网穿透&quot;&gt;&lt;/a&gt;内网穿透&lt;/h1&gt;&lt;p&gt;内网穿透原理图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2024/10/21/zoUnO</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="MySQL" scheme="https://dropsong.github.io/tags/MySQL/"/>
    
    <category term="python" scheme="https://dropsong.github.io/tags/python/"/>
    
    <category term="内网穿透" scheme="https://dropsong.github.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
    <category term="SQL注入" scheme="https://dropsong.github.io/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Django Note</title>
    <link href="https://dropsong.github.io/posts/7d130280.html"/>
    <id>https://dropsong.github.io/posts/7d130280.html</id>
    <published>2024-10-10T16:24:01.000Z</published>
    <updated>2024-11-29T14:06:28.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="后端开发简介"><a href="#后端开发简介" class="headerlink" title="后端开发简介"></a>后端开发简介</h1><p>后端开发框架：</p><ul><li>Java: Spring</li><li>Python: Django, Flask, tornado</li></ul><p>MVC 框架（核心思想：解耦。）:</p><p><img src="https://s2.loli.net/2024/10/10/GfHtKgrUdCQk8Sc.png" alt="89-1.png"></p><p>Web MVC 框架模块功能：</p><p><img src="https://s2.loli.net/2024/10/10/BrizRKn6gotuUyw.png" alt="89-2.png"></p><p>M: Model，模型，和数据库进行交互。<br>V: View，视图，产生 html 页面。<br>C: Controller，控制器，接收请求，进行处理，与 M 和 V 进行交互，返回应答。</p><p>Django 一般前后端不分离，虽然也可以分离。</p><p>Django 遵循 MVC 思想，但是有自己的一个名词，叫做 <strong>MVT</strong>。Django 遵循<strong>快速开发</strong>和 <strong>DRY(Do not repeat yourself)</strong> 原则，不要自己去重复一些工作。</p><p>MVT 各部分功能：</p><p><img src="https://s2.loli.net/2024/10/10/WsMHqjhKFTuibCl.png" alt="89-3.png"></p><p>M: Model，模型，和 MVC 中 M 功能相同，和数据库进行交互。<br>V: View，视图，和 MVC 中 C 功能相同，接收请求，进行处理，与 M 和 T 进行交互，返回应答。<br>T: Template，模板，和 MVC 中 V 功能相同，产生 html 页面。</p><h1 id="配置虚拟环境"><a href="#配置虚拟环境" class="headerlink" title="配置虚拟环境"></a>配置虚拟环境</h1><p>虚拟环境是真实 python 环境的复制版本。</p><p>在虚拟环境中使用的 python 是复制的 python，安装 python 包也是安装在复制的 python 中。</p><p>安装虚拟环境工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-venv</span><br></pre></td></tr></table></figure><p>创建虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv myenv</span><br></pre></td></tr></table></figure><p>激活虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> myenv/bin/activate</span><br></pre></td></tr></table></figure><p>想退出虚拟环境，可以运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p>退出了虚拟环境，如何再次进入？首先，导航到虚拟环境所在的目录。</p><p>在该目录下，运行以下命令来激活虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> bin/activate</span><br></pre></td></tr></table></figure><p>现在，尝试在虚拟环境里面下载东西。注意，<strong>即使配置了翻墙工具，虚拟环境中的 pip 请求可能无法正确通过代理</strong>。解决方案（port 需要视情况改动）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jieba --proxy=<span class="string">&quot;http://127.0.0.1:7897&quot;</span></span><br></pre></td></tr></table></figure><p>安装完成后，我们可以：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>查看内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(myenv) zhiyue@168:~/myenv$ <span class="built_in">cat</span> requirements.txt </span><br><span class="line">jieba==0.42.1</span><br></pre></td></tr></table></figure><p>这个 txt 文件的作用是，我们<strong>可以使用它方便地创建需要的环境</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>在虚拟环境中安装 Django :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==4.2 --proxy=<span class="string">&quot;http://127.0.0.1:7897&quot;</span></span><br></pre></td></tr></table></figure><h1 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h1><h2 id="创建-Django-项目"><a href="#创建-Django-项目" class="headerlink" title="创建 Django 项目"></a>创建 Django 项目</h2><p>注意：创建应用必须先进入虚拟环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(myenv) zhiyue@168:~/myenv$ django-admin startproject day1010</span><br><span class="line">(myenv) zhiyue@168:~/myenv$ <span class="built_in">ls</span></span><br><span class="line">bin  day1010  include  lib  lib64  pyvenv.cfg</span><br><span class="line">(myenv) zhiyue@168:~/myenv$ <span class="built_in">cd</span> day1010/</span><br><span class="line">(myenv) zhiyue@168:~/myenv/day1010$ tree</span><br><span class="line">.</span><br><span class="line">├── day1010</span><br><span class="line">│   ├── asgi.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">└── manage.py</span><br><span class="line"></span><br><span class="line">2 directories, 6 files</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>__init__.py</code>: 说明 day1010 是一个 python 包。</li><li><code>settings.py</code>: 项目的配置文件。</li><li><code>urls.py</code>: 进行 url 路由的配置。</li><li><code>wsgi.py</code>: （对接某种类似协议的东西）web 服务器和 Django 交互的入口。</li><li><code>manage.py</code>: 项目的管理文件。</li></ul><h2 id="创建-Django-应用"><a href="#创建-Django-应用" class="headerlink" title="创建 Django 应用"></a>创建 Django 应用</h2><p><img src="https://s2.loli.net/2024/10/10/OP9r4ZyjRi8nbdT.png" alt="89-4.png"></p><p>一个项目由很多个应用组成的，每一个应用完成一个功能模块。</p><p>注意，创建应用时需要先进入项目目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py startapp booktest</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://s2.loli.net/2024/10/10/ljF6Sv4J9boyq1x.png" alt="89-5.png"></p><p>对于 booktest 文件夹下的文件：</p><ul><li><code>__init__.py</code>: 说明目录是一个 Python 模块。</li><li><code>models.py</code>: 写和数据库项目的内容，设计模型类。</li><li><code>views.py</code>: 接收请求，进行处理，与 M 和 T 进行交互，返回应答。定义处理函数，<strong>视图函数</strong>。</li><li><code>tests.py</code>: <strong>写测试代码的文件</strong>。</li><li><code>admin.py</code>: 网站后台管理相关的文件。</li><li><code>migrations</code>: （作用后面讲解）</li></ul><h2 id="应用注册"><a href="#应用注册" class="headerlink" title="应用注册"></a>应用注册</h2><p>建立应用和项目之间的联系，需要对应用进行注册。</p><p>在 day1010/settings.py 中 INSTALLED_APPS 下添加应用的名称就可以完成安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;booktest&#x27;</span>,   <span class="comment"># 新增内容</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p>在开发阶段，为了能够快速预览到开发的效果，django 提供了一个纯 python 编写的轻量级 web 服务器，仅在开发阶段使用。</p><p>运行服务器的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver</span><br></pre></td></tr></table></figure><h1 id="模型类"><a href="#模型类" class="headerlink" title="模型类"></a>模型类</h1><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p><img src="https://s2.loli.net/2024/10/10/2rmv4jLbWOHYfDk.png" alt="89-6.png"></p><p>ORM 框架帮我们把类和数据表进行了映射，可以让我们<strong>通过类和类对象操作它所对应的表格（数据库）中的数据</strong>。ORM 框架还可以<strong>根据我们设计的类自动生成数据库中的表格</strong>，省去了我们自己建表的过程。</p><p>使用 django 进行数据库开发的步骤如下：</p><ol><li>在 <code>models.py</code> 中定义模型类</li><li>迁移去数据库中看表是否生成</li><li>通过类和对象完成数据增删改查操作</li></ol><h2 id="模型类设计"><a href="#模型类设计" class="headerlink" title="模型类设计"></a>模型类设计</h2><p>在 models.py 中定义模型类如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    btitle = models.CharField(max_length= <span class="number">20</span>)</span><br><span class="line">    bpub_data = models.DateField()</span><br></pre></td></tr></table></figure><h2 id="模型类生成表"><a href="#模型类生成表" class="headerlink" title="模型类生成表"></a>模型类生成表</h2><p>生成迁移文件，根据模型类生成创建表的迁移文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br></pre></td></tr></table></figure><p>Django 框架根据我们设计的模型类生成了迁移文件，在迁移文件中可以看到 fields 列表中每一个元素跟 BookInfo 类属性名以及属性的类型是一致的。同时我们发现多了一个 id 项，这一项是 Django 框架帮我们自动生成的，在创建表的时候 id 就会作为对应表的主键列，并且主键列自动增长。</p><p>执行迁移，根据第一步生成的迁移文件在数据库中创建表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure><p>执行迁移命令后，Django 框架会读取迁移文件自动帮我们在数据库中生成对应的表格。</p><p>Django 默认采用 sqlite3 数据库，db.sqlite3 就是 Django 框架帮我们自动生成的数据库文件。 sqlite3 是一个很小的数据库，通常用在手机中，它跟 mysql 一样，我们也可以通过 sql 语句来操作它。</p><p>在 vscode 安装 SQLite Viewer 插件，可以查看此文件。</p><p><img src="https://s2.loli.net/2024/10/10/EQVHzKtcAwdiy4Z.png" alt="89-7.png"></p><p>上面生成的表的名字叫做 booktest_bookinfo，booktest 是应用的名字，bookinfo 是模型类的名字。</p><h2 id="通过模型类操作数据表"><a href="#通过模型类操作数据表" class="headerlink" title="通过模型类操作数据表"></a>通过模型类操作数据表</h2><p>进入项目 shell 的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py shell</span><br></pre></td></tr></table></figure><p>在 shell 终端中演示的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import BookInfo</span><br><span class="line">&gt;&gt;&gt; b = BookInfo()</span><br><span class="line">&gt;&gt;&gt; b.btitle = <span class="string">&#x27;转生成为雷电将军然后天下无敌&#x27;</span></span><br><span class="line">&gt;&gt;&gt; from datetime import <span class="built_in">date</span></span><br><span class="line">&gt;&gt;&gt; b.bpub_data = <span class="built_in">date</span>(2022,11,11)</span><br><span class="line">&gt;&gt;&gt; b.save()</span><br></pre></td></tr></table></figure><p>注意我之前把 date 拼成了 data ，神智不清了一会。现在将错就错。</p><p><img src="https://s2.loli.net/2024/10/10/VAqcK67UHxRe2j9.png" alt="89-8.png"></p><p><code>b.save()</code> 之后才会将数据保存进数据库。</p><p>查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import BookInfo</span><br><span class="line">&gt;&gt;&gt; b = BookInfo.objects.get(<span class="built_in">id</span>=1)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;BookInfo: BookInfo object (1)&gt;</span><br><span class="line">&gt;&gt;&gt; b.btitle</span><br><span class="line"><span class="string">&#x27;转生成为雷电将军然后天下无敌&#x27;</span></span><br><span class="line">&gt;&gt;&gt; b.bpub_data</span><br><span class="line">datetime.date(2022, 11, 11)</span><br></pre></td></tr></table></figure><p>修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from datetime import <span class="built_in">date</span></span><br><span class="line">&gt;&gt;&gt; b.bpub_data = <span class="built_in">date</span>(1999,9,9)</span><br><span class="line">&gt;&gt;&gt; b.save()</span><br></pre></td></tr></table></figure><p>刷新，可以看到数据已经被修改。</p><p>删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b.delete()</span><br><span class="line">(1, &#123;<span class="string">&#x27;booktest.BookInfo&#x27;</span>: 1&#125;)</span><br></pre></td></tr></table></figure><p>刷新，可以看到数据已经被删除。</p><p>现在，在 <code>models.py</code> 中设计一个新的类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HeroInfo</span>(models.Model):</span><br><span class="line">    hname = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    hgender = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    hcomment = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    <span class="comment"># on_delete=models.CASCADEon_delete=models.CASCADE</span></span><br><span class="line">    <span class="comment"># 删除 BookInfo 里面的书籍时，会自动删除依赖该书籍的英雄信息</span></span><br><span class="line">    hbook = models.ForeignKey(<span class="string">&#x27;BookInfo&#x27;</span>,on_delete=models.CASCADE,)</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure><p>可以看到生成了一张新表。</p><p>重新在 BookInfo 中插入一条数据，可以看到 id =2 ，过程略。</p><p>在 heroinfo 中插入数据，并尝试关联两张表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import HeroInfo</span><br><span class="line">&gt;&gt;&gt; h = HeroInfo()</span><br><span class="line">&gt;&gt;&gt; h.hname = <span class="string">&#x27;雷电将军&#x27;</span></span><br><span class="line">&gt;&gt;&gt; h.hcomment = <span class="string">&#x27;梦想一心&#x27;</span></span><br><span class="line">&gt;&gt;&gt; b = BookInfo.objects.get(<span class="built_in">id</span> = 2)</span><br><span class="line">&gt;&gt;&gt; h.hbook = b</span><br><span class="line">&gt;&gt;&gt; h.save()</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/10/11/5x3KcaMz6fX4GBC.png" alt="89-9.png"></p><p>查询操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; HeroInfo.objects.all()</span><br><span class="line">&lt;QuerySet [&lt;HeroInfo: HeroInfo object (1)&gt;, &lt;HeroInfo: HeroInfo object (2)&gt;]&gt;</span><br><span class="line">&gt;&gt;&gt; HeroInfo.objects.all()[0]</span><br><span class="line">&lt;HeroInfo: HeroInfo object (1)&gt;</span><br><span class="line">&gt;&gt;&gt; HeroInfo.objects.all()[0].hname</span><br><span class="line"><span class="string">&#x27;雷电将军&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="关联操作"><a href="#关联操作" class="headerlink" title="关联操作"></a>关联操作</h2><p>省流：由一查多，由多查一。</p><p>目前的数据库：</p><p><img src="https://s2.loli.net/2024/10/11/NJsOQkcw5C2uEyK.jpg" alt="89-10.jpeg"></p><p>查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; h.hbook.btitle</span><br><span class="line"><span class="string">&#x27;三哼经&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b = BookInfo.objects.get(btitle = <span class="string">&#x27;转生成为雷电将军然后天下无敌&#x27;</span></span><br><span class="line">... )</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;BookInfo: BookInfo object (2)&gt;</span><br><span class="line">&gt;&gt;&gt; b.bpub_data</span><br><span class="line">datetime.date(2022, 11, 11)</span><br><span class="line">&gt;&gt;&gt; b.heroinfo_set.all()</span><br><span class="line">&lt;QuerySet [&lt;HeroInfo: HeroInfo object (1)&gt;, &lt;HeroInfo: HeroInfo object (2)&gt;]&gt;</span><br><span class="line">&gt;&gt;&gt; b.heroinfo_set.all()[0].hname</span><br><span class="line"><span class="string">&#x27;雷电将军&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a>后台管理</h1><p>假设我们要设计一个新闻网站，我们需要编写展示给用户的页面，网页上展示的新闻信息是从哪里来的呢？<strong>是从数据库中查找到新闻的信息，然后把它展示在页面上</strong>。但是我们的网站上的新闻每天都要更新，这就意味着对数据库的增、删、改、查操作，那么我们需要每天写 sql 语句操作数据库吗? 这样会非常繁琐，所以我们可以设计一个页面，通过对这个页面的操作来实现对新闻数据库的增删改查。那么问题来了，老板说我们需要在建立一个新网站，是不是还要设计一个页面来实现对新网站数据库的增删改查操作？但是这样的页面有很大的重复性，那有没有一种方法能够很快生成管理数据库表的页面呢？有，那就是 <strong>Django 的后台管理</strong>。Django 能够根据定义的模型类自动地生成管理页面。使用 Django 的管理模块，需要按照如下步骤操作：</p><ol><li>管理界面本地化</li><li>创建管理员</li><li>注册模型类</li><li>自定义管理页面</li></ol><p><strong>本地化</strong>，打开 day1010/settings.py ，找到语言编码、时区的设置项，将内容改为如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure><p>创建管理员：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>根据提示操作即可。</p><p>启动 server：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver</span><br></pre></td></tr></table></figure><p>在浏览器中进入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/admin/</span><br></pre></td></tr></table></figure><p>注册模型类：<br>登录后台管理后，默认没有我们创建的应用中定义的模型类，需要在自己应用中的 admin.py 文件中注册，才可以在后台管理中看到，并进行增删改查操作。</p><p>在 booktest/admin.py 中，编写代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> BookInfo,HeroInfo</span><br><span class="line"></span><br><span class="line">admin.site.register(BookInfo)</span><br><span class="line">admin.site.register(HeroInfo)</span><br></pre></td></tr></table></figure><p>到浏览器中刷新页面，可以看到模型类 BookInfo 和 HeroInfo 的管理了。</p><p>出现如下问题：</p><p><img src="https://s2.loli.net/2024/10/11/sEUmehQlTLP2idf.png" alt="89-11.png"></p><p>为什么没有直接显示书名呢？因为是 str(object) 的返回值。我们可以重写 str 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    btitle = models.CharField(max_length= <span class="number">20</span>)</span><br><span class="line">    bpub_data = models.DateField()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写 str 后，打印对象会得到 return 返回的内容</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.btitle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroInfo</span>(models.Model):</span><br><span class="line">    hname = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    hgender = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    hcomment = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    <span class="comment"># on_delete=models.CASCADEon_delete=models.CASCADE</span></span><br><span class="line">    <span class="comment"># 删除 BookInfo 里面的书籍时，会自动删除依赖该书籍的英雄信息</span></span><br><span class="line">    hbook = models.ForeignKey(<span class="string">&#x27;BookInfo&#x27;</span>,on_delete=models.CASCADE,)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 暂定</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.hname</span><br></pre></td></tr></table></figure><p>在列表页只显示出了 BookInfo object，对象的其它属性并没有列出来，查看非常不方便。Django 提供了<strong>自定义管理页面的功能</strong>，比如列表页要显示哪些值。</p><p>修改 booktest/admin.py 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> BookInfo,HeroInfo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;btitle&#x27;</span>, <span class="string">&#x27;bpub_data&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroInfoAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;hname&#x27;</span>, <span class="string">&#x27;hgender&#x27;</span>, <span class="string">&#x27;hcomment&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(BookInfo, BookInfoAdmin)</span><br><span class="line">admin.site.register(HeroInfo, HeroInfoAdmin)</span><br></pre></td></tr></table></figure><p>刷新，发现功能实现。</p><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>什么是视图：<br>一个 url 首先到达路由（这里的“路由”和计算机网络中的“路由”概念不同），路由会分配到对应的视图函数，不同的网址路由会分配到不同的视图函数。</p><h2 id="定义视图函数"><a href="#定义视图函数" class="headerlink" title="定义视图函数"></a>定义视图函数</h2><p>视图就是一个 Python 函数，被定义在 views.py 中。</p><p>打开 booktest/views.py 文件，定义视图 index 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello python&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="url-配置语法"><a href="#url-配置语法" class="headerlink" title="url 配置语法"></a>url 配置语法</h2><p>一个简单的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello python&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> booktest.views <span class="keyword">import</span> index</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, index) <span class="comment"># 仅做教学示例</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>回到主页，浏览器显示 <code>hello python</code> 。</p><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><p>模板不仅仅是一个 html 文件。</p><h2 id="模板文件的使用"><a href="#模板文件的使用" class="headerlink" title="模板文件的使用"></a>模板文件的使用</h2><p>创建模板文件夹，名字为 templates,与 booktest 在同一个路径级别。</p><p>在 <code>settings.py</code> 中，添加：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [BASE_DIR / <span class="string">&#x27;templates&#x27;</span>],  <span class="comment"># 添加</span></span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在 templates 下新建一个 index.html，并写入如下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个模板文件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对 <code>views.py</code> 和 <code>urls.py</code> 作如下改动：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader,RequestContext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># return HttpResponse(&#x27;hello python&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> myrender(request, <span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index2</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myrender</span>(<span class="params">request, template_path, context_dict=&#123;&#125;</span>):</span><br><span class="line">    <span class="comment"># 1.加载模板文件, 模板对象</span></span><br><span class="line">    temp = loader.get_template(template_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.定义模板上下文:给模板文件传递数据，模板渲染:产生标准的 html 内容</span></span><br><span class="line">    res_html = temp.render(context_dict)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.返回给浏览器</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res_html)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> booktest <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>刷新页面，可以看到效果。</p><p>现在，对 <code>index.html</code> 作如下修改：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个模板文件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    使用模板变量：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; content &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其实我们是不需要 myrender 的，上面写 myrender 的目的是为了理解 render 帮我们做了什么。我们可以直接改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="comment"># from django.template import loader,RequestContext</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># return HttpResponse(&#x27;hello python&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, &#123;<span class="string">&#x27;content&#x27;</span>:<span class="string">&#x27;hello world&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index2</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># def myrender(request, template_path, context_dict=&#123;&#125;):</span></span><br><span class="line"><span class="comment">#     # 1.加载模板文件, 模板对象</span></span><br><span class="line"><span class="comment">#     temp = loader.get_template(template_path)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#     # 2.定义模板上下文:给模板文件传递数据，模板渲染:产生标准的 html 内容</span></span><br><span class="line"><span class="comment">#     res_html = temp.render(context_dict)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#     # 3.返回给浏览器</span></span><br><span class="line"><span class="comment">#     return HttpResponse(res_html)</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/10/11/U4qJVb6eMDzPnQS.png" alt="89-12.png"></p><h2 id="模板文件进阶用法"><a href="#模板文件进阶用法" class="headerlink" title="模板文件进阶用法"></a>模板文件进阶用法</h2><p>下面实现了一个 for 循环，直接看例子，简洁明了。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_books</span>(<span class="params">request</span>):</span><br><span class="line">    books = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;showbooks.html&#x27;</span>, &#123;<span class="string">&#x27;books&#x27;</span>: books&#125;)</span><br></pre></td></tr></table></figure><p>在 templates 文件夹下新增 <code>showbooks.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示图书信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for book in books %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; book.btitle &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/10/13/Ld3Ow1I6RPq8A97.png" alt="89-13.png"></p><p>现在，我们尝试实现更高级的功能：把这两个文本做成超链接，点开之后可以查看详情。</p><p>为了做成超链接，首先要修改 <code>showbooks.html</code> 如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示图书信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for book in books %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/books/&#123;&#123; book.id &#125;&#125;&quot;</span>&gt;</span> &#123;&#123; book.btitle &#125;&#125; <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，在 <code>urls.py</code> 中增加路由信息：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前略</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:bid&gt;&#x27;</span>,views.detail)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们将 detail 函数设计为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, bid</span>):</span><br><span class="line">    book = BookInfo.objects.get(<span class="built_in">id</span> = bid)</span><br><span class="line">    heros = book.heroinfo_set.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;detail.html&#x27;</span>, &#123;<span class="string">&#x27;book&#x27;</span>:book, <span class="string">&#x27;heros&#x27;</span>:heros&#125;)</span><br></pre></td></tr></table></figure><p>最后，<code>detail.html</code> 内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图书详情<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; book.btitle &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">英雄信息如下： <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for hero in heros %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123;&#123;hero.hname&#125;&#125; --- &#123;&#123;hero.hcomment&#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% empty %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> 没有英雄信息 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://s2.loli.net/2024/10/13/fRB2y3ucMYCFrwV.jpg" alt="89-14.jpeg"></p><p><code>&#123;% empty %&#125;</code> 有什么用？我们删除”应龙“的数据，然后点击”三哼经“的链接，就会显示”没有英雄信息“。</p><h1 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h1><p>现在我们将 sqlite 切换为 mysql.</p><p>在 settings.py 中修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># &#x27;ENGINE&#x27;: &#x27;django.db.backends.sqlite3&#x27;,</span></span><br><span class="line">        <span class="comment"># &#x27;NAME&#x27;: BASE_DIR / &#x27;db.sqlite3&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;test2&#x27;</span>,            <span class="comment"># 使用的数据库的名字,数据库必须手动创建</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,             <span class="comment"># 链接 mysql 的用户名</span></span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;jtsws&#x27;</span>,        <span class="comment"># 用户对应的密码</span></span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,        <span class="comment"># 指定 mysql 数据库所在电脑 ip</span></span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>,               <span class="comment"># mysql 服务的端口号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来安装（我不确定这两个是否有用，有可能你只需要执行接下来的一个命令）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libssl-dev</span><br><span class="line">sudo apt install libmysqlclient-dev</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install pkg-config python3-dev default-libmysqlclient-dev build-essential</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysqlclient</span><br></pre></td></tr></table></figure><p>相关讨论参见：<br><a href="https://stackoverflow.com/questions/76585758/mysqlclient-cannot-install-via-pip-cannot-find-pkg-config-name-in-ubuntu">https://stackoverflow.com/questions/76585758/mysqlclient-cannot-install-via-pip-cannot-find-pkg-config-name-in-ubuntu</a></p><p>生成迁移文件、执行迁移：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure><p>我们可以看到，test2（原本为空）中多出了很多 table :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------------------+</span><br><span class="line">| Tables_in_test2            |</span><br><span class="line">+----------------------------+</span><br><span class="line">| auth_group                 |</span><br><span class="line">| auth_group_permissions     |</span><br><span class="line">| auth_permission            |</span><br><span class="line">| auth_user                  |</span><br><span class="line">| auth_user_groups           |</span><br><span class="line">| auth_user_user_permissions |</span><br><span class="line">| booktest_bookinfo          |</span><br><span class="line">| booktest_heroinfo          |</span><br><span class="line">| django_admin_log           |</span><br><span class="line">| django_content_type        |</span><br><span class="line">| django_migrations          |</span><br><span class="line">| django_session             |</span><br><span class="line">+----------------------------+</span><br><span class="line">12 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from booktest_bookinfo</span><br><span class="line">    -&gt; ;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure><p>为了演示方便，我们接下来仍然使用 sqlite.</p><h1 id="更多细节的演示"><a href="#更多细节的演示" class="headerlink" title="更多细节的演示"></a>更多细节的演示</h1><p>btw, 不使用 SQLite Viewer 了，使用更强大的 vscode 插件 SQLite3 Editor(by yy0931).</p><p>实现效果：</p><p><img src="https://s2.loli.net/2024/10/14/skaq6OMjwcblXZH.png" alt="89-15.png"></p><p>点击“新增”会新增一本指定的书《C 语言开发宝典》（同时数据库中也删除）；点击书名背后的删除会删除该书（同时数据库中也删除）。</p><p><code>models.py</code> 更新为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    btitle = models.CharField(max_length= <span class="number">20</span>)</span><br><span class="line">    bpub_data = models.DateField()</span><br><span class="line">    <span class="comment"># 阅读量，default 是在 django 的逻辑层（模型类层），而不是数据库中</span></span><br><span class="line">    bread = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 价格,最大位数为 10,小数为 2</span></span><br><span class="line">    bprice = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, default=<span class="number">0</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评论量</span></span><br><span class="line">    bcomment = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除标记</span></span><br><span class="line">    isDelete = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写 str 后，打印对象会得到 return 返回的内容</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.btitle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroInfo</span>(models.Model):</span><br><span class="line">    hname = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    hgender = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    hcomment = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    isDelete = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># on_delete=models.CASCADEon_delete=models.CASCADE</span></span><br><span class="line">    <span class="comment"># 删除 BookInfo 里面的书籍时，会自动删除依赖该书籍的英雄信息</span></span><br><span class="line">    hbook = models.ForeignKey(<span class="string">&#x27;BookInfo&#x27;</span>,on_delete=models.CASCADE,)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 暂定</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.hname</span><br></pre></td></tr></table></figure><p>修改 models 文件后需要重新 migrate.</p><p>修改 <code>showbooks.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示图书信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/create&quot;</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for book in books %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/books/&#123;&#123; book.id &#125;&#125;&quot;</span>&gt;</span> &#123;&#123; book.btitle &#125;&#125; <span class="tag">&lt;/<span class="name">a</span>&gt;</span>---<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/delete&#123;&#123; book.id &#125;&#125;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> booktest <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:bid&gt;&#x27;</span>, views.detail),</span><br><span class="line">    path(<span class="string">&#x27;create/&#x27;</span>, views.create),</span><br><span class="line">    path(<span class="string">&#x27;delete&lt;int:bid&gt;&#x27;</span>, views.delete),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>最后，<code>views.py</code> 中也要添加相应的逻辑：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> BookInfo</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># return HttpResponse(&#x27;hello python&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, &#123;<span class="string">&#x27;content&#x27;</span>:<span class="string">&#x27;hello world&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index2</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_books</span>(<span class="params">request</span>):</span><br><span class="line">    books = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;showbooks.html&#x27;</span>, &#123;<span class="string">&#x27;books&#x27;</span>: books&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, bid</span>):</span><br><span class="line">    book = BookInfo.objects.get(<span class="built_in">id</span> = bid)</span><br><span class="line">    heros = book.heroinfo_set.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;detail.html&#x27;</span>, &#123;<span class="string">&#x27;book&#x27;</span>:book, <span class="string">&#x27;heros&#x27;</span>:heros&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;新增一本图书&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.创建 BookInfo 对象</span></span><br><span class="line">    b = BookInfo()</span><br><span class="line">    b.btitle = <span class="string">&#x27;C 语言开发宝典&#x27;</span></span><br><span class="line">    b.bpub_data = date(<span class="number">2019</span>,<span class="number">10</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 2.保存进数据库</span></span><br><span class="line">    b.save()</span><br><span class="line">    <span class="comment"># 3.返回应答,让浏览器再访问/books,重定向</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/books&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">request, bid</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;删除点击的图书&#x27;&#x27;&#x27;</span></span><br><span class="line">    book = BookInfo.objects.get(<span class="built_in">id</span> = bid)</span><br><span class="line">    book.delete()</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/books&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="字段属性和选项"><a href="#字段属性和选项" class="headerlink" title="字段属性和选项"></a>字段属性和选项</h1><h2 id="模型类属性命名限制"><a href="#模型类属性命名限制" class="headerlink" title="模型类属性命名限制"></a>模型类属性命名限制</h2><ul><li>不能是 python 的保留关键字。</li><li>不允许使用连续的下划线，这是由 django 的查询方式决定的。比如 <code>Books__Info</code> 是不可以的。</li><li>定义属性时需要指定字段类型，通过字段类型的参数指定选项，语法如下：<br><code>属性名=models.字段类型(选项)</code></li></ul><h2 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h2><p>官方文档：<br><a href="https://docs.djangoproject.com/en/4.2/ref/models/fields/#field-types">https://docs.djangoproject.com/en/4.2/ref/models/fields/#field-types</a></p><p>使用时需要引入 django.db.models 包，几个常用的如下：</p><ul><li><code>AutoField</code> 自动增长的 IntegerField，通常不用指定，不指定时 Django 会自动创建属性名为 id 的自动增长属性。</li><li><code>BooleanField</code> 布尔字段，值为 True 或 False。</li><li><code>NullBooleanField</code> 支持 Null、True、False 三种值。</li><li><code>CharField(max_length=最大长度)</code> 字符串。参数 max_length 表示最大字符个数。</li><li><code>TextField</code> 大文本字段，一般超过 4000 个字符时使用。</li><li><code>IntegerField</code> 整数。</li><li><code>DecimalField(max_digits=None,decimal_places=None)</code> 十进制浮点数。参数 max_digits 表示总位。参数 decimal_places 表示小数位数。（精度较高，建议用这个）</li><li><code>FloatField</code> 浮点数。参数同上（精度不够）。</li><li><code>DateField</code>、<code>TimeField</code>、<code>DateTimeField</code></li><li><code>FileField</code> 上传文件字段。</li><li><code>ImageField</code> 继承于 FileField，对上传的内容进行校验，确保是有效的图片。</li></ul><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><p>通过选项实现对字段的约束。</p><p>官网可查：<br><a href="https://docs.djangoproject.com/en/4.2/ref/models/fields/">https://docs.djangoproject.com/en/4.2/ref/models/fields/</a></p><p>对比： null 是数据库范畴的概念，blank 是后台管理页面表单验证范畴的。</p><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="查询函数"><a href="#查询函数" class="headerlink" title="查询函数"></a>查询函数</h2><p>通过 <code>模型类.objects</code> 属性可以调用如下函数，实现对模型类对应的数据表的查询。</p><p><code>get</code> 函数：</p><ul><li>返回表中满足条件的<strong>一条且只能有一条</strong>数据</li><li>返回值是一个模型类对象</li><li>参数中写查询条件<ul><li>如果查到多条数据，则抛异常 MultipleObjectsReturned</li><li>查询不到数据，则抛异常 DoesNotExist</li></ul></li></ul><p><code>all</code> 函数：</p><ul><li>返回模型类对应表格中的所有数据</li><li><strong>返回值是 QuerySet 类型</strong></li><li>查询集，可以拿出来进行遍历</li></ul><p><code>filter</code> 函数：</p><ul><li>返回满足条件的数据</li><li><strong>返回值是QuerySet类型</strong></li><li>参数写查询条件</li></ul><p><code>exclude</code> 函数：</p><ul><li>返回不满足条件的数据</li></ul><p><code>order_by</code> 函数：</p><ul><li>对查询结果进行排序</li><li>返回值是 QuerySet</li><li>参数中写根据哪些字段进行排序</li></ul><p>下面展示一些例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import *</span><br><span class="line">&gt;&gt;&gt; c = BookInfo.objects.filter(bcomment=34)</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 射雕英雄传&gt;]&gt;</span><br></pre></td></tr></table></figure><p>模糊查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b = BookInfo.objects.filter(btitle__contains=<span class="string">&#x27;传&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 射雕英雄传&gt;]&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; b = BookInfo.objects.filter(btitle__endswith=<span class="string">&#x27;部&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 天龙八部&gt;]&gt;</span><br></pre></td></tr></table></figure><p>空查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 刚刚给这本书加了点价格</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; b= BookInfo.objects.filter(bprice__isnull=False)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: C 语言开发宝典&gt;]&gt;</span><br></pre></td></tr></table></figure><p>范围查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b = BookInfo.objects.filter(id__in = [1,3,5])</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 射雕英雄传&gt;, &lt;BookInfo: 笑傲江湖&gt;, &lt;BookInfo: C 语言开发宝典&gt;]&gt;</span><br></pre></td></tr></table></figure><p>比较查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b = BookInfo.objects.filter(id__gt=3)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 雪山飞狐&gt;, &lt;BookInfo: C 语言开发宝典&gt;]&gt;</span><br></pre></td></tr></table></figure><h2 id="F-对象"><a href="#F-对象" class="headerlink" title="F 对象"></a>F 对象</h2><p>作用：用于对象属性之间的比较。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from django.db.models import F</span><br><span class="line">&gt;&gt;&gt; from booktest.models import *</span><br><span class="line">&gt;&gt;&gt; BookInfo.objects.filter(bread__gt=F(<span class="string">&#x27;bcomment&#x27;</span>))</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 雪山飞狐&gt;]&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; BookInfo.objects.filter(bread__gt=F(<span class="string">&#x27;bcomment&#x27;</span>)*2)</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 雪山飞狐&gt;]&gt;</span><br></pre></td></tr></table></figure><p>没有问题：</p><p><img src="https://s2.loli.net/2024/10/14/g7o4pfNcIY9CP5B.png" alt="89-16.png"></p><h2 id="Q-对象"><a href="#Q-对象" class="headerlink" title="Q 对象"></a>Q 对象</h2><p>作用：用于查询时条件之间的逻辑关系。not、and、or，可以对 Q 对象进行 <code>&amp;|~</code> 操作（和 C 语言对应的运算符）。</p><p>我们改变一下演示的方式。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F,Q</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index2</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 练习 Q 对象</span></span><br><span class="line">    <span class="built_in">print</span>(BookInfo.objects.<span class="built_in">filter</span>(Q(id__gt=<span class="number">2</span>) &amp; Q(bread__gt=<span class="number">19</span>)))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello python&#x27;</span>)</span><br><span class="line"><span class="comment"># 后略</span></span><br></pre></td></tr></table></figure><p>访问 /index2 , 我们可以在终端中的一堆打印信息中看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;QuerySet [&lt;BookInfo: 笑傲江湖&gt;, &lt;BookInfo: 雪山飞狐&gt;]&gt;</span><br></pre></td></tr></table></figure><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>作用：对查询结果进行聚合操作。</p><p>我们在 <code>views.py</code> 中演示：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Sum,Count,Max,Min,Avg</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">use_aggregate</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(BookInfo.objects.<span class="built_in">all</span>().aggregate(Count(<span class="string">&#x27;id&#x27;</span>)))</span><br><span class="line">    <span class="built_in">print</span>(BookInfo.objects.aggregate(Sum(<span class="string">&#x27;bread&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># count() 的特殊待遇</span></span><br><span class="line">    <span class="built_in">print</span>(BookInfo.objects.<span class="built_in">all</span>().count())</span><br><span class="line">    <span class="built_in">print</span>(BookInfo.objects.count())</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(BookInfo.objects.<span class="built_in">filter</span>(id__gt=<span class="number">3</span>).count())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><p>同时 <code>urls.py</code> 中添加路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前略</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:bid&gt;&#x27;</span>, views.detail),</span><br><span class="line">    path(<span class="string">&#x27;create/&#x27;</span>, views.create),</span><br><span class="line">    path(<span class="string">&#x27;delete&lt;int:bid&gt;&#x27;</span>, views.delete),</span><br><span class="line">    path(<span class="string">&#x27;aggregate/&#x27;</span>,views.use_aggregate), <span class="comment"># 新增</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>页面 <code>http://127.0.0.1:8000/aggregate/</code> 返回 ok；终端中看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;id__count&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;bread__sum&#x27;: 126&#125;</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h2><p>在 <code>models.py</code> 中添加：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewsType</span>(models.Model):</span><br><span class="line">    <span class="comment"># 类型名</span></span><br><span class="line">    type_name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 关系属性，代表类型下面的信息</span></span><br><span class="line">    type_news = models.ManyToManyField(<span class="string">&#x27;NewsInfo&#x27;</span>)</span><br><span class="line">    <span class="comment"># 新闻类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewsInfo</span>(models.Model):</span><br><span class="line">    <span class="comment"># 新闻标题</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    <span class="comment"># 发布时间</span></span><br><span class="line">    pub_date = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 信息内容</span></span><br><span class="line">    content = models.TextField()</span><br><span class="line">    <span class="comment"># 关系属性, 代表信息所属的类型,注意不能和上面的同时开启</span></span><br><span class="line">    <span class="comment">#news_type = models.ManyToManyField(&#x27;NewsType&#x27;)</span></span><br></pre></td></tr></table></figure><p>多对多会生成三张表。</p><p>迁移之后，查看数据库：</p><p><img src="https://s2.loli.net/2024/10/15/GJAsV9pK1RW4fCh.jpg" alt="89-17.jpeg"></p><p>建表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import *</span><br><span class="line">&gt;&gt;&gt; n = NewsType()</span><br><span class="line">&gt;&gt;&gt; n.type_name = <span class="string">&#x27;IT&#x27;</span></span><br><span class="line">&gt;&gt;&gt; n.save()</span><br><span class="line">&gt;&gt;&gt; n = NewsType()</span><br><span class="line">&gt;&gt;&gt; n.type_name = <span class="string">&#x27;考研&#x27;</span></span><br><span class="line">&gt;&gt;&gt; n.save()</span><br><span class="line">&gt;&gt;&gt; i = NewsInfo()</span><br><span class="line">&gt;&gt;&gt; i.title = <span class="string">&#x27;408上热搜&#x27;</span></span><br><span class="line">&gt;&gt;&gt; i.content  = <span class="string">&#x27;计算机卷疯了&#x27;</span></span><br><span class="line">&gt;&gt;&gt; i.save()</span><br><span class="line">&gt;&gt;&gt; i = NewsInfo()</span><br><span class="line">&gt;&gt;&gt; i.title = <span class="string">&#x27;金毛师王兴趣转移&#x27;</span></span><br><span class="line">&gt;&gt;&gt; i.content  = <span class="string">&#x27;将诺贝尔奖挂在嘴边&#x27;</span></span><br><span class="line">&gt;&gt;&gt; i.save()</span><br><span class="line">&gt;&gt;&gt; i = NewsInfo()</span><br><span class="line">&gt;&gt;&gt; i.title = <span class="string">&#x27;神秘男子在武当山接引雷劫&#x27;</span></span><br><span class="line">&gt;&gt;&gt; i.content = <span class="string">&#x27;雷击木附近出现神秘舍利子&#x27;</span></span><br><span class="line">&gt;&gt;&gt; i.save()</span><br></pre></td></tr></table></figure><p>在第三张表中添加多对多关系：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; n = NewsType.objects.get(<span class="built_in">id</span> = 1)</span><br><span class="line">&gt;&gt;&gt; n.type_news.add(2)</span><br><span class="line">&gt;&gt;&gt; n.type_news.remove(2)</span><br></pre></td></tr></table></figure><p>（现在第三张表为空）</p><p>第二种方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># n 还是之前的 n</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; i = NewsInfo.objects.filter(id__lt=3)</span><br><span class="line">&gt;&gt;&gt; i</span><br><span class="line">&lt;QuerySet [&lt;NewsInfo: NewsInfo object (1)&gt;, &lt;NewsInfo: NewsInfo object (2)&gt;]&gt;</span><br><span class="line">&gt;&gt;&gt; n.type_news.set(i)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/10/15/aqFfydDXNmPZAE8.png" alt="89-18.png" title="虽然这个文章对应的 tag 不是我想要的（恼）"></p><h2 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h2><p><img src="https://s2.loli.net/2024/10/15/n5PbIvTj7BJOtia.png" alt="89-19.png"></p><h1 id="自关联"><a href="#自关联" class="headerlink" title="自关联"></a>自关联</h1><p><img src="https://s2.loli.net/2024/10/15/E3CZHYVfk57UOeJ.png" alt="89-20.png"></p><p>我们设计一个类：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自关联的模型类设计</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Areas</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;地区模型类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 地区名称</span></span><br><span class="line">    atitle = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 关系属性，代表当前地区的父级地区</span></span><br><span class="line">    aParent = models.ForeignKey(<span class="string">&#x27;self&#x27;</span>, null=<span class="literal">True</span>,blank=<span class="literal">True</span>,on_delete=models.CASCADE,)</span><br></pre></td></tr></table></figure><p>迁移之后，我们尝试在表中导入数据（<a href="https://drive.google.com/file/d/1dsSPiALc3Ccnq4rhEkJQUDe5poou98l5/view?usp=drive_link">一个 sql 文件</a>）。</p><p>安装 sqlite3 命令行工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install sqlite3</span><br></pre></td></tr></table></figure><p>进入虚拟环境，进入包含 db.sqlite3(即 django 自带的那个数据库) 的目录。</p><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 db.sqlite3</span><br></pre></td></tr></table></figure><p>执行上面的命令后，会进入 SQLite 命令行中。</p><p>在 SQLite 命令行中，运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.read /home/zhiyue/Downloads/area.sql</span><br></pre></td></tr></table></figure><p>可能会出现 “database is locked” 错误，因为 SQLite 数据库文件被锁定。这个时候可以多试几次上面的命令，会补全的。</p><p>一睹芳容：</p><p><img src="https://s2.loli.net/2024/10/15/NrxVcQmKeFyS9Lh.png" alt="89-21.png"></p><p>上面这张图也可以帮助理解什么叫自关联。</p><p>编写模板页面 <code>area.html</code> ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>自关联案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前地区<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123; area.atitle &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>父级地区<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123; parent.atitle &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>下级地址<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for child in children %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; child.atitle &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写 views 函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">areas</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;获取广州市的上级地区和下级地区&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.获取广州市的信息</span></span><br><span class="line">    area = Areas.objects.get(atitle=<span class="string">&#x27;广州市&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2.查询广州市的上级地区</span></span><br><span class="line">    parent = area.aParent</span><br><span class="line">    <span class="comment"># 3.查询广州市的下级地址</span></span><br><span class="line">    children = area.areas_set.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># 使用模板</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;area.html&#x27;</span>, &#123;<span class="string">&#x27;area&#x27;</span>:area,<span class="string">&#x27;parent&#x27;</span>:parent, <span class="string">&#x27;children&#x27;</span>:children&#125;)</span><br></pre></td></tr></table></figure><p>最后，配置 urls.</p><p>效果：</p><p><img src="https://s2.loli.net/2024/10/15/Eqh3etBNQnIYfJR.png" alt="89-22.png"></p><h1 id="管理器"><a href="#管理器" class="headerlink" title="管理器"></a>管理器</h1><p><code>BookInfo.objects.all()-&gt;objects</code> 是一个什么东西呢？</p><ul><li>objects 是 Django 帮我自动生成的管理器对象，通过这个管理器可以实现对数据的查询。</li></ul><p>objects 是 <code>models.Manger</code> 类的一个对象，是 <code>models.Model</code> 的一个属性。</p><p>自定义管理器之后 Django 不再帮我们生成默认的 objects 管理器。</p><p>下面我们尝试<strong>自定义模型管理器类</strong>。</p><p><strong>需求</strong>：<br>我们要实现软删除。并非在数据库中删除数据，而是将 isDelete 字段设为 1 ，这样的字段不会在 all 查询中被查询到。</p><p>在 <code>models.py</code> 中新增管理器类，然后在 BookInfo 类中重写 objects.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新增</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoManager</span>(models.Manager):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;图书模型管理器类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.改变原有查询的结果集</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">all</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1.调用父类的 all 方法，获取所有数据</span></span><br><span class="line">        books = <span class="built_in">super</span>().<span class="built_in">all</span>() <span class="comment"># QuerySet</span></span><br><span class="line">        <span class="comment"># 2.对 books 中的数据进行过滤</span></span><br><span class="line">        books = books.<span class="built_in">filter</span>(isDelete=<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># 返回 books</span></span><br><span class="line">        <span class="keyword">return</span> books</span><br><span class="line"></span><br><span class="line"><span class="comment"># ......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># override 了 objects </span></span><br><span class="line">    objects = BookInfoManager()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ......</span></span><br></pre></td></tr></table></figure><p>我们将《C语言开发宝典》的 isDelete 设为 1，然后执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import *</span><br><span class="line">&gt;&gt;&gt; BookInfo.objects.all()</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 射雕英雄传&gt;, &lt;BookInfo: 天龙八部&gt;, &lt;BookInfo: 笑傲江湖&gt;, &lt;BookInfo: 雪山飞狐&gt;]&gt;</span><br></pre></td></tr></table></figure><p><strong>需求</strong>：<br>我们希望改进新增数据的方法，之前在命令行里一个一个敲非常麻烦。</p><p>这里我直接更新一版 <code>models.py</code> ，新增的功能在里面了：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoManager</span>(models.Manager):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;图书模型管理器类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.改变原有查询的结果集</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">all</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1.调用父类的 all 方法，获取所有数据</span></span><br><span class="line">        books = <span class="built_in">super</span>().<span class="built_in">all</span>() <span class="comment"># QuerySet</span></span><br><span class="line">        <span class="comment"># 2.对 books 中的数据进行过滤</span></span><br><span class="line">        books = books.<span class="built_in">filter</span>(isDelete=<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># 返回 books</span></span><br><span class="line">        <span class="keyword">return</span> books</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_book</span>(<span class="params">self, btitle, bpub_data</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;添加一本图书&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 1.创建一个图书对象</span></span><br><span class="line">        <span class="comment"># 获取 self 所在的模型类</span></span><br><span class="line">        model_class = self.model</span><br><span class="line">        book = model_class()</span><br><span class="line">        <span class="comment"># book = BookInfo()</span></span><br><span class="line">        book.btitle = btitle</span><br><span class="line">        book.bpub_data = bpub_data</span><br><span class="line">        <span class="comment"># 2.添加进数据库</span></span><br><span class="line">        book.save()</span><br><span class="line">        <span class="comment"># 3.返回 book</span></span><br><span class="line">        <span class="keyword">return</span> book</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    btitle = models.CharField(max_length= <span class="number">20</span>)</span><br><span class="line">    bpub_data = models.DateField()</span><br><span class="line">    <span class="comment"># 阅读量，default 是在 django 的逻辑层（模型类层），而不是数据库中</span></span><br><span class="line">    bread = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 价格,最大位数为 10,小数为 2</span></span><br><span class="line">    bprice = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, default=<span class="number">0</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评论量</span></span><br><span class="line">    bcomment = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除标记</span></span><br><span class="line">    isDelete = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># override 了 objects </span></span><br><span class="line">    objects = BookInfoManager()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写 str 后，打印对象会得到 return 返回的内容</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.btitle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroInfo</span>(models.Model):</span><br><span class="line">    hname = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    hgender = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    hcomment = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    isDelete = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># on_delete=models.CASCADEon_delete=models.CASCADE</span></span><br><span class="line">    <span class="comment"># 删除 BookInfo 里面的书籍时，会自动删除依赖该书籍的英雄信息</span></span><br><span class="line">    hbook = models.ForeignKey(<span class="string">&#x27;BookInfo&#x27;</span>,on_delete=models.CASCADE,)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 暂定</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.hname</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewsType</span>(models.Model):</span><br><span class="line">    <span class="comment"># 类型名</span></span><br><span class="line">    type_name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 关系属性，代表类型下面的信息</span></span><br><span class="line">    type_news = models.ManyToManyField(<span class="string">&#x27;NewsInfo&#x27;</span>)</span><br><span class="line">    <span class="comment"># 新闻类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.type_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewsInfo</span>(models.Model):</span><br><span class="line">    <span class="comment"># 新闻标题</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    <span class="comment"># 发布时间，自动添加</span></span><br><span class="line">    pub_date = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 信息内容</span></span><br><span class="line">    content = models.TextField()</span><br><span class="line">    <span class="comment"># 关系属性, 代表信息所属的类型,注意不能和上面的同时开启</span></span><br><span class="line">    <span class="comment">#news_type = models.ManyToManyField(&#x27;NewsType&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自关联的模型类设计</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Areas</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;地区模型类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 地区名称</span></span><br><span class="line">    atitle = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 关系属性，代表当前地区的父级地区</span></span><br><span class="line">    aParent = models.ForeignKey(<span class="string">&#x27;self&#x27;</span>, null=<span class="literal">True</span>,blank=<span class="literal">True</span>,on_delete=models.CASCADE,)</span><br></pre></td></tr></table></figure><p>新增功能之后，可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import *</span><br><span class="line">&gt;&gt;&gt; from datetime import date</span><br><span class="line">&gt;&gt;&gt; BookInfo.objects.create_book(&#x27;日月前事&#x27;, date(2019, 1, 1))</span><br><span class="line">&lt;BookInfo: 日月前事&gt;</span><br></pre></td></tr></table></figure><p>在数据库中，可以看到这本书已经添加了进去。</p><h1 id="元选项"><a href="#元选项" class="headerlink" title="元选项"></a>元选项</h1><p>Django 默认生成的表名： <code>应用名小写_模型类名小写</code> 。</p><p>元选项可以更改表名。</p><p>例如，我们<strong>在 BookInfo 模型类中</strong>增加如下代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;bookinfo&#x27;</span> <span class="comment"># 指定模型类对应表名</span></span><br></pre></td></tr></table></figure><h1 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h1><p>我们设计一个 404 页面。需要在 <code>settings.py</code> 中把 DEBUG 改为 FALSE. 然后：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOST=[<span class="string">&#x27;*&#x27;</span>] <span class="comment"># 允许绑定的 IP 地址列表</span></span><br></pre></td></tr></table></figure><p>404 页面设计如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>404 - 找不到页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;http://img.netbian.com/file/2017/0326/64aab4ae3e632dbcbf9223995c654317.jpg&#x27;</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;Arial&#x27;</span>, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">3em</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#ffcc00</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>404   页面未找到<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>找不到页面   &#123;&#123; request_path &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>返回主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们仍回到 DEBUG 模式。</p><h1 id="捕获-url-参数"><a href="#捕获-url-参数" class="headerlink" title="捕获 url 参数"></a>捕获 url 参数</h1><p>官方文档：<br><a href="https://docs.djangoproject.com/en/4.2/topics/http/urls/">https://docs.djangoproject.com/en/4.2/topics/http/urls/</a></p><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;articles/2003/&quot;</span>, views.special_case_2003),</span><br><span class="line">    path(<span class="string">&quot;articles/&lt;int:year&gt;/&quot;</span>, views.year_archive),</span><br><span class="line">    path(<span class="string">&quot;articles/&lt;int:year&gt;/&lt;int:month&gt;/&quot;</span>, views.month_archive),</span><br><span class="line">    path(<span class="string">&quot;articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;slug:slug&gt;/&quot;</span>, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>官方文档里写的很清楚了，不再搬运。</p><h1 id="设计登录页面"><a href="#设计登录页面" class="headerlink" title="设计登录页面"></a>设计登录页面</h1><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>设计一个 <code>login.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/login_check/&quot;</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; username &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span>&gt;</span>记住用户名<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="comment"># ......</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:bid&gt;&#x27;</span>, views.detail),</span><br><span class="line">    path(<span class="string">&#x27;create/&#x27;</span>, views.create),</span><br><span class="line">    path(<span class="string">&#x27;delete&lt;int:bid&gt;&#x27;</span>, views.delete),</span><br><span class="line">    path(<span class="string">&#x27;aggregate/&#x27;</span>,views.use_aggregate),</span><br><span class="line">    path(<span class="string">&#x27;areas/&#x27;</span>, views.areas),</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, views.login),  <span class="comment"># add</span></span><br><span class="line">    path(<span class="string">&#x27;login_check/&#x27;</span>, views.login_check), <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">pass</span>  <span class="comment"># 暂时先这样，这里打了断点</span></span><br></pre></td></tr></table></figure><p>填写数据后点击登录按钮：</p><p><img src="https://bu.dusays.com/2024/10/16/670f7d7fbf8f7.png" alt="89-23.png"></p><p><strong>避免 CSRF 报错的方法是注释掉 settings 中的校验</strong>。</p><ul><li>仅出于演示目的。实际上线时为了安全，不能这样做。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 演示目的</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="HttpReqeust-对象"><a href="#HttpReqeust-对象" class="headerlink" title="HttpReqeust 对象"></a>HttpReqeust 对象</h2><p>服务器接收到 http 协议的请求后，会根据报文创建 HttpRequest 对象，这个对象不需要我们创建，直接使用服务器构造好的对象就可以。<strong>视图的第一个参数必须是 HttpRequest 对象</strong>，在 <code>django.http</code> 模块中定义了 HttpRequest 对象的API。</p><p><strong>属性</strong>：</p><ul><li><strong>path</strong>: 一个字符串，表示请求的页面的完整路径，不包含域名和参数部分</li><li><strong>method</strong>: 一个字符串，表示请求使用的 HTTP 方法，常用值包括：<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DETELE</code><ul><li>在浏览器中<strong>发出地址请求</strong>采用 get 方式，如超链接</li><li>在浏览器中点击表单的提交按钮发起请求，如果表单的 method 设置为 post, 则为 post 请求</li></ul></li><li>encoding: 一个字符串，表示提交的数据的编码方式<ul><li>这个属性是可写的</li></ul></li><li><strong>GET</strong>: QueryDict 类型对象，类似于字典，包含 get 请求方式的所有参数</li><li><strong>POST</strong>: QueryDict 类型对象，类似于字典，包含 post 请求方式的所有参数</li><li>FILES: 一个类似于字典的对象，包含所有的上传文件</li><li>COOKIES: 一个标准的 Python 字典，包含所有的 cookie，键和值都为字符串</li><li>session: 一个既可读又可写的类似于字典的对象，表示当前的会话，只有当 Django 启用会话的支持时才可用，详细内容见”状态保持”</li></ul><p>关于 GET 和 POST 的更多细节：</p><p><img src="https://bu.dusays.com/2024/10/16/670f87f1e19c6.jpeg" alt="89-24.jpeg"></p><p>用调试模式演示一下。打上断点，在浏览器输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/login/?a=10&amp;b=20&amp;c=python</span><br></pre></td></tr></table></figure><p>（实际上 <code>?</code> 前面的 <code>/</code> 可能要去掉？它好像是之后生成的，存疑）</p><p>我们可以看到 GET 拿到了这些数据：</p><p><img src="https://s2.loli.net/2024/10/16/9xNKVGcXbdOmwkf.png" alt="89-25.png"></p><h2 id="HttpResponse-对象"><a href="#HttpResponse-对象" class="headerlink" title="HttpResponse 对象"></a>HttpResponse 对象</h2><p>视图在接收请求并处理后，必须返回 HttpResponse 对象或子对象。</p><p><strong>属性</strong>：</p><ul><li><strong>content：表示返回的内容</strong></li><li>charset：表示 response 采用的编码字符集，默认为 utf-8</li><li><strong>status_code：返回的 HTTP 响应状态码</strong></li><li>content-type：指定返回数据的的 MIME 类型，默认为’text/html’</li></ul><h2 id="实战（续）"><a href="#实战（续）" class="headerlink" title="实战（续）"></a>实战（续）</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># num = 1</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;登录校验视图&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># request.POST 保存的是 post 方式提交的参数 QueryDict</span></span><br><span class="line">    <span class="comment"># request.GET 保存是 get 方式提交的参数 类型也是 QueryDict</span></span><br><span class="line">    username=request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password=request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(username+<span class="string">&#x27;:&#x27;</span>+password)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在前端点击提交按钮后，后端的终端显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">asdf:asdf</span><br><span class="line"></span><br><span class="line"># 这是我设置的用户名和密码</span><br></pre></td></tr></table></figure><p>演示一个简单的逻辑：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;登录校验视图&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># request.POST 保存的是 post 方式提交的参数 QueryDict</span></span><br><span class="line">    <span class="comment"># request.GET 保存是 get 方式提交的参数 类型也是 QueryDict</span></span><br><span class="line">    username=request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password=request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># just an example</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&#x27;akashi&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/login&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>异步的 javascript。在不全部加载某一个页面的情况下，<strong>对页面进行局部的刷新</strong>，ajax 请求都在后台。</p><p>图片，css 文件，js 文件都是静态文件。</p><p><img src="https://s2.loli.net/2024/10/16/2cRjOHI67U8YNpZ.png" alt="89-26.png"></p><p>大致流程：</p><ol><li>发起 ajax 请求：jquery(某个老旧的前端框架) 发起</li><li>执行相应的视图函数，返回 json 内容</li><li>执行相应的回调函数。通过判断 json 内容，进行相应处理。</li></ol><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p>在 templates 文件夹下新建 <code>test_ajax.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ajax 页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/jquery-1.12.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 绑定 btnAjax 的 click 事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#123;#alert(1)#&#125;</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#btnAjax&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/ajax_handle&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;dataType&#x27;</span>: <span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;async&#x27;</span>: <span class="literal">false</span>, <span class="comment">// 同步的 ajax 请求</span></span></span><br><span class="line"><span class="language-javascript">                &#125;).<span class="title function_">success</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 进行处理</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// &#123;#alert(2)#&#125;</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (data.<span class="property">res</span> == <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&#x27;#message&#x27;</span>).<span class="title function_">show</span>().<span class="title function_">html</span>(<span class="string">&#x27;提示信息&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// &#123;#alert(3)#&#125;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#message</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btnAjax&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ajax 请求&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>建立 templates 的同级文件夹 static, 下面再设 js 文件夹。将 <a href="https://code.jquery.com/jquery-1.12.4.min.js">jquery-1.12.4.min.js</a> 放入其中。</p><p>在 <code>views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_ajax</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;显示 ajax 页面&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_ajax.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>同时在 <code>urls.py</code> 中配置好路由。</p><p>在 settings 中添加：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATICFILES_DIRS = [os.path.join(BASE_DIR, <span class="string">&#x27;static&#x27;</span>)] <span class="comment"># 静态文件的保存目录</span></span><br></pre></td></tr></table></figure><p>这时运行，会提示 ajax_handle 404 Not Found，合理。</p><p>在 <code>views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect, JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ajax_handle</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;ajax 请求处理&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 返回的 json 数据 &#123;&#x27;res&#x27;:1&#125;</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;res&#x27;</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p>然后新增路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;ajax_handle/&#x27;</span>, views.ajax_handle)</span><br></pre></td></tr></table></figure><p>运行，在点击按钮后，页面不加载的情况下，按钮下方多出了红色的字“提示信息”。</p><p><img src="https://s2.loli.net/2024/10/16/OR6Qxi47VjENcey.png" alt="89-27.png"></p><p>关于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;async&#x27;: false, // 同步的 ajax 请求</span><br></pre></td></tr></table></figure><p>这句代码，打开这个开关，在 html 文件中打开调试代码的注释，再运行。可以看到弹出窗口的消息提示顺序从“123”变成了“132”。</p><h2 id="Ajax-登录案例"><a href="#Ajax-登录案例" class="headerlink" title="Ajax 登录案例"></a>Ajax 登录案例</h2><p>尝试用 ajax 做一个登录：若用户输入错误，则不刷新页面，提示错误。</p><p>增加路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;login_ajax&#x27;</span>, views.login_ajax),</span><br></pre></td></tr></table></figure><p>设计视图：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login_ajax</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login_ajax.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>设计 html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ajax 登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/jquery-1.12.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#btnLogin&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 1.获取用户名和密码</span></span></span><br><span class="line"><span class="language-javascript">                username = $(<span class="string">&#x27;#username&#x27;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">                password = $(<span class="string">&#x27;#password&#x27;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 2.发起 post ajax 请求，/login_ajax_check, 携带用户名和密码</span></span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;url&#x27;</span>:<span class="string">&#x27;/login_ajax_check/&#x27;</span>, <span class="comment">// 当是 post 请求时默认多写一个/让 urls 匹配保持一致</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;data&#x27;</span>: &#123;<span class="string">&#x27;username&#x27;</span>:username,<span class="string">&#x27;password&#x27;</span>:password&#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;dataType&#x27;</span>: <span class="string">&#x27;json&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;).<span class="title function_">success</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 登录成功 &#123;&#x27;res&#x27;:1&#125;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 登录失败 &#123;&#x27;res&#x27;:0&#125;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (data.<span class="property">res</span> == <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&#x27;#errmsg&#x27;</span>).<span class="title function_">show</span>().<span class="title function_">html</span>(<span class="string">&#x27; 用 户 名 或 密码错误&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 跳转到首页</span></span></span><br><span class="line"><span class="language-javascript">                    location.<span class="property">href</span> = <span class="string">&#x27;/index&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#errmsg</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btnLogin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;errmsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设计登录校验：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_ajax_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;ajax 登录校验&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.获取用户名和密码</span></span><br><span class="line">    username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2.进行校验,返回 json 数据</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        <span class="comment"># 用户名密码正确</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;res&#x27;</span>:<span class="number">1</span>&#125;)</span><br><span class="line">        <span class="comment"># return redirect(&#x27;/index&#x27;) ajax 请求在后台，不要返回页面或者重定向，这样是不行的，一定要返回 Json！</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 用户名或密码错误</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;res&#x27;</span>:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure><p>不用忘了配置路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;login_ajax_check/&#x27;</span>, views.login_ajax_check),</span><br></pre></td></tr></table></figure><p>运行，成功。</p><h1 id="状态保持"><a href="#状态保持" class="headerlink" title="状态保持"></a>状态保持</h1><p>http 协议是<strong>无状态</strong>的。下一次去访问一个页面时并不知道上一次对这个页面做了什么。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><p><img src="https://s2.loli.net/2024/10/17/852LAXTSzUHIMV1.png" alt="89-28.png"></p><p>cookie 的特点：</p><ol><li>以<strong>键值对</strong>方式进行存储。</li><li>通过浏览器访问一个网站时，会将浏览器存储的跟网站相关的<strong>所有 cookie 信息</strong>发送给该网站的服务器。<code>request.COOKIES</code></li><li>cookie 是基于<strong>域名安全</strong>的。</li><li>cookie 是有<strong>过期时间</strong>的，如果不指定，默认关闭浏览器之后 cookie 就会过期。</li></ol><p>典型应用：记住用户名，网站的广告推送。</p><p>说明：这些广告推送的商品是基于你曾经在淘宝上点击的商品类别等条件筛选出来的，看上去这是在凤凰网上访问淘宝网的 Cookie，但是事实不是这样的，一般是采用 iframe 标签嵌套一个淘宝的广告页面到凤凰网的页面上，所以淘宝的 Cookie 并没有被凤凰网读取到，而是依然交给淘宝网读取的，可以通过”开发者工具”查看元素，如下图：</p><p><img src="https://bu.dusays.com/2024/10/17/670fe9eec2816.png" alt="89-29.png"></p><h3 id="Cookie-基本使用"><a href="#Cookie-基本使用" class="headerlink" title="Cookie 基本使用"></a>Cookie 基本使用</h3><p>配置路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;set_cookie/&#x27;</span>, views.set_cookie),</span><br></pre></td></tr></table></figure><p>在 <code>views.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timedelta</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cookie</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;设置 cookie 信息&#x27;&#x27;&#x27;</span></span><br><span class="line">    response = HttpResponse(<span class="string">&#x27;设置 cookie&#x27;</span>)</span><br><span class="line">    <span class="comment"># 设置一个 cookie 信息,名字为 num, 值为 2</span></span><br><span class="line">    response.set_cookie(<span class="string">&#x27;num&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="comment">#下面是设置 cookie 在两周之后过期</span></span><br><span class="line">    <span class="comment"># response.set_cookie(&#x27;num&#x27;, 2, max_age=14*24*3600)</span></span><br><span class="line">    <span class="comment"># response.set_cookie(&#x27;num&#x27;, 1,expires=datetime.now()+timedelta(days=14))</span></span><br><span class="line">    <span class="comment"># 返回 response</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>运行，访问 <code>/set_cookie</code> 页面之后，再去该网站的其他页面，都可以在 F12 中看到多了我们自己添加的 cookie.</p><p>获取 cookie:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookie</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;获取 cookie 的信息&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 取出 cookie num 的值</span></span><br><span class="line">    num = request.COOKIES[<span class="string">&#x27;num&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(num)</span><br></pre></td></tr></table></figure><p>同时配置路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;get_cookie/&#x27;</span>, views.get_cookie),</span><br></pre></td></tr></table></figure><h3 id="记住用户名案例"><a href="#记住用户名案例" class="headerlink" title="记住用户名案例"></a>记住用户名案例</h3><p>如果在前面的 <code>login.html</code> 我们勾选了记住用户名，那么如何实现下次 login 的时候，用户名在里边呢？</p><p>在 <code>views.py</code> 中对原来的函数作如下修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.COOKIES:</span><br><span class="line">        username = request.COOKIES[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>, &#123;<span class="string">&#x27;username&#x27;</span>:username&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;登录校验视图&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># request.POST 保存的是 post 方式提交的参数 QueryDict</span></span><br><span class="line">    <span class="comment"># request.GET 保存是 get 方式提交的参数 类型也是 QueryDict</span></span><br><span class="line">    username=request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password=request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    remember = request.POST.get(<span class="string">&#x27;remember&#x27;</span>) <span class="comment"># add</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># just an example</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&#x27;akashi&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        resp =  HttpResponseRedirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> remember == <span class="string">&#x27;on&#x27;</span>:</span><br><span class="line">            resp.set_cookie(<span class="string">&#x27;username&#x27;</span>, username, max_age=<span class="number">7</span>*<span class="number">24</span>*<span class="number">3600</span>)</span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/login&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行，可以发现实现效果。</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p><img src="https://s2.loli.net/2024/10/17/OX7iBcUT1EkLm8d.png" alt="89-30.png"></p><p>session 存储在服务器端。在服务器端进行状态保持的方案就是 Session .</p><p><strong>session 的特点</strong>：</p><ol><li>session 是以<strong>键值对</strong>进行存储的。</li><li>session 依赖于 cookie。唯一的标识码 sessionid 保存在 cookie 中。</li><li>session 也是有过期时间，如果不指定，默认两周就会过期。</li><li>session 与 cookie 的差异，cookie 无论保存什么值进去，取出来都是字符串，session 保存进去什么类型，取出来就是什么类型。</li></ol><p>Django 项目默认启用 Session，可以在 MIDDLEWARE 配置里找到。</p><p>设置 SESSION_ENGINE 项，指定 Session 数据存储的方式，可以存储在数据库、django 的缓存、Redis 等。</p><p><strong>默认存储方式</strong>，存储在数据库中，如下设置可以写，也可以不写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SESSION_ENGINE=&#x27;django.contrib.sessions.backends.db&#x27;</span><br></pre></td></tr></table></figure><p><strong>存储在缓存中</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SESSION_ENGINE=&#x27;django.contrib.sessions.backends.cache&#x27;</span><br></pre></td></tr></table></figure><p><strong>混合存储</strong>，优先从本机内存中存取，如果没有则从数据库中存取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SESSION_ENGINE=&#x27;django.contrib.sessions.backends.cached_db&#x27;</span><br></pre></td></tr></table></figure><p>如果存储在数据库中，需要在项 INSTALLED_APPS 中安装 Session 应用。</p><h3 id="依赖于-Cookie"><a href="#依赖于-Cookie" class="headerlink" title="依赖于 Cookie"></a>依赖于 Cookie</h3><p>在使用 Session 后，会在 Cookie 中存储一个 sessionid 的数据，每次请求时浏览器都会将这个数据发给服务器，服务器在接收到 sessionid 后，会根据这个值找出这个请求者的 Session。</p><p>存储 Session 时，键与 Cookie 中的 sessionid 相同，值是开发人员设置的键值对信息，进行了 base64 编码，过期时间由开发人员设置。</p><h3 id="实战-1"><a href="#实战-1" class="headerlink" title="实战"></a>实战</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_session</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;设置 session&#x27;&#x27;&#x27;</span></span><br><span class="line">    request.session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;yomiya&#x27;</span></span><br><span class="line">    request.session[<span class="string">&#x27;age&#x27;</span>] = <span class="number">17</span></span><br><span class="line">    <span class="comment"># request.session.set_expiry(5)</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;设置 session&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_session</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;获取 session&#x27;&#x27;&#x27;</span></span><br><span class="line">    username = request.session[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">    age = request.session[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(username+<span class="string">&#x27;:&#x27;</span>+<span class="built_in">str</span>(age))</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:bid&gt;&#x27;</span>, views.detail),</span><br><span class="line">    path(<span class="string">&#x27;create/&#x27;</span>, views.create),</span><br><span class="line">    path(<span class="string">&#x27;delete&lt;int:bid&gt;&#x27;</span>, views.delete),</span><br><span class="line">    path(<span class="string">&#x27;aggregate/&#x27;</span>,views.use_aggregate),</span><br><span class="line">    path(<span class="string">&#x27;areas/&#x27;</span>, views.areas),</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, views.login),</span><br><span class="line">    path(<span class="string">&#x27;login_check/&#x27;</span>, views.login_check),</span><br><span class="line">    path(<span class="string">&#x27;test_ajax/&#x27;</span>, views.test_ajax),</span><br><span class="line">    path(<span class="string">&#x27;ajax_handle/&#x27;</span>, views.ajax_handle),</span><br><span class="line">    path(<span class="string">&#x27;login_ajax/&#x27;</span>, views.login_ajax),</span><br><span class="line">    path(<span class="string">&#x27;login_ajax_check/&#x27;</span>, views.login_ajax_check),</span><br><span class="line">    path(<span class="string">&#x27;set_cookie/&#x27;</span>, views.set_cookie),</span><br><span class="line">    path(<span class="string">&#x27;get_cookie/&#x27;</span>, views.get_cookie),</span><br><span class="line">    path(<span class="string">&#x27;set_session/&#x27;</span>, views.set_session), <span class="comment"># add</span></span><br><span class="line">    path(<span class="string">&#x27;get_session/&#x27;</span>, views.get_session), <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>访问 /set_session , 在 F12 中可以看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionid=xsjm51tmhguylsknjf53nvvzsf83hgui;</span><br></pre></td></tr></table></figure><p>与数据库中的一致，同时数据库中 session_data 字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.eJxVjDsOgzAQRO_iOrLW2HhJyvQ5A1rWayAfW-JToCh3j5EoknJm3ry3amldhnadZWrHoC7KqNNv1xE_JO1DuFPqs-aclmns9I7oY531LQd5Xg_2TzDQPJQ3NghWjDccHfuavQC4M9mGEDxLtAiurkMHleFKIDj0ZCMRVIwSyRbprkv0kmLb8mvcqHTUl2jw8wWmp0Dd:1t1I46:CMmhgMpr67_q-bZvtptryM6HddKavAQEW83ZsPD4TQI</span><br></pre></td></tr></table></figure><p>访问 /get_session, 浏览器显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yomiya:17</span><br></pre></td></tr></table></figure><p>清除 session：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def clear_session(request):</span></span><br><span class="line"><span class="comment">#     &#x27;&#x27;&#x27;清除 session 信息&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#     # request.session.clear()</span></span><br><span class="line"><span class="comment">#     # request.session.flush()</span></span><br><span class="line"><span class="comment">#     return HttpResponse(&#x27;清除成功&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="记住用户登录状态案例"><a href="#记住用户登录状态案例" class="headerlink" title="记住用户登录状态案例"></a>记住用户登录状态案例</h3><p>需求：已登录的用户在访问 /login 时，直接访问首页，不需要再输入用户名和密码。</p><p>修改 <code>views.py</code> 中的 login、login_check 函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 判断用户是否登录</span></span><br><span class="line">    <span class="keyword">if</span> request.session.has_key(<span class="string">&#x27;islogin&#x27;</span>):</span><br><span class="line">    <span class="comment"># 用户已登录, 跳转到首页</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.COOKIES:</span><br><span class="line">        username = request.COOKIES[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>, &#123;<span class="string">&#x27;username&#x27;</span>:username&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;登录校验视图&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># request.POST 保存的是 post 方式提交的参数 QueryDict</span></span><br><span class="line">    <span class="comment"># request.GET 保存是 get 方式提交的参数 类型也是 QueryDict</span></span><br><span class="line">    username=request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password=request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    remember = request.POST.get(<span class="string">&#x27;remember&#x27;</span>) </span><br><span class="line"></span><br><span class="line">    <span class="comment"># just an example</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&#x27;akashi&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        resp =  HttpResponseRedirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line">        request.session[<span class="string">&#x27;islogin&#x27;</span>] = <span class="literal">True</span> <span class="comment"># add</span></span><br><span class="line">        <span class="keyword">if</span> remember == <span class="string">&#x27;on&#x27;</span>:</span><br><span class="line">            resp.set_cookie(<span class="string">&#x27;username&#x27;</span>, username, max_age=<span class="number">7</span>*<span class="number">24</span>*<span class="number">3600</span>)</span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/login&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="cookie-和-session-的应用场景"><a href="#cookie-和-session-的应用场景" class="headerlink" title="cookie 和 session 的应用场景"></a>cookie 和 session 的应用场景</h2><p>cookie: 记住用户名。<strong>安全性要求不高</strong>。</p><p>session: 涉及到<strong>安全性要求比较高</strong>的数据。如用户名、余额、等级、验证码等。</p><p>深度延伸，如果用户禁用 cookie，如何使用 session :<br><a href="https://www.cnblogs.com/ceceliahappycoding/p/10544075.html">https://www.cnblogs.com/ceceliahappycoding/p/10544075.html</a></p><h1 id="模板进阶"><a href="#模板进阶" class="headerlink" title="模板进阶"></a>模板进阶</h1><h2 id="模板变量"><a href="#模板变量" class="headerlink" title="模板变量"></a>模板变量</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_var</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;模板变量&#x27;&#x27;&#x27;</span></span><br><span class="line">    my_dict = &#123;<span class="string">&#x27;title&#x27;</span>:<span class="string">&#x27;字典键值&#x27;</span>&#125;</span><br><span class="line">    my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    book = BookInfo.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 定义模板上下文</span></span><br><span class="line">    context = &#123;<span class="string">&#x27;my_dict&#x27;</span>:my_dict, <span class="string">&#x27;my_list&#x27;</span>:my_list, <span class="string">&#x27;book&#x27;</span>:book&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_var.html&#x27;</span>, context)</span><br></pre></td></tr></table></figure><p>templates 文件夹下 <code>test_var.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>学习模板变量<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    使用字典属性:&#123;&#123; my_dict.title &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    使用列表元素:&#123;&#123; my_list.1 &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    使用对象属性:&#123;&#123; book.btitle &#125;&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后配置路由。转到浏览器对于路径可以看到效果。</p><h2 id="模板标签"><a href="#模板标签" class="headerlink" title="模板标签"></a>模板标签</h2><p>可以通过 <code>&#123;&#123; forloop.counter &#125;&#125;</code> 得到 for 循环遍历到了第几次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if 条件 %&#125;</span><br><span class="line">&#123;% elif 条件 %&#125;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：进行比较操作时，比较操作符两边必须有空格。</strong></p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>格式：<strong>模板变量｜过滤器：参数</strong></p><p>在 templates 文件夹下新建 <code>test_filters.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">&#123;% load filters %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>模板过滤器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.yellow</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.green</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for book in books %&#125;</span><br><span class="line">        &#123;% if book.id|mod %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>&#123;&#123; book.id &#125;&#125;--&#123;&#123; book.btitle|length &#125;&#125;--&#123;&#123; book.bpub_data|date:&#x27;Y 年-m 月-d 日&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;green&quot;</span>&gt;</span>&#123;&#123; book.btitle &#125;&#125;--&#123;&#123; book.bpub_data &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">default 过滤器:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;&#123; content|default:&#x27;没有数据&#x27; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建 <code>templatetags/filters.py</code> 文件，其中 templatetags 文件夹与 <code>models.py</code> 文件同级。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filters.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义过滤器</span></span><br><span class="line"><span class="comment"># 过滤器其实就是 python 函数</span></span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> Library</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 Library 类的对象</span></span><br><span class="line">register = Library()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义的过滤器函数，至少有一个参数，最多两个</span></span><br><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mod</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;判断 num 是否为偶数&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> num%<span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mod_val</span>(<span class="params">num, val</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;判断 num 是否能被 val 整除&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> num%val == <span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_filters</span>(<span class="params">request</span>):</span><br><span class="line">    books = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_filters.html&#x27;</span>, &#123;<span class="string">&#x27;books&#x27;</span>:books&#125;)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p><strong>注意配置自定义过滤器不会自动加载，必须重启 Django 服务</strong>。</p><p>效果：</p><p><img src="https://s2.loli.net/2024/10/17/s6MqLU4Qau5TXbw.png" alt="89-31.png"></p><h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><p><strong>模板继承是为了重用 html 页面内容</strong>。比如很多网站的头部导航条和底部版权版权信息不变的。</p><p><img src="https://s2.loli.net/2024/10/17/fagkvYymUP1wV7C.png" alt="89-32.png"></p><p>在 templates 文件夹下创建 <code>base.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;父模板文件&#123;% endblock title %&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>导航条<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% block b1 %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是父模板 b1 块中的内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock b1 %&#125;</span><br><span class="line">&#123;% block b2 %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是父模板 b2 块中的内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock b2 %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>版权信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_template_inhert</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;base.html&quot;</span>)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>在 templates 文件夹下创建 <code>child.html</code> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line">&#123;% block title %&#125;子模板文件&#123;% endblock title %&#125;</span><br><span class="line">&#123;% block b1 %&#125;</span><br><span class="line">    &#123;&#123; block.super &#125;&#125;</span><br><span class="line">    &lt;h1&gt;这是子模板 b1 块中的内容&lt;/h1&gt;</span><br><span class="line">&#123;% endblock b1 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block b2 %&#125;</span><br><span class="line">    &#123;&#123; block.super &#125;&#125;</span><br><span class="line">    &lt;h1&gt;这是子模板 b2 块中的内容&lt;/h1&gt;</span><br><span class="line">&#123;% endblock b2 %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_template_inhert</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># return render(request, &quot;base.html&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;child.html&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行即可对比前后效果。</p><h2 id="html-转义"><a href="#html-转义" class="headerlink" title="html 转义"></a>html 转义</h2><p>增加 <code>html_escape.html</code> 页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>html 转义<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">html 转义:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;&#123; content &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">使用 safe 过滤器关闭转义:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;&#123; content|safe &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">使用 autoescape 关闭转义:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;% autoescape off %&#125;</span><br><span class="line">    &#123;&#123; content &#125;&#125;</span><br><span class="line">    &#123;&#123; content &#125;&#125;</span><br><span class="line">&#123;% endautoescape %&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">模板硬编码中的字符串默认不会经过转义:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;&#123; test|default:&#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27; &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">手动进行转义:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;&#123; test|default:&#x27;<span class="symbol">&amp;lt;</span>h1<span class="symbol">&amp;gt;</span>hello<span class="symbol">&amp;lt;</span>/h1<span class="symbol">&amp;gt;</span>&#x27; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>增加视图函数 html_escape:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">html_escape</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;html 转义&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;html_escape.html&#x27;</span>,&#123;<span class="string">&#x27;content&#x27;</span>:<span class="string">&#x27;&lt;h1&gt;hello&lt;/h1&gt;&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/10/17/ASMt8urZjh729ys.png" alt="89-33.png"></p><h1 id="csrf-攻击"><a href="#csrf-攻击" class="headerlink" title="csrf 攻击"></a>csrf 攻击</h1><p>CSRF 全拼为 Cross Site Request Forgery，译为跨站请求伪造。CSRF 指攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF 能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全。</p><p><img src="https://bu.dusays.com/2024/10/17/67111b92bfa6d.png" alt="89-34.png"></p><p>接下来我们演示这一攻击。</p><p>设计一个修改密码的页面 <code>change_pwd.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>修改密码页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/change_pwd_action/&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &#123;% csrf_token %&#125; --&gt;</span></span><br><span class="line">    新密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确认修改&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_pwd</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;change_pwd.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_pwd_action</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;模拟修改密码处理&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.获取新密码</span></span><br><span class="line">    pwd = request.POST.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2.返回一个应答</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;修改密码为:%s&#x27;</span>%pwd)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>这个时候，我们修改密码，可以成功。</p><p>但是这个时候，假如有一个猥琐黑客，直接访问了 <code>/change_pwd_action</code> ，就可以通过一些手段修改我们的密码，怎么办？</p><p>答案是凉拌。</p><p>不过还好，Django 框架为我们提供了预防这种攻击的方法。</p><p>在 settings 中打开 CsrfViewMiddleware :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>, <span class="comment"># 打开</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这个时候，再回到 <code>/change_pwd</code> 修改密码，就会被阻止。</p><p>我们把之前 <code>change_pwd.html</code> 的注释打开：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>修改密码页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/change_pwd_action/&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    新密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确认修改&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时候就可以成功修改了！</p><p>防御的大致原理是，只有在本页面发出的请求可以访问到 <code>/change_pwd_action</code> 。</p><p><img src="https://s2.loli.net/2024/10/18/FptNwV4iG6loxT1.jpg" alt="89-35.jpeg"></p><h1 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h1><p>在用户注册、登录页面，为了<strong>防止暴力请求</strong>，可以加入验证码功能，如果验证码错误，则不需要继续处理，可以减轻业务服务器、数据库服务器的压力。</p><p>安装 Pillow :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow --proxy=&quot;http://127.0.0.1:7897&quot;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /verify_code</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="comment"># from django.utils.six import BytesIO #django 3 以后丢弃了</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_code</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 引入随机函数模块</span></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="comment"># 定义变量，用于画面的背景色、宽、高 RGB</span></span><br><span class="line">    bgcolor = (random.randrange(<span class="number">20</span>, <span class="number">100</span>), random.randrange(<span class="number">20</span>, <span class="number">100</span>), <span class="number">255</span>)</span><br><span class="line">    width = <span class="number">100</span></span><br><span class="line">    height = <span class="number">25</span></span><br><span class="line">    <span class="comment"># 创建画面对象</span></span><br><span class="line">    im = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height), bgcolor)</span><br><span class="line">    <span class="comment"># 创建画笔对象</span></span><br><span class="line">    draw = ImageDraw.Draw(im)</span><br><span class="line">    <span class="comment"># 调用画笔的 point()函数绘制噪点</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>):</span><br><span class="line">        xy = (random.randrange(<span class="number">0</span>, width), random.randrange(<span class="number">0</span>, height))</span><br><span class="line">        fill = (random.randrange(<span class="number">0</span>, <span class="number">255</span>), <span class="number">255</span>, random.randrange(<span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">        draw.point(xy, fill=fill)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义验证码的备选值</span></span><br><span class="line">    str1 = <span class="string">&#x27;ABCD123EFGHIJK456LMNOPQRS789TUVWXYZ0&#x27;</span></span><br><span class="line">    <span class="comment"># 随机选取 4 个值作为验证码</span></span><br><span class="line">    rand_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">        rand_str += str1[random.randrange(<span class="number">0</span>, <span class="built_in">len</span>(str1))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造字体对象，ubuntu 的字体路径为“/usr/share/fonts/truetype/freefont”</span></span><br><span class="line">    font = ImageFont.truetype(<span class="string">&#x27;FreeMono.ttf&#x27;</span>, <span class="number">23</span>)</span><br><span class="line">    <span class="comment"># 构造字体颜色</span></span><br><span class="line">    fontcolor = (<span class="number">255</span>, random.randrange(<span class="number">0</span>, <span class="number">255</span>), random.randrange(<span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line">    <span class="comment"># 绘制 4 个字</span></span><br><span class="line">    draw.text((<span class="number">5</span>, <span class="number">2</span>), rand_str[<span class="number">0</span>], font=font, fill=fontcolor)</span><br><span class="line">    draw.text((<span class="number">25</span>, <span class="number">2</span>), rand_str[<span class="number">1</span>], font=font, fill=fontcolor)</span><br><span class="line">    draw.text((<span class="number">50</span>, <span class="number">2</span>), rand_str[<span class="number">2</span>], font=font, fill=fontcolor)</span><br><span class="line">    draw.text((<span class="number">75</span>, <span class="number">2</span>), rand_str[<span class="number">3</span>], font=font, fill=fontcolor)</span><br><span class="line">    <span class="comment"># 释放画笔</span></span><br><span class="line">    <span class="keyword">del</span> draw</span><br><span class="line">    <span class="comment"># 存入 session，用于做进一步验证</span></span><br><span class="line">    request.session[<span class="string">&#x27;verifycode&#x27;</span>] = rand_str</span><br><span class="line">    <span class="comment"># 内存文件操作</span></span><br><span class="line">    <span class="keyword">import</span> io</span><br><span class="line">    buf = io.BytesIO()</span><br><span class="line">    <span class="comment"># 将图片保存在内存中，文件类型为 png</span></span><br><span class="line">    im.save(buf, <span class="string">&#x27;png&#x27;</span>)</span><br><span class="line">    <span class="comment"># 将内存中的图片数据返回给客户端，MIME 类型为图片 png</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(buf.getvalue(), <span class="string">&#x27;image/png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>修改 <code>login.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/login_check/&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; username &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/verify_code&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vcode&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span>&gt;</span>记住用户名<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改一些逻辑：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># # 判断用户是否登录</span></span><br><span class="line">    <span class="comment"># if request.session.has_key(&#x27;islogin&#x27;):</span></span><br><span class="line">    <span class="comment"># # 用户已登录, 跳转到首页</span></span><br><span class="line">    <span class="comment">#     return HttpResponseRedirect(&#x27;/index&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.COOKIES:</span><br><span class="line">        username = request.COOKIES[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>, &#123;<span class="string">&#x27;username&#x27;</span>:username&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;登录校验视图&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 获取用户输入验证码</span></span><br><span class="line">    vcode1 = request.POST.get(<span class="string">&#x27;vcode&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获取 session 中保存的验证码</span></span><br><span class="line">    vcode2 = request.session.get(<span class="string">&#x27;verifycode&#x27;</span>)</span><br><span class="line">    <span class="comment"># 进行验证码校验</span></span><br><span class="line">    <span class="keyword">if</span> vcode1 != vcode2:</span><br><span class="line">        <span class="comment"># 验证码错误</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># request.POST 保存的是 post 方式提交的参数 QueryDict</span></span><br><span class="line">    <span class="comment"># request.GET 保存是 get 方式提交的参数 类型也是 QueryDict</span></span><br><span class="line">    username=request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password=request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    remember = request.POST.get(<span class="string">&#x27;remember&#x27;</span>) <span class="comment"># add</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># just an example</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&#x27;akashi&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        resp =  HttpResponseRedirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line">        request.session[<span class="string">&#x27;islogin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> remember == <span class="string">&#x27;on&#x27;</span>:</span><br><span class="line">            resp.set_cookie(<span class="string">&#x27;username&#x27;</span>, username, max_age=<span class="number">7</span>*<span class="number">24</span>*<span class="number">3600</span>)</span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/login&#x27;</span>)</span><br></pre></td></tr></table></figure><p>现在可以实现效果：验证码不通过则无法登录。</p><h1 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h1><p>当某一个 url 配置的地址发生变化时，页面上使用反向解析生成地址的位置不需要发生变化。</p><p>新建 <code>url_reverse.html</code> 页面，里边加入首页超链接:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    index 链接:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/index&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">url_reverse</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;url_reverse.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>如果我们修改 <code>urls.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;index/&#x27;</span>, views.index),  <span class="comment"># 去掉</span></span><br><span class="line">path(<span class="string">&#x27;index1/&#x27;</span>, views.index), <span class="comment"># 改为</span></span><br></pre></td></tr></table></figure><p>则原来能用的链接都失效了。</p><p>将 <code>url_reverse.html</code> 修改为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    index 链接:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/index&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    url 反向解析生成 index 链接:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;index&#x27; %&#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    /show_args/1/2:&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    &lt;a href=&quot;/show_args/1/2&quot;&gt;/show_args/1/2&lt;/a&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    动态产生/show_args/1/2:&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    &lt;a href=&quot;&#123;% url &#x27;show_args&#x27; 1 2 %&#125;&quot;&gt;/show_args/1/2&lt;/a&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    /show_kwargs/3/4:&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    &lt;a href=&quot;/show_kwargs/3/4&quot;&gt;/show_kwargs/3/4&lt;/a&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    动态产生/show_kwargs/3/4:&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    &lt;a href=&quot;&#123;% url &#x27;show_kwargs&#x27; c=3 d=4 %&#125;&quot;&gt;/show_kwargs/3/4&lt;/a&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时在 <code>urls.py</code> 中新增（修改）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;index1/&#x27;</span>, views.index), <span class="comment"># 原本</span></span><br><span class="line">path(<span class="string">&#x27;index1/&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>), <span class="comment"># 改为</span></span><br><span class="line"></span><br><span class="line">path(<span class="string">&#x27;show_args/&lt;int:a&gt;/&lt;int:b&gt;&#x27;</span>,views.show_args,name=<span class="string">&#x27;show_args&#x27;</span>),</span><br><span class="line">path(<span class="string">&#x27;show_kwargs/&lt;int:c&gt;/&lt;int:d&gt;&#x27;</span>,views.show_kwargs,name=<span class="string">&#x27;show_kwargs&#x27;</span>),</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_args</span>(<span class="params">request, a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="built_in">str</span>(a) + <span class="string">&#x27;:&#x27;</span> + <span class="built_in">str</span>(b))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_kwargs</span>(<span class="params">request, c, d</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="built_in">str</span>(c) + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(d))</span><br></pre></td></tr></table></figure><p>效果，第一个链接不可以访问，第二个可以：</p><p><img src="https://s2.loli.net/2024/10/18/YCvVmOidxRwPteF.png" alt="89-36.png"></p><p><strong>下面我们做一些更复杂的操作。</strong></p><p>在 booktest 文件夹下新增 <code>urls.py</code> . 注意现在我们有两个 <code>urls.py</code> :</p><ul><li><code>day1010/day1010/urls.py</code> （旧）</li><li><code>day1010/booktest/urls.py</code> （新）</li></ul><p>在 <code>day1010/day1010/urls.py</code>（旧）中，修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> booktest <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index1/&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:bid&gt;&#x27;</span>, views.detail),</span><br><span class="line">    path(<span class="string">&#x27;create/&#x27;</span>, views.create),</span><br><span class="line">    path(<span class="string">&#x27;delete&lt;int:bid&gt;&#x27;</span>, views.delete),</span><br><span class="line">    path(<span class="string">&#x27;aggregate/&#x27;</span>,views.use_aggregate),</span><br><span class="line">    path(<span class="string">&#x27;areas/&#x27;</span>, views.areas),</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, views.login),</span><br><span class="line">    path(<span class="string">&#x27;login_check/&#x27;</span>, views.login_check),</span><br><span class="line">    path(<span class="string">&#x27;test_ajax/&#x27;</span>, views.test_ajax),</span><br><span class="line">    path(<span class="string">&#x27;ajax_handle/&#x27;</span>, views.ajax_handle),</span><br><span class="line">    path(<span class="string">&#x27;login_ajax/&#x27;</span>, views.login_ajax),</span><br><span class="line">    path(<span class="string">&#x27;login_ajax_check/&#x27;</span>, views.login_ajax_check),</span><br><span class="line">    path(<span class="string">&#x27;set_cookie/&#x27;</span>, views.set_cookie),</span><br><span class="line">    path(<span class="string">&#x27;get_cookie/&#x27;</span>, views.get_cookie),</span><br><span class="line">    path(<span class="string">&#x27;set_session/&#x27;</span>, views.set_session),</span><br><span class="line">    path(<span class="string">&#x27;get_session/&#x27;</span>, views.get_session),</span><br><span class="line">    <span class="comment"># path(&#x27;clear_session/&#x27;, views.clear_session),</span></span><br><span class="line">    path(<span class="string">&#x27;test_var/&#x27;</span>, views.test_var),</span><br><span class="line">    path(<span class="string">&#x27;test_filters/&#x27;</span>, views.test_filters),</span><br><span class="line">    path(<span class="string">&#x27;test_template_inhert/&#x27;</span>, views.test_template_inhert),</span><br><span class="line">    path(<span class="string">&#x27;html_escape/&#x27;</span>, views.html_escape),</span><br><span class="line">    path(<span class="string">&#x27;change_pwd/&#x27;</span>, views.change_pwd),</span><br><span class="line">    path(<span class="string">&#x27;change_pwd_action/&#x27;</span>, views.change_pwd_action),</span><br><span class="line">    path(<span class="string">&#x27;verify_code/&#x27;</span>, views.verify_code),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">&#x27;url_reverse/&#x27;</span>, views.url_reverse),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>,include((<span class="string">&#x27;booktest.urls&#x27;</span>,<span class="string">&#x27;booktest&#x27;</span>),namespace = <span class="string">&#x27;booktest&#x27;</span>)),  <span class="comment"># 将那个文件的内容合并过来</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在 <code>day1010/booktest/urls.py</code>（新）中，修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> booktest <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;show_args/&lt;int:a&gt;/&lt;int:b&gt;&#x27;</span>,views.show_args,name=<span class="string">&#x27;show_args&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;show_kwargs/&lt;int:c&gt;/&lt;int:d&gt;&#x27;</span>,views.show_kwargs,name=<span class="string">&#x27;show_kwargs&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在 <code>url_reverse.html</code> 中打开注释：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    index 链接:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/index&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    url 反向解析生成 index 链接:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;index&#x27; %&#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    /show_args/1/2:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/show_args/1/2&quot;</span>&gt;</span>/show_args/1/2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    动态产生/show_args/1/2:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;booktest:show_args&#x27; 1 2 %&#125;&quot;</span>&gt;</span>/show_args/1/2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    /show_kwargs/3/4:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/show_kwargs/3/4&quot;</span>&gt;</span>/show_kwargs/3/4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    动态产生/show_kwargs/3/4:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;booktest:show_kwargs&#x27; c=3 d=4 %&#125;&quot;</span>&gt;</span>/show_kwargs/3/4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在这些链接都可以访问：</p><p><img src="https://bu.dusays.com/2024/10/18/6711f1f5d9db6.png" alt="89-37.png"></p><p>现在，对 <code>day1010/booktest/urls.py</code>（新）作修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后面加了 1</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> booktest <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;show_args1/&lt;int:a&gt;/&lt;int:b&gt;&#x27;</span>,views.show_args,name=<span class="string">&#x27;show_args&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;show_kwargs1/&lt;int:c&gt;/&lt;int:d&gt;&#x27;</span>,views.show_kwargs,name=<span class="string">&#x27;show_kwargs&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>再次运行，结果：</p><p><img src="https://bu.dusays.com/2024/10/18/6711f3bec195a.png" alt="89-38.png"></p><h1 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h1><p>在 static 文件夹下新增 images 文件夹，里面放入 <code>amber.png</code></p><p>templates 文件夹下新增 <code>static_test.html</code> 文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>静态文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/static/images/amber.png&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/abc/images/amber.png&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">动态获取 STATIC_URL,拼接静态文件路径:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;images/amber.png&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">static_test</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;static_test.html&quot;</span>)</span><br></pre></td></tr></table></figure><p>配置路由（老方法）。</p><p>结果：</p><p><img src="https://s2.loli.net/2024/10/18/q39OQKGMDYWRgxU.png" alt="89-39.png"></p><p>可以看到，中间那张无法加载。</p><p>如果在 settings 中，修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&#x27;static/&#x27;</span> <span class="comment"># del</span></span><br><span class="line">STATIC_URL = <span class="string">&#x27;abc/&#x27;</span> <span class="comment"># add</span></span><br></pre></td></tr></table></figure><p>那么结果变成：第一张无法加载，其他可以加载。</p><p><strong>体现了动态获取 STATIC_URL 的好处</strong>。</p><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><p><strong>中间件函数</strong>是 django 框架给我们预留的函数接口，让我们可以干预请求和应答的过程。</p><p><img src="https://s2.loli.net/2024/10/18/eXdmK8HBNoaFgt6.png" alt="89-40.png" title="面向切面编程 AOP"></p><p>需求：现在我们需要禁掉一些有恶意行为的 IP 访问网站。</p><p>一种方法，我们可以使用装饰器模式，在每一个视图函数前加装饰器：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">EXCLUDE_IPS = [<span class="string">&#x27; 192.168.0.108&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blocked_ips</span>(<span class="params">view_func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">request, *view_args, **view_kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取浏览器端的 ip 地址</span></span><br><span class="line">        user_ip = request.META[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> user_ip <span class="keyword">in</span> EXCLUDE_IPS:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;&lt;h1&gt;Forbidden&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> view_func(request, *view_args, **view_kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@blocked_ips</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>但是这样有一个问题，如果要禁止某个 IP 访问所有页面，我们需要对所有的视图函数加装饰器。这样非常麻烦（提问：是否通过 vim 操作并不麻烦）。</p><p>第二个思路是使用中间件。</p><p>在 ./booktest/ 下新建 <code>myMiddleware.py</code> 文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlockedIPSMiddleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"> self, get_response </span>):</span><br><span class="line">        self.get_response = get_response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_response(request)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;中间件类&#x27;&#x27;&#x27;</span></span><br><span class="line">    EXCLUDE_IPS = [<span class="string">&#x27;127.0.0.1&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_view</span>(<span class="params">self, request, view_func, *view_args, **view_kwargs</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;视图函数调用之前会调用&#x27;&#x27;&#x27;</span></span><br><span class="line">        user_ip = request.META[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> user_ip <span class="keyword">in</span> BlockedIPSMiddleware.EXCLUDE_IPS:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;&lt;h1&gt;Forbidden&lt;/h1&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestMiddleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;中间件类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"> self, get_response </span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---init---&#x27;</span>)</span><br><span class="line">        self.get_response = get_response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;产生 request 对象之后，url 匹配之前调用&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----process_request----&#x27;</span>)</span><br><span class="line">        <span class="comment"># return HttpResponse(&#x27;process_request me&#x27;)</span></span><br><span class="line">        response=self.get_response(request)</span><br><span class="line">        <span class="comment"># 视图函数调用之后，内容返回浏览器之前</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;------response------&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_view</span>(<span class="params">self, request, view_func, *view_args, **view_kwargs</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;url 匹配之后，视图函数调用之前调用&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----process_view----&#x27;</span>)</span><br><span class="line">        <span class="comment"># view 视图函数没有得到执行，但是还是要走 process_response</span></span><br><span class="line">        <span class="comment"># return HttpResponse(&#x27;process_view&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExceptionTest1Middleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, get_response</span>):</span><br><span class="line">        self.get_response = get_response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_response(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;视图函数发生异常时调用&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----process_exception1----&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(exception)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExceptionTest2Middleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, get_response</span>):</span><br><span class="line">        self.get_response = get_response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_response(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;视图函数发生异常时调用&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----process_exception2----&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在 settings 中注册：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;booktest.myMiddleware.BlockedIPSMiddleware&#x27;</span>,  <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>重启服务，发现无法访问（因为本机地址被禁了）。</p><h1 id="后台管理（续）"><a href="#后台管理（续）" class="headerlink" title="后台管理（续）"></a>后台管理（续）</h1><p>一些零碎的知识点。</p><p><code>admin.py</code> 新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AreaInfoAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;地区模型管理类&#x27;&#x27;&#x27;</span></span><br><span class="line">    list_per_page = <span class="number">10</span> <span class="comment"># 指定每页显示 10 条数据</span></span><br><span class="line">    <span class="comment">#方法名也可以作为一列进行显示</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;atitle&#x27;</span>, <span class="string">&#x27;parent&#x27;</span>]</span><br><span class="line">    actions_on_bottom = <span class="literal">True</span> <span class="comment"># 底部显示动作窗口</span></span><br><span class="line">    actions_on_top = <span class="literal">False</span> <span class="comment">#顶部不显示动作窗口</span></span><br><span class="line">    list_filter = [<span class="string">&#x27;atitle&#x27;</span>] <span class="comment"># 列表页右侧过滤栏</span></span><br><span class="line">    search_fields = [<span class="string">&#x27;atitle&#x27;</span>] <span class="comment"># 列表页上方的搜索框</span></span><br><span class="line"></span><br><span class="line">admin.site.register(Areas, AreaInfoAdmin)</span><br></pre></td></tr></table></figure><p>在 <code>models.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自关联的模型类设计</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Areas</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;地区模型类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 地区名称</span></span><br><span class="line">    atitle = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 关系属性，代表当前地区的父级地区</span></span><br><span class="line">    aParent = models.ForeignKey(<span class="string">&#x27;self&#x27;</span>, null=<span class="literal">True</span>,blank=<span class="literal">True</span>,on_delete=models.CASCADE,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.atitle</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parent</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.aParent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.aParent.atitle</span><br><span class="line"></span><br><span class="line">    parent.short_description = <span class="string">&#x27;父级地区名称&#x27;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/10/18/PG3DNO1cRiortyK.png" alt="89-41.png"></p><p>目前的这个管理页面的新增功能有点弱，作修改。</p><p><code>admin.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AreaStackedInline</span>(admin.StackedInline):</span><br><span class="line">    <span class="comment"># 写多类的名字</span></span><br><span class="line">    model = Areas</span><br><span class="line">    extra = <span class="number">2</span> <span class="comment">#下面新增位置显示数目，默认显示 3 个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AreaInfoAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;地区模型管理类&#x27;&#x27;&#x27;</span></span><br><span class="line">    list_per_page = <span class="number">10</span> <span class="comment"># 指定每页显示 10 条数据</span></span><br><span class="line">    <span class="comment">#方法名也可以作为一列进行显示</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;atitle&#x27;</span>, <span class="string">&#x27;parent&#x27;</span>]</span><br><span class="line">    actions_on_bottom = <span class="literal">True</span> <span class="comment"># 底部显示动作窗口</span></span><br><span class="line">    actions_on_top = <span class="literal">False</span> <span class="comment">#顶部不显示动作窗口</span></span><br><span class="line">    list_filter = [<span class="string">&#x27;atitle&#x27;</span>] <span class="comment"># 列表页右侧过滤栏</span></span><br><span class="line">    search_fields = [<span class="string">&#x27;atitle&#x27;</span>] <span class="comment"># 列表页上方的搜索框</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># add</span></span><br><span class="line">    fields = [<span class="string">&#x27;aParent&#x27;</span>, <span class="string">&#x27;atitle&#x27;</span>] </span><br><span class="line">    inlines = [AreaStackedInline] <span class="comment">#以块的形式</span></span><br></pre></td></tr></table></figure><p>感觉没什么用。</p><h1 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h1><p>新建文件夹 <code>./static/media</code> .</p><p>在 settings 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_ROOT=os.path.join(BASE_DIR,<span class="string">&#x27;static/media&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在 <code>./booktest/models.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PicTest</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;上传图片&#x27;&#x27;&#x27;</span></span><br><span class="line">    goods_pic = models.ImageField(upload_to=<span class="string">&#x27;booktest&#x27;</span>)</span><br></pre></td></tr></table></figure><p>迁移。</p><p>在 <code>./booktest/admin.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> BookInfo,HeroInfo,Areas,PicTest</span><br><span class="line"></span><br><span class="line">admin.site.register(PicTest)</span><br></pre></td></tr></table></figure><p>在后台管理页面可以直接上传图片了。由于我们的配置，图片会被存放在 <code>./static/media/booktest/</code> 下面。</p><p>在数据库中，可以看到存储的是一个路径：</p><p><img src="https://s2.loli.net/2024/10/19/OFfqDl8ugwBrbHm.png" alt="89-42.png"></p><p>新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> PicTest</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pic_show</span>(<span class="params">request</span>):</span><br><span class="line">    pic=PicTest.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    context=&#123;<span class="string">&#x27;pic&#x27;</span>:pic&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;pic_show.html&#x27;</span>,context)</span><br></pre></td></tr></table></figure><p>在 <code>./templates/</code> 下新增 <code>pic_show.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示图片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/static/media/&#123;&#123; pic.goods_pic &#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>./day1010/urls.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;pic_show/&#x27;</span>, views.pic_show),</span><br></pre></td></tr></table></figure><p>在 <code>./templates/</code> 下新增 <code>upload_pic.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>上传图片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/upload_handle/&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>./booktest/views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /show_upload</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_upload</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;显示上传图片页面&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;upload_pic.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>接下来编写 upload_handle 的逻辑。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> day1010 <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_handle</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;上传图片处理&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.获取上传文件的处理对象</span></span><br><span class="line">    pic = request.FILES[<span class="string">&#x27;pic&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.创建一个文件</span></span><br><span class="line">    save_path = <span class="string">&#x27;%s/booktest/%s&#x27;</span>%(settings.MEDIA_ROOT,pic.name)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(save_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 3.获取上传文件的内容并写到创建的文件中</span></span><br><span class="line">        <span class="keyword">for</span> content <span class="keyword">in</span> pic.chunks():</span><br><span class="line">            f.write(content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4.在数据库中保存上传记录</span></span><br><span class="line">    PicTest.objects.create(goods_pic=<span class="string">&#x27;booktest/%s&#x27;</span>%pic.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.返回</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>此时，<code>/show_upload/</code> 页面可以正常工作。</p><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><p>在 <code>./templates/</code> 下新建 <code>show_area.html</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示地区<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% for area in areas %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; area.atitle &#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>./booktest/views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show_area</span>(<span class="params">request</span>):</span><br><span class="line">    areas = Areas.objects.<span class="built_in">filter</span>(aParent__isnull=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;show_area.html&#x27;</span>,&#123;<span class="string">&#x27;areas&#x27;</span>: areas&#125;)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>运行，在浏览器中查看。这个显示太长了，我们希望进行分页。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_area</span>(<span class="params">request, pindex=<span class="number">1</span></span>):</span><br><span class="line">    areas = Areas.objects.<span class="built_in">filter</span>(aParent__isnull=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 分页,每页显示 10 条</span></span><br><span class="line">    paginator = Paginator(areas, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 获取第 pindex 页的内容</span></span><br><span class="line">    pindex = <span class="built_in">int</span>(pindex)</span><br><span class="line">    <span class="comment"># page 是 Page 类的实例对象</span></span><br><span class="line">    page = paginator.page(pindex)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;show_area.html&#x27;</span>,&#123;<span class="string">&#x27;page&#x27;</span>: page&#125;)</span><br></pre></td></tr></table></figure><p>修改 <code>show_area.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示地区<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% for area in page %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; area.atitle &#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% for pindex in page.paginator.page_range %&#125;</span><br><span class="line">    <span class="comment">&lt;!-- &#123;# 判断是否是当前页 #&#125; --&gt;</span></span><br><span class="line">    &#123;% if pindex == page.number %&#125;</span><br><span class="line">        &#123;&#123; pindex &#125;&#125;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/show_area/&#123;&#123; pindex &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; pindex &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;show_area/&#x27;</span>, views.show_area), <span class="comment"># do not remove</span></span><br><span class="line">path(<span class="string">&#x27;show_area/&lt;int:pindex&gt;&#x27;</span>, views.show_area),</span><br></pre></td></tr></table></figure><p>运行，可以进行正常的分页、翻页操作。</p><p>增加“上一页” “下一页” 功能，修改 <code>show_area.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示地区<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% for area in page %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; area.atitle &#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 判断是否有上一页 --&gt;</span></span><br><span class="line">&#123;% if page.has_previous %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/show_area/&#123;&#123; page.previous_page_number &#125;&#125;&quot;</span>&gt;</span><span class="symbol">&amp;lt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% for pindex in page.paginator.page_range %&#125;</span><br><span class="line">    <span class="comment">&lt;!-- &#123;# 判断是否是当前页 #&#125; --&gt;</span></span><br><span class="line">    &#123;% if pindex == page.number %&#125;</span><br><span class="line">        &#123;&#123; pindex &#125;&#125;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/show_area/&#123;&#123; pindex &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; pindex &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 判断是否有下一页 --&gt;</span></span><br><span class="line">&#123;% if page.has_next %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/show_area/&#123;&#123; page.next_page_number &#125;&#125;&quot;</span>&gt;</span>下一页<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/10/19/8MzOvGBADSr9VZK.png" alt="89-43.png"></p><h1 id="省市县选择案例"><a href="#省市县选择案例" class="headerlink" title="省市县选择案例"></a>省市县选择案例</h1><p>这部分内容其实偏前端。</p><p>新建 <code>./templates/areas.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>收件地址选择<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/jquery-1.12.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 发起一个 ajax 请求 /prov，获取所有省级地区的信息</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取信息,使用 get</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 涉及到信息修改,使用 post</span></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">get</span>(<span class="string">&#x27;/prov&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 回调函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取返回的 json 数据</span></span></span><br><span class="line"><span class="language-javascript">            res = data.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取 prov 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">            prov = $(<span class="string">&#x27;#prov&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 变量 res 数组，获取每一个元素:[地区 id, 地区标题]</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            for(i=0; i&lt;res.length; i++)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                id = res[i][0]</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                atitle = res[i][1]</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                option_str = &#x27;&lt;option value=&quot;&#x27;+id + &#x27;&quot;&gt;&#x27;+ atitle+ &#x27;&lt;/option&gt;&#x27;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                // 向 prov 下拉列表框中追加元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                prov.append(option_str)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#125;*/</span></span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">each</span>(res, <span class="keyword">function</span> (<span class="params">index, item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                id = item[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">                atitle = item[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">                option_str = <span class="string">&#x27;&lt;option value=&quot;&#x27;</span>+id + <span class="string">&#x27;&quot;&gt;&#x27;</span>+ atitle+ <span class="string">&#x27;&lt;/option&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 向 prov 下拉列表框中追加元素</span></span></span><br><span class="line"><span class="language-javascript">                prov.<span class="title function_">append</span>(option_str)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 绑定 prov 下拉列表框的 change 事件，获取省下面的市的信息</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#prov&#x27;</span>).<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发起一个 ajax 请求 /city，获取省下面市级地区的信息</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取点击省的 id</span></span></span><br><span class="line"><span class="language-javascript">            prov_id=$(<span class="variable language_">this</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">get</span>(<span class="string">&#x27;/city/&#x27;</span>+prov_id, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 获取返回的 json 数据</span></span></span><br><span class="line"><span class="language-javascript">                res = data.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 获取 city 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">                city = $(<span class="string">&#x27;#city&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 清空 city 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">                city.<span class="title function_">empty</span>().<span class="title function_">append</span>(<span class="string">&#x27;&lt;option&gt;---请选择市---&lt;/option&gt;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 获取 dis 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">                dis = $(<span class="string">&#x27;#dis&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 清空 dis 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">                dis.<span class="title function_">empty</span>().<span class="title function_">append</span>(<span class="string">&#x27;&lt;option&gt;---请选择县---&lt;/option&gt;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 变量 res 数组，获取每一个元素:[地区 id, 地区标题]</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 遍历取值添加到 city 下拉列表框中</span></span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">each</span>(res, <span class="keyword">function</span> (<span class="params">index, item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    id = item[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">                    atitle = item[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">                    option_str = <span class="string">&#x27;&lt;option value=&quot;&#x27;</span>+id + <span class="string">&#x27;&quot;&gt;&#x27;</span>+ atitle+</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;&lt;/option&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 向 city 下拉列表框中追加元素</span></span></span><br><span class="line"><span class="language-javascript">                    city.<span class="title function_">append</span>(option_str)</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 绑定 city 下拉列表框的 change 事件，获取市下面的县的信息</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#city&#x27;</span>).<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发起一个 ajax 请求 /dis，获取市下面县级地区的信息</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取点击市的 id</span></span></span><br><span class="line"><span class="language-javascript">            city_id=$(<span class="variable language_">this</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">get</span>(<span class="string">&#x27;/dis/&#x27;</span>+city_id, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 获取返回的 json 数据</span></span></span><br><span class="line"><span class="language-javascript">                res = data.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 获取 dis 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">                dis = $(<span class="string">&#x27;#dis&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 清空 dis 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">                dis.<span class="title function_">empty</span>().<span class="title function_">append</span>(<span class="string">&#x27;&lt;option&gt;---请选择县---&lt;/option&gt;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 变量 res 数组，获取每一个元素:[地区 id, 地区标题]</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 遍历取值添加到 dis 下拉列表框中</span></span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">each</span>(res, <span class="keyword">function</span> (<span class="params">index, item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    id = item[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">                    atitle = item[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">                    option_str = <span class="string">&#x27;&lt;option value=&quot;&#x27;</span>+id + <span class="string">&#x27;&quot;&gt;&#x27;</span>+ atitle+<span class="string">&#x27;&lt;/option&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 向 dis 下拉列表框中追加元素</span></span></span><br><span class="line"><span class="language-javascript">                    dis.<span class="title function_">append</span>(option_str)</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;prov&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>---请选择省---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>---请选择市---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;dis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>---请选择县---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>视图函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">areas</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;省市县选中案例&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;areas.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prov</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;获取所有省级地区的信息&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.获取所有省级地区的信息</span></span><br><span class="line">    areas = Areas.objects.<span class="built_in">filter</span>(aParent__isnull=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 2.变量 areas 并拼接出 json 数据：atitle id</span></span><br><span class="line">    areas_list = []</span><br><span class="line">    <span class="keyword">for</span> area <span class="keyword">in</span> areas:</span><br><span class="line">        areas_list.append((area.<span class="built_in">id</span>, area.atitle))</span><br><span class="line">    <span class="comment"># 3.返回数据</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;data&#x27;</span>:areas_list&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">city</span>(<span class="params">request, pid=<span class="number">0</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;获取 pid 的下级地区的信息&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.获取 pid 对应地区的下级地区</span></span><br><span class="line">    <span class="comment"># area = AreaInfo.objects.get(id=pid)</span></span><br><span class="line">    <span class="comment"># areas = area.areainfo_set.all()</span></span><br><span class="line">    areas = Areas.objects.<span class="built_in">filter</span>(aParent__id=pid)</span><br><span class="line">    <span class="comment"># 2.变量 areas 并拼接出 json 数据：atitle id</span></span><br><span class="line">    areas_list = []</span><br><span class="line">    <span class="keyword">for</span> area <span class="keyword">in</span> areas:</span><br><span class="line">        areas_list.append((area.<span class="built_in">id</span>, area.atitle))</span><br><span class="line">    <span class="comment"># 3.返回数据,返回给前端，对方得到的是数组</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;data&#x27;</span>: areas_list&#125;)</span><br></pre></td></tr></table></figure><p>配置路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;areas/&#x27;</span>, views.areas),</span><br><span class="line">path(<span class="string">&#x27;prov/&#x27;</span>,views.prov),</span><br><span class="line">path(<span class="string">&#x27;city/&lt;int:pid&gt;&#x27;</span>,views.city),</span><br><span class="line">path(<span class="string">&#x27;dis/&lt;int:pid&gt;&#x27;</span>,views.city),</span><br></pre></td></tr></table></figure><p>实现效果：</p><p><img src="https://s2.loli.net/2024/10/19/y5aszKWZI4JC1re.png" alt="89-44.png"></p><p>上一级区域选择之后，到下一级菜单中会自动显示该区域的下级单位。</p><p>实际上此类功能现在一般交由第三方处理。</p><h1 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h1><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-tinymce --proxy=<span class="string">&quot;http://127.0.0.1:7897&quot;</span></span><br></pre></td></tr></table></figure><p>在 settings 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;booktest&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;tinymce&#x27;</span>,     <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>继续在 settings 中增加配置：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TINYMCE_DEFAULT_CONFIG = &#123;</span><br><span class="line">    <span class="string">&#x27;theme&#x27;</span>: <span class="string">&#x27;silver&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;width&#x27;</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="string">&#x27;height&#x27;</span>: <span class="number">400</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 <code>./day1010/urls.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;tinymce/&#x27;</span>,include(<span class="string">&#x27;tinymce.urls&#x27;</span>)),</span><br></pre></td></tr></table></figure><p>在 <code>./booktest/models.py</code> 新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tinymce.models <span class="keyword">import</span> HTMLField</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsInfo</span>(models.Model):</span><br><span class="line">    gcontent=HTMLField()</span><br></pre></td></tr></table></figure><p>迁移。</p><p>在 <code>./booktest/admin.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> BookInfo,HeroInfo,Areas,PicTest,GoodsInfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsInfoAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line"></span><br><span class="line">admin.site.register(GoodsInfo,GoodsInfoAdmin)</span><br></pre></td></tr></table></figure><p>可以在后台管理页面看到效果：</p><p><img src="https://s2.loli.net/2024/10/19/rVazPwmZcn36hSF.png" alt="89-45.png"></p><p>如何在前台看到呢？</p><p>新建 <code>./templates/show.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>展示富文本编辑器内容<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">id:&#123;&#123;g.id&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;%autoescape off%&#125;</span><br><span class="line">&#123;&#123;g.gcontent&#125;&#125;</span><br><span class="line">&#123;%endautoescape%&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &#123;&#123;g.gcontent|safe&#125;&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">request</span>):</span><br><span class="line">    goods=GoodsInfo.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">    context=&#123;<span class="string">&#x27;g&#x27;</span>:goods&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;show.html&#x27;</span>,context)</span><br></pre></td></tr></table></figure><p>配置路由。运行成功。</p><p>如何在前台使用这个富文本编辑器呢？ <del>关于这个，小编也很好奇呢</del></p><p>本文章的示例代码参见：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1010">https://github.com/dropsong/py_webServer/tree/master/day1010</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;后端开发简介&quot;&gt;&lt;a href=&quot;#后端开发简介&quot; class=&quot;headerlink&quot; title=&quot;后端开发简介&quot;&gt;&lt;/a&gt;后端开发简介&lt;/h1&gt;&lt;p&gt;后端开发框架：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java: Spring&lt;/li&gt;
&lt;li&gt;Python: Dja</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="后端" scheme="https://dropsong.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Django" scheme="https://dropsong.github.io/tags/Django/"/>
    
    <category term="sqlite" scheme="https://dropsong.github.io/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>承德行</title>
    <link href="https://dropsong.github.io/posts/a854c4ab.html"/>
    <id>https://dropsong.github.io/posts/a854c4ab.html</id>
    <published>2024-10-03T13:43:49.000Z</published>
    <updated>2024-10-07T03:23:20.085Z</updated>
    
    <content type="html"><![CDATA[<div class="note info simple"><p>const zd = 北漂日记::Z_2<br>const_list = {F, M, B, Z, zd}</p></div><p>前两天和 zd 去了承德。</p><p>我们首先在唐山取车，稍作停留就直接上高速，向承德进发。</p><p>承德是一座很有看头的城市，清王朝在这里留下了浓墨重彩的一笔。某著名热河蛮子，网红马督公，拍过一期关于承德的节目，用来当做电子榨菜再合适不过。</p><p>城市零星地散落在山峦之中，高速公路好像切中肯綮一般，变幻成桥梁和隧道在燕山山脉中肆意穿行。</p><p>山对人类是很亲切的，但是为什么呢？我想象自己是造物主，现在要为人类设出一片天地。最开始，是一片超平坦的世界。然后，我要隆起为山，凹陷为谷，花草风月、飞禽走兽填其中。于是我得到答案，山对人类是很亲切的，有了山，大地就从一个需要匍匐的对象，变成可以拥抱的了。</p><p>承德的人文、自然的景观相距很远，我们时间有限，就只打算看看人文的部分。</p><p>赶到时已是晚上，于是在宾馆安顿下，简单出去走了走。</p><p><img src="https://bu.dusays.com/2024/10/03/66feaa8de961c.jpg" alt="88-1"></p><p>这张照片也发给了领妹，得到一个“很绚”的评价。</p><p>第二天早上觅食的时候，偶遇世纪初集市：</p><p><img src="https://bu.dusays.com/2024/10/03/66feabe171d2e.jpg" alt="88-2.jpg"></p><p>避暑山庄：</p><p><img src="https://bu.dusays.com/2024/10/03/66feac53365b5.jpg" alt="88-3.jpg" title="著名的错别字"></p><p><img src="https://bu.dusays.com/2024/10/03/66feac6aa83c0.jpg" alt="88-3dot5.jpg"></p><p><img src="https://bu.dusays.com/2024/10/03/66feac69ea4d5.jpg" alt="88-4.jpg" title="小布达拉宫"></p><p><img src="https://bu.dusays.com/2024/10/07/6703540c5a854.jpg" alt="88-5.jpg" title="小长城"></p><p><img src="https://bu.dusays.com/2024/10/03/66feac76839e3.jpg" alt="88-6.jpg"></p><p><img src="https://bu.dusays.com/2024/10/03/66feac7034f95.jpg" alt="88-7.jpg"></p><p>避暑山庄的山路大巴，司机开起来非常有自信。</p><p>山庄的小长城上，可以远眺外八庙，其中最惹眼的就是小布达拉宫。</p><p>下午去了小布达拉宫：</p><p><img src="https://bu.dusays.com/2024/10/03/66feadb1ae1d4.jpg" alt="88-8.jpg"></p><p><img src="https://bu.dusays.com/2024/10/03/66feadb0e0d3e.jpg" alt="88-9.jpg" title="天葬台"></p><p><img src="https://bu.dusays.com/2024/10/03/66feadb662854.jpg" alt="88-10.jpg"></p><p><img src="https://bu.dusays.com/2024/10/03/66feada54b40c.jpg" alt="88-11.jpg" title="金顶"></p><p>晚上，搭了高铁离开。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info simple&quot;&gt;&lt;p&gt;const zd = 北漂日记::Z_2&lt;br&gt;const_list = {F, M, B, Z, zd}&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;前两天和 zd 去了承德。&lt;/p&gt;
&lt;p&gt;我们首先在唐山取车，稍作停留就直接上</summary>
      
    
    
    
    <category term="生活" scheme="https://dropsong.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="摄影" scheme="https://dropsong.github.io/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>横线纸</title>
    <link href="https://dropsong.github.io/posts/c96740b0.html"/>
    <id>https://dropsong.github.io/posts/c96740b0.html</id>
    <published>2024-09-29T02:34:20.000Z</published>
    <updated>2024-12-09T14:33:18.004Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a18620b319bf89b34026d587acfbaf46dcfef3642eb2f5fbe34d80febc3a1225">be73f9ddbcdb9a4825f810079322246172f4fc623f9fa6cccd47306690a9d3d79b1d4c3dfa0b21f0efe102e55540a22aeef29a474df8969d41c8ab1454396dc4e87da775d111db629fe7d014601dbc1946dade619b6c83f26270c932e1eb7b8cb9ea29c4f79efb0ba5574d8799fb93671ca27c040f883154ca2aa4e8c8f807f0a0ae26225affcf316f6f31423dfa22b2efda5108728f9c4f8ef182ce233ef907627903efbcd26ac8a74bb53b4ee4cc63fe1c4c6626215daa11a0c2dc8150338a36317dfad8da9edd9f22d6c6cd19c8f98b8ab61b1e6ea0d9882ffdc8eb177a49932fd896ecde801e7741611b854a1595f422c56ffc3140eaa2d759391efdddef91367d8507e5ecdd1bfd75d3c86bdae62ef0633e187febee57b1ebbb55810887c7d1bbeceea93e64eb28fd1b785abb4f24ba19b5dd4f8ef3a8fe879eeff1e8d037122b4b503e9d11f2243c1a98a3421127c6dbd0287bf268cb9ac10f5212155551d46537bdd3152935de272b643d87ae89a4056530a6f22a6bd1f3574c09b20c42343a698679a50bb1091b1e220bd2394263f9a6819927920b36cf0caf9fc2e845197da4279a900d7a4dc5a9a8fa22f097efe58943487a26bf626b7cad2af684fddd6a85a8dfeeb2ea21a490937177211961c7219c71d649821223ce9ca47f52abc732b4f9af043756fa335450be95027f9d0a440c39d88e778522eae60f2ef89fe1d825bd1d6062ea272ed12af635b0342ded604f35281c39f6c20f3026b1fb1154a044312628c221d3743692c5635eebce0d35cd5089fba59e3dd7af18e5db0c487874afd2ec3287dc962c5acfa8bcab6d958a09dd904432b0b0f0f55ba038b36773bcae8bdb723a57f8d53f66502d857c5cfcbce7f8b707c41a687763f444371b7cef0f344faff120939f7c367f8b45f0532ecd5520855b0c3ba4a29ba85d3c629c069925cf3e443d6b6becbe5a36a7eda5145dc11e924bf7a98d6188c8d3c517b98240089dd8307bc9fee425098bcb9e8a1d6d12e29ef4da8e4e55a57cb8651ec4b881981c57e21ba4cb4e4876672c91796ad4490ad75d029eeaa464dca398dc49d6a2cb7cd46cb35ef72cdcda5cb96c26e2da0380e6d3e9ae8500e69e8ed2bf3126bc2d3ea3f7306e2d8d2226b8d580e9b38a898821cee3906e5720d947fc4b6e8c86a972fa43dd2bda566512d37410de971411507930c7e08701057797295896b1d05813045db2b21a89c2331f37e09fba445ac973dffdc49820254f4f7800e7c4046080ec06c46c8e3c4550b17c7df1676ef4027d8b244fce14c85c079e7fb195cab743ccca65c014dccb08718b97b0a164a02cd1e4effcad76563f3633380aad36f3751e6bc60e30be82738d79519433fdf0ecefe4ec5498a2ef5c3c1d1329b1a94f1c3f701e6720d8cc810f91054c6de3e1d1c6da4400544b130d177655d5fda4447d54e525195e8a02f2600f49234d9542051d506165419afd7d2804bbc859a8b2e2bb874044a6d251127005c515b35aa4ab733d0252276d93507819a57c9910b9b85999edb55e605e3ffd753e8f00d43acbf2116fd30408be72427240831a1911be8d5c4b00cca768066d6354bf833131f52d953b212b35504090b576cfe6f702388f0d392ed8855ef98936ad37172de192c8e702c1fd6667856204eb327bfdb852bfe6e48762d46b1dc449a5bf2346944f41e1f43d1212085f1f428230bde126af57ab449563f1a90ad2f36f325ed370ba127c2c5163335fff075ceb9f9470be62b18739ceaa63da8569f3ba073c7394911bf37190e17a0e41eecca426a168052e57197d25ae1fd8d1f497112c444d7461679153f71435f28cbe5880fc971c22908f608ee09c132a98d57f7fd48b88de74d665104c5856f369d4dc40e96fb44ac636d66f66ed65ed0fef036b611f32826527c68c994c360ef40f279c4d379a416d2a19bec44255f1b4cc89d7bd13fd6d224fd8452bd8fad80583412ab71a997403130d90f9039862201c3c04ab2b26df411730215cfcb1b32812aa411d6b9101063bf1fd0b6e0f449c5f3b47173b8051b70c33bdaca1d45e6ec22b44bd23080f966a2f92f5f97536d16305007db8ebb5a2274a1fce9e3c8c7fad967cac6df8382bfdea2e7e2b6e8524f51e0f52eef88cdebdf0aa29c01717a1ee5385a87d1186cc67267f6c2342f77c1a6f13fd8519918c13cd54e5c1ad79eacc591a7ce1e012b04b168ca62ba4a9d7558020e02e4f50a7cd53e311d5097c4635a5de896fa6614f80307df799c51b2a037590ab97a9e41ec9803169a3965daf16109833a61d4aa6b7d5e85ba821bc3b9e5fe9981118b68fe137195ef4d0cb249c424f5d87068e97814d8fe8749a79cddb154f6d40f690118d17d460957c2f0e6cd3975338be364f506a9023b11ef9318cb507af50876f2b94de939616b231dac65b8dc1ebf9ffcbcacd2d2d8a0d5edc263669b02e6d5bae10710c130b3d4ceb6dfe7b9f55bb959f26c99fce1c6504000b6b00830e7505419e7b45948300a6f1d8bda18039ed09b9f50b910854db83cdcb6994dd9ecba6434109868872f13e3e4dfd00d253074c15051fce3151d5218a23f435ec8963d54bba2760d3f21cb0aad93b9e7bd56852e12433d701d4e5d10d1f7666d71f9b4c0355b65a969101e3681c696d24503ea929d6932bafb7e8bfed6903ec8b1f3d15599a332a0a3bb67f78c008fd3707097b01675e05cee452314fd4d5d1bb09ba8838d286e0e926d382e3ec8385ff86ec85e3b45f7a1d8155c59ef9ffaae961e8a2630e60f5709996baa179516f163dc136260275430b93253c4b51bad86a6965ac3ec06c55e75dc747474580055dc52364f2a05cfd639a8e980b60d2366f0660eb85d805c6991f936a22d6f6b24a33e9d8c1a6bafca650b8a911b4d9c430ad1added67f7f7126691105ac85a370fc11ec41bf225aec61ba0f790172e4a1d6475e1dfc2d5ec98d40143bb534536f273789dcdab2cb15ab6e84d01493681533c1b60350b9937772e3003ba7413e948641db37ca201dc13b040cc6d4bcaf838200d9a2923bebc9ee275dcf59b5a0b687897e2d8801ef84b9a2cea37e5f0e4bef9455e3aa7b29c6545f39c107be3e69c314c06640ca3c47b5295f11029d76cb5a5b414348a1f526aaa7e2d8820dd944685a3fcfd2c8bed45c6263aa50b1e1f8d9b1f7d8fc47f7d43a97f7c612e1b433e1a256cf9b0a580ce2f4ce237011282f79d3bdd81c4e427a0fb711a246b67f03954dea06bc6f3f11cce3c1f7f4e4036488430b2e3529401892f22f4fe1b2bc20ca8060110661252cc8b62cc264845914e321c7fba590bf0c74c39a24bdfceccf18f7830e8d73fae74444e930d1bff7246abd512bc57950c42c9cc0595e6da4226f0a3dae2420f927c1322c27ed974a44267827088efa9c2de0a0b662a39d73a176e7811b9bc17ba821354f4392b0d0b1263c24370141fba5b66904b2e954efd99a4f825ed2558fe47ad05e8b223fb9963fb26f112a83714c70e83002b35c2d6e0837a0aacabce8a60dad5ab101e484c8d2065634f94f30addcbda0784f0790c49a86416cbff88c029e680229dfc571fc319e5a5a35a7866b100ad92834b24274e3c88ff3dff0ee2be06ef2d07c7879279d1e09d00be4d92b2a1d9b6217dc80fcf8a61d74d5e077a037258647f1032720f17de368c4729d7fcd55d99a077b2e91e629a587f147c6ce23bf962a8cb290ac72e21e562fdb7ea62868378746e64fcb5f3485b6935ed3eeb39ffcee8f723802b15c03c3697a1fd0db0b729ce4d7dfe5057aaf4c09ccd0d7689e69f899533c605bcb69608b8b4f98947fa8020bcfae2f92c09a8d2a1d92506ba804f033fa108f91a62bc0c77f96c85ef62bf42cdf5acf13b89ec1d70317d222556d4a03125149d7dc211c39d67216c4e9e66ed201664418eb2b3202281ad1d15c5c1602334ee18b2b0d8e6e30c6679884c776879e601c7ca6b3780841537d9fd5b0907814cd0370d1339b60bb3faf87751255f3d015157519122dbcf4b8dee96fcc7c3ee458189fc6f302328f67e9081e31c5b62f600a6ff7a9785900ab8157969e1a8bda794c80934dd5635d2c19c4c9e9cf128754544824f1f8a22c2c14aef1c0cdcfd044de0597744da49692b10fc2a6dda4e59243597ff40ebf4e6dc387c3079ebef87e0ae1c26372454cd20e86e9a7c9ae7792a5cfa0fc095a7fb1d5d12ce3d9095dd5f3ee024a35a2fdfde214bc1b6f843a493b12993928ffd9b2d850df6af17a828b8373ea5b951ac953de7f28f2decc4b49a971ffc780be176a368f6f80390cbc727d212dfa655d2fb8bdb831a391f05147b8f8f1c3f45127a9c03c3cc9b945d8c484639401994bf89a29ba6f4fbcd8df28e491ee9ee95f2545982dea2e27a88bae908d75f40df81b74ee25b84911ee08f72e52a4ec9d69ae498dffb119a18097e966226daa014380ce1f71f16f74137ed23782c6ccff82f118cfad9fe870de9cbe036c53f9ed9ef537e1c96b4161c9db6401e917da5e36a729fe36a2fb971b6093f2580e6aad2557f2f45f386442ecef9d8d541cc1242ddfcd8f7d8e0b93d77fdfcc0285f33dda8cde55b29c3d8063596d5f1ef0449ebde3dea44dd9e20443b66abeac1da79bf18e29975d49bf80952c01bac1369099aadfca66475b4c6e35516fdf2cc37f1b2762b882136dc5161793f73a2121abb7454205ed661f3577185419abfd987dfbd3b7661b3c98a55dda33613433fd2e3017ecd005593ca51e7101535e7a2f3e007c73fb712b537394b5c4c5da1607b9f5234de707a941d7abda0cc363895b0b38026c4d28c4ba8e6182b44ec38a717de60ce5c58e052d7d7a95db5fd4bb78530c8356469310bd3124a75f169cf6cad05dbf1907fc74ec1e035ae4d7e5206d41a2b347b124659dd385114800d968205eda7f9399fa5ba7dceb0f3f49dcd914ac1dc1e7e03c2bf2d7d3ad44e3cd0f581e0bde4b870398c34381b47493812229906441890ff7e132668b396a7e41c4fdce38118bd61e2fac853776203991a9faf6ad385de46569dd22ee419b1508802b7f558df50ed27bf2caf128c9c6cfabffbe7f6f62e365b3bf88cb388f39e382a228b45f604efea0547732960f5e63263507bf492588a9408682a6f4a1fcf56d05b62e31a3fd2c4176ec5227dd4c0a43d6732556022a8638e47b81331abf5b736e8999c961fd0701ca2dda4d9a37e8d30dbe8555ea6c6373cda3e669d2925a4773c8047cf5de573f92c18e008d1cdbe505c8ffe77faf49d83ecb2761c7d78158c7892f460c93dfba10e9b03a4a0d0ca84ab0184278c83394189cbc7fa1768a60c67f7a7305d414bfa73e4357f5e9dbe4728553f9849e076edb9a756b617f6fef897a68f456bc21f0cd72e08b00fc405d7874a8c3600e29749319e8eff34441caa3e4b889186eee942bf8ae9b636e731a992427e1a81ee490c995f768067261744be529d566ed67a020774733c90aaf9d93f237864970673b9bcaae179cd360840b6203f906325c6ecf8ad7bdc4813476fe6bf3e926a94d9781863914dcd3889dc2fe6e9f893249459d5d9ddea78848722237635d564c8416688f502ef6876a398d0c0643f7984b1d38d536f24c5b96e7d6e956f72a5d426d03cdf8486facf3484f16be908c70d633a29f2273aa9394ecc5bbb316deda832f8d819cd810c3660543389b612c10f4ae7e00835dedb4f6ecc5b012f847dc7750e08d28378c8aebec9ba4e170baca3ca6103a15319d7d095a55f095ca87341b88728be4756c85218548d4276c6488eac279a975bf1dfa27caea6e88333ea8e1b96e84ca6883a449815a3a135359c83f133c44305270fa4d070de3a7b81121d7ecdf3dc6bd83deb4806a869521b4b3207d99b4d97ceb2ef9f5b4437ea07699a1740b9ff18f3995cc66543b44d2ded3558ffbfb994fa0ac86d95d468e6b26d7e08e23bf5bc193195ceee104c52e693408efe6d5c11bbc5f2bb4bf7c23a44ab091cd78d35d042a4635015cec4d17b5cf7e6d78fea1eb75d2ff0e135f96feff48f3cbd03c4b842739506679f474d6a18e3435081643b227d6d4cfe1116877cb7486093076987174044c4b3dec42707dcd1789bceea61cb0f6771ede4ddca5c80e91afabc5686799868730c1a9263a272b8c2f66aa5c5f602e5ac8b6e64f861baaca2be9263f1ef9df98fe6853005b56d193c8410c6728718527cb58dc4f1a8fddcc26f2351b479d856d0d7edc7bd7cf3f78241419893a3f5fcd8faa6cce7371f8b2bddfc6ba0a331f4af842b61d180ddb037af77c960dc0dc4280858074b8ebc842380255d18952ed84dde2c23cfb532ae445792aada322d0689487d3aa139b9ad8f3efb31481f0353ff60f3b2f6491e6b4016b0b749be72a770eefe33bb8e9193349aba13708f9c7090b2b8555e9f2efabcfc03a0f7eadfaa519ee3ee17d91a36eec4991b867f16f94f619e97a2dbb1c9e94601d68a1090cb06decc16ed8168dc95a807deebe2833eebda6ccf160ee585d15246fa1419592cb6b22120b90aea1d583703aa161289fac4e394d833a4ddded863052228f2400811aabd20cc40427bfb977b1a415d2321ba180149a96c8fe31f5296b398c414baca2b14d14ec3c6433ac9aaf18ebd457411c102c24667d10dd9b98cc1edf10f6d744bc500a1485d051ba2dd0fa400a02afcd8f779e1419398d73bb9740a710f8a8f00b2fc3a5aa5c7943a15471395a3b301892b62e98affbffdbf7fa505d03536e71086ef806d7a9dc427c96c204c52475eccfcc32d295288ea1a5449f15bd2689c88890abaf686038ef51aa8aa251c26747cbaa604a4c27eed949aad5323d5021be1d133ed5e00bbaa5209eb8188a018d909ece5b1bc7f3b3ebc28e66a42751df2f1a2611523316c8bc220f866a6342bd0b7a0bea7247515d81c0ce5534fc04065d10ae7c0a21ee7c8118dd2e4d6b6d35a2ec9464b4a8aedc48b4a5635a6f083bd754d886fbb9e07bd7c816f08c9d6fc40aedab44585ae869c28f443d10829a4a8b8649b35e6c751b1faa7e1989498791bf8b8a9252c158a765e53df14f5aa6a058ee072daafc7fb20408aa13a04c0104c28b6e118232ae0b2be042cc7632d450900935c9cbafff1b1fc3dfa0a8ec7153392ce67083e80272be835a415d0d2ff94f10f25c86100c976622b2fd1e419c00543c972040be564c650739dfa57fab255656c49b1be2387049b0c91c6257bdbf3bd08b9b4a1eba61db79f0320438943ad4a14103e91210b36a22687f12285b4d64d92734d82c287256a9eb963f14dd4ecfd68278c86579068fd1e290fb0e1c33c10f64a95da0ea14c3fab2169b0269c7b8ce9d7eb567b1ae898634757c43e20d25c8c27e194cc0076b0150105059813e760cfac0a93a5d97bf1fc7fa24541b7ee701070b757710bb10d49fa208dd3aceb72da0da3ea0c185d7f7f1c4733453047bf7381e6cb5fc02b747f4f6c9359cbc08573e143f5aad3459bcc3df6a6e8368ffef38a1ab9471bec996c2c0769590b2ec296dbc8fd3017835743c0ffb569a91c8de8cc8c85fcefab09d35f1f9baea9386d31ab5d848a890746ce017c27247c6c067ed204e18949062c6a9b18d0c2e23fdb431aca8e3b51700dc35a63b70a25104010ac759338a278710e0f5d6f8abfc4bb9bf2f618426cd00e113f9dec3eae67b7fdf743f5ab15d6759e3fb36eeb504df6770f6f2557d5468b54563cd86065ac0269129d758a415505d0ec17a720335e68fbcc49bd2293d0a9203ea483d246702bcdc1c3c25d1d763cae81fab8de520b23d70e29998cdd3d6e071c8960e90a732d395e4f4d99066f12343f8cdcfe969b540a4ccb614d7e8ccfe256a26420586e0449dde45ae98c36f495dd4fadb6af04516c1b5a37673d3856109ea0b2ee6f24e672f6706f2e2f75bcefe91d862ef08ad45f3ada412c0c0ecf748366fee19ec40e088b5cbed76544e4bc394d8ae03f1384815c380e38aa0b3a739067cb22318b43fc92ba9ec306ea67cd701eada0a65e800ceef1ba3f108b19bc0ae0f0daaf139e59b5e57f05e2dbfb7ce52921d1dd764af2262bb687d9adf9830f598ba372c4b6990445dd24944443a6a5a8d63d97231743ba1adca4a111dde15160c5378b50c9f31cb735aeeeca3d952afe36a87b5f8952f292b7f846c5743b9843e286b9297ca926dd5a58f19c14d203c5d9cfe41a974b8329b484b394e93e6c2947a8fc8f7c74c4fcc28527cecb220179e4e4e14d374c449ef49caf02d1438be11c91670a29164403cbbf6183f24ac95eaba36534ad2d39aa4d33f84c9c31b9185eb0415afaab3db966cd27f9a43c152ecabb25942211b3c846f719b3b003538994fae3be06485e1215b973f378b794b46774bd5fb4c11fc0c583fc9d4c83f5bf132a5d9e990a92e0445528a75e68468ae371642193dcd2e1cb9ab7451e0e9f1dca3af02612ae54195761c724e34675fee6ec5d74af24348639f4da266ff83f31cf08ad4b99476d578b71c77c7d06ee409cdd86ddbc7a3257715ec9d132ccb74f36853306b822ef101591c139749407b907f8353f026c62493197266fce11fe3bda2b678118e95bdd3d35c19d0af09b6fa62566d25b70cce75cfd3f853b18aa81cb0c6c959d138bb13907c83df4505573d843876113af7c6224cdebe6606eb4cfc96f40e624c899089fc2bfc19f82614b0899b36e4bd75549448ce2880d2ca757ecc06d6c71a01019c2e0bfcc38baeee1c93270e308819ca3a097aeeb81584bf1aeb4a231473f7cc4c810da84d6193576cae79373c1e0694b1d97fd6c74387950c5e287d8e5a6dc7f0ea48bd1cecd01a11a05066c8ec155d9dbabc63d6807f21e7b144afaf713721d93710b81a6c94fb6f743161bc1db57dac69406f8992401cf84fdd3ece30305c9836d9441915e1d292aa48d84a6c38c5eda8b4603872a09496ed08180057364280ac4375c90cb801e147c2822909d1a4e1ea04caf2170d7f33f8cc5797fddb8d2b968596a89cc415e72c552fbdbc24168b02325c95ccd3db74402c006ccbfdac139a9721aea207f0b4e5db3ea25142614f3abfbeb5b804e32b4dc38906d6a7d0726aac1b858277b4f6b03c77794555a6e58ad97ae53a8b1c6b8a62507529b0a1493c06d9c47b5a2ca3b7203ea70df0494dd3b168104b7e1d9bf9992192789fd7666e2f09c9216cacea5b5f2a2ed69ec110282d5193e90c178f041cad781efa40ca8e3c169d1b4089916cc852d3a618f194efe89dd7a401c9305c5b611ef06953348bdf46a4bafadac3f589cf9fb32febed109a2f80114efe93ffd137231e82e8ac8c9bd17ee1cdf3fca25535574437f3300f45e79617b19c1d3cd8277ced3ffe3543333be2bb263bffd8cfdb706b9c708c0181b3b12e76a5ad5923562ee6556d1ac258dc8a8f7fc9afb06bce18b56373120de825284ddd8f918810e63ac4a99e8f8a872f4db20ac1457ab1f7f56d521f9ab0eab5a67501919f611e63bf05831871d40cccf40d0313d984b3ac932d4a184539e153eb414fd021e58a102bdc885daa59f6251973eee674442fed1ff4cf7feb94eae4724cfecfa1b69311a66c8b04010e337de0bfbe7929e6fb076ac30844ade850be1243bc51719df946777a9bce7df3cadf7034979b36c616cb3df1dcbf941356e008866814c5d1d34d3bb4df4c6c2887afad47c9637174afc8a455c65b853868feaf84bf9edcc1090e616de368b234dbe2ed94b3cdf0e4b3312c686a095f336ee24eb5d953a688dea800c9c680aac312beded0bdb6d469568ceab0bbe2ccf755c70b6541e0157ca2cff7a1301fd5a23daa55100f50b98a9dac7fce7d4d39f739c29915d5e27597b0d60e0999a7fd878003abc02d363dfc3c5ac0d52df74ef04ec4d312aea8996ba2e7ad139aaf7bccb326f9e3cd12b9bde140255fa6ae7f01d2385a2704c01797f0785e7f311a1810796c50f81690a4e35a7cb78c813bd0b8455fa01768d208c32b5b4d1c07e6b5f0c6a65745f4c711d4dae42dfdaf4266aedd6e091a63dca64368164ce07ee4e7a7a81f1e94be322fba3b70e45a7a509efe0dd87ee1c0ebc586e2e73f091649785c0eca75cec74711219f10cecae3c2371118875ff00345c6dec52ebab2293f48f561ce4b6c5dccb1d3b699943d85c474b7ce3c0def35bdd802fbe7dd816b3141720d22b4b3e080045592c6c93ad503a9e56e4e4bca01a5a631cbf2379c3f464b8ac6fe747e69585bd0e0fb6a7e3f1606d89dff279d31cefd456352db827e1ecebf2bf9974ab663d58a44719161455bf470c1318cdc94a1200957cc6ef92ffdfcfa5aa1569d46351ce5cc70a0f3ee971980dd06803ed0957a2676c94df25a8e3b14f08a0e2546651fe972633f35d66acee7898e2b731d47ccfc0b5e722f02aeb63604248e368795ad5cb7554388a4b8ebabc9119f9972af2cab111fdd7249bb5c267b6ab3a37735358dc96262b7a35bb7221b3c018ef2625c225f5534930cb9dcaf95a68506ffb6d97613c883fad2d4c5c4a94d67dd0ab5a7db843b067b74575e98712f651b5f42dadb844f47060fa9fce4c073f8cb205d21cbc750a66c61c2356977251bfe79a660401e49e1938d88e383ec5cca3371cce9fede981e230408bcc01b03de33fdaa0279c9317ac5d1c1d938012ab5656e83313fb6f40bd71b432752d689a510723e500777be595f84d9353c06b4d3982830a7f268326189bb8196b54158466c0134f0061910ab4a3fa7057de84c89510cd11859703589aef4afdb74e140c921e77dccbc8afd7df883baed9989fef80fdedf09d65ab6d5568506b71035258eff73aabd6d35e93cc9e6076d95f0e1bd88c042e14896c6c1eae6ccef9b3c2ef32598f1f1704f6b5d40ab0339abbf3a7519fbb8e6a815b3e8cb29b2a7c74f725a360616f96cffa089bde94f442b0f114de74f1bc15a9f76772e920a47259f7ec3fd40b4fd19e12ae6d14fd0715e008962edc00e65af0e4f4431038effe699a0dd6927a5787b3fc56c55dd21760f5048df7b78fecb59fb04085e1c38e9aa2302200649a8f765b89baa84b1b5a7522b829ca51dcf2bbeb4610ae1ca6c297b1a5b753aec2867e1292024deba239c6edb26d1b313d9749fd3d174a3c37b691a82128d027496a58546579b6669f6b9ef3a94a22d1c6180d6dba3d76731b63bc29dc86ca8807476afd068e13e3df86a46b51a991503751807bad08371628433526f3f642b501baf13a1a7c3d69d4609ee78778bd7b93eeb7ae305d1b18d64525d2dcefb01639ab55eaf542e596022ffe98fd49b4647dd8c168ca835dbbc0e7a5c389836eefff1346c8219d4e677762827f68163e9f1335b6de9463fb592513fccd9d389324d279b55820d21c000a9387a490253bf56d3748c441988346f5330e899ca7e1cdf456d6492bb03b82b7b24de0acf77dbd0f8e82db591cb5335cb70205222c5e616fdf270f3b1ab057a9060c3d41d414b11b98f0461f5209124b7ac4ed027fb0da3e40d8abafe2994f1de4d6674297d5723dbf036363015e5bf5007e2845cb78f4f2a507632bef99f560a668bc2d98744039355f710b30ab6732fa4558ea687ae74d7f53d56ec2410562d3bace3e98a7f8496f79edb788b8e8df05281f0f0494364486dc70db29d5232dac6af114e27295e02b6fec3176465102408c70b77fb1323641aa1b9065ea6260b82d65eb6408b3fde8205b9722672c6505c0ceb16e10444029d4d1abbead87f2639996c53b7356a8c3e9cb544a0d81a8bc0c41ff3c0e8ed8c7edcaa63803d4c49d6724be5718a8315110c5e3a1e64120192ebd3fdd240adede87ed98a05b56b9f99b3828f24af0cefdc3e3db9a4cfa3f8431ec67be04a5872e413a338ca0caa997fc51170d2ad3e2be681757c10be180d070060225db789e2d45cf79ab335ed981dc041078f979c58cdf73ba9f4cf363ade0c7dd72946c6dfe94edc1cd1a1527fb4e9d3e7c61780893ccb56937a20158107be6968d650cf2947d66e4cef238a0f84748adfff41d54c7c91c8a01be58e2b7e3f6a2add7f545fa93bd69cdbbb3c199a76743e4fcc598ec50308799c36e89a9612c8e55da94bb595b2a04e0b18400a00371cc7395c77092ed8ed88353abc94fca5e8b3486a4600e65a2c101bb320c48d876887b1bc21571e851dbf7f78ed3d9d1dca4d29e16cfa39480b5727a88e325f15ada373f6f6e1ad28d92855b742e75ad64c5f3aa1ec1f6bb5d58611ababfbcf620189b56d2ceeaa4ddb4bcf55360c8433faf9f92559cda3d2e226d6ddf63d088affa17468d70d7aab86e76fdd22a6310bffb74b84639156cf99860598c82c3147c29157dc849f0c839b5e376dff2a08a33fb0c6e50a4f277c548b54b9abbe6e2138d6d6977aae971790540418afca7a8fa6a67403fa7e971112e88a31a4359d0626f9eafabd592154b177f58565bacd13c63c413d5ac00ddf81cc36db1b632696409d6235e48f2b4cf8a5a61725d949d91070f68f69242e8b431928d640c61d9fb9439f25bef72ea02254002de6b30fd81a333305bcd094abf9f4eed186950f99e2bbf654f6fb7d169bb75ae0669b7cb70bec5d2ffa4cc6dd675a689b5c10177354b6713739e26154327b3e12fbf960ea87c0fd5aba6af41d2866f090e571cb0d4422ee1c4c5a9746896e9ed55ff94ba355f1b85b1b75973afb394329dde2c05a95b7700905acb00a352466155b98d5aff7904f034144ffb19b55f9c32e1f6c9db83d5e80f59b82ed4ccd08c1cc5d9738ee1bcff60efcc34c929ab59aa52c32c9ed49ed466148b76ab9852c2198fe9d18a4209702a58f4ead70e879e221d9248d33d559c3502b5a702c78b7ef4ee97c58724eb1ffca8ffb9b4260d09e90f2b3525cda3206bb5af98e0d433512c7d3ef15f695b607bb3774141dcd3c51e87d4443a5af67773399d30b4d3344a24d4647d333381965759a967c4ce7cdea7ab4f2f19f278c9cd69a6fd1b6511cdb1bad8ef3fab47f6d61eab0c20cef8b6d3c66348b664fdd74d1f71e05cb0ddd0530f13ac20e24ffbdea6504ed97317adaa34b9cf33a76198ad168cc7d065b02aa0b1408bc88f960a7d0e2f07893f609baf5c85bac6d9aa06fac2538a441100532713f4ebd468043ff7ba9f498252a19b903f895d31742f6d2c0659ca3c6478778da4dc5b74d6051f4646863e3fbcad080ab258eb44353487d00dc70be3b28d7260a5b728cecbcf09da0455562687cb10f749b74a88d80a95d87a1597beb81c1218bdbbd3a0c0966671829198ce7fdfa9f1fcf874ce7046be57f68814b0b6cb61a185fdc42f929cf54af97e92abe19b6120e65ff2c99cbea12164e85c04ff37b2b9f34e036aeb2324596a59f6945d2d68cac336b73b5727bfd47bcd4f53206a580dea248bfc5babb4cc1282e64ea13c3d3105ea17e3dfba4baf1c1becffffebf9721c0fd01be4a29834863841ba2377cd48c2bd5bbe4d1ae4486db90b61b01805b4de56e56636d9d341956d505c4f03c73767529c17dc31df25ae02703083159def312fc19bf769d00baa5ee5b3fd565bbd080a9cb6edabf815079afb62f05cdc81304bc74ae55c64ddea4b90c76d19af36a9ad44d91690431cd485cf61fd307c3fe572fda1b768817d65db97ff07d172b93820bc73754788c775b779b5914be1adb73c52c06bf36ef8d3810efbbb3577334738af94ba0eca67594d5a5275a2abc7c096acc473adfffd0be68ccfb010b7bbfad09c63ab3fc855cf5368f99a2b2f912c271269237b3abd7b7b6be84c37d9ec6ccd6d367b5a01c85532fd3a4f99d4e23b66039e69c7d80d16d9092fd978d36e6af21d36bb7cf321e83cce00fa9b8cc56aa010369ac1fbc3c823a408e9afa64de47653e4aaac7903f25cdde17dbb0f77196edb58f86eaafc9fd6c17720030664367105cc91077cdb933dbe82b8ede6c1f2691a193f97b37c6f964658fb8140d91eb14e07a7504df55d3a33accc39956399610f271d79075edda92c466bfd94cd522fcac13d3248895afd028e9394337d4a3044e8b5c0c4706edc1c17c96396b851c85179d2c6d38d889d77edf3c637e0bbb3bcfbc2934bafdfcedbc4257a014655b9c1eb4f9c4af5263b6ab1bf362961c52f208b2a030e73f0224c1640bfd1662a27e66a62ab56699f65a9b33c943624bfc728d449490f0191dc5f7d5f766aa068f8fc55547f0d7fb137694c8c9978aebc2513e32e124ee0571bb4c0f584bcc330861235d2eb528bcb449885c6b24b9d701c043ded81d0e9aac751282c3cdfc2f77ffeea8922eafa61ee3253dcfe049662c110a6bee16dd478fe1fa832c454df5d22dfdca6f99d1a3e743da3d55f0faf94bc1618ae6fadefe5e465c0062ec8411361641f793cd855d97b18da12a5f0a5f8450adcdf0233debd0f509c36f6dccb40a877b7d95c8d6bd69cebb881ccd900c99ab5ade5c5fb10e5554acefdad7e042127b7f91ba09d1b049275f0c49bb8d41b716070e8ca672696c37e4cbe063eee45815e09a00e40bf518f78cc08a3f664d327463e05506f421c9ac61aa3247880d9983f261a511aa3650042bacdea61d5000eb5703d484a8e0bc710e7a429ef0ac380b7c34cb613a0f1b2b8ef9e96c3949fb3ec24904208d8d72cb4162cf5521002d61a2c2cdcd0c20b3b7526e3c4d5348e0a06b916f818e0b6786873a925f12987c3d1cd95a8d5211affd0dea91e6ffe088af2e7bf6f1369810aaf226db471df600a5cc497341a3b5fcced4fb6c0e21e900ccff9d98ea848cfe92d1f4ea0d7c0255d38dea255bb903a9c36e8ba8eee028fbeee8e13341926883445833f65c6c9dd9514cfbb47c028e7e8f2b1f3eb12eaabede6bda147fae0892a846c650937c5caeacd924c1d5d45535a62d51044ad4605a0d95b04cd2baab9612c4f6382e7f4c9068c8fbd1d30613ab18acdaeb3c40a94319967cbafc3736a895456259bf594cb2274341a3c58d6bbce0803e4e9283fddd50ef51d1d2b130187018edded97567856b461eb669610512c7502e3978cc93af9c34df2897a1598f33bea0e8dc4c03c76ac30a362db02c70453160f43984726daf7b0ec58a582ece0459bc97d2e5a746e32578f0d3b1ec27a8da7000cc4f8e268e521ec4fdb05ec9f7ffcd4196a52224e2de66b36a2cb51c519cf627574a6b6275c73ee16c922a8b90481313651ae5f6437584b6dd43f3a88219367a2f38f87c9b876ccec0966ef38ada669866a2c8e459b02692696c9fd834f72418710526cf14bf1868a29d7d8c0529b906fa5a5880fc7b38aab1c480ef5727c78d8700e086baa71434ec0ff5e71df9cbc957ed39b411b8531431b91699ce44ad80101c2445d5058e8808a583719597090dde18795272a5f513c4162300d87321b9551a18adc3ec2cbeb0137f5f81cf0aae566fcd51bb1ed21bcffb7d481a36f40297aa92ab8aa7060ebb3885b57a68ada069e768cc87bac1e4a78f51d51604b78f801da9b52f99bc2bccae123a49fa7c33dbfe1ff52197afd5e4ab8e8214e8f42e20ce3252551a51f0ef71c08e4cb6f9301d77db83484eed3b5598a6329442d61f569da210efa89ef8b9fc018fb139d75b57d6df1c2f9db331754f5f31a830f81bbdf8f58681239b20ac9151551b58ddf794133eed8ff9bb2ff9d46abb465734aec22db09e34a872b23505c2dabc8ef320efca1ddcc32abb2850c03a24cd82e99c9a485f4ddf6d089ebdbe21825483e28faee26d0a571c223c86c46f5f861b4cc7dad4018ce9475ce1aedcaf7189059e7f7ca833e1a5c4f0c0431e18725a916a54cce96c23263f63265ee3b8700453402a87c95def90d023b6ee2e95a446f82a48a3d52ef8d0af3e6a69a89b430130989343d9b7a0c71821e76af667f3ac8b04fb6f76711b766e1769c15b78d0a88be4d8919d20a99474ba39d648c47475994828599429ded011d7bed800c1851093bd9f037a3500b99943ab686c5b693fa5224a0581ccb55e936e571dbf47050caf534a7162659bfc6d41c641a9379640622883b4411e975def8150794d917aab6a8a877964fe1512d442389644319cf7e62e120c55bff8f1fedb75f7ebcdc31b971d5264bb4fa29919c2319cebb8a0878768df20088b5e72f8b75973371691e40d2e9982083d1b07fb569d01ab74edc06c3cb2ab8c79634c4b2c5c5c914b5896a66dd0d1580b2d3e4d419a559589848096a851b2a05163347222b14096859fa6d44156b65f2190dbce4b36447e3cf8d3c60f75fb1b3f3b6001f618ce0e2e5eb04e8a9f76205d41280574873a6ffdc14cf23dfa944d462aa3b890bbf260f131f2211c13e720f07ad52bb996313a2b2621299ea02f3636d1c365c2dea6ac2f5c47a8371e1630d8c1aeb17ce16ddfc5eada8f8adf3ec784cc69e01a444d796c02cb1d44c8a38e62769f09dccaf394fb53a0444d63bb305bda3e2fbe40ad72cd7c47e8922445a52ebd6594a374171afefb55b036415caa96c3e7fc5fa56c4df5d57e3a9350e0ae6e73fa321f46b0234c809d56d07013095186e2a6b91234d193c328836249a30ae1949cb8559ed1b4213aff31c463b21574353fe37e628f3ad4e56d56e2f88c129447c9256f12ffdb7026a6264308e0dcc48ca50fc0fa0fd0e7b62b2c7c48820b959d7e6585cd8be842e1657762d455ea387e76aa9237aacb356f0a39b42e7e818ae5c8ded5e5b100ed8ac77cbec8ae3d5e3bd49ca28d899a819f9148cb2dd50db77fb09ae8c718f514348f900c0bcb92cd2e014b07a7dfe2e52cf3dfcb957e879ec0c6144b59495ab1621482fc626cf1722e3779a901f349f60814b91298505c5a375208ce58fc21f75798b3abb28896a6de2006bfc109743bea416c3dcaebd5dd25f4210a1bed96618236230d3fb4977ddabda7c3bba9b6ccd1a7148a92a4bd2bb1d1b7d1fc0748511b6bdccdec91c133f7505c4fef47503a4f5a23462d9063c9abee2350077b366949e37f78401402d84e72012d12ae35a352691bbc760e3fb0fc03d7afc66b74f284b5bfa9eaa1632f12fbbbba92ce4ffd2152e34c0ccfd5a98cf048bcc20d5ca493359e6897b475d7b3c70e546947c9dd35b1f8af3cc97e1c22327a54dc8c279b01cafe3722f8d363ede337b715c12e7c3b179cf9d4878dae48e6cf0fc3bffc4489a99</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="在此输入密码">在此输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">文章被密码保护。</summary>
    
    
    
    <category term="生活" scheme="https://dropsong.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="private2" scheme="https://dropsong.github.io/tags/private2/"/>
    
  </entry>
  
  <entry>
    <title>Python 进阶</title>
    <link href="https://dropsong.github.io/posts/85b8f708.html"/>
    <id>https://dropsong.github.io/posts/85b8f708.html</id>
    <published>2024-09-19T04:40:27.000Z</published>
    <updated>2024-10-30T05:17:46.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="零碎知识"><a href="#零碎知识" class="headerlink" title="零碎知识"></a>零碎知识</h1><p>这里是 Python 的一些零碎知识点。</p><p>多值参数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>(<span class="params">num, *args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, name=<span class="string">&quot;小明&quot;</span>, age = <span class="number">18</span>, gender = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># (2, 3, 4, 5)</span></span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;小明&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: True&#125;</span></span><br></pre></td></tr></table></figure><p>另外，了解元组和字典的拆包（自行查找资料）。</p><p><code>if __name__ == &quot;__main__&quot;</code> 是什么？</p><blockquote><p>该语句下面缩进的内容在<code>python xxx.py</code>时会执行，而在<code>import xxx</code>时不会执行。</p></blockquote><p><strong>类属性</strong>，类似于 C++ 中的<strong>类的静态成员</strong>。</p><p><strong>类方法</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod   </span><span class="comment"># 装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_tool_cnt</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;工具对象总数： %d&quot;</span> % cls.count)</span><br></pre></td></tr></table></figure><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>实现起来比 C++ 简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MusicPlayer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    instance = <span class="literal">None</span>    <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;创建对象，分配空间&quot;</span>)</span><br><span class="line">            cls.instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, music_name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;播放器初始化&quot;</span>)</span><br><span class="line">        self.music_name = music_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">player1 = MusicPlayer(<span class="string">&#x27;弯弯的月亮&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(player1.music_name)</span><br><span class="line"></span><br><span class="line">player2 = MusicPlayer(<span class="string">&#x27;竹楼情歌&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(player2.music_name)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(player1)</span><br><span class="line"><span class="built_in">print</span>(player2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">创建对象，分配空间</span></span><br><span class="line"><span class="string">播放器初始化</span></span><br><span class="line"><span class="string">弯弯的月亮</span></span><br><span class="line"><span class="string">播放器初始化</span></span><br><span class="line"><span class="string">竹楼情歌</span></span><br><span class="line"><span class="string">&lt;__main__.MusicPlayer object at 0x7f4c18f16790&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.MusicPlayer object at 0x7f4c18f16790&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="观其大略"><a href="#观其大略" class="headerlink" title="观其大略"></a>观其大略</h2><p>在实际开发中，为了能够处理复杂的异常情况，完整的异常语法如下（伪代码）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 尝试执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型 <span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 针对错误类型 1，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型 <span class="number">2</span>:</span><br><span class="line">    <span class="comment"># 针对错误类型 2，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> (错误类型 <span class="number">3</span>, 错误类型 <span class="number">4</span>):</span><br><span class="line">    <span class="comment"># 针对错误类型 3 和 4，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="comment"># 打印错误信息</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 没有异常才会执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 无论是否有异常，都会执行的代码</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无论是否有异常，都会执行的代码&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="异常的传递"><a href="#异常的传递" class="headerlink" title="异常的传递"></a>异常的传递</h2><p>当函数执行出现异常，会将异常传递给函数的调用一方。如果传递到主程序，仍然没有异常处理，程序才会被终止。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入整数：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo2</span>():</span><br><span class="line">    <span class="keyword">return</span> demo1() <span class="comment"># 利用异常的传递性，在主程序捕获异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(demo2())</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未知错误 %s&quot;</span> % result)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输入整数：abc</span></span><br><span class="line"><span class="string">未知错误 invalid literal for int() with base 10: &#x27;abc&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="抛出-raise-异常"><a href="#抛出-raise-异常" class="headerlink" title="抛出 raise 异常"></a>抛出 raise 异常</h2><p>应用场景：<br>在开发中，除了代码执行出错 Python 解释器会抛出异常之外，还可以<strong>根据应用程序特有的业务需求主动抛出异常。</strong></p><p>示例：<br>提示用户输入密码，如果长度少于 8，抛出异常。当前函数只负责提示用户输入密码，如果密码长度不正确，需要其他的函数进行额外处理，因此可以抛出异常，由其他需要处理的函数捕获异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">input_password</span>():</span><br><span class="line"></span><br><span class="line">    pwd = <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(pwd) &gt;= <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> pwd</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主动抛出异常&quot;</span>)</span><br><span class="line">    ex = Exception(<span class="string">&quot;密码长度不够&quot;</span>)</span><br><span class="line">    <span class="keyword">raise</span> ex</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(input_password())</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入密码：123</span></span><br><span class="line"><span class="string">主动抛出异常</span></span><br><span class="line"><span class="string">密码长度不够</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入密码：1234234545</span></span><br><span class="line"><span class="string">1234234545</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>让自定义异常像通用异常一样使用（若链接内容不可访问，可去 archive.ph 查找）：<br><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/c14/p08_creating_custom_exceptions.html">https://python3-cookbook.readthedocs.io/zh-cn/latest/c14/p08_creating_custom_exceptions.html</a></p><h1 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h1><p>原则：每一个文件都可以被导入。</p><p>一个独立的 Python 文件就是一个模块。在导入文件时，文件中所有没有任何缩进的代码，都会被执行一遍。因此需要配合 <code>__name__</code> 属性使用。</p><p><strong>包是一个包含多个模块的特殊目录。</strong> 目录下有一个特殊的文件 <code>__init__.py</code></p><p>在外界使用包中的模块：</p><p><img src="https://s2.loli.net/2024/09/16/6hNBfD2TYicIrqP.png" alt="86-1.png"></p><p>如果希望自己开发的模块，分享给其他人，可以按照以下步骤操作：</p><ol><li>制作发布压缩包<ol><li>创建 <code>setup.py</code></li><li>构建模块</li><li>生成发布压缩包</li></ol></li><li>安装模块</li></ol><p>创建 <code>setup.py</code>：</p><p><img src="https://s2.loli.net/2024/09/16/2NuGxiRUlYeVAwH.png" alt="86-2.png"></p><p>构建模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 setup.py build</span><br></pre></td></tr></table></figure><p>生成发布压缩包（注意：要制作哪个版本的模块，就使用哪个版本的解释器执行）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 setup.py sdist</span><br></pre></td></tr></table></figure><p>安装模块（示例）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar xf wd_message-1.0.tar.gz</span><br><span class="line">cd wd_message-1.0</span><br><span class="line">sudo python3 setup.py install</span><br></pre></td></tr></table></figure><p>卸载模块（直接从安装目录下，把安装模块的目录删除就可以）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/lib/python3.6/dist-packages/</span><br><span class="line">sudo rm -r wd_message*</span><br></pre></td></tr></table></figure><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>没什么好记录的，大致和 Cpp 差不多。</p><p>展示目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dir_dfs</span>(<span class="params">path, width</span>):</span><br><span class="line">    file_list = os.listdir(path)</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> file_list:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>*width + filename)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(path+<span class="string">&#x27;/&#x27;</span>+filename):</span><br><span class="line">            dir_dfs(path+<span class="string">&#x27;/&#x27;</span>+filename, width+<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    dir_dfs(<span class="string">&#x27;.&#x27;</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1 id="手撕红黑树"><a href="#手撕红黑树" class="headerlink" title="手撕红黑树"></a>手撕红黑树</h1><p>之前文章里写过平衡二叉树（虽然没写完），一些旋转操作的思路是通的。</p><div class="row"><iframe src="https://drive.google.com/file/d/1CYtVFas-RN0-FShGuYp9paXW_fWPQ9fD/preview" style="width:100%; height:550px"></iframe></div><h1 id="pygame"><a href="#pygame" class="headerlink" title="pygame"></a>pygame</h1><p>游戏素材在本小节末尾放出。</p><p>验证是否安装成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pygame.examples.aliens</span><br></pre></td></tr></table></figure><p>游戏中的坐标系：</p><p><img src="https://s2.loli.net/2024/09/19/KjPf6Dv53UNyoSi.png" alt="86-3.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line">pygame.init() <span class="comment"># 使用其他模块之前，必须先 init</span></span><br><span class="line"></span><br><span class="line">hero_rect = pygame.Rect(<span class="number">100</span>, <span class="number">500</span>, <span class="number">120</span>, <span class="number">125</span>)  <span class="comment"># 描述矩形区域</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;英雄的原点 %d %d&quot;</span> % (hero_rect.x, hero_rect.y))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;英雄的尺寸 %d %d&quot;</span> % (hero_rect.width, hero_rect.height))</span><br><span class="line"><span class="comment"># size 属性会返回矩形区域的 (宽, 高) 元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d %d&quot;</span> % hero_rect.size)</span><br><span class="line"></span><br><span class="line">pygame.quit() <span class="comment"># 卸载所有 pygame 模块</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">pygame 2.6.0 (SDL 2.28.4, Python 3.12.1)</span></span><br><span class="line"><span class="string">Hello from the pygame community. https://www.pygame.org/contribute.html</span></span><br><span class="line"><span class="string">英雄的原点 100 500</span></span><br><span class="line"><span class="string">英雄的尺寸 120 125</span></span><br><span class="line"><span class="string">120 125</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>初始化游戏显示窗口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pygame.display.set_mode()</span><br></pre></td></tr></table></figure><p>刷新屏幕内容显示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pygame.display.update()</span><br></pre></td></tr></table></figure><p>set_mode 方法：</p><ul><li>作用：创建游戏显示窗口</li><li>resolution 指定屏幕的 宽 和 高，默认创建的窗口大小和屏幕大小一致</li><li>flags 参数指定屏幕的附加选项，例如是否全屏等等，默认不需要传递</li><li>depth 参数表示颜色的位数，默认自动匹配</li><li><strong>返回值</strong>：暂时可以理解为游戏的屏幕，游戏的元素 都需要被绘制到游戏的屏幕上</li><li><strong>注意</strong>：必须使用变量记录 set_mode 方法的返回结果！因为：后续所有的图像绘制都基于这个返回结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_mode(resolution=(<span class="number">0</span>,<span class="number">0</span>), flags=<span class="number">0</span>, depth=<span class="number">0</span>) -&gt; Surface</span><br></pre></td></tr></table></figure><p>图像、游戏循环、游戏时钟、监听事件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line">pygame.init() </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建游戏的窗口 480 * 700</span></span><br><span class="line">screen = pygame.display.set_mode((<span class="number">480</span>, <span class="number">700</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载图像数据</span></span><br><span class="line">bg = pygame.image.load(<span class="string">&quot;./images/background.png&quot;</span>)</span><br><span class="line"><span class="comment"># blit 绘制图像</span></span><br><span class="line">screen.blit(bg, (<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主角小飞机</span></span><br><span class="line">hero = pygame.image.load(<span class="string">&quot;./images/me1.png&quot;</span>)</span><br><span class="line">screen.blit(hero, (<span class="number">150</span>,<span class="number">300</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新屏幕</span></span><br><span class="line">pygame.display.update()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建时钟对象</span></span><br><span class="line">clock = pygame.time.Clock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录小飞机的初始位置</span></span><br><span class="line">hero_rect = pygame.Rect(<span class="number">150</span>, <span class="number">300</span>, <span class="number">102</span>, <span class="number">126</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 指定代码执行的频率</span></span><br><span class="line">    clock.tick(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 捕获事件</span></span><br><span class="line">    event_list = pygame.event.get()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(event_list) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(event_list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> event_list:</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;游戏退出&quot;</span>)</span><br><span class="line">            pygame.quit()</span><br><span class="line">            exit() <span class="comment"># 直接终止当前正在执行的程序</span></span><br><span class="line"></span><br><span class="line">    hero_rect.y -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(hero_rect.bottom &lt; <span class="number">0</span>):</span><br><span class="line">        hero_rect.y = <span class="number">700</span></span><br><span class="line"></span><br><span class="line">    screen.blit(bg, (<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    screen.blit(hero, hero_rect)</span><br><span class="line"></span><br><span class="line">    pygame.display.update()</span><br></pre></td></tr></table></figure><p>在刚刚完成的案例中，图像加载、位置变化、绘制图像都需要程序员编写代码分别处理，为了简化开发步骤，pygame 提供了两个类：</p><ul><li><code>pygame.sprite.Sprite</code> 存储图像数据 image 和 位置 rect 的对象</li><li><code>pygame.sprite.Group</code></li></ul><p><strong>精灵</strong>：</p><ol><li>在游戏开发中，通常把显示图像的对象叫做精灵 Sprite</li><li>精灵有两个重要的属性<ol><li><code>image</code> 要显示的图像</li><li><code>rect</code> 图像要显示在屏幕的位置</li></ol></li><li>默认的 <code>update()</code> 方法什么也没做。<strong>子类可以重写此方法</strong>，在每次刷新屏幕时，更新精灵位置</li><li><strong>注意</strong>：<code>pygame.sprite.Sprite</code> 并没有提供 image 和 rect 两个属性。需要程序员从 pygame.sprite.Sprite 派生子类，并在子类的初始化方法中，设置 image 和 rect 属性。</li></ol><p><strong>精灵组</strong>：</p><ol><li>一个<strong>精灵组</strong>可以包含多个<strong>精灵</strong>对象</li><li>调用<strong>精灵组</strong>对象的 <code>update()</code> 方法可以自动调用<strong>组内每一个精灵</strong>的 <code>update()</code> 方法</li><li>调用精灵组对象的 <code>draw</code> 方法可以将组内每一个精灵的 image 绘制在 rect 位置</li><li><strong>注意</strong>：仍然需要调用 <code>pygame.display.update()</code> 才能在屏幕看到最终结果</li></ol><p>背景交替滚动的实现思路：</p><p><img src="https://s2.loli.net/2024/09/19/wyk6DFBh5iMOHGI.png" alt="86-4.png"></p><p>pygame 提供了两个非常方便的方法实现碰撞检测：</p><ul><li><code>pygame.sprite.groupcollide()</code> <strong>两个精灵组</strong>中所有精灵的碰撞检测</li><li><code>pygame.sprite.spritecollide()</code> 判断<strong>某个精灵</strong>和指定精灵组中的精灵的碰撞</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupcollide(group1, group2, dokill1, dokill2, collided = <span class="literal">None</span>) -&gt; Sprite_dict</span><br><span class="line"><span class="comment"># 如果将 dokill 设置为 True，则发生碰撞的精灵将被自动移除</span></span><br><span class="line"><span class="comment"># collided 参数是用于计算碰撞的回调函数，如果没有指定，则每个精灵必须有一个 rect 属性</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spritecollide(sprite, group, dokill, collided = <span class="literal">None</span>) -&gt; Sprite_list</span><br><span class="line"><span class="comment"># 如果将 dokill 设置为 True，则 指定精灵组 中 发生碰撞的精灵将被自动移除</span></span><br><span class="line"><span class="comment"># collided 参数是用于计算碰撞的回调函数，如果没有指定，则每个精灵必须有一个 rect 属性</span></span><br><span class="line"><span class="comment"># 返回 精灵组 中跟 精灵 发生碰撞的 精灵列表</span></span><br></pre></td></tr></table></figure><p>整体的代码相当简洁，共两个代码文件和若干素材文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plane_sprites.py</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 屏幕大小的常量对象</span></span><br><span class="line">SCREEN_RECT = pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">480</span>, <span class="number">700</span>)</span><br><span class="line"><span class="comment"># 刷新的帧率</span></span><br><span class="line">FRAME_PER_SEC = <span class="number">15</span></span><br><span class="line"><span class="comment"># 创建敌机的定时器常量，为事件定义不同名字的常量，从而能够区分，从24算起</span></span><br><span class="line">CREATE_ENEMY_EVENT = pygame.USEREVENT</span><br><span class="line"><span class="comment"># 英雄发射子弹事件，为事件定义不同名字的常量，从而能够区分</span></span><br><span class="line">HERO_FIRE_EVENT = pygame.USEREVENT + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameSprite</span>(pygame.sprite.Sprite):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;飞机大战游戏精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, image_name, speed=<span class="number">1</span></span>):</span><br><span class="line">        <span class="comment"># 调用父类的初始化方法</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义对象的属性</span></span><br><span class="line">        self.image = pygame.image.load(image_name)</span><br><span class="line">        self.rect = self.image.get_rect() <span class="comment"># 自动获取图像的尺寸</span></span><br><span class="line">        self.speed = speed</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 在屏幕的垂直方向上移动</span></span><br><span class="line">        self.rect.y += self.speed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Background</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;游戏背景精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, is_alt=<span class="literal">False</span></span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 调用父类方法实现精灵的创建(image/rect/speed)</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/background.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 判断是否是交替图像，如果是，需要设置初始位置</span></span><br><span class="line">        <span class="keyword">if</span> is_alt:</span><br><span class="line">            self.rect.y = -self.rect.height</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 调用父类的方法实现</span></span><br><span class="line">        <span class="built_in">super</span>().update()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 判断是否移出屏幕，如果移出屏幕，将图像设置到屏幕的上方</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.y &gt;= SCREEN_RECT.height:</span><br><span class="line">            self.rect.y = -self.rect.height</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Enemy</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;敌机精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1. 调用父类方法，创建敌机精灵，同时指定敌机图片</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/enemy1.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 指定敌机的初始随机速度 1 ~ 3</span></span><br><span class="line">        self.speed = random.randint(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 指定敌机的初始随机位置</span></span><br><span class="line">        self.rect.bottom = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        max_x = SCREEN_RECT.width - self.rect.width  <span class="comment">#减去自身宽度</span></span><br><span class="line">        self.rect.x = random.randint(<span class="number">0</span>, max_x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1. 调用父类方法，保持垂直方向的飞行</span></span><br><span class="line">        <span class="built_in">super</span>().update()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 判断是否飞出屏幕，如果是，需要从精灵组删除敌机</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.y &gt;= SCREEN_RECT.height:</span><br><span class="line">            <span class="comment"># print(&quot;飞出屏幕，需要从精灵组删除...&quot;)</span></span><br><span class="line">            <span class="comment"># kill方法可以将精灵从所有精灵组中移出，精灵就会被自动销毁</span></span><br><span class="line">            self.kill()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># print(&quot;敌机挂了 %s&quot; % self.rect)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hero</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;英雄精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 调用父类方法，设置image&amp;speed</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/me1.png&quot;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 设置英雄的初始位置</span></span><br><span class="line">        self.rect.centerx = SCREEN_RECT.centerx</span><br><span class="line">        self.rect.bottom = SCREEN_RECT.bottom - <span class="number">120</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 创建子弹的精灵组</span></span><br><span class="line">        self.bullets = pygame.sprite.Group()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 英雄在水平方向移动</span></span><br><span class="line">        self.rect.x += self.speed</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 控制英雄不能离开屏幕</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.x &lt; <span class="number">0</span>:</span><br><span class="line">            self.rect.x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> self.rect.right &gt; SCREEN_RECT.right:</span><br><span class="line">            self.rect.right = SCREEN_RECT.right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fire</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;发射子弹...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 1. 创建子弹精灵</span></span><br><span class="line">            bullet = Bullet()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 2. 设置精灵的位置</span></span><br><span class="line">            bullet.rect.bottom = self.rect.y - i * <span class="number">20</span></span><br><span class="line">            bullet.rect.centerx = self.rect.centerx</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 3. 将精灵添加到精灵组</span></span><br><span class="line">            self.bullets.add(bullet)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullet</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;子弹精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 调用父类方法，设置子弹图片，设置初始速度</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/bullet1.png&quot;</span>, -<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 调用父类方法，让子弹沿垂直方向飞行</span></span><br><span class="line">        <span class="built_in">super</span>().update()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断子弹是否飞出屏幕</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.bottom &lt; <span class="number">0</span>:</span><br><span class="line">            self.kill()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;子弹被销毁...&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plane_main.py</span></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> plane_sprites <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlaneGame</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;飞机大战主游戏&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏初始化&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 创建游戏的窗口</span></span><br><span class="line">        self.screen = pygame.display.set_mode(SCREEN_RECT.size)</span><br><span class="line">        <span class="comment"># 2. 创建游戏的时钟</span></span><br><span class="line">        self.clock = pygame.time.Clock()</span><br><span class="line">        <span class="comment"># 3. 调用私有方法，精灵和精灵组的创建,也是初始化</span></span><br><span class="line">        self.__create_sprites()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 设置定时器事件 - 创建敌机　设定敌机的刷新时间为1s，</span></span><br><span class="line">        <span class="comment"># 英雄子弹事件的刷新频率为0.5秒</span></span><br><span class="line">        pygame.time.set_timer(CREATE_ENEMY_EVENT, <span class="number">1000</span>)</span><br><span class="line">        pygame.time.set_timer(HERO_FIRE_EVENT, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__create_sprites</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建背景精灵和精灵组</span></span><br><span class="line">        bg1 = Background()</span><br><span class="line">        bg2 = Background(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        self.back_group = pygame.sprite.Group(bg1, bg2)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建敌机的精灵组</span></span><br><span class="line">        self.enemy_group = pygame.sprite.Group()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建英雄的精灵和精灵组</span></span><br><span class="line">        self.hero = Hero()</span><br><span class="line">        self.hero_group = pygame.sprite.Group(self.hero)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_game</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏开始...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 1. 设置刷新帧率</span></span><br><span class="line">            self.clock.tick(FRAME_PER_SEC)</span><br><span class="line">            <span class="comment"># 2. 事件监听</span></span><br><span class="line">            self.__event_handler()</span><br><span class="line">            <span class="comment"># 3. 碰撞检测</span></span><br><span class="line">            self.__check_collide()</span><br><span class="line">            <span class="comment"># 4. 更新/绘制精灵组</span></span><br><span class="line">            self.__update_sprites()</span><br><span class="line">            <span class="comment"># 5. 更新显示</span></span><br><span class="line">            pygame.display.update()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__event_handler</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 判断是否退出游戏</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                PlaneGame.__game_over()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == CREATE_ENEMY_EVENT:</span><br><span class="line">                <span class="comment"># print(&quot;敌机出场...&quot;)</span></span><br><span class="line">                <span class="comment"># 创建敌机精灵</span></span><br><span class="line">                enemy = Enemy()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将敌机精灵添加到敌机精灵组</span></span><br><span class="line">                self.enemy_group.add(enemy)</span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == HERO_FIRE_EVENT:</span><br><span class="line">                self.hero.fire()</span><br><span class="line">            <span class="comment"># elif event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:</span></span><br><span class="line">            <span class="comment">#     print(&quot;向右移动...&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用键盘提供的方法获取键盘按键 - 按键元组</span></span><br><span class="line">        keys_pressed = pygame.key.get_pressed()</span><br><span class="line">        <span class="comment"># 判断元组中对应的按键索引值 1</span></span><br><span class="line">        <span class="keyword">if</span> keys_pressed[pygame.K_RIGHT]:</span><br><span class="line">            self.hero.speed = <span class="number">8</span></span><br><span class="line">        <span class="keyword">elif</span> keys_pressed[pygame.K_LEFT]:</span><br><span class="line">            self.hero.speed = -<span class="number">8</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.hero.speed = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__check_collide</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 子弹摧毁敌机</span></span><br><span class="line">        pygame.sprite.groupcollide(self.hero.bullets, self.enemy_group, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 敌机撞毁英雄</span></span><br><span class="line">        enemies = pygame.sprite.spritecollide(self.hero, self.enemy_group, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断列表时候有内容</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(enemies) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 让英雄牺牲</span></span><br><span class="line">            self.hero.kill()</span><br><span class="line">            m = <span class="string">&quot;./sound/use_bomb.wav&quot;</span></span><br><span class="line">            pygame.mixer.music.load(m)</span><br><span class="line">            pygame.mixer.music.play()</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="comment"># 结束游戏</span></span><br><span class="line">            PlaneGame.__game_over()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__update_sprites</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        self.back_group.update()</span><br><span class="line">        self.back_group.draw(self.screen)</span><br><span class="line"></span><br><span class="line">        self.enemy_group.update()</span><br><span class="line">        self.enemy_group.draw(self.screen)</span><br><span class="line"></span><br><span class="line">        self.hero_group.update()</span><br><span class="line">        self.hero_group.draw(self.screen)</span><br><span class="line"></span><br><span class="line">        self.hero.bullets.update()</span><br><span class="line">        self.hero.bullets.draw(self.screen)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__game_over</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏结束&quot;</span>)</span><br><span class="line"></span><br><span class="line">        pygame.quit()</span><br><span class="line">        exit()  <span class="comment">#进程结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建游戏对象</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    game = PlaneGame()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动游戏</span></span><br><span class="line">    game.start_game()</span><br></pre></td></tr></table></figure><p>其中，<a href="https://drive.google.com/file/d/1rCyISM2Y4d4EBlUiZn0DUdHfP-PNMIVD/view?usp=drive_link">图片素材、音频素材</a>被放在 images 和 sound 文件夹下，被组织在上面两份代码的同级目录下。</p><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="Linux-命令"><a href="#Linux-命令" class="headerlink" title="Linux 命令"></a>Linux 命令</h2><p>查看或配置网卡信息（ifconfig）：</p><p><img src="https://s2.loli.net/2024/09/20/YGLRkjzsNTeniZh.png" alt="86-5.png"></p><p>路由查看：route 可以查看路由。<code>route -n</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">内核 IP 路由表</span><br><span class="line">目标           网关          子网掩码</span><br><span class="line">0.0.0.0       192.168.19.2  0.0.0.0</span><br><span class="line">169.254.0.0   0.0.0.0       255.255.0.0</span><br><span class="line">192.168.19.0  0.0.0.0       255.255.255.0</span><br></pre></td></tr></table></figure><p><code>0.0.0.0</code> 代表任意目的地，网关就是转发数据的设备。</p><p><strong>怎样查看端口及谁使用了端口？</strong></p><ul><li>用 <code>netstat -an</code> 查看端口状态</li><li><code>sudo lsof -i [tcp/udp]:2425</code> 必须是 root 才能查看</li><li><code>sudo lsof -i tcp:22</code> 查看哪一个进程用了这个端口</li><li><code>ps -elf |grep udp_server</code> 查看某个进程是否还在</li></ul><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>UDP 通信流程：</p><p><img src="https://s2.loli.net/2024/09/21/PAR6358lEycF4wo.png" alt="86-6.png"></p><p>port 的形象理解：</p><p><img src="https://s2.loli.net/2024/09/21/PtQ1jET79kDBm5w.png" alt="86-7.png"></p><p>看一段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">7656</span>)</span><br><span class="line">s.bind(addr) <span class="comment"># 失败直接抛出异常</span></span><br><span class="line">temp = s.recvfrom(<span class="number">100</span>) <span class="comment"># 100 代表接的长度</span></span><br><span class="line"><span class="built_in">print</span>(temp[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(temp[<span class="number">1</span>])</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p>运行这段代码，然后在终端中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ netstat -an|grep 7656</span><br><span class="line">udp        0      0 192.168.31.106:7656     0.0.0.0:* </span><br></pre></td></tr></table></figure><p>终止运行（则查找不到了）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$ netstat -an|grep 7656</span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">c = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">dest_addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">7656</span>)</span><br><span class="line">c.sendto(<span class="string">b&#x27;hello&#x27;</span>, dest_addr) <span class="comment"># 必须发送字节流</span></span><br><span class="line">c.close()</span><br></pre></td></tr></table></figure><p>在两个终端中操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python3 server.py</span><br><span class="line">python3 client.py </span><br><span class="line">b&#x27;hello&#x27;</span><br><span class="line">(&#x27;192.168.31.106&#x27;, 33817)</span><br></pre></td></tr></table></figure><p>发送中文、全双工：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">7656</span>)</span><br><span class="line">s.bind(addr) <span class="comment"># 失败直接抛出异常</span></span><br><span class="line">data, c_addr = s.recvfrom(<span class="number">100</span>) <span class="comment"># 100 代表接的长度</span></span><br><span class="line"><span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(c_addr)</span><br><span class="line">s.sendto(<span class="string">&#x27;?？??？？&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>), c_addr)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">c = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">dest_addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">7656</span>)</span><br><span class="line"><span class="comment"># c.sendto(b&#x27;hello&#x27;, dest_addr) # 必须发送字节流</span></span><br><span class="line">c.sendto(<span class="string">&#x27;zui &amp; 罚&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>), dest_addr) <span class="comment"># 必须发送字节流</span></span><br><span class="line">data , _ = c.recvfrom(<span class="number">100</span>) <span class="comment"># _ 表示我们不想要</span></span><br><span class="line"><span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">c.close() <span class="comment"># 关闭时端口会释放</span></span><br></pre></td></tr></table></figure><p>终端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python3 server.py </span><br><span class="line">zui &amp; 罚</span><br><span class="line">(&#x27;192.168.31.106&#x27;, 58158)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python3 client.py </span><br><span class="line">?？??？？</span><br></pre></td></tr></table></figure><p>当 UDP <code>recvfrom</code> 函数内填的大小，小于 client 发来的数据的大小时，<strong>Windows 会报错，Linux 会截断数据。</strong></p><p><code>sendto</code> 和 <code>recvfrom</code> 次数对等。</p><p>相关的命令总结：</p><ul><li>查看 ip <code>ifconfig</code></li><li>查看路由 <code>route -n</code></li><li>端口状态<ul><li><code>netstat -an|grep 端口</code></li><li>端口正在被哪个进程使用 <code>sudo lsof -i udp:2000</code></li></ul></li><li>进程查看 <code>ps -elf|grep 进程名字</code></li></ul><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>可以查看之前的笔记。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    s.bind(addr)</span><br><span class="line">    s.listen(<span class="number">128</span>)</span><br><span class="line">    handle_c_fd, c_addr = s.accept()</span><br><span class="line">    <span class="built_in">print</span>(c_addr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接下来就可以进行 send, recv 操作</span></span><br><span class="line">    handle_c_fd.send(<span class="string">&#x27;我是服务器&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    data = handle_c_fd.recv(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    handle_c_fd.close()</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_server()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_client</span>():</span><br><span class="line">    c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    dest_addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    c.connect(dest_addr)</span><br><span class="line"></span><br><span class="line">    data = c.recv(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    c.send(<span class="string">&#x27;我是客户端&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_client()</span><br></pre></td></tr></table></figure><p>其实之前的笔记中，代码的变量命名容易造成误解，这里的更好。</p><p>演示 TCP 特性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    s.bind(addr)</span><br><span class="line">    s.listen(<span class="number">128</span>)</span><br><span class="line">    handle_c_fd, c_addr = s.accept()</span><br><span class="line">    <span class="built_in">print</span>(c_addr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接下来就可以进行 send, recv 操作</span></span><br><span class="line">    handle_c_fd.send(<span class="string">&#x27;abcdefghij&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    data = handle_c_fd.recv(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    handle_c_fd.close()</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_server()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(&#x27;192.168.31.106&#x27;, 57226)</span></span><br><span class="line"><span class="string">客户端消息</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_client</span>():</span><br><span class="line">    c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    dest_addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    c.connect(dest_addr)</span><br><span class="line"></span><br><span class="line">    data = c.recv(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    data = c.recv(<span class="number">5</span>) <span class="comment"># TCP 可以，而 UDP 不行的操作</span></span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    c.send(<span class="string">&#x27;客户端消息&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_client()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">abcde</span></span><br><span class="line"><span class="string">fghij</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>下面我们实现一个简易的文件下载器（实际上它可以发送 txt, jpg 等格式的文件）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_content</span>(<span class="params">file_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取文件的内容&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            content = f.read()</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有下载的文件:%s&quot;</span> % file_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请按照如下方式运行：python3 xxx.py 7890&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 运行方式为 python3 xxx.py 7890</span></span><br><span class="line">        port = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建 socket</span></span><br><span class="line">    tcp_server_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 本地信息</span></span><br><span class="line">    address = (<span class="string">&#x27;192.168.31.106&#x27;</span>, port)</span><br><span class="line">    <span class="comment"># 绑定本地信息</span></span><br><span class="line">    tcp_server_socket.bind(address)</span><br><span class="line">    <span class="comment"># 将主动套接字变为被动套接字</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 等待客户端的链接，即为这个客户端发送文件</span></span><br><span class="line">        client_socket, clientAddr = tcp_server_socket.accept()</span><br><span class="line">        <span class="comment"># 接收对方发送过来的数据</span></span><br><span class="line">        recv_data = client_socket.recv(<span class="number">1024</span>) <span class="comment"># 接收 1024 个字节</span></span><br><span class="line">        file_name = recv_data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;对方请求下载的文件名为:%s&quot;</span> % file_name)</span><br><span class="line">        file_content = get_file_content(file_name)</span><br><span class="line">        <span class="comment"># 发送文件的数据给客户端</span></span><br><span class="line">        <span class="comment"># 因为获取打开文件时是以 rb 方式打开，所以 file_content 中的数据已经是二进制的格式，因此不需要 encode 编码</span></span><br><span class="line">        <span class="keyword">if</span> file_content:</span><br><span class="line">            client_socket.send(file_content)</span><br><span class="line">        <span class="comment"># 关闭这个套接字</span></span><br><span class="line">        client_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭监听套接字</span></span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建 socket</span></span><br><span class="line">    tcp_client_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 目的信息</span></span><br><span class="line">    server_ip = <span class="string">&#x27;192.168.31.106&#x27;</span></span><br><span class="line">    server_port = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入服务器 port:&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 链接服务器</span></span><br><span class="line">    tcp_client_socket.connect((server_ip, server_port))</span><br><span class="line">    <span class="comment"># 输入需要下载的文件名</span></span><br><span class="line">    file_name = <span class="built_in">input</span>(<span class="string">&quot;请输入要下载的文件名：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送文件下载请求</span></span><br><span class="line">    tcp_client_socket.send(file_name.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收对方发送过来的数据</span></span><br><span class="line">    recv_data = <span class="string">b&quot;&quot;</span>  <span class="comment"># 用于存储接收到的所有数据</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        chunk = tcp_client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 每次接收 1024 字节</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># 如果没有数据，跳出循环</span></span><br><span class="line">        recv_data += chunk</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> recv_data:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;[接收]&quot;</span>+file_name, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(recv_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭套接字</span></span><br><span class="line">    tcp_client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>注意：<br><strong>若一次性接收数据，网络传输的数据量不一定能一次性到达。</strong> 即使将接收缓冲区的大小设置为 1024<em>40000，仍可能出现问题。这是因为 TCP 数据传输的机制不是一次性发送所有数据（尤其在网络延迟或带宽有限的情况下），实际上，数据是以小块的形式分批到达的。<em>*因此需要循环接收数据，直到完整地接收到文件的全部内容。</em></em></p><p>提问：<strong>TCP 为什么要三次握手？</strong><br><strong>省流</strong>：两次握手不足够，会造成 server 死锁。（可以分两种情况解释）<br><strong>详细</strong>：<br>假设我们设计为两次握手。<br>（一）<br>A(client) 机要连到 B(server) 机，但连接信息在网络中延误了。<br>于是A 机重新发送，这次 B 收到了，于是 B 发信息回 A，两机建立连接。传输完毕后，断开连接。<br>但此时，一开始的连接信息到达 B 机，于是 B 机发信息给 A，此时 B 机就认为已和 A 建立连接，B 机就等待 A 传数据过来，永远地等待在 recv 接口上。发生死锁。<br>（二）<br>C 给 S 发送一个连接请求分组，S 收到此分组，并发送确认应答分组。按照两次握手的协定，S 认为连接已经建立，可以开始发送数据分组。<br>但是，S 的应答分组在传输中丢失。<br>C 不知道 S 是否已准备好，不知道 S 建议什么样的序列号，不知道 S 是否收到自己的连接请求分组。在这种情况下，C 认为连接还未建立成功，将忽略 S 发来的任何数据分组，只等待连接确认应答分组。而 S 在发出的数据分组超时后，重复发送同样的分组。这样就形成了死锁。</p><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>安装 wireshark ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install wireshark</span><br></pre></td></tr></table></figure><p>windows 和 macos 安装比较容易，linux 安装参考：<br><a href="https://www.wireshark.org/docs/wsug_html_chunked/ChapterBuildInstall.html">https://www.wireshark.org/docs/wsug_html_chunked/ChapterBuildInstall.html</a></p><p>在 Debian 系统下运行 Wireshark 时遇到 “permission denied” 问题，通常是由于普通用户没有足够的权限捕获网络接口上的数据包。Wireshark 需要更高的权限来访问网络设备。</p><p>在安装过程中，系统会询问是否允许非 root 用户捕获数据包。选择“是”。</p><p><strong>将当前用户添加到 wireshark 组</strong>  </p><p>Wireshark 使用 wireshark 组来管理捕获数据包的权限。将当前用户添加到 wireshark 组中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG wireshark <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>然后，重新登录以使组更改生效，或运行以下命令刷新当前会话的用户组信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newgrp wireshark</span><br></pre></td></tr></table></figure><p><strong>重新配置 dumpcap 权限</strong></p><p>Wireshark 使用一个名为 dumpcap 的工具来捕获数据包。需要确保它拥有合适的权限，以便普通用户可以使用它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /usr/bin/dumpcap</span><br><span class="line">sudo <span class="built_in">setcap</span> cap_net_raw,cap_net_admin=eip /usr/bin/dumpcap</span><br></pre></td></tr></table></figure><p>运行以下命令来确认 dumpcap 具有正确的权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getcap</span> /usr/bin/dumpcap</span><br></pre></td></tr></table></figure><p>输出应该类似于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/dumpcap = cap_net_admin,cap_net_raw+eip</span><br></pre></td></tr></table></figure><p>现在应该可以在普通用户模式下正常运行 Wireshark 而不会遇到“permission denied”错误。直接运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wireshark</span><br></pre></td></tr></table></figure><h2 id="TCP-数据报头"><a href="#TCP-数据报头" class="headerlink" title="TCP 数据报头"></a>TCP 数据报头</h2><p>四次挥手（这个图只是为了展示 ACK 在哪）：</p><p><img src="https://s2.loli.net/2024/09/23/wtdNAQm2C9OovKc.png" alt="86-8.png"></p><p>ACK 位置 1 表明确认号是合法的。如果 ACK 为 0，那么数据报不包含确认信息，确认字段被省略。</p><p><img src="https://s2.loli.net/2024/09/23/TZe42h98uqtJXMW.png" alt="86-9.png"></p><p>SYN：用于建立连接。当 SYN=1 时，表示发起一个连接请求。</p><p>FIN：用于释放连接。当 FIN=1 时，表明此报文段的发送端的数据已发送完成，并要求释放连接。</p><h2 id="UDP-代替-TCP"><a href="#UDP-代替-TCP" class="headerlink" title="UDP 代替 TCP"></a>UDP 代替 TCP</h2><p>相比而言，UDP 能传输更多的数据（一种典型情况：1472 &gt; 1460），这在经济上的好处是显而易见的（带宽很贵）；另外，UDP 在无线环境下表现比 TCP 更好。因此有不少用 UDP 代替 TCP 的研究。</p><p>可以使用 UDP 模仿 TCP ，但是需要程序员自己设计应用层协议，实现相关功能，缓存、加序列号、重传等。</p><h2 id="CS、BS-模式"><a href="#CS、BS-模式" class="headerlink" title="CS、BS 模式"></a>CS、BS 模式</h2><p>CS 模式： client/server 模式。</p><ul><li>客户端位于目标主机上可以保证性能，将数据缓存至客户端本地，从而<strong>提高数据传输效率</strong>。</li><li>一般来说客户端和服务器程序由一个开发团队创作，所以他们之间所<strong>采用的协议相对灵活</strong>。</li><li>客户端和服务器都需要有一个开发团队来完<br>成开发。<strong>工作量将成倍提升，开发周期较长</strong>。</li><li>从用户角度出发，需要将客户端安插至用户主机上，对<strong>用户主机的安全性构成威胁</strong>。</li></ul><p>BS 模式： browser/server 模式。</p><ul><li>没有独立的客户端，使用标准浏览器作为客户端，其<strong>工作开发量较小</strong>。</li><li><strong>移植性非常好，不受平台限制</strong>。</li><li>由于使用第三方浏览器，因此<strong>网络应用支持受限</strong>。</li><li>没有客户端放到对方主机上，<strong>缓存数据不尽如人意，从而传输数据量受到限制</strong>。</li><li>采用标准 http 协议进行通信，<strong>协议选择不灵活</strong>。</li></ul><h2 id="tcp-长连接和短连接"><a href="#tcp-长连接和短连接" class="headerlink" title="tcp 长连接和短连接"></a>tcp 长连接和短连接</h2><p>TCP 短连接：</p><ol><li>client 向 server 发起连接请求</li><li>server 接到请求，双方建立连接</li><li>client 向 server 发送消息</li><li>server 回应 client</li><li>一次读写完成，此时双方任何一个都可以发起 close 操作</li></ol><p>TCP 长连接：</p><ol><li>client 向 server 发起连接</li><li>server 接到请求，双方建立连接</li><li>client 向 server 发送消息</li><li>server 回应 client</li><li>一次读写完成，连接不关闭</li><li>后续读写操作…</li><li>长时间操作之后 client 发起关闭请求</li></ol><h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h2><p>使用 epoll 实现的小型对话程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">5379</span>)</span><br><span class="line">    s.bind(addr)</span><br><span class="line">    s.listen(<span class="number">128</span>)</span><br><span class="line">    handle_c_fd, c_addr = s.accept()</span><br><span class="line">    <span class="built_in">print</span>(c_addr)</span><br><span class="line"></span><br><span class="line">    epolL = select.epoll()</span><br><span class="line">    <span class="comment"># 让 epoll 监听 handle_c_fd, sys.stdin</span></span><br><span class="line">    epolL.register(handle_c_fd.fileno(), select.EPOLLIN)</span><br><span class="line">    epolL.register(sys.stdin.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填写到 events</span></span><br><span class="line">        events = epolL.poll(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, _ <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> i==handle_c_fd.fileno():</span><br><span class="line">                data = handle_c_fd.recv(<span class="number">100</span>)</span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;对方断开&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> i==sys.stdin.fileno():</span><br><span class="line">                data = <span class="built_in">input</span>() <span class="comment"># server 说话，发给对方</span></span><br><span class="line">                handle_c_fd.send(data.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    handle_c_fd.close()</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_server()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_client</span>():</span><br><span class="line"></span><br><span class="line">    c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    dest_addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">5379</span>)</span><br><span class="line">    c.connect(dest_addr)</span><br><span class="line"></span><br><span class="line">    epolL = select.epoll()</span><br><span class="line">    <span class="comment"># 让 epoll 监听 c, sys.stdin</span></span><br><span class="line">    epolL.register(c.fileno(), select.EPOLLIN)</span><br><span class="line">    epolL.register(sys.stdin.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填写到 events</span></span><br><span class="line">        events = epolL.poll(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, _ <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> i==c.fileno():</span><br><span class="line">                data = c.recv(<span class="number">100</span>)</span><br><span class="line">                <span class="keyword">if</span> data: </span><br><span class="line">                    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;对方断开&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> i==sys.stdin.fileno():</span><br><span class="line">                data = <span class="built_in">input</span>()</span><br><span class="line">                c.send(data.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_client()</span><br></pre></td></tr></table></figure><p>改进，client 断开还可以再次连接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">5379</span>)</span><br><span class="line">    s.bind(addr)</span><br><span class="line">    s.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    epolL = select.epoll()</span><br><span class="line">    epolL.register(s.fileno(), select.EPOLLIN)</span><br><span class="line">    epolL.register(sys.stdin.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填写到 events</span></span><br><span class="line">        events = epolL.poll(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, event <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> i==s.fileno():</span><br><span class="line">                <span class="comment"># 有客户端连接，就连上、注册</span></span><br><span class="line">                handle_c_fd, c_addr = s.accept()</span><br><span class="line">                <span class="built_in">print</span>(c_addr)</span><br><span class="line">                epolL.register(handle_c_fd.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i==handle_c_fd.fileno():</span><br><span class="line">                data = handle_c_fd.recv(<span class="number">100</span>)</span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;对方断开&#x27;</span>)</span><br><span class="line">                    epolL.unregister(handle_c_fd.fileno())</span><br><span class="line">                    handle_c_fd.close()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> i==sys.stdin.fileno():</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    data = <span class="built_in">input</span>() <span class="comment"># server 说话，发给对方</span></span><br><span class="line">                <span class="keyword">except</span> EOFError: <span class="comment"># 按 ctrl+d 让 server 断开</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;I want to go.&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                handle_c_fd.send(data.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_server()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_client</span>():</span><br><span class="line"></span><br><span class="line">    c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    dest_addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">5379</span>)</span><br><span class="line">    c.connect(dest_addr)</span><br><span class="line"></span><br><span class="line">    epolL = select.epoll()</span><br><span class="line">    <span class="comment"># 让 epoll 监听 c, sys.stdin</span></span><br><span class="line">    epolL.register(c.fileno(), select.EPOLLIN)</span><br><span class="line">    epolL.register(sys.stdin.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填写到 events</span></span><br><span class="line">        events = epolL.poll(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, _ <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> i==c.fileno():</span><br><span class="line">                data = c.recv(<span class="number">100</span>)</span><br><span class="line">                <span class="keyword">if</span> data: </span><br><span class="line">                    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;对方断开&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> i==sys.stdin.fileno():</span><br><span class="line">                data = <span class="built_in">input</span>()</span><br><span class="line">                c.send(data.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_client()</span><br></pre></td></tr></table></figure><p>现在我们实现一个聊天室，client 程序保持不变，server 端的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">5379</span>)</span><br><span class="line">    s.bind(addr)</span><br><span class="line">    s.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    epolL = select.epoll()</span><br><span class="line">    epolL.register(s.fileno(), select.EPOLLIN)</span><br><span class="line">    epolL.register(sys.stdin.fileno(), select.EPOLLIN)</span><br><span class="line">    client_list = []  <span class="comment"># 糟糕的 ds 选择</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填写到 events</span></span><br><span class="line">        events = epolL.poll(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, event <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> i==s.fileno():</span><br><span class="line">                <span class="comment"># 有客户端连接，就连上、注册</span></span><br><span class="line">                handle_c_fd, c_addr = s.accept()</span><br><span class="line">                <span class="built_in">print</span>(c_addr)</span><br><span class="line">                client_list.append(handle_c_fd)</span><br><span class="line">                epolL.register(handle_c_fd.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                remove_client = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">for</span> client <span class="keyword">in</span> client_list:</span><br><span class="line">                    <span class="keyword">if</span> client.fileno()==i:</span><br><span class="line">                        data = client.recv(<span class="number">100</span>)</span><br><span class="line">                        <span class="keyword">if</span> data:</span><br><span class="line">                            <span class="keyword">for</span> others <span class="keyword">in</span> client_list:</span><br><span class="line">                                <span class="keyword">if</span> others <span class="keyword">is</span> client:</span><br><span class="line">                                    <span class="keyword">pass</span></span><br><span class="line">                                <span class="keyword">else</span>:</span><br><span class="line">                                    others.send(data)</span><br><span class="line">                        <span class="keyword">else</span>: <span class="comment"># 断开了就记录一下   ||   糟糕的 ds 选择</span></span><br><span class="line">                            remove_client = client</span><br><span class="line">                <span class="keyword">if</span> remove_client:</span><br><span class="line">                    client_list.remove(remove_client)</span><br><span class="line">                    epolL.unregister(remove_client.fileno())</span><br><span class="line">                    remove_client.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_server()</span><br></pre></td></tr></table></figure><p><strong>端口复用</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>btw, <code>send()</code> 函数可选 <code>MSG_DONTWAIT</code> 参数，效果是：即使对方没法接受这次要发送的全部信息（缓冲区不够用了），也强行发送，多余部分直接截断。</p><h2 id="协议设计"><a href="#协议设计" class="headerlink" title="协议设计"></a>协议设计</h2><p>考虑这样的场景：我们需要持续发送多个文件。</p><p>这会带来一个问题，这些多个文件在传输过程中，会以字节流的形式变成：</p><p>文件名1 + 文件1内容 + 文件名2 + 文件2内容 + …</p><p>这样我们就没办法区分出各个内容了，这种现象叫做<strong>沾包</strong>。</p><p>为此，我们需要设计协议。一个自然的想法是：<br>（长度）&amp;（内容）+（长度）&amp;（内容）+ …</p><p>会用到这张表：</p><p><img src="https://s2.loli.net/2024/09/26/ScK8TUrLysADXB5.png" alt="86-10.png"></p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">train_content = <span class="string">&#x27;爱上地方传奇&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">train_head = <span class="built_in">len</span>(train_content)</span><br><span class="line"><span class="built_in">print</span>(train_head)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(train_head))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, train_head) <span class="comment"># I 表示整型数</span></span><br><span class="line"><span class="built_in">print</span>((train_head_bytes))</span><br><span class="line"></span><br><span class="line">b = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line"><span class="built_in">print</span>(b[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">18</span></span><br><span class="line"><span class="string">&lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="string">--------------------------------------------------</span></span><br><span class="line"><span class="string">b&#x27;\x12\x00\x00\x00&#x27;</span></span><br><span class="line"><span class="string">18</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>一个简单的小例子，注意这个例子里很多问题没有处理，比如并没有循环接数据（这样就没法接受大一点的文件），再比如没有考虑代码复用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server 进行文件发送</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_init</span>():</span><br><span class="line">    s = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    s.bind(addr)</span><br><span class="line">    s.listen(<span class="number">128</span>)</span><br><span class="line">    <span class="keyword">return</span> s </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_file</span>():</span><br><span class="line">    file_name = <span class="string">&#x27;adf.txt&#x27;</span></span><br><span class="line">    s = tcp_init()</span><br><span class="line">    handle_c_fd, client_addr = s.accept()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先发火车头（比喻）</span></span><br><span class="line">    file_name_bytes = file_name.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, <span class="built_in">len</span>(file_name_bytes))</span><br><span class="line">    handle_c_fd.send(train_head_bytes + file_name_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 再发文件内容</span></span><br><span class="line">    f = <span class="built_in">open</span>(file_name, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    file_content = f.read()</span><br><span class="line">    train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, <span class="built_in">len</span>(file_content))</span><br><span class="line">    handle_c_fd.send(train_head_bytes + file_content)</span><br><span class="line">    f.close()</span><br><span class="line">    handle_c_fd.close()</span><br><span class="line"></span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    send_file()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">tcp_client_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">tcp_client_socket.connect(addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每次先读 4 个字节的火车头</span></span><br><span class="line">train_head_bytes = tcp_client_socket.recv(<span class="number">4</span>)</span><br><span class="line">train_content_len = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line">file_name = tcp_client_socket.recv(train_content_len[<span class="number">0</span>])</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;aaa&#x27;</span>+file_name.decode(<span class="string">&#x27;utf8&#x27;</span>), <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接文件的长度及内容</span></span><br><span class="line">train_head_bytes = tcp_client_socket.recv(<span class="number">4</span>)</span><br><span class="line">train_content_len = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line">file_content = tcp_client_socket.recv(train_content_len[<span class="number">0</span>])</span><br><span class="line">f.write(file_content)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">tcp_client_socket.close()</span><br></pre></td></tr></table></figure><h1 id="网盘设计（一）"><a href="#网盘设计（一）" class="headerlink" title="网盘设计（一）"></a>网盘设计（一）</h1><p>这是最初的一版，也是最简单的一版：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Server</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ip, port</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.s_listen = <span class="literal">None</span> <span class="comment"># 用来 listen 的 socket 对象</span></span><br><span class="line">        self.ip = ip</span><br><span class="line">        self.port = port</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tcp_init</span>(<span class="params">self</span>):</span><br><span class="line">        self.s_listen = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        self.s_listen.bind((self.ip, self.port))</span><br><span class="line">        self.s_listen.listen(<span class="number">128</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">self</span>):</span><br><span class="line">        c_fd, c_addr = self.s_listen.accept()</span><br><span class="line">        user = User(c_fd)</span><br><span class="line">        user.deal_command()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    每个 User 对象对应一个客户端</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, handle_c_fd</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.user_name = <span class="literal">None</span></span><br><span class="line">        self.handle_c_fd = handle_c_fd</span><br><span class="line">        self.path = os.getcwd()  <span class="comment"># 存储连上的用户的路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deal_command</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            command = self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> command[:<span class="number">2</span>] == <span class="string">&#x27;ls&#x27;</span>:</span><br><span class="line">                self.do_ls()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;cd&#x27;</span>:</span><br><span class="line">                self.do_cd(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">3</span>] == <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">                self.do_pwd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;rm&#x27;</span>:</span><br><span class="line">                self.do_rm(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;gets&#x27;</span>:</span><br><span class="line">                self.do_gets()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;puts&#x27;</span>:</span><br><span class="line">                self.do_puts()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;command wrong&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_train</span>(<span class="params">self, send_bytes</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        send 火车，就是把某个字节流内容以火车形式发过去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, <span class="built_in">len</span>(send_bytes))</span><br><span class="line">        self.handle_c_fd.send(train_head_bytes + send_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv_train</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        recv 火车，就是把火车 recv 的内容返回出去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = self.handle_c_fd.recv(<span class="number">4</span>)</span><br><span class="line">        train_head = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line">        <span class="keyword">return</span> self.handle_c_fd.recv(train_head[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_ls</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        当前路径下的信息传输给客户端</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(self.path):</span><br><span class="line">            data += file + <span class="string">&#x27; &#x27;</span>*<span class="number">5</span> + <span class="built_in">str</span>(os.stat(file).st_size) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        self.send_train(data.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_cd</span>(<span class="params">self, command</span>):</span><br><span class="line">        path = command.split()[<span class="number">1</span>]</span><br><span class="line">        os.chdir(path)</span><br><span class="line">        self.path = os.getcwd()</span><br><span class="line">        self.send_train(self.path.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_pwd</span>(<span class="params">self</span>):</span><br><span class="line">        self.send_train(self.path.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_rm</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_gets</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_puts</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server = Server(<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    server.tcp_init()</span><br><span class="line">    server.task()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ip, port</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.client:socket = <span class="literal">None</span></span><br><span class="line">        self.ip = ip</span><br><span class="line">        self.port = port</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tcp_connect</span>(<span class="params">self</span>):</span><br><span class="line">        self.client = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        self.client.connect((self.ip, self.port))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_train</span>(<span class="params">self, send_bytes</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        send 火车，就是把某个字节流内容以火车形式发过去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, <span class="built_in">len</span>(send_bytes))</span><br><span class="line">        self.client.send(train_head_bytes + send_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv_train</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        recv 火车，就是把火车 recv 的内容返回出去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = self.client.recv(<span class="number">4</span>)</span><br><span class="line">        train_head = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line">        <span class="keyword">return</span> self.client.recv(train_head[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_command</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        发送各种命令给服务器</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            command = <span class="built_in">input</span>()</span><br><span class="line">            self.send_train(command.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> command[:<span class="number">2</span>] == <span class="string">&#x27;ls&#x27;</span>:</span><br><span class="line">                self.do_ls()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;cd&#x27;</span>:</span><br><span class="line">                self.do_cd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">3</span>] == <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">                self.do_pwd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;rm&#x27;</span>:</span><br><span class="line">                self.do_rm(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;gets&#x27;</span>:</span><br><span class="line">                self.do_gets()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;puts&#x27;</span>:</span><br><span class="line">                self.do_puts()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;command wrong&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_ls</span>(<span class="params">self</span>):</span><br><span class="line">        data = self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_cd</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_pwd</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_rm</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_gets</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_puts</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    client = Client(<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    client.tcp_connect()</span><br><span class="line">    client.send_command()</span><br></pre></td></tr></table></figure><p>上面代码尚有功能未实现（其实就是核心的上传下载功能，不过这个在之前的代码里面有，可以直接拿过来），仅作示例。</p><h1 id="多进程编程"><a href="#多进程编程" class="headerlink" title="多进程编程"></a>多进程编程</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><code>top</code> 命令的前两行输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">top - 16:46:57 up  1:58,  1 user,  load average: 1.51, 0.91, 0.91</span><br><span class="line">Tasks: 300 total,   1 running, 299 sleeping,   0 stopped,   0 zombie</span><br></pre></td></tr></table></figure><p>平均负载（load average），一般对于单个 cpu 来说，负载在 0～1.00 之间是正常的，超过 1.00 须引起注意。在多核 cpu 中，系统平均负载不应该高于 cpu 核心的总数。</p><p>buffers 与 cached 区别：buffers 指的是<strong>块设备的读写缓冲区</strong>，cached 指的是<strong>页面缓存</strong>。</p><p><strong>查看当前窗口启动的任务情况</strong>：</p><ul><li><code>python 1.while 死循环.py &amp;</code> 让进程后台运行</li><li><code>bg</code> 让暂停的进程在后台运行</li><li><code>fg</code> 拉到前台</li><li><code>jobs</code> 看后台任务</li></ul><p><strong>设置定时任务</strong>：</p><ul><li><code>crontab –e</code> 设置当前用户定时任务</li><li><code>vim /etc/crontab</code> 设置定时任务</li><li><code>crontab -l</code> 查看当前自己设置的定时任务</li></ul><p>多进程的简单演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程的代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----2----&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target = run_proc)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----1----&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>Process 语法结构 <code>Process(group , target , name , args , kwargs)</code></p><ul><li><code>target</code> 如果传递了函数的引用，可以让这个子进程就执行这里的代码</li><li><code>args</code> 给 target 指定的函数传递的参数，以元组的方式传递</li><li><code>kwargs</code> 给 target 指定的函数传递命名参数，keyword 参数</li></ul><p>Process 创建的实例对象的常用方法：</p><ul><li><code>start()</code> 启动子进程实例（创建子进程）</li><li><code>is_alive()</code> 判断进程子进程是否还在活着</li><li><code>join([timeout])</code> 是否等待子进程执行结束，或等待多少秒 — <strong>回收子进程尸体</strong></li><li><code>terminate()</code> 不管任务是否完成，立即终止子进程</li></ul><p>获取 pid :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程的代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是子进程 pid = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子进程结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target = run_proc)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是父进程 pid = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">我是父进程 pid = 6079</span></span><br><span class="line"><span class="string">我是子进程 pid = 6080</span></span><br><span class="line"><span class="string">子进程结束</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>给子进程指定的函数传递参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程的代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>(<span class="params">name, age, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子进程 &#123;&#125; &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name, age, kwargs))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target = run_proc, args=(<span class="string">&#x27;xiongda&#x27;</span>, <span class="number">5</span>), kwargs=&#123;<span class="string">&#x27;408&#x27;</span>:<span class="number">120</span>&#125;)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是父进程&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">子进程 xiongda 5 &#123;&#x27;408&#x27;: 120&#125;</span></span><br><span class="line"><span class="string">我是父进程</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h2><p>孤儿进程：父进程退出（kill 杀死父进程），子进程变为孤儿。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程的代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是子进程 pid = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target = run_proc)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是父进程 pid = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br></pre></td></tr></table></figure><p>terminal 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是父进程 pid = 6586</span><br><span class="line">我是子进程 pid = 6587</span><br></pre></td></tr></table></figure><p>terminal 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zhiyue@168:~$ ps -elf|grep test</span><br><span class="line">0 S zhiyue      6586    6574  0  80   0 -  5369 do_wai 10:35 pts/2    00:00:00 python3 -u /home/zhiyue/Documents/0928work/test.py</span><br><span class="line">1 S zhiyue      6587    6586  0  80   0 -  5369 hrtime 10:35 pts/2    00:00:00 python3 -u /home/zhiyue/Documents/0928work/test.py</span><br><span class="line">0 S zhiyue      6671    6646  0  80   0 -  2356 pipe_r 10:35 pts/3    00:00:00 grep test</span><br><span class="line">zhiyue@168:~$ kill -9 6586</span><br></pre></td></tr></table></figure><p>terminal 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我是父进程 pid = 6586</span><br><span class="line">我是子进程 pid = 6587</span><br><span class="line">Killed</span><br></pre></td></tr></table></figure><p>terminal 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhiyue@168:~$ ps -elf|grep test</span><br><span class="line">1 S zhiyue      6587    1068  0  80   0 -  5369 hrtime 10:35 pts/2    00:00:00 python3 -u /home/zhiyue/Documents/0928work/test.py</span><br><span class="line">0 S zhiyue      6733    6646  0  80   0 -  2356 pipe_r 10:36 pts/3    00:00:00 grep test</span><br></pre></td></tr></table></figure><h2 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h2><p>僵尸进程：子进程退出，父进程在忙碌，没有回收它，要避免僵尸。</p><p>Python 进程变为僵尸进程后，名字会改变。可以使用 <code>top</code> 查看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程的代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是子进程 pid = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子进程结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target = run_proc)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是父进程 pid = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>terminal:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我是父进程 pid = 7283</span><br><span class="line">我是子进程 pid = 7284</span><br><span class="line">子进程结束</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="是否共享全局变量"><a href="#是否共享全局变量" class="headerlink" title="是否共享全局变量"></a>是否共享全局变量</h2><p>子进程创建是父进程的复制品，资源是独立使用的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">11</span>, <span class="number">22</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;work1 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    nums.append(<span class="number">33</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;work1 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(nums))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;work2 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    <span class="built_in">print</span>(nums)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target=work1)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;parent &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(nums))</span><br><span class="line"></span><br><span class="line">    p = Process(target=work2)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">work1 11308</span></span><br><span class="line"><span class="string">work1 [11, 22, 33]</span></span><br><span class="line"><span class="string">parent [11, 22]</span></span><br><span class="line"><span class="string">work2 11309</span></span><br><span class="line"><span class="string">[11, 22]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h2><p>Process 之间有时需要通信，操作系统提供了很多机制来实现进程间的通信（例如管道，共享内存）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line">q = Queue(<span class="number">3</span>) <span class="comment"># 初始化一个 Queue 对象，最多接受三条 put 消息</span></span><br><span class="line">q.put(<span class="number">1</span>)</span><br><span class="line">q.put(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full()) <span class="comment"># False</span></span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full()) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># q.put(4)  队列满了后，再放会阻塞</span></span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="comment"># print(q.get())  队列空了后，再取会阻塞</span></span><br></pre></td></tr></table></figure><p><code>put()</code> 可以带参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line">q = Queue(<span class="number">3</span>) <span class="comment"># 初始化一个 Queue 对象，最多接受三条 put 消息</span></span><br><span class="line">q.put(<span class="number">1</span>)</span><br><span class="line">q.put(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full()) <span class="comment"># False</span></span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full()) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.put(<span class="string">&#x27;消息4&#x27;</span>, <span class="literal">True</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;消息队列已满，现有消息数量：%s&#x27;</span>%q.qsize())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">消息队列已满，现有消息数量：3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">最后一行会等待两秒才打印</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line">q = Queue(<span class="number">3</span>) <span class="comment"># 初始化一个 Queue 对象，最多接受三条 put 消息</span></span><br><span class="line">q.put(<span class="number">1</span>)</span><br><span class="line">q.put(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full()) <span class="comment"># False</span></span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full()) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.put(<span class="string">&#x27;消息4&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;消息队列已满，现有消息数量：%s&#x27;</span>%q.qsize())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">消息队列已满，现有消息数量：3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">最后一行会立即输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>推荐的方式：先判断消息列队是否已满，再写入；读取消息时，先判断消息列队是否为空，再读取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> q.full():</span><br><span class="line">    q.put_nowait(<span class="string">&quot;消息 4&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(q.qsize()):</span><br><span class="line">        <span class="built_in">print</span>(q.get_nowait())</span><br></pre></td></tr></table></figure><p>下面实际演示两个进程间的通信：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writer</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Put %s to queue...&#x27;</span> % value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reader</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            value = q.get(<span class="literal">True</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Get %s from queue.&#x27;</span> % value)</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = Queue(<span class="number">10</span>)</span><br><span class="line">    pw = Process(target=writer, args=(q,))</span><br><span class="line">    pr = Process(target=reader, args=(q,))</span><br><span class="line"></span><br><span class="line">    pw.start()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    pr.start()</span><br><span class="line">    pw.join()</span><br><span class="line">    pr.join()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Put A to queue...</span></span><br><span class="line"><span class="string">Put B to queue...</span></span><br><span class="line"><span class="string">Get A from queue.</span></span><br><span class="line"><span class="string">Put C to queue...</span></span><br><span class="line"><span class="string">Get B from queue.</span></span><br><span class="line"><span class="string">Get C from queue.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h1><p>Python 已经帮我们做好了 dirty work, 建议爽用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>(<span class="params">msg</span>):</span><br><span class="line">    t_start = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s 开始执行,进程号为%d&quot;</span> % (msg,os.getpid()))</span><br><span class="line">    <span class="comment"># random.random()随机生成 0~1 之间的浮点数</span></span><br><span class="line">    time.sleep(random.random()*<span class="number">2</span>)</span><br><span class="line">    t_stop = time.time()</span><br><span class="line">    <span class="built_in">print</span>(msg,<span class="string">&quot;执行完毕，耗时%0.2f&quot;</span> % (t_stop-t_start))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    po = Pool(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="comment"># Pool().apply_async(要调用的目标,(传递给目标的参数元祖,))</span></span><br><span class="line">        <span class="comment"># 每次循环将会用空闲出来的子进程去调用目标</span></span><br><span class="line">        po.apply_async(worker, (i,))</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----start----&quot;</span>)</span><br><span class="line">    po.close() <span class="comment"># 关闭进程池，关闭后 po 不再接收新的请求</span></span><br><span class="line">    po.join() <span class="comment"># 等待 po 中所有子进程执行完成，必须放在 close 语句之后</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----end-----&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">----start----</span></span><br><span class="line"><span class="string">0 开始执行,进程号为7836</span></span><br><span class="line"><span class="string">1 开始执行,进程号为7837</span></span><br><span class="line"><span class="string">2 开始执行,进程号为7838</span></span><br><span class="line"><span class="string">0 执行完毕，耗时0.24</span></span><br><span class="line"><span class="string">3 开始执行,进程号为7836</span></span><br><span class="line"><span class="string">3 执行完毕，耗时0.02</span></span><br><span class="line"><span class="string">4 开始执行,进程号为7836</span></span><br><span class="line"><span class="string">2 执行完毕，耗时0.61</span></span><br><span class="line"><span class="string">5 开始执行,进程号为7838</span></span><br><span class="line"><span class="string">1 执行完毕，耗时0.70</span></span><br><span class="line"><span class="string">6 开始执行,进程号为7837</span></span><br><span class="line"><span class="string">6 执行完毕，耗时0.63</span></span><br><span class="line"><span class="string">7 开始执行,进程号为7837</span></span><br><span class="line"><span class="string">5 执行完毕，耗时0.89</span></span><br><span class="line"><span class="string">8 开始执行,进程号为7838</span></span><br><span class="line"><span class="string">7 执行完毕，耗时0.29</span></span><br><span class="line"><span class="string">9 开始执行,进程号为7837</span></span><br><span class="line"><span class="string">4 执行完毕，耗时1.55</span></span><br><span class="line"><span class="string">9 执行完毕，耗时0.74</span></span><br><span class="line"><span class="string">8 执行完毕，耗时1.43</span></span><br><span class="line"><span class="string">-----end-----</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>进程池中的 Queue</strong>：<br>如果要使用 Pool 创建进程，就需要使用 <code>multiprocessing.Manager()</code> 中的 <code>Queue()</code> ，而不是 <code>multiprocessing.Queue()</code> 。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 import 中的 Queue 为 Manager</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager,Pool</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reader</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reader 启动(%s),父进程为(%s)&quot;</span> % (os.getpid(), os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(q.qsize()):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;reader 从 Queue 获取到消息：%s&quot;</span> % q.get(<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writer</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;writer 启动(%s),父进程为(%s)&quot;</span> % (os.getpid(), os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;wangdao&quot;</span>:</span><br><span class="line">        q.put(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(%s) start&quot;</span> % os.getpid())</span><br><span class="line">    q = Manager().Queue() <span class="comment"># 使用 Manager 中的 Queue</span></span><br><span class="line">    po = Pool()</span><br><span class="line">    po.apply_async(writer, (q,))</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>) <span class="comment"># 先让上面的任务向 Queue 存入数据，然后再让下面的任务开始从中取数据</span></span><br><span class="line"></span><br><span class="line">    po.apply_async(reader, (q,))</span><br><span class="line"></span><br><span class="line">    po.close()</span><br><span class="line">    po.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(%s) End&quot;</span> % os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(9168) start</span></span><br><span class="line"><span class="string">writer 启动(9174),父进程为(9168)</span></span><br><span class="line"><span class="string">reader 启动(9175),父进程为(9168)</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：w</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：a</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：n</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：g</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：d</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：a</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：o</span></span><br><span class="line"><span class="string">(9168) End</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>一种很类似于考研应试的加锁：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work1</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        mutex.acquire()</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----- in work1, g_num is %d -----&#x27;</span>%g_num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work2</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        mutex.acquire()</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----- in work2, g_num is %d -----&#x27;</span>%g_num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mutex = threading.Lock()</span><br><span class="line">    t1 = threading.Thread(target=work1, args=(<span class="number">10000000</span>,))</span><br><span class="line">    t2 = threading.Thread(target=work2, args=(<span class="number">10000000</span>,))</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2 个线程对同一个全局变量操作之后的最终结果是:%s&quot;</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">----- in work1, g_num is 19992828 ---------- in work2, g_num is 20000000 -----</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2 个线程对同一个全局变量操作之后的最终结果是:20000000</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="可迭代、迭代器、生成器"><a href="#可迭代、迭代器、生成器" class="headerlink" title="可迭代、迭代器、生成器"></a>可迭代、迭代器、生成器</h1><p>可迭代的：类中只重写了 <code>__iter__</code> 内置方法，就是可迭代的，这个方法要求返回一个迭代器。</p><p>迭代器：类中重写了 <code>__iter__</code> ，还需要重写 <code>__next__</code> 。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.container = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, item</span>):</span><br><span class="line">        self.container.append(item)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 只要重写了 __iter__ 方法，就会变成可迭代的</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        myiterator = MyIter(self)</span><br><span class="line">        <span class="keyword">return</span> myiterator</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyIter</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, mylist</span>):</span><br><span class="line">        self.mylist:MyList = mylist</span><br><span class="line">        <span class="comment"># current 记录当前访问到的位置</span></span><br><span class="line">        self.current = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        current = self.current</span><br><span class="line">        self.current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> current &lt; <span class="built_in">len</span>(self.mylist.container):</span><br><span class="line">            <span class="keyword">return</span> self.mylist.container[current]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mylist = MyList()</span><br><span class="line">    mylist.add(<span class="number">666</span>)</span><br><span class="line">    mylist.add(<span class="number">667</span>)</span><br><span class="line">    mylist.add(<span class="number">668</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">isinstance</span>(mylist, Iterable))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># myiter = iter(mylist)</span></span><br><span class="line">    <span class="comment"># print(next(myiter))</span></span><br><span class="line">    <span class="comment"># print(next(myiter))</span></span><br><span class="line">    <span class="comment"># print(next(myiter))</span></span><br><span class="line">    <span class="comment"># print(next(myiter))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> mylist:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">666</span></span><br><span class="line"><span class="string">667</span></span><br><span class="line"><span class="string">668</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>我们可以采用更简便的语法，即<strong>生成器(generator)</strong>。生成器是一类特殊的迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>G = ( x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>G</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x7fe8669f9630</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(G)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(G)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(G)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(G)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(G)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(G)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p><code>yield</code> 的作用：把当前上下文（寄存器的状态）保存起来，返回一个值——它后面跟的那个值。下次执行 next 操作，会从上次 yield 保存的现场位置继续执行。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fi</span>(<span class="params">n</span>):</span><br><span class="line">    current = <span class="number">0</span></span><br><span class="line">    num1, num2 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> current &lt; n:</span><br><span class="line">        num = num1</span><br><span class="line">        <span class="comment"># 这个语法太自由了，给我楞了一下</span></span><br><span class="line">        num1, num2 = num2, num1 + num2</span><br><span class="line">        current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> num</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"></span><br><span class="line">F = fi(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;/home/zhiyue/Documents/0929work/test.py&quot;, line 19, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(next(F))</span></span><br><span class="line"><span class="string">          ^^^^^^^</span></span><br><span class="line"><span class="string">StopIteration: done</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>又或者：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fi</span>(<span class="params">n</span>):</span><br><span class="line">    current = <span class="number">0</span></span><br><span class="line">    num1, num2 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> current &lt; n:</span><br><span class="line">        num = num1</span><br><span class="line">        <span class="comment"># 这个语法太自由了，给我楞了一下</span></span><br><span class="line">        num1, num2 = num2, num1 + num2</span><br><span class="line">        current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> num</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"></span><br><span class="line">F = fi(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> F:</span><br><span class="line">    <span class="built_in">print</span>(i, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0 1 1 2 3 5 8 13 21 34</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>含有 <code>yield</code> 的函数称为生成器。</p><p>我们除了可以使用 <code>next()</code> 函数来唤醒生成器继续执行外，还可以使用 <code>send()</code> 函数来唤醒执行。使用 <code>send()</code> 函数的一个好处是可以在唤醒的同时向断点处传入一个附加数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>():</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;<span class="number">5</span>:</span><br><span class="line">        temp = <span class="keyword">yield</span> i</span><br><span class="line">        <span class="built_in">print</span>(temp)</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">f = gen()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(f))</span><br><span class="line">f.send(<span class="string">&#x27;haha&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(f))</span><br><span class="line">f.send(<span class="string">&#x27;haha&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">haha</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">haha</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>协程（Coroutine），又称微线程，纤程。</p><p>协程是 Python 中另一种实现多任务的方式，只不过比线程需要的资源更少。通过<strong>保存、恢复 CPU 上下文</strong>的机制，可以在合适的时机把一个协程切换到另一个协程。</p><p><img src="https://s2.loli.net/2024/09/30/zsdLqWB3Ai62F8T.png" alt="86-11.png"></p><p>协程通过 <code>yield</code> 在用户态保存上下文，操作系统不感知。</p><p>实现多任务时，<strong>线程切换从系统层面远不止保存和恢复 CPU 上下文这么简单</strong>。操作系统为了程序运行的高效性每个线程都有<strong>自己的缓存 Cache</strong> 等数据，操作系统还会支持这些数据的恢复操作。所以线程的切换非常耗性能（相对协程来说）。但是协程的切换只是单纯地操作 CPU 的上下文，所以<strong>一秒钟切换个上百万次系统都抗的住</strong>。</p><p>模拟协程的机制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work1</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----work1---&quot;</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work2</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----work2---&quot;</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    w1 = work1()</span><br><span class="line">    w2 = work2()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">next</span>(w1)</span><br><span class="line">        <span class="built_in">next</span>(w2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">----work1---</span></span><br><span class="line"><span class="string">----work2---</span></span><br><span class="line"><span class="string">----work1---</span></span><br><span class="line"><span class="string">----work2---</span></span><br><span class="line"><span class="string">----work1---</span></span><br><span class="line"><span class="string">----work2---</span></span><br><span class="line"><span class="string">...（省略）...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="greenlet"><a href="#greenlet" class="headerlink" title="greenlet"></a>greenlet</h2><p>为了更好使用协程来完成多任务，python 中的 greenlet 模块对其封装，从而使得切换任务变的更加简单。</p><p>Debian 环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-greenlet</span><br></pre></td></tr></table></figure><p>这只是一个功能非常初级的包，仅做演示目的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---A--&quot;</span>)</span><br><span class="line">        gr2.switch()</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---B--&quot;</span>)</span><br><span class="line">        gr1.switch()</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">gr1 = greenlet(test1)</span><br><span class="line">gr2 = greenlet(test2) </span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到 gr1 中运行</span></span><br><span class="line">gr1.switch()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">---A--</span></span><br><span class="line"><span class="string">---B--</span></span><br><span class="line"><span class="string">---A--</span></span><br><span class="line"><span class="string">---B--</span></span><br><span class="line"><span class="string">---A--</span></span><br><span class="line"><span class="string">---B--</span></span><br><span class="line"><span class="string">(后略)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="gevent"><a href="#gevent" class="headerlink" title="gevent"></a>gevent</h2><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>greenlet 虽然实现了协程，但还需要人工切换，太麻烦。gevent 是一个比 greenlet 更强大的并且能够自动切换任务的模块。</p><p>其原理是当一个 greenlet 遇到 IO（访问网络、文件操作等）操作时，就自动切换到其他的 greenlet。等到 IO 操作完成，再适时切换回来继续执行。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(gevent.getcurrent(), i)</span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g2 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g3 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line">g3.join()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd145ee0: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd145ee0: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd145ee0: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd145ee0: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd145ee0: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0cd260: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0cd260: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0cd260: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0cd260: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0cd260: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0a8860: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0a8860: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0a8860: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0a8860: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0a8860: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>可以看到，3 个 greenlet 是依次运行而不是交替运行。</p><p>gevent 切换执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(gevent.getcurrent(), i)</span><br><span class="line">        <span class="comment"># 用来模拟一个耗时操作，注意不是 time 模块中的 sleep</span></span><br><span class="line">        gevent.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g2 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g3 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line">g3.join()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892bb41ee0: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba85260: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba60860: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892bb41ee0: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba85260: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba60860: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892bb41ee0: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba85260: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba60860: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892bb41ee0: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba85260: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba60860: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892bb41ee0: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba85260: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba60860: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="monkey-补丁"><a href="#monkey-补丁" class="headerlink" title="monkey 补丁"></a>monkey 补丁</h3><p>先看一下没有补丁的情况（使用了<code>time.sleep()</code>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">coroutine_work</span>(<span class="params">coroutine_name</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(coroutine_name, i)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(coroutine_work, <span class="string">&quot;work1&quot;</span>),</span><br><span class="line">    gevent.spawn(coroutine_work, <span class="string">&quot;work2&quot;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">work1 0</span></span><br><span class="line"><span class="string">work1 1</span></span><br><span class="line"><span class="string">work1 2</span></span><br><span class="line"><span class="string">work1 3</span></span><br><span class="line"><span class="string">work1 4</span></span><br><span class="line"><span class="string">work1 5</span></span><br><span class="line"><span class="string">work1 6</span></span><br><span class="line"><span class="string">work1 7</span></span><br><span class="line"><span class="string">work1 8</span></span><br><span class="line"><span class="string">work1 9</span></span><br><span class="line"><span class="string">work2 0</span></span><br><span class="line"><span class="string">work2 1</span></span><br><span class="line"><span class="string">work2 2</span></span><br><span class="line"><span class="string">work2 3</span></span><br><span class="line"><span class="string">work2 4</span></span><br><span class="line"><span class="string">work2 5</span></span><br><span class="line"><span class="string">work2 6</span></span><br><span class="line"><span class="string">work2 7</span></span><br><span class="line"><span class="string">work2 8</span></span><br><span class="line"><span class="string">work2 9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>打上补丁：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有耗时操作时需要</span></span><br><span class="line">monkey.patch_all() <span class="comment"># 将程序中用到的耗时操作的代码，换为 gevent 中自己实现的模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">coroutine_work</span>(<span class="params">coroutine_name</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(coroutine_name, i)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(coroutine_work, <span class="string">&quot;work1&quot;</span>),</span><br><span class="line">    gevent.spawn(coroutine_work, <span class="string">&quot;work2&quot;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">work1 0</span></span><br><span class="line"><span class="string">work2 0</span></span><br><span class="line"><span class="string">work1 1</span></span><br><span class="line"><span class="string">work1 2</span></span><br><span class="line"><span class="string">work2 1</span></span><br><span class="line"><span class="string">work2 2</span></span><br><span class="line"><span class="string">work2 3</span></span><br><span class="line"><span class="string">work1 3</span></span><br><span class="line"><span class="string">work1 4</span></span><br><span class="line"><span class="string">work1 5</span></span><br><span class="line"><span class="string">work1 6</span></span><br><span class="line"><span class="string">work2 4</span></span><br><span class="line"><span class="string">work1 7</span></span><br><span class="line"><span class="string">work1 8</span></span><br><span class="line"><span class="string">work1 9</span></span><br><span class="line"><span class="string">work2 5</span></span><br><span class="line"><span class="string">work2 6</span></span><br><span class="line"><span class="string">work2 7</span></span><br><span class="line"><span class="string">work2 8</span></span><br><span class="line"><span class="string">work2 9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">运行结果不唯一</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>猴子补丁作用：<br>monkey patch 是在执行时动态替换，通常是在 startup 的时候。用过 gevent 就会知道，会在最开头的地方 <code>gevent.monkey.patch_all()</code>，把标准库中的 <code>thread</code>、<code>socket</code> 等给替换掉。这样我们在<strong>后面使用 socket 的时候能够跟寻常一样使用，无需改动代码，就可以将它变成非堵塞的</strong>。</p><h2 id="官方的-asyncio"><a href="#官方的-asyncio" class="headerlink" title="官方的 asyncio"></a>官方的 asyncio</h2><p>文档： <a href="https://docs.python.org/zh-cn/3.12/library/asyncio-task.html">https://docs.python.org/zh-cn/3.12/library/asyncio-task.html</a></p><p>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一行之后等待了一会才打印第二行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>对比下面两份代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">say_after</span>(<span class="params">delay, what</span>):</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(delay)</span><br><span class="line">    <span class="built_in">print</span>(what)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;started at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> say_after(<span class="number">1</span>, <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> say_after(<span class="number">2</span>, <span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;finished at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">started at 15:43:57</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">finished at 15:44:00</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">say_after</span>(<span class="params">delay, what</span>):</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(delay)</span><br><span class="line">    <span class="built_in">print</span>(what)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    task1 = asyncio.create_task(</span><br><span class="line">        say_after(<span class="number">1</span>, <span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    task2 = asyncio.create_task(</span><br><span class="line">        say_after(<span class="number">2</span>, <span class="string">&#x27;world&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;started at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待直到两个任务都完成</span></span><br><span class="line">    <span class="comment"># （会花费约 2 秒钟。）</span></span><br><span class="line">    <span class="keyword">await</span> task1</span><br><span class="line">    <span class="keyword">await</span> task2</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;finished at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">started at 15:49:46</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">finished at 15:49:48</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>注意，预期的输出显示代码段的运行时间比之前快了 1 秒。</p><h2 id="并发下载器"><a href="#并发下载器" class="headerlink" title="并发下载器"></a>并发下载器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有耗时操作时需要</span></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_downLoad</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;GET: %s&#x27;</span> % url)</span><br><span class="line">    resp = urllib.request.urlopen(url)</span><br><span class="line">    data = resp.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%d bytes received from %s.&#x27;</span> % (<span class="built_in">len</span>(data), url))</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(my_downLoad, <span class="string">&#x27;http://www.baidu.com/&#x27;</span>),</span><br><span class="line">    gevent.spawn(my_downLoad, <span class="string">&#x27;http://www.cskaoyan.com/&#x27;</span>),</span><br><span class="line">    gevent.spawn(my_downLoad, <span class="string">&#x27;http://www.qq.com/&#x27;</span>),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">GET: http://www.baidu.com/</span></span><br><span class="line"><span class="string">GET: http://www.cskaoyan.com/</span></span><br><span class="line"><span class="string">GET: http://www.qq.com/</span></span><br><span class="line"><span class="string">122235 bytes received from http://www.qq.com/.</span></span><br><span class="line"><span class="string">412916 bytes received from http://www.baidu.com/.</span></span><br><span class="line"><span class="string">46781 bytes received from http://www.cskaoyan.com/.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>从上能够看到，收到数据的先后顺序不一定与发送顺序相同，这体现了异步，即不确定什么时候会收到数据，顺序不一定。</p><h1 id="网盘设计（二）"><a href="#网盘设计（二）" class="headerlink" title="网盘设计（二）"></a>网盘设计（二）</h1><p>增加了下载功能，改为循环收发的设计。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Server</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ip, port</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.s_listen = <span class="literal">None</span> <span class="comment"># 用来 listen 的 socket 对象</span></span><br><span class="line">        self.ip = ip</span><br><span class="line">        self.port = port</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tcp_init</span>(<span class="params">self</span>):</span><br><span class="line">        self.s_listen = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        self.s_listen.bind((self.ip, self.port))</span><br><span class="line">        self.s_listen.listen(<span class="number">128</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">self</span>):</span><br><span class="line">        c_fd, c_addr = self.s_listen.accept()</span><br><span class="line">        user = User(c_fd)</span><br><span class="line">        user.deal_command()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    每个 User 对象对应一个客户端</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, handle_c_fd</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.user_name = <span class="literal">None</span></span><br><span class="line">        self.handle_c_fd = handle_c_fd</span><br><span class="line">        self.path = os.getcwd()  <span class="comment"># 存储连上的用户的路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deal_command</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            command = self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> command[:<span class="number">2</span>] == <span class="string">&#x27;ls&#x27;</span>:</span><br><span class="line">                self.do_ls()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;cd&#x27;</span>:</span><br><span class="line">                self.do_cd(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">3</span>] == <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">                self.do_pwd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;rm&#x27;</span>:</span><br><span class="line">                self.do_rm(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;gets&#x27;</span>:</span><br><span class="line">                self.do_gets(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;puts&#x27;</span>:</span><br><span class="line">                self.do_puts(command)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;command wrong&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_train</span>(<span class="params">self, send_bytes</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        send 火车，就是把某个字节流内容以火车形式发过去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, <span class="built_in">len</span>(send_bytes))</span><br><span class="line">        self.handle_c_fd.send(train_head_bytes + send_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv_train</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        recv 火车，就是把火车 recv 的内容返回出去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = self.handle_c_fd.recv(<span class="number">4</span>)</span><br><span class="line">        train_head = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line">        <span class="keyword">return</span> self.handle_c_fd.recv(train_head[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_ls</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        当前路径下的信息传输给客户端</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(self.path):</span><br><span class="line">            data += file + <span class="string">&#x27; &#x27;</span>*<span class="number">5</span> + <span class="built_in">str</span>(os.stat(file).st_size) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        self.send_train(data.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_cd</span>(<span class="params">self, command</span>):</span><br><span class="line">        path = command.split()[<span class="number">1</span>]</span><br><span class="line">        os.chdir(path)</span><br><span class="line">        self.path = os.getcwd()</span><br><span class="line">        self.send_train(self.path.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_pwd</span>(<span class="params">self</span>):</span><br><span class="line">        self.send_train(self.path.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_rm</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_gets</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="comment"># 向客户端发送文件</span></span><br><span class="line">        fileName = command.split()[<span class="number">1</span>]</span><br><span class="line">        file_size = os.stat(fileName).st_size <span class="comment"># 发送文件大小</span></span><br><span class="line">        <span class="comment"># print(&#x27;ohla&#x27;)</span></span><br><span class="line">        <span class="comment"># print(file_size)</span></span><br><span class="line">        self.send_train(struct.pack(<span class="string">&#x27;I&#x27;</span>, file_size))</span><br><span class="line">        <span class="comment"># print(&#x27;server here&#x27;)</span></span><br><span class="line">        </span><br><span class="line">        f = <span class="built_in">open</span>(fileName, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            file_content = f.read(<span class="number">10000</span>)</span><br><span class="line">            <span class="keyword">if</span> file_content:</span><br><span class="line">                self.handle_c_fd.send(file_content)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_puts</span>(<span class="params">self, command</span>):</span><br><span class="line">        fileName = command.split()[<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 将 client 发来的文件保存在 server 上</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server = Server(<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    server.tcp_init()</span><br><span class="line">    server.task()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cycle_recv</span>(<span class="params">somefd, file, fileSize</span>):</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> total &lt; fileSize:</span><br><span class="line">        data = somefd.recv(<span class="number">10000</span>)</span><br><span class="line">        file.write(data)</span><br><span class="line">        total += <span class="built_in">len</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ip, port</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.client:socket = <span class="literal">None</span></span><br><span class="line">        self.ip = ip</span><br><span class="line">        self.port = port</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tcp_connect</span>(<span class="params">self</span>):</span><br><span class="line">        self.client = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        self.client.connect((self.ip, self.port))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_train</span>(<span class="params">self, send_bytes</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        send 火车，就是把某个字节流内容以火车形式发过去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, <span class="built_in">len</span>(send_bytes))</span><br><span class="line">        self.client.send(train_head_bytes + send_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv_train</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        recv 火车，就是把火车 recv 的内容返回出去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = self.client.recv(<span class="number">4</span>)</span><br><span class="line">        train_head = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line">        <span class="keyword">return</span> self.client.recv(train_head[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_command</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        发送各种命令给服务器</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            command = <span class="built_in">input</span>()</span><br><span class="line">            self.send_train(command.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> command[:<span class="number">2</span>] == <span class="string">&#x27;ls&#x27;</span>:</span><br><span class="line">                self.do_ls()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;cd&#x27;</span>:</span><br><span class="line">                self.do_cd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">3</span>] == <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">                self.do_pwd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;rm&#x27;</span>:</span><br><span class="line">                self.do_rm(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;gets&#x27;</span>:</span><br><span class="line">                self.do_gets(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;puts&#x27;</span>:</span><br><span class="line">                self.do_puts(command)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;command wrong&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_ls</span>(<span class="params">self</span>):</span><br><span class="line">        data = self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_cd</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_pwd</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_rm</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_gets</span>(<span class="params">self, command</span>):  <span class="comment"># 从 server 那里拿文件</span></span><br><span class="line">        <span class="comment"># 先接文件的大小</span></span><br><span class="line">        file_size = struct.unpack(<span class="string">&#x27;I&#x27;</span>, self.recv_train())[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print(&#x27;client recved size:&#x27;)</span></span><br><span class="line">        <span class="comment"># print(file_size)</span></span><br><span class="line">        fileName = command.split()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(&#x27;client here&#x27;)</span></span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&#x27;[接受]&#x27;</span> + fileName, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        cycle_recv(self.client, f, file_size)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_puts</span>(<span class="params">self, command</span>):</span><br><span class="line">        fileName = command.split()[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    client = Client(<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    client.tcp_connect()</span><br><span class="line">    client.send_command()</span><br></pre></td></tr></table></figure><p>进一步改进的思路：</p><p><img src="https://s2.loli.net/2024/10/03/Tea6NxFmBAcLyXD.png" alt="86-12.png"></p><p><img src="https://s2.loli.net/2024/10/03/BbNXm7lYjaDO5Fc.png" alt="86-13.png"></p><p>还可以考虑增加功能：</p><ul><li>用户名、密码存储在数据库中</li><li>秒传（某用户上传其他用户已经上传过的内容不会重复存一份）</li></ul><h1 id="阻塞模式、非阻塞模式"><a href="#阻塞模式、非阻塞模式" class="headerlink" title="阻塞模式、非阻塞模式"></a>阻塞模式、非阻塞模式</h1><p>本小节内容由 AIGC 改编。</p><p><strong>阻塞模式（Blocking Mode）</strong>：<br>这是套接字的默认行为。在阻塞模式下，诸如 <code>recv()</code> 或 <code>accept()</code> 等操作会一直等待，直到有数据到达或操作完成为止。比如，服务器等待客户端的连接请求时，<code>accept()</code> 会阻塞，直到有客户端连接上。</p><p><strong>非阻塞模式（Non-Blocking Mode）</strong>：</p><ul><li>在非阻塞模式下，诸如 <code>recv()</code>、<code>send()</code>、<code>accept()</code> 等操作如果不能立即完成，就会抛出一个 <code>BlockingIOError</code> 异常。程序可以继续做其他事情，而不是在等待某个操作完成。</li><li>非阻塞模式通常用于需要处理多个连接的服务器，如那些使用 <code>select()</code> 或 <code>poll()</code> 的服务器架构。非阻塞模式的使用场景：高并发服务器、异步 I/O 等。</li></ul><p><strong>示例代码</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 TCP 套接字</span></span><br><span class="line">tcp_server_tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定地址和端口</span></span><br><span class="line">tcp_server_tcp.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听连接</span></span><br><span class="line">tcp_server_tcp.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置为非阻塞模式</span></span><br><span class="line">tcp_server_tcp.setblocking(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主循环，处理多个客户端连接</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        client_socket, addr = tcp_server_tcp.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Accepted connection from <span class="subst">&#123;addr&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> BlockingIOError:</span><br><span class="line">        <span class="comment"># 如果没有客户端连接，继续执行其他任务</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No incoming connections, doing other work...&quot;</span>)</span><br><span class="line">        <span class="comment"># 可以在这里做其他的事情</span></span><br></pre></td></tr></table></figure><p>我们在前面已经看到，有些代码可以在没有显式设置非阻塞的情况下使用 <code>epoll</code> 进行事件驱动的处理，但让我们仔细探讨一下<strong>为什么在某些情况下使用非阻塞模式仍然有其必要性</strong>，以及在某些代码中为什么不需要。</p><p><code>select.epoll()</code> 是 Linux 下的一种高级 I/O 多路复用机制，适用于高并发场景。<code>epoll</code> 本质上是事件驱动的，它能够监视多个文件描述符（如套接字、标准输入等），并在这些描述符有事件发生时通知程序，因此并不需要手动设置套接字为非阻塞。</p><ul><li><code>epoll.poll(-1)</code> 会阻塞并等待，直到有事件（如客户端发来的数据或服务器端的输入）发生。</li><li>当 <code>epoll</code> 监控到文件描述符上有可用的事件时，才会返回并让你处理数据。这种机制下，套接字的操作在正常情况下不会被阻塞，因为事件驱动会确保只有在数据准备好时才进行 I/O 操作。</li></ul><p><strong>为什么在这种情况下不需要非阻塞模式：</strong></p><p><code>epoll</code> 自己会处理套接字的事件，因此不需要套接字是非阻塞的。程序会在 <code>epoll.poll()</code> 返回时知道哪个文件描述符有事件发生，并且这些事件都准备好了进行处理（如 <code>recv()</code> 或 <code>send()</code>），所以它本质上已经是一种避免阻塞的机制。</p><p><strong>非阻塞模式的使用场景：</strong></p><p>虽然这里不需要手动设置非阻塞模式，但在一些不使用 <code>epoll</code> 或 <code>select</code> 的代码中，设置非阻塞的好处包括：</p><ul><li><p><strong>单独处理 I/O</strong>：如果不使用 <code>epoll</code> 或 <code>select</code>，并且需要继续处理其他任务时，可以通过将套接字设置为非阻塞避免等待 I/O。</p></li><li><p><strong>配合异步框架</strong>：在使用异步编程时（如 <code>asyncio</code>），套接字通常会被设置为非阻塞模式，允许事件循环继续处理其他事件而不是被某个套接字阻塞住。</p></li><li><p><strong>处理多个客户端</strong>：在不使用 <code>select</code> 或 <code>epoll</code> 时，服务器如果采用阻塞模式处理 I/O，就只能一次处理一个客户端。如果设置为非阻塞模式，则可以轮询处理多个客户端的请求。</p></li></ul><p><strong>为什么在 <code>epoll</code> 中不需要显式设置非阻塞：</strong></p><p>使用 <code>epoll</code> 监听文件描述符时，<code>epoll</code> 是事件驱动的，调用 <code>recv()</code> 或 <code>send()</code> 之类的操作时，事件已经准备好，因此不需要再通过设置套接字为非阻塞来避免阻塞操作。</p><p><strong>如果要结合非阻塞和 <code>epoll</code>：</strong></p><p>在某些情况下（如需要非阻塞的连接处理时），仍然可以结合两者使用。例如，如果想在其他地方做一些操作而不想等某个文件描述符就绪，就可以设置非阻塞。</p><h1 id="HTTP-协议头部解析"><a href="#HTTP-协议头部解析" class="headerlink" title="HTTP 协议头部解析"></a>HTTP 协议头部解析</h1><p>一些基本知识可以在网上找找，F12 打开看看就行。</p><p>当请求头没有 content-length 时，怎么知道请求体结束了？</p><p>http 的 header 和 body 之间是空行分割的，又因为每个头部项是以 <code>\r\n</code> 作为结束符，所以，数据流中是以 <code>\r\n\r\n</code> 来分割解析请求头（响应头）与请求体（响应体）的。如下图所示：</p><p><img src="https://bu.dusays.com/2024/10/05/6700b725a936f.png" alt="86-14.png"></p><p><strong>怎么知道（请求体）响应体结束了呢？</strong> http 协议规定，响应头的字段 content-length 用来表示响应体长度大小，但是，有可能发送请求头时，并不能知道完整的响应体长度（<strong>比如当响应数据太大，服务端流式处理的情况</strong>），这时需要设置请求头 Transfer-Encoding: chunked，使用数据块的方式传输，数据块格式如下图所示：</p><p><img src="https://bu.dusays.com/2024/10/05/6700b725b5cfa.png" alt="86-15.png"></p><p>HTTP 请求的类型（挑了几个重要的）：</p><ul><li><code>GET</code> 查询</li><li><code>POST</code> 新增</li><li><code>PUT</code> 修改</li><li><code>DELETE</code> 删除</li></ul><p>下面制作一个最简单的 web server:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 为了确保端口复用</span></span><br><span class="line">tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2. 绑定</span></span><br><span class="line">tcp_server_socket.bind((<span class="string">&quot;192.168.31.106&quot;</span>, <span class="number">7890</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3. 变为监听套接字</span></span><br><span class="line">tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">new_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line">http_head=new_socket.recv(<span class="number">10000</span>)</span><br><span class="line"><span class="built_in">print</span>(http_head.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">response = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">response += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">response +=<span class="string">&#x27;&lt;html&gt;&lt;h1&gt;hello world&lt;/h1&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">new_socket.send(response.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">GET / HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 192.168.31.106:7890</span></span><br><span class="line"><span class="string">Connection: keep-alive</span></span><br><span class="line"><span class="string">Cache-Control: max-age=0</span></span><br><span class="line"><span class="string">DNT: 1</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">浏览器的显示：一级标题 hello world</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>注意需要在浏览器打开 <code>192.168.31.106:7890</code>（本机 IP 和对应的端口号）。</p><p>HTTP响应码总结（如果挂了可去 archive.org 查找）：<br><a href="https://zhuanlan.zhihu.com/p/66062179">https://zhuanlan.zhihu.com/p/66062179</a></p><p>概览：</p><p><img src="https://s2.loli.net/2024/10/05/RKOoHAgPds21Vj5.png" alt="86-16.png"></p><p>改进这个 web server :<br><a href="https://github.com/dropsong/py_webServer">https://github.com/dropsong/py_webServer</a></p><h1 id="Python-连接-MySQL"><a href="#Python-连接-MySQL" class="headerlink" title="Python 连接 MySQL"></a>Python 连接 MySQL</h1><h2 id="环境问题"><a href="#环境问题" class="headerlink" title="环境问题"></a>环境问题</h2><p>debian12 中已经安装了 MariaDB，它会与 MySQL 发生冲突。</p><p>使用以下命令卸载 MariaDB：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove --purge mariadb-server mariadb-client mariadb-common mariadb-server-core mariadb-client-core</span><br><span class="line">sudo apt autoremove</span><br><span class="line">sudo apt autoclean</span><br></pre></td></tr></table></figure><p>安装 MySQL :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install mysql-server mysql-client</span><br></pre></td></tr></table></figure><p>安装 pymysql:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pymysql</span><br></pre></td></tr></table></figure><p>大功告成！</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>一个简单有效的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建 Connection 连接</span></span><br><span class="line">    conn = connect(host=<span class="string">&#x27;localhost&#x27;</span>,port=<span class="number">3306</span>,database=<span class="string">&#x27;akashi&#x27;</span>,user =<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;你知道的太多了&#x27;</span>,charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获得 Cursor 对象</span></span><br><span class="line">    cs1 = conn.cursor() <span class="comment"># 操作对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行 insert 语句，并返回受影响的行数：添加一条数据</span></span><br><span class="line">    <span class="comment"># 增加</span></span><br><span class="line">    count = cs1.execute(<span class="string">&#x27;insert into goods(name, cate_name, brand_name, price, is_show, is_saleoff) values(&quot;redmibook&quot;, &quot;笔记本&quot;, &quot;xiaomi&quot;, 112, true, true)&#x27;</span>)</span><br><span class="line">    <span class="comment">#打印受影响的行数</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line"></span><br><span class="line">    count = cs1.execute(<span class="string">&#x27;insert into goods(name, cate_name, brand_name, price, is_show, is_saleoff) values(&quot;honor_book&quot;, &quot;笔记本&quot;, &quot;huawei&quot;, 111, true, true)&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 更新</span></span><br><span class="line">    <span class="comment"># count = cs1.execute(&#x27;update goods_cates set name=&quot;机械硬盘&quot; where name=&quot;硬盘&quot;&#x27;)</span></span><br><span class="line">    <span class="comment"># # 删除</span></span><br><span class="line">    <span class="comment"># count = cs1.execute(&#x27;delete from goods_cates where id=6&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提交之前的操作，如果之前已经之执行过多次的 execute，那么就都进行提交</span></span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭 Cursor 对象</span></span><br><span class="line">    cs1.close()</span><br><span class="line">    <span class="comment"># 关闭 Connection 对象</span></span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>以上代码经过验证。</p><p>查询一行数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建 Connection 连接</span></span><br><span class="line">    conn = connect(host=<span class="string">&#x27;localhost&#x27;</span>,port=<span class="number">3306</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;你知道的太多了&#x27;</span>,database=<span class="string">&#x27;akashi&#x27;</span>,charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获得 Cursor 对象</span></span><br><span class="line">    cs1 = conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行 select 语句，并返回受影响的行数：查询一条数据</span></span><br><span class="line">    count = cs1.execute(<span class="string">&#x27;select id,name from goods where id&gt;=4&#x27;</span>)</span><br><span class="line">    <span class="comment"># 打印受影响的行数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;查询到%d 条数据:&quot;</span> % count)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">        <span class="comment"># 获取查询的结果</span></span><br><span class="line">        result = cs1.fetchone()</span><br><span class="line">        <span class="comment"># 打印查询的结果</span></span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取查询的结果</span></span><br><span class="line">    <span class="comment"># 关闭 Cursor 对象</span></span><br><span class="line">    cs1.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>以上代码经过验证。</p><p>查询多行数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建 Connection 连接</span></span><br><span class="line">    conn = connect(host=<span class="string">&#x27;localhost&#x27;</span>,port=<span class="number">3306</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;你知道的太多了&#x27;</span>,database=<span class="string">&#x27;akashi&#x27;</span>,charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获得 Cursor 对象</span></span><br><span class="line">    cs1 = conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行 select 语句，并返回受影响的行数：查询一条数据</span></span><br><span class="line">    count = cs1.execute(<span class="string">&#x27;select id,name from goods where id&gt;=4&#x27;</span>)</span><br><span class="line">    <span class="comment"># 打印受影响的行数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;查询到%d 条数据:&quot;</span> % count)</span><br><span class="line"></span><br><span class="line">    result = cs1.fetchall()</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="comment"># 关闭 Cursor 对象</span></span><br><span class="line">    cs1.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>以上代码经过验证。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;零碎知识&quot;&gt;&lt;a href=&quot;#零碎知识&quot; class=&quot;headerlink&quot; title=&quot;零碎知识&quot;&gt;&lt;/a&gt;零碎知识&lt;/h1&gt;&lt;p&gt;这里是 Python 的一些零碎知识点。&lt;/p&gt;
&lt;p&gt;多值参数:&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="网络编程" scheme="https://dropsong.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="python" scheme="https://dropsong.github.io/tags/python/"/>
    
    <category term="红黑树" scheme="https://dropsong.github.io/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
    <category term="抓包" scheme="https://dropsong.github.io/tags/%E6%8A%93%E5%8C%85/"/>
    
    <category term="多进程" scheme="https://dropsong.github.io/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
    <category term="进程池" scheme="https://dropsong.github.io/tags/%E8%BF%9B%E7%A8%8B%E6%B1%A0/"/>
    
    <category term="协程" scheme="https://dropsong.github.io/tags/%E5%8D%8F%E7%A8%8B/"/>
    
    <category term="HTTP协议" scheme="https://dropsong.github.io/tags/HTTP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>前端入门</title>
    <link href="https://dropsong.github.io/posts/a9230f8f.html"/>
    <id>https://dropsong.github.io/posts/a9230f8f.html</id>
    <published>2024-09-08T08:23:52.000Z</published>
    <updated>2025-01-05T14:17:18.040Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考了 <a href="https://www.bilibili.com/video/BV11N4y187ZE/?p=8">清华大学电子系科协软件部2023暑期培训</a> ，在此表示感谢。</p><h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><div class="row"><iframe src="https://drive.google.com/file/d/1eHQt8GRlUnP-PG_YLotn4NEfifspqC_y/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录</strong><br>HTML  1<br>CSS  4<br>JavaScript  6</p></blockquote><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">x, time</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">            <span class="title function_">resolve</span>();</span><br><span class="line">        &#125;,time)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">counter1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">count</span>(<span class="number">1</span>, <span class="number">4000</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">count</span>(<span class="number">2</span>, <span class="number">4000</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">count</span>(<span class="number">3</span>, <span class="number">4000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">counter2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">count</span>(<span class="number">4</span>, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">count</span>(<span class="number">5</span>, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">count</span>(<span class="number">6</span>, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">counter1</span>();</span><br><span class="line"><span class="title function_">counter2</span>();</span><br></pre></td></tr></table></figure><p>使用 nodejs 运行，运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>一些奇妙的例子（这些文件过于古老，我删除了一些不能用的）：<br><a href="https://github.com/dropsong/JS_Examples">https://github.com/dropsong/JS_Examples</a></p><h1 id="ToDoList-项目"><a href="#ToDoList-项目" class="headerlink" title="ToDoList 项目"></a>ToDoList 项目</h1><p>一个简单的小项目。</p><p>下面先补充一些小知识。内边距、外边距：</p><p><img src="https://s2.loli.net/2024/09/11/sWRg7MabUwoPAHm.jpg" alt="85-1.jpg"></p><p>html 文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ToDoList<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ToDoList<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;添加一个任务...&quot;</span> <span class="attr">id</span>=<span class="string">&quot;task-input&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;add-btn&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tasks&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pending-tasks&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>未完成<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 未完成任务列表区域 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;completed-tasks&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>已完成<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 已完成任务列表区域 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;delbutton&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;delete-btn&quot;</span>&gt;</span>删除已完成<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;simple.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css 文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">    <span class="attribute">display</span>: flex;             <span class="comment">/* 弹性布局 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: center;   <span class="comment">/* 水平方向居中对齐 */</span></span><br><span class="line">    <span class="attribute">align-items</span>: center;       <span class="comment">/* 在垂直方向居中对齐 */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;      <span class="comment">/* 圆角 */</span></span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.input-container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;  <span class="comment">/* 子元素（输入框和按钮）会在容器内两端对齐 */</span></span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;  <span class="comment">/* 光标变成小手*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: darkorange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tasks</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pending-tasks</span>, <span class="selector-class">.completed-tasks</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">48%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pending-tasks</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff726f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.completed-tasks</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#79e376</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.delbutton</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.delbutton</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.delbutton</span> <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 调整任务项中的文字样式 */</span></span><br><span class="line"><span class="selector-class">.pending-tasks</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>, <span class="selector-class">.completed-tasks</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;  <span class="comment">/* 深灰色字体，保持网页一致风格 */</span></span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;  <span class="comment">/* 留出与复选框的间距 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 复选框样式 */</span></span><br><span class="line"><span class="selector-class">.pending-tasks</span> <span class="selector-tag">li</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span>, <span class="selector-class">.completed-tasks</span> <span class="selector-tag">li</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 已完成任务的样式 */</span></span><br><span class="line"><span class="selector-class">.completed-tasks</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: line-through;  <span class="comment">/* 已完成任务添加删除线 */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#888</span>;  <span class="comment">/* 颜色变浅，表明任务已完成 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取页面中的元素</span></span><br><span class="line"><span class="keyword">const</span> taskInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;task-input&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> addTaskBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;add-btn&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> incompleteTasks = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.pending-tasks&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> completedTasks = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.completed-tasks&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> clearCompletedBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;delete-btn&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击加号按钮时，添加任务</span></span><br><span class="line">addTaskBtn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> taskText = taskInput.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (taskText.<span class="title function_">trim</span>() === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;请输入任务内容&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个新的任务项 &lt;li&gt;</span></span><br><span class="line">    <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建勾选框 &lt;input type=&quot;checkbox&quot;&gt;</span></span><br><span class="line">    <span class="keyword">const</span> checkbox = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">    checkbox.<span class="property">type</span> = <span class="string">&quot;checkbox&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建任务文字节点 &lt;span&gt;</span></span><br><span class="line">    <span class="keyword">const</span> taskLabel = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">    taskLabel.<span class="property">textContent</span> = taskText;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当勾选框被点击时，将任务移动到“已完成”</span></span><br><span class="line">    checkbox.<span class="title function_">addEventListener</span>(<span class="string">&quot;change&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">checked</span>) &#123;</span><br><span class="line">            completedTasks.<span class="title function_">appendChild</span>(li);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            incompleteTasks.<span class="title function_">appendChild</span>(li);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将勾选框和任务文字添加到任务项中</span></span><br><span class="line">    li.<span class="title function_">appendChild</span>(checkbox);</span><br><span class="line">    li.<span class="title function_">appendChild</span>(taskLabel);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将任务项添加到“未完成”列表</span></span><br><span class="line">    incompleteTasks.<span class="title function_">appendChild</span>(li);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空输入框</span></span><br><span class="line">    taskInput.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击“删除已完成”按钮时，移除已完成任务列表中的任务项</span></span><br><span class="line">clearCompletedBtn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取所有已完成任务的子元素 (li) 并删除它们</span></span><br><span class="line">    <span class="keyword">const</span> completedTaskItems = completedTasks.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    completedTaskItems.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">task</span>) &#123;</span><br><span class="line">        task.<span class="title function_">remove</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最终效果（视频就不录了）：</p><p><img src="https://s2.loli.net/2024/09/11/nv5IatyboRPG2Yw.png" alt="85-2.png"></p><p>互联网产品开发流程及开发岗位：</p><p><img src="https://s2.loli.net/2024/10/09/rvfoKCjGd9enT7Y.png" alt="85-3.png"></p><p>可以当作手册查询的 html, css, js 网站：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web">https://developer.mozilla.org/zh-CN/docs/Web</a></p><h1 id="NODEJS"><a href="#NODEJS" class="headerlink" title="NODEJS"></a>NODEJS</h1><div class="row"><iframe src="https://drive.google.com/file/d/1PC3X4D11r3KtxPNfwTWRCCuJhNVR_AFX/preview" style="width:100%; height:550px"></iframe></div><p>异步的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;1.txt&#x27;</span>, <span class="string">&#x27;this is 1.txt&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果发生错误，打印错误并退出</span></span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 文件写入成功</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;file has been created successfully.&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Dose this happen after file?&quot;</span>);</span><br></pre></td></tr></table></figure><p>使用 nodejs 运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dose this happen after file?</span><br><span class="line">file has been created successfully.</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文参考了 &lt;a href=&quot;https://www.bilibili.com/video/BV11N4y187ZE/?p=8&quot;&gt;清华大学电子系科协软件部2023暑期培训&lt;/a&gt; ，在此表示感谢。&lt;/p&gt;
&lt;h1 id=&quot;快速上手&quot;&gt;&lt;a href=&quot;#快速上手&quot; clas</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="前端" scheme="https://dropsong.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>手写数字识别</title>
    <link href="https://dropsong.github.io/posts/1d11fe8c.html"/>
    <id>https://dropsong.github.io/posts/1d11fe8c.html</id>
    <published>2024-09-06T04:49:32.000Z</published>
    <updated>2024-09-06T15:19:12.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>原理部分，移步之前的文章 <a href="https://loveofpeach.github.io/posts/6f3f8819.html">人工智能导论</a> 。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> torchvision.datasets <span class="keyword">import</span> MNIST</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(torch.nn.Module):</span><br><span class="line">    <span class="comment"># 构造函数，self 类似于 C++ 中的 this</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 多少层、每层多少节点可以调</span></span><br><span class="line">        self.fc1 = torch.nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">64</span>)</span><br><span class="line">        self.fc2 = torch.nn.Linear(<span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">        self.fc3 = torch.nn.Linear(<span class="number">64</span>, <span class="number">32</span>)</span><br><span class="line">        self.fc4 = torch.nn.Linear(<span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">        self.fc5 = torch.nn.Linear(<span class="number">32</span>, <span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):  <span class="comment"># 前向传播</span></span><br><span class="line">        x = torch.nn.functional.relu(self.fc1(x))</span><br><span class="line">        x = torch.nn.functional.relu(self.fc2(x))</span><br><span class="line">        x = torch.nn.functional.relu(self.fc3(x))</span><br><span class="line">        x = torch.nn.functional.relu(self.fc4(x))</span><br><span class="line">        x = torch.nn.functional.log_softmax(self.fc5(x), dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data_loader</span>(<span class="params">is_train</span>):</span><br><span class="line">    <span class="comment"># 可以把这个 tensor 简单理解为一个多维数组</span></span><br><span class="line">    to_tensor = transforms.Compose([transforms.ToTensor()])</span><br><span class="line">    data_set = MNIST(<span class="string">&quot;&quot;</span>, is_train, transform=to_tensor, download=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> DataLoader(data_set, batch_size=<span class="number">15</span>, shuffle=<span class="literal">True</span>) <span class="comment"># 一个批次包含 15 张图片，数据打乱</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate</span>(<span class="params">test_data, net</span>):</span><br><span class="line">    n_correct = <span class="number">0</span></span><br><span class="line">    n_total = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 验证或测试模型时，不需要计算梯度，只关心模型的预测结果。因此关闭梯度计算</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> (x, y) <span class="keyword">in</span> test_data:</span><br><span class="line">            outputs = net.forward(x.view(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>))</span><br><span class="line">            <span class="keyword">for</span> i, output <span class="keyword">in</span> <span class="built_in">enumerate</span>(outputs):</span><br><span class="line">                <span class="keyword">if</span> torch.argmax(output) == y[i]: <span class="comment"># argmax 计算一个数列中最大值的序号</span></span><br><span class="line">                    n_correct += <span class="number">1</span></span><br><span class="line">                n_total += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n_correct / n_total</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 导入训练集和测试集</span></span><br><span class="line">    train_data = get_data_loader(is_train=<span class="literal">True</span>)</span><br><span class="line">    test_data = get_data_loader(is_train=<span class="literal">False</span>)</span><br><span class="line">    net = Net()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始网络的正确率</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;initial accuracy:&quot;</span>, evaluate(test_data, net))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以下接近于固定写法</span></span><br><span class="line"></span><br><span class="line">    optimizer = torch.optim.Adam(net.parameters(), lr=<span class="number">0.001</span>)</span><br><span class="line">    <span class="comment"># 有时需在一个数据集上反复训练神经网络，提高数据集的利用率，每一个轮次就是一个 epoch</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> (x, y) <span class="keyword">in</span> train_data:</span><br><span class="line">            net.zero_grad()  <span class="comment"># 初始化</span></span><br><span class="line">            output = net.forward(x.view(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>))  <span class="comment"># 正向传播</span></span><br><span class="line">            <span class="comment"># nll_loss 对数损失函数，是为了匹配前面 log_softmax 中的对数运算</span></span><br><span class="line">            loss = torch.nn.functional.nll_loss(output, y)  <span class="comment"># 计算差值</span></span><br><span class="line">            loss.backward()    <span class="comment"># 反向误差传播</span></span><br><span class="line">            optimizer.step()   <span class="comment"># 优化网络参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;epoch&quot;</span>, epoch, <span class="string">&quot;accuracy:&quot;</span>, evaluate(test_data, net))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (n, (x, _)) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_data):</span><br><span class="line">        <span class="keyword">if</span> n &gt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        predict = torch.argmax(net.forward(x[<span class="number">0</span>].view(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>)))</span><br><span class="line">        plt.figure(n)</span><br><span class="line">        plt.imshow(x[<span class="number">0</span>].view(<span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line">        plt.title(<span class="string">&quot;prediction: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(predict)))</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="代码解读"><a href="#代码解读" class="headerlink" title="代码解读"></a>代码解读</h1><p>以下 AIGC 。</p><h2 id="nn-Linear"><a href="#nn-Linear" class="headerlink" title="nn.Linear"></a>nn.Linear</h2><p><code>torch.nn.Linear</code> 是 PyTorch 中用于创建全连接层（也称为线性层或仿射层）的类。这个层的主要功能是将输入数据与一个权重矩阵相乘，并加上一个偏置向量。它可以用来构建神经网络的全连接层。</p><p><strong><code>torch.nn.Linear</code> 返回的是一个线性层对象，它本质上是一个可调用的对象</strong>（即可以像函数一样调用它）。将一个输入张量传递给这个线性层时，它会对输入进行线性变换，并返回一个新的张量。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个线性层</span></span><br><span class="line">linear = nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设我们有一个批次大小为 10 的输入数据，每个输入是 784 维的（即 28x28 的图像展平）</span></span><br><span class="line">x = torch.randn(<span class="number">10</span>, <span class="number">28</span>*<span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过线性层</span></span><br><span class="line">output = linear(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(output.shape)  <span class="comment"># 输出张量的形状是 (10, 64)</span></span><br></pre></td></tr></table></figure><h2 id="log-softmax"><a href="#log-softmax" class="headerlink" title="log_softmax"></a>log_softmax</h2><p><code>log_softmax</code> 对输出<strong>归一化</strong>。它是 <code>softmax</code> 函数的对数版本，通常用于多分类任务的神经网络输出层。</p><p><code>softmax</code> 将一个实数向量转换为概率分布，输出的每个值在 0 到 1 之间，并且和为 1 。公式为：</p><script type="math/tex; mode=display">\text{softmax}(x_i) = \frac{e^{x_i}}{\sum_{j} e^{x_j}}</script><p>其中 $x_i$ 是输入向量的第 $i$ 个元素，$\sum_{j} e^{x_j}$ 是所有输入值的指数和。</p><p><code>log_softmax</code> 是 <code>softmax</code> 函数的对数形式，公式为：</p><script type="math/tex; mode=display">\begin{aligned}\text{logsoftmax}(x_i) &= \log\left(\frac{e^{x_i}}{\sum_{j} e^{x_j}}\right)  \\&= x_i - \log\left(\sum_{j} e^{x_j}\right)\end{aligned}</script><p>先 <code>softmax</code> 再取对数，容易出现数值不稳定的问题，尤其是当数值非常小时，可能导致数值下溢。而 <code>log_softmax</code> 在内部将这两个操作结合起来计算，避免了这种数值不稳定。</p><p>在多分类任务中，交叉熵损失函数常常与 <code>log_softmax</code> 一起使用。具体来说，PyTorch 中的 <code>torch.nn.functional.nll_loss</code> （负对数似然损失）要求输入的是对数概率，而不是直接的概率。<code>log_softmax</code> 的输出正好符合 <code>nll_loss</code> 的输入要求。</p><h2 id="nll-loss"><a href="#nll-loss" class="headerlink" title="nll_loss"></a>nll_loss</h2><p><code>nll_loss</code> 用于计算模型输出的对数概率与目标标签之间的差异。它的核心思想是通过最小化负对数似然来使模型的预测与真实标签更接近。</p><p>在代码中，输出经过 <code>log_softmax</code>，给出每个类别的对数概率，<code>nll_loss</code> 则计算这些对数概率与真实标签的匹配程度。通过最小化这个损失，模型能够逐渐学会正确分类。</p><p>假设模型的输出是一个概率分布，<code>nll_loss</code> 对应的公式为：</p><script type="math/tex; mode=display">L = -\frac{1}{N} \sum_{i=1}^{N} \log(p(y_i))</script><p>其中：</p><ul><li>$ N $ 是样本的数量，</li><li>$ p(y_i) $ 是模型对样本 $ i $ 的正确类别 $ y_i $ 的预测概率（经过 <code>log_softmax</code> 后已经是对数概率），</li><li>$ L $ 是最终的平均损失值。</li></ul><h2 id="get-data-loader"><a href="#get-data-loader" class="headerlink" title="get_data_loader"></a>get_data_loader</h2><p><code>get_data_loader</code> 函数用于加载 MNIST 数据集，并返回一个 PyTorch 的 <code>DataLoader</code> 对象。<code>DataLoader</code> 是 PyTorch 中的一个重要组件，用于批量化处理数据集，以便在训练或测试时高效地加载和使用数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">to_tensor = transforms.Compose([transforms.ToTensor()])</span><br></pre></td></tr></table></figure><p><code>transforms</code> 是 <code>torchvision</code> 提供的工具，用于对图像进行预处理。<code>transforms.Compose</code> 是一个将多个变换组合在一起的函数，这里只用了一个变换 <code>transforms.ToTensor()</code>。</p><p><code>transforms.ToTensor()</code> 将 PIL 图像或 NumPy 数组转换为 PyTorch 的张量（tensor），并将像素值缩放到 <code>[0, 1]</code> 之间。MNIST 数据集中原始像素值是 <code>0</code> 到 <code>255</code>，而 <code>ToTensor()</code> 会自动将其归一化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> DataLoader(data_set, batch_size=<span class="number">15</span>, shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><code>DataLoader</code> 是 PyTorch 中用于处理和批量化数据集的工具。它会将 <code>data_set</code>（MNIST 数据集）分批次加载，每次返回指定数量的数据。具体参数解释如下：</p><ul><li><strong><code>batch_size=15</code></strong>：指定每个批次包含 15 张图片。在训练神经网络时，通常不使用整个数据集，而是将数据集分成多个批次（batch），在每个批次上执行前向传播和反向传播。</li><li><strong><code>shuffle=True</code></strong>：表示每个 epoch 开始时，打乱数据集。打乱数据可以提高模型训练的随机性，防止模型过拟合于数据的特定顺序。</li></ul><h2 id="x-view-1-28-28"><a href="#x-view-1-28-28" class="headerlink" title="x.view(-1, 28*28)"></a>x.view(-1, 28*28)</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outputs = net.forward(x.view(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>))</span><br></pre></td></tr></table></figure><p><code>x.view(-1, 28*28)</code> 这部分将输入数据 <code>x</code> 进行重塑（reshape）。MNIST 数据集中的每张图片原本是 28x28 的二维图像张量，但全连接层要求输入的一维张量。因此需要将图片从 28x28 展平为一个一维的 784 维向量（<code>28 * 28 = 784</code>）。</p><ul><li><code>x</code> 是一个四维张量，形状为 <code>(batch_size, 1, 28, 28)</code>，其中 <code>batch_size</code> 是当前批次的大小。</li><li><code>view()</code> 是 PyTorch 中的一个张量重塑函数。<code>x.view(-1, 28*28)</code> 的作用是将 <code>x</code> 重塑为形状 <code>(batch_size, 28*28)</code> 的二维张量。<ul><li><code>-1</code> 表示自动推断维度，PyTorch 会根据其他维度的大小来推断 <code>batch_size</code>，即这个维度的大小保持不变。</li></ul></li></ul><p>例如，如果 <code>x</code> 的形状为 <code>(15, 1, 28, 28)</code>，表示批次大小为 15，每张图片大小为 28x28，则 <code>x.view(-1, 28*28)</code> 会将 <code>x</code> 转换为 <code>(15, 784)</code> 的二维张量。</p><h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h2><p><code>enumerate()</code> 是 Python 内置函数，它允许在循环中同时获得<strong>索引</strong>和<strong>元素</strong>。对于 <code>outputs</code> 来说，<code>enumerate(outputs)</code> 会返回每个样本的索引和对应的输出值。</p><ul><li><code>i</code> 是当前迭代的索引，表示第 <code>i</code> 个样本。</li><li><code>output</code> 是 <code>outputs</code> 中第 <code>i</code> 个样本的输出，即一个 10 维的张量，包含了该样本对 10 个类别的预测概率。</li></ul><h2 id="optimizer"><a href="#optimizer" class="headerlink" title="optimizer"></a>optimizer</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">optimizer = torch.optim.Adam(net.parameters(), lr=<span class="number">0.001</span>)</span><br></pre></td></tr></table></figure><p><code>torch.optim.Adam</code> 是 PyTorch 中实现的 Adam 优化器。Adam（Adaptive Moment Estimation）是一种常用的优化算法，结合了<strong>动量法</strong>和<strong>RMSProp</strong> 优化器的优点，它通过自适应地调整学习率来加快训练速度，且在处理稀疏梯度问题时表现很好。</p><p><code>net.parameters()</code> 是一个函数，返回神经网络模型 <code>Net</code> 的所有可训练参数。每个神经网络层（如线性层 <code>fc1</code>, <code>fc2</code> 等）都会包含其自己的参数（权重和偏置），这些参数会随着训练过程逐渐优化。</p><p>通过 <code>net.parameters()</code>，优化器能够访问和更新这些参数。</p><p><code>lr</code> 是学习率（learning rate）的缩写，表示每次参数更新的步长。在梯度下降过程中，学习率决定了模型的权重如何调整：</p><ul><li><strong>较小的学习率</strong>（如 <code>0.0001</code>）会导致训练速度变慢，但更精确。</li><li><strong>较大的学习率</strong>（如 <code>0.1</code>）会导致训练速度加快，但可能不稳定，甚至无法收敛。</li></ul><p>在这个例子中，学习率设为 <code>0.001</code>，是一个常见的选择。Adam 优化器对学习率相对不那么敏感，它能根据数据的特性自适应地调整每个参数的学习率，所以通常这个值不需要调得太精细。</p><h1 id="实用拓展"><a href="#实用拓展" class="headerlink" title="实用拓展"></a>实用拓展</h1><p>现在我们想要实现这样的功能：<br>由用户绘制一个数字，利用刚刚训练出的模型，识别这是什么数字。</p><p>这个功能在逻辑上并不困难，但是一些代码细节会稍显繁琐。</p><p>比如，我们采样鼠标左键，但由于不可避免的时间间隔，会画出一些离散的点。但模型是采用连续笔画的图像训练的，这些离散的点无法得到正确的识别结果。因此，需要对这些点插值。但这带来了进一步的问题，有些数字，例如 4，有两个笔画，我们不能在第一笔末尾的点、第二笔开始的点之间插值。简单的解决方案是，设置一个时间阈值。</p><p>再比如，笔画的粗细可能会对识别结果有影响。当然，这可以说是模型本身的问题，但如果你不想再死磕这个模型，可以简单地调整绘画窗口中笔画的粗细。</p><p>下面放出代码。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># handwrite.py</span></span><br><span class="line"><span class="comment"># 这份代码用于训练模型</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> torchvision.datasets <span class="keyword">import</span> MNIST</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(torch.nn.Module):</span><br><span class="line">    <span class="comment"># 构造函数，self 类似于 C++ 中的 this</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 多少层、每层多少节点可以调</span></span><br><span class="line">        self.fc1 = torch.nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">64</span>)</span><br><span class="line">        self.fc2 = torch.nn.Linear(<span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">        self.fc3 = torch.nn.Linear(<span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">        self.fc4 = torch.nn.Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):  <span class="comment"># 前向传播</span></span><br><span class="line">        x = torch.nn.functional.relu(self.fc1(x))</span><br><span class="line">        x = torch.nn.functional.relu(self.fc2(x))</span><br><span class="line">        x = torch.nn.functional.relu(self.fc3(x))</span><br><span class="line">        x = torch.nn.functional.log_softmax(self.fc4(x), dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data_loader</span>(<span class="params">is_train</span>):</span><br><span class="line">    <span class="comment"># 可以把这个 tensor 简单理解为一个多维数组</span></span><br><span class="line">    to_tensor = transforms.Compose([transforms.ToTensor()])</span><br><span class="line">    data_set = MNIST(<span class="string">&quot;&quot;</span>, is_train, transform=to_tensor, download=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> DataLoader(data_set, batch_size=<span class="number">15</span>, shuffle=<span class="literal">True</span>) <span class="comment"># 一个批次包含 15 张图片，数据打乱</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate</span>(<span class="params">test_data, net</span>):</span><br><span class="line">    n_correct = <span class="number">0</span></span><br><span class="line">    n_total = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 验证或测试模型时，不需要计算梯度，只关心模型的预测结果。因此关闭梯度计算</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> (x, y) <span class="keyword">in</span> test_data:</span><br><span class="line">            outputs = net.forward(x.view(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>))</span><br><span class="line">            <span class="keyword">for</span> i, output <span class="keyword">in</span> <span class="built_in">enumerate</span>(outputs):</span><br><span class="line">                <span class="keyword">if</span> torch.argmax(output) == y[i]: <span class="comment"># argmax 计算一个数列中最大值的序号</span></span><br><span class="line">                    n_correct += <span class="number">1</span></span><br><span class="line">                n_total += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n_correct / n_total</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 导入训练集和测试集</span></span><br><span class="line">    train_data = get_data_loader(is_train=<span class="literal">True</span>)</span><br><span class="line">    test_data = get_data_loader(is_train=<span class="literal">False</span>)</span><br><span class="line">    net = Net()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始网络的正确率</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;initial accuracy:&quot;</span>, evaluate(test_data, net))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以下接近于固定写法</span></span><br><span class="line"></span><br><span class="line">    optimizer = torch.optim.Adam(net.parameters(), lr=<span class="number">0.001</span>)</span><br><span class="line">    <span class="comment"># 有时需在一个数据集上反复训练神经网络，提高数据集的利用率，每一个轮次就是一个 epoch</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> (x, y) <span class="keyword">in</span> train_data:</span><br><span class="line">            net.zero_grad()  <span class="comment"># 初始化</span></span><br><span class="line">            output = net.forward(x.view(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>))  <span class="comment"># 正向传播</span></span><br><span class="line">            <span class="comment"># nll_loss 对数损失函数，是为了匹配前面 log_softmax 中的对数运算</span></span><br><span class="line">            loss = torch.nn.functional.nll_loss(output, y)  <span class="comment"># 计算差值</span></span><br><span class="line">            loss.backward()    <span class="comment"># 反向误差传播</span></span><br><span class="line">            optimizer.step()   <span class="comment"># 优化网络参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;epoch&quot;</span>, epoch, <span class="string">&quot;accuracy:&quot;</span>, evaluate(test_data, net))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (n, (x, _)) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_data):</span><br><span class="line">        <span class="keyword">if</span> n &gt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        predict = torch.argmax(net.forward(x[<span class="number">0</span>].view(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>)))</span><br><span class="line">        plt.figure(n)</span><br><span class="line">        plt.imshow(x[<span class="number">0</span>].view(<span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line">        plt.title(<span class="string">&quot;prediction: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(predict)))</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练结束后保存模型</span></span><br><span class="line">    torch.save(net.state_dict(), <span class="string">&#x27;handwrite_model.pth&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;模型已保存为 handwrite_model.pth&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># handwriteWork.py</span></span><br><span class="line"><span class="comment"># 这份代码实现了窗口功能</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageOps</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(torch.nn.Module):</span><br><span class="line">    <span class="comment"># 构造函数，self 类似于 C++ 中的 this</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 多少层、每层多少节点可以调</span></span><br><span class="line">        self.fc1 = torch.nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">64</span>)</span><br><span class="line">        self.fc2 = torch.nn.Linear(<span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">        self.fc3 = torch.nn.Linear(<span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">        self.fc4 = torch.nn.Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):  <span class="comment"># 前向传播</span></span><br><span class="line">        x = torch.nn.functional.relu(self.fc1(x))</span><br><span class="line">        x = torch.nn.functional.relu(self.fc2(x))</span><br><span class="line">        x = torch.nn.functional.relu(self.fc3(x))</span><br><span class="line">        x = torch.nn.functional.log_softmax(self.fc4(x), dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手写数字绘制类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HandwrittenDigitApp</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model</span>):</span><br><span class="line">        self.model = model</span><br><span class="line">        self.root = Tk()</span><br><span class="line">        self.canvas = Canvas(self.root, width=<span class="number">280</span>, height=<span class="number">280</span>, bg=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">        self.canvas.pack()</span><br><span class="line">        self.canvas.bind(<span class="string">&quot;&lt;B1-Motion&gt;&quot;</span>, self.paint)  <span class="comment"># 鼠标左键按下时绘图</span></span><br><span class="line">        Button(self.root, text=<span class="string">&quot;Predict&quot;</span>, command=self.predict).pack()</span><br><span class="line">        Button(self.root, text=<span class="string">&quot;Clear&quot;</span>, command=self.clear_canvas).pack()  <span class="comment"># 清空画布</span></span><br><span class="line">        self.last_x, self.last_y = <span class="literal">None</span>, <span class="literal">None</span>  <span class="comment"># 上一次绘制的坐标</span></span><br><span class="line">        self.last_time = <span class="literal">None</span>  <span class="comment"># 上一次鼠标移动的时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paint</span>(<span class="params">self, event</span>):</span><br><span class="line">        x, y = event.x, event.y</span><br><span class="line">        current_time = time.time()  <span class="comment"># 获取当前时间戳</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.last_x <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> self.last_y <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            time_interval = current_time - self.last_time  <span class="comment"># 计算时间间隔</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> time_interval &lt; <span class="number">0.3</span>:  <span class="comment"># 如果时间间隔小于 0.5 秒，执行插值</span></span><br><span class="line">                <span class="comment"># 插值绘制</span></span><br><span class="line">                self.interpolate_line(self.last_x, self.last_y, x, y)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 绘制当前点</span></span><br><span class="line">        self.canvas.create_oval(x, y, x+<span class="number">6</span>, y+<span class="number">6</span>, fill=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新上一次坐标和时间</span></span><br><span class="line">        self.last_x, self.last_y = x, y</span><br><span class="line">        self.last_time = current_time</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">interpolate_line</span>(<span class="params">self, x1, y1, x2, y2</span>):</span><br><span class="line">        <span class="comment"># 插值算法，计算两点间的插值，连接两点</span></span><br><span class="line">        distance = <span class="built_in">max</span>(<span class="built_in">abs</span>(x2 - x1), <span class="built_in">abs</span>(y2 - y1))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, distance):</span><br><span class="line">            xi = x1 + (x2 - x1) * i / distance</span><br><span class="line">            yi = y1 + (y2 - y1) * i / distance</span><br><span class="line">            self.canvas.create_oval(xi, yi, xi+<span class="number">6</span>, yi+<span class="number">6</span>, fill=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear_canvas</span>(<span class="params">self</span>):</span><br><span class="line">        self.canvas.delete(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">        self.last_x, self.last_y = <span class="literal">None</span>, <span class="literal">None</span>  <span class="comment"># 重置坐标</span></span><br><span class="line">        self.last_time = <span class="literal">None</span>  <span class="comment"># 重置时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 将画布内容转换为图像</span></span><br><span class="line">        self.canvas.postscript(file=<span class="string">&quot;digit.ps&quot;</span>)</span><br><span class="line">        img = Image.<span class="built_in">open</span>(<span class="string">&quot;digit.ps&quot;</span>).convert(<span class="string">&quot;L&quot;</span>)  <span class="comment"># 将 PS 文件转换为灰度图像</span></span><br><span class="line">        img.save(<span class="string">&quot;digit.png&quot;</span>)  <span class="comment"># 保存为 PNG 格式</span></span><br><span class="line">    </span><br><span class="line">        img = img.resize((<span class="number">28</span>, <span class="number">28</span>))  <span class="comment"># 缩放为 28x28</span></span><br><span class="line">        img = ImageOps.invert(img)  <span class="comment"># 反转颜色，使手写字为黑色</span></span><br><span class="line">        img_tensor = torch.tensor(np.array(img)).<span class="built_in">float</span>().view(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>)  <span class="comment"># 转为张量</span></span><br><span class="line">        output = self.model(img_tensor)  <span class="comment"># 使用模型预测</span></span><br><span class="line">        prediction = torch.argmax(output)  <span class="comment"># 获取预测结果</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Predicted digit:&quot;</span>, prediction.item())</span><br><span class="line">        self.show_prediction(prediction.item())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_prediction</span>(<span class="params">self, prediction</span>):</span><br><span class="line">        <span class="comment"># 显示预测结果</span></span><br><span class="line">        result_window = Toplevel(self.root)</span><br><span class="line">        result_window.title(<span class="string">&quot;Prediction&quot;</span>)</span><br><span class="line">        Label(result_window, text=<span class="string">f&quot;Predicted digit: <span class="subst">&#123;prediction&#125;</span>&quot;</span>, font=(<span class="string">&quot;Helvetica&quot;</span>, <span class="number">24</span>)).pack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.root.mainloop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练好的模型加载和应用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 加载训练好的模型</span></span><br><span class="line">    net = Net()</span><br><span class="line">    net.load_state_dict(torch.load(<span class="string">&#x27;handwrite_model.pth&#x27;</span>, weights_only=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动手写绘制应用</span></span><br><span class="line">    app = HandwrittenDigitApp(net)</span><br><span class="line">    app.run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h1&gt;&lt;p&gt;原理部分，移步之前的文章 &lt;a href=&quot;https://loveofpeach.github.io/posts/6f3f8819.htm</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="神经网络" scheme="https://dropsong.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>差分隐私</title>
    <link href="https://dropsong.github.io/posts/b192ad14.html"/>
    <id>https://dropsong.github.io/posts/b192ad14.html</id>
    <published>2024-08-21T07:18:00.000Z</published>
    <updated>2024-08-21T11:06:05.111Z</updated>
    
    <content type="html"><![CDATA[<p>参考： <a href="https://programming-dp.com/cn/cover.html">https://programming-dp.com/cn/cover.html</a></p><p>下面的 pdf 只是该链接内容的备份。</p><div class="row"><iframe src="https://drive.google.com/file/d/1P8igo5soJ2e0rkt8RTkpfvZQE9_RxDC3/preview" style="width:100%; height:550px"></iframe></div><p>下面给出我的总结：</p><div class="row"><iframe src="https://drive.google.com/file/d/1x2oFa-AhAugSnRbmYkmxTVSOcXFTYrYy/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录：</strong><br>概述  1<br>去标识、k-匿名性  5<br>差分隐私  10<br>敏感度  20<br>近似差分隐私  23<br>局部敏感度  33<br>差分隐私变体  36</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考： &lt;a href=&quot;https://programming-dp.com/cn/cover.html&quot;&gt;https://programming-dp.com/cn/cover.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面的 pdf 只是该链接内容的备份。&lt;/p&gt;


	&lt;di</summary>
      
    
    
    
    <category term="算法" scheme="https://dropsong.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="差分隐私" scheme="https://dropsong.github.io/tags/%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>量子计算笔记</title>
    <link href="https://dropsong.github.io/posts/fc58f357.html"/>
    <id>https://dropsong.github.io/posts/fc58f357.html</id>
    <published>2024-08-13T08:07:27.000Z</published>
    <updated>2024-09-01T15:00:18.791Z</updated>
    
    <content type="html"><![CDATA[<p>省流：只学了前两章，不学了。</p><h1 id="教材-PDF"><a href="#教材-PDF" class="headerlink" title="教材 PDF"></a>教材 PDF</h1><p>使用的教材是 Quantum Computation and Quantum Information (10th Anniversary Edition) .</p><p>主要笔记都画在教材的 pdf 上了（很大）<del>，等什么时候学完了那个 pdf (?) 再把它放出来</del>。</p><div class="row"><iframe src="https://drive.google.com/file/d/15OCxHsglHicS35auOV4S9op1qMH1mUKU/preview" style="width:100%; height:550px"></iframe></div><p>这个 pdf 是有目录的，可以下载下来查看。</p><h1 id="批注"><a href="#批注" class="headerlink" title="批注"></a>批注</h1><p>下面是一些写不到 pdf 上的批注（『这里空白太小了我写不下』）。可能会比较杂乱。</p><h2 id="希尔伯特空间"><a href="#希尔伯特空间" class="headerlink" title="希尔伯特空间"></a>希尔伯特空间</h2><p>快速了解（若链接挂了可去 archive.ph 查找）：</p><p><a href="https://ccjou.wordpress.com/2009/08/18/%E5%BE%9E%E5%B9%BE%E4%BD%95%E5%90%91%E9%87%8F%E7%A9%BA%E9%96%93%E5%88%B0%E5%87%BD%E6%95%B8%E7%A9%BA%E9%96%93/">https://ccjou.wordpress.com/2009/08/18/%E5%BE%9E%E5%B9%BE%E4%BD%95%E5%90%91%E9%87%8F%E7%A9%BA%E9%96%93%E5%88%B0%E5%87%BD%E6%95%B8%E7%A9%BA%E9%96%93/</a></p><p>在此感谢作者。</p><h2 id="“伴随”概念澄清"><a href="#“伴随”概念澄清" class="headerlink" title="“伴随”概念澄清"></a>“伴随”概念澄清</h2><p>在本科教授的线性代数、量子计算涉及的数学这两者中，都有“伴随”的概念，但它们实际上是不同的数学概念。</p><p>1） <strong>矩阵的代数余子式和转置定义的“伴随矩阵”</strong></p><p>在经典线性代数中，<a href="https://zh.wikipedia.org/wiki/%E4%BC%B4%E9%9A%8F%E7%9F%A9%E9%98%B5">伴随矩阵（adjugate matrix 或 classical adjoint）</a>指的是矩阵的代数余子式矩阵的转置。</p><p>伴随矩阵在计算矩阵的逆时起到重要作用：</p><script type="math/tex; mode=display">A^{-1} = \frac{1}{\det(A)} \text{adj}(A)</script><p>2） <strong>在量子力学或泛函分析中的“伴随”或“厄米共轭”</strong></p><p>在量子力学和泛函分析中，<a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E5%B0%94%E7%B1%B3%E7%89%B9%E4%BC%B4%E9%9A%8F">“伴随”（adjoint）</a>通常指的是算子 $ A $ 的 Hermitian adjoint，记作 $ A^\dagger $。</p><p>另外：经典线性代数中的“伴随”，并非是泛函分析中的“伴随”在实数空间上的特殊情况。</p><h2 id="adjoint-和共轭转置"><a href="#adjoint-和共轭转置" class="headerlink" title="adjoint 和共轭转置"></a>adjoint 和共轭转置</h2><p>adjoint 的定义在 pdf 第 69 页。</p><p>下面推导它们等价。</p><p>由对偶向量的计算方法：</p><script type="math/tex; mode=display">\langle v | A | w \rangle = (\overline{v})^T A w</script><p>由 adjoint 的定义，将 2.32 式子中的 $A^\dagger |v \rangle$ 整体视作一个向量：</p><script type="math/tex; mode=display">\langle v | A | w \rangle = \langle A^\dagger v | w \rangle</script><p>右边的内积可以表示为：</p><script type="math/tex; mode=display">\langle A^\dagger v | w \rangle = (\overline{A^\dagger v})^T w</script><p>等式要求两边相等，所以：</p><script type="math/tex; mode=display">(\overline{v})^T A w = (\overline{A^\dagger v})^T w</script><p>由于这对任意的 $ w $ 都成立，必然有：</p><script type="math/tex; mode=display">(\overline{v})^T A = (\overline{A^\dagger v})^T</script><p>将其进一步展开，我们有（不难验证 $\overline{A\alpha}=\overline{A}\overline{\alpha}$ ，其中 A 是矩阵，$\alpha$ 是向量）：</p><script type="math/tex; mode=display">(\overline{v})^T A = (\overline{v})^T (\overline{A^\dagger})^T</script><p>因此：</p><script type="math/tex; mode=display">A = (\overline{A^\dagger})^T</script><p>即：</p><script type="math/tex; mode=display">A^\dagger = (\overline{A})^T</script><h2 id="酉矩阵是方阵"><a href="#酉矩阵是方阵" class="headerlink" title="酉矩阵是方阵"></a>酉矩阵是方阵</h2><p>酉矩阵一定是方阵。</p><p>酉矩阵 $ U $ 满足 $ U^\dagger U = U U^\dagger = I $，其中 $ U^\dagger $ 是 $ U $ 的共轭转置矩阵，$ I $ 是单位矩阵。</p><p>如果 $ U $ 是 $ m \times n $ 的矩阵，则 $ U^\dagger $ 是 $ n \times m $ 的矩阵。那么，$ U^\dagger U $ 是一个 $ n \times n $ 的方阵，而 $ UU^\dagger $ 是一个 $ m \times m $ 的方阵。不满足酉矩阵的定义。</p><h2 id="对标准正交基进行酉变换"><a href="#对标准正交基进行酉变换" class="headerlink" title="对标准正交基进行酉变换"></a>对标准正交基进行酉变换</h2><p>对一组标准正交基进行酉变换，得到的新基仍然是标准正交基。</p><p>在一个希尔伯特空间中，$\{ |e_i\rangle \}$ 是标准正交基，意味着对于任意的 $i$ 和 $j$，有：</p><script type="math/tex; mode=display">\langle e_i | e_j \rangle = \delta_{ij}</script><p>设 $\{ |e_i\rangle \}$ 是原来的标准正交基，在经过酉变换 $U$ 后，得到的新基为 $\{ |e’_i\rangle \}$，其中 $ |e’_i\rangle = U |e_i\rangle $。我们需要证明这组新基依然是标准正交基。</p><p>酉变换保持内积（pdf 71页）：</p><script type="math/tex; mode=display">\langle e'_i | e'_j \rangle = \langle U e_i | U e_j \rangle = \langle e_i | e_j \rangle</script><p>所以：</p><script type="math/tex; mode=display">\langle e'_i | e'_j \rangle = \delta_{ij}</script><p>因此新基 $\{ |e’_i\rangle \}$ 也是一组标准正交基。</p><h2 id="酉阵的外积表示"><a href="#酉阵的外积表示" class="headerlink" title="酉阵的外积表示"></a>酉阵的外积表示</h2><p>pdf 第 71 页上方。</p><script type="math/tex; mode=display">\begin{aligned}U & = \sum_{ij} \langle w_j|U|v_i \rangle|w_j\rangle \langle v_i| \\  & = \sum_{ij} \langle w_j|w_i \rangle|w_j\rangle \langle v_i| \\  & = \sum_{ij} \delta_{ij} |w_j \rangle \langle v_i| \\  & = \sum_{i} |w_j \rangle \langle v_i| \\\end{aligned}</script><p>注意，用到了 pdf 上的一个条件，翻到对应的页数即可找到。</p><h2 id="谱分解"><a href="#谱分解" class="headerlink" title="谱分解"></a>谱分解</h2><p><strong>相似对角化</strong>是指，对于一个方阵 $ A $，如果存在一个可逆矩阵 $ P $ 和一个对角矩阵 $ D $，使得 $ A = PDP^{-1} $，那么矩阵 $ A $ 就是可相似对角化的。这里的对角矩阵 $ D $ 的对角元素就是 $ A $ 的特征值。</p><p><strong>特征分解（Eigendecomposition）</strong>，又称<strong>谱分解（Spectral decomposition）</strong> 是将矩阵分解为由其特征值和特征向量表示的矩阵之积的方法。</p><p>谱分解用于描述正交对角化。在谱分解中，特别是在对称矩阵（实数域上）或酉矩阵（复数域上）的情况下，一个矩阵 $ A $ 可以被分解为 $ A = U \Lambda U^ \dagger $，其中 $ U $ 是一个正交矩阵或酉矩阵，$ \Lambda $ 是一个对角矩阵，且对角元素是 $ A $ 的特征值。</p><p><strong>谱分解是一种特定的相似对角化，适用于特定类型的矩阵。</strong></p><p>正交阵是酉阵的特殊情况。</p><p>谱分解通常表示为矩阵的乘法形式，如 $ M = U \Lambda U^\dagger $。然而，<strong>谱分解可以进一步表达为每个特征值与其对应的特征向量的外积之和。</strong></p><p>具体来说，对于一个 $ n \times n $ 的 Normal 矩阵 $ M $，它的谱分解可以写成：</p><script type="math/tex; mode=display">M = \sum_{i=1}^n \lambda_i \mathbf{v}_i \mathbf{v}_i^\dagger</script><p>这里：</p><ul><li>$ \lambda_i $ 是 $ M $ 的第 $ i $ 个特征值。</li><li>$ \mathbf{v}_i $ 是与特征值 $ \lambda_i $ 对应的特征向量。</li><li>$ \mathbf{v}_i^\dagger $ 是 $ \mathbf{v}_i $ 的共轭转置。</li></ul><p>以 $ M = \begin{pmatrix} 2 &amp; 1 \\ 1 &amp; 2 \end{pmatrix} $ 为例，其特征值和特征向量如下：</p><ul><li>$ \lambda_1 = 3 $， $ \mathbf{v}_1 = \frac{1}{\sqrt{2}} \begin{pmatrix} 1 \\ 1 \end{pmatrix} $</li><li>$ \lambda_2 = 1 $， $ \mathbf{v}_2 = \frac{1}{\sqrt{2}} \begin{pmatrix} 1 \\ -1 \end{pmatrix} $</li></ul><p>它的谱分解可以写成：</p><script type="math/tex; mode=display">M = 3 \cdot \mathbf{v}_1 \mathbf{v}_1^\dagger + 1 \cdot \mathbf{v}_2 \mathbf{v}_2^\dagger</script><p>这种和式形式有助于理解矩阵在特征向量空间中的作用。</p><p><strong>为什么之前的乘积形式可以改写为和的形式？</strong></p><p>将 $ U $ 和 $ U^\dagger $ 分块：</p><script type="math/tex; mode=display">U = \begin{pmatrix} \mathbf{v}_1 & \mathbf{v}_2 & \cdots & \mathbf{v}_n \end{pmatrix}</script><script type="math/tex; mode=display">U^\dagger = \begin{pmatrix} \mathbf{v}_1^\dagger \\ \mathbf{v}_2^\dagger \\ \vdots \\ \mathbf{v}_n^\dagger \end{pmatrix}</script><p>其中，$ U $ 的列向量 $ \mathbf{v}_i $ 形成一个标准正交基。</p><p>于是：</p><script type="math/tex; mode=display">M = \begin{pmatrix} \mathbf{v}_1 & \mathbf{v}_2 & \cdots & \mathbf{v}_n \end{pmatrix} \begin{pmatrix} \lambda_1 & 0 & \cdots & 0 \\ 0 & \lambda_2 & \cdots & 0 \\ \vdots & \vdots & \ddots & \vdots \\ 0 & 0 & \cdots & \lambda_n \end{pmatrix} \begin{pmatrix} \mathbf{v}_1^\dagger \\ \mathbf{v}_2^\dagger \\ \vdots \\ \mathbf{v}_n^\dagger \end{pmatrix}</script><p>由矩阵乘法：</p><script type="math/tex; mode=display">M = \lambda_1 \mathbf{v}_1 \mathbf{v}_1^\dagger + \lambda_2 \mathbf{v}_2 \mathbf{v}_2^\dagger + \cdots + \lambda_n \mathbf{v}_n \mathbf{v}_n^\dagger</script><p>简写为：</p><script type="math/tex; mode=display">M = \sum_{i=1}^n \lambda_i \mathbf{v}_i \mathbf{v}_i^\dagger</script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;省流：只学了前两章，不学了。&lt;/p&gt;
&lt;h1 id=&quot;教材-PDF&quot;&gt;&lt;a href=&quot;#教材-PDF&quot; class=&quot;headerlink&quot; title=&quot;教材 PDF&quot;&gt;&lt;/a&gt;教材 PDF&lt;/h1&gt;&lt;p&gt;使用的教材是 Quantum Computation and Q</summary>
      
    
    
    
    <category term="数学" scheme="https://dropsong.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="线性代数" scheme="https://dropsong.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
    <category term="量子计算" scheme="https://dropsong.github.io/tags/%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>概率论与数理统计笔记</title>
    <link href="https://dropsong.github.io/posts/9e907e48.html"/>
    <id>https://dropsong.github.io/posts/9e907e48.html</id>
    <published>2024-07-29T16:37:26.000Z</published>
    <updated>2024-07-30T03:19:48.626Z</updated>
    
    <content type="html"><![CDATA[<p>欠的债，迟早是要还的。</p><h1 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h1><div class="row"><iframe src="https://drive.google.com/file/d/1AEBHpJU_MAPPvbQ-g--lK0Q5CrzoxBvd/preview" style="width:100%; height:550px"></iframe></div><blockquote><p>目录：</p><p>1 概率论的基本概念<br>3 概率的概念、古典概型和几何概型<br>6 条件概率、乘法定理、全概率公式、贝叶斯公式、事件的独立性<br>12 离散型随机变量及其分布律<br>15 随机变量的分布函数<br>16 连续型随机变量及概率密度<br>22 一维随机变量函数的分布<br>25 二维随机变量的相关概念<br>28 边缘分布和条件分布<br>31 相互独立的随机变量<br>34 多维随机变量函数的分布<br>41 数学期望、方差<br>52 协方差、相关系数<br>54 二维正态分布的性质<br>56 大数定律、中心极限定理<br>59 统计量的数字特征<br>62 抽样分布<br>68 点估计的方法<br>74 估计量的评选标准</p></blockquote><h1 id="区间估计和假设检验"><a href="#区间估计和假设检验" class="headerlink" title="区间估计和假设检验"></a>区间估计和假设检验</h1><p>未完待续。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;欠的债，迟早是要还的。&lt;/p&gt;
&lt;h1 id=&quot;基础部分&quot;&gt;&lt;a href=&quot;#基础部分&quot; class=&quot;headerlink&quot; title=&quot;基础部分&quot;&gt;&lt;/a&gt;基础部分&lt;/h1&gt;

	&lt;div class=&quot;row&quot;&gt;
		&lt;iframe src=&quot;https://dr</summary>
      
    
    
    
    <category term="数学" scheme="https://dropsong.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="概率论" scheme="https://dropsong.github.io/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
    <category term="数理统计" scheme="https://dropsong.github.io/tags/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>人工智能导论</title>
    <link href="https://dropsong.github.io/posts/6f3f8819.html"/>
    <id>https://dropsong.github.io/posts/6f3f8819.html</id>
    <published>2024-07-03T13:16:36.000Z</published>
    <updated>2024-09-01T14:51:36.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><div class="table-container"><table><thead><tr><th style="text-align:left">人工智能程序</th><th style="text-align:left">通常计算机程序</th></tr></thead><tbody><tr><td style="text-align:left">主要是<strong>符号</strong>处理</td><td style="text-align:left">主要是<strong>数字</strong>处理</td></tr><tr><td style="text-align:left"><strong>启发式搜索</strong></td><td style="text-align:left">依靠<strong>算法</strong></td></tr><tr><td style="text-align:left">控制结构和知识域<strong>相分</strong></td><td style="text-align:left">信息和控制联结在<strong>一起</strong></td></tr><tr><td style="text-align:left">易于修改、更新和改变</td><td style="text-align:left">难以修改</td></tr><tr><td style="text-align:left"><strong>允许不正确</strong>的答案</td><td style="text-align:left">要求<strong>正确的</strong>回答</td></tr><tr><td style="text-align:left">AI程序：<strong>干什么</strong></td><td style="text-align:left">传统程序：<strong>干些什么及如何干</strong></td></tr></tbody></table></div><p>AI 概览：</p><p><img src="https://s2.loli.net/2024/07/03/bV5jKDqWYnBHiZS.png" alt="80-1.png"></p><p>AI、机器学习、深度学习的关系：</p><p><img src="https://bu.dusays.com/2024/07/03/668542c0e08db.png" alt="80-2.png"></p><p><img src="https://s2.loli.net/2024/07/03/y4JTQjUlhdPKftY.png" alt="80-3.png"></p><p>三大学派：符号主义、连接主义、行为主义。</p><p><strong>符号主义（逻辑主义、心理学派、计算机学派）</strong></p><ul><li>原理：物理符号系统假设和有限合理性假设</li><li>起源：源于数理逻辑</li><li>基本思想<ul><li>人的认知基元是符号，智能和知识可用符号表示，认知过程即符号操作过程，擅长抽象思维。</li><li>人是一个物理符号系统，计算机也是一个物理符号系统，因此，能用计算机来模拟人的智能行为。</li><li>知识是信息的一种形式，是构成智能的基础。人工智能的核心问题是知识表示、知识推理。</li><li><img src="https://s2.loli.net/2024/07/03/g6Jr8otqR4DnTiE.png" alt="80-4.png"></li><li>启发式程序、专家系统、知识工程</li></ul></li></ul><p><strong>连接主义（生理学派）</strong></p><ul><li>原理：神经网络及神经网络间的连接机制和学习算法</li><li>起源：源于仿生学，特别是人脑模型的研究</li><li>基本思想<ul><li>认识的基本元素是神经元，认识过程是大量神经元的并行活动，擅长形象思维。</li><li>人脑不同于电脑，并提出连接主义的大脑工作模式，用于取代符号操作的电脑工作模式。</li><li><img src="https://s2.loli.net/2024/07/03/ZuGbtIgvWSicOxP.png" alt="80-5.png"></li></ul></li></ul><p><strong>行为主义（进化主义、控制论学派）</strong></p><ul><li>原理：控制论及感知-动作型控制系统</li><li>起源：源于控制论</li><li>基本思想<ul><li>智能取决于感知和行动，提出智能行为的“感知-动作”模式。</li><li>智能不需要知识、表示和推理；人工智能可以像人类智能一样逐步进化；智能行为只能在现实世界中与周围环境进行交互作用而表现出来。</li><li><img src="https://s2.loli.net/2024/07/03/Tmw8Loh2BAtVkRx.png" alt="80-6.png"></li></ul></li></ul><p><strong>三大学派比较</strong>：</p><p><img src="https://s2.loli.net/2024/07/03/ZOA5g7RtHN6QEM4.png" alt="80-7.png"></p><h1 id="搜索技术"><a href="#搜索技术" class="headerlink" title="搜索技术"></a>搜索技术</h1><h2 id="搜索问题"><a href="#搜索问题" class="headerlink" title="搜索问题"></a>搜索问题</h2><p>搜索方式的分类：</p><ul><li>回溯搜索</li><li>盲目搜索（深度优先、宽度优先）</li><li>启发式搜索（<code>A</code>算法→<code>A*</code>算法→<code>A*</code>算法的改进）</li></ul><p>传教士和野人问题：<br>问题可以转化为<strong>状态空间的搜索问题</strong>：</p><ul><li>用在河的左岸的传教士人数、野人人数和船的情况表示问题</li><li>初始状态用三元组表示为（3，3，1）</li><li>结束状态为（0，0，0）</li><li>中间状态为（2，2，0）、（3，2，1）、（3，0，0）…… 等，每个三元组对应了三维空间上的一个点</li></ul><p><strong>表示方法 — 状态空间表示法</strong></p><ul><li><strong>状态</strong>用来表示系统状态,事实等叙述型知识的一组变量或数组<br>$Q = [q_1, q_2, …, q_n]^t$</li><li><strong>操作</strong>是用来表示引起状态变化的过程型知识的一组关系或函数<br>$F:\{f_1, f_2, …, f_m\}$</li><li><strong>状态空间(State Space)</strong> 是利用状态变量和操作符号，表示系统或问题的有关知识的符号体系<br>四元组 $(S, O, S_0, G):$<br>$S$ 状态集合<br>$O$ 操作算子集合<br>$S_0$ 初始状态，$S_0 \subset S$<br>$G$ 目的状态，$G \subset S$，（可是若干具体状态，也可是满足某些性质的路径信息描述）<br><strong>从S0结点到G结点的路径被称为求解路径。</strong></li><li><strong>状态空间的一个解</strong>是一有限操作算子序列，它使初始状态转为目标状态<br>$S_0 \xrightarrow{O_1} S_1 \xrightarrow{O_2} S_2 \xrightarrow{O_3} \cdots \xrightarrow{O_k} G$<br>其中 O1，…，Ok 即为状态空间的一个解（解往往不是唯一的）</li></ul><p>如何在一个较大的问题空间中，只搜索较小的范围，就找到问题的解呢？</p><p>对于大空间问题，搜索策略要考虑组合爆炸的问题。</p><p><strong>盲目搜索</strong>，未利用问题的知识，采用固定的方式生成状态的方法。</p><p><strong>启发式搜索</strong>，利用问题的知识，缩小问题的搜索范围，选择那些最有可能在（最优）解路径上的状态优先搜索，以尽快地找到问题的（最优）解。</p><h2 id="回溯策略"><a href="#回溯策略" class="headerlink" title="回溯策略"></a>回溯策略</h2><p><strong>考虑一个经典问题：N 皇后。</strong></p><p>我们可以用 dfs 的方法寻找解，但是效率不高。有什么改进的思路吗？</p><ul><li>回溯有时不是上一步造成的，有可能是更早的那一步造成的——多步回溯</li><li>找到回溯的原因，在开始就避免回溯——需要引入一些相关信息</li><li>当然相关信息的引入不应造成搜索负担的巨大加重，否则得不偿失</li></ul><p><img src="https://s2.loli.net/2024/07/04/oNBmg2RPncKG9Xz.png" alt="80-8.png"></p><p>如此一来，相比于固定排序的搜索树（没有引入知识），动态排序的搜索树（引入知识）的回溯次数大大减少。</p><p>回溯搜索算法改进（？）：</p><ul><li>推广的回溯算法可应用于一般问题的求解，但这两个算法只描述了回溯一层的情况，即第 n 层递归调用失败，则控制退回到（n－1）层</li><li>深层搜索失败往往在于浅层原因，因此也可以利用启发信息，分析失败的原因，再回溯到合适的层次上，即<strong>多层回溯策略</strong>，目前已有一些系统使用了这种策略</li></ul><h2 id="图搜索策略"><a href="#图搜索策略" class="headerlink" title="图搜索策略"></a>图搜索策略</h2><p>问题的引出：</p><ul><li>回溯搜索：只保留从初始状态到当前状态的一条路径<ul><li>节省空间，但已搜索部分不能被以后使用</li></ul></li><li>图搜索：保留所有已经搜索过的路径<ul><li>搜索过的路径被保留</li><li>利用相关知识，可以进行启发式搜索</li></ul></li><li>图搜索策略是实现从一个隐含图中生成出一部分确实含有一个目标节点的显式表示子图的搜索过程</li></ul><p>略：一般的图搜索算法、dfs、bfs</p><h3 id="启发式图搜索"><a href="#启发式图搜索" class="headerlink" title="启发式图搜索"></a>启发式图搜索</h3><p>利用知识来引导搜索，减少搜索范围，降低问题复杂度。</p><p>启发信息的强度</p><ul><li>强：降低搜索量，但可能找不到最优解</li><li>弱：工作量较大，可能退化为盲目搜索，但找到最优解的概率相对较大</li></ul><h3 id="A-算法"><a href="#A-算法" class="headerlink" title="A* 算法"></a>A* 算法</h3><p>算法流程（如果链接挂了可在 archive.ph 中查看）：</p><p><a href="https://paul.pub/a-star-algorithm/">https://paul.pub/a-star-algorithm/</a></p><p>很多介绍 A* 的文章只是讲了 how ，而没有讲 why ，少数讲 why 的博主恐怕在一些细节上也和自己和解了。为此，找一下原始的论文是必要的：</p><div class="row"><iframe src="https://drive.google.com/file/d/1aRpKPbJ1qMwoRRWjSso47WKvTp5PKScE/preview" style="width:100%; height:550px"></iframe></div><p>很好论文，解决了我多年的疑惑：</p><ul><li>如果 h(n) 始终小于等于节点 n 到终点的代价，则 A* 算法保证一定能够找到最短路径。为什么？</li><li>另外一个小细节：f(n) 是单调不减的，这意味着一旦节点从优先队列中被移出并处理，它的最优路径已经被找到，因为任何从此节点出发的新路径不会比已经找到的路径更优。</li></ul><p>练习：</p><ul><li><a href="https://www.luogu.com.cn/problem/P5507">P5507 机关</a>：A*</li><li><a href="https://www.luogu.com.cn/problem/P2324">SCOI2005 骑士精神</a>：IDA*</li></ul><h2 id="与或图搜索问题"><a href="#与或图搜索问题" class="headerlink" title="与或图搜索问题"></a>与或图搜索问题</h2><div class="row"><iframe src="https://drive.google.com/file/d/1ZC5ytKk3EpBHKfzWS6vl2-mvyWvtw1pZ/preview" style="width:100%; height:550px"></iframe></div><blockquote><p>目录：<br>与或图搜索  2<br>博弈树搜索（MINI-MAX、α-β剪枝）  10<br>蒙特卡洛树搜索  25</p></blockquote><p>一些视频资料：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV1AK411M7BB&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV14Z4y1A7J3&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV1JD4y1Q7mV&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><h1 id="知识表示"><a href="#知识表示" class="headerlink" title="知识表示"></a>知识表示</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>选取知识表示的方法的因素</strong>：</p><ul><li>表示范围是否广泛<ul><li>要求表示内容范围广泛<ul><li>数理逻辑表示是一种广泛的知识表示办法，如果单纯用数字表示，则范围就有限</li></ul></li></ul></li><li>是否适于推理<ul><li>人工智能只能处理适合推理的知识表示<ul><li>数学模型适合推理，普通的数据库只能供浏览检索，但不适合推理</li></ul></li></ul></li><li>是否适于计算机处理<ul><li>计算机只能处理离散的、量化的字节流。用文字表述的知识和连续形式表示的知识（如微分方程）不适合计算机处理</li></ul></li><li>是否有高效的算法<ul><li>考虑到实用的性能，必须有高效的求解算法，知识表示才有意义</li></ul></li><li>能否表示不精确知识<ul><li>自然界的信息具有先天的模糊性和不精确性，能否表示不精确知识也是考虑的重要因素</li><li>许多知识表示方法往往要经过改造，如确定性方法、主观贝叶斯方法等对证据和规则引入了不确定性度量，就是为了表达不精确的知识</li></ul></li><li>能否模块化</li><li>知识和元知识能否用统一的形式表示<ul><li>知识和元知识是属于不同层次的知识，使用统一的表示方法可以使知识处理简单</li></ul></li><li><p>是否加入启发信息</p><ul><li>在已知的前提下，如何最快的推得所需的结论，以及如何才能推得最佳的结论，我们的认识往往是不精确的。因此，往往需要在元知识（控制知识）加入一些控制信息，也就是通常所说的启发信息</li></ul></li><li><p>过程性表示还是说明性表示</p><ul><li>说明性知识表示涉及细节少，抽象程度高，因此可靠性好，修改方便，但执行效率低</li><li>过程性知识表示的优缺点与说明性知识表示相反</li></ul></li><li>表示方法是否自然<ul><li>一般要尽量在表示方法的自然和使用效率之间取得平衡。例如，对于推理来说，PROLOG 比高级语言如 Visual C++ 自然，但显然牺牲了效率</li></ul></li></ul><p>同构与同态：</p><p><img src="https://bu.dusays.com/2024/07/17/6697d113cd9f8.png" alt="80-9.png"></p><p><strong>表示观</strong>是对于“什么是表示”这一基本问题的不同理解和采用的方法论，即指导知识表示的思想观点称为表示观。</p><p>人工智能领域关于知识表示的观点的<strong>争论焦点</strong>是常识的处理、表示与推理的关系等问题。</p><p><strong>认识论表示观</strong>：认为表示是对自然世界的表述，表示自身不显示任何智能行为。其唯一的作用就是携带知识。这意味着表示可以独立于启发式来研究。</p><p><strong>本体论（D.Lenta提出）</strong>：认为表示是对自然世界的一种近似，它规定了看待自然世界的方式。即一个约定的集合。表示只是描述了关心的一部分，逼真是不可能的。本体论主要解决的问题是：</p><ul><li>表示需对世界的某个部分给与特别的注意（聚集），而对世界的另外部分衰减，以求达到有效求解。</li><li>对世界可以采用不同的方式来记述。注重的不是“其语言形式，而是其内容”。此内容不是某些特定领域的特殊的专家知识，而是自然世界中那些具有普通意义的一般知识。</li><li>计算效率无疑是表示的核心问题之一。即有效地知识组织及与领域有关的启发式知识是其提高计算效率的手段。</li><li>推理是表示观中不可缺少的一部分。表示研究应与启发式搜索联系起来。认为不考虑推理的纯粹表示是不存在的。</li></ul><h2 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h2><h3 id="逻辑表示法"><a href="#逻辑表示法" class="headerlink" title="逻辑表示法"></a>逻辑表示法</h3><p>逻辑表示法的例子：</p><p><img src="https://bu.dusays.com/2024/07/21/669cc5b6232ef.png" alt="80-10.png"></p><p>图片示例：</p><p><img src="https://s2.loli.net/2024/07/21/KNMO48VQH3RLUqp.png" alt="80-11.png"></p><h3 id="产生式规则表示法"><a href="#产生式规则表示法" class="headerlink" title="产生式规则表示法"></a>产生式规则表示法</h3><div class="row"><iframe src="https://drive.google.com/file/d/1RgISIhsiBYFPGJIB6gGe1riGEGX0BV5W/preview" style="width:100%; height:550px"></iframe></div><h3 id="语义网络表示法"><a href="#语义网络表示法" class="headerlink" title="语义网络表示法"></a>语义网络表示法</h3><p>语义网络表示法和产生式表示法及谓词逻辑表示法之间有着对应的表示能力。</p><p>表示形式：</p><ul><li>谓词逻辑表示法，Relation（Object1，Object2）</li><li>语义网络表示法为（Object1，Relation，Object2）</li><li>语义网络中连接弧上的语义关系对应于逻辑表示法中的谓词关系</li></ul><p>一些例子：</p><p><img src="https://s2.loli.net/2024/07/21/g8rQ3GCadWH7xj4.png" alt="80-12.png"></p><p>语义网络推理，<strong>相应的推理方法还不完善。</strong> 语义网络的推理过程主要有两种：</p><ul><li>继承</li><li>匹配</li></ul><h3 id="框架表示法"><a href="#框架表示法" class="headerlink" title="框架表示法"></a>框架表示法</h3><p>省流：刻板印象、模板、…</p><p><img src="https://s2.loli.net/2024/07/21/lIEq4viYLdzSuHJ.png" alt="80-13.png"></p><h3 id="脚本表示法"><a href="#脚本表示法" class="headerlink" title="脚本表示法"></a>脚本表示法</h3><p>脚本表示法是框架的特殊形式。</p><p>例子，医院的脚本：</p><blockquote><p><strong>开场条件：</strong></p><ol><li>病人有病。</li><li>病人的病需要找医生诊治。</li><li>病人有钱。</li><li>病人能够去医院。</li></ol><p><strong>角色：</strong> 病人、医生、护士。</p><p><strong>道具：</strong> 医院、挂号室、椅子、桌子、药方、药房、钱、药。</p><p><strong>场景：</strong><br>场景1 进入医院<br>（1）  人走进医院<br>（2）  病人挂号<br>（3）  病人在椅子上坐下等待看病<br>场景2  看病<br>（1）  病人进入医生的办公室<br>（2）  病人向医生所说病状<br>（3）  医生向病人解释病情<br>（4）  医生给病人开药方<br>场景3  交费<br>（1）  病人到交费处<br>（2）  病人递交药方<br>（3）  病人交钱<br>（4）  病人取回药方及收据<br>场景4  取药<br>（1）  病人到药房<br>（2）  病人递交药方<br>（3）  病人取药<br>场景5 离开<br>（1）  病人离开医院</p><p><strong>结果：</strong><br>1．病人看病了，明白了自己的病是怎么回事<br>2．病人花了钱，买了药<br>3．医生付出了劳动<br>4．医院的药品少了</p></blockquote><p>特点：</p><ul><li>比语义网络、框架等呆板</li><li>知识表达范围很窄</li><li>不适用于表达各种知识，但对实现构思好的特定知识非常有效</li></ul><h2 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h2><p>什么是知识图谱？</p><ul><li>知识图谱是 Google 用于增强其搜索引擎功能的知识库（Google 知识图谱，5 亿对象，35 亿事实关系）。</li><li>从学术的角度，<strong>“知识图谱本质上是语义网络（Semantic Network）的知识库”</strong>。</li><li>从实际应用的角度出发，可以简单地把知识图谱理解成<strong>多关系图（Multi-relational Graph）</strong>。<ul><li>多关系图一般包含多种类型的节点和多种类型的边</li><li>节点：概念、实体</li><li>边：关系</li></ul></li></ul><p>知识图谱旨在以结构化的形式描述客观世界中存在的概念、实体及其间的复杂关系。</p><ul><li>概念：对客观事物的概念化表示，如人、动物、组织机构</li><li>实体：客观世界中的具体事务，画家达芬奇、作品蒙娜丽莎</li><li>关系：描述概念、实体之间客观存在的关联</li></ul><p>一些具体表现：</p><ul><li>传统搜索引擎会返回包含用户搜索关键词的页面</li><li>知识图谱会返回<strong>知识卡片（Knowledge card）</strong>，为用户查询或返回答案中所包含的概念或实体提供详细的结构化摘要<br><img src="https://s2.loli.net/2024/07/22/Mo3g2fP75uBQYZy.png" alt="80-14.png"></li></ul><p>知识图谱经历了由人工和群体智慧构建，到面向互联网利用机器学习和信息抽取技术自动获取的过程。</p><p>维基百科是利用群体智能建立的互联网上至今最大的知识资源。</p><p>知识图谱的应用：</p><p><img src="https://s2.loli.net/2024/07/22/QHdFvaNWloMiDT1.png" alt="80-15.png"></p><h1 id="逻辑推理"><a href="#逻辑推理" class="headerlink" title="逻辑推理"></a>逻辑推理</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p><strong>演绎推理：</strong></p><ul><li>从全称判断推出特称判断或单称判断的过程，即从一般到个别的推理</li><li>演绎推理中最常用的形式是<strong>三段论</strong>法（大前提、小前提、结论）</li><li>例如：<ul><li>所有的推理系统都是智能系统——一般的知识</li><li>专家系统是推理系统——个体的判断</li><li>所以，专家系统是智能系统——新判断    </li></ul></li><li>演绎推理没有增加新的知识</li></ul><p><strong>归纳推理：</strong></p><ul><li>从足够多的事例中归纳出一般性结论的推理过程，是一种<strong>从个别到一般的推理过程</strong></li><li>常用的归纳推理有<strong>简单枚举法</strong>和<strong>类比法</strong><ul><li><strong>枚举法归纳推理</strong>是由已观察到的事物都有某属性，而没有观察到相反的事例，从而推出某类事物都有某属性，推理过程为：<ul><li>S1 是 P，S2 是 P，…，Sn 是 P，<br>（S1,S2, …,Sn 是 S 类中的个别事物，在枚举中兼容）<br>  推出 S 都是  P </li></ul></li><li>枚举法归纳推理分<strong>完全归纳推理</strong>与<strong>不完全归纳推理</strong>。完全归纳推理是必然性推理，不完全推理得出的结论不具有必然性。</li><li>在两个或两类事物在许多属性上都相同的基础上，推出它们在其它属性上也相同，是<strong>类比法归纳推理</strong>。</li><li>类比法归纳可形式化地表示为：<br>A 具有属性a,b,c,d,e；B 具有属性a,b,c,d；推出 B 也具有属性e 。</li><li>类比法的可靠程度决定于两个或两类事物的相同属性与推出的那个属性之间的相关程度，相关程度越高，则类比法的可靠性就越高</li></ul></li><li>归纳推理增加了知识（在机器学习部分称为归纳学习）</li></ul><p><strong>默认推理</strong></p><ul><li>又称<strong>缺省推理</strong>，是在知识不完全的情况下假设某些条件已经具备，所进行的推理。</li><li>如：在条件A已成立的情况下，如果没有足够的证据能证明条件B不成立，则就默认B是成立的，并在此默认的前提下进行推理，推导出某个结论。</li><li>如果到某一时刻发现原先所作的默认不正确，则要撤消所作的默认以及由此默认推出的所有结论，重新按新情况进行推理。</li></ul><h2 id="归结原理"><a href="#归结原理" class="headerlink" title="归结原理"></a>归结原理</h2><p>Robinson 的归结原理使得自动定理证明得以实现。归结推理方法是机器定理证明的主要方法。</p><div class="row"><iframe src="https://drive.google.com/file/d/1VsMFwZ5a0ZdOAVsMRdMRaB0GNQqeVdRM/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录</strong><br>1 命题逻辑的归结法<br>10 谓词逻辑归结基础（SKolem标准型、子句集）<br>30 归结原理（置换、归结式、“快乐学生”问题）<br>50 归结过程的控制策略（删除、支撑集、语义、线性、单元、输入）</p></blockquote><h1 id="不确定性推理"><a href="#不确定性推理" class="headerlink" title="不确定性推理"></a>不确定性推理</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p>不确定性包括<strong>证据</strong>的不确定性和<strong>知识</strong>的不确定性。</p><p>证据通常有两类：<strong>初始事实</strong>、推理过程中产生的<strong>中间结果</strong>。</p><p>证据的不确定性用 C(E) 表示。</p><p>在规则中，E 是规则的前提即证据，H 是该规则的结论，也可以是其它规则的证据。</p><ul><li>规则的不确定性：用一个数值 f(E，H) 表示，称为<strong>规则强度</strong>。</li></ul><p>在不精确推理中，由于知识和证据都具有不确定性，而且知识所要求的不确定性程度与证据实际具有的不确定性程度不一定相同，因而就出现了“怎样才算匹配成功？”的问题。</p><p>可以设计一个算法用来计算匹配双方<strong>相似的程度</strong>，另外再指定一个<strong>相似的限度</strong>，用来衡量匹配双方相似的程度是否落在指定的限度内。</p><p><strong>不确定性的更新和传播：</strong><br>在推理过程中如何考虑知识不确定性的动态积累和传递？</p><p>推理树：</p><p><img src="https://s2.loli.net/2024/07/23/wHcWI12nh9aN3gR.png" alt="80-16.png"></p><h2 id="确定性方法（可信度方法）"><a href="#确定性方法（可信度方法）" class="headerlink" title="确定性方法（可信度方法）"></a>确定性方法（可信度方法）</h2><p>MYCIN 系统研制过程中产生的不确定推理方法（然而这个名字有点误导性）。</p><p>规则 A→B，其可信度 CF(B,A)，有 -1 ≤ CF(B, A) ≤ 1</p><script type="math/tex; mode=display">CF(B,A)=\begin{cases} \frac{P(B|A)-P(B)}{1-P(B)},  & \text{if }P(B|A) \ge P(B) \\\frac{P(B|A)-P(B)}{P(B)}, & \text{if } P(B|A) \lt P(B)\end{cases}</script><p>CF(B, A)表示的意义：证据为真时</p><ul><li>相对于 P(～B) = 1 - P(B) 来说，A 对 B 为真的支持程度。即 A 发生更支持 B 发生，此时 CF(B, A) ≥ 0</li><li>相对于 P(B) 来说，A 对 B 为真的不支持程度。即 A 发生不支持 B 发生，此时 CF(B, A) &lt; 0 </li></ul><p>CF(B, A)的特殊值：</p><ul><li>CF(B, A) = 1，前提真，结论必真</li><li>CF(B, A) = -1，前提真，结论必假</li><li>CF(B, A) = 0 ，前提真假与结论无关</li></ul><p><strong>实际应用中 CF(B, A) 的值由专家确定，并不是由P(B|A), P(B)计算得到的。</strong></p><p>证据 A 的可信度表示为 CF(A)，-1 ≤ CF( A) ≤ 1 .</p><p>特殊值：</p><ul><li>CF(A) = 1，    前提肯定真</li><li>CF(A) = -1，   前提肯定假</li><li>CF(A) = 0，       对前提一无所知</li><li>CF(A) ＞ 0， 表示A以CF(A)程度为真</li><li>CF(A) ＜ 0， 表示A以CF(A)程度为假</li></ul><p>实际使用时：</p><ul><li><strong>初始证据</strong>的 CF 值由专家根据经验提供</li><li><strong>其它证据</strong>的 CF 通过规则进行推理计算得到</li></ul><p><strong>“与”的计算</strong>：     A1 ∧ A2 →B<br>CF(A1 ∧ A2) = min { CF(A1), CF(A2) }</p><p><strong>“或”的计算</strong>：    A1 ∨ A2 →B<br>CF(A1 ∨ A2) = max { CF(A1), CF(A2) } </p><p><strong>“非”的计算：</strong><br>CF(～A) = -CF(A) </p><p><strong>由 A，A →B，求 B</strong>：<br>CF(B) = max{ 0, CF(A) } · CF(B,A)<br>（ CF(A) ＜ 0 时可以不算，即为“0”）</p><p><strong>合成</strong>：由 $CF_1(B)$、$CF_2(B)$，求 CF(B) </p><script type="math/tex; mode=display">CF(B) = \begin{cases} CF_1(B)+CF_2(B)-CF_1(B)CF_2(B),  & CF_1(B) \ge 0, CF_2(B) \ge 0\\CF_1(B)+CF_2(B)+CF_1(B)CF_2(B), & CF_1(B) \lt 0, CF_2(B) \lt 0\\CF_1(B)+CF_2(B), & CF_1(B)CF_2(B) \lt 0\end{cases}</script><p>注意：以上公式<strong>不满足组合交换性</strong>，即：计算结果与各条规则采用的先后顺序有关。</p><p>MYCIN 规定证据的<strong>可信度 CF(A)&lt;0.2 时，就认为该证据引入的规则不可使用。</strong></p><p>EMYCIN 系统（MYCIN 发展而成）对 CF1(B) 和 CF2(B) 符号不同时，进行了修正： </p><script type="math/tex; mode=display">CF(B) = \begin{cases} CF_1(B)+CF_2(B)-CF_1(B)CF_2(B),  & CF_1(B) \ge 0, CF_2(B) \ge 0\\CF_1(B)+CF_2(B)+CF_1(B)CF_2(B), & CF_1(B) \lt 0, CF_2(B) \lt 0\\\frac{CF_1(B)+CF_2(B)}{1-\text{min}\{|CF_1(B)|, |CF_2(B)| \}} , & CF_1(B)CF_2(B) \lt 0\end{cases}</script><p><strong>结论更新：</strong><br>已经有一个先验的结论可信度，如何由规则更新这个可信度？</p><p>结论更新的三种情况：<br><img src="https://s2.loli.net/2024/07/31/kzcJFGyiX87eAs2.png" alt="80-17.png"></p><h2 id="主观-Bayes"><a href="#主观-Bayes" class="headerlink" title="主观 Bayes"></a>主观 Bayes</h2><p>该方法首先应用于地矿勘探系统 PROSPECTOR 中。</p><p>在这种方法中，引入了两个数值 <strong>（LS,LN）</strong> ：</p><ul><li>前者体现规则成立的充分性，后者则表现了规则成立的必要性</li><li>LS 表征的是 A 的发生对 B 发生的影响程度</li><li>LN 表征的是 A 的不发生对 B 发生的影响程度</li><li><strong>实际应用中，采用专家给定的 LS, LN 值</strong></li></ul><h3 id="证据的不确定性"><a href="#证据的不确定性" class="headerlink" title="证据的不确定性"></a>证据的不确定性</h3><p>几率函数 O(A) 表示证据 A 的不确定性：</p><script type="math/tex; mode=display">O(A) = \frac{P(A)}{1-P(A)} = \begin{cases} 0  & \text{A is false} \\\infty  & \text{A is true} \\(0,\infty) & \text{uncertain}\end{cases}</script><p>几率函数与概率函数形式不同，但是变化相同：<strong>当A为真的程度越大（P(A)越大），几率函数的值也越大。</strong></p><p>在推理过程中需要概率函数值时，可用等式：</p><script type="math/tex; mode=display">P(A) = \frac{O(A)}{1+O(A)}</script><p>特殊值：</p><ul><li>P(X) = 0, O(X) = 0</li><li>P(X) = 0.5, O(X) = 1</li><li>P(X) = 1, O(X) = inf</li></ul><h3 id="规则的不确定性"><a href="#规则的不确定性" class="headerlink" title="规则的不确定性"></a>规则的不确定性</h3><p>规则：A→B</p><script type="math/tex; mode=display">P(B|A) = \frac{P(A|B)P(B)}{P(A)}</script><script type="math/tex; mode=display">P(\lnot B|A) = \frac{P(A|\lnot B)P(\lnot B)}{P(A)}</script><p>两式相除：</p><script type="math/tex; mode=display">\frac{P(B|A)}{P(\lnot B|A)} = \frac{P(A|B)P(B)}{P(A|\lnot B)P(\lnot B)}</script><p>记：</p><script type="math/tex; mode=display">\frac{P(A|B)}{P(A|\lnot B)} = LS</script><p>又因为：</p><script type="math/tex; mode=display">O(B) = \frac{P(B)}{P(\lnot B)} \qquad O(B|A) = \frac{P(B|A)}{P(\lnot B|A)}</script><p>整理得：</p><script type="math/tex; mode=display">O(B|A) = LS \cdot O(B)</script><p><strong>LS 的含义</strong>：</p><ul><li>LS 表示 A 真对 B 的影响程度</li><li>LS = ∞ 时，P(~B|A)=0，P(B|A)=1</li><li>说明 A 对于 B 是逻辑充分的，即规则成立是充分的</li><li>LS 称作<strong>充分似然率因子</strong></li></ul><script type="math/tex; mode=display">LS = \frac{O(B|A)}{O(B)} = \frac{P(B|A)/P(\lnot B|A)}{P(B)/P(\lnot B)}</script><p>LS 表示 A 存在对 B 发生的影响度：</p><ul><li>LS = 1，O(B|A) = O(B)，A 对 B 无影响</li><li>LS &gt; 1，O(B|A) &gt; O(B)，A 支持 B</li><li>LS &lt; 1，O(B|A) &lt; O(B)，A 不支持 B</li></ul><p>由类似的推导过程：</p><script type="math/tex; mode=display">P(B|\lnot A) = \frac{P(\lnot A|B)P(B)}{P(\lnot A)}</script><script type="math/tex; mode=display">P(\lnot B|\lnot A) = \frac{P(\lnot A|\lnot B)P(\lnot B)}{P(\lnot A)}</script><p>两式相除：</p><script type="math/tex; mode=display">\frac{P(B|\lnot A)}{P(\lnot B| \lnot A)} = \frac{P(\lnot A|B)P(B)}{P(\lnot A| \lnot B)P(\lnot B)}</script><p>记：</p><script type="math/tex; mode=display">\frac{P(\lnot A|B)}{P(\lnot A| \lnot B)} = LN</script><p>又因为：</p><script type="math/tex; mode=display">O(B) = \frac{P(B)}{P(\lnot B)} \qquad O(B|\lnot A) = \frac{P(B|\lnot A)}{P(\lnot B|\lnot A)}</script><p>整理得：</p><script type="math/tex; mode=display">O(B|\lnot A) = LN \cdot O(B)</script><p>LN 的含义：</p><ul><li>LN 表示 A 假(即不存在)对 B 的影响程度</li><li>LN = 0 时，P(B|~A)=0</li><li>说明 A 对于 B 是逻辑必要的，即规则成立是必要性</li><li>LN 称作<strong>必要似然率因子</strong></li></ul><script type="math/tex; mode=display">LN = \frac{O(B|\lnot A)}{O(B)} = \frac{P(B|\lnot A)/P(\lnot B|\lnot A)}{P(B)/P(\lnot B)}</script><p>LN 表示 A 不存在对 B 发生的影响度：</p><ul><li>LN = 1，O(B|~A) = O(B)，~A对B无影响</li><li>LN &gt; 1，O(B|~A) &gt; O(B)，~A支持B</li><li>LN &lt; 1，O(B|~A) &lt; O(B)，~A不支持B</li></ul><p>LS、LN 的关系：<br><strong>LN≥0，LS≥0，且 LN 和 LS 彼此不独立。</strong></p><p>简单的验证：</p><script type="math/tex; mode=display">LS = \frac{P(A|B)}{P(A|\lnot B)}\qquad LN = \frac{P(\lnot A|B)}{P(\lnot A| \lnot B)}</script><p>当 LS &gt; 1 时：</p><script type="math/tex; mode=display">P(A|B)>P(A|\lnot B)</script><p>故有：</p><script type="math/tex; mode=display">LN = \frac{1-P(A|B)}{1-P(A|\lnot B)}<1</script><p>事实上，LS 和 LN 必处于下面三种情况之一：</p><ul><li>LS &gt; 1, LN &lt; 1</li><li>LS &lt; 1, LN &gt; 1</li><li>LS = LN = 1</li></ul><p><img src="https://s2.loli.net/2024/07/31/RVHhLNKy2jWSnsB.png" alt="80-18.png"></p><p>LS、LN 的示例：</p><blockquote><p>“如果有石英矿，则必有钾矿带”。<br>LS=300, LN=0.2</p><p>这意味着：<br>发现石英矿，对判断发现钾矿带非常有利。而没有发现石英矿，并不暗示一定没有钾矿带。如果 LN &lt;&lt; 1，则没有发现石英矿时，强烈暗示钾矿带不存在。</p></blockquote><h3 id="推理计算"><a href="#推理计算" class="headerlink" title="推理计算"></a>推理计算</h3><p>给定先验几率、规则 LS 和 LN，怎样计算后验几率呢？</p><p><strong>1）</strong> A 必出现或必不出现时，即 P(A)=1 或 P(A)=0 时</p><script type="math/tex; mode=display">O(B|A) = LS \cdot O(B)</script><script type="math/tex; mode=display">O(B|\lnot A) = LN \cdot O(B)</script><p><strong>2）</strong> A 不是必出现或必不出现时，即 P(A)≠1 且 P(A)≠0 时</p><p><img src="https://s2.loli.net/2024/08/01/wxhtucPaoHR8ZJG.png" alt="80-19.png"></p><p>由全概率公式推得：</p><script type="math/tex; mode=display">P(B|A') = P(B|A)P(A|A')+P(B|\lnot A)P(\lnot A|A')</script><p>对于上面的式子，先考虑三种特殊情况：</p><p><strong>『1』</strong> P(A|A’) = 1 时（证据 A’ 出现，证据 A 必然出现）</p><script type="math/tex; mode=display">\begin{aligned}P(B|A') & = P(B|A) \\        & = \frac{P(B|A)}{P(B|A)+P(\lnot B|A)} \\        & = \frac{P(B|A)P(A)}{P(B|A)P(A)+P(\lnot B|A)P(A)} \\        & = \frac{P(AB)}{P(AB)+P(\lnot BA)} \\        & = \frac{P(AB)}{P(AB)+P(A|\lnot B)(1-P(B))} \\        & = \frac{P(A|B)P(B)/P(A|\lnot B)}{P(A|B)P(B)/P(A|\lnot B)+1-P(B)} \\        & = \frac{LS \cdot P(B)}{(LS-1) \cdot P(B)+1}\end{aligned}</script><p><strong>『2』</strong> P(A|A’) = 0 时（证据 A’ 出现，证据 A 必然不出现）</p><p>类似地可以得到：</p><script type="math/tex; mode=display">P(B|A') = P(B|\lnot A) = \frac{LN \cdot P(B)}{(LN-1) \cdot P(B)+1}</script><p><strong>『3』</strong> P(A|A’) = P(A) 时</p><p>显然有：</p><script type="math/tex; mode=display">P(B| A') = P(B)</script><p><strong>综上『』</strong>，得到以下特殊值：</p><script type="math/tex; mode=display">P(B| A') = \begin{cases}\frac{LS \cdot P(B)}{(LS-1) \cdot P(B)+1}, & \text {P(A|A')=1} \\\frac{LN \cdot P(B)}{(LN-1) \cdot P(B)+1}, &\text{P(A|A')=0} \\P(B), &\text{P(A|A')=P(A)}\end{cases}</script><p>在其他位置，使用插值计算：</p><p><img src="https://s2.loli.net/2024/08/01/mIjMNJxkBdnXUEq.png" alt="80-20.png"></p><p>证据的组合、结论的合成：</p><p><img src="https://s2.loli.net/2024/08/01/m4RlxZNfeK8BwhA.png" alt="80-21.png"></p><h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><h2 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h2><p>机器学习就是让机器（计算机）来模拟和实现人类的学习功能。</p><p>基本术语和概念：</p><ul><li><strong>数据集、训练集、测试集</strong><br><img src="https://s2.loli.net/2024/08/05/5o1MeumFAfdh7W4.png" alt="80-22.png"></li><li><strong>泛化能力、误差（训练误差、泛化误差）、欠拟合、过拟合</strong><ul><li>泛化能力好：对于新的未知数据，也能很好地预测结果。</li><li>过拟合：模型可以非常完美地拟合现有数据，但是对于新的数据，拟合效果不好。</li></ul></li><li>常见的机器学习任务<ul><li>分类</li><li>回归：线性回归、逻辑回归</li></ul></li><li>混淆矩阵<br><img src="https://s2.loli.net/2024/08/05/seyDVPGltc83pFg.png" alt="80-23.png"></li></ul><p>机器学习按<strong>是否有指导</strong>进行分类：</p><ul><li>监督学习</li><li>无监督学习</li><li>半监督学习</li><li>强化学习</li></ul><p><img src="https://s2.loli.net/2024/08/06/l2sJZhnWqjzkQVE.png" alt="80-24.png"></p><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><p>长这样：</p><p><img src="https://s2.loli.net/2024/08/06/jGxvRt9JeYuNOHb.png" alt="80-25.png"></p><p>决策树学习的过程实际上是在构造决策树。<br>学习前提是必须有一组训练实例。<br>学习结果是根据训练实例构造的决策树。<br>学习完成后，就可以利用这棵决策树对未知事物进行分类。</p><p>可以利用多种算法构造决策树：</p><ul><li><code>ID 3</code></li><li><code>C4.5</code></li><li><code>CART</code></li><li><code>CHAID</code> </li></ul><p>ID3 算法是昆兰（J.R.Quinlan）于 1979 年提出的一种以<strong>信息熵的下降速度</strong>作为属性选择标准的一种学习算法。其输入是一个用来描述各种已知类别的例子集，学习结果是一棵用于进行分类的决策树。</p><p><strong>信息熵（information entropy）</strong>，是对信息源整体不确定性的度量。</p><p>The core idea of information theory is that the “informational value” of a communicated message depends on the degree to which the content of the message is surprising. If a highly likely event occurs, the message carries very little information. On the other hand, if a highly unlikely event occurs, the message is much more informative. For instance, the knowledge that some particular number will not be the winning number of a lottery provides very little information, because any particular chosen number will almost certainly not win. However, knowledge that a particular number will win a lottery has high informational value because it communicates the occurrence of a very low probability event.</p><p>The information content, also called the <i>surprisal</i> or <i>self-information</i>, of an event $E$ is a function which increases as the probability $p(E)$ of an event decreases. When $p(E)$ is close to 1, the surprisal of the event is low, but if $p(E)$ is close to 0, the surprisal of the event is high. This relationship is described by the function :</p><script type="math/tex; mode=display">\log (\frac{1}{P(E)})</script><p>Hence, we can define the information, or surprisal, of an event $E$ by :</p><script type="math/tex; mode=display">I(E)=−\log _2(p(E))</script><p>依据 Boltzmann’s H-theorem，香农把随机变量 X 的熵值 $\text{H}$（希腊字母Eta）定义如下：</p><script type="math/tex; mode=display">\text{H} (X) = E[I(X)] = E[-\log p(X)]</script><p>其中 E 为期望函数。</p><p>当取自有限的样本时，熵的公式可以表示为：</p><script type="math/tex; mode=display">\text{H} (X) = - \sum_{i} P(x_i)\log _b P(x_i)</script><p>当 b = 2 时，熵的单位是 bit .</p><p><strong>加权信息熵</strong>：<br>根据某种方法对样本 S 作一个划分：</p><script type="math/tex; mode=display">S_1, S_2, \cdots , S_r</script><p>则划分后的加权信息熵为：</p><script type="math/tex; mode=display">\sum _{t=1}^r \frac{|S_t|}{|S|} \text{H} (S_t)</script><p>假设 S 中的样本有 m 个属性，其属性集为 X={x1, x2,…,xm}，每个属性 xi 都有不同的取值（xi 取值的个数有 ri 种），根据这个 xi 的取值对样本 S 作划分，则可以记为：</p><script type="math/tex; mode=display">\text{H} (S, x_i) = \sum _{t=1}^{r_i} \frac{|S_t|}{|S|} \text{H} (S_t)</script><p>其中 $S_t$ 为 $x_i = t$ 时的样本子集。</p><p>选取不同的属性进行划分，$\text{H} (S, x_i)$ 的值可能不同。记</p><script type="math/tex; mode=display">G(S, x_i) = \text{H} (S) - \text{H} (S, x_i)</script><p>称为<strong>信息增益（information gain）</strong>。</p><p>ID3 算法的学习过程，实际上是一个以整个样本集为根节点，以信息增益最大为原则，选择条件属性进行扩展，逐步构造出决策树的过程。</p><p>一个粗略但简单的理解：寻找一个最优的划分。</p><p>例子：</p><p><img src="https://s2.loli.net/2024/08/10/8GUDRfLJKbsIn2e.png" alt="80-26.png"></p><h2 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h2><p>遗传算法（GA）模拟自然界优胜劣汰的进化现象，把搜索空间映射为遗传空间，把可能的解编码成一个向量——染色体，向量的每个元素称为基因。 通过不断计算各染色体的适应值，选择最好的染色体，获得最优解。</p><p><img src="https://s2.loli.net/2024/08/21/ewz1HWJra4huK8f.png" alt="80-27.png"></p><p>例子：</p><p><img src="https://bu.dusays.com/2024/08/21/66c5b6262dd53.png" alt="80-28.png"></p><p>交叉、变异：</p><p><img src="https://s2.loli.net/2024/08/21/bNopUsOPtXEhrRn.png" alt="80-29.png"></p><p>遗传算法可用于 TSP 问题，具体细节略。</p><h2 id="SVM、KNN"><a href="#SVM、KNN" class="headerlink" title="SVM、KNN"></a>SVM、KNN</h2><p>支持向量机（support vector machine，SVM）是一个二分类模型，它的基本模型是定义在特征空间上的间隔最大的线性分类器。SVM还包括核技巧，这使它成为本质上的非线性分类器。支持向量机的学习算法是求解凸二次优化的最优化算法。</p><p><img src="https://s2.loli.net/2024/08/21/Rf18v9mY4leLoit.png" alt="80-30.png"></p><p>K 最近邻（K-Nearest Neighbor，KNN）分类算法的思路是：如果一个样本在特征空间中的 K 个最相似（即特征空间中最邻近）的样本中的大多数属于某一个类别，则该样本也属于这个类别。</p><p><img src="https://s2.loli.net/2024/08/21/9yFbAOjewurDEzp.webp" alt="80-31.png"></p><h2 id="超参数、验证集"><a href="#超参数、验证集" class="headerlink" title="超参数、验证集"></a>超参数、验证集</h2><p>学习模型中一般有两种参数，一种参数是可以从学习中得到，还有一种无法数据里面得到，只能靠人的经验来设定，这类参数就叫做<strong>超参数</strong>。</p><p>模型超参数举例：</p><ul><li>神经网络的学习速率、迭代次数、批次大小、激活函数、神经元的数量</li><li>支持向量机的 C 和 σ</li><li>K 近邻中的 K</li></ul><p>超参数搜索的一般过程：</p><ul><li>将数据集分成训练集、验证集、测试集。</li><li>在训练集上根据模型的性能指标对模型参数进行优化。</li><li>在验证集上根据模型的性能指标对模型超参数进行搜索。</li><li>在步骤2和步骤3交替迭代进行，最终确定模型的参数和超参数，并在测试集中评价模型的优劣。</li></ul><p>超参数搜索算法：网格搜索、随机搜素、智能搜素、…</p><p>交叉验证：用来验证分类器的性能的一种统计分析方法，基本思想是把在某种意义下将原始数据进行分组，一部分作为训练集，另一部分作为验证集，首先用训练集对分类器进行训练，再利用验证集来测试训练得到的模型，以此作为评价分类器的性能指标。</p><p>k-折交叉验证（K-CV）：</p><ul><li>将原始数据分成k组（一般是均分）。</li><li>将每个子集数据分别做一次验证集，其余的k-1组子集数据作为训练集，这样会得到k个模型。</li><li>用这k个模型最终的验证集的分类准确率的平均数作为此K-CV下分类器的性能指标。</li></ul><h1 id="人工神经网络"><a href="#人工神经网络" class="headerlink" title="人工神经网络"></a>人工神经网络</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>人工神经网络(Artificial Neural Network, ANN)，是一种旨在模仿人脑结构及其功能的信息处理系统。</p><p>神经元是神经网络的基本处理单元，科学研究过程中一般是用一个多输入/多输出的非线性器件来模拟生物神经细胞的：</p><p><img src="https://s2.loli.net/2024/08/27/ktN3uOoPJlbEx7f.png" alt="80-32.png"></p><p>在 M-P 模型中：</p><script type="math/tex; mode=display">Y=\text{sign}[\sum_{i=1}^n x_iw_i-\theta]</script><p>$x_i$ 表示神经元的输入，$w_i$ 表示输入的对应权值，即信号源神经元与该神经元的连接强度，Y 为神经元的输出，$\theta$ 表示神经元的阈值。</p><p>深度学习一般指深度神经网络，这里的深度指神经网络的层数较多。</p><p><img src="https://s2.loli.net/2024/08/27/wLY7B4uCVxeNHp2.png" alt="80-33.png"></p><p>激活函数设计一般需要考虑的因素：</p><ul><li>非线性</li><li>连续可微性</li><li>有界性</li><li>单调性</li><li>平滑性</li><li>原点附近近似 Identity</li></ul><p>基本模型：</p><p><img src="https://s2.loli.net/2024/08/29/jsG7I5pnaFHitvW.png" alt="80-34.png"></p><h2 id="感知器"><a href="#感知器" class="headerlink" title="感知器"></a>感知器</h2><p>感知器基于 M-P 神经元模型。该模型由一个可调整权重的神经元(线性组合器)和一个硬限幅器组成。输入的加权和施加于硬限幅器，硬限幅器当其输入为正时输出为+1，输入为负时输出为-1（也可以是其他情况，具体由激活函数决定）。</p><p>一个基本感知器，用超平面将 n 维空间分为两个决策区域，超平面由线性分隔函数定义：</p><script type="math/tex; mode=display">\sum_{i=1}^n x_iw_i-\theta =0</script><p><strong>用于分类任务的感知器训练算法：</strong></p><blockquote><p><strong>步骤1</strong>：初始化。设置权重w1, w2, … , wn和阈值 $\theta$ 的初值。初始权重可以随意赋值，取值范围通常为 [-0.5, 0.5] ，然后通过训练样本调整。<br><strong>步骤2</strong>：激活。通过用输入x1(p), x2(p), … ,xn(p)以及期望输出 $Y_d(p)$ 来激活感知器。迭代 p 时的实际输出为：</p><script type="math/tex; mode=display">Y(p) = \text{step} [\sum_{i=1}^n x_i(p) w_i(p)-\theta]</script><p>其中，n 为感知器输入的数量，step 为阶跃激活函数。<br><strong>步骤3</strong>：权重训练。修改感知器的权重为：</p><script type="math/tex; mode=display">w_i(p+1)= w_i(p)+ \Delta w_i(p)</script><p>其中， $\Delta w_i(p)=\alpha x_i(p)e(p)$ . e(p) 为误差。<br><strong>步骤4</strong>：迭代。迭代 p 加 1，回到步骤 2，重复以上过程直至收敛。</p></blockquote><p>例子：</p><p><img src="https://s2.loli.net/2024/08/29/MbziVv8mXSfRyQT.png" alt="80-35.png"></p><p>感知器仅能学习线性分割函数，单层感知器只能解决线性分类问题。XOR 问题中无法找到一条合适的线进行分类。</p><p><img src="https://s2.loli.net/2024/08/29/wciCtaYqWGQepk4.jpg" alt="80-36.jpg"></p><p>多层感知器可以解决非线性分类问题。</p><p>可以通过在网络中加入一个或多个隐藏层来克服线性模型的限制，使其能处理更普遍的函数关系类型。</p><p>最简单的方法是将许多全连接层堆叠在一起。每一层都输出到上面的层，直到生成最后的输出。我们可以把前 L−1 层看作表示，把最后一层看作线性预测器。这种架构通常称为<strong>多层感知机（multilayer perceptron）</strong>，通常缩写为 MLP。</p><p><img src="https://s2.loli.net/2024/08/29/av3ZbfgGWhxYnqd.png" alt="80-37.png"></p><h2 id="梯度下降、损失函数"><a href="#梯度下降、损失函数" class="headerlink" title="梯度下降、损失函数"></a>梯度下降、损失函数</h2><p>当训练样例线性不可分时，我们无法找到一个超平面，令感知器完美分类训练样例，但是我们可以近似的分类它们，而允许一些小小的分类错误。怎样让这个错误最小呢，首先要参数化描述这个错误，这就是损失函数（误差函数），它反映了感知器目标输出和实际输出之间的错误。最常用的误差函数为 L2 误差：</p><script type="math/tex; mode=display">E(w) = \frac{1}{2} \sum_{d \in D} (t_d - o_d)^2</script><p>其中，d 为训练样例，D 为训练样例集，$t_d$ 为目标输出，$o_d$ 为实际输出。</p><p><img src="https://s2.loli.net/2024/08/29/DsAN2V3LhxyfiOX.png" alt="80-38.png"></p><p>梯度下降算法：</p><ul><li>全局梯度下降算法</li><li>随机梯度下降算法</li><li>Mini-Batch 梯度下降算法</li></ul><h2 id="BP-网络"><a href="#BP-网络" class="headerlink" title="BP 网络"></a>BP 网络</h2><p>BP 网络学习的网络基础是具有多层前馈结构的 BP 网络。为讨论方便，采用如下所示的三层 BP 网络。</p><p><img src="https://s2.loli.net/2024/08/31/SXHWIuEBPcaU14h.png" alt="80-39.png"></p><p>对上述三层 BP 网络，分别用 i,j,k 表示输入层、隐含层、输出层节点，且以下符号表示：</p><ul><li>$O_i$, $O_j$, $O_k$ 分别表示输入层节点 i、隐含层节点 j，输出层节点 k 的输出；</li><li>$I_i$, $I_j$ ,$I_k$ 分别表示输入层节点 i、隐含层节点 j，输出层节点 k 的输入；</li><li>$w_{ij}$, $w_{jk}$ 分别表示从输入层节点 i 到隐含层节点 j ，从隐含层节点 j 输出层节点 k 的输入节点 j 的连接权值；</li><li>$θ_j$ 、$θ_k$ 分别表示隐含层节点 j、输出层节点 k 的阈值。</li></ul><p>计算过程和之前大体相当。</p><p>BP 网络的激发函数通常采用连续可微的函数，例如 sigmoid 函数：</p><script type="math/tex; mode=display">f(x) = \frac{1}{1+e^{-x}}</script><p>其一阶导数为：</p><script type="math/tex; mode=display">f'(x) = f(x) [1-f(x)]</script><p>BP 网络学习过程是一个对给定训练模式，利用传播公式，沿着减小误差的方向不断调整网络联结权值和阈值的过程。</p><p>设样本集中的第 r 个样本，其输出层结点 k 的期望输出用 $d_{rk}$ 表示，实际输出用 $y_{rk}$ 表示。其中，$d_{rk}$ 由训练模式给出，且</p><script type="math/tex; mode=display">y_{rk} = O_{rk}</script><p>如果仅针对单个输入样本，其实际输出与期望输出的误差为 </p><script type="math/tex; mode=display">E = \frac{1}{2} \sum_{k=1}^l (d_k - y_k)^2</script><p>上述误差定义是针对单个训练样本的误差计算公式，它适用于网络的顺序学习方式。若采用批处理学习方式，需要定义其总体误差。假设样本集中有 R 个样本，则对整个样本集的总体误差定义为：</p><script type="math/tex; mode=display">E_R = \sum_{r=1}^R E_r = \frac{1}{2} \sum_{r=1}^R \sum_{k=1}^l (d_{rk} - y_{rk})^2</script><p>针对顺序学习方式，其联结权值的调整公式为 </p><script type="math/tex; mode=display">w_{jk}(t+1) = w_{jk}(t) + \Delta w_{jk}</script><p>式中，$w_{jk}(t)$ 和 $w_{jk}(t+1)$ 分别是第 t 次迭代和 t+1 次迭代时，从结点 j 到结点 k 的联结权值；$\Delta w_{jk}$ 是联结权值的变化量。</p><p>在开始推导之前，补充一点知识：</p><div class="row">    <embed src="https://dezeming.top/wp-content/uploads/2021/07/%E5%87%BD%E6%95%B0%E5%AF%B9%E5%90%91%E9%87%8F%E6%B1%82%E5%AF%BC-%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E7%9A%84%E6%8F%8F%E8%BF%B0.pdf" width="100%" height="550" type="application/pdf"></div><p>其实下面的推导只会用到这个 pdf 最开始的概念。多数情况下可以非常粗糙地理解——只要记住某些符号其实代表了一个向量，而每个向量都有很多元素，但是都可以用同一种方法计算，因而将它们记成了向量。</p><p>为了使联结权值能沿着 E 的梯度下降的方向逐渐改善，网络逐渐收敛，权值变化量 $\Delta w_{jk}$ 的计算公式如下：</p><script type="math/tex; mode=display">\Delta w_{jk} = - \eta \frac{\partial E}{\partial w_{jk}}</script><p>式中，$\eta$ 为增益因子，取 [0, 1] 区间的一个正数，其取值与算法的收敛速度有关。</p><script type="math/tex; mode=display">\frac{\partial E}{\partial w_{jk}} = \frac{\partial E}{\partial I_k} \frac{\partial I_k}{\partial w_{jk}}</script><p>注：E 是一个复合函数，这里用了链式法则。这样拆分是有实际意义的，比较显然。</p><script type="math/tex; mode=display">\frac{\partial I_k}{\partial w_{jk}} = \frac{\partial}{\partial w_{jk}} \sum_{j=1}^m w_{jk} O_{j} = O_j</script><p>令局部梯度</p><script type="math/tex; mode=display">\delta _k = - \frac{\partial E}{\partial I_k}</script><p>注意，这里 $\delta _k$ 代表了 $l$ 个变量，它们具有类似的形式。</p><p>那么有</p><script type="math/tex; mode=display">\Delta w_{jk} = -\eta \frac{\partial E}{\partial I_k} \frac{\partial I_k}{\partial w_{jk}} = \eta \delta _k O_j</script><p><strong>对于输出层上的结点</strong>，则有 $O_k=y_k$ ，因此（这里 $y_k$ 也是向量）</p><script type="math/tex; mode=display">\delta _k = - \frac{\partial E}{\partial I_k} = - \frac{\partial E}{\partial y_k} \frac{\partial y_k}{\partial I_k}</script><p>得到</p><script type="math/tex; mode=display">\begin{aligned}\frac{\partial E}{\partial y_k}&= \frac{\partial}{\partial y_k} ( \frac{1}{2} \sum_{i=1}^l (d_i - y_i)^2 )  \\&= \frac{1}{2} \cdot 2 (d_k - y_k) \cdot (-1)  \\&= -(d_k - y_k)\end{aligned}</script><p>又因为</p><script type="math/tex; mode=display">\frac{\partial y_k}{\partial I_k} = f'(I_k - \theta)</script><p>所以</p><script type="math/tex; mode=display">\delta _k = (d_k - y_k) f'(I_k - \theta)</script><p>又因为 $f(I_k - \theta) = y_k$ ，再由 sigmoid 函数的导数的公式，有</p><script type="math/tex; mode=display">\delta _k = (d_k - y_k) y_k (1-y_k)</script><p>代入之前的结果：</p><script type="math/tex; mode=display">\Delta w_{jk} = \eta (d_k - y_k) (1 - y_k) y_k O_j</script><p>那么，<strong>对输出层有</strong>：</p><script type="math/tex; mode=display">\begin{aligned}w_{jk}(t+1) &= w_{jk}(t) + \Delta w_{jk} \\&= w_{jk}(t) + \eta (d_k - y_k) (1-y_k) y_k O_j \\\end{aligned}</script><p><strong>现在，我们想要类似地计算 $\Delta w_{ij}$</strong> 。</p><p><strong>对于不是输出层的结点</strong>。它表示联结权值是作用于隐含层上的结点，我们可以类似地定义 $\delta _j$ ：</p><script type="math/tex; mode=display">\delta _j = - \frac{\partial E}{\partial I_j} = - \frac{\partial E}{\partial O_j} \frac{\partial O_j}{\partial I_j}</script><p>容易得到：</p><script type="math/tex; mode=display">\delta _j = - \frac{\partial E}{\partial O_j} f'(I_j - \theta _j)</script><p>为了便于理解，下面的 $O_j$ 可以理解为隐藏层中的随意一个节点的输出值（实际上它是向量）：</p><script type="math/tex; mode=display">\begin{aligned}-\frac{\partial E}{\partial O_j}&= - \frac{\partial E}{\partial I_k} \frac{\partial I_k}{\partial O_j} \\&= (-\frac{\partial E}{\partial I_k}) \cdot \frac{\partial}{\partial O_j} \sum_{j=1}^m w_{jk} O_j \\&= (- \frac{\partial E}{\partial I_k}) w_{jk} \\\end{aligned}</script><p>上面式子最后结果中的 $w_{jk}$ 是指该 $O_j$ 对应的权值。</p><p>这个结果非常的 amazing 啊，注意到 </p><script type="math/tex; mode=display">\delta _k = - \frac{\partial E}{\partial I_k}</script><p>于是有：</p><script type="math/tex; mode=display">-\frac{\partial E}{\partial O_j} = \delta _k w_{jk}</script><p>于是</p><script type="math/tex; mode=display">\delta _j = \delta _k w_{jk} f'(I_j - \theta _j)</script><p>这说明，低层结点的 $\delta$ 值是通过上一层结点的 $\delta$ 值来计算的。这样，我们就可以先计算出输出层上的 $\delta$ 值，然后在较低层上计算。</p><script type="math/tex; mode=display">\delta _j = \delta _k w_{jk} f(I_j - \theta _j) [1 - f(I_j - \theta _j)]</script><p>于是</p><script type="math/tex; mode=display">\begin{aligned}\Delta w_{ij}&= \eta \delta _k w_{jk} f(I_j - \theta _j) [1 - f(I_j - \theta _j)] O_i \\&= \eta \delta _k w_{jk} O_j (1 - O_j) x_i\end{aligned}</script><p>那么，<strong>对隐含层有</strong>：</p><script type="math/tex; mode=display">\begin{aligned}w_{ij}(t+1)&= w_{ij}(t) + \Delta w_{ij} \\&= \text{代入即可} \cdots \\\end{aligned}</script><p>BP 网络的算法流程：</p><p><img src="https://s2.loli.net/2024/09/01/eMNB6CQ5RDiAY2j.png" alt="80-40.png"></p><h2 id="拓展内容"><a href="#拓展内容" class="headerlink" title="拓展内容"></a>拓展内容</h2><div class="row"><iframe src="https://drive.google.com/file/d/1oP-LaYqY_X6sxByJhi9-6LvR6xjNcQYN/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录</strong><br>卷积神经网络(CNN)  2<br>RNN  6<br>LSTM结构  9<br>注意力机制  11<br>正则化与优化器  18</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;绪论&quot;&gt;&lt;a href=&quot;#绪论&quot; class=&quot;headerlink&quot; title=&quot;绪论&quot;&gt;&lt;/a&gt;绪论&lt;/h1&gt;&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:</summary>
      
    
    
    
    <category term="算法" scheme="https://dropsong.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="AI" scheme="https://dropsong.github.io/tags/AI/"/>
    
    <category term="A*" scheme="https://dropsong.github.io/tags/A/"/>
    
    <category term="蒙特卡洛树" scheme="https://dropsong.github.io/tags/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A0%91/"/>
    
    <category term="α-β剪枝" scheme="https://dropsong.github.io/tags/%CE%B1-%CE%B2%E5%89%AA%E6%9E%9D/"/>
    
    <category term="主观贝叶斯" scheme="https://dropsong.github.io/tags/%E4%B8%BB%E8%A7%82%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    
    <category term="机器学习" scheme="https://dropsong.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="决策树" scheme="https://dropsong.github.io/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
    <category term="信息论" scheme="https://dropsong.github.io/tags/%E4%BF%A1%E6%81%AF%E8%AE%BA/"/>
    
    <category term="遗传算法" scheme="https://dropsong.github.io/tags/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
    <category term="SVM" scheme="https://dropsong.github.io/tags/SVM/"/>
    
    <category term="KNN" scheme="https://dropsong.github.io/tags/KNN/"/>
    
    <category term="神经网络" scheme="https://dropsong.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记 23</title>
    <link href="https://dropsong.github.io/posts/7d04e5a3.html"/>
    <id>https://dropsong.github.io/posts/7d04e5a3.html</id>
    <published>2024-07-01T09:42:28.000Z</published>
    <updated>2024-08-13T08:48:58.856Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个拖了很久的读书笔记，简记一下 23 年的读过的两本书。</p><p>感谢 OCR 技术。</p><p>一本是《都柏林人》，另一本是《小径分岔的花园》。</p><h2 id="都柏林人"><a href="#都柏林人" class="headerlink" title="都柏林人"></a>都柏林人</h2><p>有印象的就只有几篇而已。</p><h3 id="阿拉比"><a href="#阿拉比" class="headerlink" title="阿拉比"></a>阿拉比</h3><p>这篇文章写了一个小男孩的初恋，但是没几天他就大失所望，然后觉得非常可耻。</p><blockquote><p>甚至在最不适宜浪漫的地方，她的形象也陪伴着我。星期六晚上，我姑妈到市场去的时候，我不得不替她去拿些东西。我们走过灯光闪耀的大街，被醉汉和讨价还价的妇女们挤来挤去，街上熙熙攘攘，劳工们咒骂，守立在猪头肉桶旁边的店伙计尖声吆喝，街头卖唱的人用带鼻音的腔调唱着关于奥多诺万·罗萨的《大家一起来》之歌，或者唱着关于我们祖国动乱的民谣。这些声音在我心里汇成一种独特的生活感受：<strong>我想象自己捧着圣杯，在一群敌人中安然通过。</strong>在我进行自己并不理解的祈祷和赞美时，她的名字时不时地从我的嘴里脱口而出。我眼里常常充满泪水（我也说不出为什么），有时一股热流似乎从心里涌上胸膛。</p></blockquote><p>两人的第一次谈话：</p><blockquote><p>她终于和我说话了。她说第一句话的时候，我榄乱不安，不知该如何回答。她问我去不去阿拉比。我记不清回答的是去还是不去。那是一个非常壮观的市场，她说她非常想去。</p></blockquote><p>去了阿拉比之后，无论什么都糟透了，小男孩觉得自己像个小丑：</p><blockquote><p>抬头向黑暗中凝视，我看见自己成了一个被虛荣心驱使和嘲弄的动物，于是我的双眼燃烧起痛苦和愤怒</p></blockquote><h3 id="伊芙琳"><a href="#伊芙琳" class="headerlink" title="伊芙琳"></a>伊芙琳</h3><p>生活中确实有很多伊芙琳这样的人呢。</p><blockquote><p>在她沉思冥想之际，她母亲一生可怜的景象如同符咒似的压在了她的心头——平平凡凡耗尽了生命，临终都操碎了心。她浑身颤抖，仿佛又听见母亲的声音愚顽不停地说着：</p><p>“我亲爱的孩子！我亲爱的孩子1”</p><p>她蓦然惊恐地站了起来。逃！她必须逃走！弗兰克会救她。他会给她新的生活，也许还会给她爱情。而她需要生活。为什么她不应该幸福？她有权利获得幸福。弗兰克会拥抱她，把她抱在怀里。他会救她的。</p></blockquote><p>但是最后关头她还是怂了：</p><blockquote><p>在诺斯华尔码头，她站在挤来挤去的人群当中。他拉着她的手，她知道他在对她说话，一遍通谈着航行的事儿。码头上挤满了带着棕色行李的士兵。透过候船室宽大的门口，她瞥见了巨大的黑色船体，停泊在码头的墙边，舷窗里亮着灯。她没有说话。她觉得脸色苍白发冷，由于莫明其妙的悲伤，她祈求上帝指点迷津，告诉她该做什么。大船在雾里鸣响悠长而哀婉的汽笛声。如果她走的话，翌日就会和弗兰克一起在海上，向布宜诺斯艾利斯驶去。他们的船位已经订好。在他为她做了这一切之后，她还能后退么？她的悲伤使她真觉得想吐，于是便不停地翕动嘴唇，虔诚地默默祈祷。</p><p>一阵叮当的铃声敲响了她的心房。她觉得他抓紧了自己的手：</p><p>“来呀！”</p><p>全世界的海洋在她的心中翻腾激荡。他把她拖进了汪洋之中：他会把她淹死的。她用双手紧紧地抓住了铁栏。</p><p>“来呀！”</p><p>不！不！不！这不可能。她双手疯狂地抓着铁栏。在汪洋之中，她发出一阵痛苦的叫喊。</p><p>“伊芙琳！爱薇！”</p><p>他冲过栅栏，喊叫她跟上。有人喊他往前走，他却仍在喊她。她迫不得己地向他拾起巷白的面孔，像是一只孤独无助的动物。她双眼望着他，没有显示出爱意，也没有显示出惜别之情，仿佛是路人似的。</p></blockquote><h3 id="一小片阴云"><a href="#一小片阴云" class="headerlink" title="一小片阴云"></a>一小片阴云</h3><p>小钱德勒太像 F 了，真的越看越绝望。</p><h3 id="委员会办公室里的长青节"><a href="#委员会办公室里的长青节" class="headerlink" title="委员会办公室里的长青节"></a>委员会办公室里的长青节</h3><p>其实我看着并没有什么体会，只是感叹一下，一百多年前的爱尔兰人讨论政治的时候，遥远的东方现在还没有选举呢。</p><h3 id="母亲"><a href="#母亲" class="headerlink" title="母亲"></a>母亲</h3><p>还是很倾佩这位母亲的。</p><p>下面的这段描写还是很细致的：</p><blockquote><p>郝勒汉先生绝望地指指大厅，那里的听众正在鼓掌和跺脚。他向基尔尼先生求助，又向凯瑟琳求助。但基尔尼先生继续捋着他的胡子，<strong>凯瑟琳则低头望着地下，移动着她新鞋的鞋尖：意思是这并非她的过错。</strong></p></blockquote><h3 id="死者"><a href="#死者" class="headerlink" title="死者"></a>死者</h3><p>印象最深的一篇。</p><p>某次新年舞会散场后，加布里埃尔忽然念起妻子的好来。</p><blockquote><p>加布里埃尔没有与其他人一起到门口。他待在前厅的暗处，拾头凝视着楼梯。一个女人站在第一段楼梯的上部，也在阴影里。他看不见她的脸，但能看见她裙子上赤褐色和橙红色的图案，它们在阴影里呈现出黑色和白色。那是他的妻子。她正倚着栏杆聆听什么。加布里埃尔见她一动不动大感惊讶，也竖起耳朵细听。但他却听不见什么，除了门口台阶上的笑声和争论，只依稀听见钢琴上弹出一些和音和一个男声唱歌的片断。</p><p>他静静地站在昏暗的前厅里，试图捕捉那声音唱的曲调，并仰头注视着他的妻子。她的神态显得优雅而神秘，仿佛她是某种东西的一个象征。他自己问自己，一个女人站在楼梯上的阴影里，倾听远处的音乐，是什么东西的象征呢？如果他是个面家，他会画下她那种神态。她的蓝色毡帽配以黑暗的背景会突出她那古铜色的头发，而她裙子上的深色图案也会突出浅色的图案。假如他是画家，他会把这幅画称作《远方的音乐》。<br>…<br>她正站在满是灰尘的楣窗下面，煤气灯的光焰照亮了她那丰润的古铜色头发，几天前他曾 见她在火边把头发烤千。她神态如前，似乎没有意识到她周围的谈话。终于她转向他们，加布里埃尔发现她双颊泛红，眼睛闪闪发光。</p></blockquote><p>他想起与妻子的点点滴滴。</p><blockquote><p>凌展，天仍然很暗。阴沉昏黄的展光笼罩着房子和河面，天像要垂下来似的。脚下到处是融了的雪水；只有房顶上、码头的栏杆上和空地的围栏上，留着一缕缕、一片片白雪。<br>…<br>她的鞋用一款棕色的包袱包着夹在胳膊下面，双手提着裙子唯恐溅上了雪水。她已不再有什么高雅的神态，但加布里埃尔的眼睛仍然幸福得发亮<br>…<br>她走在他前面，那么轻盈，那么挺直，他极想悄悄地追上去，抓住她的双肩，在她耳边说些可笑而深情的话儿。他觉得她那么娇弱，他渴望着保护她不受伤害，渴望着与她单独待在一起。一些他俩秘密生活的时刻突然像星星一样在他的记忆中闪现。一个淡紫色的信封放在他早餐的杯子旁边，他用手轻轻地抚弄着它。鸟儿在常春藤上唧唧喳喳，窗帘上网状的阳光在地板上闪烁：他幸福得吃不下东西。他们俩站在拥挤的站台上，他把一张车票塞进她戴着手套的温暖的手心。他和她一起在寒冷里站着，透过花格窗向里观望，看一个男人在烈焰熊熊的火炉边制作瓶子。天气很冷。她的脸在寒冷的空气里散发着芬芳，与他的脸离得很近，突然他朝炉边那个男人喊道：</p><p>“火旺不旺，先生？</p><p>那人因为炉子的响声没能听见。这倒也好。否则他可能粗暴地回答。</p></blockquote><p>这可能是个很普遍的经验，不知道大家有没有幻想过与心爱的另一半在末世中生存。</p><blockquote><p>他渴望与她单独在一起，当其他人都已离去。</p></blockquote><p>加布里埃尔因为这些种种美妙的情感体验，来到一处宾馆，想要和妻子做爱。</p><p>但是他的妻子其实因为舞会终了的歌声想起了一位故人（双重意义上的“故人”），她向加布里埃尔坦白了自己初恋（？）的事。</p><p>概括来说，这位初恋先生因为她死了，至少她是这么认为的。</p><p>加布里埃尔感到“某个无形的、蓄意报复的幽灵跟他作对，在它那个朦胧的世界里正纠集力量与他对抗”。</p><blockquote><p>加布里埃尔感到受了羞辱，因为讥讽落了空，也因为从死者引出这么一个人——一个在煤气厂工作的男孩。就在他全心回忆他们在一起的私生活，心里充满柔情、欢乐和欲望时，她却一直在心里把他和另一人比较。一种对自我人格的羞辱意识袭上了他的心头。他发现自己成了个滑稽的人物，扮演一个为姨妈跑腿挣小钱的人，一个神经质的、自作多情的感伤主义者，一个对一群庸俗的人大事演讲并把自己小丑般的欲望理想化，一个他在镜子里警见的那种可怜而愚蠢的家伙。他本能地转身背向光线。以免她会看见他额上燃烧着羞辱。</p></blockquote><p>加布里埃尔勉强听完了妻子的往事，妻子也伤心地睡了。</p><blockquote><p>加布里埃尔斜倚着臂肘，心平气和地看了一会她那蓬乱的头发和半启的嘴唇，听着她深沉的呼吸。原来她生活中有过那么一段浪漫故事：一个男人因为她而死去。现在想到他这个丈大在她生活里扮演了多么可怜的角色，他几乎不再感到痛苦。他注视着正在熟睡的她，仿佛他和她从未像夫妻一样在一起生活过似的。他好奇的眼睛久久地望着她的脸庞和她的头发：当他想着她蓓蕾初绽之际该是什么样子时，一种奇怪的对她友善的怜悯在他的心灵里升起。他甚至不愿对自己说她的脸庞己不再漂亮，但他知道那不再是迈克尔·福瑞为之慨然殉情的脸庞。<br>…<br>房间的空气使他的肩膀觉得寒冷。他小心地钻进被子里，在他妻子的身边躺下。一个接一个，他们全都要变成幽灵。<strong>最好在某种激情全盛时期勇敢地进人那另一个世界，切莫随着年龄增长而凄凉地衰败枯萎。</strong> 他想到躺在他身边的妻子，想到她多年来如何在心里深锁着她的情人告诉她不想活下去时的眼神。</p></blockquote><p>文章的最后：</p><blockquote><p>几声轻轻拍打玻璃的声音使他转过身面向窗户。又开始下雪了。他睡意蒙眬地望着雪花，银白和灰暗的雪花在灯光的衬托下斜斜地飘落。时间己到他出发西行的时候。是的，报纸是对的：<strong>整个爱尔兰都在下雪</strong>。雪落在阴晦的中部平原的每一片土地上，落在没有树木的山丘上，轻轻地落在艾伦沼地上，再往西，轻轻地落进山农河面汹涌澎海的黑浪之中。它也落在山丘上孤零零的教堂墓地的每一个角落，迈克尔·福瑞就埋葬在那里。它飘落下来，厚厚地堆积在歪斜的十字架和墓碑上，堆积在一根根栅栏的尖项上，堆积在光秀秃的荆辣丛上。他听着雪花隐隐约约地飘落，慢慢地睡着了，雪花穿过宇宙轻轻地落下，就像他们的结局似的，落到所有生者和死者身上。</p></blockquote><h2 id="小径分岔的花园"><a href="#小径分岔的花园" class="headerlink" title="小径分岔的花园"></a>小径分岔的花园</h2><p>能稍微看懂的就是《环形废墟》《通天塔图书馆》。</p><p>有一说一，《环形废墟》我甚至猜到了结局，不过还算一个结构精妙的故事。</p><p>《通天塔图书馆》确实令人印象深刻，感觉是做梦会梦的那种类型。最后似乎沾了点永恒轮回的意味。</p><p>其他的一概不懂。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一个拖了很久的读书笔记，简记一下 23 年的读过的两本书。&lt;/p&gt;
&lt;p&gt;感谢 OCR 技术。&lt;/p&gt;
&lt;p&gt;一本是《都柏林人》，另一本是《小径分岔的花园》。&lt;/p&gt;
&lt;h2 id=&quot;都柏林人&quot;&gt;&lt;a href=&quot;#都柏林人&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="闲文" scheme="https://dropsong.github.io/categories/%E9%97%B2%E6%96%87/"/>
    
    
    <category term="书评" scheme="https://dropsong.github.io/tags/%E4%B9%A6%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>苏州园林</title>
    <link href="https://dropsong.github.io/posts/167f15dc.html"/>
    <id>https://dropsong.github.io/posts/167f15dc.html</id>
    <published>2024-06-13T09:32:24.000Z</published>
    <updated>2024-12-09T14:51:44.927Z</updated>
    
    <content type="html"><![CDATA[<p>我已经完全懂了（叉腰.jpg）！</p><p>这些小园林，就是主打一个欲遮半掩。</p><p>雕一个镂空的花纹窗户，外面要么是假山要么是湖。</p><p>一面墙空出一大块，外面一株精甚细腻的小植物得把枝条探进来。</p><p>靠着墙的走廊，不能紧挨着墙，要适时地折一下，和墙空出的部分又是一个赏心悦目的绿植。</p><p>园里还要有假山，假山最好簇着一块怪石，像点什么最好。</p><p>这假山的周围还要有水，水里可以有点鱼，尽量是黑的，红的多了就俗了，可以放两只伸着脑袋的乌龟。</p><p>假山可以探洞，也可以爬，若是要爬，每到一个视野开阔处就是园子的另一个角度。</p><p>假山要是想跨过水面，必须是只通一人的看着不小心就能掉下去的石板小桥。</p><p>水里还须竖着若干小石头磊起来的莫名其妙的小柱子。</p><p>要是园子再大点，还能再弄一片湖，湖里面还有个亭子，去亭子的小桥也是弯弯曲曲的。</p><p>园子里的门，尤其是那种圆门，最好是每换个角度看都不一样，或是藏着点惊喜。看上去就是一副圆形边框的画。</p><p>房子之间还是要有假山的（永远都不嫌多），山上是有亭子的，周围还得用树挡着。</p><p><img src="https://bu.dusays.com/2024/06/13/666ac4b7c0783.jpg" alt="78-1.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4be93cff.jpg" alt="78-2.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4bda5651.jpg" alt="78-3.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4be6d3c0.jpg" alt="78-4.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4bec340f.jpg" alt="78-5.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4b7dbe7f.jpg" alt="78-6.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4b2094dc.jpg" alt="78-7.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4aa245d6.jpg" alt="78-8.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4b9e7f2a.jpg" alt="78-9.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4b7c5875.jpg" alt="78-10.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac5265c87f.jpg" alt="78-11.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac526611ce.jpg" alt="78-12.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac525569e2.jpg" alt="78-13.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac51d82ff9.jpg" alt="78-14.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac519ad577.jpg" alt="78-15.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac526b2adb.jpg" alt="78-16.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac516bfc76.jpg" alt="78-17.jpg"></p><p>其实还是拿着手机随手拍啦。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我已经完全懂了（叉腰.jpg）！&lt;/p&gt;
&lt;p&gt;这些小园林，就是主打一个欲遮半掩。&lt;/p&gt;
&lt;p&gt;雕一个镂空的花纹窗户，外面要么是假山要么是湖。&lt;/p&gt;
&lt;p&gt;一面墙空出一大块，外面一株精甚细腻的小植物得把枝条探进来。&lt;/p&gt;
&lt;p&gt;靠着墙的走廊，不能紧挨着墙，要适时地折一</summary>
      
    
    
    
    <category term="生活" scheme="https://dropsong.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="摄影" scheme="https://dropsong.github.io/tags/%E6%91%84%E5%BD%B1/"/>
    
    <category term="园林" scheme="https://dropsong.github.io/tags/%E5%9B%AD%E6%9E%97/"/>
    
  </entry>
  
  <entry>
    <title>sonny boy</title>
    <link href="https://dropsong.github.io/posts/1b848c05.html"/>
    <id>https://dropsong.github.io/posts/1b848c05.html</id>
    <published>2024-06-03T19:23:56.000Z</published>
    <updated>2024-10-29T16:40:50.663Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1e2cb5113105d05a18f401349987f972b13ee9f83392196e42ed4697fda2d284"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="在此输入密码">在此输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">文章被密码保护。</summary>
    
    
    
    <category term="闲文" scheme="https://dropsong.github.io/categories/%E9%97%B2%E6%96%87/"/>
    
    
    <category term="private1" scheme="https://dropsong.github.io/tags/private1/"/>
    
  </entry>
  
</feed>
