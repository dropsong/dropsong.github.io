<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>loveofpeach&#39;s</title>
  
  <subtitle>tree hole</subtitle>
  <link href="https://loveofpeach.github.io/atom.xml" rel="self"/>
  
  <link href="https://loveofpeach.github.io/"/>
  <updated>2024-04-27T16:31:53.765Z</updated>
  <id>https://loveofpeach.github.io/</id>
  
  <author>
    <name>love of peach</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>游戏引擎 toybox</title>
    <link href="https://loveofpeach.github.io/posts/3bc8141e.html"/>
    <id>https://loveofpeach.github.io/posts/3bc8141e.html</id>
    <published>2024-04-24T14:33:03.000Z</published>
    <updated>2024-04-27T16:31:53.765Z</updated>
    
    <content type="html"><![CDATA[<p>一个简易的游戏引擎，适合刚学了一点语法的小白。</p><p>项目地址：<a href="https://git.nju.edu.cn/jyy/toybox">https://git.nju.edu.cn/jyy/toybox</a></p><h2 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h2><p>阅读过程有 AI 协助。</p><h3 id="toybox-h"><a href="#toybox-h" class="headerlink" title="toybox.h"></a>toybox.h</h3><p>下方代码展开约 280+ 行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toybox.h</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  _____         _           </span></span><br><span class="line"><span class="comment"> * |_   _|___ _ _| |_ ___ _ _ </span></span><br><span class="line"><span class="comment"> *   | | | . | | | . | . |_&#x27;_|</span></span><br><span class="line"><span class="comment"> *   |_| |___|_  |___|___|_,_|</span></span><br><span class="line"><span class="comment"> *           |___|            </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * C/C++ 初学者的第一个游戏 &amp; 动画引擎</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * MIT License</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2024 by Yanyan Jiang and Zesen Liu</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></span><br><span class="line"><span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to deal</span></span><br><span class="line"><span class="comment"> * in the Software without restriction, including without limitation the rights</span></span><br><span class="line"><span class="comment"> * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span></span><br><span class="line"><span class="comment"> * copies of the Software, and to permit persons to whom the Software is</span></span><br><span class="line"><span class="comment"> * furnished to do so, subject to the following conditions:</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></span><br><span class="line"><span class="comment"> * copies or substantial portions of the Software.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></span><br><span class="line"><span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></span><br><span class="line"><span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></span><br><span class="line"><span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></span><br><span class="line"><span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></span><br><span class="line"><span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></span><br><span class="line"><span class="comment"> * SOFTWARE.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * toybox 只提供一个函数 void toybox_run(fps, update, keypress)</span></span><br><span class="line"><span class="comment"> * toybox_run 接收三个参数，然后进入死循环：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - 1. 整数 fps:</span></span><br><span class="line"><span class="comment"> *       每秒刷新的次数 (每秒执行 fps 次 update)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - 2. 函数 update:</span></span><br><span class="line"><span class="comment"> *       void updpate(int w, int h, draw_function draw);</span></span><br><span class="line"><span class="comment"> *       每当时间到时，update 会被调用，其中可以调用 draw(x, y, ch);</span></span><br><span class="line"><span class="comment"> *       在坐标 (x, y) 绘制一个字符 ch。坐标系统：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *            (0,0) ---- x ----&gt;</span></span><br><span class="line"><span class="comment"> *            |          |</span></span><br><span class="line"><span class="comment"> *            |          |</span></span><br><span class="line"><span class="comment"> *            |          |</span></span><br><span class="line"><span class="comment"> *            y ------ (x,y) = ch   //  draw(x, y, ch)</span></span><br><span class="line"><span class="comment"> *            |</span></span><br><span class="line"><span class="comment"> *            v</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - 3. 函数 keypress:</span></span><br><span class="line"><span class="comment"> *       void keypress(int key);</span></span><br><span class="line"><span class="comment"> *       每当收到按键时，keypress 会被调用，key 是按键的 ASCII 码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* -= Toybox API =------------------------------------- */</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*draw_function)</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">char</span> ch)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">toybox_run</span><span class="params">(<span class="type">int</span> fps,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> (*update)(<span class="type">int</span>, <span class="type">int</span>, draw_function draw),</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> (*keypress)(<span class="type">int</span>))</span></span>;</span><br><span class="line"><span class="comment">/* ---------------------------------------------------- */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_W_ 128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_H_ 64</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> append_(buf, str) \</span></span><br><span class="line"><span class="meta">    do &#123; \</span></span><br><span class="line"><span class="meta">        strcpy(buf, str); \</span></span><br><span class="line"><span class="meta">        buf += strlen(str); \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint64_t</span> start_time_;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> w_, h_;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> canvas_[MAX_W_ * MAX_H_];</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">waitkey_</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">get_window_size_</span><span class="params">(<span class="type">int</span> *w, <span class="type">int</span> *h)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">waitkey_</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> startTime = <span class="built_in">GetTickCount</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">GetTickCount</span>() - startTime &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_kbhit()) &#123;</span><br><span class="line">            <span class="keyword">return</span> _getch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">get_window_size_</span><span class="params">(<span class="type">int</span> *w, <span class="type">int</span> *h)</span> </span>&#123;</span><br><span class="line">    CONSOLE_SCREEN_BUFFER_INFO csbi;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">GetConsoleScreenBufferInfo</span>(<span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), &amp;csbi)) &#123;</span><br><span class="line">        *w = csbi.srWindow.Right - csbi.srWindow.Left;</span><br><span class="line">        *h = csbi.srWindow.Bottom - csbi.srWindow.Top + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *w = <span class="number">80</span>;</span><br><span class="line">        *h = <span class="number">25</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// copied from https://github.com/confluentinc/librdkafka</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">gettimeofday</span><span class="params">(<span class="keyword">struct</span> timeval * tp, <span class="keyword">struct</span> timezone * tzp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Note: some broken versions only have 8 trailing zero&#x27;s, the correct epoch has 9 trailing zero&#x27;s</span></span><br><span class="line">    <span class="comment">// This magic number is the number of 100 nanosecond intervals since January 1, 1601 (UTC)</span></span><br><span class="line">    <span class="comment">// until 00:00:00 January 1, 1970</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">uint64_t</span> EPOCH = ((<span class="type">uint64_t</span>) <span class="number">116444736000000000ULL</span>);</span><br><span class="line"></span><br><span class="line">    SYSTEMTIME  system_time;</span><br><span class="line">    FILETIME    file_time;</span><br><span class="line">    <span class="type">uint64_t</span>    time;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetSystemTime</span>( &amp;system_time );</span><br><span class="line">    <span class="built_in">SystemTimeToFileTime</span>( &amp;system_time, &amp;file_time );</span><br><span class="line">    time =  ((<span class="type">uint64_t</span>)file_time.dwLowDateTime )      ;</span><br><span class="line">    time += ((<span class="type">uint64_t</span>)file_time.dwHighDateTime) &lt;&lt; <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    tp-&gt;tv_sec  = (<span class="type">long</span>) ((time - EPOCH) / <span class="number">10000000L</span>);</span><br><span class="line">    tp-&gt;tv_usec = (<span class="type">long</span>) (system_time.wMilliseconds * <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">clear_screen_</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    COORD topLeft  = &#123; <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    HANDLE console = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line">    CONSOLE_SCREEN_BUFFER_INFO screen;</span><br><span class="line">    DWORD written;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetConsoleScreenBufferInfo</span>(console, &amp;screen);</span><br><span class="line">    <span class="built_in">FillConsoleOutputCharacterA</span>(</span><br><span class="line">            console, <span class="string">&#x27; &#x27;</span>, screen.dwSize.X * screen.dwSize.Y, topLeft, &amp;written</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">FillConsoleOutputAttribute</span>(</span><br><span class="line">            console, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE,</span><br><span class="line">            screen.dwSize.X * screen.dwSize.Y, topLeft, &amp;written</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">SetConsoleCursorPosition</span>(console, topLeft);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">waitkey_</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timeval</span> timeout;</span><br><span class="line">    fd_set readfds;</span><br><span class="line">    <span class="type">int</span> retval;</span><br><span class="line"></span><br><span class="line">    timeout.tv_sec = <span class="number">0</span>;</span><br><span class="line">    timeout.tv_usec = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FD_ZERO</span>(&amp;readfds);</span><br><span class="line">    <span class="built_in">FD_SET</span>(STDIN_FILENO, &amp;readfds);</span><br><span class="line"></span><br><span class="line">    retval = <span class="built_in">select</span>(STDIN_FILENO + <span class="number">1</span>, &amp;readfds, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;timeout);</span><br><span class="line">    <span class="keyword">if</span> (retval == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">if</span> (retval) &#123;</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        <span class="built_in">read</span>(STDIN_FILENO, &amp;ch, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ch;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">termios</span> old_;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __attribute__((constructor))</span><br><span class="line"><span class="built_in">termios_init_</span>(<span class="type">void</span>) &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">winsize</span> win;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">termios</span> cur;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ioctl</span>(STDOUT_FILENO, TIOCGWINSZ, &amp;win) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Not a terminal window.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">tcgetattr</span>(STDIN_FILENO, &amp;old_);</span><br><span class="line"></span><br><span class="line">    cur = old_;</span><br><span class="line">    cur.c_lflag &amp;= ~(ICANON | ECHO);</span><br><span class="line">    cur.c_cc[VMIN] = <span class="number">0</span>;</span><br><span class="line">    cur.c_cc[VTIME] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">tcsetattr</span>(STDIN_FILENO, TCSANOW, &amp;cur);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __attribute__((destructor))</span><br><span class="line"><span class="built_in">termios_restore_</span>(<span class="type">void</span>) &#123;</span><br><span class="line">    <span class="built_in">tcsetattr</span>(STDIN_FILENO, TCSANOW, &amp;old_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">get_window_size_</span><span class="params">(<span class="type">int</span> *w, <span class="type">int</span> *h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">winsize</span> win;</span><br><span class="line">    <span class="built_in">ioctl</span>(STDOUT_FILENO, TIOCGWINSZ, &amp;win);</span><br><span class="line"></span><br><span class="line">    *w = win.ws_col &lt; MAX_W_ ? win.ws_col : MAX_W_;</span><br><span class="line">    *h = win.ws_row &lt; MAX_H_ ? win.ws_row : MAX_H_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">clear_screen_</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[H&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">timer_ms_</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timeval</span> tv;</span><br><span class="line">    <span class="built_in">gettimeofday</span>(&amp;tv, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> (tv.tv_sec * <span class="number">1000LL</span>) + (tv.tv_usec / <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __attribute__((constructor))</span><br><span class="line"><span class="built_in">init_timer_</span>(<span class="type">void</span>) &#123;</span><br><span class="line">    start_time_ = <span class="built_in">timer_ms_</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw_</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">char</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &lt;= x &amp;&amp; x &lt; w_ &amp;&amp; <span class="number">0</span> &lt;= y &amp;&amp; y &lt; h_) &#123;</span><br><span class="line">        canvas_[y * w_ + x] = ch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">toybox_run</span><span class="params">(<span class="type">int</span> fps,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> (*update)(<span class="type">int</span>, <span class="type">int</span>, draw_function draw),</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> (*keypress)(<span class="type">int</span>))</span> </span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> last_time = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i, last_size = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">char</span> buffer[MAX_W_ * MAX_H_ + MAX_H_ * <span class="number">2</span> + <span class="number">4096</span>], *head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> key = <span class="built_in">waitkey_</span>();</span><br><span class="line">        <span class="keyword">if</span> (key &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (keypress) &#123;</span><br><span class="line">                <span class="built_in">keypress</span>(key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">uint64_t</span> t = <span class="built_in">timer_ms_</span>() - start_time_;</span><br><span class="line">            <span class="keyword">if</span> (t - last_time &lt;= <span class="number">1000</span> / fps) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            last_time = t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">get_window_size_</span>(&amp;w_, &amp;h_);</span><br><span class="line">        <span class="built_in">memset</span>(canvas_, <span class="string">&#x27; &#x27;</span>, <span class="built_in">sizeof</span>(canvas_));</span><br><span class="line">        <span class="built_in">update</span>(w_, h_, draw_);</span><br><span class="line"></span><br><span class="line">        head = buffer;</span><br><span class="line">        <span class="built_in">clear_screen_</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((w_ &lt;&lt; <span class="number">16</span>) + h_ != last_size) &#123;</span><br><span class="line">            last_size = (w_ &lt;&lt; <span class="number">16</span>) + h_;</span><br><span class="line">            <span class="built_in">append_</span>(head, <span class="string">&quot;\033[2J&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; h_; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">append_</span>(head, <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">strncpy</span>(head, &amp;canvas_[i * w_], w_);</span><br><span class="line">            head += w_;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">fwrite</span>(buffer, head - buffer, <span class="number">1</span>, stdout);</span><br><span class="line">        <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个简单的游戏和动画引擎，称为 “toybox”。它提供了一个函数 <code>toybox_run</code>，该函数接受三个参数：</p><ol><li>整数 <code>fps</code>：表示每秒刷新的次数，也就是每秒调用 <code>update</code> 函数的次数。</li><li>函数指针 <code>update</code>：一个函数，定义为 <code>void update(int w, int h, draw_function draw)</code>，表示每次刷新时被调用的更新函数。它可以接受当前窗口的宽度和高度，并使用 <code>draw</code> 函数在屏幕上绘制图形。</li><li>函数指针 <code>keypress</code>：一个函数，定义为 <code>void keypress(int key)</code>，表示当按下键盘按键时被调用的函数。</li></ol><p>在主循环中，程序会不断等待键盘输入或者根据设定的帧率调用 <code>update</code> 函数进行屏幕更新，然后根据更新后的画面重新绘制屏幕内容。</p><p>接下来我们从头到尾看一看里面的细节。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> append_(buf, str) \</span></span><br><span class="line"><span class="meta">    do &#123; \</span></span><br><span class="line"><span class="meta">        strcpy(buf, str); \</span></span><br><span class="line"><span class="meta">        buf += strlen(str); \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br></pre></td></tr></table></figure><p>这段代码定义了一个宏 <code>append_</code>，用于将字符串追加到指定的缓冲区中。</p><ol><li><code>#define append_(buf, str)</code>：这是宏的定义，<code>append_</code> 是宏的名称，<code>(buf, str)</code> 是宏的参数列表，这里有两个参数，<code>buf</code> 表示目标缓冲区，<code>str</code> 表示要追加的字符串。</li><li><code>do &#123; ... &#125; while (0)：</code> 这是一个 do-while 循环，它的主体是一系列语句，其中包括了复制字符串和移动指针的操作。<code>do &#123; ... &#125;</code> 表示循环体，<code>while (0)</code> 则是一个条件，由于条件为 0，因此循环只会执行一次。</li><li><code>strcpy(buf, str)</code>：这一行使用 <code>strcpy</code> 函数将字符串 <code>str</code> 复制到缓冲区 <code>buf</code> 中。</li><li><code>buf += strlen(str)</code>：这一行将指针 <code>buf</code> 向后移动，移动的距离是字符串 <code>str</code> 的长度，这样可以保证下一次追加的字符串会接在当前字符串的末尾。</li></ol><p>这个宏的作用是将字符串追加到缓冲区中，类似于字符串拼接操作。在每次调用 <code>append_</code> 宏时，它会将指定的字符串添加到目标缓冲区的末尾，并更新指针以指向新的末尾位置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">char</span> canvas_[MAX_W_ * MAX_H_];</span><br></pre></td></tr></table></figure><p><code>canvas_</code> 数组是用来表示绘图区域的缓冲区。在这个简单的游戏和动画引擎中，屏幕上的图像是通过在这个缓冲区中绘制字符来实现的。每个字符对应着屏幕上的一个像素或一个小图形。</p><p>在每次调用 <code>update</code> 函数时，会根据游戏逻辑更新 <code>canvas_</code> 数组中的内容，然后将更新后的内容绘制到屏幕上。因此，<code>canvas_</code> 数组存储了当前屏幕上的图像信息，通过更新这个数组，可以实现屏幕内容的动态变化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">waitkey_</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>虽然在这段代码中，函数的声明和定义紧密相邻，看起来似乎有些多余，但这是一个良好的编程实践，可以帮助<strong>提高代码的可维护性和可读性</strong>。让读者快速了解函数的接口，包括返回类型和参数列表，而不必深入到函数的定义中去查找这些信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br></pre></td></tr></table></figure><p>在这段代码中，它的作用是根据当前编译环境是否是 Windows 平台来进行条件编译。</p><p>这个技术常用于实现跨平台的编译，在不同的平台上使用不同的代码逻辑。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>该头文件主要用于 Windows 平台下的一些系统调用和操作。</p><p>在这个代码中，<code>&lt;windows.h&gt;</code> 被用来进行以下操作：</p><ol><li><strong>获取系统时间和延时操作</strong>：通过 <code>GetTickCount()</code> 函数可以获取系统启动后经过的毫秒数，用于实现定时器功能。另外，该头文件还定义了与时间相关的数据类型和函数，例如 <code>SYSTEMTIME</code> 结构体和 <code>GetSystemTime()</code> 函数。</li><li><strong>控制台操作</strong>：例如 <code>GetConsoleScreenBufferInfo()</code> 函数用于获取控制台屏幕缓冲区信息，<code>SetConsoleCursorPosition()</code> 函数用于设置控制台光标位置，以及一些用于控制控制台文本属性和颜色的宏定义。</li><li><strong>键盘输入操作</strong>：<code>&lt;conio.h&gt;</code> 头文件通常与 <code>&lt;windows.h&gt;</code> 一起使用，用于实现控制台下的键盘输入操作。在这个代码中，<code>&lt;conio.h&gt;</code> 用于定义 <code>_kbhit()</code> 和 <code>_getch()</code> 函数，用于检测是否有键盘输入和获取键盘输入字符。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">waitkey_</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> startTime = <span class="built_in">GetTickCount</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">GetTickCount</span>() - startTime &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_kbhit()) &#123;</span><br><span class="line">            <span class="keyword">return</span> _getch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 10 毫秒内轮询检查是否有键盘输入，若有则返回该输入，否则返回 -1.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">get_window_size_</span><span class="params">(<span class="type">int</span> *w, <span class="type">int</span> *h)</span> </span>&#123;</span><br><span class="line">    CONSOLE_SCREEN_BUFFER_INFO csbi;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">GetConsoleScreenBufferInfo</span>(<span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), &amp;csbi)) &#123;</span><br><span class="line">        *w = csbi.srWindow.Right - csbi.srWindow.Left;</span><br><span class="line">        *h = csbi.srWindow.Bottom - csbi.srWindow.Top + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *w = <span class="number">80</span>;</span><br><span class="line">        *h = <span class="number">25</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数首先声明了一个 <code>CONSOLE_SCREEN_BUFFER_INFO</code> 结构体变量 <code>csbi</code>，用于存储获取到的控制台屏幕缓冲区信息。然后调用 <code>GetConsoleScreenBufferInfo</code> 函数，将获取到的信息存储在 <code>csbi</code> 变量中。</p><p>接着，函数通过计算 <code>csbi</code> 中的 <code>srWindow</code> 结构体中的 <code>Right</code>、<code>Left</code>、<code>Bottom</code> 和 <code>Top</code> 字段来计算控制台窗口的宽度和高度。具体地，控制台窗口的宽度等于 <code>Right - Left</code>，高度等于 <code>Bottom - Top + 1</code>。然后将计算得到的宽度和高度分别存储在传入的指针参数 <code>w</code> 和 <code>h</code> 所指向的位置。</p><p>如果调用 <code>GetConsoleScreenBufferInfo</code> 函数失败（可能是因为当前程序并非在控制台中运行），则函数将宽度和高度分别设为默认值 80 和 25。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// copied from https://github.com/confluentinc/librdkafka</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">gettimeofday</span><span class="params">(<span class="keyword">struct</span> timeval * tp, <span class="keyword">struct</span> timezone * tzp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Note: some broken versions only have 8 trailing zero&#x27;s, the correct epoch has 9 trailing zero&#x27;s</span></span><br><span class="line">    <span class="comment">// This magic number is the number of 100 nanosecond intervals since January 1, 1601 (UTC)</span></span><br><span class="line">    <span class="comment">// until 00:00:00 January 1, 1970</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">uint64_t</span> EPOCH = ((<span class="type">uint64_t</span>) <span class="number">116444736000000000ULL</span>);</span><br><span class="line"></span><br><span class="line">    SYSTEMTIME  system_time;</span><br><span class="line">    FILETIME    file_time;</span><br><span class="line">    <span class="type">uint64_t</span>    time;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetSystemTime</span>( &amp;system_time );</span><br><span class="line">    <span class="built_in">SystemTimeToFileTime</span>( &amp;system_time, &amp;file_time );</span><br><span class="line">    time =  ((<span class="type">uint64_t</span>)file_time.dwLowDateTime )      ;</span><br><span class="line">    time += ((<span class="type">uint64_t</span>)file_time.dwHighDateTime) &lt;&lt; <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    tp-&gt;tv_sec  = (<span class="type">long</span>) ((time - EPOCH) / <span class="number">10000000L</span>);</span><br><span class="line">    tp-&gt;tv_usec = (<span class="type">long</span>) (system_time.wMilliseconds * <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码看个大概就行。</p><p>这个函数名为 <code>gettimeofday</code>，<strong>它的功能是获取当前系统时间，并将其以秒和微秒的形式存储在 <code>struct timeval</code> 结构体指针 <code>tp</code> 中。</strong> 这个函数类似于 Unix/Linux 系统中的 <code>gettimeofday</code> 函数，但是实现方式有所不同。</p><p>具体来说，这个函数的步骤如下：</p><ol><li>定义一个静态常量 <code>EPOCH</code>，用于表示从 1601 年 1 月 1 日 UTC 时间零点开始到 1970 年 1 月 1 日 UTC 时间零点之间的时间间隔，以 100 毫微秒（100纳秒）为单位。</li><li>调用 Windows 平台特有的 <code>GetSystemTime</code> 函数，获取当前系统时间，并将结果存储在 <code>SYSTEMTIME</code> 结构体变量 <code>system_time</code> 中。</li><li>调用 Windows 平台特有的 <code>SystemTimeToFileTime</code> 函数，将 <code>system_time</code> 转换为 <code>FILETIME</code> 结构体变量 <code>file_time</code>，表示自 1601 年 1 月 1 日以来的时间。</li><li>将 <code>file_time</code> 中的时间转换为以 100 毫微秒为单位的整数，存储在 <code>time</code> 变量中。</li><li>根据 <code>time</code> 变量和 <code>EPOCH</code> 值的差值，计算出秒数并存储在 <code>tv_sec</code> 成员中，计算出微秒数并存储在 <code>tv_usec</code> 成员中。</li><li>返回 0，表示函数执行成功。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">clear_screen_</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    COORD topLeft  = &#123; <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    HANDLE console = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line">    CONSOLE_SCREEN_BUFFER_INFO screen;</span><br><span class="line">    DWORD written;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetConsoleScreenBufferInfo</span>(console, &amp;screen);</span><br><span class="line">    <span class="built_in">FillConsoleOutputCharacterA</span>(</span><br><span class="line">            console, <span class="string">&#x27; &#x27;</span>, screen.dwSize.X * screen.dwSize.Y, topLeft, &amp;written</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">FillConsoleOutputAttribute</span>(</span><br><span class="line">            console, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE,</span><br><span class="line">            screen.dwSize.X * screen.dwSize.Y, topLeft, &amp;written</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">SetConsoleCursorPosition</span>(console, topLeft);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的功能是清空控制台屏幕上的所有内容，并将光标移动到左上角位置。具体来说：</p><ol><li>创建一个 <code>COORD</code> 结构体变量 <code>topLeft</code>，表示控制台屏幕的左上角位置。</li><li>获取标准输出控制台的句柄，并将其存储在 <code>HANDLE</code> 类型的变量 <code>console</code> 中，使用 <code>GetStdHandle(STD_OUTPUT_HANDLE)</code> 函数实现。</li><li>声明一个 <code>CONSOLE_SCREEN_BUFFER_INFO</code> 结构体变量 <code>screen</code>，用于存储控制台屏幕缓冲区的信息。</li><li>调用 <code>GetConsoleScreenBufferInfo</code> 函数，获取控制台屏幕缓冲区的信息，并将结果存储在 <code>screen</code> 变量中。</li><li>调用 <code>FillConsoleOutputCharacterA</code> 函数，将控制台屏幕上所有位置的字符都填充为空格字符，使用空格字符 <code>&#39; &#39;</code>。</li><li>调用 <code>FillConsoleOutputAttribute</code> 函数，将控制台屏幕上所有位置的文本属性都填充为前景色为白色（红、绿、蓝三种颜色混合）。</li><li>最后，使用 <code>SetConsoleCursorPosition</code> 函数将控制台光标移动到左上角位置，以确保下次输出从屏幕的左上角开始。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">timer_ms_</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timeval</span> tv;</span><br><span class="line">    <span class="built_in">gettimeofday</span>(&amp;tv, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> (tv.tv_sec * <span class="number">1000LL</span>) + (tv.tv_usec / <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的功能是获取当前系统时间，并以毫秒为单位返回。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> __attribute__((constructor))</span><br><span class="line"><span class="built_in">init_timer_</span>(<span class="type">void</span>) &#123;</span><br><span class="line">    start_time_ = <span class="built_in">timer_ms_</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数使用 <code>__attribute__((constructor))</code> 属性，表示它会在程序运行时自动执行，并在其他代码之前被调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">toybox_run</span><span class="params">(<span class="type">int</span> fps,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> (*update)(<span class="type">int</span>, <span class="type">int</span>, draw_function draw),</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> (*keypress)(<span class="type">int</span>))</span> </span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> last_time = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i, last_size = <span class="number">-1</span>; <span class="comment">// 上一次窗口大小</span></span><br><span class="line">    <span class="type">char</span> buffer[MAX_W_ * MAX_H_ + MAX_H_ * <span class="number">2</span> + <span class="number">4096</span>], *head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> key = <span class="built_in">waitkey_</span>();</span><br><span class="line">        <span class="keyword">if</span> (key &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (keypress) &#123; <span class="comment">// 检查函数指针是否有效</span></span><br><span class="line">                <span class="built_in">keypress</span>(key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">// “懒绘制”</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">uint64_t</span> t = <span class="built_in">timer_ms_</span>() - start_time_;</span><br><span class="line">            <span class="keyword">if</span> (t - last_time &lt;= <span class="number">1000</span> / fps) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;  <span class="comment">// 继续等待</span></span><br><span class="line">            &#125;</span><br><span class="line">            last_time = t; <span class="comment">// 吉时已到，刷新</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新游戏状态</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">get_window_size_</span>(&amp;w_, &amp;h_); <span class="comment">// 更新窗口大小</span></span><br><span class="line">        <span class="built_in">memset</span>(canvas_, <span class="string">&#x27; &#x27;</span>, <span class="built_in">sizeof</span>(canvas_));</span><br><span class="line">        <span class="built_in">update</span>(w_, h_, draw_); <span class="comment">// 绘制画面到 canvas 数组</span></span><br><span class="line"></span><br><span class="line">        head = buffer;</span><br><span class="line">        <span class="built_in">clear_screen_</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((w_ &lt;&lt; <span class="number">16</span>) + h_ != last_size) &#123;</span><br><span class="line">            last_size = (w_ &lt;&lt; <span class="number">16</span>) + h_;</span><br><span class="line">            <span class="built_in">append_</span>(head, <span class="string">&quot;\033[2J&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; h_; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">append_</span>(head, <span class="string">&quot;\r\n&quot;</span>); <span class="comment">// 换行</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">strncpy</span>(head, &amp;canvas_[i * w_], w_);  <span class="comment">// 拷贝一行</span></span><br><span class="line">            head += w_; <span class="comment">// 移动指针到下一行</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">fwrite</span>(buffer, head - buffer, <span class="number">1</span>, stdout); <span class="comment">// 数据写入标准输出流</span></span><br><span class="line">        <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，对于代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((w_ &lt;&lt; <span class="number">16</span>) + h_ != last_size) &#123;</span><br><span class="line">    last_size = (w_ &lt;&lt; <span class="number">16</span>) + h_;</span><br><span class="line">    <span class="built_in">append_</span>(head, <span class="string">&quot;\033[2J&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的作用是在每次循环中检查当前窗口大小是否发生了变化，如果发生了变化，则清空屏幕，并将新的窗口大小记录下来，以便下次比较。</p><ol><li><code>(w_ &lt;&lt; 16) + h_</code>：这一部分将当前窗口的宽度 <code>w_</code> 左移 16 位（相当于乘以 65536），然后加上窗口的高度 <code>h_</code>。这个操作可以<strong>将窗口的宽度和高度合并成一个整数，用于唯一标识窗口的大小。</strong></li><li><code>append_(head, &quot;\033[2J&quot;);</code>：将清空屏幕的控制字符序列 <code>&quot;\033[2J&quot;</code> 追加到 <code>head</code> 中。</li></ol><h3 id="hello-cpp"><a href="#hello-cpp" class="headerlink" title="hello.cpp"></a>hello.cpp</h3><p>该代码在整个小黑框内打印字符，按下按键后，小黑框内打印输入的字符。</p><p>效果：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/8YJ9EtlM9T8?si=deaCg1WrF9h5lrOq" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;toybox.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k = <span class="string">&#x27;?&#x27;</span>, t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; w; x++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; h; y++)</span><br><span class="line">            <span class="built_in">draw</span>(x, y, k);</span><br><span class="line">    <span class="built_in">draw</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;-\\|/&quot;</span>[(t++) / <span class="number">5</span> % <span class="number">4</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keypress</span><span class="params">(<span class="type">int</span> ch)</span> </span>&#123;</span><br><span class="line">    k = ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">toybox_run</span>(<span class="number">30</span>, update, keypress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，update() 和 keypress() 都是需要自己实现的。</p><p>值得一瞧的是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">draw</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;-\\|/&quot;</span>[(t++) / <span class="number">5</span> % <span class="number">4</span>]);</span><br></pre></td></tr></table></figure><p>这玩意实现了一个小动画。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>请参考 toybox.h 头部的注释和 hello.cpp 的例子。</p><p>C/C++ 都可以从以下模板开始，只需实现 “TODO” 中更新屏幕和响应按键逻辑 (可以不提供响应按键的 keypress) 即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;toybox.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toybox_run(fps, update, keypress)</span></span><br><span class="line"><span class="comment">// - 进入游戏/动画主循环</span></span><br><span class="line"><span class="comment">// - 每秒 fps 次调用 update(w, h, draw)</span></span><br><span class="line"><span class="comment">// - 当任何时候有按键时，调用 keypress(key)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当前屏幕大小为 w x h (此时屏幕为空)</span></span><br><span class="line">    <span class="comment">// 可以使用 draw(x, y, ch) 可以在第 x 列第 y 行绘制字符 h</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keypress</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获得一个按键，例如 W, A, S, D</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">toybox_run</span>(<span class="number">20</span>, update, keypress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;toybox.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">toybox_run</span>(<span class="number">1</span>, [](<span class="type">int</span> w, <span class="type">int</span> h, <span class="keyword">auto</span> draw) &#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        t++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; w; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; h; y++) &#123;</span><br><span class="line">                <span class="built_in">draw</span>(x, y, <span class="string">&#x27;0&#x27;</span> + t % <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// snake.cpp</span></span><br><span class="line"><span class="comment">// Author: GPT-4-turbo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../toybox.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义蛇的方向</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; UP, DOWN, LEFT, RIGHT &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 蛇的初始方向</span></span><br><span class="line">Direction dir = RIGHT;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 蛇的身体，用一系列的 x,y 坐标表示</span></span><br><span class="line">std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; snake = &#123;&#123;<span class="number">5</span>, <span class="number">5</span>&#125;, &#123;<span class="number">5</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">3</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 食物的位置</span></span><br><span class="line">std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; food = &#123;<span class="number">7</span>, <span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 游戏是否结束</span></span><br><span class="line"><span class="type">bool</span> gameOver = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成食物</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">generateFood</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    food.first = <span class="built_in">rand</span>() % w;</span><br><span class="line">    food.second = <span class="built_in">rand</span>() % h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染游戏</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">render</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, <span class="type">void</span>(*draw)(<span class="type">int</span>, <span class="type">int</span>, <span class="type">char</span>))</span> </span>&#123;</span><br><span class="line">    <span class="built_in">update</span>();</span><br><span class="line">    <span class="keyword">if</span> (gameOver) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清屏</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; w; x++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; h; y++) &#123;</span><br><span class="line">            <span class="built_in">draw</span>(x, y, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制蛇</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;part : snake) &#123;</span><br><span class="line">        <span class="built_in">draw</span>(part.first, part.second, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制食物</span></span><br><span class="line">    <span class="built_in">draw</span>(food.first, food.second, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理按键</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keypress</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>: dir = UP; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>: dir = DOWN; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>: dir = LEFT; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>: dir = RIGHT; <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新游戏状态</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (gameOver) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算蛇头的新位置</span></span><br><span class="line">    std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; head = snake.<span class="built_in">front</span>();</span><br><span class="line">    <span class="keyword">switch</span> (dir) &#123;</span><br><span class="line">        <span class="keyword">case</span> UP:    head.second--; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DOWN:  head.second++; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LEFT:  head.first--; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> RIGHT: head.first++; <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查蛇是否撞墙或撞到自己</span></span><br><span class="line">    <span class="keyword">if</span> (head.first &lt; <span class="number">0</span> || head.second &lt; <span class="number">0</span> || head.first &gt;= <span class="number">80</span> || head.second &gt;= <span class="number">25</span> || std::<span class="built_in">find</span>(snake.<span class="built_in">begin</span>(), snake.<span class="built_in">end</span>(), head) != snake.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        gameOver = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将新头部添加到蛇的身体中</span></span><br><span class="line">    snake.<span class="built_in">insert</span>(snake.<span class="built_in">begin</span>(), head);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否吃到食物</span></span><br><span class="line">    <span class="keyword">if</span> (head == food) &#123;</span><br><span class="line">        <span class="built_in">generateFood</span>(<span class="number">80</span>, <span class="number">25</span>); <span class="comment">// 假设屏幕大小为 80x25</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 移除蛇</span></span><br><span class="line">        snake.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">toybox_run</span>(<span class="number">10</span>, render, keypress); <span class="comment">// 假设 toybox_run 函数接受一个更新游戏状态的函数作为参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tetris"><a href="#tetris" class="headerlink" title="tetris"></a>tetris</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tetris.cpp</span></span><br><span class="line"><span class="comment">// Author: Claude-3-Opus</span></span><br><span class="line"><span class="comment">// With a few small bug fixes.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../toybox.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> BOARD_WIDTH = <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> BOARD_HEIGHT = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> BLOCK_SIZE = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> board[BOARD_HEIGHT][BOARD_WIDTH] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> block[BLOCK_SIZE][BLOCK_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> blockX, blockY;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">generateBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    blockX = BOARD_WIDTH / <span class="number">2</span> - BLOCK_SIZE / <span class="number">2</span>;</span><br><span class="line">    blockY = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Claude-3 made a mistake here: it forgot to clear the block.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BLOCK_SIZE; j++)</span><br><span class="line">            block[i][j] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> blockType = <span class="built_in">rand</span>() % <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">switch</span> (blockType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">// I</span></span><br><span class="line">            block[<span class="number">1</span>][<span class="number">0</span>] = block[<span class="number">1</span>][<span class="number">1</span>] = block[<span class="number">1</span>][<span class="number">2</span>] = block[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// J</span></span><br><span class="line">            block[<span class="number">0</span>][<span class="number">1</span>] = block[<span class="number">1</span>][<span class="number">1</span>] = block[<span class="number">2</span>][<span class="number">0</span>] = block[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>; </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: <span class="comment">// L</span></span><br><span class="line">            block[<span class="number">0</span>][<span class="number">0</span>] = block[<span class="number">1</span>][<span class="number">0</span>] = block[<span class="number">2</span>][<span class="number">0</span>] = block[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">// O</span></span><br><span class="line">            block[<span class="number">0</span>][<span class="number">0</span>] = block[<span class="number">0</span>][<span class="number">1</span>] = block[<span class="number">1</span>][<span class="number">0</span>] = block[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>: <span class="comment">// S</span></span><br><span class="line">            block[<span class="number">1</span>][<span class="number">0</span>] = block[<span class="number">1</span>][<span class="number">1</span>] = block[<span class="number">0</span>][<span class="number">1</span>] = block[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>: <span class="comment">// T</span></span><br><span class="line">            block[<span class="number">0</span>][<span class="number">0</span>] = block[<span class="number">0</span>][<span class="number">1</span>] = block[<span class="number">0</span>][<span class="number">2</span>] = block[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>: <span class="comment">// Z</span></span><br><span class="line">            block[<span class="number">0</span>][<span class="number">0</span>] = block[<span class="number">0</span>][<span class="number">1</span>] = block[<span class="number">1</span>][<span class="number">1</span>] = block[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> block[BLOCK_SIZE][BLOCK_SIZE])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BLOCK_SIZE; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (block[i][j]) &#123;</span><br><span class="line">                <span class="type">int</span> newX = x + j;</span><br><span class="line">                <span class="type">int</span> newY = y + i;</span><br><span class="line">                <span class="keyword">if</span> (newX &lt; <span class="number">0</span> || newX &gt;= BOARD_WIDTH || newY &lt; <span class="number">0</span> || newY &gt;= BOARD_HEIGHT || board[newY][newX]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotateBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> temp[BLOCK_SIZE][BLOCK_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BLOCK_SIZE; j++) &#123;</span><br><span class="line">            temp[i][j] = block[BLOCK_SIZE - <span class="number">1</span> - j][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Claude-3 made a mistake here (now fixed):</span></span><br><span class="line">    <span class="comment">// it wrote isValid(int x, int y) that tests the validity for the</span></span><br><span class="line">    <span class="comment">// global block. temp is created but is never tested.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isValid</span>(blockX, blockY, temp)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BLOCK_SIZE; j++) &#123;</span><br><span class="line">                block[i][j] = temp[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BLOCK_SIZE; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (block[i][j]) &#123;</span><br><span class="line">                board[blockY + i][blockX + j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clearLines</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = BOARD_HEIGHT - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">bool</span> isFull = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BOARD_WIDTH; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!board[i][j]) &#123;</span><br><span class="line">                isFull = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (isFull) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = i; k &gt; <span class="number">0</span>; k--) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BOARD_WIDTH; j++) &#123;</span><br><span class="line">                    board[k][j] = board[k - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawBoard</span><span class="params">(draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BOARD_HEIGHT; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BOARD_WIDTH; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j]) &#123;</span><br><span class="line">                <span class="built_in">draw</span>(j, i, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">draw</span>(j, i, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BLOCK_SIZE; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (block[i][j]) &#123;</span><br><span class="line">                <span class="built_in">draw</span>(blockX + j, blockY + i, <span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isValid</span>(blockX, blockY + <span class="number">1</span>, block)) &#123;</span><br><span class="line">        <span class="built_in">mergeBlock</span>();</span><br><span class="line">        <span class="built_in">clearLines</span>();</span><br><span class="line">        <span class="built_in">generateBlock</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isValid</span>(blockX, blockY, block)) &#123;</span><br><span class="line">            <span class="comment">// Game Over</span></span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">3</span>, <span class="number">10</span>, <span class="string">&#x27;G&#x27;</span>);</span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">4</span>, <span class="number">10</span>, <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="string">&#x27;M&#x27;</span>);</span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">6</span>, <span class="number">10</span>, <span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">8</span>, <span class="number">10</span>, <span class="string">&#x27;O&#x27;</span>); </span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">9</span>, <span class="number">10</span>, <span class="string">&#x27;V&#x27;</span>);</span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">11</span>, <span class="number">10</span>, <span class="string">&#x27;R&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        blockY++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">drawBoard</span>(draw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keypress</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isValid</span>(blockX - <span class="number">1</span>, blockY, block)) &#123;</span><br><span class="line">                blockX--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isValid</span>(blockX + <span class="number">1</span>, blockY, block)) &#123;</span><br><span class="line">                blockX++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">            <span class="built_in">rotateBlock</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isValid</span>(blockX, blockY + <span class="number">1</span>, block)) &#123;</span><br><span class="line">                blockY++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">generateBlock</span>();</span><br><span class="line">    <span class="built_in">toybox_run</span>(<span class="number">3</span>, update, keypress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rasterize"><a href="#rasterize" class="headerlink" title="rasterize"></a>rasterize</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rasterize.cpp</span></span><br><span class="line"><span class="comment">// Author: GPT-4-turbo</span></span><br><span class="line"><span class="comment">// 有轻微手工修改</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../toybox.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span> <span class="comment">// For std::abs and std::round</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">int</span> x, <span class="type">int</span> y): <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">p0</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span>, <span class="title">p1</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span>, <span class="title">p2</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawLine</span><span class="params">(Point p0, Point p1, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> dx = std::<span class="built_in">abs</span>(p1.x - p0.x), sx = p0.x &lt; p1.x ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> dy = -std::<span class="built_in">abs</span>(p1.y - p0.y), sy = p0.y &lt; p1.y ? <span class="number">1</span> : <span class="number">-1</span>; </span><br><span class="line">    <span class="type">int</span> err = dx + dy, e2; <span class="comment">/* error value e_xy */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">draw</span>(p0.x, p0.y, <span class="string">&#x27;*&#x27;</span>); <span class="comment">// 使用 &#x27;*&#x27; 绘制线段</span></span><br><span class="line">        <span class="keyword">if</span> (p0.x == p1.x &amp;&amp; p0.y == p1.y) <span class="keyword">break</span>;</span><br><span class="line">        e2 = <span class="number">2</span> * err;</span><br><span class="line">        <span class="keyword">if</span> (e2 &gt;= dy) &#123; err += dy; p0.x += sx; &#125;</span><br><span class="line">        <span class="keyword">if</span> (e2 &lt;= dx) &#123; err += dx; p0.y += sy; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">drawLine</span>(p0, p1, draw);</span><br><span class="line">    <span class="built_in">drawLine</span>(p1, p2, draw);</span><br><span class="line">    <span class="built_in">drawLine</span>(p0, p2, draw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keypress</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>: p0.y -= <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>: p0.y += <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>: p0.x -= <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>: p0.x += <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;W&#x27;</span>: p1.y -= <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>: p1.y += <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>: p1.x -= <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: p1.x += <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">toybox_run</span>(<span class="number">20</span>, update, keypress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo:</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/7Hk3bW0yT2s?si=HwTj1YCSI2RR3Ae5" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><h2 id="飞机大战"><a href="#飞机大战" class="headerlink" title="飞机大战"></a>飞机大战</h2><p>自己写了一个，整体思路不是很难。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../toybox.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; STILL, UP, DOWN, LEFT, RIGHT &#125;;</span><br><span class="line">Direction dir = STILL;</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>, gameOver;</span><br><span class="line"><span class="type">bool</span> fruit_mode, K_mode;</span><br><span class="line"><span class="type">int</span> score, enemy_num;</span><br><span class="line"></span><br><span class="line">std::set&lt;std::pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; Kmode_bullet;</span><br><span class="line">std::set&lt;std::pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; Kmode_bullet2; <span class="comment">// 分裂弹</span></span><br><span class="line">std::set&lt;std::pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; normal_bullet;</span><br><span class="line">std::set&lt;std::pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; targets; <span class="comment">// 敌人坐标</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keypress</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>: dir = UP; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>: dir = DOWN; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>: dir = LEFT; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>: dir = RIGHT; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;k&#x27;</span>: K_mode = !K_mode; <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fly_x, fly_y;</span><br><span class="line"><span class="comment">// --x--------</span></span><br><span class="line"><span class="comment">// |     /\</span></span><br><span class="line"><span class="comment">// y    /  \</span></span><br><span class="line"><span class="comment">// |    ----</span></span><br><span class="line"><span class="comment">// |</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawBody</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (dir) &#123;</span><br><span class="line">        <span class="keyword">case</span> STILL: <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> UP:</span><br><span class="line">            <span class="keyword">if</span>(fly_y<span class="number">-3</span> &gt;= <span class="number">0</span>) fly_y--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DOWN:</span><br><span class="line">            <span class="keyword">if</span>(fly_y+<span class="number">1</span> &lt; h) fly_y++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LEFT:</span><br><span class="line">            <span class="keyword">if</span>(fly_x<span class="number">-1</span> &gt;= <span class="number">0</span>) fly_x--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> RIGHT:</span><br><span class="line">            <span class="keyword">if</span>(fly_x+<span class="number">4</span> &lt; w) fly_x++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dir = STILL;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">draw</span>(fly_x+<span class="number">1</span>, fly_y<span class="number">-2</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(fly_x+<span class="number">2</span>, fly_y<span class="number">-2</span>, <span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(fly_x, fly_y<span class="number">-1</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(fly_x+<span class="number">3</span>, fly_y<span class="number">-1</span>, <span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        <span class="built_in">draw</span>(fly_x+i, fly_y, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updBullet</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> it = normal_bullet.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(; it != normal_bullet.<span class="built_in">end</span>();) &#123;</span><br><span class="line">        <span class="type">int</span> nx = it-&gt;first, ny = it-&gt;second<span class="number">-2</span>;</span><br><span class="line">        it = normal_bullet.<span class="built_in">erase</span>(it);</span><br><span class="line">        <span class="keyword">if</span>(ny &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        normal_bullet.<span class="built_in">insert</span>(&#123;nx, ny&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> it2 = Kmode_bullet.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(; it2 != Kmode_bullet.<span class="built_in">end</span>();) &#123;</span><br><span class="line">        <span class="type">int</span> nx = it2-&gt;first, ny = it2-&gt;second<span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ny &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nx+<span class="number">1</span> &lt;= w)</span><br><span class="line">                Kmode_bullet2.<span class="built_in">insert</span>(&#123;nx+<span class="number">1</span>, ny&#125;);</span><br><span class="line">            <span class="keyword">if</span>(nx<span class="number">-1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">                Kmode_bullet2.<span class="built_in">insert</span>(&#123;nx<span class="number">-1</span>, ny&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        it2 = Kmode_bullet.<span class="built_in">erase</span>(it2);</span><br><span class="line">        <span class="keyword">if</span>(ny &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        Kmode_bullet.<span class="built_in">insert</span>(&#123;nx, ny&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!K_mode) &#123;</span><br><span class="line">        normal_bullet.<span class="built_in">insert</span>(&#123;fly_x+<span class="number">1</span>, fly_y<span class="number">-3</span>&#125;);</span><br><span class="line">        normal_bullet.<span class="built_in">insert</span>(&#123;fly_x+<span class="number">2</span>, fly_y<span class="number">-3</span>&#125;);</span><br><span class="line">        <span class="keyword">if</span>(fruit_mode) &#123;</span><br><span class="line">            normal_bullet.<span class="built_in">insert</span>(&#123;fly_x, fly_y<span class="number">-3</span>&#125;);</span><br><span class="line">            normal_bullet.<span class="built_in">insert</span>(&#123;fly_x+<span class="number">3</span>, fly_y<span class="number">-3</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Kmode_bullet.<span class="built_in">insert</span>(&#123;fly_x+<span class="number">1</span>, fly_y<span class="number">-3</span>&#125;);</span><br><span class="line">        Kmode_bullet.<span class="built_in">insert</span>(&#123;fly_x+<span class="number">2</span>, fly_y<span class="number">-3</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Kmode_bullet.<span class="built_in">insert</span>(Kmode_bullet2.<span class="built_in">begin</span>(), Kmode_bullet2.<span class="built_in">end</span>());</span><br><span class="line">    Kmode_bullet2.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">collision_detection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 碰撞检测：移除被子弹击中的目标</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = targets.<span class="built_in">begin</span>(); it != targets.<span class="built_in">end</span>();) &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = *it;</span><br><span class="line">        <span class="type">bool</span> hit = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;b : normal_bullet) &#123;</span><br><span class="line">            <span class="keyword">if</span>(t == b) &#123;</span><br><span class="line">                hit = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;kb : Kmode_bullet) &#123;</span><br><span class="line">            <span class="keyword">if</span>(t == kb) &#123;</span><br><span class="line">                hit = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(hit) &#123;</span><br><span class="line">            it = targets.<span class="built_in">erase</span>(it);</span><br><span class="line">            score++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> ++it;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updEnemy</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// to do...</span></span><br><span class="line">    <span class="built_in">collision_detection</span>();</span><br><span class="line">    <span class="comment">// to do...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawPic</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> it = normal_bullet.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(; it != normal_bullet.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        <span class="built_in">draw</span>(it-&gt;first, it-&gt;second, <span class="string">&#x27;^&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> it2 = Kmode_bullet.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(; it2 != Kmode_bullet.<span class="built_in">end</span>(); it2++) &#123;</span><br><span class="line">        <span class="built_in">draw</span>(it2-&gt;first, it2-&gt;second, <span class="string">&#x27;~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// to do...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">        fly_x = w/<span class="number">2</span>, fly_y = h<span class="number">-1</span>;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(gameOver) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; w; x++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; h; y++) &#123;</span><br><span class="line">            <span class="built_in">draw</span>(x, y, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">drawBody</span>(w, h, draw);</span><br><span class="line">    <span class="built_in">updBullet</span>(w, h, draw);</span><br><span class="line">    <span class="built_in">updEnemy</span>(w, h, draw);</span><br><span class="line">    <span class="built_in">drawPic</span>(w, h, draw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">toybox_run</span>(<span class="number">26</span>, update, keypress);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一个简易的游戏引擎，适合刚学了一点语法的小白。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://git.nju.edu.cn/jyy/toybox&quot;&gt;https://git.nju.edu.cn/jyy/toybox&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;源码阅读&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="编程" scheme="https://loveofpeach.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://loveofpeach.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://loveofpeach.github.io/posts/2f57a694.html"/>
    <id>https://loveofpeach.github.io/posts/2f57a694.html</id>
    <published>2024-04-15T12:33:27.000Z</published>
    <updated>2024-04-30T06:01:18.994Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式快速参考：<br><a href="https://learn.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference">https://learn.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference</a></p><div class="note info flat"><p>版权声明：本文为博主原创文章，遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.en">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_28087491/article/details/107608569">https://blog.csdn.net/qq_28087491/article/details/107608569</a></p></div><p>本文对原文的改编如下：<br>修订了一些错误。例如 CSDN 将原博主的<code>*</code>识别为 markdown 标记，导致<code>*</code>丢失，部分字体变为斜体。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在编写处理字符串的程序或网页时，经常会有查找某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。</p><p>很可能你使用过Win/Dos下用于文件查找的<strong>通配符(wildcard)</strong>，也就是<code>?</code>和<code>*</code>。如果你想要查找某个目录下的所有Word文档的话，你会搜索<code>*.doc</code>。在这里，<code>*</code>会被解释成任意的字符串。</p><p>和通配符类似，<strong>正则表达式</strong>也是用来进行文本匹配的工具，只不过比起通配符，它能更精确地描述你的需求。当然，代价是更复杂。比如，可以编写一个正则表达式，用来查找所有以 0 开头，后面跟着 2~3 个数字，然后是一个连字号<code>-</code>，最后是7或8位数字的字符串（像010-12345678或0376-7654321）。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>假设你在一篇英文小说里查找 hi，你可以使用正则表达式<code>hi</code>。</p><p>这几乎是最简单的正则表达式了，它可以精确匹配这样的字符串：由两个字符组成，前一个字符是<code>h</code>，后一个是<code>i</code>。通常，处理正则表达式的工具会提供一个忽略大小写的选项，如果选中了这个选项，它可以匹配hi, HI, Hi, hI这四种中的任意一种。</p><p>不幸的是，很多单词里包含 hi 这两个连续的字符，比如 him, history, high 等等。用<code>hi</code>来查找的话，这里面的 hi 也会被找出来。如果要精确地查找 hi 这个单词的话，我们应该使用<code>\bhi\b</code>。</p><p><code>\b</code>是正则表达式规定的一个特殊代码（被称为<strong>元字符 metacharacter</strong>），代表着单词的开头或结尾，也就是单词的分界处。虽然通常英文的单词是由空格，标点符号或者换行来分隔的，但是<code>\b</code>并不匹配这些单词分隔字符中的任何一个，它只匹配一个位置。</p><p>假如你要找的是 hi 后面不远处跟着的一个 Lucy，你应该用<code>\bhi\b.*\bLucy\b</code>。</p><p>这里，<code>.</code>是另一个元字符，匹配除了换行符以外的任意字符。<code>*</code>同样是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定前边的内容可以连续重复出现任意次以使整个表达式得到匹配。因此，<code>.*</code>连在一起就意味着任意数量的不包含换行的字符。现在<code>\bhi\b.*\bLucy\b</code>的意思就很明显了：先是一个单词hi，然后是任意个字符（但不能换行），最后是Lucy这个单词。</p><p>如果同时使用其它元字符，我们就能构造出功能更强大的正则表达式。比如下面这个例子：<code>0\d\d-\d\d\d\d\d\d\d\d</code>匹配这样的字符串：以0开头，然后是两个数字，然后是一个连字号“-”，最后是8个数字（也就是中国的电话号码。当然，这个例子只能匹配区号为3位的情形）。</p><p>这里的<code>\d</code>是个新的元字符，匹配一位数字（0或1或2… …）。<code>-</code>不是元字符，只匹配它本身——连字符或者减号。</p><p>为了避免那么多烦人的重复，我们也可以这样写这个表达式：<code>0\d&#123;2&#125;-\d&#123;8&#125;</code>。这里 \d 后面的 {2}({8}) 的意思是前面的 \d 必须连续重复匹配2次（8次）。</p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>现在已经知道了几个很有用的元字符了，正则表达式里还有更多的元字符，比如<code>\s</code>匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等。<code>\w</code>匹配字母或数字或下划线或汉字等。</p><p>下面看看更多的例子。</p><p><code>\ba\w*\b</code>匹配以字母a开头的单词——先是某个单词开始处（\b），然后是字母a，然后是任意数量的字母或数字（\w*）,最后是单词结束处（\b）。</p><p><code>\d+</code>匹配 1 个或更多连续的数字。这里的<code>+</code>是和<code>*</code>类似的元字符，不同的是<code>*</code>匹配重复任意次（可能是0次），而<code>+</code>则匹配重复 1 次或更多次。</p><p><code>\b\w&#123;6&#125;\b</code>匹配刚好 6 个字母/数字的单词。</p><p>元字符 <code>^</code> 和 <code>$$`` 都匹配一个位置，这和 ``\b`` 有点类似。 ``^`` 匹配要用来查找的字符串的开头， ``$$</code> 匹配结尾。这两个代码在验证输入的内容时非常有用，比如一个网站如果要求你填写的QQ号必须为5到12位的数字时，可以使用：<code>^\d&#123;5,12&#125;$</code>。</p><p>这里的{5,12}和前面介绍过的{2}是类似的，只不过{2}匹配只能不多不少重复2次，{5,12}则是重复的次数不能少于5次，不能多于12次，否则都不匹配。</p><p>因为使用了<code>^</code>和<code>$</code>，所以输入的整个字符串都要用来和<code>\d&#123;5,12&#125;</code>来匹配，也就是说整个输出必须是5到12个数字，因此如果输入的QQ号能匹配这个正则表达式的话，那就符合要求了。</p><p>和忽略大小写的选项类似，有些正则表达式处理工具还有一个处理多行的选项。<strong>如果选中了这个选项，<code>^</code>和<code>$</code>的意义就变成了匹配行的开始处和结束处。</strong></p><h2 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h2><p>如果想查找元字符本身的话，比如查找<code>.</code>，或者<code>*</code>，就会出现问题：没有办法去指定它们，因为它们会被解释成别的意思。这时候就得使用<code>\</code>来取消这些字符的特殊意义。因此，应该使用<code>\.</code>和<code>\*</code>。当然，要查找<code>\</code>本身，则使用<code>\\</code>。</p><h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><p>要想查找数字、字母或数字、空白是很简单的，因为已经有了对应这些字符集合的元字符，但是如果你想匹配没有预定义元字符的字符集合（比如元音字母a,e,i,o,u）,应该怎么办？</p><p>很简单，你只需要在方括号里列出它们就行了，像<code>[aeiou]</code>就匹配任何一个英文元音字母，<code>[.?!]</code>匹配标点符号(.或?或!)。</p><p>我们也可以轻松地指定一个字符范围，像<code>[0-9]</code>代表的含意与<code>\d</code>就是完全一致的：一位数字。同理<code>[a-z0-9A-Z_]</code>也完全等同于<code>\w</code>（如果只考虑英文的话）。</p><p>下面是一个更复杂的表达式：<code>\(?0\d&#123;2&#125;[) -]?\d&#123;8&#125;</code>。</p><p>这个表达式可以匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等。我们对它进行一些分析吧：首先使用转义字符表示<code>(</code>,它能出现0次或1次(即 ? 的含义)，然后是一个<code>0</code>，后面跟着<code>2个数字</code>（即 \d{2} 的含义），然后是<code>)</code>或<code>-</code>或<code>空格</code>中的一个，它出现1次或不出现，最后是<code>8个数字</code>。</p><h2 id="分枝条件"><a href="#分枝条件" class="headerlink" title="分枝条件"></a>分枝条件</h2><p>不幸的是，刚才那个表达式也能匹配 010)12345678 或 (022-87654321 这样的“不正确”的格式。要解决这个问题，我们需要用到分枝条件。正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用<code>|</code>把不同的规则分隔开。</p><p><code>0\d&#123;2&#125;-\d&#123;8&#125;|0\d&#123;3&#125;-\d&#123;7&#125;</code>这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号（如 010-12345678 ），一种是4位区号，7位本地号（0376-2233445）。</p><p><code>\d&#123;5&#125;-\d&#123;4&#125;|\d&#123;5&#125;</code>这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。之所以要给出这个例子是因为它能说明一个问题： <strong>使用分枝条件时，要注意各个条件的顺序。</strong> 如果你把它改成<code>\d&#123;5&#125;|\d&#123;5&#125;-\d&#123;4&#125;</code>的话，那么就只会匹配5位的邮编（以及9位邮编的前5位）。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。</p><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>上文中已经提到了怎么重复单个字符（直接在字符后面加上限定符就行了），但如果想要重复多个字符又该怎么办？</p><p>可以使用小括号来指定<strong>子表达式</strong>（也叫作<strong>分组</strong>），然后就可以指定这个子表达式的重复次数了。</p><p><code>(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;</code>是一个简单的 IP 地址匹配表达式。要理解这个表达式，请按下列顺序分析它：<code>\d&#123;1,3&#125;</code>匹配1到3位的数字，<code>(\d&#123;1,3&#125;\.)&#123;3&#125;</code>匹配三位数字加上一个英文句号重复三次，最后再加上一个一到三位的数字<code>\d&#123;1,3&#125;</code>。</p><h2 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h2><p>有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到反义：</p><table>  <tbody>    <tr>      <td><strong>语法</strong></td>      <td><strong>说明</strong></td>    </tr>    <tr>      <td>\W</td>      <td>匹配任意不是字母，数字，下划线，汉字的字符</td>    </tr>    <tr>      <td>\S</td>      <td>匹配任意不是空白符的字符</td>    </tr>    <tr>      <td>\D</td>      <td>匹配任意非数字的字符</td>    </tr>    <tr>      <td>\B</td>      <td>匹配不是单词开头或结束的位置</td>    </tr>    <tr>      <td>[^x]</td>      <td>匹配除了x以外的任意字符</td>    </tr>    <tr>      <td>[^aeiou]</td>      <td>匹配除了aeiou这几个字母以外的任意字符</td>    </tr>  </tbody>  <colgroup>    <col>    <col>  </colgroup></table><p>例如，用<code>&lt;a[^&gt;]+&gt;</code>匹配用尖括号括起来的以a开头的字符串。</p><h2 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h2><p>使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个<strong>组号</strong>，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。</p><p>后向引用用于重复搜索前面某个分组匹配的文本。例如，<code>\1</code>代表分组 1 匹配的文本。难以理解？请看示例：</p><p><code>\b(\w+)\b\s+\1\b</code>可以用来匹配重复的单词，像go go, 或者kitty kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字<code>\b(\w+)\b</code>，这个单词会被捕获到编号为 1 的分组中，然后是 1 个或几个空白符<code>\s+</code>，最后是分组 1 中捕获的内容<code>\1</code>。</p><p>你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：<code>(?&lt;Word&gt;\w+)</code>，或者把尖括号换成<code>&#39;</code>也行：<code>(?&#39;Word&#39;\w+)</code>，这样就把<code>\w+</code>的组名指定为 Word 了。要反向引用这个分组捕获的内容，你可以使用<code>\k&lt;Word&gt;</code>。所以上一个例子也可以写成这样：<code>\b(?&lt;Word&gt;\w+)\b\s+\k&lt;Word&gt;\b</code>。</p><h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><p>接下来的四个用于查找<strong>在某些内容（但并不包括这些内容）之前或之后的东西</strong>，也就是说它们像<code>\b</code>，<code>^</code>，<code>$</code>那样用于指定一个位置，这个位置应该满足一定的条件（即断言），因此它们也被称为<strong>零宽断言</strong>。</p><p><code>(?=exp)</code>也叫作<strong>零宽度正预测先行断言</strong>，它断言自身出现的位置的后面能匹配表达式 exp。比如<code>\b\w+(?=ing\b)</code>，匹配以 ing 结尾的单词的前面部分（除了 ing 以外的部分），如查找 I’m singing while you’re dancing 时，它会匹配 sing 和 danc 。</p><p><code>(?&lt;=exp)</code>也叫<strong>零宽度正回顾后发断言</strong>，它断言自身出现的位置的前面能匹配表达式 exp。比如<code>(?&lt;=\bre)\w+\b</code>会匹配以 re 开头的单词的后半部分（除了 re 以外的部分），例如在查找 reading a book 时，它匹配 ading .</p><p>假如你想要给一个很长的数字中每三位间加一个逗号（当然是从右边加起了），你可以这样查找需要在前面和里面添加逗号的部分：<code>((?&lt;=\d)\d&#123;3&#125;)*\b</code>，用它对 1234567890 进行查找时结果是 234567890 .</p><p>这个例子同时使用了两种断言：<code>(?&lt;=\s)\d+(?=\s)</code>匹配以空白符间隔的数字（再次强调，不包括这些空白符）。</p><p><strong>在 cpp 的 regex 库中，这部分的规则会稍有差异。</strong></p><h2 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h2><p>当正则表达式中包含能接受重复的限定符时，通常的行为是<strong>在使整个表达式能得到匹配的前提下尽可能多的字符。</strong> 考虑这个表达式：<code>a.*b</code>，它将匹配最长的以 a 开始，以 b 结束的字符串。如果用它来搜索 aabab 的话，它会匹配整个字符串 aabab，被称为<strong>贪婪匹配</strong>。</p><p>有时，我们更需要<strong>懒惰匹配</strong>，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号<code>?</code>。这样，<code>.*?</code>就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。</p><p><code>a.*?b</code>匹配最短的，以 a 开始，以 b 结束的字符串。如果把它应用于 aabab 的话，它会匹配 aab（第一到第三个字符）和 ab（第四到第五个字符）。</p><table>  <tbody>    <tr>      <td><strong>代码/语法</strong></td>      <td><strong>说明</strong></td>    </tr>    <tr>      <td>*?</td>      <td>重复任意次，但尽可能少重复</td>    </tr>    <tr>      <td>+?</td>      <td>重复1次或更多次，但尽可能少重复</td>    </tr>    <tr>      <td>??</td>      <td>重复0次或1次，但尽可能少重复</td>    </tr>    <tr>      <td>{n,m}?</td>      <td>重复n到m次，但尽可能少重复</td>    </tr>    <tr>      <td>{n,}?</td>      <td>重复n次以上，但尽可能少重复</td>    </tr>  </tbody>  <colgroup>    <col>    <col>  </colgroup></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;正则表达式快速参考：&lt;br&gt;&lt;a href=&quot;https://learn.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference&quot;&gt;https://</summary>
      
    
    
    
    <category term="转载" scheme="https://loveofpeach.github.io/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
    <category term="正则表达式" scheme="https://loveofpeach.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>烟花三月下扬州</title>
    <link href="https://loveofpeach.github.io/posts/19141e40.html"/>
    <id>https://loveofpeach.github.io/posts/19141e40.html</id>
    <published>2024-04-09T11:50:02.000Z</published>
    <updated>2024-04-12T01:42:21.623Z</updated>
    
    <content type="html"><![CDATA[<p>仍旧是随手拍。</p><p>出了车站直取鉴真路，可惜花期已过，是今年太热了吗？</p><p>瘦西湖离鉴真路不远，遂步行。</p><p><img src="https://bu.dusays.com/2024/04/12/66188ffbc9a96.jpg" alt="71-1.jpg"></p><p>路过一个小餐馆，正是饭点，点了一碗卤肉饭，不是很好吃。</p><p>平山堂东路路边有鉴真的雕像，北边便是大明寺。</p><p>往寺庙去的台阶上有个算命的，门口有开光物件的广告。</p><p>墙体金黄，寺内香火旺盛。</p><p>佛像和罗汉像并未给人很特别的印象，若移驾去别的小寺，恐怕也难有大驾光临之感。</p><p>倒是背后的一墙小神仙的雕塑，生动活泼。</p><p>此地设有欧阳文忠纪念馆，亦与梁思成颇有渊源。</p><p>有康熙乾隆的笔墨，还有一些雅致的小建筑。</p><p><img src="https://bu.dusays.com/2024/04/10/66167e36f0f6a.jpg" alt="71-2.jpg"></p><p><img src="https://bu.dusays.com/2024/04/12/6618903e5e746.jpg" alt="71-3.jpg"></p><p>广场前有一处洗手池，总之大约是吉利的意思，我便舀来洗了。但这水并不十分干净，黏黏的，后来在洗手间重又洗了一回。</p><p>来到广场，便是很远处就可看见的塔，钟楼和鼓楼拱卫其下。</p><p>出了大明寺，沿平山堂东路继续走不远，是一处江泽民题字的烈士陵园。</p><p>我路过的时候，正值一群老干部神气的人，穿着正式、谈笑风生地走下来，大约刚结束了什么团建活动。</p><p>大门敞开着，我便直接走进。终于爬了上去，视野比较开阔，然而回头却发现大门紧闭，才知道今天并不对外开放，却放我从正门大摇大摆地进来。我赶紧往回走，和保安吱了一声，大门开了一条小缝放我出去。</p><p>接下来直接去瘦西湖。</p><p><img src="https://bu.dusays.com/2024/04/10/66167e49033bc.jpg" alt="71-4.jpg"></p><p>瘦西湖很大，我也并未逛全，只是随着人流瞎玩。</p><p>盆景很值得一看，有户外展出的，也有室内博物馆。</p><p><img src="https://bu.dusays.com/2024/04/12/6618907a462ff.jpg" alt="71-5.jpg"></p><p><img src="https://bu.dusays.com/2024/04/10/66167e52aa2e2.jpg" alt="71-6.jpg"></p><p>洛春堂：黄昏花影二分月，细雨春林一半烟。</p><p><img src="https://bu.dusays.com/2024/04/12/661890d4d2651.jpg" alt="71-7.jpg"></p><p>二十四桥人挤人。</p><p>出了瘦西湖景区，正好外面有卖酸奶的，随手挑了一个扬大酸奶，不知道和扬州大学有没有关系。</p><p>光速打卡了文昌阁、钟书阁、四望亭，出发去东关街。</p><p>东关街看着像是现代商业炮制出来的街道，甚至还有塔罗咨询，实际上深入巷子里发现还是有土著住在里面的，大约只是面向游客的那一面商业化了。</p><p>东关街边正好挨着个园，它真好看。</p><p><img src="https://bu.dusays.com/2024/04/12/661891039b049.jpg" alt="71-8.jpg"></p><p><img src="https://bu.dusays.com/2024/04/12/6618913267391.jpg" alt="71-9.jpg"></p><p><img src="https://bu.dusays.com/2024/04/12/6618916beed5a.jpg" alt="71-10.jpg"></p><p><img src="https://bu.dusays.com/2024/04/10/66167effb769d.jpg" alt="71-11.jpg"></p><p><img src="https://bu.dusays.com/2024/04/10/66167f004e223.jpg" alt="71-12.jpg"></p><p><img src="https://bu.dusays.com/2024/04/10/661693346a73f.jpg" alt="71-13.jpg"></p><p>据说是小姐抛绣球的地方：<del>糟糕，好像有什么前世记忆苏醒了</del></p><p><img src="https://s2.loli.net/2024/04/10/apXZLtenfNWk5yu.jpg" alt="71-13dot5.jpg"></p><p>出了个园之后，买了两个糕点。</p><p><img src="https://s2.loli.net/2024/04/10/dhxz7Ab6CLoIDJO.jpg" alt="71-14.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;仍旧是随手拍。&lt;/p&gt;
&lt;p&gt;出了车站直取鉴真路，可惜花期已过，是今年太热了吗？&lt;/p&gt;
&lt;p&gt;瘦西湖离鉴真路不远，遂步行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bu.dusays.com/2024/04/12/66188ffbc9a96.jpg&quot; alt=&quot;</summary>
      
    
    
    
    <category term="生活" scheme="https://loveofpeach.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="摄影" scheme="https://loveofpeach.github.io/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>人力资源知识存档</title>
    <link href="https://loveofpeach.github.io/posts/22d6c38e.html"/>
    <id>https://loveofpeach.github.io/posts/22d6c38e.html</id>
    <published>2024-04-03T13:05:58.000Z</published>
    <updated>2024-04-07T11:54:40.703Z</updated>
    
    <content type="html"><![CDATA[<p>以前的知识存档。其实我个人倾向于认为这是八股文。</p><h2 id="为什么在开展培训前要先进行培训需求分析？"><a href="#为什么在开展培训前要先进行培训需求分析？" class="headerlink" title="为什么在开展培训前要先进行培训需求分析？"></a>为什么在开展培训前要先进行培训需求分析？</h2><p>培训需求分析是整个培训开发工作的起始点，决定着培训活动的方向，对培训的质量起着决定性作用，如果前期的培训需求分析出现了偏差，那么培训工作的实施可能就会“南辕北辙”，达不到预期的目的。</p><h2 id="对学校的应届毕业生如何进行培训需求分析？"><a href="#对学校的应届毕业生如何进行培训需求分析？" class="headerlink" title="对学校的应届毕业生如何进行培训需求分析？"></a>对学校的应届毕业生如何进行培训需求分析？</h2><p>一般来说，可从组织分析、任务分析、人员分析三个方面入手。组织分析是在组织层面展开的，通过对组织的目标、资源、特质、环境等因素，对未来发展方向分析确定今后的培训重点和方向；另一方面对整体绩效做出评价，找出问题以便确定培训重点。 任务分析确定各职位的工作任务及完成它们所需的知识技能等。 人员分析关注员工个体现有状况与应有状况间的差距，一是根据绩效找出问题以确定培训需求，二是根据其职位变动计划比较现有状况与未来职业要求以确定将来问题的培训需求，通过人员分析，确定组织中哪些人需要接受怎样的培训。</p><p>具体到应届毕业生的培训需求分析，除上述要点外，还要关注其身份的特点。应届毕业生初入社会对职场包括生活的各方面比较生疏，学校教育与职场需求有脱节的可能。因此，应届毕业生的培训包含以下几个方面的培训：</p><ul><li>首先是介绍式培训，让应届毕业生尽快了解企业。</li><li>其次是适应性培训，让应届毕业生适应企业的工作。例如工作的规范和流程，企业的规章制度，安全生产制度等。</li><li>再次是转型培训，帮助应届毕业生完成从学生到员工、从学习到工作的转变。</li></ul><h2 id="实施培训前重点要进行哪些方面的准备工作？"><a href="#实施培训前重点要进行哪些方面的准备工作？" class="headerlink" title="实施培训前重点要进行哪些方面的准备工作？"></a>实施培训前重点要进行哪些方面的准备工作？</h2><p>对个体培训意向的特点和培训项目的要求进行综合分析，同时兼顾具体的情景因素，如项目类型、培训预算、领导支持等。</p><p>在培训前做好培训计划。针对不同的参训人员最好有量身的培训计划，退而求其次，至少也要分层次进行培训。</p><p>必要时跟进配套的工作：</p><ul><li>确保参训人员做好准备。</li><li>选择培训场地。</li><li>严肃培训纪律。</li><li>编制培训准备工作清单。</li></ul><h2 id="结合现实，谈谈为什么现代企业十分重视员工的培训？"><a href="#结合现实，谈谈为什么现代企业十分重视员工的培训？" class="headerlink" title="结合现实，谈谈为什么现代企业十分重视员工的培训？"></a>结合现实，谈谈为什么现代企业十分重视员工的培训？</h2><p>万佳泓不锈钢重视员工的全方位培训，每次有新的员工加入时，都会参加所谓的“6s”培训：安全操作培训、成品仓排序、品质培训、平板车间培训、色板炉培训、营销产品培训等一系列培训。有效的提高了企业凝集力和竞争力。</p><p>现代企业重视员工培训是因为：</p><ul><li>培训对员工有激励作用，是有价值的双赢投资。培训不仅使员工积极性、创造性提高，达到增加企业产出的效率和价值，使企业直接受益的目的，而且还能增强员工本人的素质和能力。</li><li>企业培训使员工了解企业的价值观通过培训，可以增强员工对企业的认同感，增强凝聚力及团队精神。</li><li>企业培训可以提升员工技术、能力水准。</li><li>企业培训是为员工建立学习型组织，使企业时刻有新的血液注入，通过不断学习和创新来提高效率。</li></ul><h2 id="员工培训的方法主要有哪些？各自有什么优缺点？"><a href="#员工培训的方法主要有哪些？各自有什么优缺点？" class="headerlink" title="员工培训的方法主要有哪些？各自有什么优缺点？"></a>员工培训的方法主要有哪些？各自有什么优缺点？</h2><p>方法：演示法与团队建设法、专家传授培训法。</p><p>其中<strong>演示法</strong>包括：</p><ul><li>讲座法</li><li>远程学习法</li><li>视听教学法</li></ul><p>优缺点：受训者作为信息的被动接受者</p><p><strong>团队建设法</strong>包括：</p><ul><li>探险性学习</li><li>团队培训</li><li>行动学习</li></ul><p>优缺点：提高团队成员技能、提高团队的有效性、知行合一</p><p><strong>专家传授法</strong>包括：</p><ul><li>在职培训</li><li>情景模拟</li><li>商业游戏（例如沙盘等）</li><li>个案研究</li><li>交互式培训</li><li>互联网培训</li><li>…（等）…</li></ul><p>优缺点：要求受训者积极参与学习、主要目的是开发特定技能</p><h2 id="员工培训与开发的步骤有哪些？"><a href="#员工培训与开发的步骤有哪些？" class="headerlink" title="员工培训与开发的步骤有哪些？"></a>员工培训与开发的步骤有哪些？</h2><p>员工培训的步骤：</p><ul><li>培训需求分析</li><li>培训项目设计</li><li>培训准备工作</li><li>培训效果评估</li></ul><p>员工开发的基本过程：（例如）根据绩效找出问题以确定开发需求；根据其职位变动计划比较现有状况与未来职业要求以确定将来问题的开发需求；…（等）…</p><h2 id="在实施员工培训过程中，企业应做好哪几个方面的工作？"><a href="#在实施员工培训过程中，企业应做好哪几个方面的工作？" class="headerlink" title="在实施员工培训过程中，企业应做好哪几个方面的工作？"></a>在实施员工培训过程中，企业应做好哪几个方面的工作？</h2><p><strong>营造积极的培训氛围。</strong></p><p>衡量新员工培训效果的一个重要标志是通过培训能否让新员工产生对企业的认同感和归属感，愿意为企业奉献。如果能够在培训中营造良好氛围，引导得当，让他们以企业为豪，产生强烈的为企业工作和奉献的愿望，那么企业将来就可能获得巨大收益。让新员工感受到同事之间的融洽气氛，能为良好氛围的营造打下基础。</p><p><strong>注意进行培训需求分析和培训效果评估。</strong></p><p>培训是一个流程，需要需求分析、制订方案、教学安排、实施培训、效果分析一步步实施。如果不注重培训需求分析，则培训效果会出现一定的偏差。具体来说，培训需求分析既包括企业的需求，也包括培训人员的需求。</p><h2 id="上司安排你给新入职的员工开展培训，你打算制定哪些课程内容？为什么？"><a href="#上司安排你给新入职的员工开展培训，你打算制定哪些课程内容？为什么？" class="headerlink" title="上司安排你给新入职的员工开展培训，你打算制定哪些课程内容？为什么？"></a>上司安排你给新入职的员工开展培训，你打算制定哪些课程内容？为什么？</h2><p>针对进入企业的新员工的岗前培训，其首要目的是使他们成为企业的一名合格员工，此外，还要针对他们的需要，帮助他们完成从新人到熟练员工的转型。因此，我打算制定以下几个方面的培训：</p><ul><li>首先是介绍式培训，让新员工尽快了解企业。要让他们消除紧张和不适，一开始必须让他们对企业有一个初步的了解，尽快熟悉环境。所以培训的开始阶段要进行企业基本情况的介绍，包括企业组织结构、各部门地理分布、人员构成、企业产品知识等内容。</li><li>其次是适应性培训，让他们适应企业的工作，知道工作的规范和流程，要求新员工适应本企业工作的特点。了解企业的规章制度，如员工行为规范、人力资源管理制度、安全生产制度等；熟悉企业产品和技术方面的管理制度，如目标管理制度、成本管理制度、全面质量管理制度等。</li><li>再次是转型培训，帮助他们完成从新手到熟练员工的转变。安排一系列培训课程帮助他们进行转型。具体培训内容包括自我管理、交流和沟通技巧、职业道德和爱岗敬业精神，团队精神培训等。</li><li>最后一点，通过使其认同组织文化来重新塑造员工的培训。宣传企业的文化非常重要。企业文化的培训可以通过多种方式来进行，如介绍企业发展史和成功事例，请老员工谈感受，也可以做一些小游戏让他们加深对企业文化的认识和理解。</li></ul><h2 id="在你的教育经历中，你如何看待考试起到的作用"><a href="#在你的教育经历中，你如何看待考试起到的作用" class="headerlink" title="在你的教育经历中，你如何看待考试起到的作用"></a>在你的教育经历中，你如何看待考试起到的作用</h2><p><strong>积极作用：</strong></p><ul><li>考试是检验所学知识掌握程度的一种方法。考生通过考试的反馈可以制定下一阶段学习的计划，并相应地调整学习态度、改进学习方法。</li><li>考试形成的正向压力是学习的动力之一。</li><li>考试有其选拔性。通过考试，考生可以走向更大的平台。</li></ul><p><strong>消极作用：</strong></p><ul><li>考试可能带来焦虑。</li><li>考试的结果有偶然性。</li></ul><h2 id="如果你是受训者，你最喜欢哪种培训方式？如果你是课程设计者，你最喜欢哪种培训方式？为什么？"><a href="#如果你是受训者，你最喜欢哪种培训方式？如果你是课程设计者，你最喜欢哪种培训方式？为什么？" class="headerlink" title="如果你是受训者，你最喜欢哪种培训方式？如果你是课程设计者，你最喜欢哪种培训方式？为什么？"></a>如果你是受训者，你最喜欢哪种培训方式？如果你是课程设计者，你最喜欢哪种培训方式？为什么？</h2><p>受训者：团队建设法-探险性学习。比较有趣，寓教于乐。在与团队成员的互动中，磨合团队，增进友谊。探险性学习可以提高团队成员技能、提高团队的有效性、知行合一。</p><p>课程设计者：讲座法。虽然受训者作为信息的被动接受者，但在合适的条件下，例如受训者思想集中、学习效率高，那么教学培训将会非常高效。另外，讲座法安全风险低，相对于探索性学习等。</p><h2 id="简述培训效果评估的四个层次"><a href="#简述培训效果评估的四个层次" class="headerlink" title="简述培训效果评估的四个层次"></a>简述培训效果评估的四个层次</h2><p>传统的培训效果评估主要是根据柯克帕特里克的四层次框架体系来进行的，它的内容是：</p><div class="table-container"><table><thead><tr><th style="text-align:center">评估级别</th><th style="text-align:center">主要内容</th><th style="text-align:center">可询问的问题</th><th style="text-align:center">衡量方法</th></tr></thead><tbody><tr><td style="text-align:center">反应层评估</td><td style="text-align:center">观察学员的反应</td><td style="text-align:center">学员喜欢该课程吗</td><td style="text-align:center">问卷、评估访谈</td></tr><tr><td style="text-align:center">学习层评估</td><td style="text-align:center">检查学员的学习效果</td><td style="text-align:center">培训项目中学到了什么</td><td style="text-align:center">笔试、绩效</td></tr><tr><td style="text-align:center">行为层反应</td><td style="text-align:center">衡量培训后的工作表现</td><td style="text-align:center">学员在学习后有无改变行为</td><td style="text-align:center">由上级、同事等考核观察</td></tr><tr><td style="text-align:center">结果层评估</td><td style="text-align:center">衡量组织经营业绩变化</td><td style="text-align:center">行为改变对组织的影响是否积极</td><td style="text-align:center">考察事故率、生产率、士气等</td></tr></tbody></table></div><h2 id="简述培训与开发的区别与联系"><a href="#简述培训与开发的区别与联系" class="headerlink" title="简述培训与开发的区别与联系"></a>简述培训与开发的区别与联系</h2><p>培训是有助于员工学习和工作相关能力的活动；开发是为员工的未来发展开展的正规教育、在职教育、人际互动等活动。</p><p>培训与开发的导向性不同。培训是当前或短期导向；开发是未来和长期导向。</p><p>关注点不同。培训关注工作技能；开发关注管理技能。</p><p>对象不同。培训的对象是员工与技术人员；开发的对象是管理人员。</p><p>培训与开发也有紧密的联系，它们的界限日益模糊。因为全员需要培训，全员需要开发。开发是目的，培训是手段。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以前的知识存档。其实我个人倾向于认为这是八股文。&lt;/p&gt;
&lt;h2 id=&quot;为什么在开展培训前要先进行培训需求分析？&quot;&gt;&lt;a href=&quot;#为什么在开展培训前要先进行培训需求分析？&quot; class=&quot;headerlink&quot; title=&quot;为什么在开展培训前要先进行培训需求分析？</summary>
      
    
    
    
    <category term="杂项" scheme="https://loveofpeach.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="人力资源" scheme="https://loveofpeach.github.io/tags/%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>复试八股</title>
    <link href="https://loveofpeach.github.io/posts/1cbfb5dc.html"/>
    <id>https://loveofpeach.github.io/posts/1cbfb5dc.html</id>
    <published>2024-03-24T14:22:41.000Z</published>
    <updated>2024-04-15T12:35:45.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="专业课问题"><a href="#专业课问题" class="headerlink" title="专业课问题"></a>专业课问题</h2><h3 id="介绍一下大数据，有什么相关的应用"><a href="#介绍一下大数据，有什么相关的应用" class="headerlink" title="介绍一下大数据，有什么相关的应用"></a>介绍一下大数据，有什么相关的应用</h3><p>大数据是指规模庞大、类型多样且以高速增长的数据集合。这些数据集合通常难以使用传统的数据处理技术进行捕获、管理和处理。大数据的特点包括“3V”：Volume（大量）、Velocity（高速）、Variety（多样性），有时候还会包括Veracity（真实性）和Value（价值）。</p><p>大数据在各个领域都有广泛的应用。</p><p>大数据可以用在<strong>商业智能和数据分析</strong>方面：企业可以利用大数据分析来进行销售预测、市场营销优化、客户行为分析等。</p><p>大数据还可以用于<strong>互联网搜索和推荐系统</strong>：搜索引擎和推荐系统利用大数据技术来处理和分析海量的网络数据，以提供更准确的搜索结果和个性化的推荐服务。</p><p>在高并发的情况的情况下，对数据处理的要求也会提高。例如，引入 NoSQL 技术，这是一种基于内存的数据库，并且提供一定的持久化功能。例如基于键值对 key-value 的 Redis，是当前最热门的 NoSQL 数据库之一。</p><h3 id="人工智能有哪些应用"><a href="#人工智能有哪些应用" class="headerlink" title="人工智能有哪些应用"></a>人工智能有哪些应用</h3><p>人工智能有很多应用，例如医疗、金融、数据分析等方面。</p><p>最近比较火的当属 OpenAI 的一系列 AI 产品，如 chatGPT ，一个大语言模型，还有文字生成视频模型 Sora. 国内的相关产品有百度的文心一言等。前一阵子 AI 绘画也大火了一把。</p><p>大语言模型 large language model, 是一种人工智能模型，旨在理解和生成人类语言。它们在大量的文本数据上进行训练，可以执行广泛的任务，包括文本总结、翻译、情感分析等等。LLM的特点是规模庞大，参数巨多，需要相当多的算力。</p><p>这些 AI 应用在最近不仅带动了互联网公司的新一轮发展和竞争，也带动了上下游相关企业。例如提供算力的英伟达公司，在这一轮 AI 热潮中赚取了大量利润。</p><h3 id="什么是-黑盒白盒、瀑布模型"><a href="#什么是-黑盒白盒、瀑布模型" class="headerlink" title="什么是 黑盒白盒、瀑布模型"></a>什么是 黑盒白盒、瀑布模型</h3><p>黑盒测试和白盒测试是软件测试中的两种常见方法，它们针对测试者所知道的关于软件内部结构和功能的程度不同而有所区别。</p><ol><li><p><strong>黑盒测试（Black Box Testing）</strong>：</p><ul><li>黑盒测试是一种测试方法，测试者不需要知道被测试软件的内部结构、实现细节或编程代码，而是将软件看作一个黑盒子，只关注其输入和输出之间的关系。</li><li>黑盒测试更加关注软件的功能性、用户界面和用户体验等方面，常用于功能测试、集成测试和验收测试等阶段。</li></ul></li><li><p><strong>白盒测试（White Box Testing）</strong>：</p><ul><li>白盒测试是一种测试方法，测试者需要了解被测试软件的内部结构、实现细节和编程代码，以便设计更全面的测试用例和验证逻辑。</li><li>白盒测试更加关注软件的内部逻辑、代码覆盖率和程序结构等方面，常用于单元测试、集成测试和系统测试等阶段。</li></ul></li></ol><p><strong>瀑布模型（Waterfall Model）</strong>是软件开发过程中的一种经典的<strong>线性顺序模型</strong>，它将软件开发过程分为一系列严格顺序的阶段，并要求在<strong>一个阶段完成后才能开始下一个阶段</strong>。瀑布模型的阶段通常包括<strong>需求分析、系统设计、编码、测试和维护</strong>等，每个阶段都有明确的输入和输出。开发团队按照瀑布模型的顺序依次完成各个阶段的工作，每个阶段的输出作为下一个阶段的输入，直到整个软件开发过程完成。瀑布模型适用于对需求变化要求不频繁、项目范围和时间预算比较明确的项目，但也存在刚性和高风险的缺点，难以适应需求变化和反馈延迟等问题。</p><h3 id="计算机组成原理的寻址方式有哪些"><a href="#计算机组成原理的寻址方式有哪些" class="headerlink" title="计算机组成原理的寻址方式有哪些"></a>计算机组成原理的寻址方式有哪些</h3><p>立即寻址、隐含寻址、直接寻址、间接寻址、相对寻址、基址寻址、变址寻址、寄存器寻址、寄存器间接寻址。</p><p>（用自己的话再简要说说）</p><h3 id="DBMS-数据库管理系统-的功能"><a href="#DBMS-数据库管理系统-的功能" class="headerlink" title="DBMS(数据库管理系统)的功能"></a>DBMS(数据库管理系统)的功能</h3><p>数据定义、数据操作、数据库的运行管理、数据组织存储与管理、数据表的保护、数据库的维护。</p><h3 id="C和Java区别"><a href="#C和Java区别" class="headerlink" title="C和Java区别"></a>C和Java区别</h3><p>(三五点就行)</p><p>语法不同；单文件的编译时间java比C语言快；C语言可以直接操作内存，java不能直接操作；C语言可以封装动态库，java不行；C语言的代码不容易跨平台，java的代码容易跨平台；C语言有指针，java没有指针；C语言可以直接操作串口，java需要第三方jar包支持；C语言的线程更加灵活，java的线程都已经封装好了；C语言做单独功能，可以增加效率，java适用做web应用开发；</p><h3 id="数据库建立过程-数据库设计总体流程"><a href="#数据库建立过程-数据库设计总体流程" class="headerlink" title="数据库建立过程(数据库设计总体流程)"></a>数据库建立过程(数据库设计总体流程)</h3><p>需求分析、概要设计、逻辑结构设计、物理设计阶段、数据库实施阶段、数据库运行和维护阶段。</p><h3 id="信息安全用到的工具"><a href="#信息安全用到的工具" class="headerlink" title="信息安全用到的工具"></a>信息安全用到的工具</h3><p>病毒防护技术、入侵检测技术、安全扫描技术、认证签名技术、应用安全技术。</p><h3 id="什么是SRAM"><a href="#什么是SRAM" class="headerlink" title="什么是SRAM"></a>什么是SRAM</h3><p>静态随机存取存储器(Static Random-Access Memory，SRAM)是随机存取存储器的一种。所谓的“静态”，是指这种存储器只要保持通电，里面储存的数据就可以恒常保持。相对之下，动态随机存取存储器(DRAM)里面所储存的数据就需要周期性地更新。</p><p>SRAM 是采用双稳态触发器实现的，读出数据时，触发器状态稳定，是<strong>非破坏性读出</strong>，无需重写，因此速度比栅极电容快，SRAM 常用作 Cache，而栅极电容制作的 DRAM 常用作内存。</p><p>但是，因为 SRAM 电路更复杂、使用了更多的 MOS 管，所以成本更高。</p><h3 id="智能家居用到了什么物联网技术"><a href="#智能家居用到了什么物联网技术" class="headerlink" title="智能家居用到了什么物联网技术"></a>智能家居用到了什么物联网技术</h3><p>智能家居利用物联网（Internet of Things，IoT）技术实现设备之间的互联互通，从而实现远程控制、自动化操作和数据交互。一些物联网技术有：</p><ol><li><strong>传感器技术</strong>：智能家居常配备各种传感器，如温度、湿度、光线传感器等，用于实时监测环境参数。</li><li>采用<strong>无线通信技术</strong>进行数据传输，如Wi-Fi、蓝牙、Zigbee、Z-Wave等。这些无线技术使设备之间互联。</li><li><strong>云计算和大数据分析</strong>：将采集到的数据上传到云端服务器进行存储和分析。通过云计算和大数据分析技术，用户可以获取更多的智能化服务，如个性化的智能推荐、智能能源管理等。</li><li><strong>人机交互技术</strong>：智能家居设备通常配备人机交互界面，如语音识别、手势识别、触摸屏等。这些技术使得用户可以通过语音命令或手势控制设备，实现更便捷的操作体验。</li><li><strong>安全和隐私保护技术</strong>：如数据加密、访问控制、安全认证等。这些技术可以保护用户的个人信息和设备安全，防止被未经授权的访问和攻击。</li></ol><h3 id="计算机网络中IPV4和IPV6有什么区别"><a href="#计算机网络中IPV4和IPV6有什么区别" class="headerlink" title="计算机网络中IPV4和IPV6有什么区别"></a>计算机网络中IPV4和IPV6有什么区别</h3><ol><li>地址空间不同，IPv4中规IP地址长度为32位，而IPv6中IP地址的长度为128。</li><li>路由表大小不同，IPv6的路由表比IPv4小。IPv6的组播支持以及对流的支持要强于IPv4。</li><li>安全性不同，IPv6的安全性高，在使用IPv6的网络时，用户可对网络层的数据进行加密。</li><li>协议扩充不同，IPv6允许协议进行扩充而IPv4不允许。</li></ol><h3 id="介绍一下区块链、云计算"><a href="#介绍一下区块链、云计算" class="headerlink" title="介绍一下区块链、云计算"></a>介绍一下区块链、云计算</h3><p>// to do…</p><h3 id="Flash-存储器的原理是什么"><a href="#Flash-存储器的原理是什么" class="headerlink" title="Flash 存储器的原理是什么"></a>Flash 存储器的原理是什么</h3><p>flash 存储器又称闪存(快闪存储器)，是一种<strong>电可擦可编程只读存储器</strong>的形式，允许在操作中被多次擦或写，EEPROM与高速RAM成为当前最常用且发展最快的两种存储技术。计算机的BIOS、数字照相机等的存储卡中都使用闪存。flash存储器的主要特点是在不加电的情况下能长期保持存储的信息。就其本质而言，flash存储器属于EEPROM(电擦除可编程只读存储器)类型。它既有ROM的特点，又有很高的存取速度，而且易于擦除和重写，功耗很小。</p><h3 id="网络搜索时是直接从服务器获取的吗"><a href="#网络搜索时是直接从服务器获取的吗" class="headerlink" title="网络搜索时是直接从服务器获取的吗"></a>网络搜索时是直接从服务器获取的吗</h3><p>// to do…</p><h3 id="计算机科学中的语法、语义的区别是"><a href="#计算机科学中的语法、语义的区别是" class="headerlink" title="计算机科学中的语法、语义的区别是"></a>计算机科学中的语法、语义的区别是</h3><p>语法关注的是<strong>代码的结构和组织形式</strong>是否正确，而语义关注的是<strong>代码的含义和行为</strong>是否符合预期。正确的语法是编程语言的基础，而正确的语义是确保代码功能正确和可靠的关键。</p><ol><li><strong>语法（Syntax）</strong>：<ul><li>语法指的是编程语言中的规则和结构，用于定义合法的代码格式和组织方式。它关注的是代码的表面形式。</li><li>编程语言的编译器或解释器会根据语法规则对代码进行词法分析和语法分析，以确定代码的结构是否正确。</li></ul></li><li><strong>语义（Semantics）</strong>：<ul><li>语义指的是编程语言中的含义和逻辑，用于描述代码的功能和行为。它关注的是代码的含义、逻辑和执行结果。</li><li>语义规定了代码中各个元素之间的关系和作用，包括变量的赋值、运算符的操作、函数的调用等。</li></ul></li></ol><p>在数理逻辑中，也有类似的概念，例如<strong>语法推出</strong>、<strong>语义推出</strong>等。更一般地，有：</p><blockquote><p>太阳是黑的. ——语法正确,语义错误.<br>太阳是红的. ——语法正确,语义正确.</p></blockquote><h3 id="传感器在物联网中的应用"><a href="#传感器在物联网中的应用" class="headerlink" title="传感器在物联网中的应用"></a>传感器在物联网中的应用</h3><p>（稍微看看就行）</p><p>物联网类型的传感器有温度传感器、光传感器、运动传感器、图像传感器、陀螺仪传感器、距离传感器和心律传感器等。传感器可以采集大量信息，它是许多装备和信息系统必备的信息摄取手段，若无传感器对最初信息的检测、交替和捕获，所有控制与测试都不能实现，所以说，传感器是物联网的基础。</p><h3 id="操作系统中的调度有哪些"><a href="#操作系统中的调度有哪些" class="headerlink" title="操作系统中的调度有哪些"></a>操作系统中的调度有哪些</h3><p>操作系统中的调度分三个层次：高级调度、中级调度、低级调度。</p><p>其中，高级调度又叫<strong>作业调度</strong>。<br>按一定的原则从外存的作业后备队列中挑选一个作业调入内存，并创建进程。每个作业只调入一次，调出一次。作业调入时会建立PCB，调出时才撤销PCB。</p><p>中级调度又叫<strong>内存调度</strong>。<br>内存不够时，可将某些进程的数据调出外存。等内存空闲或者进程需要运行时再重新调入内存。暂时调到外存等待的进程状态为<strong>挂起状态</strong>。被挂起的进程PCB会被组织成<strong>挂起队列</strong>。<br>中级调度会按照某种策略决定将哪个处于挂起状态的进程重新调入内存。一个进程可能会被多次调出、调入内存。</p><p>低级调度又叫<strong>进程调度</strong>。<br>按照某种策略从就绪队列中选取一个进程，将处理机分配给它。进程调度是操作系统中最基本的一种调度，在一般的操作系统中都必须配置进程调度。</p><h3 id="什么是ARP协议"><a href="#什么是ARP协议" class="headerlink" title="什么是ARP协议"></a>什么是ARP协议</h3><p>//to do…<br>地址解析协议，即ARP(Address Resolution Protocol)，是根据 IP 地址获取 MAC 地址的一个 TCP/IP 协议。</p><h3 id="介绍一下bios是什么"><a href="#介绍一下bios是什么" class="headerlink" title="介绍一下bios是什么"></a>介绍一下bios是什么</h3><p>//to do…<br>BIOS 是英文 Basic Input Output System 的缩略词，直译过来后中文名称就是”基本输入输出系统”</p><h3 id="正逻辑和负逻辑的区别"><a href="#正逻辑和负逻辑的区别" class="headerlink" title="正逻辑和负逻辑的区别"></a>正逻辑和负逻辑的区别</h3><p>以高低电平表示两种不同逻辑状态时，有两种定义方法。如果以<strong>高电平表示逻辑1，低电平表示逻辑0</strong>，则称这种表示方法为<strong>正逻辑</strong>。反之，若以高电平表示逻辑0，而以低电平表示逻辑1，则称这种表示方法为负逻辑。</p><h3 id="操作系统提供的功能"><a href="#操作系统提供的功能" class="headerlink" title="操作系统提供的功能"></a>操作系统提供的功能</h3><p>CPU 管理、存储器管理、文件管理、设备管理</p><h3 id="什么是计算机网络"><a href="#什么是计算机网络" class="headerlink" title="什么是计算机网络"></a>什么是计算机网络</h3><p>简单来说，计算机网络是指<strong>一些互相连接的、自治的计算机的集合</strong>。</p><p>或者我们也可以说：</p><blockquote><p>计算机网络主要是由一些<strong>通用的、可编程的硬件互连</strong>而成的，用来<strong>传送多种不同类型的数据</strong>，并能<strong>支持广泛的和日益增长的应用</strong>。</p></blockquote><h3 id="擅长哪个编程语言和编程环境"><a href="#擅长哪个编程语言和编程环境" class="headerlink" title="擅长哪个编程语言和编程环境"></a>擅长哪个编程语言和编程环境</h3><p>不敢说擅长，不过我使用最多的是 C++ 和 Python，Windows 和 Linux 均可。编辑器使用 vscode，plus vim 插件。</p><h3 id="解释一下数据库中的索引"><a href="#解释一下数据库中的索引" class="headerlink" title="解释一下数据库中的索引"></a>解释一下数据库中的索引</h3><p>索引（Index）是高效获取数据的数据结构。</p><p>假设我们现在在一张表上有一个索引，这个索引可以加快查询，具体来说是这样做的：这个索引的属性会按照一定规则排序，然后我们在查找某个具体的元组时就可以使用二分查找加速。</p><p>索引可以提高数据检索效率，降低数据库 IO 成本。但同时也需要额外占用空间。有时候索引占用的空间甚至比数据占用的空间还多。此外，降低更新表的速度。因为数据库不仅要更新数据，还要更新对应的索引信息。</p><p>索引分为<strong>主键索引</strong>和<strong>非主键索引</strong>。以主键创建的索引，叫主键索引。以非主键创建的索引叫非主键索引。</p><p>在 MySQL 中，非主键索引包括<strong>普通索引、唯一索引、全文索引、组合索引</strong>。</p><p>值得一提的是组合索引，在 MySQL 中，组合索引有“最左前缀”的概念。如果处理不当，组合索引将失效。举例来说，我们有组合索引 abc，请想象一颗四层的树，（后略…临场发挥…）</p><p>另外，存在一种叫做“回表”的现象，使用辅助索引查询时，若查询的列在辅助索引树上没有，那么就需要通过该条信息对应的主键，在主键索引树上继续查找。即在两个索引树上进行查找，磁盘 IO 增多，查询速度变慢。（尽量避免回表）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> citizen <span class="keyword">where</span> id_card <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>; <span class="operator">/</span><span class="operator">/</span>回表</span><br></pre></td></tr></table></figure><h3 id="GPS定位技术怎么实现的"><a href="#GPS定位技术怎么实现的" class="headerlink" title="GPS定位技术怎么实现的?"></a>GPS定位技术怎么实现的?</h3><p>GPS 的工作原理，简单来说，是利用几何与物理上一些基本的原理。首先，我们假定卫星的位置已知，而我们又能准确测定我们所在地点A至卫星间的距离，那么A点一定是位于以卫星为中心、所测得距离为半径的圆球上。然后我们又测得点A至另一卫星的距离，则A点一定处在前后两个圆球相交的圆环上（因为两球相交得到一个圆环）。我们还可测得与第三个卫星的距离，就可以确定A点只能是在三个圆球相交的两个点，根据一些地理知识，很容易排除其中一个不合理的位置。当然也可以如法炮制，再测量A点到另一个卫星的距离，也能精确进行定位。因此，要实现精确定位，要解决两个问题</p><ul><li>卫星的准确位置</li><li>卫星至地球上我们所在地的距离</li></ul><h3 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h3><p>（自己组织语言）</p><p>高中生都能理解的公式出发：</p><script type="math/tex; mode=display">\begin{pmatrix}n\\m\end{pmatrix}=\begin{pmatrix}n-1\\m-1\end{pmatrix}+\begin{pmatrix}n-1\\m\end{pmatrix}</script><p>子问题…</p><p>其实按照我个人的经验，编写递归代码就是<strong>把没有发生过的事当作已经发生了</strong>…</p><p>（手撕记忆化搜索）</p><p>针对 AOE，给出一个基于 DAG 上动态规划的算法：</p><script type="math/tex; mode=display">S_i= \begin{cases}\underset{(i,j)\in E}{\overset{}{\mathrm{MAX}}}(S_j+\mathrm{len}(i,j)) & i \ne \mathrm{end} \\0 &i=\mathrm{end}\end{cases}</script><p>汉诺塔…</p><h3 id="总线是什么"><a href="#总线是什么" class="headerlink" title="总线是什么"></a>总线是什么</h3><p>总线(Bus)是计算机<strong>各种功能部件之间传送信息的公共通信干线</strong>，它是由导线组成的传输线束，按照计算机所传输的息种类，计算机的总线可以划分为<strong>数据总线</strong>、<strong>地址总线</strong>和<strong>控制总线</strong>，分别用来传输数据、数据地址和控制信号。总线是一种内部结构，它是cpu、内存、输入、输出设备传递信息的公用通道，主机的各个部件通过总线相连接，<strong>外部设备通过相应的接口电路再与总线相连接</strong>，从而形成了计算机硬件系统。</p><h3 id="文件系统的功能作用"><a href="#文件系统的功能作用" class="headerlink" title="文件系统的功能作用"></a>文件系统的功能作用</h3><p>管理和调度文件的存储空间，提供文件的逻辑结构、物理结构和存储方法；实现文件从标识到实际地址的映射，实现文件的控制操作和存取操作，实现文件信息的共享并提供可靠的文件保密和保护措施，提供文件的安全措施。</p><h3 id="什么是背包算法"><a href="#什么是背包算法" class="headerlink" title="什么是背包算法"></a>什么是背包算法</h3><p>参见背包九讲。</p><h3 id="P问题、NP问题、NP完全问题、NP难问题"><a href="#P问题、NP问题、NP完全问题、NP难问题" class="headerlink" title="P问题、NP问题、NP完全问题、NP难问题"></a>P问题、NP问题、NP完全问题、NP难问题</h3><p>参见： <a href="https://zhuanlan.zhihu.com/p/73953567">https://zhuanlan.zhihu.com/p/73953567</a></p><p>注意，链接文章有一些疏漏，评论区已指出。</p><h3 id="人工智能和机器学习有什么关系"><a href="#人工智能和机器学习有什么关系" class="headerlink" title="人工智能和机器学习有什么关系"></a>人工智能和机器学习有什么关系</h3><p>机器学习是实现人工智能的一种技术手段。人工智能可以利用多种方法和技术来实现，而机器学习是其中一种非常重要的方法。通过机器学习，人工智能系统可以从数据中学习，从而提高自己的性能和智能水平，使其能够更好地执行各种任务。</p><h3 id="对计算机哪个领域方向感兴趣"><a href="#对计算机哪个领域方向感兴趣" class="headerlink" title="对计算机哪个领域方向感兴趣"></a>对计算机哪个领域方向感兴趣</h3><p>其实我个人认为，在有深入的了解前谈兴趣可能会沦为一种“空谈”。</p><p>作为一个跨考生，我接触和做过的大概只有一些基础的算法，做过自己的网页，了解过数据库的知识，并且在备考的过程中学习了网络、计算机组成、操作系统的知识。</p><p>我个人在之前可能会对图像方面比较感兴趣，写过柏林噪声之类的代码。我也从以前的同学那了解到有计算机视觉这个分支领域，据说非常艰深而且竞争激烈。</p><p>我现在的状态的话应该是对各方面都愿意尝试。</p><h3 id="TCP-IP模型有哪些层，每层的协议有什么"><a href="#TCP-IP模型有哪些层，每层的协议有什么" class="headerlink" title="TCP/IP模型有哪些层，每层的协议有什么"></a>TCP/IP模型有哪些层，每层的协议有什么</h3><p>TCP/IP 模型将网络通信分为多个层次，每个层次都有不同的功能和协议。TCP/IP 模型包括四个层次：应用层、运输层、网际层、网络接口层。</p><p>应用层的协议有：HTTP协议、SMTP协议、DNS协议、RTP协议等。<br>运输层的协议有：TCP 和 UDP 协议。<br>网际层的协议有 IP 协议、ARP 协议等。<br>由于 TCP/IP 体系结构为了将不同的网络接口进行互连，因此它的网络接口层并没有规定什么具体的内容，而是旨在提供灵活性，以适应各种网络类型。</p><p><img src="https://bu.dusays.com/2024/03/25/660171080ae17.png" alt="69-1.png"></p><p>IP 协议可以将不同的网络接口互联，并向其上的 TCP 协议和 UDP 协议提供网络互联服务。而 TCP 协议在享受 IP 协议提供的网络互联服务的基础上，可向应用层的相应协议提供可靠传输的服务。UDP 协议在享受 IP 协议提供的网络互联服务的基础上，可向应用层的相应协议提供不可靠传输的服务。IP 协议作为 TCP/IP 体系结构中的核心协议，一方面负责互连不同的网络接口，也就是 IP over Everything；另一方面，为各种网络应用提供服务，也就是 Everything over IP. 在 TCP/IP 协议体系中包含有大量协议，IP 协议和 TCP 协议是其中非常重要的两个协议，因此，用 TCP 和 IP 这两个协议来表示整个协议大家族，常称为 TCP/IP 协议族。</p><p><img src="https://s2.loli.net/2024/03/25/Pujl8QtYdNy2o9f.png" alt="69-2.png"></p><h3 id="简单解释一下编译原理"><a href="#简单解释一下编译原理" class="headerlink" title="简单解释一下编译原理"></a>简单解释一下编译原理</h3><p>编译原理的内容包括编译程序构造的一般原理和基本方法。内容包括语言和文法、词法分析、语法分析、语法制导翻译、中间代码生战、存储管理、代码优化和目标代码生成。</p><h3 id="编译执行和解释执行的区别"><a href="#编译执行和解释执行的区别" class="headerlink" title="编译执行和解释执行的区别"></a>编译执行和解释执行的区别</h3><p>从启动效率来看，解释执行不需要进行编译操作，而编译执行，要经过编译过程。解释执行启动速度更快。</p><p>从运行效率来看，因为编译执行只需要编译一次，以后再运行就无需编译，而解释执行每次都要经过解释过程，所以编译执行效率更高。</p><p>从内存使用方面来看，编译执行需要生成编译后的机器码文件，而解释执行时逐句解释执行，所以解释执行对内存占用更少。</p><p>从跨平台的角度来看，因为解释执行每次可以根据不同的平台进行解释，例如js在linux和windows都可以运行，而C语言在windows下编译后的文件，只能在windows下执行。</p><h3 id="交换机和路由器的区别"><a href="#交换机和路由器的区别" class="headerlink" title="交换机和路由器的区别"></a>交换机和路由器的区别</h3><p>路由器在网络层，路由器根据IP地址寻址，路由器可以处理TCP/IP协议，交换机不可以。交换机根据MAC地址寻址。</p><p>路由器可以把一个IP分配给很多个主机使用，这些主机对外只表现出一个IP。交换机可以把很多主机连起来，这些主机对外各有各的IP.</p><p>集线器、交换机是做端口扩展的，就是扩大局域网(通常都是以太网)的接入点，让局域网可以连进更多的电脑。路由器是用来做网间连接，用来连接不同的网络。</p><h3 id="解释一下云计算"><a href="#解释一下云计算" class="headerlink" title="解释一下云计算"></a>解释一下云计算</h3><p>云计算(cloud computing)是分布式计算的一种，指的是通过网络“云”将巨大的数据计算处理程序分解成无数个小程序，然后，通过多部服务器组成的系统进行处理和分析这些小程序得到结果并返回给用户。</p><h3 id="设计一个存储器需要注意什么"><a href="#设计一个存储器需要注意什么" class="headerlink" title="设计一个存储器需要注意什么"></a>设计一个存储器需要注意什么</h3><p>存储速度、存储容量、CAS延迟时间、内存带宽</p><h3 id="什么是摩尔定律"><a href="#什么是摩尔定律" class="headerlink" title="什么是摩尔定律"></a>什么是摩尔定律</h3><blockquote><p>每隔18至24个月，集成电路中可容纳的晶体管数量将翻一番，而成本却保持不变。</p></blockquote><p>（其他解释，相同的价钱，能买到的…）</p><p>然而，随着技术的不断进步，摩尔定律也面临着一些挑战。由于电子元件尺寸接近原子尺度，制程工艺面临着物理限制，晶体管数量的增长速度已经开始放缓。</p><h3 id="敏捷开发是什么"><a href="#敏捷开发是什么" class="headerlink" title="敏捷开发是什么"></a>敏捷开发是什么</h3><p>敏捷开发以用户的需求进化为核心，采用迭代、循序渐进的方法进行软件开发。在敏捷开发中，软件项目在构建初期被切分成多个子项目，各个子项目的成果都经过测试，具备可视、可集成和可运行使用的特征。<strong>换言之，就是把一个大项目分为多个相互联系，但也可独立运行的小项目，并分别完成，在此过程中软件一直处于可使用状态。</strong></p><h3 id="解释下计算机网络的三握手"><a href="#解释下计算机网络的三握手" class="headerlink" title="解释下计算机网络的三握手"></a>解释下计算机网络的三握手</h3><p>所谓的“三次握手”:为了对每次发送的数据量进行跟踪与协商，确保数据段的发送和接收同步，根据所接收到的数据量而确认数据发送、接收完毕后何时撤消联系，并建立虚连接。</p><h3 id="程序的三个组成部分"><a href="#程序的三个组成部分" class="headerlink" title="程序的三个组成部分"></a>程序的三个组成部分</h3><p>程序号、程序内容、程序结束</p><h3 id="计组中流水线的作用"><a href="#计组中流水线的作用" class="headerlink" title="计组中流水线的作用"></a>计组中流水线的作用</h3><p>（用自己的话讲两句）</p><p>这种工作方式与工厂中的生产流水线十分相似，因此称为流水线技术。</p><p>从本质上讲，流水线技术是一种时间并行技术。</p><h3 id="列举几个机器学习的算法"><a href="#列举几个机器学习的算法" class="headerlink" title="列举几个机器学习的算法"></a>列举几个机器学习的算法</h3><p>决策树算法 · 朴素贝叶斯算法 · 支持向量机算法 · 随机森林算法 · 人工神经网络算法 · Boosting与Bagging算法 · 关联规则算法 </p><h3 id="面向对象和面向过程的区别。"><a href="#面向对象和面向过程的区别。" class="headerlink" title="面向对象和面向过程的区别。"></a>面向对象和面向过程的区别。</h3><p>面向过程<br>优点: 性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源；比如单片机、嵌入式开发、Linux/Unix 等一般采用面向过程开发，性能是最重要的因素。<br>缺点:没有面向对象易维护、易复用、易扩展。</p><p>面向对象<br>优点: 易维护、易复用、易扩展，由于面向对象有封装、继承、多态的特性，可以设计出低耦合的系统，使系统更加灵活、更易于维护。<br>缺点: 性能比面向过程低。</p><h3 id="排序算法相关"><a href="#排序算法相关" class="headerlink" title="排序算法相关"></a>排序算法相关</h3><p>（我真服了初试考过算法为什么复试还要准备啊）</p><p><img src="https://bu.dusays.com/2024/03/26/6602946494542.png" alt="69-6.png"></p><h3 id="冯诺依曼计算机特点"><a href="#冯诺依曼计算机特点" class="headerlink" title="冯诺依曼计算机特点"></a>冯诺依曼计算机特点</h3><p>冯诺依曼机的组成: 存储器+运算器+控制器+输入设备+输出设备。<br>其主要特征为: 数制采用二进制；存储程序；计算机应该按照程序顺序执行。</p><h3 id="对搜索引擎有什么了解，举例"><a href="#对搜索引擎有什么了解，举例" class="headerlink" title="对搜索引擎有什么了解，举例"></a>对搜索引擎有什么了解，举例</h3><p>所谓搜索引擎，就是<strong>根据用户需求与一定算法</strong>，运用<strong>特定策略从互联网检索出制定信息反馈给用户</strong>的一门<strong>检索技术</strong>。搜索引擎依托于多种技术，如爬虫技术、检索排序技术、网页处理技术、大数据处理技术、自然语言处理技术等，为信息检索用户提供快速、高相关性的信息服务。搜索引擎技术的核心模块一般包括爬虫、索引、检索和排序等，同时可添加其他一系列辅助模块，以为用户创造更好的网络使用环境。百度、谷歌等。</p><h3 id="软件的组成部分有什么"><a href="#软件的组成部分有什么" class="headerlink" title="软件的组成部分有什么"></a>软件的组成部分有什么</h3><p>软件由程序、数据和文档三部分组成</p><h3 id="顺序表和链表的区别"><a href="#顺序表和链表的区别" class="headerlink" title="顺序表和链表的区别"></a>顺序表和链表的区别</h3><p>顺序表(顺序存储)<br>优点:支持随机存取、存储密度高<br>缺点:大片连续空间分配不方便，改变容量不方便</p><p>链表(链式存储)<br>优点:离散的小空间分配方便,改变容量方便<br>缺点:不可随机存取，存储密度低</p><h3 id="操作系统中为什么要引入文件管理"><a href="#操作系统中为什么要引入文件管理" class="headerlink" title="操作系统中为什么要引入文件管理"></a>操作系统中为什么要引入文件管理</h3><p>文件管理是操作系统五大职能之一，主要涉及文件的逻辑组织和物理组织，目录的结构和管理。所谓文件管理，就是操作系统中实现文件统一管理的一组软件、被管理的文件以及为实施文件管理所需要的一些数据结构的总称(是操作系统中负责存取和管理文件信息的机构)从系统角度来看，文件系统是对文件存储器的存储空间进行组织，分配和回收，负责文件的存储检索，共享和保护。从用户角度来看，文件系统主要是实现”按名取存”，文件系统的用户只要知道所需文件的文件名，就可存取文件中的信息，而无需知道这些文件究竟存放在什么地方。</p><p>（上面看着有些碍眼。。。）</p><ol><li>实现按文件名存取文件信息</li><li>为用户提供统一友好的接口</li><li>实施对文件和文件目录的管理</li><li>文件存储器空间的分配与回收</li><li>提供有关文件的共享和保护。</li></ol><h3 id="说下软件工程的生命周期"><a href="#说下软件工程的生命周期" class="headerlink" title="说下软件工程的生命周期"></a>说下软件工程的生命周期</h3><p>是软件的产生直到报废或停止使用的生命周期。软件生命周期内有<strong>问题定义、可行性分析、总体描述、系统设计、编码、调试和测试、验收与运行、维护升级到废弃</strong>等阶段，也有将以上阶段的活动组合在内的迭代阶段，即迭代作为生命周期的阶段。</p><h3 id="什么是多继承"><a href="#什么是多继承" class="headerlink" title="什么是多继承"></a>什么是多继承</h3><p>多继承即一个子类可以有多个父类，它继承了多个父类的特性。</p><h3 id="简述指令周期的数据流"><a href="#简述指令周期的数据流" class="headerlink" title="简述指令周期的数据流"></a>简述指令周期的数据流</h3><p>取指周期:<br>（从主存中取出指令代码并交到IR）<br>PC-&gt;MAR<br>MAR -&gt; 地址总线<br>地址总线 -&gt; 主存<br>CU -&gt; 主存<br>主存 -&gt; 数据总线<br>数据总线 -&gt; MDR<br>MDR -&gt; IR</p><p>间址周期：<br>取操作数的有效地址</p><p>执行周期：<br>数据流形态各异，具体问题具体分析</p><p>中断周期：<br>核心任务是处理中断请求</p><h3 id="时钟周期、机器周期、指令周期"><a href="#时钟周期、机器周期、指令周期" class="headerlink" title="时钟周期、机器周期、指令周期"></a>时钟周期、机器周期、指令周期</h3><p><img src="https://s2.loli.net/2024/03/26/TdO9EPvw5gzesRV.png" alt="69-7.png"></p><h3 id="进程之间的高级通信"><a href="#进程之间的高级通信" class="headerlink" title="进程之间的高级通信"></a>进程之间的高级通信</h3><p><strong>共享存储</strong>：<br>在通信的进程之间存在一块可<strong>直接访问的内存空间</strong>，通过对这片共享空间进行读/写操作实现进程之间的信息交换，共享存储分为<strong>基于数据结构的</strong>共享和基于<strong>存储区</strong>的共享。</p><p><strong>消息传递</strong>：<br>进程间的数据交换是以格式化的消息(Message)为单位。进程通过系统提供的<strong>发送消息和接收消息两个原语</strong>进行数据交换。进程可以通过<strong>消息缓冲队列</strong>直接通信，也可以通过中间<strong>实体信箱</strong>进行间接通信。</p><p><strong>管道通信</strong>：<br>管道是指用于连接一个读进程和一个写进程以实现它们之间的通信的一个共享文件，又名pipe文件。管道机制必须提供互斥，同步和确定对方存在的能力。管道只能采用<strong>半双工通信</strong>，要实现父子进程双方互动通信，需要定义两个管道。</p><h3 id="什么是操作系统里的‘锁’"><a href="#什么是操作系统里的‘锁’" class="headerlink" title="什么是操作系统里的‘锁’"></a>什么是操作系统里的‘锁’</h3><p>为了保证数据的一致性，在多线程编程中我们会用到锁，使得在某一时间点，只有一个线程进入临界区代码。信号量机制就是实现进程同步与互斥的机制。通过PV操作。</p><h3 id="说说文件的逻辑结构"><a href="#说说文件的逻辑结构" class="headerlink" title="说说文件的逻辑结构"></a>说说文件的逻辑结构</h3><p>无结构文件(流式文件):将数据按顺序组织记录,以字节为单位。</p><p>有结构文件(记录式文件):</p><ul><li>顺序文件:可以顺序存储或以链表形式存储。</li><li>索引文件:索引表本身是定长记录的顺序文件。</li><li>索引顺序文件:将顺序文件中的记录分为若干组，为文件建立一张索引表，一组记录对应一个索引表项。可根据需要建立多级索引。</li></ul><h3 id="根据网络的覆盖范围将网络分类"><a href="#根据网络的覆盖范围将网络分类" class="headerlink" title="根据网络的覆盖范围将网络分类"></a>根据网络的覆盖范围将网络分类</h3><p>计算机网络按覆盖范围分类可分为广域网、城域网、局域网。</p><ol><li>局域网是将小区域内的各种通信设备互连在一起的通信网络。使用广播技术</li><li>广域网特点(使用交换技术,是点对点式网络)<ul><li>覆盖的地理区域大，通常在几公里至几千、几万公里，网络可跨越市、地区、省、国家、洲洋乃至全球。</li><li>广域网连接常借用公用网络</li><li>传输速率比较低</li><li>网络拓扑结构复杂</li></ul></li><li>城域网特点<br>是在一个城市范围内所建立的计算机通信网，简称MAN。这是80年代末，在LAN的发展基础上提出的，在技术上与LAN有许多相似之处，而与广域网(WAN)区别较大。<ul><li>传输速率高</li><li>用户投入少，接入简单</li><li>技术先进、安全</li><li>大多采用以太网技术</li></ul></li></ol><p>是否采用分组存储转发与路由选择机制是点对点式网络与广播式网络的重要区别。</p><h3 id="拥塞控制在哪层-具体说明。"><a href="#拥塞控制在哪层-具体说明。" class="headerlink" title="拥塞控制在哪层?具体说明。"></a>拥塞控制在哪层?具体说明。</h3><p><strong>拥塞控制在传输层</strong>，而且是在使用TCP协议的情况下。拥塞控制是指<strong>防止过多的数据注入网络</strong>，以使网络中的路由器或链路不致过载。拥塞控制主要是使用<strong>慢开始</strong>和<strong>拥塞避免</strong>组合和<strong>快重传</strong>和<strong>快恢复</strong>组合。</p><p>慢开始是<strong>避免新建立的连接一开始就大量发送数据包，只能根据网络情况逐步增加每次发送的数据量</strong>。当新建连接时，拥塞窗口初始化为1个最大报文段(MSS)大小，发送端开始按照拥塞窗口大小发送数据，每当有一个报文段被确认，cwnd就增加至多1个MSS大小。用这样的方法来逐步增大拥塞窗口。</p><p>拥塞避免是当拥塞窗口增大到一个规定的<strong>慢开始门限</strong>，然后改用拥塞避免算法，拥塞窗口每经过一个往返时延就增加一个MSS大小而不是加倍，使拥塞窗口按线性规律缓慢增长。当出现一次超时，令慢开始门限等于当前拥塞窗口一半，然后把拥塞窗口重新设置为1。</p><p>快重传和快恢复算法是对慢开始和拥塞算法的改进。</p><p>快重传是当<strong>发送方连续收到三个重复的ACK报文时，直接重传对方尚未收到的报文段</strong>，而不必等待那个报文段设置的重传计时器超时。</p><p>快恢复是当<strong>发送方连续收到三个重复的ACK报文时，把慢开始门限设置为出现拥塞时发送方拥塞窗口一半，然后拥塞窗口开始线性增长</strong>。</p><p>这几种算法是同时应用在拥塞控制机制之中的，当发送方检测到超时时，就采用慢开始和拥塞避免，当发送方接收到冗余ACK时，就采用快重传和快恢复。</p><h3 id="OSI模型中流量控制在哪些层实现"><a href="#OSI模型中流量控制在哪些层实现" class="headerlink" title="OSI模型中流量控制在哪些层实现"></a>OSI模型中流量控制在哪些层实现</h3><p>数据链路层，网络层，传输层。</p><h3 id="解释PPP协议-在哪一层的"><a href="#解释PPP协议-在哪一层的" class="headerlink" title="解释PPP协议,在哪一层的"></a>解释PPP协议,在哪一层的</h3><p>PPP协议是使用<strong>串行线路通信的面向字节</strong>的协议，该协议应用在直接连接两个结点的链路上。是从SLIP协议的基础上发展而来的，既可以在异步线路上传输，也可以在同步线路上使用。在数据链路层。</p><h3 id="奈式准则和香农定理说明什么"><a href="#奈式准则和香农定理说明什么" class="headerlink" title="奈式准则和香农定理说明什么"></a>奈式准则和香农定理说明什么</h3><p>在假定的理想条件下，为避免码间串扰，码元传输速率是有极限的。</p><p><img src="https://bu.dusays.com/2024/03/26/6602c823aa134.png" alt="69-8.png"></p><p>香农定理得出信道的极限数据传输速率与带宽，信噪比有关。</p><h3 id="系统调用的过程"><a href="#系统调用的过程" class="headerlink" title="系统调用的过程"></a>系统调用的过程</h3><p>系统调用把应用程序的请求传给内核，调用相应的的内核函数完成所需的处理，将处理结果返回给应用程序。</p><h2 id="人文、心理、开放性问题"><a href="#人文、心理、开放性问题" class="headerlink" title="人文、心理、开放性问题"></a>人文、心理、开放性问题</h2><p>1、你对团队精神有什么看法。</p><p>2、你读过哪些书,除了专业课的。</p><blockquote><p>课外闲书吗？当然四大名著是看过的，水浒三国，红楼西游，都看过，另外还有比如《三侠五义》《巴黎圣母院》《月亮与六便士》《局外人》？大学里我记得，看过余华的一些，还有…《海边的卡夫卡》《维荣之妻》《斜阳》？要说最影响我审美的，应该是初中小学时候，看的曹文轩的书，《草房子》和《青铜葵花》，《根鸟》，印象都蛮深的。<br>最近有在读的是《都柏林人》和一本西域绘画的本子，上面是敦煌藏经洞里的一些画。里面的一些内容回答了我多年的疑惑，地藏十王图，上面有一七、二七、…一直到六七的过程，什么“一七过秦广王”，后来了解到传说中秦广王和南京的紫金山也有很多联系。</p></blockquote><p>3、研究生阶段的计划是什么。</p><p>4、大学有什么遗憾?</p><p>5、家里最重要的人是谁?</p><p>6、你对未来生活的规划是什么?</p><p>7、怎么看待成绩不如你的人奖学金比你高?</p><p>8、在学术中你觉得什么是最重要的?</p><p>9、考上研究生之后你有什么计划?</p><p>10、大学里最遗憾的事情是什么?</p><p>11、说下大学参加的社会实践和科技实践。</p><p>12、你为什么选择考□大学?</p><p>13、你觉得□□这个城市怎么样?</p><p>14、你参加过什么有关于计算机方面的比赛?</p><p>15、你本科的研究方向是什么?</p><p>16、你的本科毕业设计方向是什么?</p><p>17、如果专业跨度比较大,你该怎么面对?</p><p>18、你在编码过程中遇到 bug 或者困难你是怎么解决的?</p><blockquote><p>对于短的代码，我主要是看、在草稿纸上想。当然我知道有 debugger 之类的东西，但可能是高中遗留下来的习惯，我倾向于自己先检查是不是哪里的代码逻辑有问题。对于长的代码，一般可以采用增量开发的方法，写一段代码就编译测试一下，这样可以避免很多 bug 一齐爆发。</p></blockquote><h2 id="英语问题"><a href="#英语问题" class="headerlink" title="英语问题"></a>英语问题</h2><p>你知道什么传统文化?</p><p>数据库有什么功能?</p><p>什么是AR技术?</p><p>什么是数据结构?</p><p>中国社会面临哪些挑战?</p><p>c与java有什么区别?</p><p>互联网对生活的改变?</p><p>你想去哪里旅行?</p><p>你最喜欢的书是什么?</p><p>你对网上购物有什么看法?</p><p>本科期间学过什么技术?</p><p>大学里最难忘的经历?</p><p>你最崇拜的人?</p><p>你怎么看待网上阅读?</p><p>你对图灵有什么了解?</p><p>什么是面向对象的方法(Object-Oriented Method)?</p><p>你羡慕的品格是什么?</p><p>你怎么面对批评?</p><p>专业自己选的还是父母选的?</p><p>用英语介绍一下你的专业。</p><p>在你的专业方面有什么计划?</p><p>你对人工智能有什么了解?</p><p>请你解释一下深度学习。</p><p>为什么有的人喜欢收集邮票?</p><p>描述一下TCP/IP协议?</p><p>保护环境有什么方法?</p><h2 id="计网杂项知识点"><a href="#计网杂项知识点" class="headerlink" title="计网杂项知识点"></a>计网杂项知识点</h2><p><img src="https://bu.dusays.com/2024/03/25/66018ed740336.png" alt="69-3.png"></p><p><img src="https://bu.dusays.com/2024/03/25/66018ed37cfa7.png" alt="69-4.png"></p><p><img src="https://bu.dusays.com/2024/03/25/66018ed7143ac.png" alt="69-5.png"></p><h2 id="后日谈"><a href="#后日谈" class="headerlink" title="后日谈"></a>后日谈</h2><p>评价：盲人摸象。</p><p>首先（也是最重要的一点），并没有问所谓的“人文、心理问题”，都是问的专业问题。每个面试考生的时间是有限的。</p><p>桌子上一堆题，装在袋子里让你随便选一个。</p><p>我抽的题目是计算机组成原理的，没有计网的。亏我过了两遍计网知识点。</p><p>此外还有一些别的问题，问了我 C++ 和离散数学、云计算相关的东西。云计算的问题我就直接背的八股。</p><p>英语问题问了 what is operating system ? 我整个愣住，总不能说 operating system is a system to operate your computer 吧？后来换了一个问题，总算答上来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;专业课问题&quot;&gt;&lt;a href=&quot;#专业课问题&quot; class=&quot;headerlink&quot; title=&quot;专业课问题&quot;&gt;&lt;/a&gt;专业课问题&lt;/h2&gt;&lt;h3 id=&quot;介绍一下大数据，有什么相关的应用&quot;&gt;&lt;a href=&quot;#介绍一下大数据，有什么相关的应用&quot; class=&quot;</summary>
      
    
    
    
    <category term="计算机" scheme="https://loveofpeach.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="八股文" scheme="https://loveofpeach.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理（续）</title>
    <link href="https://loveofpeach.github.io/posts/60249dd6.html"/>
    <id>https://loveofpeach.github.io/posts/60249dd6.html</id>
    <published>2024-03-24T13:42:56.000Z</published>
    <updated>2024-03-24T14:32:56.935Z</updated>
    
    <content type="html"><![CDATA[<p>前情提要：因为 <a href="https://loveofpeach.github.io/posts/aae04aa8.html">计算机组成原理笔记</a> 页面内容太多了，会把平板手机卡崩，故需要迁移一部分内容到新的文章。</p><h2 id="主存储器与-CPU-的连接"><a href="#主存储器与-CPU-的连接" class="headerlink" title="主存储器与 CPU 的连接"></a>主存储器与 CPU 的连接</h2><div class="row"><iframe src="https://drive.google.com/file/d/1BWTx3WuHkZi5HVfQCjAEdpgcvdYsOPQG/preview" style="width:100%; height:550px"></iframe></div><h2 id="双端口-RAM-和多模块存储器"><a href="#双端口-RAM-和多模块存储器" class="headerlink" title="双端口 RAM 和多模块存储器"></a>双端口 RAM 和多模块存储器</h2><div class="row"><iframe src="https://drive.google.com/file/d/1mS5W_kXsHYv4HzKXw1bvLb4fopaJr4SC/preview" style="width:100%; height:550px"></iframe></div><h2 id="磁盘存储器"><a href="#磁盘存储器" class="headerlink" title="磁盘存储器"></a>磁盘存储器</h2><div class="row"><iframe src="https://drive.google.com/file/d/1qgxBUYVMg0lM0AhSG59-OhbPeb48rKRu/preview" style="width:100%; height:550px"></iframe></div><h2 id="固态硬盘SSD"><a href="#固态硬盘SSD" class="headerlink" title="固态硬盘SSD"></a>固态硬盘SSD</h2><div class="row"><iframe src="https://drive.google.com/file/d/1B5SUZXO2_WQ3MTK4H-Q6mOUrd6cDL_2r/preview" style="width:100%; height:550px"></iframe></div><h2 id="Cache的基本概念和原理"><a href="#Cache的基本概念和原理" class="headerlink" title="Cache的基本概念和原理"></a>Cache的基本概念和原理</h2><div class="row"><iframe src="https://drive.google.com/file/d/1rvS6lf3WPzXW_5hmpkYPdjcm8hJ_G4jD/preview" style="width:100%; height:550px"></iframe></div><h2 id="Cache和主存的映射方式"><a href="#Cache和主存的映射方式" class="headerlink" title="Cache和主存的映射方式"></a>Cache和主存的映射方式</h2><div class="row"><iframe src="https://drive.google.com/file/d/1SY1xcgw2cOMOQk6kCgm8_WlYJu1heQEP/preview" style="width:100%; height:550px"></iframe></div><h2 id="Cache替换算法"><a href="#Cache替换算法" class="headerlink" title="Cache替换算法"></a>Cache替换算法</h2><div class="row"><iframe src="https://drive.google.com/file/d/13Hg5u2orlNqmmng84XNqhVpSWQ5nJ51i/preview" style="width:100%; height:550px"></iframe></div><h2 id="Cache写策略"><a href="#Cache写策略" class="headerlink" title="Cache写策略"></a>Cache写策略</h2><div class="row"><iframe src="https://drive.google.com/file/d/1Wk5Z7auWNqxuXbQB1btoNkEUzGGC9I_c/preview" style="width:100%; height:550px"></iframe></div><h2 id="页式存储"><a href="#页式存储" class="headerlink" title="页式存储"></a>页式存储</h2><div class="row"><iframe src="https://drive.google.com/file/d/137WPNTx58o9FGx_EszOrEpDtLyXwzcEG/preview" style="width:100%; height:550px"></iframe></div><h2 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h2><div class="row"><iframe src="https://drive.google.com/file/d/1zBuqftRjNMsWyTuufPXMAjoEa5LHkgYF/preview" style="width:100%; height:550px"></iframe></div><h2 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h2><div class="row"><iframe src="https://drive.google.com/file/d/1JVn83ZOEKRO_SLa6w2wx8UHTPGOlplwX/preview" style="width:100%; height:550px"></iframe></div><h2 id="拓展操作码指令格式"><a href="#拓展操作码指令格式" class="headerlink" title="拓展操作码指令格式"></a>拓展操作码指令格式</h2><div class="row"><iframe src="https://drive.google.com/file/d/1hLkg2BpR69raxxC-neaOnqtzS_B4_tGV/preview" style="width:100%; height:550px"></iframe></div><h2 id="指令寻址"><a href="#指令寻址" class="headerlink" title="指令寻址"></a>指令寻址</h2><div class="row"><iframe src="https://drive.google.com/file/d/1yiOMO0JGQk65hQcRaZl9c-uPpQr2GI_t/preview" style="width:100%; height:550px"></iframe></div><h2 id="数据寻址"><a href="#数据寻址" class="headerlink" title="数据寻址"></a>数据寻址</h2><div class="row"><iframe src="https://drive.google.com/file/d/174_mKKWe0tHTwdDJrB81YfYNIrNydla7/preview" style="width:100%; height:550px"></iframe></div><h2 id="数据寻址2-偏移寻址"><a href="#数据寻址2-偏移寻址" class="headerlink" title="数据寻址2_偏移寻址"></a>数据寻址2_偏移寻址</h2><div class="row"><iframe src="https://drive.google.com/file/d/1M3eYizAc5-u3ZG6ebwnsy7dAmicFvvrm/preview" style="width:100%; height:550px"></iframe></div><h2 id="数据寻址3-堆栈寻址"><a href="#数据寻址3-堆栈寻址" class="headerlink" title="数据寻址3_堆栈寻址"></a>数据寻址3_堆栈寻址</h2><p><img src="https://bu.dusays.com/2024/03/24/6600343b427af.jpg" alt="4.2_4_数据寻址3_堆栈寻址-1.jpg"></p><p><img src="https://bu.dusays.com/2024/03/24/6600343ba41cb.jpg" alt="4.2_4_数据寻址3_堆栈寻址-2.jpg"></p><p><img src="https://bu.dusays.com/2024/03/24/6600343bc15d8.jpg" alt="4.2_4_数据寻址3_堆栈寻址-3.jpg"></p><p><img src="https://bu.dusays.com/2024/03/24/6600343bcdb3b.jpg" alt="4.2_4_数据寻址3_堆栈寻址-4.jpg"></p><p><img src="https://bu.dusays.com/2024/03/24/6600343bc899b.jpg" alt="4.2_4_数据寻址3_堆栈寻址-5.jpg"></p><h2 id="高级语言与机器级代码之间的对应"><a href="#高级语言与机器级代码之间的对应" class="headerlink" title="高级语言与机器级代码之间的对应"></a>高级语言与机器级代码之间的对应</h2><div class="row"><iframe src="https://drive.google.com/file/d/10gUeyOGBntKlpobW8bDlkTQCCOmqsFZj/preview" style="width:100%; height:550px"></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前情提要：因为 &lt;a href=&quot;https://loveofpeach.github.io/posts/aae04aa8.html&quot;&gt;计算机组成原理笔记&lt;/a&gt; 页面内容太多了，会把平板手机卡崩，故需要迁移一部分内容到新的文章。&lt;/p&gt;
&lt;h2 id=&quot;主存储器与-CPU</summary>
      
    
    
    
    <category term="计算机" scheme="https://loveofpeach.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="计组" scheme="https://loveofpeach.github.io/tags/%E8%AE%A1%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据库应试笔记</title>
    <link href="https://loveofpeach.github.io/posts/3beded87.html"/>
    <id>https://loveofpeach.github.io/posts/3beded87.html</id>
    <published>2024-02-28T15:48:20.000Z</published>
    <updated>2024-04-03T12:46:40.091Z</updated>
    
    <content type="html"><![CDATA[<p>大意了，没有闪。</p><p>之前学习的数据库偏实践，还不足以应付考试。</p><p>另外应该是能进复试的。</p><p><img src="https://bu.dusays.com/2024/02/28/65df581912988.gif" alt="67-1.gif"></p><h2 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h2><div class="row"><iframe src="https://drive.google.com/file/d/1MgKC66v1yFREuq8J9-ZNsv2sw7nBug5n/preview" style="width:100%; height:550px"></iframe></div><h2 id="关系模型、关系代数"><a href="#关系模型、关系代数" class="headerlink" title="关系模型、关系代数"></a>关系模型、关系代数</h2><div class="row"><iframe src="https://drive.google.com/file/d/1T0zobWPekLkp-Meae_NZfCVm4f9ysnuM/preview" style="width:100%; height:550px"></iframe></div><h2 id="关系代数的形式定义"><a href="#关系代数的形式定义" class="headerlink" title="关系代数的形式定义"></a>关系代数的形式定义</h2><div class="row"><iframe src="https://drive.google.com/file/d/1fQdEWNRhrZ2jRcscnzKz3ynzPH60Hyqy/preview" style="width:100%; height:550px"></iframe></div><p>订正：PDF 的最后，教材上的答案没有疏漏，是我看不仔细。⋈符号下面没有东西，则默认为自然连接。</p><h2 id="函数依赖及范式"><a href="#函数依赖及范式" class="headerlink" title="函数依赖及范式"></a>函数依赖及范式</h2><div class="row"><iframe src="https://drive.google.com/file/d/1lWuvR8Jq0V0peF1rKsqzmcB1RqIb75Yx/preview" style="width:100%; height:550px"></iframe></div><h2 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h2><iframe  id="ppt"  width="100%"  onload="autoChange()"  src="https://onedrive.live.com/embed?resid=C7419D744EAAFF4C%214404&authkey=!AK_wSBOdDiSxrVg&em=2"  frameborder="0"></iframe><script>  function autoChange() {    let ifm = document.getElementById("ppt");    ifm.height = (ifm.clientWidth / 16) * 9 + 24;  }  window.onresize = autoChange;</script><h2 id="存储过程和触发器"><a href="#存储过程和触发器" class="headerlink" title="存储过程和触发器"></a>存储过程和触发器</h2><iframe  id="ppt2"  width="100%"  onload="autoChange2()"  src="https://onedrive.live.com/embed?resid=C7419D744EAAFF4C%214405&authkey=!AJBmC8YOG80Huj8&em=2"  frameborder="0"></iframe><script>  function autoChange2() {    let ifm = document.getElementById("ppt2");    ifm.height = (ifm.clientWidth / 16) * 9 + 24;  }  window.onresize = autoChange;</script><center><font color="red">- - - - - AIGC - - - - -</font></center><p><strong>问：</strong><br>sqlserver有存储过程的概念，mysql有吗</p><p><strong>答：</strong><br>是的，MySQL也有存储过程的概念，类似于SQL Server。存储过程是一组经过预编译并存储在数据库中的SQL语句，它们可以被视为一种数据库对象。存储过程可以接受参数、执行SQL查询、包含条件逻辑和循环，还可以在应用程序和数据库之间提供更高的安全性和性能。</p><p>在MySQL中，你可以使用<code>CREATE PROCEDURE</code>语句来定义存储过程。存储过程的创建和调用与其他关系型数据库系统中的类似。</p><p>一个简单的MySQL存储过程创建示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sample_procedure()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 存储过程的SQL语句</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> your_table;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>要调用存储过程，可以使用<code>CALL</code>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> sample_procedure();</span><br></pre></td></tr></table></figure><p>这是一个简单的例子，实际上，存储过程可以包含更复杂的逻辑和多个SQL语句。</p><p><strong>问：</strong><br>上面的代码中，DELIMITER 是什么</p><p><strong>答：</strong><br>在MySQL中，<code>DELIMITER</code>是一个指令，用于更改语句的结束符。默认情况下，MySQL使用分号<code>;</code>作为语句的结束符。但是，在存储过程和触发器等复合语句中，会包含多个SQL语句，因此需要使用<code>DELIMITER</code>来更改结束符，以便正确解析整个存储过程或触发器的定义。</p><p>在上面的例子中，<code>DELIMITER //</code> 表示将语句结束符更改为双斜杠<code>//</code>。这样，在存储过程的定义中，就可以使用分号作为每个SQL语句的结束符，而不会导致MySQL在存储过程体中认为分号是语句结束。</p><p><code>DELIMITER ;</code>表示将结束符还原为默认的分号。这样，后续的SQL语句在执行时将再次使用分号作为结束符。</p><center><font color="red">- - - - - AIGC END - - - - -</font></center><p>接下来验证上述 AIGC ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0</span> <span class="operator">|</span> March7th   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Natasha    <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> silverwolf <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> xiaomei    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lumine     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> huohuo     <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> ai         <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> Kafka      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">procedure</span> my_procedure()</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">begin</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> delimiter ;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">call</span> my_procedure();</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0</span> <span class="operator">|</span> March7th   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Natasha    <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> silverwolf <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> xiaomei    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lumine     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> huohuo     <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> ai         <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> Kafka      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><center><font color="red">- - - - - AIGC - - - - -</font></center><p><strong>问：</strong><br>介绍一下sqlserver的触发器机制</p><p><strong>答：</strong><br>在 SQL Server 中，触发器是一种特殊类型的存储过程，它会在数据库表上的特定事件（例如插入、更新或删除操作）发生时自动执行。触发器允许开发者在数据库中实现某些自动化的行为，无需手动触发。以下是 SQL Server 触发器的一般特性：</p><ol><li><strong>事件触发：</strong> 触发器与特定的数据库表相关联，并在该表上的特定事件（INSERT、UPDATE、DELETE）发生时被触发。</li><li><strong>逐行操作：</strong> 触发器通常逐行操作，即对每一行的变化都触发一次，以执行相关的逻辑。</li><li><strong>分为两类：</strong> SQL Server 触发器分为两类：AFTER触发器（在触发事件之后执行）和INSTEAD OF触发器（代替触发事件的默认行为执行）。</li><li><strong>多事件支持：</strong> 一个表可以拥有多个触发器，每个触发器关联到表的不同事件，如INSERT、UPDATE、DELETE。</li><li><strong>嵌套触发器：</strong> 触发器可以是嵌套的，即一个触发器的执行可以导致另一个触发器的调用。</li><li><strong>引用关键字：</strong> 触发器可以使用<code>INSERTED</code>和<code>DELETED</code>虚拟表，这些表包含了由触发事件引起的行的新值和旧值。</li></ol><p>一个简单的示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> example_trigger</span><br><span class="line"><span class="keyword">ON</span> your_table</span><br><span class="line">AFTER <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 触发器逻辑，可以引用 INSERTED 和 DELETED 表</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>此触发器在<code>your_table</code>表上的任何插入、更新或删除后触发，允许你执行相应的逻辑。触发器提供了一种有效的方法，通过在数据库引擎级别执行代码，对表上的事件作出响应。</p><p><strong>问：</strong><br>详细介绍一下sqlserver 的INSTEAD OF触发器</p><p><strong>答：</strong><br>在 SQL Server 中，<code>INSTEAD OF</code>触发器是一种特殊类型的触发器，与<code>AFTER</code>和<code>BEFORE</code>触发器不同，它不是在触发事件之前或之后执行，而是代替触发事件的默认行为执行。主要应用于视图上的INSERT、UPDATE、DELETE等操作，允许自定义逻辑来替代默认的数据操作行为。</p><p>以下是<code>INSTEAD OF</code>触发器的主要特性：</p><ol><li><p><strong>替代默认操作：</strong><code>INSTEAD OF</code>触发器允许在触发事件发生时代替默认的数据操作行为，例如，替代视图上的INSERT、UPDATE、DELETE操作。</p></li><li><p><strong>对视图的支持：</strong> 通常，<code>INSTEAD OF</code>触发器常用于与视图关联的表，以允许在视图上执行的数据修改操作。</p></li><li><p><strong>自定义逻辑：</strong> 可以在<code>INSTEAD OF</code>触发器中包含自定义的逻辑，例如插入、更新、删除数据之前的验证、转换等。</p></li><li><p><strong>使用<code>INSERTED</code>和<code>DELETED</code>：</strong> 与<code>AFTER</code>和<code>BEFORE</code>触发器类似，<code>INSTEAD OF</code>触发器也可以使用<code>INSERTED</code>和<code>DELETED</code>虚拟表来引用新插入和被删除的数据。</p></li></ol><p>一个简单的<code>INSTEAD OF</code>触发器的示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> instead_of_trigger</span><br><span class="line"><span class="keyword">ON</span> your_view</span><br><span class="line">INSTEAD <span class="keyword">OF</span> <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 自定义逻辑，替代默认的数据操作</span></span><br><span class="line">    <span class="comment">-- 使用 INSERTED 表引用新插入的数据</span></span><br><span class="line">    <span class="comment">-- 使用 DELETED 表引用被删除的数据</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>此触发器在<code>your_view</code>视图上的插入、更新或删除操作时执行，允许你根据需要完全自定义数据修改的行为。</p><center><font color="red">- - - - - AIGC END - - - - -</font></center><p><br></p><center><font color="red">- - - - - AIGC - - - - -</font></center><p><strong>问：</strong><br>介绍一下mysql的触发器机制</p><p><strong>答：</strong><br>MySQL的触发器（Triggers）是与表相关联的一种特殊的存储过程，它会在表上的特定事件（INSERT、UPDATE、DELETE）发生时自动执行。以下是MySQL触发器的一般特性：</p><ol><li><p><strong>事件触发：</strong> 触发器与特定表关联，并在表上的特定事件发生时被触发，例如INSERT、UPDATE、DELETE。</p></li><li><p><strong>逐行操作：</strong> 触发器通常逐行操作，即对每一行的变化都触发一次，执行相关的逻辑。</p></li><li><p><strong>BEFORE和AFTER触发器：</strong> MySQL支持BEFORE和AFTER触发器。BEFORE触发器在触发事件执行之前执行，而AFTER触发器在触发事件执行之后执行。</p></li><li><p><strong>OLD和NEW别名：</strong> 触发器可以使用OLD和NEW别名引用旧值和新值。比如，在UPDATE触发器中，OLD表示原始值，NEW表示更新后的值。</p></li><li><p><strong>多事件支持：</strong> 一个表可以有多个触发器，每个触发器可以关联到表的不同事件。</p></li><li><p><strong>不支持INSTEAD OF触发器：</strong> 不像某些数据库系统（如SQL Server），MySQL不支持INSTEAD OF触发器。MySQL中的BEFORE触发器在事件发生前执行，AFTER触发器在事件发生后执行。</p></li></ol><p>一个简单的MySQL触发器的创建示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> example_trigger</span><br><span class="line">AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> your_table</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 触发器逻辑，可以使用NEW别名引用新插入的行</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>此触发器在<code>your_table</code>表上的任何插入后触发，允许你执行相关的逻辑。触发器提供了在数据库引擎级别执行代码以响应表上事件的手段。</p><center><font color="red">- - - - - AIGC END - - - - -</font></center><p>下面放一个很长的例子，演示 mysql 的触发器。</p><p>设计一个触发器，当在member表中插入或更新记录时，自动将math列的值限制在0到100之间。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0</span> <span class="operator">|</span> March7th   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Natasha    <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> silverwolf <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> xiaomei    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lumine     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> huohuo     <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> ai         <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> Kafka      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field  <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> math   <span class="operator">|</span> <span class="type">float</span>       <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> e_date <span class="operator">|</span> datetime    <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> triggers;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="comment">-- 创建 BEFORE INSERT 触发器</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> before_insert_trigger</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> <span class="keyword">member</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     IF NEW.math <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">AND</span> (NEW.math <span class="operator">&lt;</span> <span class="number">0</span> <span class="keyword">OR</span> NEW.math <span class="operator">&gt;</span> <span class="number">100</span>) <span class="keyword">THEN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>         SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;45000&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>         <span class="keyword">SET</span> MESSAGE_TEXT <span class="operator">=</span> <span class="string">&#x27;Math score must be between 0 and 100&#x27;</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     <span class="keyword">END</span> IF;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> </span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="comment">-- 创建 BEFORE UPDATE 触发器</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> before_update_trigger</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> BEFORE <span class="keyword">UPDATE</span> <span class="keyword">ON</span> <span class="keyword">member</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     IF NEW.math <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">AND</span> (NEW.math <span class="operator">&lt;</span> <span class="number">0</span> <span class="keyword">OR</span> NEW.math <span class="operator">&gt;</span> <span class="number">100</span>) <span class="keyword">THEN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>         SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;45000&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>         <span class="keyword">SET</span> MESSAGE_TEXT <span class="operator">=</span> <span class="string">&#x27;Math score must be between 0 and 100&#x27;</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     <span class="keyword">END</span> IF;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span>; </span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> delimiter ;</span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> (id, name, math) <span class="keyword">values</span> (<span class="number">9</span>, <span class="string">&#x27;nozomi&#x27;</span>, <span class="number">80</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> (id, name, math) <span class="keyword">values</span> (<span class="number">10</span>, <span class="string">&#x27;xiangling&#x27;</span>, <span class="number">150</span>);</span><br><span class="line">ERROR <span class="number">1644</span> (<span class="number">45000</span>): Math score must be <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">100</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0</span> <span class="operator">|</span> March7th   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Natasha    <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> silverwolf <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> xiaomei    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lumine     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> huohuo     <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> ai         <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> Kafka      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span> nozomi     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">80</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> math <span class="operator">=</span> <span class="number">70</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> math <span class="operator">=</span> <span class="number">101</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">ERROR <span class="number">1644</span> (<span class="number">45000</span>): Math score must be <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">100</span></span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0</span> <span class="operator">|</span> March7th   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Natasha    <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> silverwolf <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> xiaomei    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lumine     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> huohuo     <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> ai         <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> Kafka      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span> nozomi     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">70</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>FOR EACH ROW</code>：</p><blockquote><p>在MySQL触发器中，FOR EACH ROW 是用来指定触发器的执行频率的一部分。这个短语表示触发器将逐行执行，即对每一行受到影响的行执行一次触发器的逻辑。<br>请注意，FOR EACH ROW 在 MySQL 触发器中是一个必需的元素，因为 MySQL 触发器默认就是逐行执行的，因此在触发器定义中省略这个短语是允许的。</p></blockquote><h2 id="行业黑话"><a href="#行业黑话" class="headerlink" title="行业黑话"></a>行业黑话</h2><center><font color="red">- - - - - AIGC - - - - -</font></center><p><strong>问：</strong><br>什么是数据库的数据模型和概念模型</p><p><strong>答：</strong><br>数据库的数据模型是描述数据组织、存储和操作方式的抽象表示，常见的数据模型包括关系型、面向对象、层次型等。概念模型则是用户对数据库中信息的认知和理解，通常以实体-关系图等方式展现，有助于沟通数据库设计的概念和结构。</p><p><strong>问：</strong><br>数据库系统的三级模式结构是什么</p><p><strong>答：</strong><br>数据库系统的三级模式结构包括：</p><ol><li><strong>外部模式（视图层）</strong>： 这一层描述了用户或应用程序所看到的数据视图，即用户如何看待和访问数据。每个用户可能有自己的外部模式，以满足其特定需求。</li><li><strong>概念模式（逻辑层）</strong>： 这是整个数据库的逻辑结构，描述了数据之间的关系、约束和完整性规则。概念模式是整个数据库的逻辑模型，是数据库管理员和数据库设计者关注的层次。</li><li><strong>内部模式（物理层）</strong>： 内部模式描述了数据在存储介质上的实际存储方式和存储结构，涉及到物理存储的细节，如存储引擎、索引等。通常，数据库管理系统（DBMS）负责处理内部模式的实现和管理。</li></ol><p>这三个层次的模式结构有助于实现数据的抽象和独立性，使用户和应用程序能够更方便地使用数据库系统，而不必关心底层的物理实现。</p><p><strong>问：</strong><br>什么是数据库的两级映像功能</p><p><strong>答：</strong><br>数据库的两级映像功能通常指外部模式与概念模式之间的映像和概念模式与内部模式之间的映像，这体现了数据库系统的数据独立性。</p><ol><li><strong>外部模式与概念模式的映像</strong>： 外部模式是用户或应用程序看到的数据视图，而概念模式是整个数据库的逻辑结构。两者之间的映像确保了用户可以通过其定义的外部模式访问数据库，而不受数据库内部结构的影响。这提供了逻辑数据独立性，允许数据库管理员对数据库的概念模式进行调整，而不影响用户的应用程序。</li><li><strong>概念模式与内部模式的映像</strong>： 概念模式是逻辑层次上的数据库结构，而内部模式涉及数据在物理存储上的具体实现。映像功能确保了对数据库的逻辑设计变更不会对物理存储产生负面影响，从而提供了物理数据独立性。这使得数据库管理员能够优化内部存储结构，而不影响用户和应用程序的逻辑视图。</li></ol><p>这两级映像功能带来了数据独立性，使数据库系统更加灵活、可维护，并减少了对数据库结构变更的影响。</p><p><strong>问：</strong><br>什么是数据库的视图？</p><p><strong>答：</strong><br>数据库的视图是一种虚拟表，它是由一个或多个基本表的列组成的查询结果。视图是数据库中的一种逻辑结构，而不是实际存储数据的表。通过视图，用户可以定义一个虚拟表，该表包含特定条件下的数据，而不需要实际创建物理表。</p><p>主要作用包括：</p><ol><li>简化数据访问： 视图允许用户以更简单、更易理解的方式访问数据，通过隐藏表的复杂性，只暴露出用户感兴趣的部分数据。</li><li>控制数据访问： 视图可以限制用户对数据的访问，只暴露他们需要的信息，从而提高数据库的安全性和隐私性。</li><li>简化查询： 可以通过视图将复杂的查询逻辑封装起来，用户只需直接查询视图而不必关心底层的表结构和连接。</li><li>提高数据独立性： 视图可以作为概念模式与外部模式之间的桥梁，使数据库系统更具弹性，可以更轻松地调整表结构而不影响用户的数据访问。</li></ol><p>总的来说，数据库的视图提供了一种抽象层，使用户能够以更方便、安全的方式访问和操作数据。</p><p><strong>问：</strong><br><code>select * from customer cross join order_table;</code>我可以理解为这句创建了一个视图吗</p><p><strong>答：</strong><br>不完全正确。这SQL查询语句是一个交叉连接（cross join）操作，它返回两个表（customer 和 order_table）的所有可能的组合，而不考虑它们之间的任何匹配条件。这不是创建视图的语句，而是一个返回结果的查询。</p><p>如果你希望将这个查询的结果保存为一个虚拟表，你可以使用以下语句创建一个视图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> your_view_name <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customer <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> order_table;</span><br></pre></td></tr></table></figure><p>这样，你就创建了一个名为 your_view_name 的视图，该视图包含了 customer 表和 order_table 表的交叉连接的结果。随后，你可以通过查询这个视图来获取这个结果，就好像查询一个普通的表一样。</p><p>请注意，视图本身并不存储数据，只是一个定义好的查询，每次查询视图时都会动态地生成相应的结果。</p><p><strong>问：</strong><br>上面是mysql的语法吗？如果重启mysql这个视图会消失吗</p><p><strong>答：</strong><br>是的，上述语法是MySQL的语法。在MySQL中，你可以使用CREATE VIEW语句来创建视图。</p><p>关于视图的消失问题，视图是数据库中的元数据（metadata），而不是实际存储数据的地方。因此，当你重启MySQL服务时，已创建的视图不会消失，因为它们的定义存储在数据库中。只有在你显式删除视图或删除整个数据库的情况下，相关的视图才会被移除。</p><p>所以，一般情况下，重启MySQL服务不会导致已创建的视图消失。</p><center><font color="red">- - - - - AIGC END - - - - -</font></center><p>以上 AIGC 已经过实操验证。</p><h2 id="查询处理、查询优化"><a href="#查询处理、查询优化" class="headerlink" title="查询处理、查询优化"></a>查询处理、查询优化</h2><p>查询处理可分为4个阶段：查询分析、查询检查、查询优化、查询执行。</p><p><img src="https://s2.loli.net/2024/03/03/gUzxOPHNK3X4qiR.jpg" alt="67-2.jpg"></p><p>查询检查：<br>对合法的查询语句进行语义检查，即根据数据字典中有关的模式定义检查语句中的数据库对象，如关系名、属性名是否存在和有效。如果是对视图的操作，则要用视图消解方法把对视图的操作转换成对基本表的操作。还要根据数据字典中的用户权限和完整性约束定义对用户的存取权限进行检查。如果该用户没有相应的访问权限或违反了完整性约束，就拒绝执行该查询。当然，<strong>这时的完整性检查是初步的、静态的检查。</strong>检查通过后便把SQL查询语句转换成内部表示，即等价的<strong>关系代数表达式</strong>。这个过程中要把数据库对象的外部名称转换为内部表示。关系数据库管理系统一般都用<strong>查询树（query tree）</strong>，也称为<strong>语法分析树（syntax tree）</strong>来表示扩展的关系代数表达式。</p><p>查询优化：按照优化的层次一般可将查询优化分为<strong>代数优化</strong>和<strong>物理优化</strong>。</p><p>查询优化的优点在于：用户不必考虑如何写出最好的查询，因为系统可以做得更好。这是因为:</p><ul><li><strong>优化器可以从数据字典中获取许多统计信息</strong>，例如每个关系表中的元组数、关系中每个属性值的分布情况、哪些属性上已经建立了索引等。优化器可以根据这些信息做出正确的估算，选择高效的执行计划，而用户程序则难以获得这些信息。</li><li><strong>若数据库的物理统计信息改变，系统可以自动对查询重新优化，以选择相适应的执行计划</strong>。在非关系系统中则必须重写程序，而重写程序在实际应用中往往是不太可能的。</li><li><strong>优化器可以考虑数百种不同的执行计划</strong>。</li><li><strong>优化器中包括了很多复杂的优化技术</strong>。</li></ul><p>目前关系型数据库管理系统通过某种代价模型计算各种查询执行策略的代价，然后选取代价最小的执行方案。</p><p>集中式数据库中，查询执行开销主要包括：I/O代价、CPU代价、内存开销。在分布式数据库中还有通信代价，即：</p><p>总代价 = I/O代价 + CPU代价 + 内存代价 + 通信代价</p><p>磁盘I/O涉及机械动作，时间比内存操作高几个数量级，因此，计算查询代价时一般用该操作读写的块数作为衡量单位。</p><h2 id="代数优化"><a href="#代数优化" class="headerlink" title="代数优化"></a>代数优化</h2><p>关系代数表达式的等价变换规则：</p><p><img src="https://s2.loli.net/2024/03/03/8RhrvbzSpQuEeL7.jpg" alt="67-3.jpg"></p><p><img src="https://bu.dusays.com/2024/03/03/65e46bd7b9b77.jpg" alt="67-4.jpg"></p><p>对查询树进行代数优化：</p><div class="row"><iframe src="https://drive.google.com/file/d/150B0pTWhkJntlpLD5YdM-idpTlMzT5HS/preview" style="width:100%; height:550px"></iframe></div><h2 id="模式分解、Armstrong公理系统"><a href="#模式分解、Armstrong公理系统" class="headerlink" title="模式分解、Armstrong公理系统"></a>模式分解、Armstrong公理系统</h2><p>这部分内容和实践有些脱节。而且就应试的目的来说，模式分解很多时候凭着直觉就行了。很后悔花了大力气去学一个包装精致、难以理解的形式系统。</p><div class="row"><iframe src="https://drive.google.com/file/d/1_n7I3HeXoajgyAq29FiX2XNFiI_Ki7dq/preview" style="width:100%; height:550px"></iframe></div><h2 id="数据库安全性"><a href="#数据库安全性" class="headerlink" title="数据库安全性"></a>数据库安全性</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>数据库的安全性：保护数据库，防止非法使用造成的数据泄露、更改、破坏。</p><p>数据库的不安全因素：</p><ul><li><strong>非授权用户对数据库的恶意存取和破坏。</strong>数据库管理系统提供的安全措施主要包括<strong>用户身份鉴别</strong>、<strong>存取控制</strong>和<strong>视图</strong>等技术。</li><li><strong>数据库中重要或敏感的数据被泄露。</strong>数据库管理系统提供的主要技术有<strong>强制存取控制</strong>、<strong>数据加密存储</strong>和<strong>加密传输</strong>等。此外，在安全性要求较高的部门提供审计功能，通过分析审计日志，可以对潜在的威胁提前采取措施加以防范，对非授权用户的入侵行为及信息破坏情况能够进行跟踪，防止对数据库安全责任的否认。</li><li><strong>安全环境的脆弱性。</strong>数据库的安全性与计算机系统的安全性，包括计算机硬件、操作系统、网络系统等的安全性是紧密联系的。</li></ul><p>计算机安全技术方面逐步发展了一套可信（trusted）计算机系统的概念和标准。</p><p>计算机以及信息安全技术方面有一系列的安全标准，最有影响的当推 TCSEC 和 CC 这两个标准。</p><p>CC 基本取代了 TCSEC ，成为评估信息产品安全性的主要标准。</p><p>TCSEC/TDI 安全级别划分：</p><table>  <tbody>    <tr>      <td>安全级别</td>      <td>定义</td>    </tr>    <tr>      <td>A1</td>      <td>验证设计(verified design)</td>    </tr>    <tr>      <td>B3</td>      <td>安全域(security domains)</td>    </tr>    <tr>      <td>B2</td>      <td>结构化保护(structural protection)</td>    </tr>    <tr>      <td>B1</td>      <td>标记安全保护(labeled security protection)</td>    </tr>    <tr>      <td>C2</td>      <td>受控的存取保护(controlled access protection)</td>    </tr>    <tr>      <td>C1</td>      <td>自主安全保护(discretionary security protection)</td>    </tr>    <tr>      <td>D</td>      <td>最小保护(minimal protection)</td>    </tr>  </tbody>  <colgroup>    <col>    <col>  </colgroup></table><p>与数据库有关的安全性，主要包括<strong>用户身份鉴别</strong>、<strong>多层存取控制</strong>、<strong>审计</strong>、<strong>视图</strong>和<strong>数据加密</strong>等安全技术。</p><p><img src="https://bu.dusays.com/2024/03/05/65e70d81534d5.jpg" alt="67-5.jpg"></p><p>上图是数据库安全保护的存取控制流程。<br>首先，数据库管理系统对提出 SQL 访问请求的数据库用户进行身份鉴别，防止不可信用户使用系统；然后，在 SQL 处理层进行自主存取控制和强制存取控制，进一步还可以进行推理控制。为监控恶意访问，可根据具体安全需求配置审计规则，对用户访问行为和系统关键操作进行审计。通过设置简单入侵检测规则，对异常用户行为进行检测和处理。在数据存储层，数据库管理系统不仅存放用户数据，还存储与安全有关的标记和信息(称为安全数据)，提供存储加密功能等。</p><h3 id="用户身份鉴别"><a href="#用户身份鉴别" class="headerlink" title="用户身份鉴别"></a>用户身份鉴别</h3><p>方法：<strong>静态口令鉴别</strong><br>当前常用的鉴别方法。静态口令一般由用户自己设定，这些口令是静态不变的。这种方式虽然<strong>简单</strong>，但<strong>容易被攻击，安全性较低</strong>。数据库管理系统会从口令的复杂度，口令的管理、存储及传输等多方面来保障口令的安全可靠。</p><p>方法：<strong>动态口令鉴别</strong><br>目前较为安全的鉴别方式。这种方式的口令是动态变化的，每次鉴别时均需使用动态产生的新口令登录数据库管理系统，即采用一次一密的方法。常用的方式如<strong>短信密码</strong>和<strong>动态令牌</strong>方式，每次鉴别时要求用户使用通过短信或令牌等途径获取的新口令登录数据库管理系统。与静态口令鉴别相比，这种认证方式增加了口令被窃取或破解的难度，安全性相对高一些。</p><p>方法：<strong>生物特征鉴别</strong><br>它是一种通过生物特征进行认证的技术，其中，生物特征是指生物体唯一具有的，可测量、识别和验证的稳定生物特征，如指纹、虹膜和掌纹等。这种方式通过采用图像处理和模式识别等技术实现了基于生物特征的认证，与传统的口令鉴别相比，无疑产生了质的飞跃，安全性较高。</p><p>方法：<strong>智能卡鉴别</strong><br>智能卡是一种不可复制的硬件，内置集成电路的芯片，具有硬件加密功能。智能卡由用户随身携带，登录数据库管理系统时用户将智能卡插入专用的读卡器进行身份验证。由于每次从智能卡中读取的数据是静态的，通过内存扫描或网络监听等技术还是可能截取到用户的身份验证信息，存在安全隐患。因此，实际应用中一般采用个人身份识别码（PIN）和智能卡相结合的方式。这样，即使PIN或智能卡中有一种被窃取，用户身份仍不会被冒充。</p><h3 id="存取控制"><a href="#存取控制" class="headerlink" title="存取控制"></a>存取控制</h3><p>存取控制机制主要包括<strong>定义用户权限</strong>和<strong>合法权限检查</strong>两部分。</p><ol><li>定义用户权限，并将用户权限登记到数据字典中<ul><li>数据库管理系统必须提供适当的语言来定义用户权限，这些定义经过编译后存储在数据字典中，被称做安全规则或授权规则。</li></ul></li><li>合法权限检查<ul><li>每当用户发出存取数据库的操作请求后（请求一般应包括操作类型、操作对象和操作用户等信息），数据库管理系统查找数据字典，根据安全规则进行合法权限检查，若用户的操作请求超出了定义的权限，系统将拒绝执行此操作。</li><li><strong>定义用户权限</strong>和<strong>合法权限检查机制</strong>一起组成了数据库管理系统的<strong>存取控制子系统</strong>。</li></ul></li></ol><p>C2 级的数据库管理系统支持自主存取控制（Discretionary Access Control, DAC），B1 级的数据库管理系统支持强制存取控制（Mandatory Access Control, MAC）。</p><p>在<strong>自主存取控制</strong>方法中，用户对于不同的数据库对象有不同的存取权限，不同的用户对同一对象也有不同的权限，而且用户还可将其拥有的存取权限转授给其他用户。因此自主存取控制非常灵活。</p><p>在<strong>强制存取控制</strong>方法中，每一个数据库对象被标以一定的密级，每一个用户也被授予某一个级别的许可证。对于任意一个对象，只有具有合法许可证的用户才可以存取。强制存取控制因此相对比较严格。</p><h3 id="自主存取控制"><a href="#自主存取控制" class="headerlink" title="自主存取控制"></a>自主存取控制</h3><p>大型数据库管理系统都支持自主存取控制，SQL标准也对自主存取控制提供支持，这主要通过SQL的 GRANT 语句和 REVOKE 语句来实现。</p><p>用户权限由两个要素组成：<strong>数据库对象</strong>和<strong>操作类型</strong>。在数据库系统中，定义存取权限称为授权（authorization）。</p><p>在非关系系统中，用户只能对数据进行操作，存取控制的数据库对象也仅限于数据本身。</p><p>在关系数据库系统中，存取控制的对象不仅有数据本身（基本表中的数据、属性列上的数据），还有数据库模式（包括数据库、基本表、视图和索引的创建等）。</p><h3 id="数据库角色"><a href="#数据库角色" class="headerlink" title="数据库角色"></a>数据库角色</h3><p>数据库角色是被命名的一组与数据库操作相关的权限，<strong>角色是权限的集合</strong>。因此，可以为一组具有相同权限的用户创建一个角色，使用角色来管理数据库权限可以简化授权的过程。</p><p>在SQL中首先用CREATE ROLE语句创建角色，然后用 GRANT 语句给角色授权，用 REVOKE 语句收回授予角色的权限。</p><h3 id="强制存取控制"><a href="#强制存取控制" class="headerlink" title="强制存取控制"></a>强制存取控制</h3><p>强制存取控制适用于那些对数据有严格而固定密级分类的部门，例如军事部门或政府部门。强制存取控制不为用户直接感知、控制。</p><p>在强制存取控制中，数据库管理系统所管理的全部实体被分为<strong>主体</strong>和<strong>客体</strong>。</p><p>主体是系统中的活动实体，既包括数据库管理系统所管理的实际用户，也包括代表用户的各进程。客体是系统中的被动实体，是受主体操纵的，包括文件、基本表、索引、视图等。对于主体和客体，数据库管理系统为它们每个实例（值）指派一个敏感度标记（label）。</p><p>敏感度标记被分成若干级别，例如绝密（Top Secret，TS）、机密（Secret，S）、可信（Confidential，C）、公开（Public，P）等。密级的次序是 TS&gt;=S&gt;=C&gt;=P 。主体的敏感度标记称为许可证级别（clearance level），客体的敏感度标记称为密级（classification level）。强制存取控制机制就是通过对比主体的敏感度标记和客体的敏感度标记，最终确定主体是否能够存取客体。</p><p>当某一用户（或某一主体）以标记label注册入系统时，系统要求他对任何客体的存取必须遵循如下规则：</p><ol><li>仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体。</li><li>仅当主体的许可证级别小于或等于客体的密级时，该主体才能写相应的客体。</li></ol><p>规则(1)的意义是明显的，而规则(2)需要解释一下。按照规则(2)，用户可以为写入的数据对象赋予高于自己的许可证级别的密级。这样一旦数据被写入，该用户自己也不能再读该数据对象了。<strong>如果违反了规则(2)，就有可能把数据的密级从高流向低，造成数据的泄漏。</strong>例如，某个TS密级的主体把一个密级为TS的数据恶意地降低为P，然后把它写回。这样原来是TS密级的数据大家都可以读到了，造成了TS密级数据的泄漏。</p><p><img src="https://s2.loli.net/2024/03/05/os9mgOTFERUrKWS.jpg" alt="67-6.jpg"></p><h2 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h2><p>封锁协议（locking protocol）：约定的一些规则，如何时申请 X 锁或 S 锁、持锁时间、何时释放等。</p><p><strong>一级封锁协议</strong>：事务T在修改数据R之前必须先对其加X锁，直到事务结束才释放。事务结束包括正常结束（COMMIT）和非正常结束（ROLLBACK）。解决了<strong>丢失修改（脏写）</strong>的问题。</p><p><strong>二级封锁协议</strong>：在一级封锁协议基础上增加事务T在读取数据R之前必须先对其加S锁，读完后即可释放S锁。解决了<strong>脏读</strong>问题。</p><p><strong>三级封锁协议</strong>：在一级封锁协议的基础上增加事务T在读取数据R之前必须先对其加S锁，直到事务结束才释放。解决了<strong>不可重复读</strong>、<strong>幻读</strong>的问题。</p><p><strong>活锁</strong>：<br>如果事务 T1 封锁了数据 R，事务 T2 又请求封锁 R，于是 T2 等待；T3 也请求封锁 R，当 T1 释放了 R 上的封锁之后系统首先批准了 T3 的请求，T2 仍然等待；然后 T4 又请求封锁 R，当 T3 释放了 R 上的封锁之后系统又批准了 T4 的请求…… T2 有可能永远等待，这就是活锁的情形，如图11.5(a)所示。</p><p><img src="https://bu.dusays.com/2024/03/06/65e86b56c4307.jpg" alt="67-7.jpg"></p><p><strong>避免活锁的简单方法是采用先来先服务的策略</strong>。</p><p><strong>死锁</strong>：<br>如果事务 T1 封锁了数据 R1，T2 封锁了数据 R2，然后 T1 又请求封锁 R2，因 T2 已封锁了 R2，于是 T1 等待 T2 释放 R2 上的锁；接着 T2 又申请封锁 R1，因 T1 已封锁了 R1，T2 也只能等待 T1 释放 R1 上的锁。这样就出现了 T1 在等待 T2，而 T2 又在等待 T1 的局面，T1 和 T2 两个事务永远不能结束，形成死锁。如图11.5(b)所示。</p><p>OS 中广为采用的预防死锁策略不适合数据库，因此数据库在死锁问题上普遍采用<strong>诊断并解除死锁</strong>的方法。</p><p>诊断死锁的方法，有<strong>超时法</strong>、<strong>事务等待图法</strong>。</p><p>超时法：<br>如果一个事务的等待时间超过了规定的时限，就认为发生了死锁。超时法实现简单，但其不足也很明显，一是有可能误判死锁，如事务因为其他原因而使等待时间超过时限，系统会误认为发生了死锁；二是时限若设置得太长，死锁发生后不能及时发现。</p><p><img src="https://s2.loli.net/2024/03/06/MiDNfhdRPV7cAy8.jpg" alt="67-8.jpg"></p><p>事务等待图动态地反映了所有事务的等待情况。并发控制子系统周期性地（比如每隔数秒）生成事务等待图，并进行检测。如果发现图中存在回路，则表示系统中出现了死锁。</p><p>多个事务的并发执行是<strong>正确</strong>的，当且仅当其结果与按某一次序串行地执行这些事务时的结果相同，称这种调度策略为<strong>可串行化(serializable)调度</strong>。</p><p>【例】现在有两个事务,分别包含下列操作:<br>事务T1: 读B; A=B+1; 写回A;<br>事务T2: 读A; B=A+1; 写回B。</p><p><img src="https://bu.dusays.com/2024/03/06/65e876fc50f6f.png" alt="67-9.png"></p><p><strong>两段锁协议</strong>指所有事务必须分两个阶段对数据项加锁和解锁：</p><ul><li>在对任何数据进行读、写操作之前，首先要申请并获得对该数据的封锁</li><li>在释放一个封锁之后，事务不再申请和获得任何其他封锁</li></ul><p>“两段”锁的含义是，事务分为两个阶段，<strong>第一阶段是获得封锁，也称为扩展阶段</strong>，在这个阶段，事务可以申请获得任何数据项上的任何类型的锁，但是不能释放任何锁；<strong>第二阶段是释放封锁，也称为收缩阶段</strong>，在这个阶段，事务可以释放任何数据项上的任何类型的锁，但是不能再申请任何锁。</p><p>可以证明，<strong>若并发执行的所有事务均遵守两段锁协议，则对这些事务的任何并发调度策略都是可串行化的。</strong></p><p>事务遵守两段锁协议是<strong>可串行化调度的充分条件</strong>，而不是必要条件。</p><p>两段锁协议并不要求事务必须一次将所有要使用的数据全部加锁，因此遵守两段锁协议的事务可能发生死锁。</p><p>在一个系统中同时支持多种封锁粒度供不同的事务选择是比较理想的，这种封锁方法称为<strong>多粒度封锁(multiple granularity locking)</strong>。选择封锁粒度时应该同时考虑封锁开销和并发度两个因素，适当选择封锁粒度以求得最优的效果。<strong>一般说来</strong>，需要处理某个关系的大量元组的事务可以以关系为封锁粒度；需要处理多个关系的大量元组的事务可以以数据库为封锁粒度；而对于一个处理少量元组的用户事务，以元组为封锁粒度就比较合适了。</p><p>下面讨论<strong>多粒度封锁</strong>，首先定义<strong>多粒度树</strong>。多粒度树的根结点是整个数据库，表示最大的数据粒度。叶结点表示最小的数据粒度。</p><p>一个三级粒度树，根结点为数据库，数据库的子结点为关系，关系的子结点为元组。也可以定义4级粒度树，例如数据库、数据分区、数据文件、数据记录。</p><p><strong>多粒度封锁协议</strong>允许多粒度树中的每个结点被独立地加锁。对一个结点加锁意味着这个结点的所有后裔结点也被加以同样类型的锁。因此，在多粒度封锁中一个数据对象可能以两种方式封锁，显式封锁和隐式封锁。</p><p><strong>显式封锁</strong>是应事务的要求直接加到数据对象上的锁；<strong>隐式封锁</strong>是该数据对象没有被独立加锁，是由于其上级结点加锁而使该数据对象加上了锁。</p><p>多粒度封锁方法中，显式封锁和隐式封锁的效果是一样的，因此系统检查封锁冲突时不仅要检查显式封锁还要检查隐式封锁。例如事务T要对关系R1加X锁，系统必须搜索其上级结点数据库、关系R1以及R1的下级结点，即R1中的每一个元组，上下搜索。如果其中某一个数据对象已经加了不相容锁，则T必须等待。</p><p>一般地，对某个数据对象加锁，系统要检查该数据对象上有无显式封锁与之冲突；再检查其所有上级结点，看本事务的显式封锁是否与该数据对象上的隐式封锁（即由于上级结点已加的封锁造成的）冲突；还要检查其所有下级结点，看它们的显式封锁是否与本事务的隐式封锁（将加到下级结点的封锁）冲突。显然，这样的检查方法效率很低。为此人们引进了一种新型锁，称为<strong>意向锁（intention lock）</strong>。</p><p>意向锁的含义是如果对一个结点加意向锁，则说明该结点的下层结点正在被加锁；对任一结点加锁时，必须先对它的上层结点加意向锁。</p><p><strong>意向共享锁（Intent Share Lock，IS锁）</strong>：<br>如果对一个数据对象加IS锁，表示它的后裔结点拟(意向)加S锁。<br>例如，事务T1要对R1中某个元组加S锁，则要首先对关系R1和数据库加IS锁。</p><p><strong>意向排他锁（IntentExclusive Lock， IX 锁）</strong>：<br>如果对一个数据对象加IX锁，表示它的后裔结点拟(意向)加X锁。例如，事务T1要对R1 中某个元组加X锁，则要首先对关系R1 和数据库加IX锁。</p><p><strong>共享意向排他锁（Share Intent Exclusive Lock，SIX锁）</strong>：<br>如果对一个数据对象加SIX锁，表示对它加S锁，再加IX锁，即SIX=S+IX。例如对某个表加SIX锁，则表示该事务要读整个表（所以要对该表加S锁），同时会更新个别元组（所以要对该表加IX锁）。</p><p><strong>锁的强度</strong>是指它对其他锁的排斥程度。一个事务在申请封锁时以强锁代替弱锁是安全的，反之则不然。</p><p>在具有意向锁的多粒度封锁方法中，任意事务T要对一个数据对象加锁，必须先对它的上层结点加意向锁。申请封锁时应该按自上而下的次序进行，释放封锁时则应该按自下而上的次序进行。</p><p><img src="https://s2.loli.net/2024/03/07/4ynuJ7wVeG2pFsX.jpg" alt="67-10.jpg"></p><p>例如，事务T1要对关系R1加S锁，则要首先对数据库加IS锁。检查数据库和R1是否已加了不相容的锁（X或IX）。不再需要搜索和检查R1中的元组是否加了不相容的锁（X锁）。</p><h2 id="故障与恢复"><a href="#故障与恢复" class="headerlink" title="故障与恢复"></a>故障与恢复</h2><p>故障的种类：</p><ol><li><strong>事务内部的故障</strong><ul><li>有的可以通过事务程序本身发现的。</li><li><strong>事务内部更多的故障是非预期的</strong>，不能由应用程序处理。如运算溢出、并发事务发生死锁而被选中撤销该事务、违反某些完整性限制而被终止等。后续内容中，事务障故仅指这类非预期的故障。</li><li>事务故障意味着事务没有达到预期终点（COMMIT或显式的ROLLBACK），因此，数据库可能处于不正确状态。恢复程序要在不影响其他事务运行的情况下，强行回滚该事务，即撤销该事务已作出的修改，使得该事务好像根本没有启动一样。这类恢复操作称为<strong>事务撤销（UNDO）</strong>。</li></ul></li><li><strong>系统故障</strong><ul><li>系统故障是指造成系统停止运转的任何事件，使得系统要重新启动。例如，特定类型的硬件错误（CPU故障）、操作系统故障、DBMS代码错误、系统断电等。这类故障影响正在运行的所有事务，但不破坏数据库。此时主存内容，尤其是数据库缓冲区（在内存）中的内容都被丢失，所有运行事务都非正常终止。发生系统故障时，一些尚未完成的事务的结果可能已送入物理数据库，从而造成数据库可能处于不正确的状态。为保证数据一致性，需要清除这些事务对数据库的所有修改。</li><li>恢复子系统必须在系统重新启动时让所有非正常终止的事务回滚，强行撤销所有未完成事务。</li><li>另一方面，发生系统故障时，有些已完成的事务可能有一部分甚至全部留在缓冲区，尚未写回到磁盘上的物理数据库中，系统故障使得这些事务对数据库的修改部分或全部丢失，这也会使数据库处于不一致状态，因此应将这些事务已提交的结果重新写入数据库。所以系统重新启动后，恢复子系统除需要撤销所有未完成的事务外，还需要<strong>重做（REDO）</strong>所有已提交的事务，以将数据库真正恢复到一致状态。</li></ul></li><li><strong>介质故障</strong><ul><li>系统故障常称为<strong>软故障（soft crash）</strong>，介质故障称为<strong>硬故障（hard crash）</strong>。硬故障指外存故障，如磁盘损坏、磁头碰撞，瞬时强磁场干扰等。</li></ul></li><li><strong>计算机病毒</strong></li></ol><p>恢复的基本原理：冗余。</p><p>建立冗余数据最常用的技术是<strong>数据转储</strong>和<strong>登记日志文件(logging)</strong>。</p><p>转储十分耗费时间和资源，不能频繁进行。</p><p>转储可分为静态转储和动态转储。</p><p><strong>静态转储</strong>是在系统中无运行事务时进行的转储操作。静态转储简单，但转储必须等待正运行的用户事务结束才能进行。同样，新的事务必须等待转储结束才能执行。</p><p><strong>动态转储</strong>在转储期间允许对数据库存取或修改。必须把转储期间各事务对数据库的修改活动登记下来，建立<strong>日志文件(log file)</strong>。这样，后援副本加上日志文件就能把数据库恢复到某一时刻的正确状态。</p><p>转储还可分为<strong>海量转储</strong>和<strong>增量转储</strong>两种方式。</p><p>综上，数据转储方法可以分为 4 类：<strong>动态海量转储</strong>、<strong>动态增量转储</strong>、<strong>静态海量转储</strong>和<strong>静态增量转储</strong>。</p><p>日志文件主要有两种格式：<strong>以记录为单位的日志文件</strong>和<strong>以数据块为单位的日志文件</strong>。</p><p>对于以记录为单位的日志文件，日志文件中需要登记的内容包括：</p><ul><li>各个事务的开始(BEGIN TRANSACTION)标记</li><li>各个事务的结束(COMMIT或ROLLBACK)标记</li><li>各个事务的所有更新操作。</li></ul><p>这里每个事务的开始标记、每个事务的结束标记和每个更新操作均作为日志文件中的一个<strong>日志记录(log record)</strong>。</p><p>每个日志记录的内容主要包括：</p><ul><li>事务标识(标明是哪个事务)</li><li>操作的类型(插入、删除或修改)</li><li>操作对象(记录内部标识)</li><li>更新前数据的旧值(对插入操作而言,此项为空值)</li><li>更新后数据的新值(对删除操作而言,此项为空值)</li></ul><p>对于以数据块为单位的日志文件，日志记录的内容包括事务标识和被更新的数据块。由于将更新前的整个块和更新后的整个块都放入日志文件中，操作类型和操作对象等信息就不必放入日志记录中了。</p><p>事务故障恢复和系统故障恢复必须用日志文件。</p><p>在动态转储方式中必须建立日志文件，后备副本和日志文件结合起来才能有效地恢复数据库。</p><p>在静态转储方式中也可以建立日志文件，当数据库毁坏后可重新装入后援副本把数据库恢复到转储结束时刻的正确状态，然后利用日志文件把已完成的事务进行重做处理，对故障发生时尚未完成的事务进行撤销处理。</p><p>为保证数据库是可恢复的，登记日志文件时必须遵循两条原则：</p><ul><li>登记的次序严格按并发事务执行的时间次序。</li><li>必须先写日志文件，后写数据库。</li></ul><center><font color="red">- - - - - 事务故障的恢复 - - - - -</font></center><p>事务故障是指事务在运行至正常终止点前被终止，这时恢复子系统应利用日志文件撤销(UNDO)此事务已对数据库进行的修改。事务故障的恢复是由系统自动完成的，对用户是透明的。系统的恢复步骤是:</p><ol><li>反向扫描日志文件(即从最后向前扫描日志文件)，查找该事务的更新操作。</li><li>对该事务的更新操作执行逆操作，即将日志记录中“更新前的值”写入数据库。这样，如果记录中是插入操作，则相当于做删除操作(因此时“更新前的值”为空)；若记录中是删除操作，则做插入操作；若是修改操作，则相当于用修改前值代替修改后值。</li><li>继续反向扫描日志文件，查找该事务的其他更新操作，并做同样处理。</li><li>如此处理下去，直至读到此事务的开始标记，事务故障恢复就完成了。</li></ol><center><font color="red">- - - - - 事务故障的恢复 END - - - - -</font></center><p><br></p><center><font color="red">- - - - - 系统故障的恢复 - - - - -</font></center><p>系统故障造成数据库不一致状态的原因有两个，一是未完成事务对数据库的更新可能已写入数据库，二是已提交事务对数据库的更新可能还留在缓冲区没来得及写入数据库。因此恢复操作就是要撤销故障发生时未完成的事务，重做已完成的事务。</p><p>系统故障的恢复是由系统在重新启动时自动完成的，不需要用户干预。</p><p>系统的恢复步骤是:</p><ol><li>正向扫描日志文件(即从头扫描日志文件)，找出在故障发生前已经提交的事务(这些事务既有BEGIN TRANSACTION记录，也有COMMIT记录)，将其事务标识记入重做队列(REDO-LIST)。同时找出故障发生时尚未完成的事务(这些事务只有 BEGIN TRANSACTION 记录，无相应的 COMMIT 记录)，将其事务标识记入撤销队列(UNDO-LIST).</li><li>对撤销队列中的各个事务进行撤销(UNDO)处理。进行撤销处理的方法是，反向扫描日志文件，对每个撤销事务的更新操作执行逆操作，即将日志记录中“更新前的值”写入数据库。</li><li>对重做队列中的各个事务进行重做处理。进行重做处理的方法是:正向扫描日志文件，对每个重做事务重新执行日志文件登记的操作，即将日志记录中“更新后的值”写入数据库。</li></ol><center><font color="red">- - - - - 系统故障的恢复 END - - - - -</font></center><p><br></p><center><font color="red">- - - - - 介质故障的恢复 - - - - -</font></center><p>发生介质故障后，磁盘上的物理数据和日志文件被破坏，这是最严重的一种故障，恢复方法是重装数据库，然后重做已完成的事务。</p><ol><li>装入最新的数据库后备副本(离故障发生时刻最近的转储副本)，使数据库恢复到最近一次转储时的一致性状态。对于动态转储的数据库副本，还需同时装入转储开始时刻的日志文件副本，利用恢复系统故障的方法(即REDO+UNDO)，才能将数据库恢复到一致性状态。</li><li>装入相应的日志文件副本(转储结束时刻的日志文件副本)，重做已完成的事务。即首先扫描日志文件，找出故障发生时已提交的事务的标识，将其记入重做队列；然后正向扫描日志文件，对重做队列中的所有事务进行重做处理。即将日志记录中“更新后的值”写入数据库。</li></ol><p>介质故障的恢复需要数据库管理员介入，但数据库管理员只需要重装最近转储的数据库副本和有关的各日志文件副本，然后执行系统提供的恢复命令即可，具体的恢复操作仍由数据库管理系统完成。</p><center><font color="red">- - - - - 介质故障的恢复 END - - - - -</font></center><p>利用日志技术进行数据库恢复时，恢复子系统必须搜索日志，确定哪些事务需要重做，哪些事务需要撤销。一般来说，需要检查所有日志记录。这样做有两个问题，一是搜索整个日志将耗费大量的时间，二是很多需要重做处理的事务实际上已经将它们的更新操作结果写到了数据库中，然而恢复子系统又重新执行了这些操作，浪费了大量时间。为了解决这些问题，又发展了具有检查点的恢复技术。这种技术在日志文件中增加一类新的记录——<strong>检查点(checkpoint)</strong>记录，增加一个重新开始文件，并让恢复子系统在登录日志文件期间动态地维护日志。</p><p>检查点记录的内容包括:</p><ul><li>建立检查点时刻所有正在执行的事务清单。</li><li>这些事务最近一个日志记录的地址。</li></ul><p>重新开始文件用来记录各个检查点记录在日志文件中的地址。图10.3说明了建立检查点Ci时对应的日志文件和重新开始文件。</p><p><img src="https://bu.dusays.com/2024/03/09/65eb4e38c648c.png" alt="67-11.png"></p><p>在上图中，检查点处的数据库是合法状态。若不然，则可以通过“这些事务最近一个日志记录的地址”达到合法状态。</p><p>动态维护日志文件的方法是，周期性地执行建立检查点、保存数据库状态的操作。具体步骤是：</p><ol><li>将当前日志缓冲区中的所有日志记录写入磁盘的日志文件上。</li><li>在日志文件中写入一个检查点记录。</li><li>将当前数据缓冲区的所有数据记录写入磁盘的数据库中。</li><li>把检查点记录在日志文件中的地址写入一个重新开始文件。恢复子系统可以定期或不定期地建立检查点，保存数据库状态。检查点可以按照预定的一个时间间隔建立，如每隔一小时建立一个检查点;也可以按照某种规则建立检查点，如日志文件已写满一半建立一个检查点。</li></ol><p><strong>使用检查点方法可以改善恢复效率</strong>。当事务T在一个检查点之前提交，T对数据库所做的修改一定都已写入数据库，写入时间是在这个检查点建立之前或在这个检查点建立之时。这样，在进行恢复处理时，没有必要对事务T执行重做操作。</p><p>系统出现故障时，恢复子系统将根据事务的不同状态采取不同的恢复策略：</p><p><img src="https://s2.loli.net/2024/03/09/onHGLfsqVixYRjv.jpg" alt="67-12.jpg"></p><p>T3和T5在故障发生时还未完成，所以予以撤销；T2和T4在检查点之后才提交，它们对数据库所做的修改在故障发生时可能还在缓冲区中，尚未写入数据库，所以要重做；T1在检查点之前已提交，所以不必执行重做操作。</p><p><strong>系统使用检查点方法进行恢复的步骤是：</strong></p><ol><li>从重新开始文件中找到最后一个检查点记录在日志文件中的地址，由该地址在日志文件中找到最后一个检查点记录。</li><li>由该检查点记录得到检查点建立时刻所有正在执行的事务清单ACTIVE-LIST。这里建立两个事务队列:<ul><li>UNDO-LIST: 需要执行UNDO操作的事务集合</li><li>REDO-LIST: 需要执行REDO操作的事务集合<br>把 ACTIVE-LIST 暂时放入 UNDO-LIST 队列，REDO 队列暂为空。</li></ul></li><li>从检查点开始正向扫描日志文件。<ul><li>如有新开始的事务Ti,把Ti暂时放入UNDO-LIST队列;</li><li>如有提交的事务Tj,把Tj从UNDO-LIST队列移到REDO-LIST队列；直到日志文件结束。</li></ul></li><li>对UNDO-LIST中的每个事务执行UNDO操作，对REDO-LIST中的每个事务执行REDO操作。</li></ol><p>数据库镜像：</p><p><img src="https://bu.dusays.com/2024/03/09/65eb5ee8071d9.jpg" alt="67-13.jpg"></p><h2 id="数据库的实施与维护"><a href="#数据库的实施与维护" class="headerlink" title="数据库的实施与维护"></a>数据库的实施与维护</h2><p>数据库应用程序的设计应该与数据库设计同时进行，因此在组织数据入库的同时还要调试应用程序。</p><p>在原有系统的数据有一小部分已输入数据库后，就可以开始对数据库系统进行联合调试了，这又称为数据库的<strong>试运行</strong>。</p><p>这一阶段要实际运行数据库应用程序，执行对数据库的各种操作，测试应用程序的功能是否满足设计要求。如果不满足，对应用程序部分则要修改、调整，直到达到设计要求为止。</p><p>在数据库试运行时，还要测试系统的性能指标，分析其是否达到设计目标。</p><p>这里特别要强调两点。第一，上面已经讲到组织数据入库是十分费时、费力的事，如果试运行后还要修改数据库的设计，还要重新组织数据入库。因此应分期分批地组织数据入库，<strong>先输入小批量数据做调试用，待试运行基本合格后再大批量输入数据，逐步增加数据量，逐步完成运行评价。</strong>第二，在数据库试运行阶段，由于系统还不稳定，硬、软件故障随时都可能发生；而系统的操作人员对新系统还不熟悉，误操作也不可避免，因此要<strong>做好数据库的转储和恢复工作</strong>。一旦故障发生，能使数据库尽快恢复，尽量减少对数据库的破坏。</p><p>在运行阶段，数据库的维护工作主要包括以下几方面：</p><ol><li><strong>数据库的转储和恢复</strong>：数据库管理员要针对不同的应用要求制定不同的转储计划。</li><li><strong>数据库的安全性、完整性控制</strong></li><li><strong>数据库性能的监督、分析和改造</strong></li><li><strong>数据库的重组织与重构造</strong><br>数据库运行一段时间后，由于记录不断增、删、改，将会使数据库的物理存储情况变坏，降低数据的存取效率，使数据库性能下降，这时数据库管理员就要对数据库进行重组织或部分重组织(只对频繁增、删的表进行重组织)。关系数据库管理系统一般都提供数据重组织用的实用程序。在重组织的过程中，按原设计要求重新安排存储位置、回收垃圾、减少指针链等，提高系统性能。<br><strong>数据库的重组织并不修改原设计的逻辑和物理结构，而数据库的重构造则不同，它是指部分修改数据库的模式和内模式。</strong><br>由于数据库应用环境发生变化，增加了新的应用或新的实体，取消了某些应用，有的实体与实体间的联系也发生了变化等，使原有的数据库设计不能满足新的需求，需要调整数据库的模式和内模式。例如，在表中增加或删除某些数据项，改变数据项的类型，增加或删除某个表，改变数据库的容量，增加或删除某些索引等。当然数据库的重构也是有限的，只能做部分修改。如果应用变化太大，重构也无济于事，说明此数据库应用系统的生命周期已经结束，应该设计新的数据库应用系统了。</li></ol><h2 id="了解内容"><a href="#了解内容" class="headerlink" title="了解内容"></a>了解内容</h2><h3 id="面向对象数据库模型"><a href="#面向对象数据库模型" class="headerlink" title="面向对象数据库模型"></a>面向对象数据库模型</h3><p>一系列面向对象核心概念构成了<strong>面向对象数据模型(Object Oriented Data Model，OO模型)</strong>的基础，主要包括以下一些概念:</p><ol><li>现实世界中的任何事物都被建模为对象。每个对象具有一个唯一的对象标识(OID)。</li><li>对象是其状态和行为的封装，其中状态是对象属性值的集合，行为是变更对象状态的方法集合。</li><li>具有相同属性和方法的对象的全体构成了类，类中的对象称为类的实例。</li><li>类的属性的定义域也可以是类，从而构成了类的复合。类具有继承性，一个类可以继承另一个类的属性与方法，被继承类和继承类也称为超类和子类。类与类之间的复合与继承关系形成了一个有向无环图，称为类层次。</li><li>对象是被封装起来的，它的状态和行为在对象外部不可见，从外部只能通过对象显式定义的消息传递对对象进行操作。</li></ol><h3 id="分布式数据库系统"><a href="#分布式数据库系统" class="headerlink" title="分布式数据库系统"></a>分布式数据库系统</h3><p>分布式数据库系统是在集中式数据库系统和计算机网络的基础上发展起来的，它是分布式数据处理的关键技术之一。分布式数据库由一组数据组成，这组数据分布在计算机网络的不同计算机上，网络中的每个结点具有独立处理的能力(称为<strong>场地自治</strong>)，可以执行局部应用。同时，每个结点也能通过网络通信系统执行全局应用。</p><p>这个定义强调了分布式数据库系统的<strong>场地自治性</strong>以及<strong>自治场地之间的协作性</strong>。这就是说，每个场地是独立的数据库系统，它有自己的数据库、自己的用户、自己的服务器，运行自己的DBMS，执行局部应用，具有高度的自治性。同时各个场地的数据库系统又相互协作组成一个整体。<strong>这种整体性的含义是，对于用户来说，一个分布式数据库系统逻辑上看如同一个集中式数据库系统一样，用户可以在任何一个场地执行全局应用。</strong></p><p>因此，分布式数据库系统不是简单地把集中式数据库连网就能实现的。分布式数据库系统具有自己的性质和特征。集中式数据库的许多概念和技术，如数据独立性、数据共享和数据冗余、并发控制、完整性、安全性和恢复等，在分布式数据库系统中都有了新的更加丰富的内容。</p><p>分布式数据库系统的<strong>本地自治性(local autonomy)</strong>是指局部场地的数据库系统可以自已决定本地数据库的设计、使用以及与其他节点的数据库系统的通信。分布式数据库系统的<strong>分布透明性(distributed transparency)</strong>是指分布式数据库管理系统将数据的分布封装起来，<strong>用户访问分布式数据库就像与集中式数据库打交道一样</strong>，不必知道也不必关心数据的存放和操作位置等细节。</p><p>分布式数据库系统在集中式数据库系统的组成基础上增加了三个部分: DDBMS、全局字典和分布目录、网络访问进程。全局字典和分布目录为DDBMS提供了数据定位的元信息，网络访问进程使用高级协议来执行局部站点和分布式数据库之间的通信。</p><h2 id="应试练习"><a href="#应试练习" class="headerlink" title="应试练习"></a>应试练习</h2><div class="row"><iframe src="https://drive.google.com/file/d/1wtxl_PD1cNFLSYNnSvMXSn2Q0noS9OW1/preview" style="width:100%; height:550px"></iframe></div><p>在上面的练习中，发现一类复杂的 SQL 查询可以转化成类似下面的便于理解的查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0</span> <span class="operator">|</span> March7th   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Natasha    <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> silverwolf <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> xiaomei    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lumine     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> huohuo     <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> ai         <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> Kafka      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span> nozomi     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">70</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(age), age, <span class="built_in">avg</span>(math) <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">group</span> <span class="keyword">by</span> age) <span class="keyword">as</span> c;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(age) <span class="operator">|</span> age  <span class="operator">|</span> <span class="built_in">avg</span>(math) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>        <span class="number">70</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>        <span class="number">71</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>        <span class="number">99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>      <span class="number">80.5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>        <span class="number">99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>        <span class="number">59</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>        <span class="number">99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+-----------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> tmpcntage <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(age) <span class="keyword">as</span> tmpcntage, age, <span class="built_in">avg</span>(math) <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">group</span> <span class="keyword">by</span> age) <span class="keyword">as</span> c;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> tmpcntage <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>数据库我卷卷卷：</p><div class="row"><iframe src="https://drive.google.com/file/d/1m7x-SzMYKug1a-NEMGOwN8-RTToCXf8w/preview" style="width:100%; height:550px"></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大意了，没有闪。&lt;/p&gt;
&lt;p&gt;之前学习的数据库偏实践，还不足以应付考试。&lt;/p&gt;
&lt;p&gt;另外应该是能进复试的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bu.dusays.com/2024/02/28/65df581912988.gif&quot; alt=&quot;67-1.g</summary>
      
    
    
    
    <category term="计算机" scheme="https://loveofpeach.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="MySQL" scheme="https://loveofpeach.github.io/tags/MySQL/"/>
    
    <category term="关系代数" scheme="https://loveofpeach.github.io/tags/%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0/"/>
    
    <category term="SQLServer" scheme="https://loveofpeach.github.io/tags/SQLServer/"/>
    
  </entry>
  
  <entry>
    <title>CppNote3</title>
    <link href="https://loveofpeach.github.io/posts/555ef888.html"/>
    <id>https://loveofpeach.github.io/posts/555ef888.html</id>
    <published>2024-02-19T16:13:11.000Z</published>
    <updated>2024-04-30T06:04:40.457Z</updated>
    
    <content type="html"><![CDATA[<p>前情提要： <a href="https://loveofpeach.github.io/posts/2249c81f.html">CppNote2</a></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>类对象与其他类型的转换：</p><ul><li>由其他类型向自定义类型转换，一般称为<strong>隐式转换</strong></li><li>由自定义类型向其他类型转换</li></ul><p>由自定义类型向其他类型转换是由<strong>类型转换函数</strong>完成的，这是一个特殊的成员函数。形式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">operator</span> 目标类型()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由自定义类型向其他类型转换的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Complex&amp; rhs);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> dreal = <span class="number">0</span>, <span class="type">double</span> dimag = <span class="number">0</span>)</span><br><span class="line">    :_dreal(dreal), _dimag(dimag) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex(double = 0, double = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Complex</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _dreal;</span><br><span class="line">    <span class="type">double</span> _dimag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Complex&amp; rhs) &#123;</span><br><span class="line">    os &lt;&lt; rhs._dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; rhs._dimag &lt;&lt; <span class="string">&quot;i&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">point</span>(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>):<span class="built_in">ix</span>(x),<span class="built_in">iy</span>(y) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;point(int = 0, int = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">point</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;point(const point&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ix + iy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">Complex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(ix, iy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs)&#123;</span><br><span class="line">    os &lt;&lt; rhs.ix &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; rhs.iy &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">point <span class="title">pt4</span><span class="params">(<span class="number">4</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;pt4 = &quot;</span> &lt;&lt; pt4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ix = pt4;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ix = &quot;</span> &lt;&lt; ix &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> dx = pt4;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;dx = &quot;</span> &lt;&lt; dx &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Complex cx = pt4;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;cx = &quot;</span> &lt;&lt; cx &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">point(int = 0, int = 0)</span></span><br><span class="line"><span class="comment">pt4 = 4 5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ix = 9</span></span><br><span class="line"><span class="comment">dx = 9</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">cx = 4 + 5i</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h2><p>一个类可以写在另一个类中，即<strong>嵌套类</strong>，又称<strong>内部类</strong>。</p><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Line</span>(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span><br><span class="line">    :_pt1(x1, y1), _pt2(x2, y2) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Line(int, int, int, int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Line</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Line()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        _pt1.<span class="built_in">print</span>();</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; ---&gt; &quot;</span>;</span><br><span class="line">        _pt2.<span class="built_in">print</span>();</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">point</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">point</span>(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>):<span class="built_in">ix</span>(x),<span class="built_in">iy</span>(y) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;point(int = 0, int = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">            std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                      &lt;&lt; iy ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ~<span class="built_in">point</span>() &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> ix;</span><br><span class="line">        <span class="type">int</span> iy;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    point _pt1;</span><br><span class="line">    point _pt2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Line <span class="title">line</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;line = &quot;</span>;</span><br><span class="line">    line.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">point(int = 0, int = 0)</span></span><br><span class="line"><span class="comment">point(int = 0, int = 0)</span></span><br><span class="line"><span class="comment">Line(int, int, int, int)</span></span><br><span class="line"><span class="comment">line = 1 2 ---&gt; 3 4</span></span><br><span class="line"><span class="comment">~Line()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="设计模式-Pimpl"><a href="#设计模式-Pimpl" class="headerlink" title="设计模式 Pimpl"></a>设计模式 Pimpl</h3><p>通过一个私有的成员指针，隐藏指针所指向类的内部实现。该设计模式有以下优点：</p><ul><li>提高编译速度</li><li>信息隐藏</li><li>减小编译依赖，以小代价平滑升级库文件</li><li>接口与实现解耦</li><li>移动语义友好</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Line.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Line</span>(<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>);</span><br><span class="line">    ~<span class="built_in">Line</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printLine</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">LineImpl</span>; <span class="comment">//类的前向声明</span></span><br><span class="line">    LineImple* _pimpl;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Line.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Line.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span>::LineImpl &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LineImpl</span>(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printLineImpl</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Point</span>(<span class="type">int</span> x = <span class="number">0</span>, <span class="type">int</span> y = <span class="number">0</span>): _x(x), _y(y) &#123;&#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> _x;</span><br><span class="line">        <span class="type">int</span> _y;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Point _pt1;</span><br><span class="line">    Point _pt2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Line::LineImpl::<span class="built_in">LineImpl</span>(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span><br><span class="line">                        : _pt1(x1, y1) ,_pt2(x2, y2) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> Line::LineImpl::<span class="built_in">printLineImpl</span>() <span class="type">const</span> &#123;</span><br><span class="line">    _pt1.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; ---&gt; &quot;</span>;</span><br><span class="line">    _pt2.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Line::<span class="built_in">Line</span>(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span><br><span class="line">          : _pimpl(<span class="keyword">new</span> <span class="built_in">LineImpl</span>(x1, y1, x2, y2)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">Line::~<span class="built_in">Line</span>() &#123;</span><br><span class="line">    <span class="keyword">delete</span> _pimpl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Line::printLine</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    pimpl-&gt;<span class="built_in">printLineImpl</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存泄露的检测"><a href="#内存泄露的检测" class="headerlink" title="内存泄露的检测"></a>内存泄露的检测</h2><p>安装内存泄露检测工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install valgrind</span><br></pre></td></tr></table></figure><p>写一段有泄露的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* pInt = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 terminal 中使用工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ g++ testtmp.cc -o <span class="built_in">test</span> -g</span><br><span class="line">wanko@wanko:~/mycode$ <span class="built_in">ls</span></span><br><span class="line">a.out  exam_log4cpp   example_reids  guoba.py  testtmp</span><br><span class="line">dict   example_mysql  for.sh         <span class="built_in">test</span>      testtmp.cc</span><br><span class="line">wanko@wanko:~/mycode$ valgrind --tool=memcheck --leak-check=full ./test</span><br><span class="line">==84862== Memcheck, a memory error detector</span><br><span class="line">==84862== Copyright (C) 2002-2017, and GNU GPL<span class="string">&#x27;d, by Julian Seward et al.</span></span><br><span class="line"><span class="string">==84862== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info</span></span><br><span class="line"><span class="string">==84862== Command: ./test</span></span><br><span class="line"><span class="string">==84862== </span></span><br><span class="line"><span class="string">==84862== </span></span><br><span class="line"><span class="string">==84862== HEAP SUMMARY:</span></span><br><span class="line"><span class="string">==84862==     in use at exit: 4 bytes in 1 blocks</span></span><br><span class="line"><span class="string">==84862==   total heap usage: 2 allocs, 1 frees, 72,708 bytes allocated</span></span><br><span class="line"><span class="string">==84862== </span></span><br><span class="line"><span class="string">==84862== 4 bytes in 1 blocks are definitely lost in loss record 1 of 1</span></span><br><span class="line"><span class="string">==84862==    at 0x4849013: operator new(unsigned long) (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)</span></span><br><span class="line"><span class="string">==84862==    by 0x10915E: main (testtmp.cc:2)</span></span><br><span class="line"><span class="string">==84862== </span></span><br><span class="line"><span class="string">==84862== LEAK SUMMARY:</span></span><br><span class="line"><span class="string">==84862==    definitely lost: 4 bytes in 1 blocks</span></span><br><span class="line"><span class="string">==84862==    indirectly lost: 0 bytes in 0 blocks</span></span><br><span class="line"><span class="string">==84862==      possibly lost: 0 bytes in 0 blocks</span></span><br><span class="line"><span class="string">==84862==    still reachable: 0 bytes in 0 blocks</span></span><br><span class="line"><span class="string">==84862==         suppressed: 0 bytes in 0 blocks</span></span><br><span class="line"><span class="string">==84862== </span></span><br><span class="line"><span class="string">==84862== For lists of detected and suppressed errors, rerun with: -s</span></span><br><span class="line"><span class="string">==84862== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)</span></span><br></pre></td></tr></table></figure><p>再写一段没有泄露的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* pInt = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">delete</span> pInt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则工具输出为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ g++ tmptest.cc -o <span class="built_in">test</span> -g</span><br><span class="line">wanko@wanko:~/mycode$ <span class="built_in">ls</span></span><br><span class="line">dict          example_mysql  for.sh    <span class="built_in">test</span></span><br><span class="line">exam_log4cpp  example_reids  guoba.py  tmptest.cc</span><br><span class="line">wanko@wanko:~/mycode$ valgrind --tool=memcheck --leak-check=full ./test</span><br><span class="line">==90126== Memcheck, a memory error detector</span><br><span class="line">==90126== Copyright (C) 2002-2017, and GNU GPL<span class="string">&#x27;d, by Julian Seward et al.</span></span><br><span class="line"><span class="string">==90126== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info</span></span><br><span class="line"><span class="string">==90126== Command: ./test</span></span><br><span class="line"><span class="string">==90126== </span></span><br><span class="line"><span class="string">==90126== </span></span><br><span class="line"><span class="string">==90126== HEAP SUMMARY:</span></span><br><span class="line"><span class="string">==90126==     in use at exit: 0 bytes in 0 blocks</span></span><br><span class="line"><span class="string">==90126==   total heap usage: 2 allocs, 2 frees, 72,708 bytes allocated</span></span><br><span class="line"><span class="string">==90126== </span></span><br><span class="line"><span class="string">==90126== All heap blocks were freed -- no leaks are possible</span></span><br><span class="line"><span class="string">==90126== </span></span><br><span class="line"><span class="string">==90126== For lists of detected and suppressed errors, rerun with: -s</span></span><br><span class="line"><span class="string">==90126== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)</span></span><br></pre></td></tr></table></figure><h2 id="单例模式的自动释放"><a href="#单例模式的自动释放" class="headerlink" title="单例模式的自动释放"></a>单例模式的自动释放</h2><h3 id="使用友元形式进行设计"><a href="#使用友元形式进行设计" class="headerlink" title="使用友元形式进行设计"></a>使用友元形式进行设计</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">AutoRelease</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> A* <span class="title">myCreateObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            _ptmp = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _ptmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ~<span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">static</span> A* _ptmp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_ptmp = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AutoRelease</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">AutoRelease</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;AutoRelease()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">AutoRelease</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~AutoRelease()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(A::_ptmp == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">delete</span> A::_ptmp;</span><br><span class="line">        A::_ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A* ps1 = A::<span class="built_in">myCreateObj</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ps1 = &quot;</span> &lt;&lt; ps1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    AutoRelease ar;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">ps1 = 0x563e22a51eb0</span></span><br><span class="line"><span class="comment">AutoRelease()</span></span><br><span class="line"><span class="comment">~AutoRelease()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="内部类加静态数据成员形式"><a href="#内部类加静态数据成员形式" class="headerlink" title="内部类加静态数据成员形式"></a>内部类加静态数据成员形式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> A* <span class="title">myCreateObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            _ptmp = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _ptmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">AutoRelease</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">AutoRelease</span>() &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;AutoRelease()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ~<span class="built_in">AutoRelease</span>() &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;~AutoRelease()&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">delete</span> _ptmp;</span><br><span class="line">            _ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> A* _ptmp;</span><br><span class="line">    <span class="type">static</span> AutoRelease _ar;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">A::AutoRelease A::_ar;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A* ps1 = A::<span class="built_in">myCreateObj</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ps1 = &quot;</span> &lt;&lt; ps1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">AutoRelease()</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">ps1 = 0x5572fd4e72c0</span></span><br><span class="line"><span class="comment">~AutoRelease()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="atexit方式"><a href="#atexit方式" class="headerlink" title="atexit方式"></a>atexit方式</h3><p>首先了解一下<code>atexit()</code>函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;void func()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;begin main...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">atexit</span>(func);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;end main...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">begin main...</span></span><br><span class="line"><span class="comment">end main...</span></span><br><span class="line"><span class="comment">void func()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>atexit()</code>函数会注册给定函数类型（参数是 void，返回类型是 void），注册的函数在进程正常结束的时候被调用。函数注册几次就会执行几次。</p><p>那么可以考虑使用该函数进行单例模式的自动释放：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> A* <span class="title">myCreateObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            _ptmp = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">            <span class="built_in">atexit</span>(destroy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _ptmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">delete</span> _ptmp;</span><br><span class="line">        _ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ~<span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">static</span> A* _ptmp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_ptmp = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A* ps1 = A::<span class="built_in">myCreateObj</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ps1 = &quot;</span> &lt;&lt; ps1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">ps1 = 0x563474c77eb0</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在之前的代码中，若处于多线程环境，可能会创建不止一个实例，违背单例模式的初衷。因此可以采用 atexit + 饿汉模式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> A* <span class="title">myCreateObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            _ptmp = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">            <span class="built_in">atexit</span>(destroy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _ptmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void destory()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">delete</span> _ptmp;</span><br><span class="line">        _ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ~<span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">static</span> A* _ptmp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_ptmp = <span class="built_in">myCreateObj</span>(); <span class="comment">// 饿汉模式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A* ps1 = A::<span class="built_in">myCreateObj</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ps1 = &quot;</span> &lt;&lt; ps1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">ps1 = 0x560be12b7eb0</span></span><br><span class="line"><span class="comment">void destory()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="pthread-once-形式"><a href="#pthread-once-形式" class="headerlink" title="pthread_once 形式"></a>pthread_once 形式</h3><p><code>pthread_once</code>函数：在多线程编程环境下，由<code>pthread_once()</code>指定的函数执行且仅执行一次。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> A* <span class="title">myCreateObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">pthread_once</span>(&amp;_once, init);</span><br><span class="line">        <span class="keyword">return</span> _ptmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        _ptmp = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">        <span class="built_in">atexit</span>(destroy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void destory()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">delete</span> _ptmp;</span><br><span class="line">        _ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ~<span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">static</span> A* _ptmp;</span><br><span class="line">    <span class="type">static</span> <span class="type">pthread_once_t</span> _once;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_ptmp = <span class="built_in">myCreateObj</span>(); <span class="comment">// 饿汉模式</span></span><br><span class="line"><span class="type">pthread_once_t</span> A::_once = PTHREAD_ONCE_INIT;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A* ps1 = A::<span class="built_in">myCreateObj</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ps1 = &quot;</span> &lt;&lt; ps1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ g++ tmptest.cc -lpthread</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ ./a.out</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">ps1 = 0x5578fad56eb0</span></span><br><span class="line"><span class="comment">void destory()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面的代码用饿汉模式或是饱汉模式都 OK.</p><p><strong>注意</strong>：上面代码中的<code>&lt;pthread.h&gt;</code>库只能在 linux 下使用。</p><h2 id="string-的底层实现"><a href="#string-的底层实现" class="headerlink" title="string 的底层实现"></a>string 的底层实现</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>三种基本方式：</p><ul><li>Eager Copy（深拷贝）</li><li>COW（写时复制）</li><li>SSO（Short String Optimization 短字符串优化）</li></ul><p><img src="https://s2.loli.net/2024/02/21/a4ZvEIRQKJwtSTf.png" alt="66-1.png"></p><p>COW：只是进行读操作时，浅拷贝；如果需要写操作，再深拷贝。</p><p>写时复制的体现（注意：以下图片是在<strong>较旧的环境</strong>下）：</p><p><img src="https://s2.loli.net/2024/02/21/OcWMwSKpZ9QVeGq.png" alt="66-2.png" title="浅拷贝"></p><p>需要写操作，进行深拷贝：</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/hnI4zYyu_dJD2f" alt="66-3"></p><p>注意在较新环境下并不使用写时复制，而是使用 sso .<br>当字符串的长度小于 16 字节时，放在<strong>栈上</strong>。否则放在<strong>堆上</strong>。</p><p>注意以下代码输出结果的地址前几位：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span>* pInt = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    string s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    string s2 = <span class="string">&quot;helloworldwanko&quot;</span>;</span><br><span class="line">    string s3 = <span class="string">&quot;Welcome to Uptown Berloberg, Hooker.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1&#x27; address = %p\n&quot;</span>, s1.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2&#x27; address = %p\n&quot;</span>, s2.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3&#x27; address = %p\n&quot;</span>, s3.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a = %p\n&quot;</span>, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;pInt = %p\n&quot;</span>, &amp;pInt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pInt = %p\n&quot;</span>, pInt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pInt;</span><br><span class="line">    pInt = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s2 = helloworldwanko</span></span><br><span class="line"><span class="comment">s3 = Welcome to Uptown Berloberg, Hooker.</span></span><br><span class="line"><span class="comment">s1&#x27; address = 0x7ffe48ba02b0</span></span><br><span class="line"><span class="comment">s2&#x27; address = 0x7ffe48ba02d0</span></span><br><span class="line"><span class="comment">s3&#x27; address = 0x558f62abaed0</span></span><br><span class="line"><span class="comment">&amp;a = 0x7ffe48ba0294</span></span><br><span class="line"><span class="comment">&amp;pInt = 0x7ffe48ba0298</span></span><br><span class="line"><span class="comment">pInt = 0x558f62abaeb0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>通常，一个程序里的字符串大都很短小，而在64位机器上，一个 char* 指针就占用了8个字节，所以 SSO 就出现了。其思想是：发生拷贝时要需复制一个指针，但对小字符串来说，直接复制整个字符串比较划算。实现示意图如下：</p><p><img src="https://s2.loli.net/2024/02/21/c3YB2jeCMdb6nsf.png" alt="66-4.png"></p><p>更多细节参考：</p><div class="row"><iframe src="https://drive.google.com/file/d/1tdKtonD6rRBT-UvWMFHrjSmPrFRpYWf9/preview" style="width:100%; height:550px"></iframe></div><h3 id="实现写时复制"><a href="#实现写时复制" class="headerlink" title="实现写时复制"></a>实现写时复制</h3><p>大致写出写时复制的逻辑。大体思路：</p><p><img src="https://s2.loli.net/2024/02/21/R12D7ptInwiuEBd.png" alt="66-5.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::ostream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="type">const</span> String&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>():_pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="number">5</span>]()+<span class="number">4</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">initRefCount</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* pstr)</span><br><span class="line">    :_pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pstr)+<span class="number">5</span>]()+<span class="number">4</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr, pstr);</span><br><span class="line">        <span class="built_in">initRefCount</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; rhs):_pstr(rhs._pstr) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">increseRefCount</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String&amp; <span class="keyword">operator</span> = (<span class="type">const</span> String&amp; rhs) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String&amp; operator = (const String&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == &amp;rhs) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">decreseRefCount</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">getRefCount</span>()) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] (_pstr<span class="number">-4</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _pstr = rhs._pstr; <span class="comment">// 浅拷贝</span></span><br><span class="line">        <span class="built_in">increseRefCount</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRefCount</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> *(<span class="type">int</span>*)(_pstr<span class="number">-4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _pstr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">CharProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">CharProxy</span>(String&amp; self, <span class="type">size_t</span> idx)</span><br><span class="line">                 : _self(self), _idx(idx) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>&amp; <span class="keyword">operator</span> = (<span class="type">const</span> <span class="type">char</span>&amp; ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="type">const</span> CharProxy&amp; rhs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        String&amp; _self;</span><br><span class="line">        <span class="type">size_t</span> _idx;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CharProxy <span class="keyword">operator</span> [] (<span class="type">size_t</span> idx) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">CharProxy</span>(*<span class="keyword">this</span>, idx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">String</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">decreseRefCount</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">getRefCount</span>()) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] (_pstr<span class="number">-4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 双重友元</span></span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="type">const</span> String::CharProxy&amp; rhs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initRefCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        *(<span class="type">int</span>*)(_pstr<span class="number">-4</span>) = <span class="number">1</span>; <span class="comment">// 引用计数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">increseRefCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ++ *(<span class="type">int</span>*)(_pstr<span class="number">-4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">decreseRefCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        -- *(<span class="type">int</span>*)(_pstr<span class="number">-4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">strlen</span>(_pstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* _pstr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="type">const</span> String&amp; rhs) &#123;</span><br><span class="line">    <span class="keyword">if</span>(rhs._pstr) &#123;</span><br><span class="line">        os &lt;&lt; rhs._pstr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="type">char</span>&amp; String::CharProxy::<span class="keyword">operator</span> = (<span class="type">const</span> <span class="type">char</span>&amp; ch) &#123;</span><br><span class="line">    <span class="keyword">if</span>(_idx &gt;= _self.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">char</span> charNull = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> charNull;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(_self.<span class="built_in">getRefCount</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">char</span>* tmp = <span class="keyword">new</span> <span class="type">char</span>[_self.<span class="built_in">size</span>()+<span class="number">5</span>]()+<span class="number">4</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(tmp, _self._pstr);</span><br><span class="line">        _self.<span class="built_in">decreseRefCount</span>();</span><br><span class="line"></span><br><span class="line">        _self._pstr = tmp;</span><br><span class="line">        _self.<span class="built_in">initRefCount</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    _self._pstr[_idx] = ch;  <span class="comment">// 进行写操作</span></span><br><span class="line">    <span class="keyword">return</span> _self._pstr[_idx];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="type">const</span> String::CharProxy&amp; rhs) &#123;</span><br><span class="line">    os &lt;&lt; rhs._self._pstr[rhs._idx];</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">s1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.getRefCount = &quot;</span> &lt;&lt; s1.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1&#x27; address = %p\n&quot;</span>, s1.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    String s2 = s1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.getRefCount = &quot;</span> &lt;&lt; s1.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2.getRefCount = &quot;</span> &lt;&lt; s2.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1&#x27; address = %p\n&quot;</span>, s1.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2&#x27; address = %p\n&quot;</span>, s2.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">String <span class="title">s3</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3.getRefCount = &quot;</span> &lt;&lt; s3.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3&#x27; address = %p\n&quot;</span>, s3.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    s3 = s1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.getRefCount = &quot;</span> &lt;&lt; s1.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2.getRefCount = &quot;</span> &lt;&lt; s2.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3.getRefCount = &quot;</span> &lt;&lt; s3.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1&#x27; address = %p\n&quot;</span>, s1.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2&#x27; address = %p\n&quot;</span>, s2.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3&#x27; address = %p\n&quot;</span>, s3.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;对 s3[0] 执行写操作&quot;</span> &lt;&lt; endl;</span><br><span class="line">    s3[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.getRefCount = &quot;</span> &lt;&lt; s1.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2.getRefCount = &quot;</span> &lt;&lt; s2.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3.getRefCount = &quot;</span> &lt;&lt; s3.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1&#x27; address = %p\n&quot;</span>, s1.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2&#x27; address = %p\n&quot;</span>, s2.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3&#x27; address = %p\n&quot;</span>, s3.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;对 s1[0] 执行读操作&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1[0] = &quot;</span> &lt;&lt; s1[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.getRefCount = &quot;</span> &lt;&lt; s1.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2.getRefCount = &quot;</span> &lt;&lt; s2.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3.getRefCount = &quot;</span> &lt;&lt; s3.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1&#x27; address = %p\n&quot;</span>, s1.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2&#x27; address = %p\n&quot;</span>, s2.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3&#x27; address = %p\n&quot;</span>, s3.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String(const char*)</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s1.getRefCount = 1</span></span><br><span class="line"><span class="comment">s1&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String(const String&amp;)</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s2 = hello</span></span><br><span class="line"><span class="comment">s1.getRefCount = 2</span></span><br><span class="line"><span class="comment">s2.getRefCount = 2</span></span><br><span class="line"><span class="comment">s1&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s2&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String(const char*)</span></span><br><span class="line"><span class="comment">s3 = world</span></span><br><span class="line"><span class="comment">s3.getRefCount = 1</span></span><br><span class="line"><span class="comment">s3&#x27; address = 0x558bc073b2e4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String&amp; operator = (const String&amp;)</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s2 = hello</span></span><br><span class="line"><span class="comment">s3 = hello</span></span><br><span class="line"><span class="comment">s1.getRefCount = 3</span></span><br><span class="line"><span class="comment">s2.getRefCount = 3</span></span><br><span class="line"><span class="comment">s3.getRefCount = 3</span></span><br><span class="line"><span class="comment">s1&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s2&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s3&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对 s3[0] 执行写操作</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s2 = hello</span></span><br><span class="line"><span class="comment">s3 = Hello</span></span><br><span class="line"><span class="comment">s1.getRefCount = 2</span></span><br><span class="line"><span class="comment">s2.getRefCount = 2</span></span><br><span class="line"><span class="comment">s3.getRefCount = 1</span></span><br><span class="line"><span class="comment">s1&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s2&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s3&#x27; address = 0x558bc073b2e4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对 s1[0] 执行读操作</span></span><br><span class="line"><span class="comment">s1[0] = h</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s2 = hello</span></span><br><span class="line"><span class="comment">s3 = Hello</span></span><br><span class="line"><span class="comment">s1.getRefCount = 2</span></span><br><span class="line"><span class="comment">s2.getRefCount = 2</span></span><br><span class="line"><span class="comment">s3.getRefCount = 1</span></span><br><span class="line"><span class="comment">s1&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s2&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s3&#x27; address = 0x558bc073b2e4</span></span><br><span class="line"><span class="comment">~String()</span></span><br><span class="line"><span class="comment">~String()</span></span><br><span class="line"><span class="comment">~String()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>值得一提的是，在使用下标运算符<code>[]</code>时，写时复制要求在 读/写 两种不同的操作下有不同的行为，因此考虑自定义一个新类型，然后重载<code>=</code>和<code>&lt;&lt;</code>。</p><p>这份代码细节拉满，需要细细品味。</p><h2 id="派生类对象的创建与销毁"><a href="#派生类对象的创建与销毁" class="headerlink" title="派生类对象的创建与销毁"></a>派生类对象的创建与销毁</h2><table>  <tbody>    <tr>      <td><strong>继承方式</strong></td>      <td><strong>基类成员访问权限</strong></td>      <td><strong>在派生类中访问权限</strong></td>      <td><strong>派生类对象访问</strong></td>    </tr>    <tr>      <td>公有继承</td>      <td>public<br>protected<br>private</td>      <td>public<br>protected<br>不可直接访问</td>      <td>可直接访问<br>不可直接访问<br>不可直接访问</td>    </tr>    <tr>      <td>保护继承</td>      <td>public<br>protected<br>private</td>      <td>protected<br>protected<br>不可直接访问</td>      <td>不可直接访问</td>    </tr>    <tr>      <td>私有继承</td>      <td>public<br>protected<br>private</td>      <td>private<br>private<br>不可直接访问</td>      <td>不可直接访问</td>    </tr>  </tbody>  <colgroup>    <col>    <col>    <col>    <col>  </colgroup></table><center><font color = red>- - - - - 创建 - - - - -</font></center><p>一、若派生类显式定义构造函数，而基类没有显示定义构造函数，则创建派生类对象时，派生类相应的构造函数会被自动调用，且自动调用基类缺省的无参构造函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>() : _base(<span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">int</span> derived) : _derived(derived) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived(int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _derived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Derived <span class="title">d1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Base()</span></span><br><span class="line"><span class="comment">Derived(int)</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>二、如果派生类没有显式定义构造函数而基类有显示定义构造函数，则基类必须拥有默认构造函数。</p><p>三、如果派生类有构造函数，基类有默认构造函数，则创建派生类的对象时，基类的默认构造函数会自动调用。如果想调用基类的有参构造函数，必须要在派生类构造函数的初始化列表中显示调用基类的有参构造函数。</p><p>四、如果派生类和基类都有构造函数，但基类没有默认的无参构造函数，即基类的构造函数均带有参数，则派生类的每一个构造函数必须在其初始化列表中显示地去调用基类的某个带参的构造函数。</p><center><font color = red>- - - - - 创建END - - - - -</font></center><p><br></p><center><font color = red>- - - - - 销毁 - - - - -</font></center><p>当派生类对象被删除时，派生类的析构函数被执行。析构函数同样不能继承，因此，在执行派生类析构函数时，基类析构函数会被自动调用。执行顺序是先执行派生类的析构函数，再执行基类的析构函数。</p><p>当考虑对象成员时，继承机制下析构函数的调用顺序：</p><ol><li>先调用派生类的析构函数</li><li>再调用派生类中对象成员的析构函数</li><li>最后调用普通基类的析构函数</li></ol><center><font color = red>- - - - - 销毁END - - - - -</font></center><h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void A::show() const&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void B::display() const&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">C</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;C()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void C::print() const&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">C</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~C()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> A, <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">D</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;D()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">D</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~D()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    D d;</span><br><span class="line">    d.<span class="built_in">show</span>();</span><br><span class="line">    d.<span class="built_in">display</span>();</span><br><span class="line">    d.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">B()</span></span><br><span class="line"><span class="comment">C()</span></span><br><span class="line"><span class="comment">D()</span></span><br><span class="line"><span class="comment">void A::show() const</span></span><br><span class="line"><span class="comment">void B::display() const</span></span><br><span class="line"><span class="comment">void C::print() const</span></span><br><span class="line"><span class="comment">~D()</span></span><br><span class="line"><span class="comment">~C()</span></span><br><span class="line"><span class="comment">~B()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>多继承下，基类构造函数的执行顺序与其在派生类构造函数初始化列表中的顺序无关，而与基类被继承的顺序有关。</p><h3 id="成员名冲突的二义性"><a href="#成员名冲突的二义性" class="headerlink" title="成员名冲突的二义性"></a>成员名冲突的二义性</h3><p>解决多继承下函数名字冲突的方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void A::print() const&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void B::print() const&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">C</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;C()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void C::print() const&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">C</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~C()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> A, <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">D</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;D()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">D</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~D()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    D d;</span><br><span class="line">    d.A::<span class="built_in">print</span>();</span><br><span class="line">    d.B::<span class="built_in">print</span>();</span><br><span class="line">    d.C::<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">B()</span></span><br><span class="line"><span class="comment">C()</span></span><br><span class="line"><span class="comment">D()</span></span><br><span class="line"><span class="comment">void A::print() const</span></span><br><span class="line"><span class="comment">void B::print() const</span></span><br><span class="line"><span class="comment">void C::print() const</span></span><br><span class="line"><span class="comment">~D()</span></span><br><span class="line"><span class="comment">~C()</span></span><br><span class="line"><span class="comment">~B()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="菱形继承的二义性"><a href="#菱形继承的二义性" class="headerlink" title="菱形继承的二义性"></a>菱形继承的二义性</h3><p>多基派生中，如果在多条继承路径上有一个共同的基类，如下图所示，不难看出，在D类对象中，会有来自两条不同路径的共同基类（类A）的双重拷贝。</p><p><img src="https://bu.dusays.com/2024/02/23/65d898f824dfd.png" alt="66-6.png"></p><p>菱形继承会导致数据成员的存储二义性，解决方法：使 B 和 C 虚拟继承 A .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下面展示问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dummy code</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">long</span> lx = <span class="number">0</span>):_lx(lx) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A(long = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;lx = &quot;</span> &lt;&lt; _lx &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setVal</span><span class="params">(<span class="type">long</span> value)</span> </span>&#123;</span><br><span class="line">        _lx = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">long</span> _lx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(A) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(A) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(B) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(B) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(C) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(C) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(D) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(D) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    D d;</span><br><span class="line">    d.B::<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    d.C::<span class="built_in">setVal</span>(<span class="number">23</span>);</span><br><span class="line">    d.B::<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    d.C::<span class="built_in">print</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(A) = 8</span></span><br><span class="line"><span class="comment">sizeof(B) = 8</span></span><br><span class="line"><span class="comment">sizeof(C) = 8</span></span><br><span class="line"><span class="comment">sizeof(D) = 16</span></span><br><span class="line"><span class="comment">A(long = 0)</span></span><br><span class="line"><span class="comment">A(long = 0)</span></span><br><span class="line"><span class="comment">lx = 0</span></span><br><span class="line"><span class="comment">lx = 0</span></span><br><span class="line"><span class="comment">lx = 23</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>下面展示解决方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">long</span> lx = <span class="number">0</span>):_lx(lx) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A(long = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;lx = &quot;</span> &lt;&lt; _lx &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setVal</span><span class="params">(<span class="type">long</span> value)</span> </span>&#123;</span><br><span class="line">        _lx = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">long</span> _lx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(A) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(A) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(B) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(B) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(C) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(C) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(D) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(D) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    D d;</span><br><span class="line">    d.B::<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    d.C::<span class="built_in">setVal</span>(<span class="number">23</span>);</span><br><span class="line">    d.B::<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    d.C::<span class="built_in">print</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(A) = 8</span></span><br><span class="line"><span class="comment">sizeof(B) = 16</span></span><br><span class="line"><span class="comment">sizeof(C) = 16</span></span><br><span class="line"><span class="comment">sizeof(D) = 24</span></span><br><span class="line"><span class="comment">A(long = 0)</span></span><br><span class="line"><span class="comment">lx = 0</span></span><br><span class="line"><span class="comment">lx = 23</span></span><br><span class="line"><span class="comment">lx = 23</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面的代码中 sizeof 大小出现变化是由于<strong>虚基指针</strong>。</p><p>或者也可以：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">long</span> lx = <span class="number">0</span>):_lx(lx) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A(long = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;lx = &quot;</span> &lt;&lt; _lx &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setVal</span><span class="params">(<span class="type">long</span> value)</span> </span>&#123;</span><br><span class="line">        _lx = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">long</span> _lx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(A) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(A) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(B) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(B) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(C) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(C) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(D) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(D) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    D d;</span><br><span class="line">    d.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    d.<span class="built_in">setVal</span>(<span class="number">23</span>);</span><br><span class="line">    d.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(A) = 8</span></span><br><span class="line"><span class="comment">sizeof(B) = 16</span></span><br><span class="line"><span class="comment">sizeof(C) = 16</span></span><br><span class="line"><span class="comment">sizeof(D) = 24</span></span><br><span class="line"><span class="comment">A(long = 0)</span></span><br><span class="line"><span class="comment">lx = 0</span></span><br><span class="line"><span class="comment">lx = 23</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>关于虚基指针的图示（转自<a href="https://blog.csdn.net/qq_41431406/article/details/84933450">一颗程序媛0915想上岸</a>）：</p><p><img src="https://bu.dusays.com/2024/04/07/661286c98f852.png" alt="66-6dot1.png"></p><p>若为多继承时，内存布局如下：</p><p><img src="https://bu.dusays.com/2024/04/07/6612871ee1731.png" alt="66-6dot2.png"></p><p>虚继承的内存布局如下：</p><p><img src="https://bu.dusays.com/2024/04/07/6612875b08204.png" alt="66-6dot3.png"></p><p>来看另一种情况：</p><p><img src="https://bu.dusays.com/2024/04/07/661288238ec5f.png" alt="66-6dot6.png"></p><p>若为多继承时，内存布局如下：</p><p><img src="https://bu.dusays.com/2024/04/07/6612887a088ec.png" alt="66-6dot7.png"></p><p>虚继承的内存布局如下：<br>第一个vbptr 存放3个数据，因为指针合并，向距离作用域最近的指针内层合并</p><p><img src="https://bu.dusays.com/2024/04/07/661288c356499.png" alt="66-6dot8.png"></p><h2 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h2><p>杂项知识点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::pair;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    pair&lt;<span class="type">int</span>, string&gt; aka = &#123;<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>&#125;;</span><br><span class="line">    cout &lt;&lt; aka.first &lt;&lt; <span class="string">&quot;   &quot;</span> &lt;&lt; aka.second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1   hello</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="基类与派生类间的转换"><a href="#基类与派生类间的转换" class="headerlink" title="基类与派生类间的转换"></a>基类与派生类间的转换</h2><p>“类型适应”指类型间的关系。“A类适应B类”，意味着 A 类对象能直接用于需要 B 类对象的场合，在这种意义下，<strong>派生类适应基类</strong>，派生类对象适应基类对象，派生类对象的指针和引用也适应基类对象的指针和引用。例如：</p><ul><li>可以把派生类的对象赋值给基类的对象</li><li>可以把基类的引用绑定到派生类的对象</li><li>可以声明基类的指针指向派生类的对象 (向上转型)</li></ul><h2 id="派生类对象间的复制控制"><a href="#派生类对象间的复制控制" class="headerlink" title="派生类对象间的复制控制"></a>派生类对象间的复制控制</h2><p>基类的拷贝构造函数和 operator= 运算符函数不能被继承，因此需要注意:</p><ol><li>如果用户定义了基类的拷贝构造函数，而<strong>没有定义派生类的</strong>拷贝构造函数，那么在用一个派生类对象初始化新的派生类对象时，两对象间的<strong>派生类部分执行缺省</strong>的行为，而两对象间的<strong>基类部分执行用户定义的</strong>基类拷贝构造函数。</li><li>如果用户重载了基类的赋值运算符函数，而<strong>没有重载派生类的</strong>赋值运算符函数，那么在用一个派生类对象给另一个已经存在的派生类对象赋值时，两对象间的<strong>派生类部分执行缺省</strong>的赋值行为，而两对象间的<strong>基类部分执行用户定义的</strong>重载赋值函数。</li><li>如果用户<strong>定义了</strong>派生类的拷贝构造函数或者<strong>重载了</strong>派生类的对象赋值运算符=，则在用已有派生类对象初始化新的派生类对象时，或者在派生类对象间赋值时，将会执行用户定义的派生类的拷贝构造函数或者重载赋值函数，而<strong>不会再自动调用基类的</strong>拷贝构造函数和基类的重载对象赋值运算符，这时，通常需要用户在派生类的拷贝构造函数或者派生类的赋值函数中<strong>显式调用基类的</strong>拷贝构造或赋值运算符函数。</li></ol><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="概念、分类"><a href="#概念、分类" class="headerlink" title="概念、分类"></a>概念、分类</h3><p>多态：对于同一指令，不同对象产生不同行为。</p><p>多态的分类：</p><ul><li>静态多态<ul><li>例如：函数重载、运算符重载、模板</li><li>发生在编译时</li></ul></li><li>动态多态<ul><li>例如：虚函数</li><li>发生在运行时</li></ul></li></ul><p>多态的其他细节例子参考 <a href="https://loveofpeach.github.io/posts/54b4d7a2.html">CppNote</a> .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">double</span> base = <span class="number">0.0</span>): _base(base) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base::_base = &quot;</span> &lt;&lt; _base &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">double</span> base = <span class="number">0.0</span>, <span class="type">double</span> derived = <span class="number">0.0</span>)</span><br><span class="line">          : <span class="built_in">Base</span>(base), _derived(derived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived(double = 0.0, double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::_derived = &quot;</span> &lt;&lt; _derived &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _derived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(Base* pb)</span> </span>&#123;</span><br><span class="line">    pb-&gt;<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Base) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Base) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Derived) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Derived) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">Base <span class="title">base</span><span class="params">(<span class="number">11.11</span>)</span></span>;</span><br><span class="line">    <span class="function">Derived <span class="title">derived</span><span class="params">(<span class="number">22.22</span>, <span class="number">33.33</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">func</span>(&amp;base);</span><br><span class="line">    <span class="built_in">func</span>(&amp;derived);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(Base) = 16</span></span><br><span class="line"><span class="comment">sizeof(Derived) = 24</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Derived(double = 0.0, double = 0.0)</span></span><br><span class="line"><span class="comment">Base::_base = 11.11</span></span><br><span class="line"><span class="comment">Derived::_derived = 33.33</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，sizeof 的大小是虚函数指针的体现。</p><h3 id="虚函数的原理、条件"><a href="#虚函数的原理、条件" class="headerlink" title="虚函数的原理、条件"></a>虚函数的原理、条件</h3><p>虚函数的实现原理：</p><p><img src="https://bu.dusays.com/2024/02/25/65daf6417310d.png" alt="66-7.png"></p><p>虚函数机制的激活条件：</p><ol><li>基类定义虚函数</li><li>派生类重写该虚函数</li><li>创建派生类的对象</li><li>用基类的指针指向（引用绑定）派生类的对象</li><li>使用基类的指针（引用）调用该虚函数</li></ol><p>不能设置为虚函数的函数：</p><ul><li>普通函数（自由函数、全局函数）</li><li>内联成员函数</li><li>静态成员函数</li><li>友元函数（分情况）<ul><li>若该友元函数本身是一个普通函数，则不能被设置为虚函数</li><li>若该友元函数本身是另外一个类的成员函数，则可以被设置为虚函数</li></ul></li><li>构造函数</li></ul><h3 id="虚函数的访问"><a href="#虚函数的访问" class="headerlink" title="虚函数的访问"></a>虚函数的访问</h3><p>一、指针访问</p><p>即上例。</p><p>二、引用访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">double</span> base = <span class="number">0.0</span>): _base(base) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base::_base = &quot;</span> &lt;&lt; _base &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">double</span> base = <span class="number">0.0</span>, <span class="type">double</span> derived = <span class="number">0.0</span>)</span><br><span class="line">          : <span class="built_in">Base</span>(base), _derived(derived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived(double = 0.0, double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::_derived = &quot;</span> &lt;&lt; _derived &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _derived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(Base&amp; pb)</span> </span>&#123;</span><br><span class="line">    pb.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Base) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Base) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Derived) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Derived) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">Base <span class="title">base</span><span class="params">(<span class="number">11.11</span>)</span></span>;</span><br><span class="line">    <span class="function">Derived <span class="title">derived</span><span class="params">(<span class="number">22.22</span>, <span class="number">33.33</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">func</span>(base);</span><br><span class="line">    <span class="built_in">func</span>(derived);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(Base) = 16</span></span><br><span class="line"><span class="comment">sizeof(Derived) = 24</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Derived(double = 0.0, double = 0.0)</span></span><br><span class="line"><span class="comment">Base::_base = 11.11</span></span><br><span class="line"><span class="comment">Derived::_derived = 33.33</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>三、对象访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">double</span> base = <span class="number">0.0</span>): _base(base) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base::_base = &quot;</span> &lt;&lt; _base &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">double</span> base = <span class="number">0.0</span>, <span class="type">double</span> derived = <span class="number">0.0</span>)</span><br><span class="line">          : <span class="built_in">Base</span>(base), _derived(derived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived(double = 0.0, double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::_derived = &quot;</span> &lt;&lt; _derived &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _derived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Base) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Base) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Derived) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Derived) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">Base <span class="title">base</span><span class="params">(<span class="number">11.11</span>)</span></span>;</span><br><span class="line">    <span class="function">Derived <span class="title">derived</span><span class="params">(<span class="number">22.22</span>, <span class="number">33.33</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    base.<span class="built_in">print</span>();</span><br><span class="line">    derived.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(Base) = 16</span></span><br><span class="line"><span class="comment">sizeof(Derived) = 24</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Derived(double = 0.0, double = 0.0)</span></span><br><span class="line"><span class="comment">Base::_base = 11.11</span></span><br><span class="line"><span class="comment">Derived::_derived = 33.33</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>注意，这里并没有体现出多态。</p><p>和普通函数一样，虚函数一样可以通过对象名来调用，此时编译器采用的是<strong>静态联编</strong>。</p><p>四、成员函数中访问</p><p>例子不难理解，耐心看：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">double</span> base = <span class="number">0.0</span>): _base(base) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base::_base = &quot;</span> &lt;&lt; _base &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Base::<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">double</span> base = <span class="number">0.0</span>, <span class="type">double</span> derived = <span class="number">0.0</span>)</span><br><span class="line">          : <span class="built_in">Base</span>(base), _derived(derived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived(double = 0.0, double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::_derived = &quot;</span> &lt;&lt; _derived &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _derived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Base) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Base) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Derived) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Derived) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">Base <span class="title">base</span><span class="params">(<span class="number">11.11</span>)</span></span>;</span><br><span class="line">    <span class="function">Derived <span class="title">derived</span><span class="params">(<span class="number">22.22</span>, <span class="number">33.33</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    Base* pbase = &amp;base;</span><br><span class="line">    pbase-&gt;<span class="built_in">func1</span>();</span><br><span class="line">    pbase-&gt;<span class="built_in">func2</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    Base* pbase2 = &amp;derived;</span><br><span class="line">    pbase2-&gt;<span class="built_in">func1</span>();</span><br><span class="line">    pbase2-&gt;<span class="built_in">func2</span>();    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(Base) = 16</span></span><br><span class="line"><span class="comment">sizeof(Derived) = 24</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Derived(double = 0.0, double = 0.0)</span></span><br><span class="line"><span class="comment">Base::_base = 11.11</span></span><br><span class="line"><span class="comment">Base::_base = 11.11</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Derived::_derived = 33.33</span></span><br><span class="line"><span class="comment">Base::_base = 22.22</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>五、构造函数和析构函数中访问</p><p>它们所调用的虚函数是自己类中定义的函数，如果在自己的类中没有实现该函数，则调用的是基类中的虚函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Grandpa</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Grandpa</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Grandpa()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Grandpa</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Grandpa()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Grandpa::func1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Grandpa::func2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span></span><br><span class="line">    : <span class="keyword">public</span> Grandpa</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Father</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Father()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">func1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Father</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Father()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">func2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Father::func1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Father::func2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span></span><br><span class="line">    : <span class="keyword">public</span> Father</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Son</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Son</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Son()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son::func1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son::func2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Son son;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Grandpa()</span></span><br><span class="line"><span class="comment">Father()</span></span><br><span class="line"><span class="comment">Father::func1()</span></span><br><span class="line"><span class="comment">Son()</span></span><br><span class="line"><span class="comment">~Son()</span></span><br><span class="line"><span class="comment">~Father()</span></span><br><span class="line"><span class="comment">Father::func2()</span></span><br><span class="line"><span class="comment">~Grandpa()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>参见 <a href="https://loveofpeach.github.io/posts/54b4d7a2.html">CppNote</a> .</p><p>构造函数用<code>protected</code>修饰的类，也称为抽象类。</p><h2 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h2><p>虽然构造函数不能被定义成虚函数，但<strong>析构函数可以定义为虚函数</strong>，一般来说，如果类中定义了虚函数，析构函数也应被定义为虚析构函数，尤其是类内有申请的动态内存，需要清理和释放的时候。</p><p>来看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">const</span> <span class="type">char</span>* pbase)</span><br><span class="line">        :_pbase(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pbase)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pbase, pbase);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pbase) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Base::_pbase = &quot;</span> &lt;&lt; _pbase &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pbase) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pbase;</span><br><span class="line">            _pbase = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pbase;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">const</span> <span class="type">char</span>* pbase, <span class="type">const</span> <span class="type">char</span>* pderived)</span><br><span class="line">           :<span class="built_in">Base</span>(pbase), _pderived(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pderived)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived(const char*, const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pderived, pderived);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pderived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived::_pderived = &quot;</span> &lt;&lt; _pderived &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pderived) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pderived;</span><br><span class="line">            _pderived = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pderived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Base* pbase = <span class="keyword">new</span> <span class="built_in">Derived</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">    pbase-&gt;<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pbase;</span><br><span class="line">    pbase = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Base(const char*)</span></span><br><span class="line"><span class="comment">Derived(const char*, const char*)</span></span><br><span class="line"><span class="comment">Derived::_pderived = world</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>~Derived()</code>没有执行，内存泄露。</p><p>可以采用的不优雅的方法是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">const</span> <span class="type">char</span>* pbase)</span><br><span class="line">        :_pbase(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pbase)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pbase, pbase);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pbase) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Base::_pbase = &quot;</span> &lt;&lt; _pbase &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pbase) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pbase;</span><br><span class="line">            _pbase = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pbase;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">const</span> <span class="type">char</span>* pbase, <span class="type">const</span> <span class="type">char</span>* pderived)</span><br><span class="line">           :<span class="built_in">Base</span>(pbase), _pderived(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pderived)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived(const char*, const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pderived, pderived);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pderived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived::_pderived = &quot;</span> &lt;&lt; _pderived &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pderived) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pderived;</span><br><span class="line">            _pderived = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pderived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Base* pbase = <span class="keyword">new</span> <span class="built_in">Derived</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">    pbase-&gt;<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">dynamic_cast</span>&lt;Derived*&gt;(pbase);</span><br><span class="line">    pbase = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Base(const char*)</span></span><br><span class="line"><span class="comment">Derived(const char*, const char*)</span></span><br><span class="line"><span class="comment">Derived::_pderived = world</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>另一种方法是，使用虚析构函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">const</span> <span class="type">char</span>* pbase)</span><br><span class="line">        :_pbase(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pbase)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pbase, pbase);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pbase) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Base::_pbase = &quot;</span> &lt;&lt; _pbase &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pbase) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pbase;</span><br><span class="line">            _pbase = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pbase;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">const</span> <span class="type">char</span>* pbase, <span class="type">const</span> <span class="type">char</span>* pderived)</span><br><span class="line">           :<span class="built_in">Base</span>(pbase), _pderived(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pderived)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived(const char*, const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pderived, pderived);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pderived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived::_pderived = &quot;</span> &lt;&lt; _pderived &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pderived) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pderived;</span><br><span class="line">            _pderived = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pderived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Base* pbase = <span class="keyword">new</span> <span class="built_in">Derived</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">    pbase-&gt;<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pbase;  <span class="comment">// 体现多态</span></span><br><span class="line">    pbase = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Base(const char*)</span></span><br><span class="line"><span class="comment">Derived(const char*, const char*)</span></span><br><span class="line"><span class="comment">Derived::_pderived = world</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="重载、隐藏、覆盖"><a href="#重载、隐藏、覆盖" class="headerlink" title="重载、隐藏、覆盖"></a>重载、隐藏、覆盖</h2><p>重载：在同一个作用域中，函数的名字相同，但是参数列表不一样（包括参数的个数、参数类型、参数顺序）</p><p>重定义（重写、覆盖）：发生在基类与派生类中，<strong>必须是虚函数</strong>，函数名字相同，参数列表也相同。</p><p>隐藏：发生在基类与派生类中，派生中的函数与基类中的函数<strong>名字相同</strong>。（至于是不是虚函数，至于参数列表是不是一样的没有关系），派生类的数据成员也可以隐藏基类中的同名数据成员。</p><p>看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">double</span> mem = <span class="number">0.0</span>)</span><br><span class="line">    : _member(mem)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base::_member = &quot;</span> &lt;&lt; _member &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _member;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">double</span> mem = <span class="number">0.0</span>):<span class="built_in">Base</span>(mem)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived(double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::x = &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Derived <span class="title">d</span><span class="params">(<span class="number">11.11</span>)</span></span>;</span><br><span class="line">    <span class="comment">// d.print();  // 不ok</span></span><br><span class="line">    d.<span class="built_in">print</span>(<span class="number">1</span>);  <span class="comment">// ok</span></span><br><span class="line">    d.Base::<span class="built_in">print</span>(); <span class="comment">// ok</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="虚表存在性的验证"><a href="#虚表存在性的验证" class="headerlink" title="虚表存在性的验证"></a>虚表存在性的验证</h2><p>参见 66-7.png</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">long</span> base = <span class="number">0</span>):_base(base) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(long = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void Base::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void Base::g()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void Base::h()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">long</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>:<span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">long</span> base = <span class="number">0</span>, <span class="type">long</span> derived = <span class="number">0</span>)</span><br><span class="line">    :<span class="built_in">Base</span>(base), _derived(derived) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived(long = 0, long = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void Derived::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void Derived::g()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">h</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void Derived::h()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">long</span> _derived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Derived <span class="title">myDerived</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;对象 myDerived 的地址：%p\n&quot;</span>, &amp;myDerived);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;对象 myDerived 的地址：%p\n&quot;</span>, (<span class="type">long</span>*)&amp;myDerived);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;虚表的地址：%p\n&quot;</span>,(<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第一个虚函数的入口地址：%p\n&quot;</span>,(<span class="type">long</span>*)*(<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*pFunc)</span> <span class="params">(<span class="type">void</span>)</span></span>; <span class="comment">// 函数指针</span></span><br><span class="line">    pFunc pf = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    pf = (pFunc)*((<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived);</span><br><span class="line">    <span class="built_in">pf</span>(); <span class="comment">// 调用</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第一个虚函数的入口地址：%p\n&quot;</span>,pf);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    pf = (pFunc)*((<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">pf</span>(); <span class="comment">// 调用</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第二个虚函数的入口地址：%p\n&quot;</span>,pf);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    pf = (pFunc)*((<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived + <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">pf</span>(); <span class="comment">// 调用</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第三个虚函数的入口地址：%p\n&quot;</span>,pf);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">Derived <span class="title">myDerived2</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;对象 myDerived2 的地址：%p\n&quot;</span>, &amp;myDerived2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;对象 myDerived2 的地址：%p\n&quot;</span>, (<span class="type">long</span>*)&amp;myDerived2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;虚表的地址：%p\n&quot;</span>,(<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第一个虚函数的入口地址：%p\n&quot;</span>,(<span class="type">long</span>*)*(<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Base(long = 0)</span></span><br><span class="line"><span class="comment">Derived(long = 0, long = 0)</span></span><br><span class="line"><span class="comment">对象 myDerived 的地址：0x7ffe729314c0</span></span><br><span class="line"><span class="comment">对象 myDerived 的地址：0x7ffe729314c0</span></span><br><span class="line"><span class="comment">虚表的地址：0x55da8aeb5d00</span></span><br><span class="line"><span class="comment">第一个虚函数的入口地址：0x55da8aeb3778</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void Derived::f()</span></span><br><span class="line"><span class="comment">第一个虚函数的入口地址：0x55da8aeb3778</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void Derived::g()</span></span><br><span class="line"><span class="comment">第二个虚函数的入口地址：0x55da8aeb37b6</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void Derived::h()</span></span><br><span class="line"><span class="comment">第三个虚函数的入口地址：0x55da8aeb37f4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Base(long = 0)</span></span><br><span class="line"><span class="comment">Derived(long = 0, long = 0)</span></span><br><span class="line"><span class="comment">对象 myDerived2 的地址：0x7ffe729314e0</span></span><br><span class="line"><span class="comment">对象 myDerived2 的地址：0x7ffe729314e0</span></span><br><span class="line"><span class="comment">虚表的地址：0x55da8aeb5d00</span></span><br><span class="line"><span class="comment">第一个虚函数的入口地址：0x55da8aeb3778</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面代码可以看出，对于普通单继承，虚表只有一张，位于只读段。</p><h2 id="作业-词频统计"><a href="#作业-词频统计" class="headerlink" title="作业-词频统计"></a>作业-词频统计</h2><p>之前的作业，再用 map 实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::cerr;</span><br><span class="line"><span class="keyword">using</span> std::ifstream;</span><br><span class="line"><span class="keyword">using</span> std::ofstream;</span><br><span class="line"><span class="keyword">using</span> std::istringstream;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dictionary</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Dictionary</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">readFile</span><span class="params">(<span class="type">const</span> string&amp; ifileName)</span> </span>&#123;</span><br><span class="line">        <span class="function">ifstream <span class="title">ifs</span><span class="params">(ifileName)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(!ifs.<span class="built_in">good</span>()) &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;file &quot;</span> &lt;&lt; ifileName &lt;&lt; <span class="string">&quot;open failed.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        string line;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(ifs, line)) &#123;</span><br><span class="line">            string word;</span><br><span class="line">            <span class="function">istringstream <span class="title">iss</span><span class="params">(line)</span></span>;</span><br><span class="line">            <span class="keyword">while</span>(iss &gt;&gt; word) &#123;</span><br><span class="line">                string new_word = <span class="built_in">process_word</span>(word);</span><br><span class="line">                <span class="built_in">updmap</span>(new_word);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ifs.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">store</span><span class="params">(<span class="type">const</span> string&amp; ofileName)</span> </span>&#123;</span><br><span class="line">        <span class="function">ofstream <span class="title">ofs</span><span class="params">(ofileName)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(!ofs.<span class="built_in">good</span>()) &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;file &quot;</span> &lt;&lt; ofileName &lt;&lt; <span class="string">&quot;open failed.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = word_cnt.<span class="built_in">cbegin</span>();</span><br><span class="line">        <span class="keyword">for</span>(; it != word_cnt.<span class="built_in">cend</span>(); it++) &#123;</span><br><span class="line">            ofs &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        ofs.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    map&lt;string,<span class="type">unsigned</span> <span class="type">long</span>&gt; word_cnt;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">process_word</span><span class="params">(<span class="type">const</span> string&amp; word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; word.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">isalpha</span>(word[i])) <span class="keyword">return</span> <span class="built_in">string</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> word;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">updmap</span><span class="params">(<span class="type">const</span> string&amp; tobeInsert)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tobeInsert == <span class="built_in">string</span>()) <span class="keyword">return</span>;</span><br><span class="line">        word_cnt[tobeInsert] ++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Dictionary myDic;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;before reading...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">time_t</span> beg = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">    myDic.<span class="built_in">readFile</span>(<span class="string">&quot;The_Holy_Bible.txt&quot;</span>);</span><br><span class="line">    <span class="type">time_t</span> end  = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;time : &quot;</span> &lt;&lt; (end - beg) &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;after reading...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    myDic.<span class="built_in">store</span>(<span class="string">&quot;dictMap.dat&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="作业-文本查询"><a href="#作业-文本查询" class="headerlink" title="作业-文本查询"></a>作业-文本查询</h2><p>该程序将读取用户指定的任意文本文件【当前目录下的china_daily.txt】，然后允许用户从该文件中查找单词。查询的结果是该单词出现的次数，并列出每次出现所在的行。如果某单词在同一行中多次出现，程序将只显示该行一次。行号按升序显示。</p><p>要求：<br>a、它必须允许用户指明要处理的文件名字。<br>b、程序将存储该文件的内容，以便输出每个单词所在的原始行。<br>c、它必须将每一行分解为各个单词，并记录每个单词所在的所有行。在输出行号时，应保证以升序输出，并且不重复。<br>d、对特定单词的查询将返回出现该单词的所有行的行号。<br>e、输出某单词所在的行文本时，程序必须能根据给定的行号从输入文件中获取相应的行。</p><p>文本内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">1.Shenzhen-HK stock link &#x27;likely in second quarter&#x27;: UBS</span><br><span class="line"></span><br><span class="line">The Chinese mainland will likely announce the launch of the much-anticipated </span><br><span class="line">stock trading link between the Shenzhen and Hong Kong exchanges in the second </span><br><span class="line">quarter of the year, further opening the mainland&#x27;s stock market to overseas </span><br><span class="line">investors, a senior analyst at UBS Securities said on Wednesday.</span><br><span class="line"></span><br><span class="line">If the link is launched this year, it would mean that about 70 percent of market </span><br><span class="line">capitalization of the A shares will be available to overseas investors who already </span><br><span class="line">gained access to the mainland market through the existing Shanghai-Hong Kong </span><br><span class="line">Stock Connect, said Gao Ting, chief China equities strategist at UBS Securities.</span><br><span class="line"></span><br><span class="line">The link will broaden investors&#x27; stock selection in the mainland as the Shenzhen </span><br><span class="line">market, unlike Shanghai, is home to many high-tech, innovative companies and </span><br><span class="line">private firms with high growth potential, Gao said.</span><br><span class="line"></span><br><span class="line">&quot;The trading link will increase the investment opportunities for overseas investors </span><br><span class="line">in sectors including healthcare, consumption, material and information technology,&quot; </span><br><span class="line">he said at a news conference in Beijing.</span><br><span class="line"></span><br><span class="line">Premier Li Keqiang said in March that the central government will seek to launch the </span><br><span class="line">Shenzhen-Hong Kong Stock Connect this year.</span><br><span class="line"></span><br><span class="line">Bloomberg reported earlier citing people familiar with the matter that the launch </span><br><span class="line">of the trading link may be announced before July. It quoted a spokesman for the </span><br><span class="line">Hong Kong Exchanges &amp; Clearing Ltd as saying that a preparatory period of three to </span><br><span class="line">four months will be needed following the announcement of regulatory approval.</span><br><span class="line"></span><br><span class="line">While overseas investors can already invest in the mainland&#x27;s stock market under the </span><br><span class="line">Qualified Foreign Institutional Investors program, the launch of the Shenzhen-Hong </span><br><span class="line">Kong Stock Connect still holds symbolic significance as it will signal a further</span><br><span class="line"> opening of the capital market, analysts said.</span><br><span class="line"></span><br><span class="line">Zhao Wenli, an analyst at China Merchants Securities (HK) Co Ltd, said in a </span><br><span class="line">research note that good quality and reasonably priced small and mid-cap stocks </span><br><span class="line">under the trading link will attract greater attention from foreign investors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.Going abroad? Don&#x27;t forget your instant noodles</span><br><span class="line"></span><br><span class="line">Chinese travelers like to take instant noodles with them while travelling abroad, </span><br><span class="line">according to a report by Hong Kong Economic Times.</span><br><span class="line">And the favorite items travelers like to bring with them in their luggage differed </span><br><span class="line">greatly depending on their nationalities, according to a survey conducted by travel </span><br><span class="line">website Lowcost Holidays, which sampled 7,500 travelers from 29 countries and regions.</span><br><span class="line"></span><br><span class="line">Most of the items were edible, partially because travelers want a taste of home </span><br><span class="line">wherever they go, such as kimchi for 55 percent of South Koreans, cheese for 53 </span><br><span class="line">percent of French, coffee for 64 percent of Italians, tea bags for 48 percent of </span><br><span class="line">British, and miso soup (a very popular soup) for 56 percent of Japanese.</span><br><span class="line"></span><br><span class="line">Others choices were somewhat surprising. Sixty-six percent of Belgians brought bath </span><br><span class="line">towels for scrubbing their body, 32 percent of Americans brought toilet paper, </span><br><span class="line">37 percent of Russians packed cards, and 30 percent of Swiss, their Swiss knives.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.Popular eatery&#x27;s duck tastes flight online</span><br><span class="line"></span><br><span class="line">Quanjude, China&#x27;s iconic restaurant chain for original Peking roast duck with a </span><br><span class="line">history since 1864, has embraced the nation&#x27;s &quot;Internet Plus&quot; strategy, with a new </span><br><span class="line">online platform that features duck rolls and about 30 other dishes.</span><br><span class="line">&quot;Internet Plus&quot; has sparked integration of the Internet with traditional industries, </span><br><span class="line">and the food and beverage business has been no exception. In the catering and </span><br><span class="line">dining industry, the past year has witnessed a speedy market increase in online </span><br><span class="line">ordering, delivery and payment.</span><br><span class="line"></span><br><span class="line">&quot;Chinese people say life is all about clothing, eating, housing and traffic. </span><br><span class="line">The Internet has changed all the other three industries before it started to change </span><br><span class="line">dining and catering industry very recently, and Quanjude has been adapting into the new environment to make most out of it,&quot; says Xu Jia, chief accounting officer </span><br><span class="line">with Quanjude and chairman of a new joint-venture company that is pursuing the online takeout and e-commerce market.</span><br><span class="line"></span><br><span class="line">Recently, the State-owned restaurant chain announced in Beijing that it established </span><br><span class="line">the company, Yage Technology Inc, in October 2015 with Chongqing Kuangcao Technology </span><br><span class="line">Inc, an online-service company based in Chongqing.</span><br><span class="line"></span><br><span class="line">&quot;We believe with our time-honored brand image, experienced artisan cooking skills, </span><br><span class="line">detail-oriented service and superb supply chain, we will succeed in this new sector,</span><br><span class="line">&quot; Xu says, &quot;because even in the era of the Internet, what matters most in the </span><br><span class="line">industry is still the food and service.&quot;</span><br><span class="line"></span><br><span class="line">After more than a year&#x27;s research and development, the new company has developed patented </span><br><span class="line">techniques to make high-quality Peking roast duck rolls available for takeout diners, </span><br><span class="line">testing the product in a six-month pilot project in Chongqing.</span><br><span class="line"></span><br><span class="line">Under the brand name Xiaoyage, literally &quot;little duck brother&quot;, the online-ordered </span><br><span class="line">duck rolls are made in Quanjude restaurants, with the same recipe and ingredients </span><br><span class="line">as rolls served in Quanjude restaurants.</span><br><span class="line"></span><br><span class="line">At home or work, diners can reheat the duck rolls to 65 C in six minutes, using </span><br><span class="line">a special bag that generates steam when water is poured on it.</span><br><span class="line"></span><br><span class="line">The takeout duck rolls taste almost the same as those served in a Quanjude restaurant, </span><br><span class="line">according to Yang Aixiang, general manager with Yage Technology.</span><br><span class="line"></span><br><span class="line">The package costs 200 yuan ($31) each, and apart from the duck dish, there are </span><br><span class="line">also more than 30 signature dishes of Quanjude available through online ordering </span><br><span class="line">channels, such as mustard duck feet and spicy sliced duck wings. All can be ordered </span><br><span class="line">through the official WeChat account (xiaoyage222) and the Baidu Takeaway platform.</span><br><span class="line"></span><br><span class="line">Authorities in several municipalities have posed new regulations on speed and route </span><br><span class="line">limits for delivery vehicles, including Beijing, the first and most important market for Quanjude Takeout and e-commerce.</span><br><span class="line"></span><br><span class="line">Yang Xun, a publicist with Baidu Takeout, which handles delivery service of </span><br><span class="line">Quanjude&#x27;s takeout delicacies, says all their deliverymen will obey laws and </span><br><span class="line">regulations to ensure best service for diners, including adjusting routes to </span><br><span class="line">avoid barred roads for delivery vehicles.</span><br></pre></td></tr></table></figure><p>我的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::ifstream;</span><br><span class="line"><span class="keyword">using</span> std::ofstream;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::stringstream;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::map;</span><br><span class="line"><span class="keyword">using</span> std::set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextQuery</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TextQuery</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">readFile</span><span class="params">(<span class="type">const</span> string&amp; filename)</span> </span>&#123;</span><br><span class="line">        <span class="function">ifstream <span class="title">ifs</span><span class="params">(filename)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(!ifs.<span class="built_in">good</span>()) &#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;file &quot;</span> &lt;&lt; filename &lt;&lt; <span class="string">&quot;open filed.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        string line;</span><br><span class="line">        <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(ifs, line)) &#123;</span><br><span class="line">            idx++;</span><br><span class="line">            _lines.<span class="built_in">push_back</span>(line);</span><br><span class="line">            <span class="function">stringstream <span class="title">ssm</span><span class="params">(line)</span></span>;</span><br><span class="line">            string word;</span><br><span class="line">            <span class="keyword">while</span>(ssm &gt;&gt; word) &#123;</span><br><span class="line">                _word2Numbers[word].<span class="built_in">insert</span>(idx);</span><br><span class="line">                _dict[word]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ifs.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">const</span> string&amp; word)</span> </span>&#123;</span><br><span class="line">        <span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;output.dat&quot;</span>)</span></span>;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;the word &#x27;&quot;</span> &lt;&lt; word &lt;&lt; <span class="string">&quot;&#x27; occurs &quot;</span> &lt;&lt; _dict[word] &lt;&lt; <span class="string">&quot; times.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">auto</span> it = _word2Numbers[word].<span class="built_in">cbegin</span>();</span><br><span class="line">        <span class="keyword">for</span>(; it != _word2Numbers[word].<span class="built_in">cend</span>(); it++) &#123;</span><br><span class="line">            ofs &lt;&lt; <span class="string">&quot;(line &quot;</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;) &quot;</span> &lt;&lt; _lines[(*it)<span class="number">-1</span>] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        ofs.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;string&gt; _lines; </span><br><span class="line">    map&lt;string, set&lt;<span class="type">int</span>&gt; &gt; _word2Numbers;</span><br><span class="line">    map&lt;string, <span class="type">int</span>&gt; _dict;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">   TextQuery tq;</span><br><span class="line">   tq.<span class="built_in">readFile</span>(<span class="string">&quot;china_daily.txt&quot;</span>);</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;input the word you want to query: &quot;</span>;</span><br><span class="line">   string queryWord;</span><br><span class="line">   std::cin &gt;&gt; queryWord;</span><br><span class="line">   tq.<span class="built_in">query</span>(queryWord);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">the word &#x27;for&#x27; occurs 14 times.</span><br><span class="line">(line 17) &quot;The trading link will increase the investment opportunities for overseas investors </span><br><span class="line">(line 25) of the trading link may be announced before July. It quoted a spokesman for the </span><br><span class="line">(line 49) wherever they go, such as kimchi for 55 percent of South Koreans, cheese for 53 </span><br><span class="line">(line 50) percent of French, coffee for 64 percent of Italians, tea bags for 48 percent of </span><br><span class="line">(line 51) British, and miso soup (a very popular soup) for 56 percent of Japanese.</span><br><span class="line">(line 54) towels for scrubbing their body, 32 percent of Americans brought toilet paper, </span><br><span class="line">(line 60) Quanjude, China&#x27;s iconic restaurant chain for original Peking roast duck with a </span><br><span class="line">(line 83) techniques to make high-quality Peking roast duck rolls available for takeout diners, </span><br><span class="line">(line 102) limits for delivery vehicles, including Beijing, the first and most important market for Quanjude Takeout and e-commerce.</span><br><span class="line">(line 106) regulations to ensure best service for diners, including adjusting routes to </span><br><span class="line">(line 107) avoid barred roads for delivery vehicles.</span><br></pre></td></tr></table></figure><p>可以用自带的记事本等软件，查找单词，验证结果的正确性。</p><p>注意，这里按照要求，必须是整个单词匹配，而不需要返回仅含有子串的单词。</p><h2 id="多基派生的二义性"><a href="#多基派生的二义性" class="headerlink" title="多基派生的二义性"></a>多基派生的二义性</h2><p>来看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;virtual void A::a()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;virtual void A::b()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;virtual void A::c()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;virtual void B::a()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;virtual void B::b()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void B::c()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">d</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void B::d()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="keyword">public</span> A, <span class="keyword">public</span> B &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;virtual void C::a()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void C::c()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">d</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void C::d()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(A) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(A) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(B) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(B) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(C) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(C) &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    C c;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    A* pa = &amp;c;</span><br><span class="line">    pa-&gt;<span class="built_in">a</span>();</span><br><span class="line">    pa-&gt;<span class="built_in">b</span>();</span><br><span class="line">    pa-&gt;<span class="built_in">c</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    B* pb = &amp;c;</span><br><span class="line">    pb-&gt;<span class="built_in">a</span>();   <span class="comment">// C::a()</span></span><br><span class="line">    pb-&gt;<span class="built_in">b</span>();   <span class="comment">// B::b()</span></span><br><span class="line">    pb-&gt;<span class="built_in">c</span>();   <span class="comment">// B::c()</span></span><br><span class="line">    pb-&gt;<span class="built_in">d</span>();   <span class="comment">// B::d()</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    C* pc = &amp;c;</span><br><span class="line">    pc-&gt;<span class="built_in">a</span>();</span><br><span class="line">    <span class="comment">// pc-&gt;b();   二义性</span></span><br><span class="line">    pc-&gt;A::<span class="built_in">b</span>();</span><br><span class="line">    pc-&gt;B::<span class="built_in">b</span>();</span><br><span class="line">    pc-&gt;<span class="built_in">c</span>();</span><br><span class="line">    pc-&gt;<span class="built_in">d</span>();  <span class="comment">// 隐藏</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(A) = 8</span></span><br><span class="line"><span class="comment">sizeof(B) = 8</span></span><br><span class="line"><span class="comment">sizeof(C) = 16</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">virtual void C::a()</span></span><br><span class="line"><span class="comment">virtual void A::b()</span></span><br><span class="line"><span class="comment">void C::c()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">virtual void C::a()</span></span><br><span class="line"><span class="comment">virtual void B::b()</span></span><br><span class="line"><span class="comment">void B::c()</span></span><br><span class="line"><span class="comment">void B::d()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">virtual void C::a()</span></span><br><span class="line"><span class="comment">virtual void A::b()</span></span><br><span class="line"><span class="comment">virtual void B::b()</span></span><br><span class="line"><span class="comment">void C::c()</span></span><br><span class="line"><span class="comment">void C::d()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>原理：</p><p><img src="https://s2.loli.net/2024/04/12/ptZ3KCfBejHkiMh.png" alt="66-8.png"></p><h2 id="多态之内存布局"><a href="#多态之内存布局" class="headerlink" title="多态之内存布局"></a>多态之内存布局</h2><iframe  id="ppt"  width="100%"  onload="autoChange()"  src="https://onedrive.live.com/embed?resid=C7419D744EAAFF4C%214407&authkey=!AFPzvDNiv6rVlMY&em=2"  frameborder="0"></iframe><script>  function autoChange() {    let ifm = document.getElementById("ppt");    ifm.height = (ifm.clientWidth / 16) * 9 + 24;  }  window.onresize = autoChange;</script><p>注，参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base1</span>()</span><br><span class="line">        : _iBase1(<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base1::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base1::g()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">h</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base1::h()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _iBase1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base2</span>()</span><br><span class="line">        : _iBase2(<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base2::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base2::g()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">h</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base2::h()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _iBase2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base3</span>()</span><br><span class="line">        : _iBase3(<span class="number">1000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base3::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base3::g()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">h</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base3::h()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _iBase3;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span></span><br><span class="line">    : <span class="keyword">virtual</span> <span class="keyword">public</span> Base1,</span><br><span class="line">      <span class="keyword">public</span> Base2,</span><br><span class="line">      <span class="keyword">public</span> Base3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>()</span><br><span class="line">        : _iDerived(<span class="number">10000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::g1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _iDerived;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 23d1</span></span><br></pre></td></tr></table></figure><p>注2，参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>(): _ib(<span class="number">10</span>), _cb(<span class="string">&#x27;B&#x27;</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Bf</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B::Bf()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _ib;</span><br><span class="line">    <span class="type">char</span> _cb;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B1</span></span><br><span class="line">    : <span class="comment">/*virtual*/</span> <span class="keyword">public</span> B</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B1</span>(): _ib1(<span class="number">100</span>), _cb1(<span class="string">&#x27;1&#x27;</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B1::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B1::f1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Bf1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B1::Bf1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _ib1;</span><br><span class="line">    <span class="type">char</span> _cb1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B2</span></span><br><span class="line">    : <span class="comment">/*virtual*/</span> <span class="keyword">public</span> B</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B2</span>(): _ib2(<span class="number">1000</span>), _cb2(<span class="string">&#x27;2&#x27;</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B2::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span></span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">f2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B2::f2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span></span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">Bf2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B2::Bf2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _ib2;</span><br><span class="line">    <span class="type">char</span> _cb2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span></span><br><span class="line">    : <span class="keyword">public</span> B1,</span><br><span class="line">      <span class="keyword">public</span> B2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">    <span class="built_in">D</span>(): _id(<span class="number">10000</span>), _cd(<span class="string">&#x27;3&#x27;</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;D::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;D::f1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;D::f2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Df</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;D::Df()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _id;</span><br><span class="line">    <span class="type">char</span> _cd;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>在 C++ 中，如果继承链上存在虚继承的基类，则最底层的子类要负责完成该虚基类部分成员的构造。</strong><br>即我们需要显式调用虚基类的构造函数来完成初始化，如果<strong>不显式调用</strong>，则编译器会调用虚基类的<strong>缺省构造函数</strong>，不管初始化列表中次序如何，对虚基类构造函数的调用总是先于普通基类的构造函数。如果虚基类中<strong>没有定义</strong>的缺省构造函数，则会<strong>编译错误</strong>。<strong>因为如果不这样做，虚基类部分会在存在的多个继承链上被多次初始化。</strong>很多时候，对于继承链上的中间类，我们也会在其构造函数中显式调用虚基类的构造函数，因为一旦有人要创建这些中间类的对象，我们要保证它们能够得到正确的初始化。</p><p>对于虚继承的派生类对象的析构，析构函数的调用顺序为：</p><ul><li>先调用派生类的析构函数</li><li>然后调用派生类中成员对象的析构函数</li><li>再调用普通基类的析构函数</li><li><strong>最后调用虚基类的析构函数</strong></li></ul><p>效率分析：</p><p><img src="https://s2.loli.net/2024/04/13/BIVsDT7mptaHUyF.png" alt="66-9.png"></p><h2 id="作业-解析RSS文件"><a href="#作业-解析RSS文件" class="headerlink" title="作业-解析RSS文件"></a>作业-解析RSS文件</h2><p>使用 tinyXml2 解析 RSS 文件，并生成一个网页库<code>pagelib.dat</code>。</p><pre><code>tinyXml2 -- https://github.com/leethomason/tinyxml2rss      -- https://coolshell.cn/feed         -- http://www.runoob.com/rss/rss-tutorial.html</code></pre><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>使用正则表达式进行过滤。</p><p>rss 文件其实就是一个树形结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rss</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">channel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">link</span>&gt;</span>   <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">description</span>&gt;</span>   <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">content</span>&gt;</span>   <span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">link</span>&gt;</span>   <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">description</span>&gt;</span>   <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">content</span>&gt;</span>   <span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">channel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rss</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参考接口:   </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">RssItem</span></span><br><span class="line">&#123;</span><br><span class="line">    string title;</span><br><span class="line">    string link;</span><br><span class="line">    string description;</span><br><span class="line">    string content;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RssReader</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RssReader</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">parseRss</span><span class="params">()</span></span>;<span class="comment">//解析</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dump</span><span class="params">(<span class="type">const</span> string &amp; filename)</span></span>;<span class="comment">//输出</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;RssItem&gt; _rss;</span><br><span class="line"> &#125;;   </span><br></pre></td></tr></table></figure><p>要求：最后生成一个<code>pagelib.txt</code>, 其格式：</p><pre><code>&lt;doc&gt;    &lt;docid&gt;1&lt;/docid&gt;    &lt;title&gt;...&lt;/title&gt;    &lt;link&gt;...&lt;/link&gt;    &lt;description&gt;...&lt;/description&gt;    &lt;content&gt;...&lt;/content&gt;&lt;/doc&gt;&lt;doc&gt;    &lt;docid&gt;2&lt;/docid&gt;    &lt;title&gt;...&lt;/title&gt;    &lt;link&gt;...&lt;/link&gt;    &lt;description&gt;...&lt;/description&gt;    &lt;content&gt;...&lt;/content&gt;&lt;/doc&gt;&lt;doc&gt;  ...&lt;/doc&gt;</code></pre><p>RSS文件解析作业思路：<br>xml —&gt; rss —&gt; tinyxml2(使用该库对rss文件进行解析) —&gt; boost::regex/std::regex (使用正则表达式去除html标签)</p><p>提示：<br>首先去读 coolshell.xml 文件，因为是一个 rss 文件，而我们需要找到 rss 的 channel 节点下面的 item 节点的 title 节点、link 节点中间的文本，至于这些文本可以使用 tinyxml2 这个第三方库进行解析，所以这里需要看看 timyxml2 如何解析第三方库（可以看看 timyxml2 的源码），解析完成一个 item 后，可以将其存到 vector 中（也可以将这些原始信息经过后面正则表达式去除标签后再存起来），然后再去读第二个 item（其实就是一个循环操作），其实第二个 item 是第一个 item 的兄弟节点（可以使用 tinyxml2 里面的函数进行跳转到第二个 item），这样就可以解析 coolshell.xml 文档了。<br>接着，因为 description 信息中包含 html 的标签，所以需要去除这样的 html 标签，如<code>&lt;p&gt;&lt;/p&gt;</code>,这个可以使用正则表达式，也就是 std::regex 进行去除，这个可以在 cppreference 中进行查找使用方法。<br>最后就是遍历 vector，讲读取到的信息存到另外一个文件，格式需要自己定义，使用我们自定义的<code>&lt;doc&gt; &lt;/doc&gt;</code>格式。</p><h3 id="一些方法论"><a href="#一些方法论" class="headerlink" title="一些方法论"></a>一些方法论</h3><p>如何研究一个陌生的第三方代码</p><ol><li>若只要求达到使用标准，善用搜索。</li><li>找源代码。</li><li>查找头文件、实现文件、测试文件。<br><img src="https://bu.dusays.com/2024/04/13/661a89bd63c81.png" alt="66-10.png" title="示例"></li><li>在测试文件中找 main 函数。</li></ol><p>youtube 备份视频：<a href="https://www.youtube.com/watch?v=TJ3WPS3Yflw">初步写码的一些方法论</a></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>github 地址：<a href="https://github.com/leethomason/tinyxml2">https://github.com/leethomason/tinyxml2</a></p><p>官方文档：<a href="https://leethomason.github.io/tinyxml2/">https://leethomason.github.io/tinyxml2/</a></p><p>首先看下我写的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tinyxml2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;regex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::cerr;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::ofstream;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> tinyxml2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RssItem</span></span><br><span class="line">&#123;</span><br><span class="line">    string title;</span><br><span class="line">    string link;</span><br><span class="line">    string description;</span><br><span class="line">    string content;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RssReader</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RssReader</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Let_Me_See_See</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* _dir)</span> </span>&#123;</span><br><span class="line">        XMLDocument doc;</span><br><span class="line">        doc.<span class="built_in">LoadFile</span>(_dir);</span><br><span class="line">        <span class="keyword">if</span>(doc.<span class="built_in">ErrorID</span>()) &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;load file failed.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        XMLElement* myItemElem = doc.<span class="built_in">FirstChildElement</span>(<span class="string">&quot;rss&quot;</span>)</span><br><span class="line">                                  -&gt; <span class="built_in">FirstChildElement</span>(<span class="string">&quot;channel&quot;</span>)</span><br><span class="line">                                  -&gt; <span class="built_in">FirstChildElement</span>(<span class="string">&quot;item&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(myItemElem == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;this xml file is invalid.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">processItem</span>(myItemElem);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(myItemElem-&gt;<span class="built_in">NextSiblingElement</span>(<span class="string">&quot;item&quot;</span>)) &#123;</span><br><span class="line">            myItemElem = myItemElem -&gt; <span class="built_in">NextSiblingElement</span>(<span class="string">&quot;item&quot;</span>);</span><br><span class="line">            <span class="built_in">processItem</span>(myItemElem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dump</span><span class="params">(<span class="type">const</span> string&amp; fileName)</span> </span>&#123;</span><br><span class="line">        <span class="function">ofstream <span class="title">ofs</span><span class="params">(fileName)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(!ofs) &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;file &quot;</span> &lt;&lt; fileName &lt;&lt; <span class="string">&quot;open failed.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = _rss.<span class="built_in">cbegin</span>();</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; it != _rss.<span class="built_in">cend</span>(); it++) &#123;</span><br><span class="line">            cnt ++;</span><br><span class="line">            ofs &lt;&lt; <span class="string">&quot;&lt;doc&gt;&quot;</span> &lt;&lt; endl</span><br><span class="line">                &lt;&lt; <span class="string">&quot;    &lt;docid&gt;&quot;</span> &lt;&lt; cnt &lt;&lt; <span class="string">&quot;&lt;/docid&gt;&quot;</span> &lt;&lt; endl</span><br><span class="line">                &lt;&lt; <span class="string">&quot;    &lt;title&gt;&quot;</span> &lt;&lt; it-&gt;title &lt;&lt; <span class="string">&quot;&lt;/title&gt;&quot;</span> &lt;&lt; endl</span><br><span class="line">                &lt;&lt; <span class="string">&quot;    &lt;link&gt;&quot;</span> &lt;&lt; it-&gt;link &lt;&lt; <span class="string">&quot;&lt;/link&gt;&quot;</span> &lt;&lt; endl</span><br><span class="line">                &lt;&lt; <span class="string">&quot;    &lt;description&gt;&quot;</span> &lt;&lt; it-&gt;description &lt;&lt; <span class="string">&quot;&lt;/description&gt;&quot;</span> &lt;&lt; endl</span><br><span class="line">                &lt;&lt; <span class="string">&quot;    &lt;content&gt;&quot;</span> &lt;&lt; it-&gt;content &lt;&lt; <span class="string">&quot;&lt;/content&gt;&quot;</span> &lt;&lt; endl</span><br><span class="line">                &lt;&lt; <span class="string">&quot;&lt;/doc&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        ofs.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">processItem</span><span class="params">(XMLElement* p)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// get title</span></span><br><span class="line">        XMLText* myTitleNode = p -&gt; <span class="built_in">FirstChildElement</span>(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">                                 -&gt; <span class="built_in">FirstChild</span>() -&gt; <span class="built_in">ToText</span>();</span><br><span class="line">        string mytitle = myTitleNode -&gt; <span class="built_in">Value</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get link</span></span><br><span class="line">        XMLText* myLinkNode = p -&gt; <span class="built_in">FirstChildElement</span>(<span class="string">&quot;link&quot;</span>)</span><br><span class="line">                                 -&gt; <span class="built_in">FirstChild</span>() -&gt; <span class="built_in">ToText</span>();</span><br><span class="line">        string mylink = myLinkNode -&gt; <span class="built_in">Value</span>();</span><br><span class="line"></span><br><span class="line">        XMLText* myDescriptionNode = p -&gt; <span class="built_in">FirstChildElement</span>(<span class="string">&quot;description&quot;</span>)</span><br><span class="line">                                 -&gt; <span class="built_in">FirstChild</span>() -&gt; <span class="built_in">ToText</span>();</span><br><span class="line">        string mydescription = myDescriptionNode -&gt; <span class="built_in">Value</span>();</span><br><span class="line">        <span class="function">std::regex <span class="title">reg</span><span class="params">(<span class="string">&quot;&lt;[^&gt;]+&gt;&quot;</span>)</span></span>;</span><br><span class="line">        mydescription = <span class="built_in">regex_replace</span>(mydescription, reg, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get content</span></span><br><span class="line">        XMLText* myContNode = p -&gt; <span class="built_in">FirstChildElement</span>(<span class="string">&quot;content:encoded&quot;</span>)</span><br><span class="line">                                 -&gt; <span class="built_in">FirstChild</span>() -&gt; <span class="built_in">ToText</span>();</span><br><span class="line">        string mycontent = myContNode -&gt; <span class="built_in">Value</span>();</span><br><span class="line">        mycontent = <span class="built_in">regex_replace</span>(mycontent, reg, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        RssItem tmp = (RssItem)&#123;mytitle, mylink, mydescription, mycontent&#125;;</span><br><span class="line">        _rss.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;RssItem&gt; _rss;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RssReader akashi;</span><br><span class="line">    akashi.<span class="built_in">Let_Me_See_See</span>(<span class="string">&quot;./feed.xml&quot;</span>);</span><br><span class="line">    akashi.<span class="built_in">dump</span>(<span class="string">&quot;pagelib.dat&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出文件截图如下：</p><p><img src="https://bu.dusays.com/2024/04/15/661d03875da09.png" alt="66-11.png"></p><p>从效果上看，这份代码就是把文字部分扒了下来。</p><h2 id="作业-抽象类"><a href="#作业-抽象类" class="headerlink" title="作业-抽象类"></a>作业-抽象类</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>1、编写一个抽象类 Figure，该类拥有：<br>① 1个成员变量，存放图形的名字（是否该设计成private/protected?）<br>② 2个纯虚函数    </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getArea</span><span class="params">( )</span></span>=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> string <span class="title">getName</span><span class="params">( )</span></span>=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>=<span class="number">0</span>            <span class="comment">//打印图形的相关信息</span></span><br></pre></td></tr></table></figure><p>2、编写一个圆类 Circle，让其继承自 Figure 类，该类拥有： </p><p>① 1个成员变量，存放圆的半径；（是否该设计成private/protected?）<br>② 2个构造方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Circle</span>( )              <span class="comment">// 将半径设为0           </span></span><br><span class="line"><span class="built_in">Circle</span>(<span class="type">double</span>  r)      <span class="comment">//创建Circle对象时将半径初始化为r      </span></span><br></pre></td></tr></table></figure><p>③ 3个成员方法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">getRadius</span><span class="params">( )</span>           <span class="comment">//获取圆的半径</span></span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getPerimeter</span><span class="params">( )</span>      <span class="comment">//获取圆的周长</span></span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getArea</span><span class="params">( )</span>   <span class="comment">//获取圆的面积</span></span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> string <span class="title">getName</span><span class="params">( )</span>   <span class="comment">//获取圆的名字           </span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">show</span><span class="params">( )</span>               <span class="comment">//将圆的半径、周长、面积输出到屏幕 </span></span></span><br></pre></td></tr></table></figure></p><p>3、编写一个圆柱体类 Cylinder，它继承于上面的 Circle 类，还拥有：<br>① 1个成员变量，圆柱体的高；<br>② 构造方法           </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Cylinder</span> (<span class="type">double</span> r, <span class="type">double</span>  h) <span class="comment">//创建Circle对象时将半径初始化为r         </span></span><br></pre></td></tr></table></figure><p>③ 成员方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">覆盖Circle的<span class="built_in">getArea</span>( )   <span class="comment">//获取圆柱体的表面积 </span></span><br><span class="line">覆盖Circle的<span class="built_in">getName</span>( )   <span class="comment">//获取图形的名字</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getHeight</span><span class="params">( )</span>      <span class="comment">//获取圆柱体的高</span></span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getVolume</span><span class="params">( )</span>      <span class="comment">//获取圆柱体的体积           </span></span></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">show</span><span class="params">()</span>               <span class="comment">//将圆柱体的高、表面积、体积输出到屏幕  </span></span></span><br></pre></td></tr></table></figure><p>4、编写测试用例，在实现的过程中，体会动态多态的用法。<br>① 创建类的对象，分别设置圆的半径、圆柱体的高<br>② 计算并分别显示圆半径、圆面积、圆周长，<br>③ 计算并分别显式圆柱体的高、表面积、体积。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>这个要求有点奇怪，不能完全满足，比如那个圆柱的 getName() 我就没有重写。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI acos(-1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Figure</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">getName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>: <span class="keyword">public</span> Figure &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="built_in">Circle</span>(): _radius(<span class="number">0</span>) &#123;</span><br><span class="line">        _name = <span class="string">&quot;Circle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="built_in">Circle</span>(<span class="type">double</span> r): _radius(r) &#123;</span><br><span class="line">        _name = <span class="string">&quot;Circle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PI*_radius*_radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getRadius</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getPerimeter</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*PI*_radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;radius = &quot;</span> &lt;&lt; _radius &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;perimeter = &quot;</span> &lt;&lt; <span class="built_in">getPerimeter</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;area = &quot;</span> &lt;&lt; <span class="built_in">getArea</span>() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span> _radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cylinder</span>: <span class="keyword">public</span> Circle &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Cylinder</span>(<span class="type">double</span> r, <span class="type">double</span> h)</span><br><span class="line">            :<span class="built_in">Circle</span>(r), _height(h) &#123;_name = <span class="string">&quot;Cylinder&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> sum1 = Circle::<span class="built_in">getArea</span>();</span><br><span class="line">        <span class="type">double</span> sum2 = Circle::<span class="built_in">getPerimeter</span>() * _height;</span><br><span class="line">        <span class="keyword">return</span> sum1*<span class="number">2</span> + sum2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getHeight</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getVolume</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Circle::<span class="built_in">getArea</span>() * _height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;height = &quot;</span> &lt;&lt; _height &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;area = &quot;</span> &lt;&lt; <span class="built_in">getArea</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;volume = &quot;</span> &lt;&lt; <span class="built_in">getVolume</span>() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span> _height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Circle <span class="title">o1</span><span class="params">(<span class="number">1.0</span>)</span></span>;</span><br><span class="line">    o1.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function">Circle <span class="title">o2</span><span class="params">(<span class="number">2.0</span>)</span></span>;</span><br><span class="line">    o2.<span class="built_in">show</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="function">Cylinder <span class="title">cy1</span><span class="params">(<span class="number">1.0</span>, <span class="number">1.0</span>)</span></span>;</span><br><span class="line">    cy1.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function">Cylinder <span class="title">cy2</span><span class="params">(<span class="number">2.0</span>, <span class="number">2.0</span>)</span></span>;</span><br><span class="line">    cy2.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">name = Circle</span></span><br><span class="line"><span class="comment">radius = 1</span></span><br><span class="line"><span class="comment">perimeter = 6.28319</span></span><br><span class="line"><span class="comment">area = 3.14159</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name = Circle</span></span><br><span class="line"><span class="comment">radius = 2</span></span><br><span class="line"><span class="comment">perimeter = 12.5664</span></span><br><span class="line"><span class="comment">area = 12.5664</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name = Cylinder</span></span><br><span class="line"><span class="comment">height = 1</span></span><br><span class="line"><span class="comment">area = 12.5664</span></span><br><span class="line"><span class="comment">volume = 3.14159</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name = Cylinder</span></span><br><span class="line"><span class="comment">height = 2</span></span><br><span class="line"><span class="comment">area = 50.2655</span></span><br><span class="line"><span class="comment">volume = 25.1327</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="移动语义"><a href="#移动语义" class="headerlink" title="移动语义"></a>移动语义</h2><p>引入。来看下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>()</span><br><span class="line">    : _pstr(<span class="literal">nullptr</span>)</span><br><span class="line">    <span class="comment">/* : _pstr(new char[1]()) */</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span> *pstr)</span><br><span class="line">    : _pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pstr) + <span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char *)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr, pstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String &amp;rhs)</span><br><span class="line">    : _pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(rhs._pstr) + <span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String &amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr, rhs._pstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String &amp;<span class="keyword">operator</span>=(<span class="type">const</span> String &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String &amp;operator=(const String &amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;rhs)<span class="comment">//1、自复制</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pstr;<span class="comment">//2、释放左操作数</span></span><br><span class="line">            _pstr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3、深拷贝</span></span><br><span class="line">            _pstr = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(rhs._pstr) + <span class="number">1</span>]();</span><br><span class="line">            <span class="built_in">strcpy</span>(_pstr, rhs._pstr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、返回*this</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pstr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pstr;</span><br><span class="line">            _pstr = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> String &amp;rhs);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> *_pstr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> String &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(rhs._pstr)</span><br><span class="line">    &#123;</span><br><span class="line">        os &lt;&lt;  rhs._pstr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">s1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    String s2 = s1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//   C++    C   C风格转换为C++风格</span></span><br><span class="line">    <span class="comment">//   过渡</span></span><br><span class="line">    String s3 = <span class="string">&quot;world&quot;</span>;<span class="comment">//String(&quot;world&quot;),临时对象/匿名对象,</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* &amp;&quot;world&quot;;//文字常量区,左值 */</span></span><br><span class="line">    <span class="comment">/* String(&quot;world&quot;);//右值 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String(const char *)</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String(const String &amp;)</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s2 = hello</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String(const char *)</span></span><br><span class="line"><span class="comment">s3 = world</span></span><br><span class="line"><span class="comment">~String()</span></span><br><span class="line"><span class="comment">~String()</span></span><br><span class="line"><span class="comment">~String()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>注意第 85 行，编译器并没有调用复制构造函数<code>String(const String&amp;)</code>来复制这个临时对象到 s3 中。相反，它直接将临时对象的内容移动到 s3 中，这是因为在这种情况下编译器会执行一种叫做”复制省略”（copy elision）的优化。这个优化允许编译器在一定条件下避免创建临时对象，直接将临时对象的内容移到目标对象中，这样可以提高效率。</p><p>【存疑】然而按照教学演示，可以使用编译选项避免这个优化。在这种情况下，第 85 行会调用两个构造函数：<code>String(const char*)</code>和<code>String(const String&amp;)</code>。即在没有编译器优化的情况下，隐式转换之后会调用拷贝构造函数。在我的环境中即使开了编译选项也不会如此，可能是新的 g++ 版本并不支持这样做。</p><p>如何区分一个变量是否是右值？</p><p>在 C++11 之前是不能识别右值的，C++11 之后新增语法可以识别右值。</p><p>右值引用可以识别、绑定到右值，但不能识别、绑定到左值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> &amp;&amp;rref = <span class="number">10</span>;   <span class="comment">//右值引用</span></span><br><span class="line"><span class="type">int</span> &amp;&amp;rref2 = a;   <span class="comment">//error, a 是左值</span></span><br></pre></td></tr></table></figure><p>由此，写出如下函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移动构造函数优先于拷贝构造函数执行的(优先级)</span></span><br><span class="line"><span class="comment">//移动构造函数</span></span><br><span class="line"><span class="comment">//String s3 = String(&quot;world&quot;);</span></span><br><span class="line"><span class="built_in">String</span>(String &amp;&amp;rhs)</span><br><span class="line">:_pstr(rhs._pstr)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;String(String &amp;&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    rhs._pstr = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解读：我们直接进行了一个浅拷贝。临时变量销毁时，为了防止此时实际意义上已经归 this 所有的空间被销毁，需要将 rhs._pstr 置空。</p><p>考虑如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s4 = <span class="built_in">String</span>(<span class="string">&quot;wuhan&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>类似地，我们可以写出如下函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移动赋值运算符函数优先于赋值运算符函数执行的(优先级)</span></span><br><span class="line"><span class="comment">//移动赋值运算符函数(移动赋值函数)</span></span><br><span class="line"><span class="comment">//s4 = String(&quot;wuhan&quot;)</span></span><br><span class="line">String&amp; <span class="keyword">operator</span>=(String&amp;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;String&amp; operator=(String &amp;&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> [] _pstr;  <span class="comment">//释放左操作数，防止内存泄露</span></span><br><span class="line">    _pstr = <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    _pstr = rhs._pstr; <span class="comment">//浅拷贝</span></span><br><span class="line">    rhs._pstr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">//返回*this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到上面代码中没有防止自复制的逻辑，这是否必要呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//左右操作数是两个不一样对象</span></span><br><span class="line"><span class="comment">/* String(&quot;wuhan&quot;) = String(&quot;wuhan&quot;); */</span></span><br></pre></td></tr></table></figure><p>目前来看，似乎没有必要。</p><p>但是考虑如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;000000&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//std::move可以将左值转换为右值</span></span><br><span class="line">s4 = std::<span class="built_in">move</span>(s4);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;11111&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://bu.dusays.com/2024/04/17/661f4f326d294.png" alt="66-12.png"></p><p>以上输出结果需要联系移动赋值运算符函数、输出函数来分析。</p><p>可见，移动赋值运算符函数仍然需要改进：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移动赋值运算符函数优先于赋值运算符函数执行的(优先级)</span></span><br><span class="line"><span class="comment">//移动赋值运算符函数(移动赋值函数)</span></span><br><span class="line"><span class="comment">//s4 = String(&quot;wuhan&quot;)</span></span><br><span class="line"><span class="comment">//s4 = std::move(s4)</span></span><br><span class="line"><span class="comment">//s4 = std::move(s5)</span></span><br><span class="line">String &amp;<span class="keyword">operator</span>=(String &amp;&amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;String &amp;operator=(String &amp;&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;rhs)<span class="comment">//1、自移动</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> [] _pstr;<span class="comment">//2、释放左操作数</span></span><br><span class="line">        _pstr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        _pstr = rhs._pstr;<span class="comment">//3、浅拷贝</span></span><br><span class="line">        rhs._pstr = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">//4、返回*this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进一步研究一下 std::move() 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//std::move可以将左值转换为右值,实质上没有做任何移动，只是</span></span><br><span class="line"><span class="comment">//在底层做了强制转换static_cast&lt;T &amp;&amp;&gt;(lvalue)</span></span><br><span class="line"><span class="comment">//如果以后不想使用某个左值，可以使用std::move将其转换为</span></span><br><span class="line"><span class="comment">//右值，以后就不再使用了</span></span><br><span class="line">s4 = std::<span class="built_in">move</span>(s4);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;11111&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">std::<span class="built_in">move</span>(s1);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2222&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://bu.dusays.com/2024/04/17/661f5338927d5.png" alt="66-13.png"></p><p>此时 s1 里面的内容还没有转走（<code>std::move()</code>没有做移动操作）。</p><p>而如果走到移动赋值运算符函数中，内容才会被转走：</p><p><img src="https://bu.dusays.com/2024/04/17/661f56d06a004.png" alt="66-14.png"></p><p>该例完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>()</span><br><span class="line">    : _pstr(<span class="literal">nullptr</span>)</span><br><span class="line">    <span class="comment">/* : _pstr(new char[1]()) */</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span> *pstr)</span><br><span class="line">    : _pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pstr) + <span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char *)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr, pstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String &amp;rhs)</span><br><span class="line">    : _pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(rhs._pstr) + <span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String &amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr, rhs._pstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String &amp;<span class="keyword">operator</span>=(<span class="type">const</span> String &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String &amp;operator=(const String &amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;rhs)<span class="comment">//1、自复制</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pstr;<span class="comment">//2、释放左操作数</span></span><br><span class="line">            _pstr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3、深拷贝</span></span><br><span class="line">            _pstr = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(rhs._pstr) + <span class="number">1</span>]();</span><br><span class="line">            <span class="built_in">strcpy</span>(_pstr, rhs._pstr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、返回*this</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移动构造函数优先于拷贝构造函数执行的(优先级)</span></span><br><span class="line">    <span class="comment">//移动构造函数</span></span><br><span class="line">    <span class="comment">//String s3 = String(&quot;world&quot;);</span></span><br><span class="line">    <span class="built_in">String</span>(String &amp;&amp;rhs)</span><br><span class="line">    :_pstr(rhs._pstr)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(string &amp;&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        rhs._pstr = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移动赋值运算符函数优先于赋值运算符函数执行的(优先级)</span></span><br><span class="line">    <span class="comment">//移动赋值运算符函数(移动赋值函数)</span></span><br><span class="line">    <span class="comment">//s4 = String(&quot;wuhan&quot;)</span></span><br><span class="line">    <span class="comment">//s4 = std::move(s4)</span></span><br><span class="line">    <span class="comment">//s4 = std::move(s5)</span></span><br><span class="line">    String &amp;<span class="keyword">operator</span>=(String &amp;&amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String &amp;operator=(String &amp;&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;rhs)<span class="comment">//1、自移动</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pstr;<span class="comment">//2、释放左操作数</span></span><br><span class="line">            _pstr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">            _pstr = rhs._pstr;<span class="comment">//3、浅拷贝</span></span><br><span class="line">            rhs._pstr = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">//4、返回*this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pstr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pstr;</span><br><span class="line">            _pstr = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> String &amp;rhs);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> *_pstr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> String &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(rhs._pstr)</span><br><span class="line">    &#123;</span><br><span class="line">        os &lt;&lt;  rhs._pstr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">s1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    String s2 = s1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//   C++    C   C风格转换为C++风格</span></span><br><span class="line">    <span class="comment">//   过渡</span></span><br><span class="line">    String s3 = <span class="string">&quot;world&quot;</span>;<span class="comment">//String(&quot;world&quot;),临时对象/匿名对象,</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* &amp;&quot;world&quot;;//文字常量区,左值 */</span></span><br><span class="line">    <span class="comment">/* String(&quot;world&quot;);//右值 */</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">String <span class="title">s4</span><span class="params">(<span class="string">&quot;wangdao&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    s4 = <span class="built_in">String</span>(<span class="string">&quot;wuhan&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左右操作数是两个不一样对象</span></span><br><span class="line">    <span class="comment">/* String(&quot;wuhan&quot;) = String(&quot;wuhan&quot;); */</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;000000&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//std::move可以将左值转换为右值,实质上没有做任何移动，只是</span></span><br><span class="line">    <span class="comment">//在底层做了强制转换static_cast&lt;T &amp;&amp;&gt;(lvalue)</span></span><br><span class="line">    <span class="comment">//如果以后不想使用某个左值，可以使用std::move将其转换为</span></span><br><span class="line">    <span class="comment">//右值，以后就不再使用了</span></span><br><span class="line">    s4 = std::<span class="built_in">move</span>(s4);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;11111&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    s2 = std::<span class="built_in">move</span>(s1);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2222&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<strong>拷贝构造函数</strong>和<strong>赋值运算符函数</strong>称为具有<strong>复制控制语义的函数</strong>。</p><p>将<strong>移动构造函数</strong>和<strong>移动赋值运算符函数</strong>称为具有<strong>移动语义的函数</strong>。</p><p>最后来看一个细节：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>&amp;&amp; rref = <span class="number">10</span>; <span class="comment">// 右值引用</span></span><br><span class="line">    &amp;rref;    <span class="comment">// 右值引用在此处是左值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>右值引用作为函数返回类型的时候，是右值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>&amp;&amp; <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &amp;<span class="built_in">func</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">error: taking address of rvalue [-fpermissive]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>左值、右值、左值引用、const左值引用、右值引用。</li><li>区分左值与右值的是能不能取地址。</li><li>左值引用：可以绑定到左值，但是不能绑定到右值。</li><li>const左值引用：既可以绑定到左值也可以绑定到右值。（正因如此，才将拷贝构造函数写成const左值引用）</li><li>右值引用：可以绑定到右值，但是不能绑定到左值。（正因如此，才能有移动语义的函数）</li></ul><h2 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h2><p>资源管理是 C 的难点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">UseFile</span><span class="params">(<span class="type">char</span> <span class="type">const</span>* fn)</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE* f = fopen(fn, “r”);  <span class="comment">// 获取资源</span></span><br><span class="line">     …… <span class="comment">// 使用资源</span></span><br><span class="line">    <span class="keyword">if</span> (!g()) &#123; fclose(f); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (!h()) &#123; fclose(f); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    fclose(f);           <span class="comment">// 释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>困难在于：</p><ul><li>用于释放资源的代码需要在不同的位置重复书写多次。</li><li>如果再加入异常处理，fclose(f)情况会变得更加复杂。</li></ul><p><strong>RAII(Resource Acquisition Is Initialization)</strong> 是一种由 C++创造者 Bjarne Stroustrup 提出的， 利用栈对象生命周期管理程序资源（包括内存、文件句柄、锁等）的技术。</p><p>使用 RAII 时，一般在资源获得的同时构造对象， 在对象生存期间，资源一直保持有效；对象析构时，资源被释放。</p><p>关键：<strong>要保证资源的释放顺序与获取顺序严格相反。</strong></p><p>看一个简单例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SafeFile</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SafeFile</span>(FILE* fp): _fp(fp)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;SafeFile(FILE*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">const</span> string&amp; msg)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fwrite</span>(msg.<span class="built_in">c_str</span>(), <span class="number">1</span>, msg.<span class="built_in">size</span>(), _fp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">SafeFile</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~SafeFile()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_fp) &#123;</span><br><span class="line">            <span class="built_in">fclose</span>(_fp);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;fclose(_fp)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    FILE* _fp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// sf 是栈对象</span></span><br><span class="line">    <span class="function">SafeFile <span class="title">sf</span><span class="params">(fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    string msg = <span class="string">&quot;delishashijiediyikeai\n&quot;</span>;</span><br><span class="line">    sf.<span class="built_in">write</span>(msg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ g++ tmptest.cc</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ ./a.out</span></span><br><span class="line"><span class="comment">SafeFile(FILE*)</span></span><br><span class="line"><span class="comment">~SafeFile()</span></span><br><span class="line"><span class="comment">fclose(_fp)</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ cat test.txt </span></span><br><span class="line"><span class="comment">delishashijiediyikeai</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>RAII 特征：</p><ol><li>在构造函数中获取资源或者托管资源</li><li>在析构函数中释放资源</li><li>提供若干访问资源的方法</li><li>一般不允许复制或赋值（将拷贝构造函数或者赋值运算符函数删除即可）</li></ol><p><strong>RAII 的本质是用栈对象的生命周期来管理资源，因为栈对象在离开作用域时，会自动调用析构函数。</strong></p><p><strong>对象语义</strong>：不能进行复制或赋值。（在流的代码中，都是不能复制或赋值的）<br><strong>值语义</strong>：可以进行复制或赋值。</p><p>实现 RAII 的逻辑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RAII</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 在构造函数中初始化资源</span></span><br><span class="line">    <span class="built_in">RAII</span>(T* data): _data(data) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;RAII(T*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在析构函数中释放资源</span></span><br><span class="line">    ~<span class="built_in">RAII</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~RAII()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_data) &#123;</span><br><span class="line">            <span class="comment">// 假如指针是 new 出来的</span></span><br><span class="line">            <span class="keyword">delete</span> _data;</span><br><span class="line">            _data = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供若干访问资源的方法</span></span><br><span class="line">    T* <span class="keyword">operator</span> -&gt; () &#123;</span><br><span class="line">        <span class="keyword">return</span> _data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T&amp; <span class="keyword">operator</span> * () &#123;</span><br><span class="line">        <span class="keyword">return</span> *_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T* <span class="title">get</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">(T* data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_data) &#123;</span><br><span class="line">            <span class="keyword">delete</span> _data;</span><br><span class="line">            _data = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不允许复制或赋值</span></span><br><span class="line">    <span class="built_in">RAII</span>(<span class="type">const</span> RAII&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">    RAII&amp; <span class="keyword">operator</span> = (<span class="type">const</span> RAII&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* _data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">RAII&lt;point&gt; <span class="title">pt</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>, <span class="number">2</span>))</span></span>;</span><br><span class="line">    pt-&gt;<span class="built_in">print</span>();</span><br><span class="line">    pt.<span class="keyword">operator</span>-&gt;()-&gt;<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">RAII(T*)</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">~RAII()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，pt 本身不是指针，但具备指针的功能，也不用操心空间的回收，由此引出<strong>智能指针</strong>的概念。</p><h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><p>智能指针(Smart Pointer)</p><ul><li>是存储指向动态分配（堆）对象的指针的类</li><li>在面对异常的时候格外有用，因为他们能够确保正确的销毁动态分配的对象</li></ul><p>C++11 提供了以下几种智能指针,位于头文件<code>&lt;memory&gt;</code>，它们都是<strong>类模板</strong></p><ul><li>std::auto_ptr (复制/赋值)</li><li>std::unique_ptr</li><li>std::shared_ptr</li><li>std::weak_ptr  </li></ul><h3 id="auto-ptr"><a href="#auto-ptr" class="headerlink" title="auto_ptr"></a>auto_ptr</h3><p>来看下面关于 auto_ptr 的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::auto_ptr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* pInt = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">ap</span><span class="params">(pInt)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*pInt = &quot;</span> &lt;&lt; *pInt &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*ap = &quot;</span> &lt;&lt; *ap &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// delete pInt;</span></span><br><span class="line">    <span class="comment">// pInt = nullptr;</span></span><br><span class="line">    <span class="comment">// 不需要，因为被 auto_ptr 托管了</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    auto_ptr&lt;<span class="type">int</span>&gt; ap2 = ap;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*ap2 = &quot;</span> &lt;&lt; *ap2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*ap = &quot;</span> &lt;&lt; *ap &lt;&lt; endl; <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    // some warning</span></span><br><span class="line"><span class="comment">*pInt = 10</span></span><br><span class="line"><span class="comment">*ap = 10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*ap2 = 10</span></span><br><span class="line"><span class="comment">Segmentation fault (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>出现错误的原因是：在执行拷贝操作的时候，会将 ap 托管的资源交给 ap2 ，然后将 ap 的数据成员置空。</p><p>更进一步地，我们看一下 auto_ptr 源码的逻辑（并非完全一致，为方便理解作了少量修改）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">auto_ptr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//auto_ptr&lt;int&gt; ap2 = ap;</span></span><br><span class="line">    <span class="comment">//_Tp = int</span></span><br><span class="line">    <span class="comment">//auto_ptr &amp;__a = ap;</span></span><br><span class="line">    <span class="built_in">auto_ptr</span>(auto_ptr&amp; __a)</span><br><span class="line">    : _M_ptr(__a.<span class="built_in">release</span>())</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">_Tp* <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _Tp* __tmp = _M_ptr;</span><br><span class="line">        _M_ptr = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> __tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _Tp&amp; <span class="keyword">operator</span>*() <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *_M_ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    _Tp* _M_ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>即表面上执行了拷贝操作，但底层已经发生了所有权的转移。<strong><code>auto_ptr</code>在设计上存在缺陷。</strong></p><h3 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h3><p><code>std::unique_ptr</code>是一个<strong>独享所有权</strong>的智能指针，它提供了一种严格语义上的所有权，包括：</p><ul><li>拥有它所指向的对象</li><li><strong>无法进行复制、赋值操作</strong></li><li>保存指向某个对象的指针，当它本身被删除释放的时候，会使用给定的<strong>删除器</strong>释放它指向的对象</li><li>具有移动(std::move)语义，可做为容器元素</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">up</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">10</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*up = &quot;</span> &lt;&lt; *up &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// unique_ptr&lt;int&gt; up2 = up; // 在语法层面报错</span></span><br><span class="line"></span><br><span class="line">    <span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">up3</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">34</span>))</span></span>;</span><br><span class="line">    <span class="comment">// up3 = up;   // error</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    vector&lt;unique_ptr&lt;<span class="type">int</span>&gt;&gt; vec;</span><br><span class="line">    <span class="comment">// unique_ptr 据有移动语义（有移动构造函数和移动赋值函数）</span></span><br><span class="line">    <span class="comment">// 所以可以作为容器的元素</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(up));</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="built_in">unique_ptr</span>&lt;<span class="type">int</span>&gt;(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">30</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要构建右值的时候，可以使用如下两种方法：</p><ol><li>直接显示调用构造函数，创建临时对象</li><li>使用std::move函数将左值转换为右值。</li></ol><p>需要构建左值的时候，可以使用如下两种方法：</p><ol><li>可以使用构造函数创建对象，创建有名对象。Point pt(1, 2);</li><li>可以使用右值引用将右值转换为左值，Point &amp;&amp;rref = Point(1, 2)</li></ol><h3 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h3><p><code>std::shared_ptr</code>是一个<strong>引用计数</strong>智能指针，用于共享对象的所有权</p><ol><li>引进了一个计数器shared_count,用来表示当前有多少个智能指针对象共享指针指向的内存块</li><li>析构函数中不是直接释放指针对应的内存块,如果shared_count大于0则不释放内存只是将引用计数减1,只有计数等于0时释放内存</li><li>复制构造与赋值操作符只是提供一般意义上的复制功能,并且将引用计数加1.</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">10</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp = &quot;</span> &lt;&lt; *sp &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp.get() = &quot;</span> &lt;&lt; sp.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp.use_count() = &quot;</span> &lt;&lt; sp.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    shared_ptr&lt;<span class="type">int</span>&gt; sp2 = sp;  <span class="comment">// ok</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp = &quot;</span> &lt;&lt; *sp &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp2 = &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp.get() = &quot;</span> &lt;&lt; sp.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp2.get() = &quot;</span> &lt;&lt; sp2.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp.use_count() = &quot;</span> &lt;&lt; sp.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp2.use_count() = &quot;</span> &lt;&lt; sp2.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">sp3</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">34</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp3 = &quot;</span> &lt;&lt; *sp3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp3.get() = &quot;</span> &lt;&lt; sp3.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp3.use_count() = &quot;</span> &lt;&lt; sp3.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    sp3 = sp;  <span class="comment">// 赋值，ok</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp = &quot;</span> &lt;&lt; *sp &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp2 = &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp3 = &quot;</span> &lt;&lt; *sp3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp.get() = &quot;</span> &lt;&lt; sp.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp2.get() = &quot;</span> &lt;&lt; sp2.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp3.get() = &quot;</span> &lt;&lt; sp3.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp.use_count() = &quot;</span> &lt;&lt; sp.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp2.use_count() = &quot;</span> &lt;&lt; sp2.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp3.use_count() = &quot;</span> &lt;&lt; sp3.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*sp = 10</span></span><br><span class="line"><span class="comment">sp.get() = 0x5c03fdecaeb0</span></span><br><span class="line"><span class="comment">sp.use_count() = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*sp = 10</span></span><br><span class="line"><span class="comment">*sp2 = 10</span></span><br><span class="line"><span class="comment">sp.get() = 0x5c03fdecaeb0</span></span><br><span class="line"><span class="comment">sp2.get() = 0x5c03fdecaeb0</span></span><br><span class="line"><span class="comment">sp.use_count() = 2</span></span><br><span class="line"><span class="comment">sp2.use_count() = 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*sp3 = 34</span></span><br><span class="line"><span class="comment">sp3.get() = 0x5c03fdecb300</span></span><br><span class="line"><span class="comment">sp3.use_count() = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*sp = 10</span></span><br><span class="line"><span class="comment">*sp2 = 10</span></span><br><span class="line"><span class="comment">*sp3 = 10</span></span><br><span class="line"><span class="comment">sp.get() = 0x5c03fdecaeb0</span></span><br><span class="line"><span class="comment">sp2.get() = 0x5c03fdecaeb0</span></span><br><span class="line"><span class="comment">sp3.get() = 0x5c03fdecaeb0</span></span><br><span class="line"><span class="comment">sp.use_count() = 3</span></span><br><span class="line"><span class="comment">sp2.use_count() = 3</span></span><br><span class="line"><span class="comment">sp3.use_count() = 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>再来看是否可以作为容器的元素：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp4</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>,<span class="number">2</span>))</span></span>;</span><br><span class="line">    vector&lt;shared_ptr&lt;point&gt;&gt; vec;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(sp4));</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="built_in">shared_ptr</span>&lt;point&gt;(<span class="keyword">new</span> <span class="built_in">point</span>(<span class="number">3</span>,<span class="number">4</span>)));</span><br><span class="line"></span><br><span class="line">    vec.<span class="built_in">push_back</span>(sp4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>shared_ptr 存在的问题：循环引用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> std::shared_ptr&lt;Parent&gt; parent_ptr;</span><br><span class="line"><span class="keyword">typedef</span> std::shared_ptr&lt;Child&gt; child_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Child</span>() &#123;   std::cout &lt;&lt; <span class="string">&quot;Child...&quot;</span> &lt;&lt; std::endl;   &#125;</span><br><span class="line">    ~<span class="built_in">Child</span>() &#123;  std::cout &lt;&lt; <span class="string">&quot;~Child...&quot;</span> &lt;&lt; std::endl;  &#125;</span><br><span class="line">    parent_ptr parent_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Parent</span>() &#123;  std::cout &lt;&lt; <span class="string">&quot;Parent...&quot;</span> &lt;&lt; std::endl;  &#125;</span><br><span class="line">    ~<span class="built_in">Parent</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;~Parent...&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">    child_ptr child_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">parent_ptr <span class="title">parent</span><span class="params">(<span class="keyword">new</span> Parent)</span></span>;</span><br><span class="line">    <span class="function">child_ptr <span class="title">child</span><span class="params">(<span class="keyword">new</span> Child)</span></span>;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;parent.use_count() = &quot;</span> &lt;&lt; parent.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;child.use_count() = &quot;</span> &lt;&lt; child.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    parent-&gt;child_ = child;</span><br><span class="line">    <span class="comment">//parent.operator-&gt;()-&gt;child_ = child;</span></span><br><span class="line">    child-&gt;parent_ = parent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;parent.use_count() = &quot;</span> &lt;&lt; parent.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;child.use_count() = &quot;</span> &lt;&lt; child.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Parent...</span></span><br><span class="line"><span class="comment">Child...</span></span><br><span class="line"><span class="comment">parent.use_count() = 1</span></span><br><span class="line"><span class="comment">child.use_count() = 1</span></span><br><span class="line"><span class="comment">parent.use_count() = 2</span></span><br><span class="line"><span class="comment">child.use_count() = 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>以上代码存在内容泄露，原因：</p><p><img src="https://s2.loli.net/2024/04/19/61sZ7mHWhFuAOaQ.png" alt="66-15.png"></p><p><img src="https://bu.dusays.com/2024/04/19/6621c4878cc6a.png" alt="66-16.png"></p><p>解决方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> std::shared_ptr&lt;Parent&gt; parent_ptr;</span><br><span class="line"><span class="keyword">typedef</span> std::shared_ptr&lt;Child&gt; child_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Child</span>() &#123;   std::cout &lt;&lt; <span class="string">&quot;Child...&quot;</span> &lt;&lt; std::endl;   &#125;</span><br><span class="line">    ~<span class="built_in">Child</span>() &#123;  std::cout &lt;&lt; <span class="string">&quot;~Child...&quot;</span> &lt;&lt; std::endl;  &#125;</span><br><span class="line">    std::weak_ptr&lt;Parent&gt; parent_; <span class="comment">// 不会使引用计数++</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Parent</span>() &#123;  std::cout &lt;&lt; <span class="string">&quot;Parent...&quot;</span> &lt;&lt; std::endl;  &#125;</span><br><span class="line">    ~<span class="built_in">Parent</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;~Parent...&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">    child_ptr child_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">parent_ptr <span class="title">parent</span><span class="params">(<span class="keyword">new</span> Parent)</span></span>;</span><br><span class="line">    <span class="function">child_ptr <span class="title">child</span><span class="params">(<span class="keyword">new</span> Child)</span></span>;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;parent.use_count() = &quot;</span> &lt;&lt; parent.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;child.use_count() = &quot;</span> &lt;&lt; child.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    parent-&gt;child_ = child;</span><br><span class="line">    <span class="comment">//parent.operator-&gt;()-&gt;child_ = child;</span></span><br><span class="line">    child-&gt;parent_ = parent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;parent.use_count() = &quot;</span> &lt;&lt; parent.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;child.use_count() = &quot;</span> &lt;&lt; child.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Parent...</span></span><br><span class="line"><span class="comment">Child...</span></span><br><span class="line"><span class="comment">parent.use_count() = 1</span></span><br><span class="line"><span class="comment">child.use_count() = 1</span></span><br><span class="line"><span class="comment">parent.use_count() = 1</span></span><br><span class="line"><span class="comment">child.use_count() = 2</span></span><br><span class="line"><span class="comment">~Parent...</span></span><br><span class="line"><span class="comment">~Child...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h3><p>特点：</p><ul><li>std::shared_ptr 是强引用智能指针</li><li>std::weak_ptr 是弱引用智能指针</li><li>强引用，只要有一个引用存在，对象就不能被释放</li><li><strong>弱引用，并不增加对象的引用计数，但它知道对象是否存在。</strong><ul><li>如果存在，提升为shared_ptr成功；否则，提升失败</li><li>通过weak_ptr访问对象的成员的时候，要提升为shared_ptr</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"><span class="keyword">using</span> std::weak_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// weak_ptr&lt;point&gt; wp(new point(1, 2));  // 不 ok</span></span><br><span class="line">    weak_ptr&lt;point&gt; wp2; <span class="comment">//可以创建空对象</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">shared_ptr&lt;point&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>,<span class="number">2</span>))</span></span>;</span><br><span class="line">        wp2 = sp;  <span class="comment">// ok</span></span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;sp.use_count() = &quot;</span> &lt;&lt; sp.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;wp2.use_count() = &quot;</span> &lt;&lt; wp2.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;wp2.expired() = &quot;</span> &lt;&lt; wp2.<span class="built_in">expired</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        shared_ptr&lt;point&gt; sp2 = wp2.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">if</span>(sp2) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;提升成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;*sp2 = &quot;</span>;</span><br><span class="line">            sp2-&gt;<span class="built_in">print</span>();</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;提升失败，托管资源已销毁&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;wp2.use_count() = &quot;</span> &lt;&lt; wp2.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;wp2.expired() = &quot;</span> &lt;&lt; wp2.<span class="built_in">expired</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    shared_ptr&lt;point&gt; sp2 = wp2.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span>(sp2) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;提升成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;*sp2 = &quot;</span>;</span><br><span class="line">        sp2-&gt;<span class="built_in">print</span>();</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;提升失败，托管资源已销毁&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">sp.use_count() = 1</span></span><br><span class="line"><span class="comment">wp2.use_count() = 1</span></span><br><span class="line"><span class="comment">wp2.expired() = 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">提升成功</span></span><br><span class="line"><span class="comment">*sp2 = 1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">wp2.use_count() = 0</span></span><br><span class="line"><span class="comment">wp2.expired() = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">提升失败，托管资源已销毁</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="删除器"><a href="#删除器" class="headerlink" title="删除器"></a>删除器</h3><p><img src="https://s2.loli.net/2024/04/19/ZLfMJoU6YPSKI2W.png" alt="66-17.png"></p><p>对于一些特殊的情况，不能依赖默认的删除器：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FileCloser</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(FILE* fp)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(fp) &#123;</span><br><span class="line">            <span class="built_in">fclose</span>(fp);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;fclose(fp)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string msg = <span class="string">&quot;jiarenmenshuidonga.\n&quot;</span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;FILE, FileCloser&gt; <span class="title">up</span><span class="params">(fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>))</span></span>;</span><br><span class="line">    <span class="built_in">fwrite</span>(msg.<span class="built_in">c_str</span>(), <span class="number">1</span>, msg.<span class="built_in">size</span>(), up.<span class="built_in">get</span>());</span><br><span class="line">    <span class="comment">// fclose(up.get());</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string msg = <span class="string">&quot;yudaoyigeikun.\n&quot;</span>;</span><br><span class="line">    <span class="function">shared_ptr&lt;FILE&gt; <span class="title">sp</span><span class="params">(fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>), FileCloser())</span></span>;</span><br><span class="line">    <span class="built_in">fwrite</span>(msg.<span class="built_in">c_str</span>(), <span class="number">1</span>, msg.<span class="built_in">size</span>(), sp.<span class="built_in">get</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="智能指针的误用"><a href="#智能指针的误用" class="headerlink" title="智能指针的误用"></a>智能指针的误用</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用了不同的智能指针托管了同一个裸指针</span></span><br><span class="line">    point* pt = <span class="keyword">new</span> <span class="built_in">point</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="function">unique_ptr&lt;point&gt; <span class="title">up</span><span class="params">(pt)</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;point&gt; <span class="title">up2</span><span class="params">(pt)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">free(): double free detected in tcache 2</span></span><br><span class="line"><span class="comment">Aborted (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用不同的智能指针托管了同一块空间</span></span><br><span class="line">    <span class="function">unique_ptr&lt;point&gt; <span class="title">up</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>,<span class="number">2</span>))</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;point&gt; <span class="title">up2</span><span class="params">(<span class="keyword">new</span> point(<span class="number">3</span>,<span class="number">4</span>))</span></span>;</span><br><span class="line">    up.<span class="built_in">reset</span>(up2.<span class="built_in">get</span>());</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">free(): double free detected in tcache 2</span></span><br><span class="line"><span class="comment">Aborted (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    point* pt = <span class="keyword">new</span> <span class="built_in">point</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp</span><span class="params">(pt)</span></span>;</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp2</span><span class="params">(pt)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">free(): double free detected in tcache 2</span></span><br><span class="line"><span class="comment">Aborted (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>,<span class="number">2</span>))</span></span>;</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp2</span><span class="params">(<span class="keyword">new</span> point(<span class="number">3</span>,<span class="number">4</span>))</span></span>;</span><br><span class="line">    sp.<span class="built_in">reset</span>(sp2.<span class="built_in">get</span>());</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">free(): double free detected in tcache 2</span></span><br><span class="line"><span class="comment">Aborted (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test4</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再有一例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pt1-&gt;addPoint(pt2)</span></span><br><span class="line">    <span class="function">point* <span class="title">addPoint</span><span class="params">(point* pt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ix += pt-&gt;ix;</span><br><span class="line">        <span class="keyword">this</span>-&gt;iy += pt-&gt;iy;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>,<span class="number">2</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp = &quot;</span> ;</span><br><span class="line">    sp-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp2</span><span class="params">(<span class="keyword">new</span> point(<span class="number">3</span>,<span class="number">4</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp2 = &quot;</span> ;</span><br><span class="line">    sp2-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp3</span><span class="params">(sp-&gt;addPoint(sp2.get()))</span></span>;</span><br><span class="line">    <span class="comment">// 用裸指针进行的初始化！</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp3 = &quot;</span> ;</span><br><span class="line">    sp3-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test5</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">*sp = 1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">*sp2 = 3 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*sp3 = 4 6</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">free(): double free detected in tcache 2</span></span><br><span class="line"><span class="comment">Aborted (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面代码问题的解决方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>:</span><br><span class="line"><span class="keyword">public</span> std::enable_shared_from_this&lt;point&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pt1-&gt;addPoint(pt2)</span></span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">addPoint</span><span class="params">(point* pt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ix += pt-&gt;ix;</span><br><span class="line">        <span class="keyword">this</span>-&gt;iy += pt-&gt;iy;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">shared_from_this</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>,<span class="number">2</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp = &quot;</span> ;</span><br><span class="line">    sp-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp2</span><span class="params">(<span class="keyword">new</span> point(<span class="number">3</span>,<span class="number">4</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp2 = &quot;</span> ;</span><br><span class="line">    sp2-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp3</span><span class="params">(sp-&gt;addPoint(sp2.get()))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp3 = &quot;</span> ;</span><br><span class="line">    sp3-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test5</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">*sp = 1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">*sp2 = 3 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*sp3 = 4 6</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>模板（Template），是一种通用的描述机制。模板允许使用<strong>通用类型</strong>来定义函数或类等，在使用时，通用类型可被具体的类型，如int、double甚至是用户自定义的类型来代替。模板引入一种全新的编程思维方式，称为“<strong>泛型编程</strong>”或“通用编程”。</p><p>模板的引入使函数定义摆脱了类型的束缚，代码更为高效灵活。C++ 中，通过下述形式定义一个模板：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, ...&gt;</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, ...&gt;</span><br></pre></td></tr></table></figure><p>早期模板定义使用的是 class，关键字 typename 是后加入到标准中的，相比 class，typename 更容易体现“类型”的观点，虽然两个关键字在模板定义时是等价的，但<strong>从代码兼容的角度讲，使用 class 较好一些。</strong></p><p>模板有<strong>函数模板</strong>和<strong>类模板</strong>之分。通过参数实例化构造出具体的函数或类，称为模板函数或模板类。</p><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><p>模板的形式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数模板</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">add</span><span class="params">(T x, T y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ia = <span class="number">3</span>, ib = <span class="number">4</span>;</span><br><span class="line">    <span class="type">double</span> dx = <span class="number">3.3</span>, dy = <span class="number">4.4</span>;</span><br><span class="line">    string s1 = <span class="string">&quot;hello &quot;</span>;</span><br><span class="line">    string s2 = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显式实例化</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;add(ia, ib) = &quot;</span> &lt;&lt; <span class="built_in">add</span>&lt;<span class="type">int</span>&gt;(ia, ib) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐式实例化</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;add(dx, dy) = &quot;</span> &lt;&lt; <span class="built_in">add</span>(dx, dy) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;add(s1, s2) = &quot;</span> &lt;&lt; <span class="built_in">add</span>(s1, s2) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">add(ia, ib) = 7</span></span><br><span class="line"><span class="comment">add(dx, dy) = 7.7</span></span><br><span class="line"><span class="comment">add(s1, s2) = hello world</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>原理：在编译时做了类型推导。</p><p>普通函数与函数模板可以同时存在。<br>普通函数优先于函数模板。<br>普通函数与函数模板可以形成重载。<br>函数模板与函数模板之间也可以形成重载。</p><p>对于模板而言，一般不能分成头文件与实现文件的形式，即不能将声明与实现分开。<br>如果非要分成头文件和实现文件，可以在头文件中包含实现文件，如在<code>add.h</code>中<code>#include &quot;add.cc&quot;</code>。</p><p><img src="https://s2.loli.net/2024/04/20/AfeVDnHz6YFEBXG.png" alt="66-18.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板的参数类型</span></span><br><span class="line"><span class="comment">// 1. 类型参数，比如这里的 T</span></span><br><span class="line"><span class="comment">// 2. 非类型参数，都是整型（bool/char/int/size_t/...)</span></span><br><span class="line"><span class="comment">// 注意：排除了浮点数 float/double</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="type">short</span> kMin&gt;</span><br><span class="line"><span class="function">T <span class="title">multiply</span><span class="params">(T x, T y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * y * kMin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;multiply(a, b) = &quot;</span> &lt;&lt; <span class="built_in">multiply</span>&lt;<span class="type">int</span>, <span class="number">100</span>&gt;(a, b) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">multiply(a, b) = 20000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = <span class="type">double</span> , <span class="type">short</span> kMin = <span class="number">300</span>&gt;</span><br><span class="line">T <span class="built_in">multiply</span>(T x, T y) &#123;</span><br><span class="line">    <span class="keyword">return</span> x * y * kMin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;multiply(a, b) = &quot;</span> &lt;&lt; <span class="built_in">multiply</span>&lt;<span class="type">int</span>, <span class="number">100</span>&gt;(a, b) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;multiply(a, b) = &quot;</span> &lt;&lt; <span class="built_in">multiply</span>(a, b) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">multiply(a, b) = 20000</span></span><br><span class="line"><span class="comment">multiply(a, b) = 60000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="成员函数模板"><a href="#成员函数模板" class="headerlink" title="成员函数模板"></a>成员函数模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = <span class="type">int</span>&gt;</span><br><span class="line">    T <span class="built_in">func</span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> (T)ix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">point <span class="title">pt</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;pt.func() = &quot;</span> &lt;&lt; pt.<span class="built_in">func</span>&lt;<span class="type">double</span>&gt;() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;pt.func() = &quot;</span> &lt;&lt; pt.<span class="built_in">func</span>&lt;<span class="type">int</span>&gt;() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;pt.func() = &quot;</span> &lt;&lt; pt.<span class="built_in">func</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">pt.func() = 1</span></span><br><span class="line"><span class="comment">pt.func() = 1</span></span><br><span class="line"><span class="comment">pt.func() = 1</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="可变模板参数"><a href="#可变模板参数" class="headerlink" title="可变模板参数"></a>可变模板参数</h3><p><strong>可变模板参数(variadic templates)</strong> 是 C++11 新增的特性，它对参数进行了高度泛化，能表示 0 到任意个任意类型的参数。</p><p>模板<strong>参数包(parameter pack)</strong>，如:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>… Args&gt;  <span class="keyword">class</span> <span class="title class_">tuple</span>;</span><br></pre></td></tr></table></figure></p><p><code>Args</code>标识符的左侧使用了省略号，在 C++11 中<code>Args</code>被称为<strong>模板参数包</strong>，表示可以接受任意多个参数作为模板参数，编译器将多个模板参数打包成“单个”的模板参数包。</p><p>函数参数包，如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>…T&gt; <span class="type">void</span> <span class="title">f</span><span class="params">(T…args)</span></span>;</span><br></pre></td></tr></table></figure></p><p>args 被称为<strong>函数参数包</strong>，表示函数可以接受多个任意类型的参数。</p><p>例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// template &lt;typename T1, typename T2, typename T3&gt;</span></span><br><span class="line"><span class="comment">// void display(T1 x, T2 y, T3 z) &#123;</span></span><br><span class="line"><span class="comment">//     // ...</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">/* 这里的 Args，args 只是一个名字，可以换成别的 */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ... Args&gt;  <span class="comment">// 模板参数包</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(Args ... args)</span>   <span class="comment">// 函数参数包</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++11 标准中，要求函数参数包必须唯一，且是函数的最后一个参数。</p><p>当<strong>声明</strong>一个变量（或标识符）为可变参数时，省略号位于该变量的左侧。</p><p>当<strong>使用</strong>参数包时，省略号位于参数名称的右侧，表示立即展开该参数，这个过程也被称为解包。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="comment">// template &lt;typename T1, typename T2, typename T3&gt;</span></span><br><span class="line"><span class="comment">// void display(T1 x, T2 y, T3 z) &#123;</span></span><br><span class="line"><span class="comment">//     // ...</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">/* 这里的 Args，args 只是一个名字，可以换成别的 */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;  <span class="comment">// 模板参数包</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(Args... args)</span>   <span class="comment">// 函数参数包</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof...(Args) = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>...(Args) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof...(args) = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>...(args) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;  <span class="comment">// 递归的出口</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T t, Args... args)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; t &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(args...); <span class="comment">// 递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// template &lt;typename T1, typename T2, typename T3&gt;</span></span><br><span class="line">    <span class="comment">// display(T1 x1, T2 x2, T3 x3)</span></span><br><span class="line">    <span class="comment">// T1 = int, T2 = int, T3 = int</span></span><br><span class="line">    <span class="built_in">display</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// template &lt;typename T1, typename T2, typename T3, typename T4&gt;</span></span><br><span class="line">    <span class="comment">// display(T1 x1, T2 x2, T3 x3, T4 x4)</span></span><br><span class="line">    <span class="comment">// T1 = int, T2 = const char*, T3 = double/float, T4 = string</span></span><br><span class="line">    <span class="built_in">display</span>(<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="number">3.3</span>, s1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>();</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>, <span class="number">2.2</span>, s1, <span class="string">&quot;asdf&quot;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof...(Args) = 0</span></span><br><span class="line"><span class="comment">sizeof...(args) = 0</span></span><br><span class="line"><span class="comment">sizeof...(Args) = 3</span></span><br><span class="line"><span class="comment">sizeof...(args) = 3</span></span><br><span class="line"><span class="comment">sizeof...(Args) = 4</span></span><br><span class="line"><span class="comment">sizeof...(args) = 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1 2 </span></span><br><span class="line"><span class="comment">1 2.2 hello asdf c </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>来看一个不是很有用但是很神奇的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(T t, Args... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t + <span class="built_in">sum</span>(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sum(1, 2, 3, 4, 5, 6) = &quot;</span></span><br><span class="line">         &lt;&lt; <span class="built_in">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sum(1, 2, 3, 4, 5, 6) = 21</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><p>理解了函数模板的应用，类模板的提出似乎是水到渠成的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="type">int</span> num&gt;        <span class="comment">//类型参数表</span></span><br><span class="line"><span class="comment">//或template &lt;class T = int, int num = 10&gt;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>                        <span class="comment">//Stack类定义</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T sz[num];<span class="comment">//存储空间，用数组表示</span></span><br><span class="line">    <span class="type">int</span> point;<span class="comment">//指针，表示存储位置（即元素个数）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Stack</span>()<span class="comment">//构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        point=<span class="number">0</span>;<span class="comment">//初始位置为0，栈底</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>;<span class="comment">//判断栈是否为空</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isFull</span><span class="params">()</span></span>;<span class="comment">//判断栈是否已满</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T&amp;)</span></span>;<span class="comment">//将一个元素压入栈</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(T&amp;)</span></span>;<span class="comment">//从栈中弹出一个元素</span></span><br><span class="line">    <span class="function"><span class="type">int</span> &amp;<span class="title">GetPos</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> point;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>,<span class="type">int</span> num&gt;        <span class="comment">//参数列表不要求字字相同，但形式要相同</span></span><br><span class="line"><span class="type">bool</span> Stack&lt;T,num&gt;::<span class="built_in">isEmpty</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> point==<span class="number">0</span>;<span class="comment">//point为0，说明当前无元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>,<span class="type">int</span> num&gt;</span><br><span class="line"><span class="type">bool</span> Stack&lt;T,num&gt;::<span class="built_in">isFull</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> point==num;<span class="comment">//point为num，说明数组已满</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>,<span class="type">int</span> num&gt;</span><br><span class="line"><span class="type">bool</span> Stack&lt;T,num&gt;::<span class="built_in">push</span>(<span class="type">const</span> T&amp; obt)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isFull</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//如果栈已满，压入不成功，返回false</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        sz[point]=obt;<span class="comment">//将传入的元素存储在point指向的当前位置</span></span><br><span class="line">        point++;<span class="comment">//point加1，向栈顶移动</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//压入成功，返回true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>,<span class="type">int</span> num&gt;</span><br><span class="line"><span class="type">bool</span> Stack&lt;T,num&gt;::<span class="built_in">pop</span>(T &amp;obt)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isEmpty</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//如果栈已空，无法弹出，返回false</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        point--;<span class="comment">//point减1，向栈底移动，指向存储的最上面一个元素</span></span><br><span class="line">        obt = sz[point];<span class="comment">//将point指向的当前位置元素复制给传入参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//弹出成功，返回true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Stack&lt;<span class="type">int</span>, <span class="number">10</span>&gt; st;<span class="comment">//模版类, 模版参数为&lt;class T, int num&gt;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;开始时st是否为空？ &quot;</span> &lt;&lt; st.<span class="built_in">isEmpty</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    st.<span class="built_in">push</span>(<span class="number">5</span>);<span class="comment">//压入元素5</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;此时st是否为空？ &quot;</span> &lt;&lt; st.<span class="built_in">isEmpty</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        st.<span class="built_in">push</span>(i);<span class="comment">//压入9个元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;此时st是否已满？&quot;</span> &lt;&lt; st.<span class="built_in">isFull</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> rec = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (st.<span class="built_in">pop</span>(rec))</span><br><span class="line">        cout &lt;&lt; rec &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">开始时st是否为空？ 1</span></span><br><span class="line"><span class="comment">此时st是否为空？ 0</span></span><br><span class="line"><span class="comment">此时st是否已满？1</span></span><br><span class="line"><span class="comment">9  8  7  6  5  4  3  2  1  5 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>模板的嵌套：</p><ul><li>模板的嵌套可以理解成在另一个模板里定义一个模板。以模板（类，或者函数）作为另一个模板（类，或者函数）的成员，也称<strong>成员模板</strong>。</li><li><strong>成员模版不能声明为 virtual.</strong><ul><li>模板在编译时进行类型推导</li><li>虚函数体现多态发生在运行时</li></ul></li></ul><p>来看一个嵌套模版类的模版类的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outside</span>            <span class="comment">//外部Outside类定义</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">R</span>&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inside</span><span class="comment">//嵌套类模板定义</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        R r;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Inside</span>(R x)<span class="comment">//模板类的成员函数可以在定义时实现</span></span><br><span class="line">        &#123;</span><br><span class="line">            r=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//void disp();</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">disp</span><span class="params">()</span> </span>&#123;cout &lt;&lt; <span class="string">&quot;Inside: &quot;</span> &lt;&lt; r &lt;&lt; endl;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Outside</span>(T x) : <span class="built_in">t</span>(x)<span class="comment">//Outside类的构造函数</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//void disp();</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">disp</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Outside:&quot;</span>;</span><br><span class="line">        t.<span class="built_in">disp</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Inside&lt;T&gt; t;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//template&lt;class T&gt;</span></span><br><span class="line"><span class="comment">//template&lt;class R&gt;</span></span><br><span class="line"><span class="comment">//void Outside&lt;T&gt;::Inside&lt;R&gt;::disp()    //模板类的成员函数也可以在定义外实现</span></span><br><span class="line"><span class="comment">//&#123;            //但必须是在所有类定义的外边,不能放在Outside内Inside外去实现.</span></span><br><span class="line"><span class="comment">//    cout&lt;&lt;&quot;Inside: &quot;&lt;&lt;Outside&lt;T&gt;::Inside&lt;R&gt;::r&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//template&lt;class T&gt;</span></span><br><span class="line"><span class="comment">//void Outside&lt;T&gt;::disp()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    cout&lt;&lt;&quot;Outside:&quot;;</span></span><br><span class="line"><span class="comment">//    t.disp();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Outside&lt;<span class="type">int</span>&gt;::<span class="function">Inside&lt;<span class="type">double</span>&gt; <span class="title">obin</span><span class="params">(<span class="number">3.5</span>)</span></span>;<span class="comment">//声明Inside类对象obin</span></span><br><span class="line">    obin.<span class="built_in">disp</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function">Outside&lt;<span class="type">int</span>&gt; <span class="title">obout</span><span class="params">(<span class="number">2</span>)</span></span>;<span class="comment">//创建Outside类对象obout</span></span><br><span class="line">    obout.<span class="built_in">disp</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Inside: 3.5</span></span><br><span class="line"><span class="comment">Outside:Inside: 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>嵌套越多越麻烦：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OutSide</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inside</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Q&gt;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Q x)</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R&gt;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Q&gt;</span><br><span class="line"><span class="type">void</span> OutSide&lt;T&gt;::Inside&lt;R&gt;::<span class="built_in">print</span>(Q x) &#123;</span><br><span class="line">    <span class="comment">// some code...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vector、deque、list"><a href="#vector、deque、list" class="headerlink" title="vector、deque、list"></a>vector、deque、list</h2><p><img src="https://s2.loli.net/2024/04/22/sSUM1IazBkEP5wV.png" alt="66-19.png"></p><p>这部分知识早有接触，因此只是杂乱地记一些东西。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Container&amp; con)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; elem : con) &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; number = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">    number.<span class="built_in">push_back</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">    number.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 3 5 7 9 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 11 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::deque&lt;<span class="type">int</span>&gt; number = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">    number.<span class="built_in">push_back</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">    number.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 3 5 7 9 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 11 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::list&lt;<span class="type">int</span>&gt; number = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">    number.<span class="built_in">push_back</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">    number.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 3 5 7 9 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 11 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test3</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vector-源码阅读"><a href="#vector-源码阅读" class="headerlink" title="vector 源码阅读"></a>vector 源码阅读</h3><p>vector 的继承图：</p><p><img src="https://bu.dusays.com/2024/04/22/662624196f56c.png" alt="66-20.png"></p><p>vector底层原理图：</p><p><img src="https://bu.dusays.com/2024/04/22/66262463b326a.png" alt="66-21.png"></p><p>类型萃取（提取、过滤）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> __Tp, <span class="keyword">class</span> <span class="title class_">_Alloc</span> = __STL_DEFAULT_ALLOCATOR(_Tp)&gt;</span><br><span class="line"><span class="keyword">class</span> vector</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> _Base::allocator_type allocator_type; <span class="comment">//typename为了严格表明一个类型</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> _Tp value_type;</span><br><span class="line">    <span class="keyword">typedef</span> value_type* pointer;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">const</span> value_type* const_pointer;</span><br><span class="line">    <span class="keyword">typedef</span> value_type* iterator;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">const</span> value_type* const_iterator;</span><br><span class="line">    <span class="keyword">typedef</span> value_type&amp; reference;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">const</span> value_type&amp; const_reference;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">size_t</span> size_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">ptrdiff_t</span> difference_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 vector 中，<code>operator[]</code>与<code>at</code>函数都具有随机访问的功能，但是at函数有范围检查，所以更加安全一些：</p><p><img src="https://s2.loli.net/2024/04/22/bQcjCBGsFoRt8rJ.jpg" alt="66-22.jpeg"></p><p>如何获取 vector 的第一个元素的地址：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// number 是一个 vector 对象</span></span><br><span class="line">&amp;number;   <span class="comment">// error</span></span><br><span class="line">&amp;*number;  <span class="comment">// error</span></span><br><span class="line">&amp;*number.<span class="built_in">begin</span>();   <span class="comment">// ok</span></span><br><span class="line">&amp;number[<span class="number">0</span>];         <span class="comment">// ok</span></span><br><span class="line"><span class="type">int</span>* pdata = number.<span class="built_in">data</span>(); <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><h3 id="deque-源码阅读"><a href="#deque-源码阅读" class="headerlink" title="deque 源码阅读"></a>deque 源码阅读</h3><p>deque 的继承图：</p><p><img src="https://bu.dusays.com/2024/04/22/66264cb38d065.png" alt="66-23.png"></p><p>deque 的原理图：</p><p><img src="https://s2.loli.net/2024/04/22/7oDRV5AvWfYGKHZ.png" alt="66-24.png"></p><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><p>容器的清空：</p><p><img src="https://bu.dusays.com/2024/04/22/66266e03af909.png" alt="66-25.png"></p><p>list 的排序相关：</p><p><img src="https://s2.loli.net/2024/04/22/nToXG5cmRUviHzP.png" alt="66-26.png"></p><p>vector 的 insert 扩容机制：<br>对于 push_back 而言，每次插入的个数是一定的，那么按照两倍的方法进行扩容，是 OK 的。但是对于 insert 而言，每次插入元素的个数是不确定的，所以没有一个统一的标准进行扩容。</p><ul><li>令 capacity() = n, size() = m, 将要插入 t 个元素</li><li>t &lt; n-m, 不扩容</li><li>n-m &lt; t &lt; m, 按照 2*m 进行扩容</li><li>t &gt; n-m, m &lt; t &lt; n, 按照 t+m 进行扩容</li><li>t &gt; n-m, t &gt; n, 按照 t+m 进行扩容</li></ul><h2 id="multi-set-map"><a href="#multi-set-map" class="headerlink" title="(multi)set/map"></a>(multi)set/map</h2><p>同样是很杂的笔记。</p><p>一些魔咒：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::set;</span><br><span class="line"><span class="keyword">using</span> std::pair;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Container&amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;elem : con)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; aa = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">87</span>&#125;;</span><br><span class="line"></span><br><span class="line">    set&lt;<span class="type">int</span>&gt;::iterator it = aa.<span class="built_in">find</span>(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span>(it == aa.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;not exist.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;exist.&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 吟唱魔咒</span></span><br><span class="line">    pair&lt;set&lt;<span class="type">int</span>&gt;::iterator, <span class="type">bool</span>&gt; ret = aa.<span class="built_in">insert</span>(<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret.second)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;插入成功 &quot;</span> &lt;&lt; *ret.first &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;插入失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">display</span>(aa);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">exist.</span></span><br><span class="line"><span class="comment">插入成功 8</span></span><br><span class="line"><span class="comment">1  2  3  4  5  6  7  8  87 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>针对于自定义类型用法（定义小于号）：</p><ul><li>模板的特化方式</li><li><img src="https://s2.loli.net/2024/04/23/rXRWfSJHNzy4kAu.png" alt="66-27.png"></li><li>重载运算符</li><li><img src="https://bu.dusays.com/2024/04/23/662773e3a3110.png" alt="66-28.png"></li><li>函数对象（仿函数）</li><li><img src="https://bu.dusays.com/2024/04/23/662773fc84e88.png" alt="66-29.png"></li></ul><p>multiset 的一些用法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::multiset;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(<span class="type">const</span> multiset&lt;<span class="type">int</span>&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; elem : a) &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    multiset&lt;<span class="type">int</span>&gt; number = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">100</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">show</span>(number);</span><br><span class="line"></span><br><span class="line">    std::pair&lt;multiset&lt;<span class="type">int</span>&gt;::iterator, multiset&lt;<span class="type">int</span>&gt;::iterator&gt; ret </span><br><span class="line">        = number.<span class="built_in">equal_range</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">while</span>(ret.first != ret.second) &#123;</span><br><span class="line">        cout &lt;&lt; *ret.first &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        ++ ret.first;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 1 3 3 5 5 5 5 7 7 9 100 </span></span><br><span class="line"><span class="comment">5 5 5 5 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="作业-文本查询再探"><a href="#作业-文本查询再探" class="headerlink" title="作业-文本查询再探"></a>作业-文本查询再探</h2><p>在之前的基础上，支持逻辑运算与、或、非，进行文本查询。</p><p>很恶心的作业，让你充分理解为什么说 C++ Primer 编排垃圾。</p><p>书中没有完整的程序，代码也散落各处，有的代码甚至在几百页之前。</p><p>这个作业如果只是要完成功能的话，还是很容易想到转换成集合的运算的，只是我实在无法想象要怎么面向对象地写出七八个类来，因此直接看书中的代码了。</p><p>对于不会设计类的我来说，还是很有启发的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueryResult</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextQuery</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> line_no = std::vector&lt;std::string&gt;::size_type;</span><br><span class="line">    <span class="built_in">TextQuery</span>(std::ifstream&amp;);</span><br><span class="line">    <span class="function">QueryResult <span class="title">query</span><span class="params">(<span class="type">const</span> std::string&amp;)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr&lt;std::vector&lt;std::string&gt;&gt; file; <span class="comment">// 输入文件</span></span><br><span class="line">    <span class="comment">// 单词到行号集合的指针的映射</span></span><br><span class="line">    std::map&lt;std::string, std::shared_ptr&lt;std::set&lt;line_no&gt;&gt;&gt; wm;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">TextQuery::<span class="built_in">TextQuery</span>(std::ifstream&amp; is): <span class="built_in">file</span>(<span class="keyword">new</span> std::vector&lt;std::string&gt;) &#123;</span><br><span class="line">    std::string text;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(is, text)) &#123;</span><br><span class="line">        file-&gt;<span class="built_in">push_back</span>(text);</span><br><span class="line">        <span class="type">int</span> n = file-&gt;<span class="built_in">size</span>() <span class="number">-1</span>; <span class="comment">// 当前行号</span></span><br><span class="line">        <span class="function">std::istringstream <span class="title">line</span><span class="params">(text)</span></span>;</span><br><span class="line">        std::string word;</span><br><span class="line">        <span class="keyword">while</span>(line &gt;&gt; word) &#123;</span><br><span class="line">            <span class="comment">// 若单词不在 wm 中，以之为下标在 wm 中添加一项</span></span><br><span class="line">            <span class="keyword">auto</span>&amp; lines = wm[word];  <span class="comment">// lines 是一个 shared_ptr</span></span><br><span class="line">            <span class="keyword">if</span>(!lines) <span class="comment">// 第一次遇到这个单词时，此指针为空</span></span><br><span class="line">                lines.<span class="built_in">reset</span>(<span class="keyword">new</span> std::set&lt;line_no&gt;); <span class="comment">// 分配一个新 set</span></span><br><span class="line">            lines-&gt;<span class="built_in">insert</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueryResult</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> std::ostream&amp; <span class="title">print</span><span class="params">(std::ostream&amp;, <span class="type">const</span> QueryResult&amp;)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> line_no = TextQuery::line_no;</span><br><span class="line">    <span class="built_in">QueryResult</span>(std::string s,</span><br><span class="line">                std::shared_ptr&lt;std::set&lt;line_no&gt;&gt; p,</span><br><span class="line">                std::shared_ptr&lt;std::vector&lt;std::string&gt;&gt; f):</span><br><span class="line">                <span class="built_in">sought</span>(s), <span class="built_in">lines</span>(p), <span class="built_in">file</span>(f) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    std::set&lt;line_no&gt;::<span class="function">iterator <span class="title">begin</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lines-&gt;<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::set&lt;line_no&gt;::<span class="function">iterator <span class="title">end</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lines-&gt;<span class="built_in">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::shared_ptr&lt;std::vector&lt;std::string&gt;&gt; <span class="built_in">get_file</span>() <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string sought;                            <span class="comment">// 查询单词</span></span><br><span class="line">    std::shared_ptr&lt;std::set&lt;line_no&gt;&gt; lines;      <span class="comment">// 出现的行号</span></span><br><span class="line">    std::shared_ptr&lt;std::vector&lt;std::string&gt;&gt; file; <span class="comment">// 保存每行</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">TextQuery::query</span><span class="params">(<span class="type">const</span> std::string&amp; sought)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 若未找到 sought, 返回指向此 set 的指针</span></span><br><span class="line">    <span class="type">static</span> std::shared_ptr&lt;std::set&lt;line_no&gt;&gt; <span class="built_in">noData</span>(<span class="keyword">new</span> std::set&lt;line_no&gt;);</span><br><span class="line">    <span class="comment">// 使用 find() 而不是下标运算符来查找单词，避免将单词添加到 wm 中</span></span><br><span class="line">    <span class="keyword">auto</span> loc = wm.<span class="built_in">find</span>(sought);</span><br><span class="line">    <span class="keyword">if</span>(loc == wm.<span class="built_in">end</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">QueryResult</span>(sought, noData, file); <span class="comment">// 未找到</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">QueryResult</span>(sought, loc-&gt;second, file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::ostream&amp; <span class="title">print</span><span class="params">(std::ostream&amp; os, <span class="type">const</span> QueryResult&amp; qr)</span> </span>&#123;</span><br><span class="line">    os &lt;&lt; qr.sought &lt;&lt; <span class="string">&quot; occurs &quot;</span> </span><br><span class="line">       &lt;&lt; qr.lines-&gt;<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; time(s) &quot;</span>&lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> num : *qr.lines) </span><br><span class="line">        os &lt;&lt; <span class="string">&quot;(line &quot;</span> &lt;&lt; num+<span class="number">1</span> &lt;&lt; <span class="string">&quot;) &quot;</span></span><br><span class="line">           &lt;&lt; *(qr.file-&gt;<span class="built_in">begin</span>() + num) &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Query_base</span> &#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Query</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">using</span> line_no = TextQuery::line_no; <span class="comment">// 用于 eval 函数</span></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Query_base</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">private</span>:    </span><br><span class="line">    <span class="comment">// eval 返回与当前 Query 匹配的 QueryResult</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// rep 是表示查询的一个 string</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">rep</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是一个管理 Query_base 继承体系的接口类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Query</span> &#123;</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> ~ (<span class="type">const</span> Query&amp;);</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> | (<span class="type">const</span> Query&amp;, <span class="type">const</span> Query&amp;);</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> &amp; (<span class="type">const</span> Query&amp;, <span class="type">const</span> Query&amp;);</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Query&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Query</span>(<span class="type">const</span> std::string&amp;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接口函数，调用对应的 Query_base 操作</span></span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp; t)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q-&gt;<span class="built_in">eval</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::string <span class="title">rep</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> q-&gt;<span class="built_in">rep</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Query</span>(std::shared_ptr&lt;Query_base&gt; query): <span class="built_in">q</span>(query) &#123;&#125;</span><br><span class="line">    std::shared_ptr&lt;Query_base&gt; q;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Query&amp; query) &#123;</span><br><span class="line">    <span class="keyword">return</span> os &lt;&lt; query.<span class="built_in">rep</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WordQuery</span>: <span class="keyword">public</span> Query_base &#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Query</span>; <span class="comment">// Query 使用 WordQuery 的构造函数</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">WordQuery</span>(<span class="type">const</span> std::string&amp; s): <span class="built_in">query_word</span>(s) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp; t)</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">query</span>(query_word);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::string <span class="title">rep</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> query_word;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::string query_word;  <span class="comment">// 要查找的单词</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">Query::Query</span><span class="params">(<span class="type">const</span> std::string&amp; s)</span>: q(new WordQuery(s)) &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NotQuery</span>: <span class="keyword">public</span> Query_base &#123;</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> ~ (<span class="type">const</span> Query&amp;);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">NotQuery</span>(<span class="type">const</span> Query&amp; q): <span class="built_in">query</span>(q) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;)</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">rep</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;~(&quot;</span> + query.<span class="built_in">rep</span>() + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Query query;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Query <span class="keyword">operator</span> ~ (<span class="type">const</span> Query&amp; operand) &#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">shared_ptr</span>&lt;Query_base&gt;(<span class="keyword">new</span> <span class="built_in">NotQuery</span>(operand));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryQuery</span>: <span class="keyword">public</span> Query_base &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">BinaryQuery</span>(<span class="type">const</span> Query&amp; l, <span class="type">const</span> Query&amp; r, std::string s):</span><br><span class="line">               <span class="built_in">lhs</span>(l), <span class="built_in">rhs</span>(r), <span class="built_in">opSym</span>(s) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::string <span class="title">rep</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + lhs.<span class="built_in">rep</span>() + <span class="string">&quot; &quot;</span> + opSym + <span class="string">&quot; &quot;</span> + rhs.<span class="built_in">rep</span>() + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Query lhs, rhs;</span><br><span class="line">    std::string opSym;  <span class="comment">// 运算符的名字</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AndQuery</span>: <span class="keyword">public</span> BinaryQuery &#123;</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> &amp; (<span class="type">const</span> Query&amp;, <span class="type">const</span> Query&amp;);</span><br><span class="line">    <span class="built_in">AndQuery</span>(<span class="type">const</span> Query&amp; left, <span class="type">const</span> Query&amp; right):</span><br><span class="line">            <span class="built_in">BinaryQuery</span>(left, right, <span class="string">&quot;&amp;&quot;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;)</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Query <span class="keyword">operator</span> &amp; (<span class="type">const</span> Query&amp; lhs, <span class="type">const</span> Query&amp; rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">shared_ptr</span>&lt;Query_base&gt;(<span class="keyword">new</span> <span class="built_in">AndQuery</span>(lhs, rhs));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrQuery</span>: <span class="keyword">public</span> BinaryQuery &#123;</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> | (<span class="type">const</span> Query&amp;, <span class="type">const</span> Query&amp;);</span><br><span class="line">    <span class="built_in">OrQuery</span>(<span class="type">const</span> Query&amp; left, <span class="type">const</span> Query&amp; right):</span><br><span class="line">            <span class="built_in">BinaryQuery</span>(left, right, <span class="string">&quot;|&quot;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;)</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Query <span class="keyword">operator</span> | (<span class="type">const</span> Query&amp; lhs, <span class="type">const</span> Query&amp; rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">shared_ptr</span>&lt;Query_base&gt;(<span class="keyword">new</span> <span class="built_in">OrQuery</span>(lhs, rhs));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">OrQuery::eval</span><span class="params">(<span class="type">const</span> TextQuery&amp; text)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> right = rhs.<span class="built_in">eval</span>(text), left = lhs.<span class="built_in">eval</span>(text);</span><br><span class="line">    <span class="keyword">auto</span> ret_lines = </span><br><span class="line">        std::make_shared&lt;std::set&lt;line_no&gt;&gt;(left.<span class="built_in">begin</span>(), left.<span class="built_in">end</span>());</span><br><span class="line">    ret_lines-&gt;<span class="built_in">insert</span>(right.<span class="built_in">begin</span>(), right.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">QueryResult</span>(<span class="built_in">rep</span>(), ret_lines, left.<span class="built_in">get_file</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">AndQuery::eval</span><span class="params">(<span class="type">const</span> TextQuery&amp; text)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> left = lhs.<span class="built_in">eval</span>(text), right = rhs.<span class="built_in">eval</span>(text);</span><br><span class="line">    <span class="keyword">auto</span> ret_lines = std::make_shared&lt;std::set&lt;line_no&gt;&gt; ();</span><br><span class="line">    <span class="built_in">set_intersection</span>(left.<span class="built_in">begin</span>(), left.<span class="built_in">end</span>(),</span><br><span class="line">                     right.<span class="built_in">begin</span>(), right.<span class="built_in">end</span>(), </span><br><span class="line">                     <span class="built_in">inserter</span>(*ret_lines, ret_lines-&gt;<span class="built_in">begin</span>()));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">QueryResult</span>(<span class="built_in">rep</span>(), ret_lines, left.<span class="built_in">get_file</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">NotQuery::eval</span><span class="params">(<span class="type">const</span> TextQuery&amp; text)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> result = query.<span class="built_in">eval</span>(text);</span><br><span class="line">    <span class="keyword">auto</span> ret_lines = std::make_shared&lt;std::set&lt;line_no&gt;&gt; ();</span><br><span class="line">    <span class="keyword">auto</span> beg = result.<span class="built_in">begin</span>(), end = result.<span class="built_in">end</span>();</span><br><span class="line">    <span class="keyword">auto</span> sz = result.<span class="built_in">get_file</span>()-&gt;<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> n = <span class="number">0</span>; n != sz; n++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(beg == end || *beg != n) </span><br><span class="line">            ret_lines-&gt;<span class="built_in">insert</span>(n);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(beg != end) </span><br><span class="line">            ++beg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">QueryResult</span>(<span class="built_in">rep</span>(), ret_lines, result.<span class="built_in">get_file</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::ifstream <span class="title">infile</span><span class="params">(<span class="string">&quot;text.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">TextQuery <span class="title">file</span><span class="params">(infile)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Query q =  Query(&quot;Daddy&quot;);</span></span><br><span class="line">    <span class="comment">// Query q = ~ Query(&quot;Alice&quot;);</span></span><br><span class="line">    <span class="comment">// Query q = Query(&quot;hair&quot;) | Query(&quot;Alice&quot;);</span></span><br><span class="line">    <span class="comment">// Query q = Query(&quot;hair&quot;) &amp; Query(&quot;Alice&quot;);</span></span><br><span class="line">    Query q = <span class="built_in">Query</span>(<span class="string">&quot;fiery&quot;</span>) &amp; <span class="built_in">Query</span>(<span class="string">&quot;bird&quot;</span>) | <span class="built_in">Query</span>(<span class="string">&quot;wind&quot;</span>);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> results = q.<span class="built_in">eval</span>(file);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Executing Query for: &quot;</span> &lt;&lt; q &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">print</span>(std::cout, results) &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    infile.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上面代码缺失了处理标点符号的逻辑，应此输出与答案不一致，但缺失部分都对的上。处理标点符号的逻辑我就不写了，<del>应该不难</del>。</p><p>贴个测试用例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Alice Emma has long flowing red hair. </span><br><span class="line">Her Daddy says when the wind blows </span><br><span class="line">through her hair, it looks almost alive, </span><br><span class="line">like a fiery bird in flight. </span><br><span class="line">A beautiful fiery bird, he tells her, </span><br><span class="line">magical but untamed. </span><br><span class="line">&quot;Daddy, shush, there is no such thing,&quot; </span><br><span class="line">she tells him, at the same time wanting </span><br><span class="line">him to tell her more.</span><br><span class="line">Shyly, she asks, &quot;I mean, Daddy, is there?&quot;</span><br></pre></td></tr></table></figure><h2 id="单例模式的模板形式"><a href="#单例模式的模板形式" class="headerlink" title="单例模式的模板形式"></a>单例模式的模板形式</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line">    <span class="function"><span class="type">static</span> T* <span class="title">getInstance</span><span class="params">(Args... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pInstance == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            _pInstance = <span class="keyword">new</span> <span class="built_in">T</span>(args...);</span><br><span class="line">            _ar; <span class="comment">// 为了在模板参数推导时创建 ar 对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _pInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">AutoRelease</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">AutoRelease</span>() &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;AutoRelease()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ~<span class="built_in">AutoRelease</span>() &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;~AutoRelease()&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">if</span>(_pInstance) &#123;</span><br><span class="line">                <span class="keyword">delete</span> _pInstance;</span><br><span class="line">                _pInstance = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Singleton</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Singleton()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">/* _ar; */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Singleton</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Singleton()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> T* _pInstance;</span><br><span class="line">    <span class="type">static</span> AutoRelease _ar;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T* Singleton&lt;T&gt;::_pInstance = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> Singleton&lt;T&gt;::AutoRelease Singleton&lt;T&gt;::_ar;</span><br><span class="line"><span class="comment">// typename 表明是一个类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    point* pt1 = Singleton&lt;point&gt;::<span class="built_in">getInstance</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    point* pt2 = Singleton&lt;point&gt;::<span class="built_in">getInstance</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    pt1-&gt;<span class="built_in">print</span>();</span><br><span class="line">    pt2-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;pt1 = &quot;</span> &lt;&lt; pt1 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;pt2 = &quot;</span> &lt;&lt; pt2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">AutoRelease()</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">pt1 = 0x5ff914de52c0</span></span><br><span class="line"><span class="comment">pt2 = 0x5ff914de52c0</span></span><br><span class="line"><span class="comment">~AutoRelease()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="再次封装-log4cpp"><a href="#再次封装-log4cpp" class="headerlink" title="再次封装 log4cpp"></a>再次封装 log4cpp</h2><p>实现log4cpp的封装，使其可以像printf一样使用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// testlogger.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myLogger.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> wd;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">10</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world %d%s\n&quot;</span>, number,pstr);</span><br><span class="line">    <span class="built_in">LogError</span>(<span class="string">&quot;hello world, %s %d\n&quot;</span>, pstr, number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">hello world 10hello world</span></span><br><span class="line"><span class="comment">Mylogger()</span></span><br><span class="line"><span class="comment">2049-02-30 22:45:08,333 MyCat [ERROR] [testlogger.cc:test:11]hello world, hello world 10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myLogger.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _MYLOGGER_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _MYLOGGER_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Category.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> log4cpp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mylogger</span>&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Priority</span> &#123;</span><br><span class="line">        ERROR = <span class="number">300</span>, </span><br><span class="line">        WARN, </span><br><span class="line">        INFO, </span><br><span class="line">        DEBUG</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> Mylogger* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destory</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">warn</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg, Args... args)</span></span>&#123;</span><br><span class="line">        _mycat.<span class="built_in">warn</span>(msg, args...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg, Args... args)</span></span>&#123;</span><br><span class="line">        _mycat.<span class="built_in">error</span>(msg, args...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">info</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg, Args... args)</span></span>&#123;</span><br><span class="line">        _mycat.<span class="built_in">info</span>(msg, args...);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">debug</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg, Args... args)</span></span>&#123;</span><br><span class="line">        _mycat.<span class="built_in">debug</span>(msg, args...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">warn</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">info</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">debug</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setPriority</span><span class="params">(Priority p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Mylogger</span>();</span><br><span class="line">    ~<span class="built_in">Mylogger</span>();</span><br><span class="line"></span><br><span class="line">    log4cpp::Category&amp; _mycat;</span><br><span class="line">    <span class="type">static</span> Mylogger* _pInstance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> prefix(msg) string(<span class="string">&quot;[&quot;</span>)                   \</span></span><br><span class="line"><span class="meta">    .append(__FILE__).append(<span class="string">&quot;:&quot;</span>)                 \</span></span><br><span class="line"><span class="meta">    .append(__FUNCTION__).append(<span class="string">&quot;:&quot;</span>)             \</span></span><br><span class="line"><span class="meta">    .append(std::to_string(__LINE__)).append(<span class="string">&quot;]&quot;</span>) \</span></span><br><span class="line"><span class="meta">    .append(msg).c_str()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ##__VA_ARGS__ 宏前面加上 ## 的作用在于，当可变参数个数变为零时，</span></span><br><span class="line"><span class="comment">// 这里的 ## 会去掉前面多余的 “,”  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LogWarn(msg, ...) Mylogger::getInstance()-&gt;warn(prefix(msg), ##__VA_ARGS__);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LogError(msg, ...) Mylogger::getInstance()-&gt;<span class="keyword">error</span>(prefix(msg), ##__VA_ARGS__);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LogInfo(msg, ...) Mylogger::getInstance()-&gt;info(prefix(msg), ##__VA_ARGS__);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LogDebug(msg, ...) Mylogger::getInstance()-&gt;debug(prefix(msg), ##__VA_ARGS__);</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace wd</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myLogger.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myLogger.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/PatternLayout.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/OstreamAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/FileAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Priority.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line">Mylogger* Mylogger::_pInstance = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Mylogger* <span class="title">Mylogger::getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">nullptr</span> == _pInstance) &#123;</span><br><span class="line">        _pInstance = <span class="keyword">new</span> <span class="built_in">Mylogger</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _pInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::destory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_pInstance) &#123;</span><br><span class="line">        <span class="keyword">delete</span> _pInstance;</span><br><span class="line">        _pInstance = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mylogger::<span class="built_in">Mylogger</span>()</span><br><span class="line">: _mycat(log4cpp::Category::<span class="built_in">getRoot</span>().<span class="built_in">getInstance</span>(<span class="string">&quot;MyCat&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> log4cpp;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Mylogger()&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    PatternLayout* ppl1 = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">    ppl1-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d %c [%p] %m%n&quot;</span>);</span><br><span class="line">    PatternLayout* ppl2 = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">    ppl2-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d %c [%p] %m%n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的目的地</span></span><br><span class="line">    OstreamAppender* poa = <span class="keyword">new</span> <span class="built_in">OstreamAppender</span>(<span class="string">&quot;OSA&quot;</span>, &amp;cout);</span><br><span class="line">    poa-&gt;<span class="built_in">setLayout</span>(ppl1);</span><br><span class="line">    FileAppender* pfa = <span class="keyword">new</span> <span class="built_in">FileAppender</span>(<span class="string">&quot;FA&quot;</span>, <span class="string">&quot;zy.txt&quot;</span>);</span><br><span class="line">    pfa-&gt;<span class="built_in">setLayout</span>(ppl2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志的过滤器</span></span><br><span class="line">    _mycat.<span class="built_in">setPriority</span>(Priority::DEBUG);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目的地</span></span><br><span class="line">    _mycat.<span class="built_in">addAppender</span>(poa);</span><br><span class="line">    _mycat.<span class="built_in">addAppender</span>(pfa);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mylogger::~<span class="built_in">Mylogger</span>()&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;~Mylogger()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Category::<span class="built_in">shutdown</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::warn</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>&#123;</span><br><span class="line">    _mycat.<span class="built_in">warn</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::error</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>&#123;</span><br><span class="line">    _mycat.<span class="built_in">error</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::debug</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>&#123;</span><br><span class="line">    _mycat.<span class="built_in">debug</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::info</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>&#123;</span><br><span class="line">    _mycat.<span class="built_in">info</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::setPriority</span><span class="params">(Priority p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WARN:</span><br><span class="line">        _mycat.<span class="built_in">setPriority</span>(log4cpp::Priority::WARN);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ERROR:</span><br><span class="line">        _mycat.<span class="built_in">setPriority</span>(log4cpp::Priority::ERROR);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> INFO:</span><br><span class="line">        _mycat.<span class="built_in">setPriority</span>(log4cpp::Priority::INFO);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DEBUG:</span><br><span class="line">        _mycat.<span class="built_in">setPriority</span>(log4cpp::Priority::DEBUG);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="comment">// namespace wd</span></span><br></pre></td></tr></table></figure><h2 id="unordered-multi-set-map"><a href="#unordered-multi-set-map" class="headerlink" title="unordered_(multi)set/map"></a>unordered_(multi)set/map</h2><p>Unordered associative containers implement unsorted (hashed) data structures that can be quickly searched (O(1) average, O(n) worst-case complexity).</p><ul><li><code>unordered_set</code>: collection of unique keys, hashed by keys</li><li><code>unordered_map</code>: collection of key-value pairs, hashed by keys, keys are unique</li><li><code>unordered_multiset</code>: collection of keys, hashed by keys</li><li><code>unordered_multimap</code>: collection of key-value pairs, hashed by keys</li></ul><p><code>std::hash&lt;Key&gt;::operator()</code>例子（来自 cppreference ）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Employee</span></span><br><span class="line">&#123;</span><br><span class="line">    std::string name;</span><br><span class="line">    std::<span class="type">uint64_t</span> ID;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> std</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">hash</span>&lt;Employee&gt;</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">std::<span class="type">uint64_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> Employee&amp; employee)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">             <span class="comment">// computes the hash of an employee using a variant</span></span><br><span class="line">             <span class="comment">// of the Fowler-Noll-Vo hash function</span></span><br><span class="line">             <span class="keyword">constexpr</span> std::<span class="type">uint64_t</span> prime&#123;<span class="number">0x100000001B3</span>&#125;;</span><br><span class="line">             std::<span class="type">uint64_t</span> result&#123;<span class="number">0xcbf29ce484222325</span>&#125;;</span><br><span class="line"> </span><br><span class="line">             <span class="keyword">for</span> (std::<span class="type">uint64_t</span> i&#123;&#125;, ie = employee.name.<span class="built_in">size</span>(); i != ie; ++i)</span><br><span class="line">                 result = (result * prime) ^ employee.name[i];</span><br><span class="line"> </span><br><span class="line">             <span class="keyword">return</span> result ^ (employee.ID &lt;&lt; <span class="number">1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Employee employee;</span><br><span class="line">    employee.name = <span class="string">&quot;Zaphod Beeblebrox&quot;</span>;</span><br><span class="line">    employee.ID = <span class="number">42</span>;</span><br><span class="line"> </span><br><span class="line">    std::hash&lt;Employee&gt; hash_fn;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">hash_fn</span>(employee) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">12615575401975788567</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>unordered_set 的模板形式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Key</span>,</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Hash</span> = std::hash&lt;Key&gt;,</span><br><span class="line">    <span class="keyword">class</span> KeyEqual = std::equal_to&lt;Key&gt;,</span><br><span class="line">    <span class="keyword">class</span> Allocator = std::allocator&lt;Key&gt;</span><br><span class="line">&gt; <span class="keyword">class</span> unordered_set;</span><br></pre></td></tr></table></figure><p>unordered_set 特性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unordered_set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Container&amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;elem : con)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; number = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10  2  5  9  7  3  1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>对于自定义类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unordered_set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        <span class="comment">// std::cout &lt;&lt; &quot;point(int, int)&quot; &lt;&lt; std::endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        <span class="comment">// std::cout &lt;&lt; &quot;~point()&quot; &lt;&lt; std::endl; // for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        <span class="comment">// std::cout &lt;&lt; &quot;point(const point&amp;)&quot; &lt;&lt; std::endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getY</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iy;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> std</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">template</span>&lt;&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">hash</span>&lt;point&gt;</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">std::<span class="type">uint64_t</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> point&amp; rhs)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 设计哈希函数</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;we&#x27;ve hashed here&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> (rhs.<span class="built_in">getX</span>() &lt;&lt; <span class="number">1</span>) ^ (rhs.<span class="built_in">getY</span>() &lt;&lt; <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="comment">// namespace std</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> point&amp; lhs, <span class="type">const</span> point&amp; rhs) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;we&#x27;ve compared == here&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> (lhs.<span class="built_in">getX</span>() == rhs.<span class="built_in">getX</span>())</span><br><span class="line">           &amp;&amp; (lhs.<span class="built_in">getY</span>() == rhs.<span class="built_in">getY</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; rhs.ix</span><br><span class="line">       &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; rhs.iy &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Container&amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;elem : con)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    unordered_set&lt;point&gt; number = &#123;</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">-1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">-2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">8</span>, <span class="number">10</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve compared == here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">(8, 10)  (3, 2)  (-1, 2)  (1, -2)  (1, 2)  (4, 5)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>对于上面代码实现的功能而言，也可以使用函数对象（仿函数）的方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unordered_set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        <span class="comment">// std::cout &lt;&lt; &quot;point(int, int)&quot; &lt;&lt; std::endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        <span class="comment">// std::cout &lt;&lt; &quot;~point()&quot; &lt;&lt; std::endl; // for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        <span class="comment">// std::cout &lt;&lt; &quot;point(const point&amp;)&quot; &lt;&lt; std::endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getY</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iy;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashPoint</span> &#123;</span><br><span class="line">    <span class="function">std::<span class="type">uint64_t</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> point&amp; rhs)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设计哈希函数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;we&#x27;ve hashed here&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> (rhs.<span class="built_in">getX</span>() &lt;&lt; <span class="number">1</span>) ^ (rhs.<span class="built_in">getY</span>() &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> point&amp; lhs, <span class="type">const</span> point&amp; rhs) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;we&#x27;ve compared == here&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> (lhs.<span class="built_in">getX</span>() == rhs.<span class="built_in">getX</span>())</span><br><span class="line">           &amp;&amp; (lhs.<span class="built_in">getY</span>() == rhs.<span class="built_in">getY</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; rhs.ix</span><br><span class="line">       &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; rhs.iy &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Container&amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;elem : con)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    unordered_set&lt;point, HashPoint&gt; number = &#123;</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">-1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">-2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">8</span>, <span class="number">10</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve compared == here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">(8, 10)  (3, 2)  (-1, 2)  (1, -2)  (1, 2)  (4, 5) </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>也可以这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unordered_set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y) &#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getY</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iy;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashPoint</span> &#123;</span><br><span class="line">    <span class="function">std::<span class="type">uint64_t</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> point&amp; rhs)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设计哈希函数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;we&#x27;ve hashed here&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> (rhs.<span class="built_in">getX</span>() &lt;&lt; <span class="number">1</span>) ^ (rhs.<span class="built_in">getY</span>() &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> std</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">equal_to</span>&lt;point&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> point&amp; lhs, <span class="type">const</span> point&amp; rhs)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;kafaka.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> (lhs.<span class="built_in">getX</span>() == rhs.<span class="built_in">getX</span>())</span><br><span class="line">               &amp;&amp; (lhs.<span class="built_in">getY</span>() == rhs.<span class="built_in">getY</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125; <span class="comment">// namespace std</span></span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; rhs.ix</span><br><span class="line">       &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; rhs.iy &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Container&amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;elem : con)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    unordered_set&lt;point, HashPoint&gt; number = &#123;</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">-1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">-2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">8</span>, <span class="number">10</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">kafaka.</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">(8, 10)  (3, 2)  (-1, 2)  (1, -2)  (1, 2)  (4, 5) </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>还可以这样（闲的）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unordered_set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y) &#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getY</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iy;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashPoint</span> &#123;</span><br><span class="line">    <span class="function">std::<span class="type">uint64_t</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> point&amp; rhs)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设计哈希函数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;we&#x27;ve hashed here&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> (rhs.<span class="built_in">getX</span>() &lt;&lt; <span class="number">1</span>) ^ (rhs.<span class="built_in">getY</span>() &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">EqualToPoint</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> point&amp; lhs, <span class="type">const</span> point&amp; rhs)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;kafaka2.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> (lhs.<span class="built_in">getX</span>() == rhs.<span class="built_in">getX</span>())</span><br><span class="line">               &amp;&amp; (lhs.<span class="built_in">getY</span>() == rhs.<span class="built_in">getY</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; rhs.ix</span><br><span class="line">       &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; rhs.iy &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Container&amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;elem : con)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    unordered_set&lt;point, HashPoint, EqualToPoint&gt; number = &#123;</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">-1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">-2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">8</span>, <span class="number">10</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">kafaka.</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">(8, 10)  (3, 2)  (-1, 2)  (1, -2)  (1, 2)  (4, 5) </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>对于 unordered_multiset 的情况：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unordered_multiset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y) &#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getY</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iy;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashPoint</span> &#123;</span><br><span class="line">    <span class="function">std::<span class="type">uint64_t</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> point&amp; rhs)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设计哈希函数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;we&#x27;ve hashed here&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> (rhs.<span class="built_in">getX</span>() &lt;&lt; <span class="number">1</span>) ^ (rhs.<span class="built_in">getY</span>() &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">EqualToPoint</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> point&amp; lhs, <span class="type">const</span> point&amp; rhs)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;kafaka2.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> (lhs.<span class="built_in">getX</span>() == rhs.<span class="built_in">getX</span>())</span><br><span class="line">               &amp;&amp; (lhs.<span class="built_in">getY</span>() == rhs.<span class="built_in">getY</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; rhs.ix</span><br><span class="line">       &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; rhs.iy &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Container&amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;elem : con)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    unordered_multiset&lt;point, HashPoint, EqualToPoint&gt; number = &#123;</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">-1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">-2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">8</span>, <span class="number">10</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">kafaka2.</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">(-1, 2)  (1, -2)  (1, 2)  (1, 2)  (8, 10)  (3, 2)  (4, 5)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>unordered_map 和 unordered_multimap 大体上和上面思路相同。</p><p>针对 string 而言，已经实现了 hash ，所以就不需要再进行 hash 函数的设计。</p><h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">T</span>,</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Container</span> = std::vector&lt;T&gt;,</span><br><span class="line">    <span class="keyword">class</span> Compare = std::less&lt;<span class="keyword">typename</span> Container::value_type&gt; <span class="comment">// 萃取</span></span><br><span class="line">&gt; <span class="keyword">class</span> priority_queue;</span><br></pre></td></tr></table></figure><p>这部分内容可以参考之前的笔记，或者参考：<br><a href="https://en.cppreference.com/w/cpp/container/priority_queue">https://en.cppreference.com/w/cpp/container/priority_queue</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前情提要： &lt;a href=&quot;https://loveofpeach.github.io/posts/2249c81f.html&quot;&gt;CppNote2&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;类型转换&quot;&gt;&lt;a href=&quot;#类型转换&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="编程" scheme="https://loveofpeach.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://loveofpeach.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Redis Note</title>
    <link href="https://loveofpeach.github.io/posts/ac87c2.html"/>
    <id>https://loveofpeach.github.io/posts/ac87c2.html</id>
    <published>2024-01-30T09:10:47.000Z</published>
    <updated>2024-02-06T13:47:01.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NoSQL-和-Redis-概述"><a href="#NoSQL-和-Redis-概述" class="headerlink" title="NoSQL 和 Redis 概述"></a>NoSQL 和 Redis 概述</h2><p>在日常的开发中，无不都是使用数据库来进行数据的存储，由于一般的系统任务中通常不会存在<strong>高并发</strong>的情况，所以这样看起来并没有什么问题，可是一旦涉及大数据量的需求，比如一些商品抢购的情景，或者是主页访问量瞬间较大的时候，单一使用数据库来保存数据的系统会因为面向磁盘，<strong>磁盘读/写速度比较慢</strong>的问题而存在严重的性能弊端，一瞬间成千上万的请求到来，需要系统在极短的时间内完成<strong>成千上万次的读/写操作</strong>，这个时候往往不是数据库能够承受的，极其容易造成数据库系统瘫痪，最终导致服务宕机的严重生产问题。</p><p>为了克服上述的问题，项目通常会引入 NoSQL 技术，这是一种<strong>基于内存</strong>的数据库，并且提供一定的持久化功能。</p><p>NoSQL，指的是<strong>非关系型数据库</strong>。NoSQL（<strong>Not Only SQL</strong>），是对不同于传统的关系型数据库的数据库管理系统的统称。对 NoSQL 最普遍的解释是”非关联型的”，强调 Key-Value Stores 和文档数据库的优点，而不是单纯的反对 RDBMS。</p><p><strong>NoSQL 用于超大规模数据的存储。</strong>（例如谷歌或 Facebook 每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p><p>NoSQL 数据库主要有以下四类：</p><ul><li>基于键值对 key-value 类型：Redis，memcached</li><li>列存储数据库 Column-oriented Graph：HBase</li><li>图形数据库 Graphs based：Neo4j</li><li>文档型数据库： MongoDB<ul><li>MongoDB是一个基于分布式文件存储的数据库，主要用来处理大量的文档。    </li></ul></li></ul><p>Redis 是什么？<br><strong>Re</strong>mote <strong>Di</strong>ctionary <strong>S</strong>ervice（远程字典服务器）<br>Redis 是一个开源（BSD许可）的，C语言编写的，高性能的数据结构存储系统，它可以用作<strong>数据库</strong>、<strong>缓存</strong>和<strong>消息中间件</strong>。它<strong>基于内存</strong>运行并支持<strong>持久化</strong>的 NoSQL 数据库，是当前最热门的 NoSQL 数据库之一。    </p><p>相关网站：</p><ul><li>redis中文官网：<a href="http://www.redis.cn/">http://www.redis.cn/</a></li><li>redis英文官网：<a href="https://redis.io/">https://redis.io/</a></li></ul><p>Redis 的特性：持久化、丰富的数据类型、数据备份（主从复制）。</p><p>Redis 的优点：</p><ul><li>性能极高</li><li>丰富的数据类型<ul><li>Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作</li></ul></li><li>原子性</li><li>丰富的特性<ul><li>Redis 支持 publish / subscribe 、通知、key 过期等特性</li></ul></li></ul><p>安装按官网走即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><p>Redis 是一个字典结构的存储服务器，而实际上一个 Redis 实例提供了多个用来存储数据的字典，客户端可以指定将数据存储在哪个字典中。这与我们熟知的在一个关系数据库实例中可以创建多个数据库类似，所以可以将其中的每个字典都理解成一个独立的数据库。</p><p>每个数据库对外都是一个从 0 开始的递增数字命名，Redis <strong>默认支持 16 个数据库</strong>（可以通过配置文件支持更多，无上限），可以通过配置 databases 来修改这一数字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; select 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[10]&gt; select 15</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[15]&gt; select 16</span><br><span class="line">(error) ERR DB index is out of range</span><br><span class="line">127.0.0.1:6379[15]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>进入 redis ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>数据库的切换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; select 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[10]&gt; select 15</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[15]&gt; select 16</span><br><span class="line">(error) ERR DB index is out of range</span><br><span class="line">127.0.0.1:6379[15]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>不言之教：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k2 200</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; dbsize</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k1&quot;</span><br><span class="line">2) &quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt; keys k?</span><br><span class="line">1) &quot;k1&quot;</span><br><span class="line">2) &quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt; set k12 12</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys k?</span><br><span class="line">1) &quot;k1&quot;</span><br><span class="line">2) &quot;k2&quot;</span><br></pre></td></tr></table></figure><p>删除 key ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k1&quot;</span><br><span class="line">2) &quot;k12&quot;</span><br><span class="line">3) &quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt; del k12</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; del k12</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><p>清除当前数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[1]&gt; set k1 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; dbsize</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[1]&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">(empty array)</span><br></pre></td></tr></table></figure><p>清空所有数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flushall</span><br></pre></td></tr></table></figure><p>判断某个 key 是否存在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k1&quot;</span><br><span class="line">2) &quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt; Exists k1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; Exists k12</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><p>把 key 从当前库移动到目标库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; move k1 15</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt; select 15</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[15]&gt; keys *</span><br><span class="line">1) &quot;k1&quot;</span><br></pre></td></tr></table></figure><p>查看 key 的类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; type k2</span><br><span class="line">string</span><br></pre></td></tr></table></figure><p>为给定的key设置过期的时间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt; Expire k2 10</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) 8</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) -2</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) -2</span><br><span class="line">127.0.0.1:6379&gt; set k1 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) -1</span><br></pre></td></tr></table></figure><p>在上面的命令中，-2 表示数据已经消失，-1 表示该数据不会过期。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p><img src="https://s2.loli.net/2024/01/31/fuDdGLaOZI1xyRs.png" alt="65-1.png"></p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>string 是 redis 最基本的类型，可以理解成一个 key 对应一个 value . 一个 string 类型的值最大能存储512MB .</p><p>string 类型是<strong>二进制安全</strong>的。意思是 redis 的 string <strong>可以包含任何数据</strong>。如 jpg 图片或序列化的对象。</p><p>设定指定key的值、获取指定key的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k2 20</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k3 hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;10&quot;</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;hello&quot;</span><br></pre></td></tr></table></figure><p>设置、获取多个给定的 key 值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mset k11 11 k12 12 k13 world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget k11 k12 k13</span><br><span class="line">1) &quot;11&quot;</span><br><span class="line">2) &quot;12&quot;</span><br><span class="line">3) &quot;world&quot;</span><br></pre></td></tr></table></figure><p>二进制安全的体现（设置的是什么，获取的就是什么）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k22 hello\0world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k22</span><br><span class="line">&quot;hello\\0world&quot;</span><br></pre></td></tr></table></figure><p>返回字符串的子串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE k3 0 1</span><br><span class="line">&quot;he&quot;</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE k3 0 3</span><br><span class="line">&quot;hell&quot;</span><br><span class="line">127.0.0.1:6379&gt; set k4 askgalfja;fegrga</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">&quot;askgalfja;fegrga&quot;</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE k4 0 -1</span><br><span class="line">&quot;askgalfja;fegrga&quot;</span><br></pre></td></tr></table></figure><p>覆盖字符串的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; SETRANGE k3 0 wor</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;worlo&quot;</span><br><span class="line">127.0.0.1:6379&gt; SETRANGE k3 waipoqiaoyaoayao</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;setrange&#x27; command</span><br><span class="line">127.0.0.1:6379&gt; SETRANGE k3 0 waipoqiaoyaoayao</span><br><span class="line">(integer) 16</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;waipoqiaoyaoayao&quot;</span><br></pre></td></tr></table></figure><p>设新值，返回旧值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;10&quot;</span><br><span class="line">127.0.0.1:6379&gt; GETSET k1 hello</span><br><span class="line">&quot;10&quot;</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;hello&quot;</span><br></pre></td></tr></table></figure><p>set 值，并设置过期时间（以秒为单位）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SETEX k1 10 200</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;200&quot;</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) -2</span><br></pre></td></tr></table></figure><p>加一 / 加很多（被加的必须是数值）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">(integer) 101</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">(integer) 102</span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">(integer) 103</span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">(integer) 104</span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">(integer) 105</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;105&quot;</span><br><span class="line">127.0.0.1:6379&gt; INCRBY k1 95</span><br><span class="line">(integer) 200</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;200&quot;</span><br></pre></td></tr></table></figure><h3 id="list（双向链表）"><a href="#list（双向链表）" class="headerlink" title="list（双向链表）"></a>list（双向链表）</h3><p>插入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush list1 1 2 3 4 5 6</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; rpush list1 7 8 9 10</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line"> 1) &quot;6&quot;</span><br><span class="line"> 2) &quot;5&quot;</span><br><span class="line"> 3) &quot;4&quot;</span><br><span class="line"> 4) &quot;3&quot;</span><br><span class="line"> 5) &quot;2&quot;</span><br><span class="line"> 6) &quot;1&quot;</span><br><span class="line"> 7) &quot;7&quot;</span><br><span class="line"> 8) &quot;8&quot;</span><br><span class="line"> 9) &quot;9&quot;</span><br><span class="line">10) &quot;10&quot;</span><br></pre></td></tr></table></figure><p>出队：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpop list1</span><br><span class="line">&quot;6&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpop list1</span><br><span class="line">&quot;10&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;1&quot;</span><br><span class="line">6) &quot;7&quot;</span><br><span class="line">7) &quot;8&quot;</span><br><span class="line">8) &quot;9&quot;</span><br></pre></td></tr></table></figure><p>通过下标设置列表元素的值，下标从0开始：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lset list1 5 1000</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;1&quot;</span><br><span class="line">6) &quot;1000&quot;</span><br><span class="line">7) &quot;8&quot;</span><br><span class="line">8) &quot;9&quot;</span><br></pre></td></tr></table></figure><p>通过下标获取列表中的元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LINDEX list1 5</span><br><span class="line">&quot;1000&quot;</span><br></pre></td></tr></table></figure><p>从队头开始移除 count 个值为 value 的列表元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LREM key count value</span><br></pre></td></tr></table></figure><p>对一个列表进行修剪（trim），即，只保留指定区间内的元素，其余元素将被删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LTRIM list1 2 5</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;3&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;1&quot;</span><br><span class="line">4) &quot;1000&quot;</span><br></pre></td></tr></table></figure><p>总结： redis 中的区间是左闭右闭的。</p><p>在列表的元素前插入元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; linsert list1 after 1 200</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) &quot;3&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;1&quot;</span><br><span class="line">4) &quot;200&quot;</span><br><span class="line">5) &quot;1000&quot;</span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>set 是 String 类型的无序集合。集合成员是唯一的，集合中不能出现重复的数据。</p><p>集合通过哈希表实现，增、删、查的复杂度为 O(1) .</p><p>增：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset1 1 3 5 7 8 3 5 1</span><br><span class="line">(integer) 5</span><br></pre></td></tr></table></figure><p>查看个数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scard myset1</span><br><span class="line">(integer) 5</span><br></pre></td></tr></table></figure><p>显示（此例有序系巧合）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers myset1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;3&quot;</span><br><span class="line">3) &quot;5&quot;</span><br><span class="line">4) &quot;7&quot;</span><br><span class="line">5) &quot;8&quot;</span><br></pre></td></tr></table></figure><p>其它命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 判断member元素是否是集合key的成员</span><br><span class="line">SISMEMBER key member</span><br><span class="line"></span><br><span class="line"># 将member元素从source集合移动到destination集合</span><br><span class="line">SMOVE source destination member</span><br><span class="line"></span><br><span class="line">SREM key value       # 删除集合中值为value的元素</span><br><span class="line"></span><br><span class="line">SRANDMEMBER key num  # 在集合中随机选出num个</span><br><span class="line"></span><br><span class="line"># 移除并返回集合中一个/num个随机元素</span><br><span class="line">SPOP key [num]</span><br><span class="line"></span><br><span class="line">SDIFF key1 key2      # 求差集，key1-key2</span><br><span class="line">SINTER key1 key2     # 求交集</span><br><span class="line">SUNION key1 key2     # 求并集</span><br></pre></td></tr></table></figure><h3 id="sorted-set（zset）"><a href="#sorted-set（zset）" class="headerlink" title="sorted set（zset）"></a>sorted set（zset）</h3><p>有序集合和集合一样也是 string 类型元素的集合。</p><p>不同的是每个元素都会关联一个<strong>double类型的分数</strong>。redis 通过分数来为集合中的成员从小到大排序。</p><p>有序集合的成员是唯一的，但分数可以重复。</p><p>增：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd zset1 10 hello 30 world 20 peking</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><p>获取有序集合的成员数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcard zset1</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><p>计算在有序集合中指定分数区间的成员数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcount zset1 10 100</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zcount zset1 10 15</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><p>查看按照权重排序后的下标对应的元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGE zset1 0 1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;peking&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE zset1 0 1 withscores</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;10&quot;</span><br><span class="line">3) &quot;peking&quot;</span><br><span class="line">4) &quot;20&quot;</span><br></pre></td></tr></table></figure><p><del>通过字典区间返回有序集合的成员</del>（分数要一致）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd zset2 10 ohmyzsh 10 ohmygod 10 hello 10 world</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; zrangebylex zset2 [h [o</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebylex zset2 [h [ok</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;ohmygod&quot;</span><br><span class="line">3) &quot;ohmyzsh&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebylex zset2 [h [w</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;ohmygod&quot;</span><br><span class="line">3) &quot;ohmyzsh&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebylex zset2 [h [www</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;ohmygod&quot;</span><br><span class="line">3) &quot;ohmyzsh&quot;</span><br><span class="line">4) &quot;world&quot;</span><br></pre></td></tr></table></figure><p>容易发现上面的区间是左闭右开的。</p><p>其它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 通过分数返回有序集合指定区间内的成员</span><br><span class="line">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] </span><br><span class="line"></span><br><span class="line">ZSCORE key member   # 返回有序集中，成员的分数值</span><br><span class="line"></span><br><span class="line"># 返回有序集中指定分数区间内的成员，分数从高到低排序</span><br><span class="line">ZREVRANGEBYSCORE key max min [WITHSCORES]</span><br></pre></td></tr></table></figure><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>hash 是一个 string 类型的 field（字段）和 value（值）的映射表，hash 特别适合用于存储对象。</p><p>Key-value 模式不变，但 value 是一个键值对。</p><p>Redis 中的 hash 并不是采用哈希实现的，而是类似于以下方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map&lt;key, map&lt;key1, value&gt;&gt;</span><br></pre></td></tr></table></figure><p><code>HSET key field value</code>将哈希表 key 中的字段 field 的值设为 value ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset people name Mizuho gender woman age 17</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><p>获取给定字段的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hget people name</span><br><span class="line">&quot;Mizuho&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget people gender</span><br><span class="line">&quot;woman&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget people age</span><br><span class="line">&quot;17&quot;</span><br></pre></td></tr></table></figure><p>获取字段和值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hkeys people</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;gender&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">127.0.0.1:6379&gt; hvals people</span><br><span class="line">1) &quot;Mizuho&quot;</span><br><span class="line">2) &quot;woman&quot;</span><br><span class="line">3) &quot;17&quot;</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="Units"><a href="#Units" class="headerlink" title="Units"></a>Units</h3><p><img src="https://bu.dusays.com/2024/02/02/65bc7bca2f40d.png" alt="65-2.png"></p><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bind 127.0.0.1      # 绑定的ip</span><br><span class="line">protected-mode yes  # 保护模式</span><br><span class="line">port  6379          # 端口</span><br></pre></td></tr></table></figure><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes     # 以守护进程方式运行</span><br><span class="line">loglevel  notice  # 日志级别</span><br><span class="line">database  16      # 数据库数量 </span><br></pre></td></tr></table></figure><h3 id="snapshoting"><a href="#snapshoting" class="headerlink" title="snapshoting"></a>snapshoting</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">save 900 1              </span><br><span class="line"># 900秒(15分钟)后，若至少有1个key发生变化，dump内存快照</span><br><span class="line"></span><br><span class="line">save 300 10            </span><br><span class="line"># 300秒(5分钟)后，若至少有10个key发生变化，dump内存快照</span><br><span class="line"></span><br><span class="line">save 60 10000       </span><br><span class="line"># 60秒(1分钟)后，若至少有10000个key发生变化，dump内存快照</span><br></pre></td></tr></table></figure><p>（以下信息可能过期）：</p><ul><li>快照文件名 <code>dbfilename dump.rdb</code></li><li>保存目录名 <code>/var/lib/redis/6379</code></li></ul><h3 id="APPEND-ONLY-MODE"><a href="#APPEND-ONLY-MODE" class="headerlink" title="APPEND ONLY MODE"></a>APPEND ONLY MODE</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 是否使用AOF持久化方式。默认不使用</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line"># 持久化的AOF文件名</span><br><span class="line">appendfilename &quot;appendonly6381.aof&quot;</span><br><span class="line"></span><br><span class="line"># 在Redis的配置文件中存在三种AOF同步方式，分别是：</span><br><span class="line">appendfsync always     #每次有数据修改发生时都会写入AOF文件。</span><br><span class="line">appendfsync everysec   #每秒钟同步一次，该策略为AOF的缺省策略。</span><br><span class="line">appendfsync no         #从不同步。高效但是数据不会被持久化。</span><br></pre></td></tr></table></figure><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="分类、概述"><a href="#分类、概述" class="headerlink" title="分类、概述"></a>分类、概述</h3><p>Redis 持久化分为 RDB 持久化和 AOF 持久化：前者将当前数据保存到硬盘（原理是将 Reids 在内存中的数据库记录定时 dump 到磁盘上的 RDB 持久化），后者则是将每次执行的写命令保存到硬盘（原理是将 Reids 的操作日志以追加的方式写入文件，类似于 MySQL 的 binlog）；由于 AOF 持久化的实时性更好，即当进程意外退出时丢失的数据更少，因此 AOF 是目前主流的持久化方式，不过 RDB 持久化仍然有其用武之地。</p><p>RDB 持久化方式在指定的时间间隔内对数据进行快照存储。</p><p>AOF 持久化方式记录每次写操作，服务器重启时会重新执行这些命令以恢复原始数据，AOF 命令以 redis 协议追加。Redis 还能对 AOF 文件进行后台重写，使得 AOF 文件的体积不至于过大。</p><p>可以同时开启两种持久化方式。这种情况下，redis 重启时会优先载入 AOF 文件来恢复原始的数据。</p><h3 id="RDB-方式"><a href="#RDB-方式" class="headerlink" title="RDB 方式"></a>RDB 方式</h3><p>触发 RDB 快照：</p><ol><li><strong>在指定的时间间隔内，执行指定次数的写操作</strong></li><li>执行<code>save</code>（阻塞， 只管保存快照，其他的等待） 或者 bgsave （异步）命令</li><li>执行 flushall 命令，清空数据库所有数据</li><li>执行 shutdown 命令，保证服务器正常关闭且不丢失任何数据</li></ol><p>RDB 方式的优点：</p><ol><li>适合大规模的数据恢复，与 AOF 相比,在恢复大的数据集时，RDB 方式更快。</li><li>若业务对数据完整性和一致性要求不高，RDB 是很好的选择。</li></ol><p>RDB方式的缺点：</p><ol><li>数据的完整性和一致性不高，因为 RDB 可能在最后一次备份时宕机了。</li><li><strong>备份时占用内存</strong>，因为 Redis 在备份时会 fork 一个子进程，将数据写入一个临时文件（此时内存中的数据是原来的两倍），最后再将临时文件替换之前的备份文件。<br><img src="https://bu.dusays.com/2024/02/02/65bc8c7b21612.jpeg" alt="65-3.jpeg"></li></ol><h3 id="AOF-方式"><a href="#AOF-方式" class="headerlink" title="AOF 方式"></a>AOF 方式</h3><p>默认不开启 AOF 持久化方式，需要修改配置打开。</p><p>默认的 AOF 持久化策略是每秒钟 fsync 一次（把缓存中的写指令记录到磁盘中），因为在这种情况下，redis 仍可以保持高性能，而即使故障，也只会丢失最近 1 秒的数据。</p><p>重写（rewrite）：<br>AOF 的运作方式是不断地将命令追加到文件末尾，随着写入命令的增加， AOF 文件也会越来越大。例如，若对一个计数器调用 100 次<code>INCR</code>，那么仅为了保存这个计数器的当前值，AOF 文件就需要使用 100 条记录（entry）。而实际上，只用一条<code>SET</code>命令就足够了。<br>为此，Redis 支持一种特性，可以在不打断服务客户端的情况下，对 AOF 文件进行重建（rebuild）。</p><p>执行<code>BGREWRITEAOF</code>命令， Redis 将生成一个新的 AOF 文件，包含重建当前数据集所需的最少命令。Redis 2.2 需要手动执行<code>BGREWRITEAOF</code>命令；Redis 2.4 则可以自动触发 AOF 重写。</p><p>Redis 会记录上次重写时的 AOF 大小，默认配置是当 AOF 文件大小是上次 rewrite 后大小的一倍且文件大于64M时触发：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>保证数据的完整性和一致性</li><li>AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件易读性好，对文件进行分析（parse）也很轻松。导出（export）AOF 文件也非常简单：例如，若不小心执行了<code>FLUSHALL</code>命令，但只要<code>AOF</code>文件未被重写，那么只要停止服务器，移除 AOF 文件末尾的<code>FLUSHALL</code>命令，并重启 Redis，就可以将数据集恢复到<code>FLUSHALL</code>执行前的状态。</li></ul><p>缺点：</p><ul><li>大量数据恢复的时候，执行时间长</li><li>对于相同的数据集来说，AOF 文件的体积通常大于 RDB 文件的体积</li></ul><p>若只有 aof 持久化的方式，且 aof 文件损坏，则 redis 服务器无法启动。</p><p>损坏的 aof 文件修复，可尝试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo redis-check-aof --fix 文件名</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 开启事务</span><br><span class="line">multi</span><br><span class="line"></span><br><span class="line"># 提交事务</span><br><span class="line">exec</span><br></pre></td></tr></table></figure><p>Redis 事务可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会序列化，<strong>按顺序地串行化执行</strong>，而不会被其他命令插入，不许加塞。</p><p>Redis 事务有以下三个重要的保证：</p><ol><li>批量操作在发送 EXEC 命令前被放入队列缓存。</li><li>收到 EXEC 命令后进入事务执行，<strong>事务中任意命令执行失败，其余的命令依然被执行</strong>。</li><li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li></ol><p>一个事务从开始到执行会经历以下三个阶段：</p><ol><li>开始事务</li><li>命令入队</li><li>执行事务</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k2 hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k3 300</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) &quot;300&quot;</span><br><span class="line">3) (integer) 101</span><br></pre></td></tr></table></figure><p>redis 的事务不具有原子性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k4 400</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) (error) ERR value is not an integer or out of range</span><br><span class="line">2) OK</span><br><span class="line">3) &quot;400&quot;</span><br><span class="line">4) (integer) 102</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;102&quot;</span><br></pre></td></tr></table></figure><p>EXECABORT Transaction discarded because of previous errors :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushall</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line">127.0.0.1:6379&gt; set k1 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k2 hello </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k3</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;set&#x27; command</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k4 400</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br></pre></td></tr></table></figure><p>取消事务，放弃执行事务块内的所有命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DISCARD</span><br></pre></td></tr></table></figure><p><code>WATCH key [key ...]</code>，监视一个（多个）key ，如果在事务执行之前这个（这些）key 被其他命令改动，那么事务将被打断。</p><p><code>UNWATCH</code>取消<code>WATCH</code>命令对所有 key 的监视。</p><center><p style="color: red";>- - - - - “监视” 演示 - - - - -</p></center><p>开始：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">2) &quot;k3&quot;</span><br><span class="line">3) &quot;k1&quot;</span><br></pre></td></tr></table></figure><p>terminal 1 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch k3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k3 400</span><br><span class="line">QUEUED</span><br></pre></td></tr></table></figure><p>terminal 2 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k3 500</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;500&quot;</span><br></pre></td></tr></table></figure><p>terminal 1 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;500&quot;</span><br></pre></td></tr></table></figure><center><p style="color: red";>- - - - - “监视” 演示 END - - - - -</p></center><p>一旦执行<code>EXEC</code>，<code>WATCH</code>监控会被取消。</p><h2 id="乐观锁、悲观锁"><a href="#乐观锁、悲观锁" class="headerlink" title="乐观锁、悲观锁"></a>乐观锁、悲观锁</h2><p>悲观锁：<br><strong>每次拿数据时都会先上锁</strong>。其他线程想要访问时，都需要阻塞挂起。传统的关系型数据库里用到了很多这种锁机制，如行锁、表锁、读锁、写锁等，都是在操作之前先上锁。</p><p>乐观锁（Optimistic Lock）【冲突检测和数据更新】：<br><strong>每次拿数据时不上锁</strong>。但更新时会使用版本号等机制，判断此期间内该数据是否被更新。乐观锁<strong>适用于多读</strong>的应用类型，可以提高吞吐量。数据库若提供类似于 write_condition 机制的其实都是乐观锁。</p><p>乐观锁策略：提交版本必须大于记录当前版本才能执行更新，一般会使用<strong>版本号机制</strong>或<strong>CAS操作</strong>实现。</p><p>version方式：<br>一般是在数据表中加上一个数据版本号 version 字段，表示数据被修改的次数，当数据被修改时，version 值加一。当线程 A 要更新数据值时，在读取数据的同时也会读取 version 值，提交更新时，若刚才读取到的 version 值和当前数据库中的 version 值相等时才真正执行更新，否则重试更新操作，直到更新成功。</p><p>CAS（Compare And Swap）操作方式：<br>CAS 是乐观锁技术，涉及到三个操作数，数据所在的内存值V，预期值A，新值B。当需要更新时，判断当前内存值V与之前取到的值A是否相等，若相等，则用新值更新，若失败则重试。一般情况下是一个自旋操作，即不断的重试。</p><h2 id="主从复制、哨兵模式"><a href="#主从复制、哨兵模式" class="headerlink" title="主从复制、哨兵模式"></a>主从复制、哨兵模式</h2><p>持久化侧重解决的是 Redis 数据的单机备份问题（从内存到硬盘的备份）；而主从复制则侧重解决数据的多机热备。此外，主从复制还可以实现负载均衡和故障恢复。</p><p>主从复制，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为主节点（master），后者称为从节点（slave）；数据的复制是<strong>单向</strong>的，只能由主节点到从节点。</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/M8RwlLZhtOI?si=clISeZjsqLiaNs6I" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><p>本节课的 PDF 笔记：</p><div class="row"><iframe src="https://drive.google.com/file/d/1AerFNG6KZ3hRKiEOYGkbOJrv_1Zbk5Y5/preview" style="width:100%; height:550px"></iframe></div><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>一般而言，热点数据会去做缓存，缓存由定时任务刷新，但定时刷新会产生一个问题：当缓存服务器重启或者大量缓存集中在某一个时间段失效时，此时相当于没有缓存，所有对数据的请求直接走到数据库，带来很大压力。</p><p><img src="https://bu.dusays.com/2024/02/05/65c0ec28a43c9.png" alt="65-4.png"></p><p>解决方法：</p><ul><li><strong>将缓存失效时间分散开</strong>。比如可以在原有的失效时间基础上加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，很难引发集体失效的事件。</li><li><strong>不设置缓存的过期时间</strong>。有更新操作时就把热点的缓存全部更新，比如首页上的商品，当首页更新时，就把对应的数据替换掉。</li></ul><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存击穿指一个 key 可能会在某些时间点被超高并发地访问，属于“热点”数据，不停地扛着大量并发的访问，当这个热点数据在缓存中过期失效的时候，大量的并发访问就会穿破缓存，转移到数据库上面。</p><p>解决方法：</p><ul><li>延长热点 key 的过期时间或者设置永不过期，如排行榜、首页等。</li><li>利用互斥锁保证同一时刻只有一个客户端可以查询底层数据库的这个数据，一旦查到数据就缓存至 Redis 内，避免其他大量请求同时穿过 Redis 访问底层数据库。</li></ul><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>要查询的数据不存在，缓存无法命中所以需要查询完数据库，但是数据是不存在的，此时数据库肯定会返回空，也就不会记录到缓存中，这样每次对该数据的查询都会穿过缓存去查询一次数据库。</p><p>解决方法：</p><ul><li>查询时做一些校验和过滤（权限校验，参数校验等等），判断这是一次正常的查询，还是异常的查询或是攻击，如果是不合法的参数或者查询，直接返回。</li><li>缓存空对象，如果数据库中不存在这个数据，也在缓存中保存这个 key，只是把 val 值记录为“不存在”、“空”这样的数据，下次再访问这个 key 时，就不会到数据库中做无用的查找了。</li><li>可以预先将数据库里面所有的 key 全部存到一个大的 map 里面，然后在过滤器中过滤掉那些不存在的 key. 但是需要考虑数据库的 key 是会更新的，此时需要考虑数据库 —&gt; map 的更新频率问题。类似于位图。</li></ul><h2 id="hiredis"><a href="#hiredis" class="headerlink" title="hiredis"></a>hiredis</h2><h3 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/redis/hiredis.git</span><br></pre></td></tr></table></figure><p>进行解压与安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf hiredis.tar.gz</span><br><span class="line"><span class="built_in">cd</span> hiredis</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>更新动态库配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p>按照上面步骤安装之后，hiredis 的头文件会存在 /usr/local/include 下面，hiredis 的库文件存在 /usr/local/lib 下面。</p><p>编译方式：<br><code>g++ xxx.cc -o xxx -I /usr/local/include/hiredis -lhiredis</code>或者直接<code>g++ xxx.cc -lhiredis</code> 需要链接hiredis的库文件。</p><p>后续在代码中引用 hiredis 的头文件，可以直接使用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;hiredis/hiredis.h&gt;</span></span></span><br></pre></td></tr></table></figure><div class="row"><iframe src="https://drive.google.com/file/d/1asACieQELf93yK5e0SpIvgqAdUt-cLHC/preview" style="width:100%; height:550px"></iframe></div><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myRedis.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MYREDIS_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MYREDIS_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;hiredis/hiredis.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRedis</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyRedis</span>();</span><br><span class="line">    ~<span class="built_in">MyRedis</span>();</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">connect</span><span class="params">(<span class="type">const</span> string&amp; host, <span class="type">int</span> port)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(string key, string value)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">get</span><span class="params">(string key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    redisContext* _pConnect;</span><br><span class="line">    redisReply* _pReply;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyRedis.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myRedis.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MyRedis::<span class="built_in">MyRedis</span>():_pConnect(<span class="literal">nullptr</span>), _pReply(<span class="literal">nullptr</span>)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;MyRedis()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyRedis::~<span class="built_in">MyRedis</span>()&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;~MyRedis()&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_pConnect)&#123;</span><br><span class="line">        <span class="built_in">redisFree</span>(_pConnect);</span><br><span class="line">        _pConnect = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_pReply)&#123;</span><br><span class="line">        <span class="built_in">freeReplyObject</span>(_pReply);</span><br><span class="line">        _pReply = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">MyRedis::connect</span><span class="params">(<span class="type">const</span> string&amp; host, <span class="type">int</span> port)</span></span>&#123;</span><br><span class="line">    _pConnect = <span class="built_in">redisConnect</span>(host.<span class="built_in">c_str</span>(), port);</span><br><span class="line">    <span class="keyword">if</span>(_pConnect == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_pConnect != <span class="literal">nullptr</span> &amp;&amp; _pConnect-&gt;err)&#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;connect error : &quot;</span> &lt;&lt; _pConnect-&gt;errstr &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 连接成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyRedis::set</span><span class="params">(string key, string value)</span></span>&#123;</span><br><span class="line">    _pReply = (redisReply*) <span class="built_in">redisCommand</span>(_pConnect, <span class="string">&quot;SET %s %s&quot;</span>, key.<span class="built_in">c_str</span>(), value.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_pReply)&#123;</span><br><span class="line">        <span class="built_in">freeReplyObject</span>(_pReply);</span><br><span class="line">        _pReply = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">MyRedis::get</span><span class="params">(string key)</span></span>&#123;</span><br><span class="line">    _pReply = (redisReply*) <span class="built_in">redisCommand</span>(_pConnect, <span class="string">&quot;GET %s&quot;</span>, key.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_pReply)&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pReply-&gt;type == REDIS_REPLY_STRING)&#123;</span><br><span class="line">            string str = _pReply-&gt;str;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">freeReplyObject</span>(_pReply);</span><br><span class="line">            _pReply = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// testredis.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myRedis.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;MyRedis&gt; <span class="title">pRedis</span><span class="params">(<span class="keyword">new</span> MyRedis())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!pRedis-&gt;<span class="built_in">connect</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>))&#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;connect error ! &quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pRedis-&gt;<span class="built_in">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;lili&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Get the name is &quot;</span> &lt;&lt; pRedis-&gt;<span class="built_in">get</span>(<span class="string">&quot;name&quot;</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode/example_reids$ <span class="built_in">ls</span></span><br><span class="line">MyRedis.cc  myRedis.h  testredis.cc</span><br><span class="line">wanko@wanko:~/mycode/example_reids$ g++ *.cc -lhiredis</span><br><span class="line">wanko@wanko:~/mycode/example_reids$ ./a.out</span><br><span class="line">MyRedis()</span><br><span class="line">Get the name is lili</span><br><span class="line">~MyRedis()</span><br></pre></td></tr></table></figure><p>此时回到数据库中查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">127.0.0.1:6379&gt; type name</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;lili&quot;</span><br></pre></td></tr></table></figure><p>更进一步的拓展：<br><a href="https://github.com/sewenew/redis-plus-plus">https://github.com/sewenew/redis-plus-plus</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;NoSQL-和-Redis-概述&quot;&gt;&lt;a href=&quot;#NoSQL-和-Redis-概述&quot; class=&quot;headerlink&quot; title=&quot;NoSQL 和 Redis 概述&quot;&gt;&lt;/a&gt;NoSQL 和 Redis 概述&lt;/h2&gt;&lt;p&gt;在日常的开发中，无不都是使用</summary>
      
    
    
    
    <category term="计算机" scheme="https://loveofpeach.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="Redis" scheme="https://loveofpeach.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>线性代数笔记</title>
    <link href="https://loveofpeach.github.io/posts/35508c6a.html"/>
    <id>https://loveofpeach.github.io/posts/35508c6a.html</id>
    <published>2024-01-28T18:38:46.000Z</published>
    <updated>2024-01-28T18:57:17.037Z</updated>
    
    <content type="html"><![CDATA[<p>存档一下以前的知识，也许以后会进一步学习。</p><h2 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h2><div class="row"><iframe src="https://drive.google.com/file/d/1LVjZF-HDF6qXgoqa1j1OMri7_IiksgRp/preview" style="width:100%; height:550px"></iframe></div><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><div class="row"><iframe src="https://drive.google.com/file/d/1i-Bww3jJlxzrXSRKQtuEwv00SX0zfOsu/preview" style="width:100%; height:550px"></iframe></div><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><div class="row"><iframe src="https://drive.google.com/file/d/1Qz6qLOdS_FqzW1R3EfVwRAdysfF4IfuZ/preview" style="width:100%; height:550px"></iframe></div><h2 id="线性方程组"><a href="#线性方程组" class="headerlink" title="线性方程组"></a>线性方程组</h2><div class="row"><iframe src="https://drive.google.com/file/d/1jRrgEsx2XkIo9wEXdM-WaHe3APzSKEDj/preview" style="width:100%; height:550px"></iframe></div><h2 id="特征值和特征向量"><a href="#特征值和特征向量" class="headerlink" title="特征值和特征向量"></a>特征值和特征向量</h2><div class="row"><iframe src="https://drive.google.com/file/d/1cw6wr2XMo3HUDybu4SbzTd7dJxNq8Fd6/preview" style="width:100%; height:550px"></iframe></div><h2 id="二次型"><a href="#二次型" class="headerlink" title="二次型"></a>二次型</h2><div class="row"><iframe src="https://drive.google.com/file/d/1RLOwPGNd9T1KuMkKKqLFT9iek3-8jiDb/preview" style="width:100%; height:550px"></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;存档一下以前的知识，也许以后会进一步学习。&lt;/p&gt;
&lt;h2 id=&quot;行列式&quot;&gt;&lt;a href=&quot;#行列式&quot; class=&quot;headerlink&quot; title=&quot;行列式&quot;&gt;&lt;/a&gt;行列式&lt;/h2&gt;

	&lt;div class=&quot;row&quot;&gt;
		&lt;iframe src=&quot;http</summary>
      
    
    
    
    <category term="数学" scheme="https://loveofpeach.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="线性代数" scheme="https://loveofpeach.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>以前的事（序）</title>
    <link href="https://loveofpeach.github.io/posts/2098d023.html"/>
    <id>https://loveofpeach.github.io/posts/2098d023.html</id>
    <published>2024-01-19T20:30:53.000Z</published>
    <updated>2024-01-21T16:52:56.578Z</updated>
    
    <content type="html"><![CDATA[<p>一些古早的记忆。</p><p>红色气球的爆炸。</p><p>幼儿园，似乎是某个活动或者节日，园里挂了一排排的三角形彩旗，操场上有滑梯等娱乐设施。</p><p>出早操，老师在某次早操之后打了所有小朋友的手心。早餐 M 买了蛋饼，但我没有吃完，于是挂在班级的椅子上，放了很久。</p><p>第二年转学，坐在我前面的是一个扎着马尾的女孩。我非常好奇，不假思索地从头绳捋到发梢，女孩非常生气地转过身瞪了我一眼，似乎马上就要将双手拍在我的桌上：“不！许！摸！” </p><p>第二年或是第三年的冬天，上楼梯脚底一滑，头磕到了楼梯尖，开了一个口子。一个陌生的老爷爷把我带到班级，后来学校找了一辆面包车——大概是五菱宏光，送我去医院，缝了针。没有拆线的记忆。</p><p>有过“一二三，木头人”的游戏。</p><p>厕所不分男女，老师们定时让小朋友们按性别分开上。同班有一个怪人，有时会捡垃圾桶的东西吃。夏天有过集体定冷饮的事。学过英语，但只记得一个单词，“pencil”，课本上有一个巨大的铅笔。有考试，老师们让我们直接抄一个女孩的试卷。有补餐，基本上是白粥，中国移动有送一种小本子，我和同学会撕下一张垫碗。用菜梗做过印章。</p><p>有过表演活动，似乎和戏剧元素有关，有集体照，L 君也在上面，如此想来，真是和 L 同学过相当多年。</p><hr><p>高中的我，会怀念初中小学的日子。</p><p>我对此怀疑——它们真如我想的那般甘甜？</p><p>一个历时数年的实验：高中的时候，我问自己，我过的快乐吗？答，不算快乐。然后，我在心里记下这个答案。</p><p>大学，每当我怀念起高中，我就会想，哎，高中的时候怎么怎么好，老师是怎样优秀（排除个别人），相比其他县城高中，我的学校也还算有人文关怀，同学又个个都是人才，即便男女分桌还和一个扎着马尾的漂亮女孩同桌过一阵子（我坐在教室中间单独的一列，不参与左右轮换，只前后轮换。虽然是单独的一列其实还是挨着的，因此每次换座位我都换同桌），那我的高中生活一定很快乐吧？这个时候，我在高中埋下的回答就会探出脑袋告诉我，其实我的高中生活还挺糟糕，经历了严重的抑郁情绪，也一度陷入虚无主义中。</p><p>那么为什么大学的我会觉得高中生活很好呢？一定是因为我大学生活过的更不如意，想要有选择地反刍一些回忆，藉以安慰疲惫的精神罢。</p><p>如此看来，回忆确实倾向于美化自己，掩盖一些伤痛和不堪。</p><p>但还是要试着去把握它们。</p><hr><p>总的来说，这个系列的文章会大概讲讲创建这个 blog 之前的我的故事，可能会属于不那么有趣的那种。</p><p>一个人的回忆总是近于无限多的，按时间顺序去梳理个人的“编年史”是痴心妄想。</p><p>正如一些贺岁歌曲会让人想起过年时超市里的散装糖那样，记忆总是在意想不到的时刻像咕咚咕咚的泉水般涌出来。</p><p>因此我大抵是想到哪写到哪，思绪漫游之处，不过一场穷途之哭。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一些古早的记忆。&lt;/p&gt;
&lt;p&gt;红色气球的爆炸。&lt;/p&gt;
&lt;p&gt;幼儿园，似乎是某个活动或者节日，园里挂了一排排的三角形彩旗，操场上有滑梯等娱乐设施。&lt;/p&gt;
&lt;p&gt;出早操，老师在某次早操之后打了所有小朋友的手心。早餐 M 买了蛋饼，但我没有吃完，于是挂在班级的椅子上，放了很</summary>
      
    
    
    
    <category term="生活" scheme="https://loveofpeach.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>CppNote2</title>
    <link href="https://loveofpeach.github.io/posts/2249c81f.html"/>
    <id>https://loveofpeach.github.io/posts/2249c81f.html</id>
    <published>2024-01-09T12:59:53.000Z</published>
    <updated>2024-02-19T16:06:49.779Z</updated>
    
    <content type="html"><![CDATA[<p>前情提要： <a href="https://loveofpeach.github.io/posts/54b4d7a2.html">CppNote</a></p><h2 id="在代码之前"><a href="#在代码之前" class="headerlink" title="在代码之前"></a>在代码之前</h2><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>可以使用参数<code>-E</code>生成预处理之后的文件，以<code>i</code>结尾，生成之后的文件还是一个文本文件（代码）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -E helloworld.cpp -o helloworld.i</span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>进行语法分析、词法分析、语义分析。</p><p>可以使用<code>-S</code>选项，生成汇编代码，以 s 结尾。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ g++ -S helloworld.i -o helloworld.s</span><br><span class="line">wanko@wanko:~/mycode$ file helloworld.s</span><br><span class="line">helloworld.s: assembler source, ASCII text</span><br></pre></td></tr></table></figure><p>注意：linux 不以后缀名区分文件，上面仅仅是习惯。</p><h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><p>使用汇编器将汇编代码生成为目标代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">as helloworld.s -o helloworld.o</span><br></pre></td></tr></table></figure><p>查看生成了什么：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ ll</span><br><span class="line">total 816</span><br><span class="line">drwxrwxr-x  2 wanko wanko   4096  1月 10 22:26 ./</span><br><span class="line">drwxr-x--- 23 wanko wanko   4096  1月 10 22:22 ../</span><br><span class="line">-rwxrwxr-x  1 wanko wanko  16528  1月  8 01:48 a.out*</span><br><span class="line">-rw-rw-r--  1 wanko wanko     64  1月 10 22:24 cppnote2tmp.md</span><br><span class="line">-rw-rw-r--  1 wanko wanko   5769 12月 29 21:36 guoba.py</span><br><span class="line">-rw-rw-r--  1 wanko wanko     87  1月  8 01:47 helloworld.cpp</span><br><span class="line">-rw-rw-r--  1 wanko wanko 778417  1月  8 02:11 helloworld.i</span><br><span class="line">-rw-rw-r--  1 wanko wanko   2752  1月 10 22:26 helloworld.o</span><br><span class="line">-rw-rw-r--  1 wanko wanko   2254  1月  8 02:30 helloworld.s</span><br><span class="line">wanko@wanko:~/mycode$ file helloworld.o</span><br><span class="line">helloworld.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped</span><br></pre></td></tr></table></figure><p>生成了二进制文件。使用<code>nm</code>命令查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ nm helloworld.o</span><br><span class="line">                 U __cxa_atexit</span><br><span class="line">                 U __dso_handle</span><br><span class="line">                 U _GLOBAL_OFFSET_TABLE_</span><br><span class="line">0000000000000090 t _GLOBAL__sub_I_main</span><br><span class="line">0000000000000000 T main</span><br><span class="line">000000000000003a t _Z41__static_initialization_and_destruction_0ii</span><br><span class="line">                 U _ZNSolsEPFRSoS_E</span><br><span class="line">                 U _ZNSt8ios_base4InitC1Ev</span><br><span class="line">                 U _ZNSt8ios_base4InitD1Ev</span><br><span class="line">                 U _ZSt4cout</span><br><span class="line">                 U _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_</span><br><span class="line">0000000000000000 b _ZStL8__ioinit</span><br><span class="line">                 U _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc</span><br></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>将上一步生成的二进制文件与其他文件合在一起，生成可执行程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ g++ helloworld.o -o helloworld</span><br><span class="line">wanko@wanko:~/mycode$ ls</span><br><span class="line">a.out           guoba.py    helloworld.cpp  helloworld.o</span><br><span class="line">cppnote2tmp.md  helloworld  helloworld.i    helloworld.s</span><br><span class="line">wanko@wanko:~/mycode$ ll</span><br><span class="line">total 836</span><br><span class="line">drwxrwxr-x  2 wanko wanko   4096  1月 10 22:40 ./</span><br><span class="line">drwxr-x--- 23 wanko wanko   4096  1月 10 22:31 ../</span><br><span class="line">-rwxrwxr-x  1 wanko wanko  16528  1月  8 01:48 a.out*</span><br><span class="line">-rw-rw-r--  1 wanko wanko   1501  1月 10 22:36 cppnote2tmp.md</span><br><span class="line">-rw-rw-r--  1 wanko wanko   5769 12月 29 21:36 guoba.py</span><br><span class="line">-rwxrwxr-x  1 wanko wanko  16528  1月 10 22:40 helloworld*</span><br><span class="line">-rw-rw-r--  1 wanko wanko     87  1月  8 01:47 helloworld.cpp</span><br><span class="line">-rw-rw-r--  1 wanko wanko 778417  1月  8 02:11 helloworld.i</span><br><span class="line">-rw-rw-r--  1 wanko wanko   2752  1月 10 22:26 helloworld.o</span><br><span class="line">-rw-rw-r--  1 wanko wanko   2254  1月  8 02:30 helloworld.s</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ ./helloworld </span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>查看文件的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ file helloworld</span><br><span class="line">helloworld: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=c372c07e5b06ebb28508a24d3eca177989deee49, for GNU/Linux 3.2.0, not stripped</span><br></pre></td></tr></table></figure><p>使用<code>nm</code>命令查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ nm helloworld</span><br><span class="line">000000000000038c r __abi_tag</span><br><span class="line">0000000000004010 B __bss_start</span><br><span class="line">0000000000004150 b completed.0</span><br><span class="line">                 U __cxa_atexit@GLIBC_2.2.5</span><br><span class="line">                 w __cxa_finalize@GLIBC_2.2.5</span><br><span class="line">0000000000004000 D __data_start</span><br><span class="line">0000000000004000 W data_start</span><br><span class="line">00000000000010f0 t deregister_tm_clones</span><br><span class="line">0000000000001160 t __do_global_dtors_aux</span><br><span class="line">0000000000003d88 d __do_global_dtors_aux_fini_array_entry</span><br><span class="line">0000000000004008 D __dso_handle</span><br><span class="line">0000000000003d90 d _DYNAMIC</span><br><span class="line">0000000000004010 D _edata</span><br><span class="line">0000000000004158 B _end</span><br><span class="line">0000000000001254 T _fini</span><br><span class="line">00000000000011a0 t frame_dummy</span><br><span class="line">0000000000003d78 d __frame_dummy_init_array_entry</span><br><span class="line">0000000000002140 r __FRAME_END__</span><br><span class="line">0000000000003f90 d _GLOBAL_OFFSET_TABLE_</span><br><span class="line">0000000000001239 t _GLOBAL__sub_I_main</span><br><span class="line">                 w __gmon_start__</span><br><span class="line">0000000000002010 r __GNU_EH_FRAME_HDR</span><br><span class="line">0000000000001000 T _init</span><br><span class="line">0000000000002000 R _IO_stdin_used</span><br><span class="line">                 w _ITM_deregisterTMCloneTable</span><br><span class="line">                 w _ITM_registerTMCloneTable</span><br><span class="line">                 U __libc_start_main@GLIBC_2.34</span><br><span class="line">00000000000011a9 T main</span><br><span class="line">0000000000001120 t register_tm_clones</span><br><span class="line">00000000000010c0 T _start</span><br><span class="line">0000000000004010 D __TMC_END__</span><br><span class="line">00000000000011e3 t _Z41__static_initialization_and_destruction_0ii</span><br><span class="line">                 U _ZNSolsEPFRSoS_E@GLIBCXX_3.4</span><br><span class="line">                 U _ZNSt8ios_base4InitC1Ev@GLIBCXX_3.4</span><br><span class="line">                 U _ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4</span><br><span class="line">0000000000004040 B _ZSt4cout@GLIBCXX_3.4</span><br><span class="line">                 U _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4</span><br><span class="line">0000000000004151 b _ZStL8__ioinit</span><br><span class="line">                 U _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@GLIBCXX_3.4</span><br></pre></td></tr></table></figure><p>注意：<code>main</code>的位置发生了变化。</p><center><p style="color: red;">- - - - - 说明 - - - - -</p></center><p>平时使用不需要上面这么复杂。</p><p>若不指定文件名，则会生成<code>a.out</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ helloworld.cpp</span><br></pre></td></tr></table></figure><p>指定文件名的做法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ helloworld.cpp -o nahida</span><br></pre></td></tr></table></figure><p>则会生存可执行文件<code>nahida</code>，执行方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nahida</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/11/659ec2363dcbe.png" alt="62-1.png"></p><center><p style="color: red;">- - - - - END - - - - -</p></center><h2 id="静态库、动态库"><a href="#静态库、动态库" class="headerlink" title="静态库、动态库"></a>静态库、动态库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/demo$ ls</span><br><span class="line">add.c  main.c</span><br><span class="line">wanko@wanko:~/demo$ cat add.c</span><br><span class="line"></span><br><span class="line">int add(int x, int y)&#123;</span><br><span class="line">    return x+y;</span><br><span class="line">&#125;</span><br><span class="line">wanko@wanko:~/demo$ cat main.c</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int add(int,int);</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv)&#123;</span><br><span class="line">    printf(&quot;add(3,4)=%d\n&quot;,add(3,4));</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/demo$ gcc main.c</span><br><span class="line">/usr/bin/ld: /tmp/ccehSUXd.o: in function `main&#x27;:</span><br><span class="line">main.c:(.text+0x1e): undefined reference to `add&#x27;</span><br><span class="line">collect2: error: ld returned 1 exit status</span><br></pre></td></tr></table></figure><p>正确的编译方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/demo$ gcc main.c add.c -o main</span><br><span class="line">wanko@wanko:~/demo$ ./main</span><br><span class="line">add(3,4)=7</span><br></pre></td></tr></table></figure><p style="color: red;">现在我们尝试将 add.c 制作为一个静态库。</p><p>静态库特点：在链接时拷贝库文件，打包进可执行程序（在编译的时候进行打包）。</p><p>文件名形式：<code>**.a</code>，一般以<code>lib</code>开头。eg:<code>libadd.a</code></p><p>编译源码得到目标文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c add.c -o add.o</span><br></pre></td></tr></table></figure><p><code>ar</code>命令打包成库文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/demo$ gcc -c add.c -o add.o</span><br><span class="line">wanko@wanko:~/demo$ ar crsv libadd.a add.o</span><br><span class="line">a - add.o</span><br><span class="line">wanko@wanko:~/demo$ ll</span><br><span class="line">total 24</span><br><span class="line">drwxrwxr-x  2 wanko wanko 4096  1月 11 00:21 ./</span><br><span class="line">drwxr-x--- 24 wanko wanko 4096  1月 11 00:13 ../</span><br><span class="line">-rw-rw-r--  1 wanko wanko   39  1月 10 23:56 add.c</span><br><span class="line">-rw-rw-r--  1 wanko wanko 1232  1月 11 00:16 add.o</span><br><span class="line">-rw-rw-r--  1 wanko wanko 1372  1月 11 00:21 libadd.a</span><br><span class="line">-rw-rw-r--  1 wanko wanko  119  1月 10 23:59 main.c</span><br></pre></td></tr></table></figure><p>放入系统库文件路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/demo$ sudo cp libadd.a /usr/lib</span><br></pre></td></tr></table></figure><p>在对应目录下可以找到如下文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/demo$ cd /usr/lib</span><br><span class="line">wanko@wanko:/usr/lib$ ll lib*.a</span><br><span class="line">-rw-r--r-- 1 root root 1372  1月 11 00:24 libadd.a</span><br></pre></td></tr></table></figure><p>为消除 demo 目录下的 libadd.a 的影响，改个名字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/demo$ ls</span><br><span class="line">add.c  add.o  libadd.a  main.c</span><br><span class="line">wanko@wanko:~/demo$ mv libadd.a libadd2.a</span><br><span class="line">wanko@wanko:~/demo$ ll</span><br><span class="line">total 24</span><br><span class="line">drwxrwxr-x  2 wanko wanko 4096  1月 11 00:29 ./</span><br><span class="line">drwxr-x--- 24 wanko wanko 4096  1月 11 00:13 ../</span><br><span class="line">-rw-rw-r--  1 wanko wanko   39  1月 10 23:56 add.c</span><br><span class="line">-rw-rw-r--  1 wanko wanko 1232  1月 11 00:16 add.o</span><br><span class="line">-rw-rw-r--  1 wanko wanko 1372  1月 11 00:21 libadd2.a</span><br><span class="line">-rw-rw-r--  1 wanko wanko  119  1月 10 23:59 main.c</span><br></pre></td></tr></table></figure><p>链接的选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc main.c -o main -ladd</span><br></pre></td></tr></table></figure><p>即：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/demo$ gcc main.c -o main -ladd</span><br><span class="line">wanko@wanko:~/demo$ ll</span><br><span class="line">total 40</span><br><span class="line">drwxrwxr-x  2 wanko wanko  4096  1月 11 00:32 ./</span><br><span class="line">drwxr-x--- 24 wanko wanko  4096  1月 11 00:13 ../</span><br><span class="line">-rw-rw-r--  1 wanko wanko    39  1月 10 23:56 add.c</span><br><span class="line">-rw-rw-r--  1 wanko wanko  1232  1月 11 00:16 add.o</span><br><span class="line">-rw-rw-r--  1 wanko wanko  1372  1月 11 00:21 libadd2.a</span><br><span class="line">-rwxrwxr-x  1 wanko wanko 16016  1月 11 00:32 main*</span><br><span class="line">-rw-rw-r--  1 wanko wanko   119  1月 10 23:59 main.c</span><br><span class="line">wanko@wanko:~/demo$ ./main</span><br><span class="line">add(3,4)=7</span><br></pre></td></tr></table></figure><p>现在将这个库删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm libadd.a</span><br></pre></td></tr></table></figure><p>此时 main 仍然可以执行。</p><p style="color: red;">现在我们尝试制作一个动态库。</p><p>动态库特点：在链接时，定位了库文件的位置，运行时加载。</p><p>文件名形式：<code>**.so</code>，一般以<code>lib</code>开头。eg:<code>libadd.so</code></p><p>编译时加上<code>-fpic</code>选项，生成<strong>位置无关</strong>的目标代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c add.c -o add.o -fpic</span><br></pre></td></tr></table></figure><p>使用 gcc 生成动态库/共享库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -o libadd.so add.o</span><br></pre></td></tr></table></figure><p>将动态库放入<code>/usr/lib</code>下面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp libadd.so /usr/lib</span><br></pre></td></tr></table></figure><p>链接时加上选项<code>-ladd</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc main.c -o main -ladd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/dynamic$ ls</span><br><span class="line">add.c  add.o  libadd2.so  main.c</span><br><span class="line">wanko@wanko:~/dynamic$ gcc main.c -o main -ladd</span><br><span class="line">wanko@wanko:~/dynamic$ ./main</span><br><span class="line">add(3,4)=7</span><br></pre></td></tr></table></figure><p>可以使用<code>ldd</code>命令查看依赖文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/dynamic$ ldd main</span><br><span class="line">    linux-vdso.so.1 (0x00007ffff85df000)</span><br><span class="line">    libadd.so =&gt; /lib/libadd.so (0x00007fba42625000)</span><br><span class="line">    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fba42200000)</span><br><span class="line">    /lib64/ld-linux-x86-64.so.2 (0x00007fba4263f000)</span><br></pre></td></tr></table></figure><p>若删除<code>libadd.so</code>，再执行就会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/dynamic$ ./main</span><br><span class="line">./main: error while loading shared libraries: libadd.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><p style="color: red;">静态库与动态库的比较：</p><ul><li>动态库只在执行时才被链接使用，不是直接编译为可执行文件，并且一个动态库可以被多个程序使用，故可称为共享库</li><li>静态库将会整合到程序中，在程序执行时不用加载静态库。</li><li>因此，静态库会使你的程序臃肿并且难以升级，但比较容易部署。而动态库会使你的程序轻便易于升级但难以部署。</li></ul><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> number = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//在命名空间中可以定义变量、函数、结构体、类，</span></span><br><span class="line">    <span class="comment">//统称为 实体</span></span><br><span class="line">    <span class="type">int</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;void print()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">// end of namespace wd</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;outer number=&quot;</span> &lt;&lt; number &lt;&lt;std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;inner number=&quot;</span> &lt;&lt; wd::number &lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">wanko@wanko:~$ cd &quot;/home/wanko/mycode/&quot; &amp;&amp; g++ tmptst.cpp -o tmptst &amp;&amp; &quot;/home/wanko/mycode/&quot;tmptst</span></span><br><span class="line"><span class="comment">outer number=10</span></span><br><span class="line"><span class="comment">inner number=1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>带命名空间的函数声明、命名空间是可以拓展的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 带命名空间的函数声明</span></span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> wh</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">30</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;void wh::show&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        wd::<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">// namespace wh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123; <span class="comment">// 命名空间是可以拓展的</span></span><br><span class="line">    <span class="type">int</span> number = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;void print()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        wh::<span class="built_in">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// namespace wd</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    wh::<span class="built_in">display</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">wanko@wanko:~$ cd &quot;/home/wanko/mycode/&quot; &amp;&amp; g++ tmptst.cpp -o tmptst &amp;&amp; &quot;/home/wanko/mycode/&quot;tmptst</span></span><br><span class="line"><span class="comment">void print()</span></span><br><span class="line"><span class="comment">void wh::show</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>甚至 std 也可以拓展：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> std</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Mystruct</span>&#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; <span class="comment">// namespace std</span></span><br></pre></td></tr></table></figure><p>但是，尽量不要去拓展 std ，因为自己定义的实体有可能已经在 std 中，导致冲突。</p><p>命名空间可以嵌套：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名空间可以嵌套</span></span><br><span class="line"><span class="keyword">namespace</span> wh&#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">40</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">namespace</span> hb</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> number = <span class="number">1234</span>;</span><br><span class="line">    &#125; <span class="comment">// namespace hb</span></span><br><span class="line">&#125; <span class="comment">// namespace wh</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; wh::hb::number &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">1234</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="new、delete"><a href="#new、delete" class="headerlink" title="new、delete"></a>new、delete</h2><p>与<code>malloc</code>、<code>free</code>类似，用来申请、释放堆空间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>)); <span class="comment">//初始化、清零</span></span><br><span class="line">    *p = <span class="number">70</span>;</span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 申请堆空间，初始化，并赋值</span></span><br><span class="line">    <span class="type">int</span>* p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">1</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*p = &quot;</span> &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">*p = 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>申请数组：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>]; <span class="comment">// 在栈上</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 申请堆空间数组</span></span><br><span class="line">    <span class="type">int</span>* pArray = (<span class="type">int</span>*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">memset</span>(pArray, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    pArray[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    pArray[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,pArray[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(pArray);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">0 1 0 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>* pAarry = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>](); <span class="comment">//小括号有初始化的含义</span></span><br><span class="line">    pAarry[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    pAarry[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    pAarry[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        std::cout &lt;&lt; pAarry[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> [] pAarry;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">0 1 2 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong><code>malloc</code>申请的堆空间是原始的、未初始化的，而<code>new</code>申请的是已初始化的。</strong></p><p>解决内存泄露的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">getHeapData</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>* pInt = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">200</span>);</span><br><span class="line">    <span class="keyword">return</span> *pInt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> c = a + <span class="built_in">getHeapData</span>() + b; <span class="comment">//内存泄露</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>&amp; ref = <span class="built_in">getHeapData</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span> &amp;ref; <span class="comment">//解决内存泄露</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>防止野指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>* pInt = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>*&gt;(<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>)));</span><br><span class="line">    <span class="built_in">memset</span>(pInt, <span class="number">0</span>, <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">    <span class="built_in">free</span>(pInt);</span><br><span class="line">    pInt = <span class="literal">nullptr</span>; <span class="comment">//否则会产生野指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><p>函数重载的原理：使用同名函数的时候，根据形参类型、个数、顺序对函数名字进行改编，即“名字改编”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ cat tsttmp.cpp</span><br><span class="line">int add(int x,int y)&#123;</span><br><span class="line">    return x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int add(int x,double y)&#123;</span><br><span class="line">    return x+y;</span><br><span class="line">&#125;</span><br><span class="line">wanko@wanko:~/mycode$ nm tsttmp.o</span><br><span class="line">0000000000000018 T _Z3addid</span><br><span class="line">0000000000000000 T _Z3addii</span><br></pre></td></tr></table></figure><p>注意： C 不支持函数重载。C++ 兼容 C ，会将 C 的函数按照 C 的方式编译，不会进行名字改编。</p><p>可以在 C++ 代码中将函数按照 C 的方式编译：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus <span class="comment">// C++ 内置宏</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// some code</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;<span class="comment">// extern &quot;C&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h2><p>内联函数不能分成头文件与实现文件的形式（不能将声明与定义分开）。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>简单例子：</p><p><img src="https://bu.dusays.com/2024/01/15/65a501de7b574.png" alt="62-2.png"></p><h2 id="内存分配方式"><a href="#内存分配方式" class="headerlink" title="内存分配方式"></a>内存分配方式</h2><p>相关知识和图片见： <a href="https://loveofpeach.github.io/posts/64934ad2.html">OS 强化</a> 存储管理知识梳理</p><p>以 32 位机器为例。</p><p>0-3G：用户态的空间<br>3G-4G：内核态的空间</p><p>用户态空间：栈、堆、全局变量、静态变量、程序代码区、文字常量区。</p><p><strong>栈区</strong>：存放的是局部变量、函数的参数。由操作系统负责。</p><p><strong>堆区</strong>：即堆空间，<code>malloc</code>/<code>calloc</code>/<code>new</code>申请的都是堆空间，必须由程序员手动释放（<code>free</code>/<code>delete</code>）。</p><p><strong>读写段</strong>：<br>全局变量<br>静态变量：<code>static int c = 10;</code></p><p><strong>只读段</strong>：<br>文字常量区：如字符串常量，”hello,world”<br>程序代码区：存放二进制代码</p><p>函数名是函数的入口地址：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;main = %p\n&quot;</span>, &amp;main);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main = %p\n&quot;</span>, main);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">&amp;main = 0x564630caf189</span></span><br><span class="line"><span class="comment">main = 0x564630caf189</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><p>销毁对象的时候，需要清理数据成员。使用析构函数完成此任务。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>):<span class="built_in">ix</span>(x),<span class="built_in">iy</span>(y)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    point tmp;</span><br><span class="line">    tmp.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，析构函数没有做任何事，因为该例中对象位于栈上，由操作系统负责回收。</p><p>对象在销毁的时候，会自动调用析构函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>):<span class="built_in">ix</span>(x),<span class="built_in">iy</span>(y)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;aha&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    point tmp;</span><br><span class="line">    tmp.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">aha</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>默认情况下，编译器会自动生成析构函数。</p><p>析构函数可以显式调用（不建议这么做）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmp.~<span class="built_in">point</span>();</span><br></pre></td></tr></table></figure><p>构造函数调用的时候会创建对象：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>):<span class="built_in">ix</span>(x),<span class="built_in">iy</span>(y)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;aha&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    point tmp;</span><br><span class="line">    tmp.<span class="built_in">print</span>();</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">point</span>().<span class="built_in">print</span>();</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">aha</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">aha</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>有点小问题的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Computer.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _Computer_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _Computer_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">float</span> price);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setBrand</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setPrice</span><span class="params">(<span class="type">float</span> price)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    ~<span class="built_in">Computer</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _name;</span><br><span class="line">    <span class="type">float</span> _price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Computer.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Computer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line">Computer::<span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">float</span> price)</span><br><span class="line">                  :_name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name)+<span class="number">1</span>]()),_price(price)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Computer(const char*, float)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::setBrand</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name)</span></span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::setPrice</span><span class="params">(<span class="type">float</span> price)</span></span>&#123;</span><br><span class="line">    _price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;price = &quot;</span> &lt;&lt; _price &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Computer::~<span class="built_in">Computer</span>()&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;~Computer()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// testComputer.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Computer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Computer <span class="title">com</span><span class="params">(<span class="string">&quot;lenovo&quot;</span>, <span class="number">5300</span>)</span></span>;</span><br><span class="line">    com.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ g++ *.cc</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ ./a.out</span></span><br><span class="line"><span class="comment">Computer(const char*, float)</span></span><br><span class="line"><span class="comment">name = lenovo</span></span><br><span class="line"><span class="comment">price = 5300</span></span><br><span class="line"><span class="comment">~Computer()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面的代码没有<code>delete</code>，文件<code>Computer.cc</code>应该改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Computer.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Computer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line">Computer::<span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">float</span> price)</span><br><span class="line">                  :_name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name)+<span class="number">1</span>]()),_price(price)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Computer(const char*, float)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::setBrand</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name)</span></span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::setPrice</span><span class="params">(<span class="type">float</span> price)</span></span>&#123;</span><br><span class="line">    _price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;price = &quot;</span> &lt;&lt; _price &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Computer::~<span class="built_in">Computer</span>()&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;~Computer()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(_name)&#123; <span class="comment">// 等价于 if(_name != nullptr)</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1111&quot;</span> &lt;&lt; endl; <span class="comment">// for presentation</span></span><br><span class="line">        <span class="keyword">delete</span> [] _name;</span><br><span class="line">        _name = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新编译运行得到输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Computer(const char*, float)</span><br><span class="line">name = lenovo</span><br><span class="line">price = 5300</span><br><span class="line">~Computer()</span><br><span class="line">1111</span><br></pre></td></tr></table></figure><p>个人理解：在上面的代码中，<code>Computer</code>类型的对象包含两个数据成员：<code>_name</code>和<code>_price</code>，一个是指针类型，一个是浮点类型。创建对象时调用构造函数，指针<code>_name</code>指向堆上的空间。<code>Computer</code>对象在栈上，生命周期结束后由操作系统回收；<code>_name</code>指向的堆上空间需由析构函数释放。</p><p>下面给出两种情况的对比：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// testComputer.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Computer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function">Computer <span class="title">gcom</span><span class="params">(<span class="string">&quot;xiaomi&quot;</span>, <span class="number">7000</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    gcom.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">Computer <span class="title">com</span><span class="params">(<span class="string">&quot;lenovo&quot;</span>, <span class="number">5300</span>)</span></span>;</span><br><span class="line">    com.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Computer* pc = <span class="keyword">new</span> <span class="built_in">Computer</span>(<span class="string">&quot;huawei&quot;</span>, <span class="number">100000</span>);</span><br><span class="line">    pc-&gt;<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;enter main...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Computer(const char*, float)</span></span><br><span class="line"><span class="comment">enter main...</span></span><br><span class="line"><span class="comment">name = xiaomi</span></span><br><span class="line"><span class="comment">price = 7000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Computer(const char*, float)</span></span><br><span class="line"><span class="comment">name = lenovo</span></span><br><span class="line"><span class="comment">price = 5300</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Computer(const char*, float)</span></span><br><span class="line"><span class="comment">name = huawei</span></span><br><span class="line"><span class="comment">price = 100000</span></span><br><span class="line"><span class="comment">~Computer()</span></span><br><span class="line"><span class="comment">1111</span></span><br><span class="line"><span class="comment">~Computer()</span></span><br><span class="line"><span class="comment">1111</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// testComputer.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Computer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function">Computer <span class="title">gcom</span><span class="params">(<span class="string">&quot;xiaomi&quot;</span>, <span class="number">7000</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    gcom.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">Computer <span class="title">com</span><span class="params">(<span class="string">&quot;lenovo&quot;</span>, <span class="number">5300</span>)</span></span>;</span><br><span class="line">    com.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Computer* pc = <span class="keyword">new</span> <span class="built_in">Computer</span>(<span class="string">&quot;huawei&quot;</span>, <span class="number">100000</span>);</span><br><span class="line">    pc-&gt;<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">delete</span> pc;</span><br><span class="line">    pc = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;enter main...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Computer(const char*, float)</span></span><br><span class="line"><span class="comment">enter main...</span></span><br><span class="line"><span class="comment">name = xiaomi</span></span><br><span class="line"><span class="comment">price = 7000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Computer(const char*, float)</span></span><br><span class="line"><span class="comment">name = lenovo</span></span><br><span class="line"><span class="comment">price = 5300</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Computer(const char*, float)</span></span><br><span class="line"><span class="comment">name = huawei</span></span><br><span class="line"><span class="comment">price = 100000</span></span><br><span class="line"><span class="comment">~Computer()</span></span><br><span class="line"><span class="comment">1111</span></span><br><span class="line"><span class="comment">~Computer()</span></span><br><span class="line"><span class="comment">1111</span></span><br><span class="line"><span class="comment">~Computer()</span></span><br><span class="line"><span class="comment">1111</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h2><p>默认情况下，编译器会自动生成拷贝构造函数。</p><p>来看下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// testComputer.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Computer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Computer <span class="title">com</span><span class="params">(<span class="string">&quot;lenovo&quot;</span>, <span class="number">5300</span>)</span></span>;</span><br><span class="line">    com.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Computer com2 = com;</span><br><span class="line">    com2.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Computer(const char*, float)</span></span><br><span class="line"><span class="comment">name = lenovo</span></span><br><span class="line"><span class="comment">price = 5300</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name = lenovo</span></span><br><span class="line"><span class="comment">price = 5300</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">~Computer()</span></span><br><span class="line"><span class="comment">1111</span></span><br><span class="line"><span class="comment">~Computer()</span></span><br><span class="line"><span class="comment">1111</span></span><br><span class="line"><span class="comment">free(): double free detected in tcache 2</span></span><br><span class="line"><span class="comment">Aborted (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在语句<code>Computer com2 = com;</code>中，调用了拷贝构造函数。程序报错的原因等会再讲。</p><p>拷贝构造函数的逻辑（以某个具体的类为例）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Point</span>(<span class="type">const</span> Point&amp; rhs):_ix(rhs._ix),_iy(rhs._iy)&#123;&#125;</span><br></pre></td></tr></table></figure><p>而上面的程序出错点在于：数据成员是指针类型，拷贝过来的指针指向了同一地址，因此销毁的时候对同一地址 free 了两次。</p><p><code>Computer.h</code>文件部分代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">float</span> price);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setBrand</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setPrice</span><span class="params">(<span class="type">float</span> price)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    ~<span class="built_in">Computer</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _name;</span><br><span class="line">    <span class="type">float</span> _price;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Computer.cc</code>文件部分代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Computer::<span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">float</span> price)</span><br><span class="line">                  :_name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name)+<span class="number">1</span>]()),_price(price)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Computer(const char*, float)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Computer::~<span class="built_in">Computer</span>()&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;~Computer()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(_name)&#123; <span class="comment">// 等价于 if(_name != nullptr)</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1111&quot;</span> &lt;&lt; endl; <span class="comment">// for presentation</span></span><br><span class="line">        <span class="keyword">delete</span> [] _name;</span><br><span class="line">        _name = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Computer.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _Computer_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _Computer_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">float</span> price);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setBrand</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setPrice</span><span class="params">(<span class="type">float</span> price)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    ~<span class="built_in">Computer</span>();</span><br><span class="line">    <span class="built_in">Computer</span>(<span class="type">const</span> Computer&amp; rhs);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _name;</span><br><span class="line">    <span class="type">float</span> _price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Computer.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Computer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line">Computer::<span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">float</span> price)</span><br><span class="line">                  :_name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name)+<span class="number">1</span>]()),_price(price)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Computer(const char*, float)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::setBrand</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name)</span></span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::setPrice</span><span class="params">(<span class="type">float</span> price)</span></span>&#123;</span><br><span class="line">    _price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;price = &quot;</span> &lt;&lt; _price &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Computer::<span class="built_in">Computer</span>(<span class="type">const</span> Computer&amp; rhs)</span><br><span class="line">                   :_name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(rhs._name)+<span class="number">1</span>]()), _price(rhs._price)&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(_name, rhs._name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Computer::~<span class="built_in">Computer</span>()&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;~Computer()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(_name)&#123; <span class="comment">// 等价于 if(_name != nullptr)</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1111&quot;</span> &lt;&lt; endl; <span class="comment">// for presentation</span></span><br><span class="line">        <span class="keyword">delete</span> [] _name;</span><br><span class="line">        _name = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// testComputer.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Computer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Computer <span class="title">com</span><span class="params">(<span class="string">&quot;lenovo&quot;</span>, <span class="number">5300</span>)</span></span>;</span><br><span class="line">    com.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Computer com2 = com;</span><br><span class="line">    com2.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Computer(const char*, float)</span><br><span class="line">name = lenovo</span><br><span class="line">price = 5300</span><br><span class="line"></span><br><span class="line">name = lenovo</span><br><span class="line">price = 5300</span><br><span class="line"></span><br><span class="line">~Computer()</span><br><span class="line">1111</span><br><span class="line">~Computer()</span><br><span class="line">1111</span><br></pre></td></tr></table></figure><p>注意：上面的代码不仅修改了实现文件，同时也修改了头文件。可能会遇到的问题的相关讨论：<a href="https://stackoverflow.com/questions/47092536/c-error-definition-of-implicitly-declared">C++ error: definition of implicitly-declared</a></p><p><strong>拷贝构造函数的调用时机</strong>：</p><ul><li>用一个已存在的（类的）对象初始化另一个新对象时，会调用拷贝构造函数。</li><li>当实参和形参都是对象，进行实参和形参的结合时，会调用拷贝构造函数。</li><li>函数的返回值是对象，函数调用完成返回时，会调用拷贝构造函数。<a href="#bib1" id="bib1ref"><sup>[注1]</sup></a></li><li><strong>总结</strong>：（即发生拷贝的时候。。。）</li></ul><p><a id="bib1" href="#bib1ref"><sup>[注1]</sup></a> 编译器会自动做一个优化，会屏蔽一些过程：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">point <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">point <span class="title">pt</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;pt = &quot;</span>;</span><br><span class="line">    pt.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> pt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    point pt2 = <span class="built_in">func</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;pt2 = &quot;</span>;</span><br><span class="line">    pt2.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">pt = 1 2</span></span><br><span class="line"><span class="comment">pt2 = 1 2</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>为查看完整过程，使用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ tsttmp.cpp -fno-elide-constructors</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">point <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">point <span class="title">pt</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;pt = &quot;</span>;</span><br><span class="line">    pt.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> pt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    point pt2 = <span class="built_in">func</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;pt2 = &quot;</span>;</span><br><span class="line">    pt2.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">pt = 1 2</span></span><br><span class="line"><span class="comment">拷贝构造函数</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">pt2 = 1 2</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>拷贝构造函数参数中的引用符号<strong>不能</strong>去掉。原因比较显然：若去掉则传参方式为拷贝，而此时拷贝行为尚未定义。</p><p>那么 const 能否去掉？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抱歉，不能</span></span><br><span class="line"><span class="built_in">point</span>(point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 看一个更简单的例子</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>&amp; kkk = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">// 报错：</span></span><br><span class="line">    <span class="comment">// initial value of reference to non-const must be an lvalue</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cannot bind non-const lvalue reference of type ‘int&amp;’ to an rvalue of type ‘int’</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改为这样可以编译运行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span>&amp; kkk = <span class="number">3</span>;</span><br><span class="line">    cout &lt;&lt; kkk &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="赋值运算符函数"><a href="#赋值运算符函数" class="headerlink" title="赋值运算符函数"></a>赋值运算符函数</h2><p>可由编译器自动生成。</p><p>例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">point <span class="title">pt</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;pt = &quot;</span>;</span><br><span class="line">    pt.<span class="built_in">print</span>();</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    point pt2 = pt;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;pt2 = &quot;</span>;</span><br><span class="line">    pt2.<span class="built_in">print</span>();</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">point <span class="title">pt3</span><span class="params">(<span class="number">3</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;pt3 = &quot;</span>;</span><br><span class="line">    pt3.<span class="built_in">print</span>();</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    pt2.<span class="keyword">operator</span>=(pt3); <span class="comment">// 赋值运算符函数</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;pt2_2 = &quot;</span>;</span><br><span class="line">    pt2.<span class="built_in">print</span>();</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">pt = 1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">拷贝构造函数</span></span><br><span class="line"><span class="comment">pt2 = 1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">pt3 = 3 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">pt2_2 = 3 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>以上面代码为例，试写出逻辑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">point&amp; <span class="keyword">operator</span>=(<span class="type">const</span> point&amp; rhs)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ix = rhs.ix;</span><br><span class="line">    <span class="keyword">this</span>-&gt;iy = rhs.iy;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>涉及到指针的情形时，（编译器合成的版本）会遇到和拷贝构造函数类似的问题，需要注意，可考虑修改为：</p><p><img src="https://bu.dusays.com/2024/01/17/65a7f6874fef1.png" alt="62-3.png"></p><p>赋值运算符函数参数与返回值问题：</p><p><img src="https://bu.dusays.com/2024/01/18/65a8fbe20b4ce.png" alt="62-4.png"></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>空类为了区分不同的对象，会分配一个字节大小的空间：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Empty</span>&#123;</span><br><span class="line">    <span class="comment">// 默认生成如下函数：</span></span><br><span class="line">    <span class="comment">// 合成的默认构造函数（synthesized default constructor）</span></span><br><span class="line">    <span class="comment">// 拷贝构造函数</span></span><br><span class="line">    <span class="comment">// 赋值运算符函数</span></span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Empty) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Empty) &lt;&lt; endl;</span><br><span class="line">    Empty e1;</span><br><span class="line">    Empty e2;</span><br><span class="line">    Empty e3;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;e1 = %p\n&quot;</span>,&amp;e1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;e2 = %p\n&quot;</span>,&amp;e2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;e3 = %p\n&quot;</span>,&amp;e3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">sizeof(Empty) = 1</span></span><br><span class="line"><span class="comment">&amp;e1 = 0x7ffdb0bc2cc5</span></span><br><span class="line"><span class="comment">&amp;e2 = 0x7ffdb0bc2cc6</span></span><br><span class="line"><span class="comment">&amp;e3 = 0x7ffdb0bc2cc7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>对于类的静态数据成员，若采用头文件与实现文件分开的形式，应将静态数据成员在头文件中声明，实现文件中初始化。否则可能出现多次定义的问题。</p><p>逗号表达式，以最后一个逗号后面的值为准。</p><p><code>delete</code>会调用析构函数。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式是 23 种 GoF 模式中最简单的设计模式之一。这个设计模式主要目的是想在整个系统中只能出现类的一个实例，即一个类只有一个对象。</p><p>其实现步骤大致有如下三步:</p><ol><li>将构造函数私有化</li><li>在类中定义一个静态的指向本类型的指针变量</li><li>定义一个返回值为类指针的静态成员函数</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单例模式</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> A* <span class="title">myCreateObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            _ptmp = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _ptmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">delete</span> _ptmp;</span><br><span class="line">        _ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ~<span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;这里是析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>()&#123; <span class="comment">// 构造函数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;这里是构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">static</span> A* _ptmp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_ptmp = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A* ps1 = A::<span class="built_in">myCreateObj</span>();</span><br><span class="line">    A* ps2 = A::<span class="built_in">myCreateObj</span>(); <span class="comment">// just for test</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ps1 = &quot;</span> &lt;&lt; ps1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ps2 = &quot;</span> &lt;&lt; ps2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    ps1-&gt;<span class="built_in">destroy</span>();</span><br><span class="line">    <span class="comment">/*------just for test------*/</span></span><br><span class="line">    ps2-&gt;<span class="built_in">destroy</span>();</span><br><span class="line">    ps1-&gt;<span class="built_in">destroy</span>();</span><br><span class="line"></span><br><span class="line">    A::<span class="built_in">destroy</span>();</span><br><span class="line">    <span class="comment">/*-------------------------*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 该代码尚有其他问题，但目前不再讨论范围之内</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里是构造函数</span></span><br><span class="line"><span class="comment">ps1 = 0x55f3f6288eb0</span></span><br><span class="line"><span class="comment">ps2 = 0x55f3f6288eb0</span></span><br><span class="line"><span class="comment">这里是析构函数</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>用途：全局唯一的对象，如字典库、词典库、日志记录器等。</p><h2 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h2><p>引入例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">mytst</span>&#123;</span><br><span class="line">    <span class="type">char</span>* _name;   <span class="comment">// 8 个字节</span></span><br><span class="line">    <span class="type">float</span> _price;  <span class="comment">// 4 个字节</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(mytst) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(mytst) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">sizeof(mytst) = 16</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><div class="row"><iframe src="https://drive.google.com/file/d/1ko1BOz9kOUs5VL4CKTKz60JxTV0W0TzA/preview" style="width:100%; height:550px"></iframe></div><p>上面的 PDF 似乎非常抽象，看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">x</span></span><br><span class="line">&#123;             <span class="comment">// byte</span></span><br><span class="line">    <span class="type">char</span> a;   <span class="comment">//  1</span></span><br><span class="line">    <span class="type">int</span> b;    <span class="comment">//  4</span></span><br><span class="line">    <span class="type">short</span> c;  <span class="comment">//  2</span></span><br><span class="line">    <span class="type">char</span> d;   <span class="comment">//  1</span></span><br><span class="line">&#125;MyStructX;   <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">y</span></span><br><span class="line">&#123;             <span class="comment">// byte</span></span><br><span class="line">    <span class="type">int</span> b;    <span class="comment">//   4</span></span><br><span class="line">    <span class="type">char</span> a;   <span class="comment">//   1</span></span><br><span class="line">    <span class="type">char</span> d;   <span class="comment">//   1</span></span><br><span class="line">    <span class="type">short</span> c;  <span class="comment">//   2</span></span><br><span class="line">&#125;MyStructY;   <span class="comment">//   8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SS</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">char</span> b;</span><br><span class="line">    <span class="type">short</span> c;</span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">FF</span>&#123;</span><br><span class="line">        <span class="type">int</span> a1;</span><br><span class="line">        <span class="type">char</span> b1;</span><br><span class="line">        <span class="type">short</span> c1;</span><br><span class="line">        <span class="type">char</span> d1;</span><br><span class="line">    &#125;MyStructFF;</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    <span class="type">double</span> ww;</span><br><span class="line">&#125;MyStructSS;   <span class="comment">//  40</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SS2</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">char</span> b;</span><br><span class="line">    <span class="type">short</span> c;</span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">FF</span>&#123;</span><br><span class="line">        <span class="type">int</span> a1;</span><br><span class="line">        <span class="type">char</span> b1;</span><br><span class="line">        <span class="type">short</span> c1;</span><br><span class="line">        <span class="type">char</span> d1;</span><br><span class="line">    &#125;MyStructFF;</span><br><span class="line">    <span class="type">char</span> e;</span><br><span class="line">&#125;MyStructSS2;  <span class="comment">//  28</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(MyStructSS2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">28</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>解释：</p><p><img src="https://bu.dusays.com/2024/01/19/65aa686a32d0e.jpg" alt="62-5.jpg"></p><p>对于<code>MyStructSS2</code>：</p><p><img src="https://bu.dusays.com/2024/01/19/65aa69e88168e.png" alt="62-6.png"></p><p>总结：</p><ul><li>数据成员要对齐。</li><li>结构体要对齐，结构体的大小是其最大数据成员的整数倍。</li><li>结构体里还有结构体时，里结构体要对齐（按照最大数据成员的整数倍对齐）。</li></ul><p>可使用如下方式进行某些调整，不细述：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(4)</span></span><br></pre></td></tr></table></figure><h2 id="实现自己的-String"><a href="#实现自己的-String" class="headerlink" title="实现自己的 String"></a>实现自己的 String</h2><p>粗糙地实现自己的 String 类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>():_pstr(<span class="literal">nullptr</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* pstr):</span><br><span class="line">    _pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pstr)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr, pstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; rhs):</span><br><span class="line">    _pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(rhs._pstr)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr, rhs._pstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String&amp; <span class="keyword">operator</span>= (<span class="type">const</span> String&amp; rhs)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String&amp; operator= (const String&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;rhs)&#123;  <span class="comment">//防止自复制</span></span><br><span class="line">            <span class="keyword">if</span>(_pstr)&#123;</span><br><span class="line">                <span class="keyword">delete</span> [] _pstr;</span><br><span class="line">                _pstr = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _pstr = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(rhs._pstr)+<span class="number">1</span>]();</span><br><span class="line">            <span class="built_in">strcpy</span>(_pstr, rhs._pstr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">length</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="type">size_t</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(_pstr)&#123;</span><br><span class="line">            len = <span class="built_in">strlen</span>(_pstr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pstr)&#123;</span><br><span class="line">            <span class="keyword">return</span> _pstr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">String</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pstr)&#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pstr;</span><br><span class="line">            _pstr = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pstr)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;_pstr = &quot;</span> &lt;&lt; _pstr &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pstr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    String str1;</span><br><span class="line">    str1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    String str2 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="function">String <span class="title">str3</span><span class="params">(<span class="string">&quot;Mizuho&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    str2.<span class="built_in">print</span>();</span><br><span class="line">    str3.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    String str4 = str3;</span><br><span class="line">    str4.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    str4 = str2;</span><br><span class="line">    str4.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str3.<span class="built_in">c_str</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">String()</span><br><span class="line"></span><br><span class="line">String(const char*)</span><br><span class="line">String(const char*)</span><br><span class="line"></span><br><span class="line">_pstr = hello world</span><br><span class="line">_pstr = Mizuho</span><br><span class="line"></span><br><span class="line">String(const String&amp;)</span><br><span class="line">_pstr = Mizuho</span><br><span class="line">String&amp; operator= (const String&amp;)</span><br><span class="line">_pstr = hello world</span><br><span class="line">~String()</span><br><span class="line">~String()</span><br><span class="line">~String()</span><br><span class="line">~String()</span><br></pre></td></tr></table></figure><h2 id="new、delete-的工作步骤"><a href="#new、delete-的工作步骤" class="headerlink" title="new、delete 的工作步骤"></a>new、delete 的工作步骤</h2><p>new 表达式工作步骤：</p><ol><li>调用标准库函数<code>operator new</code>，申请原始的未初始化的空间</li><li>在申请的空间上执行构造函数，初始化对象的数据成员</li><li>返回指向对象的指针</li></ol><p>delete 表达式工作步骤：</p><ol><li>调用析构函数，回收对象中数据成员所申请的资源</li><li>调用标准库函数<code>operator delete</code>，回收对象本身所占用的资源</li></ol><p><code>operator new</code>和<code>operator delete</code>函数的重载版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// operator new 库函数</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span>)</span></span>;</span><br><span class="line"><span class="type">void</span>* <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="type">siez_t</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// operator delete 库函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>*)</span></span>;</span><br><span class="line"><span class="type">void</span> <span class="keyword">operator</span> <span class="keyword">delete</span>[](<span class="type">void</span>*);</span><br></pre></td></tr></table></figure><p>下面通过例子来演示。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>(<span class="type">int</span> id, <span class="type">const</span> <span class="type">char</span>* name)</span><br><span class="line">    : _id(id)</span><br><span class="line">    , _name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Student(int, const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> sz)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void* operator new(size_t)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="type">void</span>* pret = <span class="built_in">malloc</span>(sz);</span><br><span class="line">        <span class="keyword">return</span> pret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>* pret)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void operator delete(void*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">free</span>(pret); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_name) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; _id &lt;&lt; endl</span><br><span class="line">                 &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Student</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Student()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_name) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _name;</span><br><span class="line">            _name = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _id;</span><br><span class="line">    <span class="type">char</span>* _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    Student* pstu = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="number">4231</span>, <span class="string">&quot;lili&quot;</span>);</span><br><span class="line">    pstu-&gt;<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pstu;</span><br><span class="line">    pstu = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void* operator new(size_t)</span></span><br><span class="line"><span class="comment">Student(int, const char*)</span></span><br><span class="line"><span class="comment">id = 4231</span></span><br><span class="line"><span class="comment">name = lili</span></span><br><span class="line"><span class="comment">~Student()</span></span><br><span class="line"><span class="comment">void operator delete(void*)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>作为对比：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> sz)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;void* operator new(size_t)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">void</span>* pret = <span class="built_in">malloc</span>(sz);</span><br><span class="line">    <span class="keyword">return</span> pret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>* pret)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;void operator delete(void*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">free</span>(pret); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>(<span class="type">int</span> id, <span class="type">const</span> <span class="type">char</span>* name)</span><br><span class="line">    : _id(id)</span><br><span class="line">    , _name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Student(int, const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_name) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; _id &lt;&lt; endl</span><br><span class="line">                 &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Student</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Student()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_name) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _name;</span><br><span class="line">            _name = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _id;</span><br><span class="line">    <span class="type">char</span>* _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    Student* pstu = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="number">4231</span>, <span class="string">&quot;lili&quot;</span>);</span><br><span class="line">    pstu-&gt;<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pstu;</span><br><span class="line">    pstu = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void* operator new(size_t)</span></span><br><span class="line"><span class="comment">void* operator new(size_t)</span></span><br><span class="line"><span class="comment">Student(int, const char*)</span></span><br><span class="line"><span class="comment">id = 4231</span></span><br><span class="line"><span class="comment">name = lili</span></span><br><span class="line"><span class="comment">~Student()</span></span><br><span class="line"><span class="comment">void operator delete(void*)</span></span><br><span class="line"><span class="comment">void operator delete(void*)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>总结：当<code>void* operator new(size_t sz)</code>写在全局时，针对所有 new 表达式。</p><p>要求<strong>只能生成栈对象，不能生成堆对象</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求：只能生成栈对象，不能生成堆对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>(<span class="type">int</span> id, <span class="type">const</span> <span class="type">char</span>* name)</span><br><span class="line">    : _id(id)</span><br><span class="line">    , _name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Student(int, const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_name) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; _id &lt;&lt; endl</span><br><span class="line">                 &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> sz)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void* operator new(size_t)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="type">void</span>* pret = <span class="built_in">malloc</span>(sz);</span><br><span class="line">        <span class="keyword">return</span> pret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>* pret)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void operator delete(void*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">free</span>(pret); </span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Student</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Student()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_name) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _name;</span><br><span class="line">            _name = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _id;</span><br><span class="line">    <span class="type">char</span>* _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="function">Student <span class="title">stu</span><span class="params">(<span class="number">4202</span>, <span class="string">&quot;lucy&quot;</span>)</span></span>;</span><br><span class="line">    stu.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// error, 会报错</span></span><br><span class="line">    <span class="comment">//Student* pstu = new Student(4231, &quot;lili&quot;);</span></span><br><span class="line">    <span class="comment">//pstu-&gt;print();</span></span><br><span class="line">    <span class="comment">//delete pstu;</span></span><br><span class="line">    <span class="comment">//pstu = nullptr;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Student(int, const char*)</span></span><br><span class="line"><span class="comment">id = 4202</span></span><br><span class="line"><span class="comment">name = lucy</span></span><br><span class="line"><span class="comment">~Student()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，为了成对出现，也可以将 delete 设为私有。</p><p>栈对象创建的条件：构造函数和析构函数都是 public .</p><p>要求，<strong>只能生成堆对象，不能生成栈对象</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求：只能生成堆对象，不能生成栈对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>(<span class="type">int</span> id, <span class="type">const</span> <span class="type">char</span>* name)</span><br><span class="line">    : _id(id)</span><br><span class="line">    , _name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Student(int, const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_name) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; _id &lt;&lt; endl</span><br><span class="line">                 &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">destory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//不能直接执行析构函数，没有将对象本身占用的内存回收</span></span><br><span class="line">        <span class="comment">//this-&gt;~Student();</span></span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> sz)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void* operator new(size_t)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="type">void</span>* pret = <span class="built_in">malloc</span>(sz);</span><br><span class="line">        <span class="keyword">return</span> pret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>* pret)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void operator delete(void*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">free</span>(pret); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ~<span class="built_in">Student</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Student()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_name) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _name;</span><br><span class="line">            _name = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _id;</span><br><span class="line">    <span class="type">char</span>* _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="comment">//error, 会报错</span></span><br><span class="line">    <span class="comment">//Student stu(4202, &quot;lucy&quot;);</span></span><br><span class="line">    <span class="comment">//stu.print();</span></span><br><span class="line"></span><br><span class="line">    Student* pstu = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="number">4231</span>, <span class="string">&quot;lili&quot;</span>);</span><br><span class="line">    pstu-&gt;<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//error, 也会报错</span></span><br><span class="line">    <span class="comment">//delete pstu;</span></span><br><span class="line">    <span class="comment">//pstu = nullptr;</span></span><br><span class="line">    <span class="comment">//解决思路：写一个函数来执行此功能</span></span><br><span class="line"></span><br><span class="line">    pstu-&gt;<span class="built_in">destory</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void* operator new(size_t)</span></span><br><span class="line"><span class="comment">Student(int, const char*)</span></span><br><span class="line"><span class="comment">id = 4231</span></span><br><span class="line"><span class="comment">name = lili</span></span><br><span class="line"><span class="comment">~Student()</span></span><br><span class="line"><span class="comment">void operator delete(void*)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h2><p>来看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStreamStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;cin.badbit = &quot;</span> &lt;&lt; cin.<span class="built_in">bad</span>() &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;cin.failbit = &quot;</span> &lt;&lt; cin.<span class="built_in">fail</span>() &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;cin.eofbit = &quot;</span> &lt;&lt; cin.<span class="built_in">eof</span>() &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;cin.goodbit = &quot;</span> &lt;&lt; cin.<span class="built_in">good</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printStreamStatus</span>();</span><br><span class="line">    cin &gt;&gt; number;</span><br><span class="line">    <span class="built_in">printStreamStatus</span>();</span><br><span class="line"></span><br><span class="line">    cin.<span class="built_in">clear</span>(); <span class="comment">//重置流的状态</span></span><br><span class="line">    <span class="built_in">printStreamStatus</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;number = &quot;</span> &lt;&lt; number &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    string line;</span><br><span class="line">    cin &gt;&gt; line;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;line = &quot;</span> &lt;&lt; line &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  合法输入：</span></span><br><span class="line"><span class="comment">cin.badbit = 0</span></span><br><span class="line"><span class="comment">cin.failbit = 0</span></span><br><span class="line"><span class="comment">cin.eofbit = 0</span></span><br><span class="line"><span class="comment">cin.goodbit = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">cin.badbit = 0</span></span><br><span class="line"><span class="comment">cin.failbit = 0</span></span><br><span class="line"><span class="comment">cin.eofbit = 0</span></span><br><span class="line"><span class="comment">cin.goodbit = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">cin.badbit = 0</span></span><br><span class="line"><span class="comment">cin.failbit = 0</span></span><br><span class="line"><span class="comment">cin.eofbit = 0</span></span><br><span class="line"><span class="comment">cin.goodbit = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">number = 1</span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">line = hello</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 非法输入：</span></span><br><span class="line"><span class="comment">cin.badbit = 0</span></span><br><span class="line"><span class="comment">cin.failbit = 0</span></span><br><span class="line"><span class="comment">cin.eofbit = 0</span></span><br><span class="line"><span class="comment">cin.goodbit = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">cin.badbit = 0</span></span><br><span class="line"><span class="comment">cin.failbit = 1</span></span><br><span class="line"><span class="comment">cin.eofbit = 0</span></span><br><span class="line"><span class="comment">cin.goodbit = 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">cin.badbit = 0</span></span><br><span class="line"><span class="comment">cin.failbit = 0</span></span><br><span class="line"><span class="comment">cin.eofbit = 0</span></span><br><span class="line"><span class="comment">cin.goodbit = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">number = 0</span></span><br><span class="line"><span class="comment">line = hello</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以发现，上例的非法输入结果中，line 直接接受了 “hello”, 而没有等待键盘输入。（因为数据仍在缓冲区中）</p><p>可使用<code>cin.ignore(1024, &#39;\n&#39;);</code>清空缓冲区。更推荐的写法（需要包含头文件<code>&lt;limits&gt;</code>）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cin.<span class="built_in">ignore</span>(std::numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br></pre></td></tr></table></figure><p>缓冲区分为三种类型：全缓冲、行缓冲和不带缓冲。</p><ul><li>全缓冲：填满标准 IO 缓存后才进行实际 IO 操作。典型代表是对磁盘文件的读写。</li><li>行缓冲：输入和输出中遇到换行符时，执行真正的 IO 操作。这时，输入的字符先放在缓冲区，按下回车换行时才进行实际的 IO 操作。典型代表是键盘输入数据。</li><li>不带缓冲：不进行缓冲。标准出错情况 cerr/stderr 是典型代表，目的：出错信息可以尽快显示。</li></ul><p>程序正常结束，会刷新缓冲区：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i!=<span class="number">1024</span>; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">表现：</span></span><br><span class="line"><span class="comment">程序在睡了 5 秒之后，才输出一堆 a</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>缓冲区满，刷新：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i!=<span class="number">1024</span>; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">表现：</span></span><br><span class="line"><span class="comment">先输出了一堆 a ，然后睡了 5 秒之后，输出 b</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="文件-IO"><a href="#文件-IO" class="headerlink" title="文件 IO"></a>文件 IO</h2><p>看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::fstream;</span><br><span class="line"><span class="keyword">using</span> std::cerr;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对于 fstream 而言，文件不存在时会打开失败</span></span><br><span class="line">    <span class="function">fstream <span class="title">fs</span><span class="params">(<span class="string">&quot;heihei.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!fs.<span class="built_in">good</span>()) &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;fstream is not good!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 业务逻辑：</span></span><br><span class="line">    <span class="comment">// 从键盘输入数据，通过fs写到文件中</span></span><br><span class="line">    <span class="comment">// 再通过fs读文件，将数据输出到屏幕</span></span><br><span class="line">    <span class="type">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i != <span class="number">5</span>; i++)&#123;</span><br><span class="line">        cin &gt;&gt; number;</span><br><span class="line">        fs &lt;&lt; number &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i != <span class="number">5</span>; i++)&#123;</span><br><span class="line">        fs &gt;&gt; number;</span><br><span class="line">        cout &lt;&lt; number &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    fs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">5 5 5 5 5</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ cat heihei.txt </span></span><br><span class="line"><span class="comment">1 2 3 4 5 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>这个代码与预期目标不符，作以下调整：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::fstream;</span><br><span class="line"><span class="keyword">using</span> std::cerr;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对于 fstream 而言，文件不存在时会打开失败</span></span><br><span class="line">    <span class="function">fstream <span class="title">fs</span><span class="params">(<span class="string">&quot;heihei.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!fs.<span class="built_in">good</span>()) &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;fstream is not good!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 业务逻辑：</span></span><br><span class="line">    <span class="comment">// 从键盘输入数据，通过fs写到文件中</span></span><br><span class="line">    <span class="comment">// 再通过fs读文件，将数据输出到屏幕</span></span><br><span class="line">    <span class="type">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i != <span class="number">5</span>; i++)&#123;</span><br><span class="line">        cin &gt;&gt; number;</span><br><span class="line">        fs &lt;&lt; number &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i != <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="comment">//---- get status-------</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;fs.failbit = &quot;</span> &lt;&lt; fs.<span class="built_in">fail</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;fs.eofbit = &quot;</span> &lt;&lt; fs.<span class="built_in">eof</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;fs.goodbit = &quot;</span> &lt;&lt; fs.<span class="built_in">good</span>() &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//----------------------</span></span><br><span class="line">        fs &gt;&gt; number;</span><br><span class="line">        cout &lt;&lt; number &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    fs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2 </span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">fs.failbit = 0</span></span><br><span class="line"><span class="comment">fs.eofbit = 0</span></span><br><span class="line"><span class="comment">fs.goodbit = 1</span></span><br><span class="line"><span class="comment">5 fs.failbit = 1</span></span><br><span class="line"><span class="comment">fs.eofbit = 1</span></span><br><span class="line"><span class="comment">fs.goodbit = 0</span></span><br><span class="line"><span class="comment">5 fs.failbit = 1</span></span><br><span class="line"><span class="comment">fs.eofbit = 1</span></span><br><span class="line"><span class="comment">fs.goodbit = 0</span></span><br><span class="line"><span class="comment">5 fs.failbit = 1</span></span><br><span class="line"><span class="comment">fs.eofbit = 1</span></span><br><span class="line"><span class="comment">fs.goodbit = 0</span></span><br><span class="line"><span class="comment">5 fs.failbit = 1</span></span><br><span class="line"><span class="comment">fs.eofbit = 1</span></span><br><span class="line"><span class="comment">fs.goodbit = 0</span></span><br><span class="line"><span class="comment">5 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的调试过程中，发现文件指针一直在末尾。</p><p>修改代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::fstream;</span><br><span class="line"><span class="keyword">using</span> std::cerr;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对于 fstream 而言，文件不存在时会打开失败</span></span><br><span class="line">    <span class="function">fstream <span class="title">fs</span><span class="params">(<span class="string">&quot;heihei.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!fs.<span class="built_in">good</span>()) &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;fstream is not good!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 业务逻辑：</span></span><br><span class="line">    <span class="comment">// 从键盘输入数据，通过fs写到文件中</span></span><br><span class="line">    <span class="comment">// 再通过fs读文件，将数据输出到屏幕</span></span><br><span class="line">    <span class="type">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i != <span class="number">5</span>; i++)&#123;</span><br><span class="line">        cin &gt;&gt; number;</span><br><span class="line">        fs &lt;&lt; number &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出指针偏移的位置：</span></span><br><span class="line">    <span class="type">size_t</span> len = fs.<span class="built_in">tellp</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;len = &quot;</span> &lt;&lt; len &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    fs.<span class="built_in">seekp</span>(<span class="number">0</span>);</span><br><span class="line">    len = fs.<span class="built_in">tellp</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;len = &quot;</span> &lt;&lt; len &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i != <span class="number">5</span>; i++)&#123;</span><br><span class="line">        fs &gt;&gt; number;</span><br><span class="line">        cout &lt;&lt; number &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    fs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">wanko@wanko:~$ cd &quot;/home/wanko/mycode/&quot; &amp;&amp; g++ testtmp.cc -o testtmp &amp;&amp; &quot;/home/wanko/mycode/&quot;testtmp</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">len = 10</span></span><br><span class="line"><span class="comment">len = 0</span></span><br><span class="line"><span class="comment">1 2 3 4 5 </span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ cat heihei.txt</span></span><br><span class="line"><span class="comment">1 2 3 4 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>tellp</code>，p = put<br><code>tellg</code>，g = get<br><code>seekp</code> / <code>seekg</code> 同理</p><p>也可以使用相对位置：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="built_in">seekp</span>(<span class="number">-11</span>, std::ios::end); <span class="comment">// 相对位置</span></span><br></pre></td></tr></table></figure><h2 id="串-IO"><a href="#串-IO" class="headerlink" title="串 IO"></a>串 IO</h2><p>数字转字符串：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">int2str</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    ostringstream oss;</span><br><span class="line">    oss &lt;&lt; value;</span><br><span class="line">    <span class="keyword">return</span> oss.<span class="built_in">str</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">20</span>;</span><br><span class="line">    string s1 = <span class="built_in">int2str</span>(number);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">s1 = 20</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>一种新颖的用法（将流中各元素按需取出）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> num2 = <span class="number">20</span>;</span><br><span class="line">    stringstream ss;</span><br><span class="line">    ss &lt;&lt; <span class="string">&quot;num1= &quot;</span> &lt;&lt; num1</span><br><span class="line">       &lt;&lt; <span class="string">&quot; num2= &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">    string s1 = ss.<span class="built_in">str</span>();</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    string key;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">while</span>(ss &gt;&gt; key &gt;&gt; value) &#123;</span><br><span class="line">        cout &lt;&lt; key &lt;&lt; <span class="string">&quot;---&gt;&quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">num1= 10 num2= 20</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">num1=---&gt;10</span></span><br><span class="line"><span class="comment">num2=---&gt;20</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>日志的作用：<br>例如一个需要 7*24h 后台运行的服务器程序，当服务器崩溃或出现问题后，需要查看日志以分析问题。</p><p>例子：在<code>/var/log</code>下，打开文件<code>syslog.1</code>，可以欣赏到五彩斑斓的日志记录。</p><p>日志的设计思路：</p><ul><li>记录器：产生日志记录的原始信息。例如，等级、时间、记录的位置。</li><li>过滤器：按指定条件过滤掉不需要的日志。</li><li>格式化器：格式化原始日志信息。</li><li>输出器：将处理后的日志记录到目的位置。</li></ul><h3 id="log4cpp-安装"><a href="#log4cpp-安装" class="headerlink" title="log4cpp 安装"></a>log4cpp 安装</h3><p>官网： <a href="https://log4cpp.sourceforge.net/">https://log4cpp.sourceforge.net/</a><br>文档： <a href="https://log4cpp.sourceforge.net/api/index.html">https://log4cpp.sourceforge.net/api/index.html</a></p><p>安装：</p><ol><li>在官网下载 log4cpp-1.1.4.tar.gz（版本号可能会更新）至用户主目录<code>~</code></li><li><code>tar zxvf log4cpp-1.1.4.tar.gz</code></li><li><code>cd ~/log4cpp/</code></li><li><code>./configure</code></li><li><code>make</code></li><li><code>make check</code></li><li><code>sudo make install</code></li><li>安装成功</li></ol><p>默认lib库路径是：<code>/usr/local/lib/</code><br>默认头文件的位置：<code>/usr/local/include/log4cpp</code></p><p>编译使用 log4cpp 库的 CPP 文件时，要加上库文件，才能编译通过。示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ log4test.cpp -llog4cpp -lpthread</span><br></pre></td></tr></table></figure><p>运行时，若提示缺少 log4cpp 库文件，表示找不到 log4cpp 的动态库，需要以管理员身份登录终端，然后执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ld.so.conf</span><br></pre></td></tr></table></figure><p>在文件末尾另起一行，写入动态库 log4cpp 的路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/lib</span><br></pre></td></tr></table></figure><p>更新库文件的缓存信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p>此时初始工作完成。</p><h3 id="log4cpp-使用"><a href="#log4cpp-使用" class="headerlink" title="log4cpp 使用"></a>log4cpp 使用</h3><p>相关知识讲解：</p><div class="row"><iframe src="https://drive.google.com/file/d/1EU7E-qyFv1-VuB-ZMvwKnhQBR8xIYiGE/preview" style="width:100%; height:550px"></iframe></div><p>注意：在上面的 PDF 中，<code>OstreamAppender()</code>的第二个形参少了一个<code>*</code>，应为指针类型。</p><p>相关文章： <a href="https://blog.csdn.net/liuhong135541/category_1496383.html">log4cpp_作者静觅_CSDN</a></p><p>记录器： Category<br>目的地： Appender<br>过滤器： Priority<br>格式化器： Layout</p><p>Priority 等级：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">    EMERG=<span class="number">0</span>,</span><br><span class="line">    FATAL=<span class="number">0</span>,</span><br><span class="line">    ALERT=<span class="number">100</span>,</span><br><span class="line">    CRIT=<span class="number">200</span>,</span><br><span class="line">    ERROR=<span class="number">300</span>,</span><br><span class="line">    WARN=<span class="number">400</span>,</span><br><span class="line">    NOTICE=<span class="number">500</span>,</span><br><span class="line">    INFO=<span class="number">600</span>,</span><br><span class="line">    DEBUG=<span class="number">700</span>,</span><br><span class="line">    NOTSET =<span class="number">800</span></span><br><span class="line">&#125;PriorityLevel;</span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/SimpleLayout.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/OstreamAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Category.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Priority.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> log4cpp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 日志的格式</span></span><br><span class="line">    SimpleLayout* ps1 = <span class="keyword">new</span> <span class="built_in">SimpleLayout</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的目的地               // 参数含义见上面的 PDF</span></span><br><span class="line">    OstreamAppender* pos = <span class="keyword">new</span> <span class="built_in">OstreamAppender</span>(<span class="string">&quot;12&quot;</span>, &amp;cout);</span><br><span class="line">    pos-&gt;<span class="built_in">setLayout</span>(ps1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的记录器</span></span><br><span class="line">    Category&amp; root = Category::<span class="built_in">getRoot</span>();</span><br><span class="line">    root.<span class="built_in">addAppender</span>(pos);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的过滤器</span></span><br><span class="line">    root.<span class="built_in">setPriority</span>(Priority::ERROR);</span><br><span class="line"></span><br><span class="line">    root.<span class="built_in">emerg</span>(<span class="string">&quot;this is a emerg msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">fatal</span>(<span class="string">&quot;this is a fatal msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">alert</span>(<span class="string">&quot;this is a alert msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">crit</span>(<span class="string">&quot;this is a crit msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">error</span>(<span class="string">&quot;this is a error msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">warn</span>(<span class="string">&quot;this is a warn msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">info</span>(<span class="string">&quot;this is a info msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">debug</span>(<span class="string">&quot;this is a debug msg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回收空间</span></span><br><span class="line">    Category::<span class="built_in">shutdown</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ g++ testtmp.cc -llog4cpp -lpthread</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ ./a.out</span></span><br><span class="line"><span class="comment">FATAL   : this is a emerg msg</span></span><br><span class="line"><span class="comment">FATAL   : this is a fatal msg</span></span><br><span class="line"><span class="comment">ALERT   : this is a alert msg</span></span><br><span class="line"><span class="comment">CRIT    : this is a crit msg</span></span><br><span class="line"><span class="comment">ERROR   : this is a error msg</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>使用 PatternLayout 的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/PatternLayout.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/OstreamAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Category.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Priority.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> log4cpp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 日志的格式</span></span><br><span class="line">    PatternLayout* ppl = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">    ppl-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d %c [%p] %m%n&quot;</span>);</span><br><span class="line">         <span class="comment">//  日期  Category名字  等级  字符串  换行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的目的地               // 参数含义见上面的 PDF</span></span><br><span class="line">    OstreamAppender* pos = <span class="keyword">new</span> <span class="built_in">OstreamAppender</span>(<span class="string">&quot;12&quot;</span>, &amp;cout);</span><br><span class="line">    pos-&gt;<span class="built_in">setLayout</span>(ppl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的记录器</span></span><br><span class="line">    Category&amp; root = Category::<span class="built_in">getRoot</span>();</span><br><span class="line">    root.<span class="built_in">addAppender</span>(pos);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的过滤器</span></span><br><span class="line">    root.<span class="built_in">setPriority</span>(Priority::ERROR);</span><br><span class="line"></span><br><span class="line">    root.<span class="built_in">emerg</span>(<span class="string">&quot;this is a emerg msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">fatal</span>(<span class="string">&quot;this is a fatal msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">alert</span>(<span class="string">&quot;this is a alert msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">crit</span>(<span class="string">&quot;this is a crit msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">error</span>(<span class="string">&quot;this is a error msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">warn</span>(<span class="string">&quot;this is a warn msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">info</span>(<span class="string">&quot;this is a info msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">debug</span>(<span class="string">&quot;this is a debug msg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回收空间</span></span><br><span class="line">    Category::<span class="built_in">shutdown</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ g++ testtmp.cc -llog4cpp -lpthread</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ ./a.out</span></span><br><span class="line"><span class="comment">2024-02-15 16:37:46,344  [FATAL] this is a emerg msg</span></span><br><span class="line"><span class="comment">2024-02-15 16:37:46,344  [FATAL] this is a fatal msg</span></span><br><span class="line"><span class="comment">2024-02-15 16:37:46,344  [ALERT] this is a alert msg</span></span><br><span class="line"><span class="comment">2024-02-15 16:37:46,344  [CRIT] this is a crit msg</span></span><br><span class="line"><span class="comment">2024-02-15 16:37:46,344  [ERROR] this is a error msg</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意： 344是毫秒，Category名字没有打印出来</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>将日志写入文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/PatternLayout.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/OstreamAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/FileAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Category.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Priority.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> log4cpp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 日志的格式</span></span><br><span class="line">    PatternLayout* ppl1 = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">    ppl1-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d %c [%p] %m%n&quot;</span>);</span><br><span class="line">         <span class="comment">//  日期  Category名字  等级  字符串  换行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里写两次是为了防止 double free</span></span><br><span class="line">    PatternLayout* ppl2 = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">    ppl2-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d %c [%p] %m%n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//======== 既输出到屏幕上，==========</span></span><br><span class="line">    <span class="comment">// 日志的目的地               // 参数含义见上面的 PDF</span></span><br><span class="line">    OstreamAppender* pos = <span class="keyword">new</span> <span class="built_in">OstreamAppender</span>(<span class="string">&quot;12&quot;</span>, &amp;cout);</span><br><span class="line">    pos-&gt;<span class="built_in">setLayout</span>(ppl1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//======== 也输出到文件中。==========</span></span><br><span class="line">    FileAppender* pfa = <span class="keyword">new</span> <span class="built_in">FileAppender</span>(<span class="string">&quot;FileA1&quot;</span>, <span class="string">&quot;xx.log&quot;</span>);</span><br><span class="line">    pfa-&gt;<span class="built_in">setLayout</span>(ppl2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的记录器</span></span><br><span class="line">    Category&amp; root = Category::<span class="built_in">getRoot</span>();</span><br><span class="line">    root.<span class="built_in">addAppender</span>(pos);</span><br><span class="line">    root.<span class="built_in">addAppender</span>(pfa);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的过滤器</span></span><br><span class="line">    root.<span class="built_in">setPriority</span>(Priority::ERROR);</span><br><span class="line"></span><br><span class="line">    root.<span class="built_in">emerg</span>(<span class="string">&quot;this is a emerg msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">fatal</span>(<span class="string">&quot;this is a fatal msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">alert</span>(<span class="string">&quot;this is a alert msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">crit</span>(<span class="string">&quot;this is a crit msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">error</span>(<span class="string">&quot;this is a error msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">warn</span>(<span class="string">&quot;this is a warn msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">info</span>(<span class="string">&quot;this is a info msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">debug</span>(<span class="string">&quot;this is a debug msg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回收空间</span></span><br><span class="line">    Category::<span class="built_in">shutdown</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><font color="red">- - - 使用 RollingFileAppender - - -</font></center><p>若只输出到一个文件中，可能导致文件过大。可以考虑使用 RollingFileAppender. </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/PatternLayout.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/OstreamAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/RollingFileAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Category.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Priority.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> log4cpp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 日志的格式</span></span><br><span class="line">    PatternLayout* ppl1 = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">    ppl1-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d %c [%p] %m%n&quot;</span>);</span><br><span class="line">         <span class="comment">//  日期  Category名字  等级  字符串  换行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里写两次是为了防止 double free</span></span><br><span class="line">    PatternLayout* ppl2 = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">    ppl2-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d %c [%p] %m%n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//======== 既输出到屏幕上，==========</span></span><br><span class="line">    <span class="comment">// 日志的目的地               // 参数含义见上面的 PDF</span></span><br><span class="line">    OstreamAppender* pos = <span class="keyword">new</span> <span class="built_in">OstreamAppender</span>(<span class="string">&quot;12&quot;</span>, &amp;cout);</span><br><span class="line">    pos-&gt;<span class="built_in">setLayout</span>(ppl1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//======== 也输出到文件中。==========</span></span><br><span class="line">    RollingFileAppender* prfa = </span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">RollingFileAppender</span>(<span class="string">&quot;RollFileA1&quot;</span>, <span class="string">&quot;xx.log&quot;</span>, <span class="number">5</span>*<span class="number">1024</span>, <span class="number">3</span>);</span><br><span class="line">    prfa-&gt;<span class="built_in">setLayout</span>(ppl2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的记录器</span></span><br><span class="line">    Category&amp; root = Category::<span class="built_in">getRoot</span>();</span><br><span class="line">    root.<span class="built_in">addAppender</span>(pos);</span><br><span class="line">    root.<span class="built_in">addAppender</span>(prfa);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的过滤器</span></span><br><span class="line">    root.<span class="built_in">setPriority</span>(Priority::ERROR);</span><br><span class="line"></span><br><span class="line">    root.<span class="built_in">emerg</span>(<span class="string">&quot;this is a emerg msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">fatal</span>(<span class="string">&quot;this is a fatal msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">alert</span>(<span class="string">&quot;this is a alert msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">crit</span>(<span class="string">&quot;this is a crit msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">error</span>(<span class="string">&quot;this is a error msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">warn</span>(<span class="string">&quot;this is a warn msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">info</span>(<span class="string">&quot;this is a info msg&quot;</span>);</span><br><span class="line">    root.<span class="built_in">debug</span>(<span class="string">&quot;this is a debug msg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回收空间</span></span><br><span class="line">    Category::<span class="built_in">shutdown</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为看到效果，编写脚本<code>for.sh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span>((i=1; i&lt;=100; i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    ./a.out</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>然后为<code>for.sh</code>配置丧心病狂的权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 ./for.sh</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./for.sh</span><br></pre></td></tr></table></figure><p>效果：在<code>~/mycode</code>目录下看到<code>xx.log</code>、<code>xx.log.1</code>、<code>xx.log.2</code>、<code>xx.log.3</code>.</p><p><code>xx.log</code>始终保持最新。若<code>xx.log</code>大小达到设定上限，则将其重命名为<code>xx.log.1</code>，在新文件<code>xx.log</code>中写入最新日志。以此类推。</p><center><font color="red">- - - RollingFileAppender END - - -</font></center><h2 id="作业一"><a href="#作业一" class="headerlink" title="作业一"></a>作业一</h2><h3 id="词频统计"><a href="#词频统计" class="headerlink" title="词频统计"></a>词频统计</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Record</span>&#123;</span><br><span class="line">    <span class="built_in">Record</span>(<span class="type">const</span> string&amp; word, <span class="type">int</span> fre)</span><br><span class="line">          :_word(word), _frequeny(fre)&#123;&#125;</span><br><span class="line">    string _word;</span><br><span class="line">    <span class="type">int</span> _frequeny;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dictionary</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Dictionary</span>(<span class="type">int</span> capa)&#123;</span><br><span class="line">        _dict.<span class="built_in">reserve</span>(capa); <span class="comment">// 预留vector空间</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">const</span> string&amp; filename)</span></span>&#123;</span><br><span class="line">        <span class="function">std::ifstream <span class="title">ifs</span><span class="params">(filename)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(!ifs.<span class="built_in">good</span>())&#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;open&quot;</span> &lt;&lt; filename &lt;&lt; <span class="string">&quot;failed.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string line;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(ifs,line))&#123;</span><br><span class="line">            <span class="function">std::istringstream <span class="title">iss</span><span class="params">(line)</span></span>;</span><br><span class="line">            string word;</span><br><span class="line">            <span class="keyword">while</span>(iss &gt;&gt; word)&#123;</span><br><span class="line">                <span class="comment">// 先读行，再读每行的单词，是为了减少磁盘IO</span></span><br><span class="line">                string new_word = <span class="built_in">dealWord</span>(word);</span><br><span class="line">                <span class="built_in">insert</span>(new_word);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ifs.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">store</span><span class="params">(<span class="type">const</span> string&amp; filename)</span></span>&#123;</span><br><span class="line">        <span class="function">std::ofstream <span class="title">ofs</span><span class="params">(filename)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(!ofs.<span class="built_in">good</span>())&#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;open&quot;</span> &lt;&lt; filename &lt;&lt; <span class="string">&quot;failed.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; _dict.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            ofs &lt;&lt; _dict[i]._word &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; _dict[i]._frequeny &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ofs.<span class="built_in">close</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">dealWord</span><span class="params">(<span class="type">const</span> string&amp; word)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 这个函数很粗暴地丢弃了跟着标点的单词</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">size_t</span> idx = <span class="number">0</span>; idx != word.<span class="built_in">size</span>(); idx++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">isalpha</span>(word[idx])) <span class="keyword">return</span> <span class="built_in">string</span>(); <span class="comment">//空string</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> word;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> string&amp; word)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(word == <span class="built_in">string</span>()) <span class="keyword">return</span>; <span class="comment">//空string则返回</span></span><br><span class="line"></span><br><span class="line">        <span class="type">size_t</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; idx != _dict.<span class="built_in">size</span>(); idx++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(word == _dict[idx]._word)&#123;</span><br><span class="line">                ++_dict[idx]._frequeny;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(idx == _dict.<span class="built_in">size</span>())&#123;</span><br><span class="line">            _dict.<span class="built_in">push_back</span>(<span class="built_in">Record</span>(word, <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;Record&gt; _dict;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="function">Dictionary <span class="title">mydic</span><span class="params">(<span class="number">3789</span>)</span></span>;</span><br><span class="line">    mydic.<span class="built_in">read</span>(<span class="string">&quot;hamlet.txt&quot;</span>);</span><br><span class="line">    mydic.<span class="built_in">store</span>(<span class="string">&quot;mydicoutput.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装-log4cpp"><a href="#封装-log4cpp" class="headerlink" title="封装 log4cpp"></a>封装 log4cpp</h3><p>用单例模式封装 log4cpp，使其更易于使用。</p><p><code>myLogger.h</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _MYLOGGER_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _MYLOGGER_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Category.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> log4cpp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mylogger</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Mylogger* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destory</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">warn</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">debug</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">info</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Mylogger</span>();</span><br><span class="line">    ~<span class="built_in">Mylogger</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="type">static</span> Mylogger* _pInstance;</span><br><span class="line">    Category&amp; _mycat;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> prefix(msg) (string(__FILE__) + <span class="string">&quot;:&quot;</span>  \</span></span><br><span class="line"><span class="meta">               + string(__FUNCTION__) + <span class="string">&quot;:&quot;</span>  \</span></span><br><span class="line"><span class="meta">               + std::to_string(__LINE__) + <span class="string">&quot;:&quot;</span>  \</span></span><br><span class="line"><span class="meta">               + string(msg)).c_str()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> logWarn(msg) Mylogger::getInstance()-&gt;warn(prefix(msg));</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> logError(msg) Mylogger::getInstance()-&gt;<span class="keyword">error</span>(prefix(msg));</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> logInfo(msg) Mylogger::getInstance()-&gt;info(prefix(msg));</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> logDebug(msg) Mylogger::getInstance()-&gt;debug(prefix(msg));</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>myLogger.cc</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myLogger.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/PatternLayout.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/OstreamAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/FileAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Priority.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line">Mylogger* Mylogger::_pInstance = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Mylogger* <span class="title">Mylogger::getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_pInstance  == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        _pInstance = <span class="keyword">new</span> <span class="built_in">Mylogger</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _pInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_pInstance)&#123;</span><br><span class="line">        <span class="keyword">delete</span> _pInstance;</span><br><span class="line">        _pInstance = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::warn</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>&#123;</span><br><span class="line">    _mycat.<span class="built_in">warn</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::error</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>&#123;</span><br><span class="line">    _mycat.<span class="built_in">error</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::debug</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>&#123;</span><br><span class="line">    _mycat.<span class="built_in">debug</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::info</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>&#123;</span><br><span class="line">    _mycat.<span class="built_in">info</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mylogger::<span class="built_in">Mylogger</span>()</span><br><span class="line">:_mycat(Category::<span class="built_in">getRoot</span>().<span class="built_in">getInstance</span>(<span class="string">&quot;mycat&quot;</span>))&#123; <span class="comment">//mycat 是个名字</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Mylogger&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 日志的格式</span></span><br><span class="line">    PatternLayout* ppl1 = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">    ppl1-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d %c [%p] %m%n&quot;</span>);</span><br><span class="line">    PatternLayout* ppl2 = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">    ppl2-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d %c [%p] %m%n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的目的地</span></span><br><span class="line">    OstreamAppender* poa = <span class="keyword">new</span> <span class="built_in">OstreamAppender</span>(<span class="string">&quot;OSA&quot;</span>, &amp;cout);</span><br><span class="line">    poa-&gt;<span class="built_in">setLayout</span>(ppl1);</span><br><span class="line">    FileAppender* pfa = <span class="keyword">new</span> <span class="built_in">FileAppender</span>(<span class="string">&quot;FA&quot;</span>, <span class="string">&quot;zy.txt&quot;</span>);</span><br><span class="line">    pfa-&gt;<span class="built_in">setLayout</span>(ppl2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志的过滤器</span></span><br><span class="line">    _mycat.<span class="built_in">setPriority</span>(Priority::DEBUG);</span><br><span class="line">    _mycat.<span class="built_in">addAppender</span>(poa);</span><br><span class="line">    _mycat.<span class="built_in">addAppender</span>(pfa);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mylogger::~<span class="built_in">Mylogger</span>()&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;~Mylogger()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Category::<span class="built_in">shutdown</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>testlogger.cc</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myLogger.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// Mylogger::getInstance()-&gt;warn(prefix(&quot;warning msg&quot;));</span></span><br><span class="line">    <span class="built_in">logWarn</span>(<span class="string">&quot;warning msg&quot;</span>);</span><br><span class="line">    <span class="built_in">logError</span>(<span class="string">&quot;error msg&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p><img src="https://bu.dusays.com/2024/02/18/65d1feb76d055.png" alt="62-7.png"></p><p>规则：</p><ul><li>重载运算符的操作对象必须至少有一个是自定义类型或枚举类型</li><li>优先级和结合性不变</li><li>操作数不能有默认参数</li><li>重载逻辑运算符<code>&amp;&amp;</code>、<code>||</code>后，不再具有短路求值特性</li><li>不能臆造并不存在的运算符<code>@</code>、<code>$</code>等</li></ul><h3 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h3><p>以普通函数的形式进行重载：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> dreal = <span class="number">0</span>, <span class="type">double</span> dimag = <span class="number">0</span>)</span><br><span class="line">    :_dreal(dreal), _dimag(dimag)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex(double = 0, double = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; _dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; _dimag &lt;&lt; <span class="string">&quot;i&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getReal</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _dreal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getImag</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _dimag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Complex</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _dreal;</span><br><span class="line">    <span class="type">double</span> _dimag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; lhs, <span class="type">const</span> Complex&amp; rhs)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Complex operator + (const Complex&amp;, const Complex&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Complex</span>(lhs.<span class="built_in">getReal</span>() + rhs.<span class="built_in">getReal</span>(),</span><br><span class="line">                   lhs.<span class="built_in">getImag</span>() + rhs.<span class="built_in">getImag</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 = &quot;</span>;</span><br><span class="line">    c1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    <span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c2 = &quot;</span>;</span><br><span class="line">    c2.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    Complex c3 = c1 + c2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = &quot;</span>;</span><br><span class="line">    c3.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c1 = 1 + 2i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c2 = 3 + 4i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Complex operator + (const Complex&amp;, const Complex&amp;)</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c3 = 4 + 6i</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>以成员函数的形式进行重载：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> dreal = <span class="number">0</span>, <span class="type">double</span> dimag = <span class="number">0</span>)</span><br><span class="line">    :_dreal(dreal), _dimag(dimag)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex(double = 0, double = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; _dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; _dimag &lt;&lt; <span class="string">&quot;i&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; rhs)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex operatro + (const Complex&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(_dreal + rhs._dreal, _dimag + rhs._dimag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Complex</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _dreal;</span><br><span class="line">    <span class="type">double</span> _dimag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 = &quot;</span>;</span><br><span class="line">    c1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    <span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c2 = &quot;</span>;</span><br><span class="line">    c2.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    Complex c3 = c1 + c2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = &quot;</span>;</span><br><span class="line">    c3.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c1 = 1 + 2i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c2 = 3 + 4i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Complex operatro + (const Complex&amp;)</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c3 = 4 + 6i</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>以友元函数的形式进行重载：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="keyword">friend</span> Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; lhs, <span class="type">const</span> Complex&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> dreal = <span class="number">0</span>, <span class="type">double</span> dimag = <span class="number">0</span>)</span><br><span class="line">    :_dreal(dreal), _dimag(dimag)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex(double = 0, double = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; _dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; _dimag &lt;&lt; <span class="string">&quot;i&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Complex</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _dreal;</span><br><span class="line">    <span class="type">double</span> _dimag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; lhs, <span class="type">const</span> Complex&amp; rhs)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;friend Complex operator + (const Complex&amp;, const Complex&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Complex</span>(lhs._dreal + rhs._dreal,</span><br><span class="line">                   lhs._dimag + rhs._dimag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 = &quot;</span>;</span><br><span class="line">    c1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    <span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c2 = &quot;</span>;</span><br><span class="line">    c2.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    Complex c3 = c1 + c2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = &quot;</span>;</span><br><span class="line">    c3.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c1 = 1 + 2i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c2 = 3 + 4i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">friend Complex operator + (const Complex&amp;, const Complex&amp;)</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c3 = 4 + 6i</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h3><p>复合赋值运算符，推荐以成员函数进行重载：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="keyword">friend</span> Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; lhs, <span class="type">const</span> Complex&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> dreal = <span class="number">0</span>, <span class="type">double</span> dimag = <span class="number">0</span>)</span><br><span class="line">    :_dreal(dreal), _dimag(dimag)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex(double = 0, double = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex&amp; <span class="keyword">operator</span> += (<span class="type">const</span> Complex&amp; rhs)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex&amp; operator +=(const Complex&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        _dreal += rhs._dreal;</span><br><span class="line">        _dimag += rhs._dimag;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; _dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; _dimag &lt;&lt; <span class="string">&quot;i&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Complex</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _dreal;</span><br><span class="line">    <span class="type">double</span> _dimag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; lhs, <span class="type">const</span> Complex&amp; rhs)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;friend Complex operator + (const Complex&amp;, const Complex&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Complex</span>(lhs._dreal + rhs._dreal,</span><br><span class="line">                   lhs._dimag + rhs._dimag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 = &quot;</span>;</span><br><span class="line">    c1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    <span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c2 = &quot;</span>;</span><br><span class="line">    c2.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    Complex c3 = c1 + c2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = &quot;</span>;</span><br><span class="line">    c3.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    c3 += c1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = &quot;</span>;</span><br><span class="line">    c3.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c1 = 1 + 2i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c2 = 3 + 4i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">friend Complex operator + (const Complex&amp;, const Complex&amp;)</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c3 = 4 + 6i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Complex&amp; operator +=(const Complex&amp;)</span></span><br><span class="line"><span class="comment">c3 = 5 + 8i</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h3><p>前置和后置<code>++</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="keyword">friend</span> Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; lhs, <span class="type">const</span> Complex&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> dreal = <span class="number">0</span>, <span class="type">double</span> dimag = <span class="number">0</span>)</span><br><span class="line">    :_dreal(dreal), _dimag(dimag)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex(double = 0, double = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex&amp; <span class="keyword">operator</span> += (<span class="type">const</span> Complex&amp; rhs)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex&amp; operator +=(const Complex&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        _dreal += rhs._dreal;</span><br><span class="line">        _dimag += rhs._dimag;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex&amp; <span class="keyword">operator</span> ++ ()&#123; <span class="comment">// 前置 ++</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex&amp; operator ++()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        ++_dreal;</span><br><span class="line">        ++_dimag;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span> ++ (<span class="type">int</span>)&#123; <span class="comment">// 这里的 int 是标志位，用于区分</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex operator ++ (int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="function">Complex <span class="title">tmp</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        _dreal++;</span><br><span class="line">        _dimag++;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; _dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; _dimag &lt;&lt; <span class="string">&quot;i&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Complex</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _dreal;</span><br><span class="line">    <span class="type">double</span> _dimag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; lhs, <span class="type">const</span> Complex&amp; rhs)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;friend Complex operator + (const Complex&amp;, const Complex&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Complex</span>(lhs._dreal + rhs._dreal,</span><br><span class="line">                   lhs._dimag + rhs._dimag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 = &quot;</span>;</span><br><span class="line">    c1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    <span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c2 = &quot;</span>;</span><br><span class="line">    c2.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    Complex c3 = c1 + c2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = &quot;</span>;</span><br><span class="line">    c3.<span class="built_in">print</span>(); <span class="comment">// 4+6i</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;(++c3) = &quot;</span>;</span><br><span class="line">    (++c3).<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = &quot;</span>;</span><br><span class="line">    c3.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;(c3++) = &quot;</span>;</span><br><span class="line">    (c3++).<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = &quot;</span>;</span><br><span class="line">    c3.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">c1 = 1 + 2i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c2 = 3 + 4i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">friend Complex operator + (const Complex&amp;, const Complex&amp;)</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c3 = 4 + 6i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(++c3) = Complex&amp; operator ++()</span></span><br><span class="line"><span class="comment">5 + 7i</span></span><br><span class="line"><span class="comment">c3 = 5 + 7i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(c3++) = Complex operator ++ (int)</span></span><br><span class="line"><span class="comment">5 + 7i</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">c3 = 6 + 8i</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>前置<code>++</code>返回的是对象的引用，是左值，可以取地址；后置<code>++</code>返回的是局部对象，是右值，不能取地址。</p><p>前置<code>++</code>的效率比后置<code>++</code>高。</p><h3 id="输出流运算符"><a href="#输出流运算符" class="headerlink" title="输出流运算符"></a>输出流运算符</h3><p>对于重载输出流运算符而言，不能写成成员函数的形式，因为不能改变操作数的顺序。推荐使用友元：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Complex&amp; rhs);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> dreal = <span class="number">0</span>, <span class="type">double</span> dimag = <span class="number">0</span>)</span><br><span class="line">    :_dreal(dreal), _dimag(dimag)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex(double = 0, double = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Complex</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _dreal;</span><br><span class="line">    <span class="type">double</span> _dimag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Complex&amp; rhs)&#123;</span><br><span class="line">    os &lt;&lt; rhs._dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; rhs._dimag &lt;&lt; <span class="string">&quot;i&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 = &quot;</span> &lt;&lt; c1 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c1 = 1 + 2i</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>关于下面这句：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;c1 = &quot;</span> &lt;&lt; c1 &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>也可以写为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">operator</span>&lt;&lt;(<span class="keyword">operator</span>&lt;&lt;(cout, <span class="string">&quot;c1 = &quot;</span>), c1).<span class="keyword">operator</span>&lt;&lt;(endl);</span><br></pre></td></tr></table></figure><h3 id="输入流运算符"><a href="#输入流运算符" class="headerlink" title="输入流运算符"></a>输入流运算符</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Complex&amp; rhs);</span><br><span class="line">    <span class="keyword">friend</span> std::istream&amp; <span class="keyword">operator</span> &gt;&gt; (std::istream&amp; is, Complex&amp; rhs);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> dreal = <span class="number">0</span>, <span class="type">double</span> dimag = <span class="number">0</span>)</span><br><span class="line">    :_dreal(dreal), _dimag(dimag)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex(double = 0, double = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Complex</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _dreal;</span><br><span class="line">    <span class="type">double</span> _dimag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readDouble</span><span class="params">(std::istream&amp; is, <span class="type">double</span>&amp; rhs)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(is &gt;&gt; rhs, !is.<span class="built_in">eof</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(is.<span class="built_in">bad</span>())&#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;istream is bad.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(is.<span class="built_in">fail</span>())&#123;</span><br><span class="line">            is.<span class="built_in">clear</span>();</span><br><span class="line">            is.<span class="built_in">ignore</span>(std::numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;please input a double-type number : &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Complex&amp; rhs)&#123;</span><br><span class="line">    os &lt;&lt; rhs._dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; rhs._dimag &lt;&lt; <span class="string">&quot;i&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::istream&amp; <span class="keyword">operator</span> &gt;&gt; (std::istream&amp; is, Complex&amp; rhs)&#123;</span><br><span class="line">    <span class="comment">// is &gt;&gt; rhs._dreal &gt;&gt; rhs._dimag;</span></span><br><span class="line">    <span class="built_in">readDouble</span>(is, rhs._dreal);</span><br><span class="line">    <span class="built_in">readDouble</span>(is, rhs._dimag);</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 = &quot;</span> &lt;&lt; c1 &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Complex c2;</span><br><span class="line">    cin &gt;&gt; c2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c2 = &quot;</span> &lt;&lt; c2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">c1 = 1 + 2i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">asdf</span></span><br><span class="line"><span class="comment">please input a double-type number : 12</span></span><br><span class="line"><span class="comment">kl</span></span><br><span class="line"><span class="comment">please input a double-type number : 24</span></span><br><span class="line"><span class="comment">c2 = 12 + 24i</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="函数调用运算符（小括号）"><a href="#函数调用运算符（小括号）" class="headerlink" title="函数调用运算符（小括号）"></a>函数调用运算符（小括号）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FuncObj</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;int operator () (int, int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;int operator () (int, int, int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> x * y * z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FuncObj fo;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">3</span>, b = <span class="number">4</span>, c = <span class="number">5</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;fo(a, b) = &quot;</span> &lt;&lt; <span class="built_in">fo</span>(a, b) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;fo(a, b, c) = &quot;</span> &lt;&lt; <span class="built_in">fo</span>(a, b, c) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">fo(a, b) = int operator () (int, int)</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">fo(a, b, c) = int operator () (int, int, int)</span></span><br><span class="line"><span class="comment">60</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>fo(a, b)</code>等价于：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fo.<span class="built_in">operator</span>()(a,b)</span><br></pre></td></tr></table></figure><p>类似地，<code>fo(a, b, c)</code>等价于：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fo.<span class="built_in">operator</span>()(a, b, c)</span><br></pre></td></tr></table></figure><p>重载了函数调用运算符的类创建的对象，称为函数对象。</p><h3 id="下标访问运算符（中括号）"><a href="#下标访问运算符（中括号）" class="headerlink" title="下标访问运算符（中括号）"></a>下标访问运算符（中括号）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">charArray</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">charArray</span>(<span class="type">size_t</span> sz = <span class="number">10</span>) </span><br><span class="line">    :_size(sz),_data(<span class="keyword">new</span> <span class="type">char</span>[sz]())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;charArray(size_t = 10)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>&amp; <span class="keyword">operator</span> [] (<span class="type">size_t</span> idx)&#123;</span><br><span class="line">        <span class="keyword">if</span>(idx &lt; _size)&#123;</span><br><span class="line">            <span class="keyword">return</span> _data[idx];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">static</span> <span class="type">char</span> charNull = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> charNull;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">charArray</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~charArray()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_data)&#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _data;</span><br><span class="line">            _data = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">size_t</span> _size;</span><br><span class="line">    <span class="type">char</span>* _data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">    <span class="function">charArray <span class="title">ca</span><span class="params">(strlen(pstr) + <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; ca.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        ca[i] = pstr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; ca.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        cout &lt;&lt; ca[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">charArray(size_t = 10)</span></span><br><span class="line"><span class="comment">h e l l o w o r l d  </span></span><br><span class="line"><span class="comment">~charArray()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="成员访问运算符"><a href="#成员访问运算符" class="headerlink" title="成员访问运算符"></a>成员访问运算符</h3><p>成员访问运算符包括：<code>-&gt;</code>、<code>*</code>。</p><p><code>-&gt;</code>只能以成员函数的形式重载，其返回值必须是一个指针或是重载了<code>-&gt;</code>的对象。</p><p>来看<code>-&gt;</code>的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Data</span>(<span class="type">int</span> data = <span class="number">0</span>):_data(data) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Data(int = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_data</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Data</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Data()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">secondLayyer</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">secondLayyer</span>(Data* pdata):_pdata(pdata) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;secondLayyer(Data*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">secondLayyer</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~secondLayyer()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pdata)&#123;</span><br><span class="line">            <span class="keyword">delete</span> _pdata;</span><br><span class="line">            _pdata = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Data* <span class="keyword">operator</span> -&gt; () &#123;</span><br><span class="line">        <span class="keyword">return</span> _pdata;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Data* _pdata;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">thirdLayyer</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">thirdLayyer</span>(secondLayyer* ps1):_ps1(ps1) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;thirdLayyer(secondLayyer*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    secondLayyer&amp; <span class="keyword">operator</span> -&gt; () &#123;</span><br><span class="line">        <span class="keyword">return</span> *_ps1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">thirdLayyer</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~thirdLayyer()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_ps1)&#123;</span><br><span class="line">            <span class="keyword">delete</span> _ps1;</span><br><span class="line">            _ps1 = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    secondLayyer* _ps1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">secondLayyer <span class="title">sl</span><span class="params">(<span class="keyword">new</span> Data(<span class="number">10</span>))</span></span>; <span class="comment">// 栈对象</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sl-&gt;get_data() = &quot;</span> &lt;&lt; sl-&gt;<span class="built_in">get_data</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 勤劳的编译器使我们可以在上面的写法中省略一个箭头</span></span><br><span class="line">    <span class="comment">// 等价的写法： </span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1-&gt;get_data() = &quot;</span> &lt;&lt; sl.<span class="keyword">operator</span>-&gt;()-&gt;<span class="built_in">get_data</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Data(int = 0)</span></span><br><span class="line"><span class="comment">secondLayyer(Data*)</span></span><br><span class="line"><span class="comment">sl-&gt;get_data() = 10</span></span><br><span class="line"><span class="comment">s1-&gt;get_data() = 10</span></span><br><span class="line"><span class="comment">~secondLayyer()</span></span><br><span class="line"><span class="comment">~Data()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>更进一步的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Data</span>(<span class="type">int</span> data = <span class="number">0</span>):_data(data) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Data(int = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_data</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Data</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Data()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">secondLayyer</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">secondLayyer</span>(Data* pdata):_pdata(pdata) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;secondLayyer(Data*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">secondLayyer</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~secondLayyer()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pdata)&#123;</span><br><span class="line">            <span class="keyword">delete</span> _pdata;</span><br><span class="line">            _pdata = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Data* <span class="keyword">operator</span> -&gt; () &#123;</span><br><span class="line">        <span class="keyword">return</span> _pdata; <span class="comment">// 返回的是指针</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Data* _pdata;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">thirdLayyer</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">thirdLayyer</span>(secondLayyer* ps1):_ps1(ps1) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;thirdLayyer(secondLayyer*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    secondLayyer&amp; <span class="keyword">operator</span> -&gt; () &#123;</span><br><span class="line">        <span class="keyword">return</span> *_ps1; <span class="comment">// 这里的 * 是解引用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">thirdLayyer</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~thirdLayyer()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_ps1)&#123;</span><br><span class="line">            <span class="keyword">delete</span> _ps1;</span><br><span class="line">            _ps1 = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    secondLayyer* _ps1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">thirdLayyer <span class="title">tl</span><span class="params">(<span class="keyword">new</span> secondLayyer(<span class="keyword">new</span> Data(<span class="number">30</span>)))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;tl-&gt;get_data() = &quot;</span> &lt;&lt; tl-&gt;<span class="built_in">get_data</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;tl-&gt;get_data() = &quot;</span> &lt;&lt; tl.<span class="keyword">operator</span>-&gt;().<span class="keyword">operator</span>-&gt;()-&gt;<span class="built_in">get_data</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Data(int = 0)</span></span><br><span class="line"><span class="comment">secondLayyer(Data*)</span></span><br><span class="line"><span class="comment">thirdLayyer(secondLayyer*)</span></span><br><span class="line"><span class="comment">tl-&gt;get_data() = 30</span></span><br><span class="line"><span class="comment">tl-&gt;get_data() = 30</span></span><br><span class="line"><span class="comment">~thirdLayyer()</span></span><br><span class="line"><span class="comment">~secondLayyer()</span></span><br><span class="line"><span class="comment">~Data()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>来看<code>*</code>的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Data</span>(<span class="type">int</span> data = <span class="number">0</span>):_data(data) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Data(int = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_data</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Data</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Data()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">secondLayyer</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">secondLayyer</span>(Data* pdata):_pdata(pdata) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;secondLayyer(Data*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">secondLayyer</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~secondLayyer()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pdata)&#123;</span><br><span class="line">            <span class="keyword">delete</span> _pdata;</span><br><span class="line">            _pdata = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Data&amp; <span class="keyword">operator</span> * () &#123;</span><br><span class="line">        <span class="keyword">return</span> *_pdata;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Data* _pdata;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">secondLayyer <span class="title">sl</span><span class="params">(<span class="keyword">new</span> Data(<span class="number">10</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;(*sl).get_data() = &quot;</span> &lt;&lt; (*sl).<span class="built_in">get_data</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;(*sl).get_data() = &quot;</span> &lt;&lt; sl.<span class="keyword">operator</span>*().<span class="built_in">get_data</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Data(int = 0)</span></span><br><span class="line"><span class="comment">secondLayyer(Data*)</span></span><br><span class="line"><span class="comment">(*sl).get_data() = 10</span></span><br><span class="line"><span class="comment">(*sl).get_data() = 10</span></span><br><span class="line"><span class="comment">~secondLayyer()</span></span><br><span class="line"><span class="comment">~Data()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>后续内容见 CppNote3 .</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前情提要： &lt;a href=&quot;https://loveofpeach.github.io/posts/54b4d7a2.html&quot;&gt;CppNote&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;在代码之前&quot;&gt;&lt;a href=&quot;#在代码之前&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="编程" scheme="https://loveofpeach.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://loveofpeach.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 笔记</title>
    <link href="https://loveofpeach.github.io/posts/aaba1da3.html"/>
    <id>https://loveofpeach.github.io/posts/aaba1da3.html</id>
    <published>2024-01-01T12:00:26.000Z</published>
    <updated>2024-01-31T14:55:15.202Z</updated>
    
    <content type="html"><![CDATA[<p>数据库学习笔记。</p><h2 id="数据库的概念、分类"><a href="#数据库的概念、分类" class="headerlink" title="数据库的概念、分类"></a>数据库的概念、分类</h2><p>数据库的引入：<br>存储数据的结构或方式</p><ul><li>数组、链表：基于内存，短暂存储</li><li>文件：永久性存储，但是不利于查找</li><li>数据库：可以永久存储，并且可以更好的查找</li></ul><p>数据库的定义：存储结构化数据的仓库。<br>结构化数据一般指存储在数据库中，具有一定逻辑结构和物理结构的数据。</p><p>数据库的分类：</p><ul><li>关系型数据库<ul><li>通过外键关联来建立表与表之间的关系</li><li>例如：Oracle、MySQL、DB2、Informix、SQL Server、SQLite</li><li>关系型数据库把复杂的数据结构归结为简单的二元关系，在存储数据时实际就是采用的一张二维表（和Word和excell里表格几乎一样）</li><li>市场占有量较大的是MySQL和oracle数据库，而互联网场景最常用的是MySQL数据库</li><li>它通过SQL结构化查询语言来存取、管理关系型数据库的数据</li></ul></li><li>非关系型数据库<ul><li>数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定</li><li>不是对关系型数据库的否定，而是补充，主要针对大数据</li><li>种类<ul><li>键值对（key-value）：Redis、Memcached</li><li>按列存储：Hbase、Scylla、Cassandra</li><li>面向文档：MongoDB、CouchDB</li><li>图形存储：Neo4J</li></ul></li></ul></li></ul><p>数据库管理软件（DBMS）<br>数据库管理员（DBA）</p><p>数据库服务器、数据库和表的关系：</p><p><img src="https://bu.dusays.com/2024/01/01/6592be1d25bd0.png" alt="61-1.png"></p><p>数据在数据库中的存储方式：</p><p><img src="https://bu.dusays.com/2024/01/01/6592bfa307acc.png" alt="61-2.png"></p><p>SQL（Structured Query Language）：结构化查询语言</p><ul><li>是一种定义、操作、管理关系型数据库的句法。大多数关系型数据库都支持</li><li>结构化查询语言的工业标准由ANSI（美国国家标准学会，ISO的成员之一）维护</li><li>组成：<ul><li>DQL：数据查询语言</li><li>DML（Data Manipulation Language）：数据操作语言</li><li>DDL：数据定义语言</li><li>DCL：数据控制语言</li><li>TPL：事务处理语言</li><li>CCL：指针控制语言</li></ul></li></ul><p>mysql 的安装： <a href="https://www.bilibili.com/video/BV12q4y1U7sZ">https://www.bilibili.com/video/BV12q4y1U7sZ</a></p><p>数据库大小写不敏感。</p><h2 id="创建、显示、删除"><a href="#创建、显示、删除" class="headerlink" title="创建、显示、删除"></a>创建、显示、删除</h2><p>DDL（Data Definition Language）数据定义语言</p><ul><li>作用：用于描述数据库中要存储的现实世界实体的语言。即<strong>创建数据库和表的结构</strong>。</li><li>常用关键字：<ul><li><code>CREATE</code>：创建</li><li><code>ALTER</code>：修改</li><li><code>DROP</code>：删除</li><li><code>TRUNCATE</code>：截断</li></ul></li></ul><p>进入 sql ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><p>看到 mysql 的提示符，说明连接成功。</p><p>输入 <code>show schemas;</code> 查询自带的数据库。</p><p><img src="https://bu.dusays.com/2024/01/02/659423c467080.png" alt="61-3.png"></p><p>或者 <code>show databases;</code> ：</p><p><img src="https://bu.dusays.com/2024/01/02/6594256b6299b.png" alt="61-4.png"></p><p>information_schema（元数据）<br>mysql（核心库）<br>performance_schema（性能相关）<br>sys（对DBA有好处）</p><p>注释记号：<code>#</code>、<code>--</code>、<code>/**/</code></p><p>创建数据库 <code>create database akashi;</code> ：</p><p><img src="https://bu.dusays.com/2024/01/02/659429989faba.png" alt="61-5.png"></p><p>使用数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use akashi;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure><p>显示表格（目前为空）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个另外的例子：</p><p><img src="https://bu.dusays.com/2024/01/02/65942b5cb0f1b.png" alt="61-6.png" title="下略"></p><p>删除一个库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> database akashi;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/02/65942c4a092d2.png" alt="61-7.png" title="后来又建回来了QAQ"></p><p>创建表：</p><p><img src="https://bu.dusays.com/2024/01/02/6594301c6db3c.png" alt="61-8.png"></p><p>MySQL 常用数据类型：</p><p><img src="https://bu.dusays.com/2024/01/02/659431ad47258.png" alt="61-9.png"></p><p>创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">member</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> (id <span class="type">int</span>, name <span class="type">char</span>(<span class="number">20</span>), age <span class="type">int</span>, math <span class="type">float</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/659435af32350.png" alt="61-10.png"></p><p>显示表的结构 <code>show create table member;</code> ：</p><p><img src="https://bu.dusays.com/2024/01/03/659436dd80bfb.png" alt="61-11.png"></p><p>显示表的结构（第二种方法）<code>desc member;</code> ：</p><p><img src="https://bu.dusays.com/2024/01/03/659437a381f8c.png" alt="61-12.png"></p><p>查看当前所属数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> database();</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> database() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> akashi     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>参看数据库版本：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> version();</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> version()               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">8.0</span><span class="number">.35</span><span class="number">-0</span>ubuntu0<span class="number">.22</span><span class="number">.04</span><span class="number">.1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>修改表，增加字段，add：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在 <span class="keyword">member</span> 表中增加一个英语成绩，类型为 <span class="type">float</span> ，默认值为 <span class="number">60</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">member</span> <span class="keyword">add</span> english <span class="type">float</span> <span class="keyword">default</span> <span class="number">60</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/659439c8c34d4.png" alt="61-13.png"></p><p>修改表，修改字段类型：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">member</span> modify name <span class="type">varchar</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65943b81a382f.png" alt="61-14.png"></p><p>改字段名字：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">member</span> change name mname <span class="type">varchar</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65943c96b4403.png" alt="61-15.png" title="然后又改回去了，不提"></p><p>删除字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">member</span> <span class="keyword">drop</span> english;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65943e41955c5.png" alt="61-16.png"></p><p>删除表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> test1;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65943fbb7bac4.png" alt="61-17.png"></p><p>指定位置添加：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">member</span> <span class="keyword">add</span> english <span class="type">float</span> <span class="keyword">first</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/659440d9bab43.png" alt="61-18.png"></p><p>指定相对位置添加：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">member</span> <span class="keyword">add</span> xxx <span class="type">float</span> after id;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65944279d82ee.png" alt="61-19.png"></p><p>修改表结构：</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/R-nPuXn6q3jDcq" alt="61-20"></p><h2 id="INSERT、UPDATE、DELETE"><a href="#INSERT、UPDATE、DELETE" class="headerlink" title="INSERT、UPDATE、DELETE"></a>INSERT、UPDATE、DELETE</h2><p>DML（Data Manipulation Language）数据操纵语言</p><ul><li>作用：用于向数据库表中插入、删除、修改数据</li><li>常用关键字：<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code></li></ul><p>字符串使用单引号。</p><p>插入一条记录并查看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> (id,name,age,math) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;xiaoshuai&#x27;</span>,<span class="number">30</span>,<span class="number">59</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65951dd78c979.png" alt="61-21.png"></p><p>插入一条记录，部分为默认值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> (id,name) <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">&#x27;xiaoai&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65951f43b2a1c.png" alt="61-22.png"></p><p>插入多条记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> <span class="keyword">values</span> (<span class="number">3</span>,<span class="string">&#x27;xiaomei&#x27;</span>,<span class="number">20</span>,<span class="number">100</span>),(<span class="number">4</span>,<span class="string">&#x27;lumine&#x27;</span>,<span class="number">17</span>,<span class="number">61</span>),(<span class="number">8</span>,<span class="string">&#x27;xiao&#x27;</span>,<span class="number">18</span>,<span class="number">85</span>);</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/YoQQDvFN2g3adR" alt="61-23"></p><p>修改一条记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> age<span class="operator">=</span><span class="number">24</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/6595247bbaadb.png" alt="61-24.png"></p><p>修改一张表的全部记录（修改值相同）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> e_date<span class="operator">=</span><span class="string">&#x27;1999-10-10 10:10:10&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/fiG2taOrig2lIL" alt="61-25"></p><p>删除记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>插入空值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span>(name) <span class="keyword">values</span>(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/659528bd889dc.png" alt="61-26.png"></p><p><strong>同<code>insert</code>和<code>update</code>一样，从一个表中删除记录将引起其它表的参照完整性问题，在修改数据库数据时，头脑中应该始终不要忘记这个潜在的问题。</strong></p><p>Tip: mysql中文乱码</p><ul><li>mysql有六处使用了字符集，分别为：client 、connection、database、results、server 、system</li><li>client是客户端使用的字符集</li><li>connection是连接数据库的字符集设置类型，如果程序没有指明连接数据库使用的字符集类型就按照服务器端默认的字符集设置</li><li>database是数据库服务器中某个库使用的字符集设定，如果建库时没有指明，将使用服务器安装时指定的字符集设置</li><li>results是数据库给客户端返回时使用的字符集设定，如果没有指明，使用服务器默认的字符集</li><li>server是服务器安装时指定的默认字符集设定</li><li>system是数据库系统使用的字符集设定</li></ul><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>DQL（Data Query Language）数据查询语言</p><ul><li>作用：查询数据</li><li>常用关键字：<code>SELECT</code></li></ul><p>查看 member 表中数据的条数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> <span class="keyword">member</span>;</span><br></pre></td></tr></table></figure><p>或者（效果一样）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> <span class="keyword">member</span>;</span><br></pre></td></tr></table></figure><p>基本select语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT [DISTINCT] [*] |&#123;column1, column2, column3..&#125; FROM table [where];</span><br></pre></td></tr></table></figure><p>基本select语句</p><ul><li><code>Select</code>指定查询哪些列的数据</li><li><code>column</code>指定列名</li><li><code>*</code>号代表查询所有列</li><li><code>From</code>指定查询哪张表</li><li><code>DISTINCT</code>可选，指显示结果时，是否剔除重复数据</li></ul><p>选择指定列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> <span class="keyword">member</span>;</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/7VHLGFI5Id0KgR" alt="61-27"></p><p>加入限制条件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 会同时过滤不满足条件的和 <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65953018d49f2.png" alt="61-28.png"></p><p>去重查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">distinct</span> e_date <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在select语句中可使用表达式对查询的列进行运算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT *|&#123;column1｜expression, column2｜expression，..&#125; FROM     table;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age,age<span class="operator">+</span><span class="number">10</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span> age<span class="operator">+</span><span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>     <span class="number">40</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span>     <span class="number">34</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>     <span class="number">27</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在select语句中可使用as语句<code>SELECT column as 别名 from 表名;</code> ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age,age<span class="operator">+</span><span class="number">10</span><span class="operator">*</span><span class="number">100</span><span class="operator">+</span>math<span class="operator">*</span><span class="number">1000</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span> age<span class="operator">+</span><span class="number">10</span><span class="operator">*</span><span class="number">100</span><span class="operator">+</span>math<span class="operator">*</span><span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------------------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>                <span class="number">60030</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span>                 <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>               <span class="number">101020</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>                <span class="number">62017</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>                 <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age,age<span class="operator">+</span><span class="number">10</span><span class="operator">*</span><span class="number">100</span><span class="operator">+</span>math<span class="operator">*</span><span class="number">1000</span> <span class="keyword">as</span> total <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span> total  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>  <span class="number">60030</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span> <span class="number">101020</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">62017</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在<code>where</code>子句中常用的运算符：</p><p><img src="https://bu.dusays.com/2024/01/03/6595421561e06.png" alt="61-29.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">25</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">17</span>,<span class="number">30</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">17</span>,<span class="number">60</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">17</span>,<span class="number">60</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>模糊查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%i&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%i__&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><code>is NULL</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id <span class="keyword">is</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+------+------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>错误用法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><code>order by</code>排序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>调整升降序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>使用<code>limit</code>限制显示行数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span> limit <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span> limit <span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><code>offset</code>选项，偏移量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span> limit <span class="number">3</span> <span class="keyword">offset</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai  <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+---------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h2><p>数据完整性是为了保证插入到数据库中的数据是正确的，它防止了用户可能的输入错误。</p><p>数据完整性主要分为以下三类：</p><ul><li>实体完整性：规定表的一行（即每一条记录）在表中是唯一的实体。实体完整性通过表的主键来实现。</li><li>域完整性：指数据库表的列（即字段）必须符合某种特定的数据类型或约束。比如NOT NULL。</li><li>参照完整性：<ul><li>保证一个表的外键和另一个表的主键对应。</li><li>参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li></ul></li></ul><p>定义表的约束</p><ul><li>定义主键约束<ul><li>primary key:不允许为空，不允许重复</li><li>可以区分两条记录的唯一性</li><li>删除主键：<code>alter table tablename drop primary key;</code> </li></ul></li><li>定义主键自动增长<ul><li>auto_increment</li></ul></li><li>定义唯一约束<ul><li>unique</li></ul></li><li>定义非空约束<ul><li>not null</li></ul></li><li>定义外键约束<ul><li>constraint ordersid_FK foreign key(ordersid) references orders(id)</li></ul></li></ul><h2 id="多表设计、查询进阶"><a href="#多表设计、查询进阶" class="headerlink" title="多表设计、查询进阶"></a>多表设计、查询进阶</h2><p>多表设计：一对多、多对多、一对一。（避免数据的冗余）</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/plm1uS5SjFJSNa" alt="61-30"></p><p><img src="https://bu.dusays.com/2024/01/06/65996c38becd4.png" alt="61-31.png"></p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/9hU_UtDsVsooy-" alt="61-32"></p><p>再设计一个表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> customer(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id <span class="type">int</span> auto_increment,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> age <span class="type">int</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">primary</span> key(id));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><p>过程略。结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span>    <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> customer <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `customer` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">6</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>再设计一个表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> order_table(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> order_id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> price <span class="type">float</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> user_id <span class="type">int</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">foreign</span> key(user_id) <span class="keyword">references</span> customer(id));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.04</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_akashi <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> customer         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">member</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> order_table;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field    <span class="operator">|</span> Type     <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> order_id <span class="operator">|</span> <span class="type">int</span>      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name     <span class="operator">|</span> <span class="type">char</span>(<span class="number">20</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> price    <span class="operator">|</span> <span class="type">float</span>    <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_id  <span class="operator">|</span> <span class="type">int</span>      <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>插入相关联的记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_table;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> order_table <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;shanzi&#x27;</span>,<span class="number">520</span>,<span class="number">3</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_table;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> order_id <span class="operator">|</span> name   <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------+-------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> order_table <span class="keyword">values</span>(<span class="number">12</span>,<span class="string">&#x27;Alcohol Pads&#x27;</span>,<span class="number">5</span>,<span class="number">4</span>);</span><br><span class="line">ERROR <span class="number">1452</span> (<span class="number">23000</span>): Cannot <span class="keyword">add</span> <span class="keyword">or</span> <span class="keyword">update</span> a child <span class="type">row</span>: a <span class="keyword">foreign</span> key <span class="keyword">constraint</span> fails (`akashi`.`order_table`, <span class="keyword">CONSTRAINT</span> `order_table_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`user_id`) <span class="keyword">REFERENCES</span> `customer` (`id`))</span><br></pre></td></tr></table></figure><p>此时，不能删除 ayaka ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> customer <span class="keyword">where</span> id<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">ERROR <span class="number">1451</span> (<span class="number">23000</span>): Cannot <span class="keyword">delete</span> <span class="keyword">or</span> <span class="keyword">update</span> a parent <span class="type">row</span>: a <span class="keyword">foreign</span> key <span class="keyword">constraint</span> fails (`akashi`.`order_table`, <span class="keyword">CONSTRAINT</span> `order_table_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`user_id`) <span class="keyword">REFERENCES</span> `customer` (`id`))</span><br></pre></td></tr></table></figure><p><strong>DQL数据查询语言</strong></p><ul><li>连接查询：交叉连接、内连接、外连接</li><li>联合查询</li><li>报表查询</li></ul><p>连接查询的 from 子句的连接语法格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Select *</span><br><span class="line">from TABLE1 join_type TABLE2  [on (join_condition)]</span><br><span class="line">                              [where (query_condition)]</span><br></pre></td></tr></table></figure><p>其中，TABLE1 和 TABLE2 表示参与连接操作的表，TABLE1 为左表，TABLE2 为右表。on 子句设定连接条件，where 子句设定查询条件，join_type 表示连接类型。</p><p>交叉连接（cross join），不带on子句，返回连接表中所有数据行的笛卡尔积：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_table;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer <span class="keyword">cross</span> <span class="keyword">join</span> order_table;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>内连接（inner join），返回连接表中符合连接条件及查询条件的数据行。</p><p>内连接查询：</p><ul><li>显式内连接：使用<code>inner join</code>关键字，在<code>on</code>子句中设定连接条件。</li><li>隐式内连接：不包含<code>inner join</code>关键字和<code>on</code>关键字，在<code>where</code>子句中设定连接条件。</li></ul><p>显式内连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer <span class="keyword">inner</span> <span class="keyword">join</span> order_table <span class="keyword">on</span> customer.id<span class="operator">=</span>order_table.user_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer <span class="keyword">as</span> c <span class="keyword">inner</span> <span class="keyword">join</span> order_table <span class="keyword">as</span> o <span class="keyword">on</span> c.id<span class="operator">=</span>o.user_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>隐式内连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer,order_table <span class="keyword">where</span> customer.id<span class="operator">=</span>order_table.user_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>复制一个 table（包含数据）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> customer_tmp <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer;</span><br><span class="line">Query OK, <span class="number">4</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line">Records: <span class="number">4</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> customer_tmp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0</span>       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer_tmp;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>复制一个 table（不包含数据）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> customer_tmp_like <span class="keyword">like</span> customer;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> customer_tmp_like;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer_tmp_like;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>为（已有的）customer_tmp 添加主键：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> customer_tmp modify id <span class="type">int</span> <span class="keyword">primary</span> key;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.07</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> customer_tmp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>现有表如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_akashi  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> customer          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp_like <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">member</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table_tmp   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> order_table_tmp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span>           <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                                                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> order_table_tmp <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `order_table_tmp` (</span><br><span class="line">  `order_id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `price` <span class="type">float</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `user_id` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`order_id`),</span><br><span class="line">  KEY `user_id` (`user_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> order_table_tmp;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field    <span class="operator">|</span> Type     <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> order_id <span class="operator">|</span> <span class="type">int</span>      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name     <span class="operator">|</span> <span class="type">char</span>(<span class="number">20</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> price    <span class="operator">|</span> <span class="type">float</span>    <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_id  <span class="operator">|</span> <span class="type">int</span>      <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>对 order_table_tmp 作外键约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> order_table_tmp <span class="keyword">add</span> <span class="keyword">foreign</span> key(user_id) <span class="keyword">references</span> customer_tmp(id);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.07</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> order_table_tmp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span>           <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                                                                                                                                                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> order_table_tmp <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `order_table_tmp` (</span><br><span class="line">  `order_id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `price` <span class="type">float</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `user_id` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`order_id`),</span><br><span class="line">  KEY `user_id` (`user_id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `order_table_tmp_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`user_id`) <span class="keyword">REFERENCES</span> `customer_tmp` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>（？）如果想修改外键名字，可以先删除外键约束，然后再新建。</p><p>外连接：分为左外连接（left outer join）、右外连接（right outer join）。与内连接不同的是，外连接不仅返回连接表中符合连接条件及查询条件的数据行，也返回左表（左外连接时）或右表（右外连接时）中仅符合查询条件但不符合连接条件的数据行。</p><p>左外连接（left outer join）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_table;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer <span class="keyword">as</span> c <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> order_table <span class="keyword">as</span> o <span class="keyword">on</span> c.id<span class="operator">=</span>o.user_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span>  <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span>  <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>外连接的时候，必须要加上连接条件 on .</p><p>追加限制：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer <span class="keyword">as</span> c <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> order_table <span class="keyword">as</span> o <span class="keyword">on</span> c.id<span class="operator">=</span>o.user_id <span class="keyword">where</span> o.order_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>右外连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer <span class="keyword">as</span> c <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> order_table <span class="keyword">as</span> o</span><br><span class="line"><span class="keyword">on</span> c.id<span class="operator">=</span>o.user_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>这种查询并不要求左表和右表有外键约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer <span class="keyword">as</span> c <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> <span class="keyword">member</span> <span class="keyword">as</span> m <span class="keyword">on</span> c.id<span class="operator">=</span>m.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field  <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> math   <span class="operator">|</span> <span class="type">float</span>       <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> e_date <span class="operator">|</span> datetime    <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p><strong>子查询</strong>：也叫“嵌套查询”，是指在where子句或from子句中又嵌入select查询语句（一般写在where子句）。</p><p>【练习】查询“郭靖”的所有订单信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> customer_id<span class="operator">=</span>(<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> customer <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%郭靖%&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>联合查询</strong>：合并两条查询语句的查询结果，去掉其中的重复数据行，然后返回没有重复数据行的查询结果。联合查询使用<code>union</code>关键字。例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> price<span class="operator">&gt;</span><span class="number">100</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> customer_id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span>(id,name,age,math) <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;huohuo&#x27;</span>,<span class="number">14</span>,<span class="number">71</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo    <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">19</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> math<span class="operator">&gt;</span><span class="number">60</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo  <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+---------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">19</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> math<span class="operator">&gt;</span><span class="number">60</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo    <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>其效果等价于：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">19</span> <span class="keyword">or</span> math<span class="operator">&gt;</span><span class="number">60</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo    <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>加<code>all</code>，不去重：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">19</span> <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> math<span class="operator">&gt;</span><span class="number">60</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo    <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>报表查询</strong>，对数据行进行分组统计，其语法格式为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>… <span class="keyword">from</span>… [<span class="keyword">where</span>…] [<span class="keyword">group</span> <span class="keyword">by</span>… [<span class="keyword">having</span>… ]] [<span class="keyword">order</span> <span class="keyword">by</span>… ] </span><br></pre></td></tr></table></figure><p>其中<code>group by</code>子句指定按照哪些字段分组，<code>having</code>子句设定分组查询条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo    <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai        <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi  <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi     <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">group</span> <span class="keyword">by</span> age;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在报表查询中可以使用SQL函数</p><ul><li><code>count()</code> 计数 </li><li><code>sum()</code> 求和  </li><li><code>avg()</code> 求平均值</li><li><code>max()</code> 最大值</li><li><code>min()</code> 最小值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(age),age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">group</span> <span class="keyword">by</span> age;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(age) <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">min</span>(math) <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">min</span>(math) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">59</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">sum</span>(age),<span class="built_in">min</span>(math) <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">sum</span>(age) <span class="operator">|</span> <span class="built_in">min</span>(math) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">320</span> <span class="operator">|</span>        <span class="number">59</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><code>having</code>用法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(age),age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">having</span> age<span class="operator">&lt;</span><span class="number">22</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(age) <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(age),age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">having</span> <span class="built_in">count</span>(age)<span class="operator">&gt;</span><span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(age) <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="数据的备份与恢复"><a href="#数据的备份与恢复" class="headerlink" title="数据的备份与恢复"></a>数据的备份与恢复</h2><p>在此之前： <a href="https://stackoverflow.com/questions/39281594/error-1698-28000-access-denied-for-user-rootlocalhost">https://stackoverflow.com/questions/39281594/error-1698-28000-access-denied-for-user-rootlocalhost</a></p><p><strong>备份</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p akashi&gt;akashi.sql</span><br></pre></td></tr></table></figure><p>备份得到的文件<code>akashi.sql</code>可以用vim打开查看。</p><p>目前为止的备份文件：<a href="https://drive.google.com/file/d/1oXosO_shXMNEs2S1Ey1fi8aQHkkWbgfh/view?usp=drive_link">Google Drive文件分享</a></p><p><strong>恢复</strong>：</p><p>在此之前，akashi 库已被删除：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> akashi             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> database akashi;</span><br><span class="line">Query OK, <span class="number">6</span> <span class="keyword">rows</span> affected (<span class="number">0.06</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>为了恢复 akashi 库，需要先进行如下准备：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database akashi;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> akashi             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> use akashi;</span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>然后在命令行中执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p akashi&lt;akashi.sql</span><br></pre></td></tr></table></figure><p>即可恢复 akashi 库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_akashi  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> customer          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp_like <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">member</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table_tmp   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>备份原理：insert</p><ul><li>通过协议连接到 MySQL数据库，将需要备份的数据查询出来并转换成对应的insert语句，当我们需要还原这些数据时，只要执行这些 insert 语句，即可将对应的数据还原</li></ul><h2 id="数据库编程"><a href="#数据库编程" class="headerlink" title="数据库编程"></a>数据库编程</h2><p>文档资料：</p><ul><li><a href="https://dev.mysql.com/doc/">https://dev.mysql.com/doc/</a></li><li><a href="https://downloads.mysql.com/docs/c-api-8.2-en.a4.pdf">https://downloads.mysql.com/docs/c-api-8.2-en.a4.pdf</a></li></ul><p>查看 port ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~$ cd /etc/mysql</span><br><span class="line">wanko@wanko:/etc/mysql$ ll</span><br><span class="line">total 40</span><br><span class="line">drwxr-xr-x   4 root root  4096  1月  1 22:05 ./</span><br><span class="line">drwxr-xr-x 129 root root 12288  1月  9 17:15 ../</span><br><span class="line">drwxr-xr-x   2 root root  4096  1月  1 22:05 conf.d/</span><br><span class="line">-rw-------   1 root root   317  1月  1 22:05 debian.cnf</span><br><span class="line">-rwxr-xr-x   1 root root   120 10月 26 01:34 debian-start*</span><br><span class="line">lrwxrwxrwx   1 root root    24  1月  1 22:05 my.cnf -&gt; /etc/alternatives/my.cnf</span><br><span class="line">-rw-r--r--   1 root root   839 10月 20  2020 my.cnf.fallback</span><br><span class="line">-rw-r--r--   1 root root   682  6月 15  2023 mysql.cnf</span><br><span class="line">drwxr-xr-x   2 root root  4096  1月  1 22:05 mysql.conf.d/</span><br><span class="line">wanko@wanko:/etc/mysql$ cd mysql.conf.d/</span><br><span class="line">wanko@wanko:/etc/mysql/mysql.conf.d$ ll</span><br><span class="line">total 16</span><br><span class="line">drwxr-xr-x 2 root root 4096  1月  1 22:05 ./</span><br><span class="line">drwxr-xr-x 4 root root 4096  1月  1 22:05 ../</span><br><span class="line">-rw-r--r-- 1 root root  132  6月 15  2023 mysql.cnf</span><br><span class="line">-rw-r--r-- 1 root root 2220  6月 15  2023 mysqld.cnf</span><br><span class="line">wanko@wanko:/etc/mysql/mysql.conf.d$ sudo vim mysqld.cnf</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/qGu0SDZW-pkAcr" alt="61-33"></p><p>初学关注：</p><ul><li><code>mysql_real_connect()</code></li><li><code>mysql_query()</code></li><li><code>mysql_store_result()</code></li><li><code>mysql_num_rows()</code></li></ul><p>安装 libmysqlclient-dev ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libmysqlclient-dev</span><br></pre></td></tr></table></figure><p>（在某些情况下 linux 真的比 Windows 方便许多，令人感叹）</p><p>写一段用于查询的 C 程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql/mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error args\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MYSQL* conn;</span><br><span class="line">    MYSQL_RES* res;</span><br><span class="line">    MYSQL_ROW row;</span><br><span class="line">    <span class="type">char</span>* server = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* password = <span class="string">&quot;&quot;</span>; <span class="comment">// input passwd, use &quot;&quot; if there isn&#x27;t a password</span></span><br><span class="line">    <span class="type">char</span>* database = <span class="string">&quot;akashi&quot;</span>; <span class="comment">// name of the database to access</span></span><br><span class="line">    <span class="type">char</span> query[<span class="number">300</span>] = <span class="string">&quot;select * from member where name = &#x27;&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> queryRet;</span><br><span class="line">    <span class="built_in">sprintf</span>(query, <span class="string">&quot;%s%s%s&quot;</span>, query, argv[<span class="number">1</span>], <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    <span class="comment">/* strcpy(query, &quot;select * from www&quot;); */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Print the query statement before output */</span></span><br><span class="line">    <span class="built_in">puts</span>(query);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    conn = mysql_init(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(!conn)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;MySQL init failed.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Connect to the database, continue if successful */</span></span><br><span class="line">    <span class="keyword">if</span>(!mysql_real_connect(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error connecting to database: %s\n&quot;</span>, mysql_error(conn));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;MySQL Connected.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Passing SQL Statements to MySQL</span></span><br><span class="line">    queryRet = mysql_query(conn, query);</span><br><span class="line">    <span class="keyword">if</span>(queryRet)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error making query: %s\n&quot;</span>, mysql_error(conn));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        res = mysql_store_result(conn);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;mysql_store_result = %lu\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>)mysql_num_rows(res));</span><br><span class="line">        <span class="comment">/* alternative way of the two lines above */</span></span><br><span class="line">        <span class="comment">/* res = mysql_use_result(conn); */</span></span><br><span class="line"></span><br><span class="line">        row = mysql_fetch_row(res);</span><br><span class="line">        <span class="keyword">if</span>(row == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No data found.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                <span class="comment">// print an entire line of content every single loop</span></span><br><span class="line">                <span class="keyword">for</span>(queryRet = <span class="number">0</span>; queryRet &lt; mysql_num_fields(res); queryRet++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%8s &quot;</span>, row[queryRet]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">while</span>((row = mysql_fetch_row(res)) != <span class="literal">NULL</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mysql_free_result(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysql_close(conn);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译（可能会跳一些 warning 不过不影响大局）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc query.c -lmysqlclient</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode/example_mysql$ ./a.out lumine</span><br><span class="line">select * from member where name = &#x27;lumine&#x27;</span><br><span class="line">MySQL Connected.</span><br><span class="line">mysql_store_result = 1</span><br><span class="line">       4   lumine       17       61 1999-10-10 10:10:10</span><br></pre></td></tr></table></figure><p>来看一下是否和 akashi 库中的表 member 数据吻合：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo    <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai        <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi  <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi     <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>写一个用来插入的程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql/mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span>&#123;</span><br><span class="line">    MYSQL *conn;</span><br><span class="line">    <span class="type">char</span>* server = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* password = <span class="string">&quot;&quot;</span>; <span class="comment">// input passwd, use &quot;&quot; if there isn&#x27;t a password</span></span><br><span class="line">    <span class="type">char</span>* database = <span class="string">&quot;akashi&quot;</span>; <span class="comment">// name of the database to access</span></span><br><span class="line">    <span class="type">char</span> query[<span class="number">300</span>] = <span class="string">&quot;insert into member (id, name, age, math) values (8,&#x27;Kafka&#x27;,28,99)&quot;</span>;</span><br><span class="line">    <span class="type">int</span> queryResult;</span><br><span class="line"></span><br><span class="line">    conn = mysql_init(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!mysql_real_connect(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error connecting to database: %s\n&quot;</span>, mysql_error(conn));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;MySQL Connected.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    queryResult = mysql_query(conn, query);</span><br><span class="line">    <span class="keyword">if</span>(queryResult)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error making querry: %s\n&quot;</span>, mysql_error(conn));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;insert succeed.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysql_close(conn);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的代码之后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo    <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai        <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi  <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi     <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka     <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>写一个用来 update 的程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql/mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error args\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MYSQL* conn;</span><br><span class="line">    MYSQL_RES* res;</span><br><span class="line">    MYSQL_ROW row;</span><br><span class="line">    <span class="type">char</span>* server = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* password = <span class="string">&quot;&quot;</span>; <span class="comment">// input passwd, use &quot;&quot; if there isn&#x27;t a password</span></span><br><span class="line">    <span class="type">char</span>* database = <span class="string">&quot;akashi&quot;</span>; <span class="comment">// name of the database to access</span></span><br><span class="line">    <span class="type">char</span> query[<span class="number">300</span>] = <span class="string">&quot;update member set name = &#x27;&quot;</span>;</span><br><span class="line">    <span class="built_in">sprintf</span>(query, <span class="string">&quot;%s%s%s&quot;</span>, query, argv[<span class="number">1</span>], <span class="string">&quot;&#x27; where id = 1&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(query);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> queryResult;</span><br><span class="line">    conn = mysql_init(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!mysql_real_connect(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error connecting to database: %s\n&quot;</span>, mysql_error(conn));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;MySQL Connected.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    queryResult = mysql_query(conn, query);</span><br><span class="line">    <span class="keyword">if</span>(queryResult)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error making query: %s\n&quot;</span>, mysql_error(conn));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> ret = mysql_affected_rows(conn);</span><br><span class="line">        <span class="keyword">if</span>(ret)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;update succeed.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;update failed, mysql_affected_rows: %d\n&quot;</span>, ret);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysql_close(conn);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode/example_mysql$ ./a.out Natasha</span><br><span class="line">update member set name = &#x27;Natasha&#x27; where id = 1</span><br><span class="line">MySQL Connected.</span><br><span class="line">update succeed.</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h2 id="事务（transaction）"><a href="#事务（transaction）" class="headerlink" title="事务（transaction）"></a>事务（transaction）</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>考虑一个常见操作，转账。</p><p>现在 A 要给 B 转账 1000 元。这个过程可分两步：</p><ol><li>A 的账户减去 1000 元</li><li>B 的账户增加 1000 元</li><li>以上两步都完成时，“转账”才算完成</li></ol><p>但是，现实世界有各种突发情况。若 A 的账户减去 1000 元后，由于某些故障，如系统崩坏、网络故障等，转账操作未完成。此时，A 账户少了 1000 元，但 B 账户的余额没变——即 A 平白无故少了 1000 元。</p><p>因此要求，这些操作要么全发生，要么由于故障而全不发生。</p><p>构成单一逻辑工作单元的操作集合，称为<strong>事务（transaction）</strong>。事务是一组原子性的 SQL 查询，或者说一个独立的工作单元。</p><p>即使有故障，数据库系统也必须保证事务的正确执行——要么执行整个事务，要么属于该事务的操作一个也不执行。</p><h3 id="性质——ACID"><a href="#性质——ACID" class="headerlink" title="性质——ACID"></a>性质——ACID</h3><p>原子性（Atomicity）。</p><p>一致性（Consistency）：当一个事务开始执行时，系统处于一种合法的状态，而当事务成功提交后，系统将转移到另一个合法的状态。具体来说，一致性要求事务在执行过程中必须遵循预定义的规则和约束，以保持数据的完整性。</p><p>隔离性（Isolation）：尽管多个事务可能并发执行，但系统保证，对于任何一对事务 i 和 j ，在 i 看来，j 要么在 i 开始之前已经完成，要么在 i 完成之后才开始执行。因此，每个事务都感觉不到系统中有其他事务在并发地执行。即：一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的。<br>做不到 100% 隔离，与隔离级别有关。</p><p>持久性（Durability）：一个事务成功完成后，对数据库中数据的修改将被永久保存，即使发生系统故障或崩溃，数据也不会丢失。</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>开启一个事务，标记事务的起点：<code>START TRANSACTION</code> / <code>BEGIN</code></p><p>提交事务，表示事务成功被执行：<code>COMMIT</code></p><p>回滚事务，回滚到初始状态或者回滚点：<code>ROLL BACK</code></p><p>回滚点：<code>SAVEPOINT</code></p><p>删除回滚点：<code>RELEASE SAVEPOINT</code></p><p>设置隔离级别：<code>SET  TRANSACTION</code></p><center><p style="color: red;">- - - - - 隔离性的体现 - - - - -</p></center><p>最开始的表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在终端 1 操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>终端 2（与此同时，另一边 …）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>终端 1 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> age <span class="operator">=</span> <span class="number">17</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>然后在终端 2 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>我们发现，终端 2 中尚未同步终端 1 的修改，这是因为终端 1 的事务尚未提交。体现了隔离性。</p><center><p style="color: red;">- - - - - 隔离性的体现 END - - - - -</p></center><p>终端 1 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>终端 2 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>此时在终端 1 查看数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在终端 2 查看数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>两个查看结果相同了。</p><center><p style="color: red;">- - - - - rollback - - - - -</p></center><p>终端 1 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> age <span class="operator">=</span> <span class="number">15</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">rollback</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>huohuo 的 age 又回退到事务开始之前的状态。</p><p>此时再 commit ，查看数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><center><p style="color: red;">- - - - - rollback _ END - - - - -</p></center><p><img src="https://upload-bbs.miyoushe.com/upload/2024/01/19/391084249/5f6c075ffef47029c023996043ffe120_5272792836660250826.jpg" alt="61-34"></p><center><p style="color: red;">- - - - - 回滚点 - - - - -</p></center><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> age <span class="operator">=</span> <span class="number">15</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>设置回滚点：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">savepoint</span> sq1;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>再次修改 <del>（身材虽然欧巴桑，内心依旧纤细少女的霍霍）</del>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> age <span class="operator">=</span> <span class="number">51</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">51</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><del>（因为被尾巴大爷喂了好果子吃，所以要执行）</del> 回滚：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">rollback</span> <span class="keyword">to</span> sq1;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>commit 之后再看数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>可以发现回到了之前设置的回滚点处。</p><center><p style="color: red;">- - - - - 回滚点END - - - - -</p></center><p>注意事项：</p><ul><li><code>START TRANSACTION</code>标志事务的开始，在 MySQL 中可以用<code>set autocommit = 0</code>替代。</li><li>结束事务的情况只有两种：<ul><li><code>COMMIT</code>：表示事务成功被执行，结束事务。</li><li>发生故障：结束事务，不管有没有设置回滚点，都会回到事务开启前的状态。</li></ul></li><li><code>ROLLBACK</code>：不表示发生故障, 它也是一个数据库操作，属于事务的一部分。表示回滚事务，回滚到事务开启前的状态，或者中间的某个回滚点。要想<code>rollback</code>生效，必须要<code>commit</code>。</li></ul><h2 id="并发产生的问题"><a href="#并发产生的问题" class="headerlink" title="并发产生的问题"></a>并发产生的问题</h2><p>一、脏写</p><p>脏写是指当多个事务并发写同一数据时，先执行的事务所写的数据会被后写的数据覆盖。</p><p><img src="https://bu.dusays.com/2024/01/21/65ac05bd6844f.png" alt="61-35.png"></p><p>脏写会导致更新丢失。就好像先提交的事务根本没有执行一样。</p><p>二、脏读</p><p>若事务A向数据库写数据，但 A 还没提交或终止，另一个事务 B 就读到了事务A写入数据库的数据，这个现象称为脏读。</p><p><img src="https://bu.dusays.com/2024/01/21/65aceb08b60f0.png" alt="61-36.png"></p><center><p style="color: red;">- - - - - AIGC - - - - -</p></center><p><strong>问：</strong><br>什么是数据库的 “脏读“ 现象？请举例</p><p><strong>答：</strong><br>“脏读” 是数据库中一种并发控制的问题，指的是一个事务读取了另一个事务尚未提交的数据。当一个事务读取了另一事务的未提交数据，而后者最终回滚，导致读取的数据是无效的，这就是脏读。</p><p>举个例子：</p><p>假设有两个事务 A 和 B。</p><ol><li>事务 A 开始，读取某一行数据。</li><li>事务 B 修改了这一行数据，但尚未提交。</li><li>事务 A 继续读取同一行数据，此时它读取到了事务 B 修改但未提交的数据，即脏数据。</li><li>事务 B 回滚，因为某种原因导致事务 B 的修改被撤销。</li><li>事务 A 最终得到的数据是基于已经回滚的事务 B 的修改，而这个修改实际上是无效的。</li></ol><p>这就是脏读的典型情况，因为事务 A 读取了未提交的、后来被回滚的数据。脏读可能导致不一致的查询结果，因为读取到的数据可能并不代表数据库的真实状态。为了避免脏读，通常使用事务隔离级别来控制事务之间的可见性。</p><p><strong>问：</strong><br>事务B 的修改不应该被隔离吗？为什么 A 会读到 B 未提交的数据？</p><p><strong>答：</strong><br>对于事务的隔离级别有不同的设定，而脏读的发生与事务隔离级别有关。在数据库中，有四种标准的事务隔离级别，从低到高分别是：读未提交（Read Uncommitted）、读提交（Read Committed）、可重复读（Repeatable Read）和串行化（Serializable）。</p><ol><li>读未提交（Read Uncommitted）：允许事务读取其他事务尚未提交的数据，因此可能发生脏读。</li><li>读提交（Read Committed）：保证一个事务提交后才能被其他事务读取，避免了脏读。但在并发环境下，仍可能发生不可重复读和幻读。</li><li>可重复读（Repeatable Read）：保证一个事务在执行期间多次读取同一行数据时，能够得到一致的结果。防止了脏读和不可重复读，但仍可能发生幻读。</li><li>串行化（Serializable）：最高的隔离级别，通过完全锁定读取的数据，确保事务的完全隔离。避免了脏读、不可重复读和幻读，但也降低了并发性能。</li></ol><p>在读未提交的隔离级别下，事务 A 可以读取事务 B 尚未提交的数据，导致脏读。在实际应用中，通常会选择适当的隔离级别，权衡事务的隔离和性能需求。</p><center><p style="color: red;">- - - - - AIGC END - - - - -</p></center><p>三、不可重复读</p><p>一个事务有对同一个数据项的多次读取，但是在某前后两次读取之间，另一个事务更新该数据项，并且<strong>提交了</strong>。在后一次读取时，感知到了提交的更新。称为不可重复读。</p><p><img src="https://bu.dusays.com/2024/01/21/65acf29ee577b.png" alt="61-37.png"></p><center><p style="color: red;">- - - - - AIGC - - - - -</p></center><p><strong>问：</strong><br>什么是数据库的 不可重复读？</p><p><strong>答：</strong><br>不可重复读是数据库中的一种并发控制问题，它指的是在同一个事务内，由于其他事务的修改，导致事务中多次读取同一行数据时，得到的结果不一致。</p><p>举个例子：</p><p>假设有两个事务 A 和 B。</p><ol><li>事务 A 开始，读取某一行数据。</li><li>事务 B 修改了这一行数据，并提交。</li><li>事务 A 再次读取同一行数据，此时它得到的结果与第一次读取时不一样，因为在两次读取之间，事务 B 进行了修改。</li></ol><p>这种情况就是不可重复读，因为同一个事务内的两次读取操作得到的数据不一致。不可重复读可能导致事务中的操作基于不一致的数据，从而产生意料之外的结果。</p><p>为了解决不可重复读的问题，数据库系统通常提供不同的事务隔离级别。在可重复读（Repeatable Read）隔离级别下，数据库系统会确保在同一个事务内多次读取同一行数据时，得到的结果保持一致，不受其他事务的影响。</p><center><p style="color: red;">- - - - - AIGC END - - - - -</p></center><p>四、幻读</p><p>一个事务需要进行前后两次统计，在这两次统计期间，另一个事务插入了新的符合统计条件的记录，并且提交了。导致前后两次统计的数据不一致。这种现象，我们称之为幻读。</p><p><img src="https://bu.dusays.com/2024/01/21/65acf96252fed.png" alt="61-38.png"></p><center><p style="color: red;">- - - - - AIGC - - - - -</p></center><p><strong>问：</strong><br>什么是数据库的 幻读？</p><p><strong>答：</strong><br>幻读是数据库中的一种并发控制问题，它指的是在同一个事务中，由于其他事务的插入或删除操作，导致事务中的查询结果集合发生变化，产生了额外的行，就像出现了幻觉一样。</p><p>举个例子：</p><p>假设有两个事务 A 和 B。</p><ol><li>事务 A 开始，执行一个范围查询，得到一定的结果集合。</li><li>事务 B 在此期间插入了新的数据，符合事务 A 的查询条件。</li><li>事务 A 再次执行相同的范围查询，但这次得到的结果集合比第一次查询时更大，因为事务 B 插入的新数据导致了额外的行出现。</li></ol><p>为了解决幻读的问题，数据库系统通常提供不同的事务隔离级别。在串行化（Serializable）隔离级别下，数据库系统会确保一个事务中的查询结果是一致的，不受其他事务的插入或删除操作的影响。然而，串行化隔离级别也可能降低并发性能。在实际应用中，选择适当的隔离级别需要权衡一致性和性能的需求。</p><center><p style="color: red;">- - - - - AIGC END - - - - -</p></center><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p>SQL 标准规定了四种隔离级别，分别为（隔离性依次增高）：</p><ul><li><strong>读未提交（read uncommitted）</strong>：允许读取未提交的数据。</li><li><strong>读已提交（read committed）</strong>：只允许读取已提交的数据，但不要求可重复读。比如，在事务两次读取一个数据项期间，另一个事务更新了该数据项并提交。</li><li><strong>可重复读（repeatable read）</strong>：只允许读取已提交的数据，且在一个事务两次读取一个数据项期间，其他事务不得更新该数据。但该事务不要求与其他事务可串行化。比如，在两次统计查询中，另一个事务可以插入一些记录，这些记录若有符合查询条件的，就会导致幻读。</li><li><strong>可串行化（serializable）</strong>：看起来事务就好像是串行执行的一样。一个事务结束后，另一个事务才开始执行。</li></ul><table>  <tbody>    <tr>      <td></td>      <td>脏写</td>      <td>脏读</td>      <td>不可重复读</td>      <td>幻读</td>    </tr>    <tr>      <td>读未提交</td>      <td>×</td>      <td>√</td>      <td>√</td>      <td>√</td>    </tr>    <tr>      <td>读已提交</td>      <td>×</td>      <td>×</td>      <td>√<br></td>      <td>√</td>    </tr>    <tr>      <td>可重复读<br></td>      <td>×</td>      <td>×</td>      <td>×</td>      <td>√</td>    </tr>    <tr>      <td>可串行化</td>      <td>×</td>      <td>×</td>      <td>×</td>      <td>×</td>    </tr>  </tbody>  <colgroup>    <col>    <col>    <col>    <col>    <col>  </colgroup></table><p><strong>以上所有隔离级别都不允许脏写（dirty write）</strong>，即：若一个数据项正在被一个尚未提交或中止的事务执行写操作，则其他事务不能对该数据项执行写操作。</p><p>查看当前隔离级别：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@session</span>.transaction_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@session</span>.transaction_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>设置当前隔离级别为读未提交：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> session transaction isolation level read uncommitted;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@session</span>.transaction_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@session</span>.transaction_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> READ<span class="operator">-</span>UNCOMMITTED                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>设置当前隔离级别为读已提交：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> session transaction isolation level read committed;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@session</span>.transaction_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@session</span>.transaction_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> READ<span class="operator">-</span>COMMITTED                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>设置当前隔离级别为可重复读：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> session transaction isolation level repeatable read;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@session</span>.transaction_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@session</span>.transaction_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>设置当前隔离级别为可串行化：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> session transaction isolation level serializable;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@session</span>.transaction_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@session</span>.transaction_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> SERIALIZABLE                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><center><p style="color: red";>- - - - - Presentation - - - - -</p></center><p>在 REPEATABLE-READ 下<strong>演示幻读现象</strong>：</p><p>terminal 1:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@session</span>.transaction_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@session</span>.transaction_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name        <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha     <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai      <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine      <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo      <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai          <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi       <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka       <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">9</span> <span class="operator">|</span> kongfupanda <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 2:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@session</span>.transaction_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@session</span>.transaction_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name        <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha     <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai      <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine      <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo      <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai          <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi       <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka       <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">9</span> <span class="operator">|</span> kongfupanda <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 1:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> (id, name, age) <span class="keyword">values</span>(<span class="number">10</span>, &quot;po&quot;, <span class="number">3</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name        <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha     <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai      <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine      <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo      <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai          <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi       <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka       <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">9</span> <span class="operator">|</span> kongfupanda <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span> po          <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>此时在 terminal 2 中，按道理应该是能读到 id 为 10 的记录，但是 terminal 2 显示如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name        <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha     <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai      <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine      <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo      <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai          <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi       <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka       <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">9</span> <span class="operator">|</span> kongfupanda <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>体现幻读的现象，terminal 2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> (id, name, age) <span class="keyword">values</span>(<span class="number">10</span>, &quot;po&quot;, <span class="number">3</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field  <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> math   <span class="operator">|</span> <span class="type">float</span>       <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> e_date <span class="operator">|</span> datetime    <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name        <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha     <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai      <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine      <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo      <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai          <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi       <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka       <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">9</span> <span class="operator">|</span> kongfupanda <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span> po          <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name        <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha     <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai      <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine      <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo      <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai          <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi       <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka       <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">9</span> <span class="operator">|</span> kongfupanda <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span> po          <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span> po          <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">13</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 1 之前插入的数据已经在了，只是刚才没有显式地显示出来。<br>另一种体现方式：如果 id 被设为主键，则在 terminal 2 中会无法插入。</p><center><p style="color: red";>- - - - - Presentation END - - - - -</p></center><p>下面简单展示一下可串行化。</p><p>terminal 1 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@session</span>.transaction_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@session</span>.transaction_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> SERIALIZABLE                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name        <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha     <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai      <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine      <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo      <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai          <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi       <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka       <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">9</span> <span class="operator">|</span> kongfupanda <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span> po          <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span> po          <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">13</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 2 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@session</span>.transaction_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@session</span>.transaction_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> SERIALIZABLE                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name        <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha     <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai      <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine      <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo      <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai          <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi       <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka       <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">9</span> <span class="operator">|</span> kongfupanda <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span> po          <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span> po          <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">13</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 1 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> age <span class="operator">=</span> <span class="number">4</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">ERROR <span class="number">1205</span> (HY000): Lock wait timeout exceeded; try restarting transaction</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<br>MySQL 支持 4 种隔离级别，默认为 RR（repeatable read），MySQL 的 RR 隔离级别，在一定程度上避免了幻读问题。<br>Oracle 只支持 read committed 和 serializable 两种隔离级别，默认为 read committed.</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h3><p>索引（Index）是帮助 MySQL 高效获取数据的数据结构。</p><p>示例（查找的快慢）：</p><p><img src="https://bu.dusays.com/2024/01/24/65b0f61a3423f.png" alt="61-39.png" title="id 是索引"></p><p>数据结构选择的参考维度：空间的连续性、时间复杂度、磁盘 IO 的次数、范围查找。</p><ul><li>顺序查找：遍历操作，时间复杂度是 O(N)，需要大块连续的空间。</li><li>二分查找：时间复杂度 O(logN)，需要大块连续的空间。</li><li>二叉树：时间复杂度 O(logN)，不需要连续的空间。但如果数据量比较大（如：百万级别），二叉树的高度会非常高，导致磁盘 IO 次数随之变多，而磁盘 IO 很慢。</li><li>哈希：时间复杂度 O(1). 哈希会有哈希冲突，会影响查找速度。哈希意味着无序。在 SQL 里常进行范围查找，而哈希是没有顺序的，故数据量大的时不能用哈希。</li><li>B树和B+树：见数据结构笔记。</li></ul><p>查看节点大小：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb_page_size&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name    <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> innodb_page_size <span class="operator">|</span> <span class="number">16384</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p>索引的分类：</p><ul><li>主键索引：以主键创建的索引</li><li>非主键索引（辅助索引）：普通索引、唯一索引、全文索引、组合索引</li></ul><h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><p>创建主键索引（创建表的时候，创建主键）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test1(id <span class="type">int</span>, age <span class="type">int</span>, <span class="keyword">primary</span> key(id));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>创建主键索引（表创建完之后，再创建主键）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test2;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test2 <span class="keyword">add</span> <span class="keyword">primary</span> key(id);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test2;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>主键特点：非空、唯一。</p><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><p>普通索引的创建（创建表的时候，创建普通索引）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test3(id <span class="type">int</span>, age <span class="type">int</span>, index idx_age(age));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.04</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test3;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>普通索引的创建（创建表之后，再创建普通索引）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test4(id <span class="type">int</span>, age <span class="type">int</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test4;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test4 <span class="keyword">add</span> index idx_age(age);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test4;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>在创建表之后，使用 create index 创建索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> index idx_id <span class="keyword">on</span> test4(id);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test4;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>唯一索引（创建方法和普通索引大同小异）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test3(id <span class="type">int</span>, age <span class="type">int</span>, <span class="keyword">unique</span> index idx_age(age));</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test4 <span class="keyword">add</span> <span class="keyword">unique</span> index idx_age(age);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index idx_id <span class="keyword">on</span> test4(id);</span><br></pre></td></tr></table></figure><h3 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h3><p>组合索引是由多个列一起组成的。</p><p>创建表之后再创建组合索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test5(id <span class="type">int</span>, age <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">20</span>), math <span class="type">int</span>, eng <span class="type">int</span>, <span class="keyword">primary</span> key(id));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test5;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> math  <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> eng   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test5 <span class="keyword">add</span> index idx_name_math_eng(name, math, eng);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test5;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> math  <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> eng   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> test5;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                                                                           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> test5 <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test5` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `math` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `eng` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `idx_name_math_eng` (`name`,`math`,`eng`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>也可以：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_name_math_eng <span class="keyword">on</span> test5(name, math, eng);</span><br></pre></td></tr></table></figure><p>显示表的索引情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> index <span class="keyword">from</span> test5;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+-------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> Non_unique <span class="operator">|</span> Key_name          <span class="operator">|</span> Seq_in_index <span class="operator">|</span> Column_name <span class="operator">|</span> <span class="keyword">Collation</span> <span class="operator">|</span> <span class="keyword">Cardinality</span> <span class="operator">|</span> Sub_part <span class="operator">|</span> Packed <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Index_type <span class="operator">|</span> Comment <span class="operator">|</span> Index_comment <span class="operator">|</span> Visible <span class="operator">|</span> Expression <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+-------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> test5 <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>           <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span> id          <span class="operator">|</span> A         <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span>      <span class="operator">|</span> BTREE      <span class="operator">|</span>         <span class="operator">|</span>               <span class="operator">|</span> YES     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test5 <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> idx_name_math_eng <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span> name        <span class="operator">|</span> A         <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span> YES  <span class="operator">|</span> BTREE      <span class="operator">|</span>         <span class="operator">|</span>               <span class="operator">|</span> YES     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test5 <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> idx_name_math_eng <span class="operator">|</span>            <span class="number">2</span> <span class="operator">|</span> math        <span class="operator">|</span> A         <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span> YES  <span class="operator">|</span> BTREE      <span class="operator">|</span>         <span class="operator">|</span>               <span class="operator">|</span> YES     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test5 <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> idx_name_math_eng <span class="operator">|</span>            <span class="number">3</span> <span class="operator">|</span> eng         <span class="operator">|</span> A         <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span> YES  <span class="operator">|</span> BTREE      <span class="operator">|</span>         <span class="operator">|</span>               <span class="operator">|</span> YES     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+-------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p>换一种打印方式（竖着看）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> index <span class="keyword">from</span> test5\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">        <span class="keyword">Table</span>: test5</span><br><span class="line">   Non_unique: <span class="number">0</span></span><br><span class="line">     Key_name: <span class="keyword">PRIMARY</span></span><br><span class="line"> Seq_in_index: <span class="number">1</span></span><br><span class="line">  Column_name: id</span><br><span class="line">    <span class="keyword">Collation</span>: A</span><br><span class="line">  <span class="keyword">Cardinality</span>: <span class="number">0</span></span><br><span class="line">     Sub_part: <span class="keyword">NULL</span></span><br><span class="line">       Packed: <span class="keyword">NULL</span></span><br><span class="line">         <span class="keyword">Null</span>: </span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment: </span><br><span class="line">Index_comment: </span><br><span class="line">      Visible: YES</span><br><span class="line">   Expression: <span class="keyword">NULL</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">2.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">        <span class="keyword">Table</span>: test5</span><br><span class="line">   Non_unique: <span class="number">1</span></span><br><span class="line">     Key_name: idx_name_math_eng</span><br><span class="line"> Seq_in_index: <span class="number">1</span></span><br><span class="line">  Column_name: name</span><br><span class="line">    <span class="keyword">Collation</span>: A</span><br><span class="line">  <span class="keyword">Cardinality</span>: <span class="number">0</span></span><br><span class="line">     Sub_part: <span class="keyword">NULL</span></span><br><span class="line">       Packed: <span class="keyword">NULL</span></span><br><span class="line">         <span class="keyword">Null</span>: YES</span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment: </span><br><span class="line">Index_comment: </span><br><span class="line">      Visible: YES</span><br><span class="line">   Expression: <span class="keyword">NULL</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">3.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">        <span class="keyword">Table</span>: test5</span><br><span class="line">   Non_unique: <span class="number">1</span></span><br><span class="line">     Key_name: idx_name_math_eng</span><br><span class="line"> Seq_in_index: <span class="number">2</span></span><br><span class="line">  Column_name: math</span><br><span class="line">    <span class="keyword">Collation</span>: A</span><br><span class="line">  <span class="keyword">Cardinality</span>: <span class="number">0</span></span><br><span class="line">     Sub_part: <span class="keyword">NULL</span></span><br><span class="line">       Packed: <span class="keyword">NULL</span></span><br><span class="line">         <span class="keyword">Null</span>: YES</span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment: </span><br><span class="line">Index_comment: </span><br><span class="line">      Visible: YES</span><br><span class="line">   Expression: <span class="keyword">NULL</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">4.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">        <span class="keyword">Table</span>: test5</span><br><span class="line">   Non_unique: <span class="number">1</span></span><br><span class="line">     Key_name: idx_name_math_eng</span><br><span class="line"> Seq_in_index: <span class="number">3</span></span><br><span class="line">  Column_name: eng</span><br><span class="line">    <span class="keyword">Collation</span>: A</span><br><span class="line">  <span class="keyword">Cardinality</span>: <span class="number">0</span></span><br><span class="line">     Sub_part: <span class="keyword">NULL</span></span><br><span class="line">       Packed: <span class="keyword">NULL</span></span><br><span class="line">         <span class="keyword">Null</span>: YES</span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment: </span><br><span class="line">Index_comment: </span><br><span class="line">      Visible: YES</span><br><span class="line">   Expression: <span class="keyword">NULL</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="索引的删除"><a href="#索引的删除" class="headerlink" title="索引的删除"></a>索引的删除</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name DROP INDEX index_name;</span><br><span class="line">DORP INDEX IndexName ON TableName;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test5;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> math  <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> eng   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test5 <span class="keyword">drop</span> index idx_name_math_eng;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test5;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> math  <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> eng   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test4;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> index idx_id <span class="keyword">on</span> test4;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test4;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="索引的好处和坏处"><a href="#索引的好处和坏处" class="headerlink" title="索引的好处和坏处"></a>索引的好处和坏处</h3><p>好处：<br>提高数据检索效率，降低数据库 IO 成本。</p><ol><li>查找</li><li>排序</li><li>分组</li><li>表的连接</li></ol><p>坏处</p><ol><li>额外占用空间。有时候索引占用的空间甚至比数据占用的空间还多。</li><li>降低更新表的速度。因为数据库不仅要更新数据，还要更新对应的索引信息。</li></ol><h3 id="组合索引的最左前缀"><a href="#组合索引的最左前缀" class="headerlink" title="组合索引的最左前缀"></a>组合索引的最左前缀</h3><p>大概理解一下，这个图示不是很好：</p><p><img src="https://bu.dusays.com/2024/01/25/65b1bce99c548.png" alt="61-40.png"></p><p>简单理解，其实就和结构体排序差不多。例如洛谷 P9472 ：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">mnode</span>&#123;</span><br><span class="line">    LL mcontent;</span><br><span class="line">    LL mindex;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> mnode&amp; v)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mcontent != v.mcontent)</span><br><span class="line">            <span class="keyword">return</span> mcontent &lt; v.mcontent;</span><br><span class="line">        <span class="keyword">else</span>    </span><br><span class="line">            <span class="keyword">if</span>(mcontent &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> mindex &lt; v.mindex;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">return</span> mindex &gt; v.mindex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;marray[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        LL x; </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;x);</span><br><span class="line">        marray[i].mcontent = x;</span><br><span class="line">        marray[i].mindex = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(marray+<span class="number">1</span>, marray+<span class="number">1</span>+n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,marray[i].mindex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MySQL-逻辑架构"><a href="#MySQL-逻辑架构" class="headerlink" title="MySQL 逻辑架构"></a>MySQL 逻辑架构</h2><p><img src="https://bu.dusays.com/2024/01/25/65b1c5360f6a2.png" alt="61-41.png"></p><p>Cache : 侧重读<br>Buffer : 侧重写</p><p><img src="https://s2.loli.net/2024/01/25/OPb3sD8hHC1TGXw.png" alt="61-42.png"></p><p>大体来说，MySQL 分为 Server 层和存储引擎层。</p><p>Server 层包括连接器、查询缓存、解析器、优化器和执行器等，涵盖了 MySQL 大多数核心服务功能。</p><p><strong>存储引擎层负责数据的存储和提取</strong>。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。</p><p>MySQL 是如何工作的？</p><ol><li><strong>连接器</strong><br>当你在客户端输入<code>mysql –u $user –p $pwd</code>连接 mysql 的时候，接待你的就是连接器。连接器的作用就是和客户端建立连接、获取权限、维持和管理连接。</li><li><strong>查询缓存</strong><br>建立连接后，就可以执行<code>select</code>语句了。首先 MySQL 会去查看查询缓存，看下之前是否已经执行过这条查询语句。如果命中缓存，就直接返回。否则就扔给解析器。</li><li><strong>解析器</strong><br>MySQL 需要知道你想做什么，因此我们就来到了解析器。解析器会做词法分析和语法分析。词法分析主要是分析每个词的含义，语法分析会判断你写的 SQL 语句是否满足 SQL 语法。</li><li><strong>优化器</strong><br>经过解析器，MySQL 就知道你想做什么了。但是在开始执行之前，还需要经过优化器的处理。优化器会优化你的 SQL 语句。生成最终的执行方案（execution plan）。然后进入执行器阶段。</li><li><strong>执行器</strong><br>执行器首先会判断你对这张表有没有相应的权限。如果没有，就报错。如果有，就调用相应的存储引擎接口，执行语句。然后将结果集返回给客户端。</li></ol><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>数据的存储和提取是由存储引擎负责的，它负责和文件系统打交道。</p><p>MySQL 的存储引擎是<strong>插件式</strong>的。不同的存储引擎支持不同的特性。</p><p>查看 MySQL 支持哪些存储引擎：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> ENGINES;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span><br><span class="line"><span class="operator">|</span> Engine             <span class="operator">|</span> Support <span class="operator">|</span> Comment                                                        <span class="operator">|</span> Transactions <span class="operator">|</span> XA   <span class="operator">|</span> Savepoints <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span><br><span class="line"><span class="operator">|</span> ARCHIVE            <span class="operator">|</span> YES     <span class="operator">|</span> Archive storage engine                                         <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLACKHOLE          <span class="operator">|</span> YES     <span class="operator">|</span> <span class="operator">/</span>dev<span class="operator">/</span><span class="keyword">null</span> storage engine (anything you write <span class="keyword">to</span> it disappears) <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MRG_MYISAM         <span class="operator">|</span> YES     <span class="operator">|</span> Collection <span class="keyword">of</span> identical MyISAM tables                          <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FEDERATED          <span class="operator">|</span> <span class="keyword">NO</span>      <span class="operator">|</span> Federated MySQL storage engine                                 <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MyISAM             <span class="operator">|</span> YES     <span class="operator">|</span> MyISAM storage engine                                          <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PERFORMANCE_SCHEMA <span class="operator">|</span> YES     <span class="operator">|</span> Performance Schema                                             <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> InnoDB             <span class="operator">|</span> <span class="keyword">DEFAULT</span> <span class="operator">|</span> Supports transactions, <span class="type">row</span><span class="operator">-</span>level locking, <span class="keyword">and</span> <span class="keyword">foreign</span> keys     <span class="operator">|</span> YES          <span class="operator">|</span> YES  <span class="operator">|</span> YES        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MEMORY             <span class="operator">|</span> YES     <span class="operator">|</span> Hash based, stored <span class="keyword">in</span> memory, useful <span class="keyword">for</span> temporary tables      <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CSV                <span class="operator">|</span> YES     <span class="operator">|</span> CSV storage engine                                             <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>查看默认存储引擎：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%storage_engine%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name                   <span class="operator">|</span> <span class="keyword">Value</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> default_storage_engine          <span class="operator">|</span> InnoDB    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> default_tmp_storage_engine      <span class="operator">|</span> InnoDB    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> disabled_storage_engines        <span class="operator">|</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> internal_tmp_mem_storage_engine <span class="operator">|</span> TempTable <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+-----------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p>MyISAM（MySQL5.5 之前的默认存储引擎）：</p><ul><li><strong>支持表锁</strong></li><li>支持全文索引（正排索引、倒排索引）</li><li><strong>不支持事务</strong></li></ul><p>使用 MyISAM 存储表，会生成三个文件：</p><ol><li><code>.frm</code> 存储表结构，是任何存储引擎都有的</li><li><code>.myd</code> 存放数据</li><li><code>.myi</code> 存放索引</li></ol><p>索引和数据分开存放，这样的索引叫<strong>非聚集索引</strong>。</p><p>InnoDB（MySQL5.5 及之后版本默认的存储引擎。没有特殊应用，推荐使用 InnoDB 引擎）：</p><ol><li><strong>支持事务</strong></li><li>支持<strong>行锁和表锁</strong>（默认支持行锁）</li><li>支持 MVCC（多版本并发控制），原理类似于事务的编号</li><li>支持崩溃恢复</li><li>支持外键一致性约束</li></ol><p>使用 InnoDB 存储表，会生成两个文件：</p><ol><li><code>.frm</code> 存储表结构，是任何存储引擎都有的</li><li><code>.ibd</code> 存放数据和索引</li></ol><p>索引和数据存放在一起，这样的索引叫<strong>聚集索引</strong>。</p><p>看看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~$ sudo -i</span><br><span class="line">[sudo] password <span class="keyword">for</span> wanko: </span><br><span class="line">root@wanko:~<span class="comment"># cd /var/lib/mysql/</span></span><br><span class="line">root@wanko:/var/lib/mysql<span class="comment"># ls -a</span></span><br><span class="line"> .               binlog.000024   binlog.000051   binlog.000078</span><br><span class="line"> ..              binlog.000025   binlog.000052   binlog.000079</span><br><span class="line"> akashi          binlog.000026   binlog.000053   binlog.index</span><br><span class="line"> auto.cnf        binlog.000027   binlog.000054   ca-key.pem</span><br><span class="line"> binlog.000001   binlog.000028   binlog.000055   ca.pem</span><br><span class="line"> binlog.000002   binlog.000029   binlog.000056   client-cert.pem</span><br><span class="line"> binlog.000003   binlog.000030   binlog.000057   client-key.pem</span><br><span class="line"> binlog.000004   binlog.000031   binlog.000058   debian-5.7.flag</span><br><span class="line"> binlog.000005   binlog.000032   binlog.000059  <span class="string">&#x27;#ib_16384_0.dblwr&#x27;</span></span><br><span class="line"> binlog.000006   binlog.000033   binlog.000060  <span class="string">&#x27;#ib_16384_1.dblwr&#x27;</span></span><br><span class="line"> binlog.000007   binlog.000034   binlog.000061   ib_buffer_pool</span><br><span class="line"> binlog.000008   binlog.000035   binlog.000062   ibdata1</span><br><span class="line"> binlog.000009   binlog.000036   binlog.000063   ibtmp1</span><br><span class="line"> binlog.000010   binlog.000037   binlog.000064  <span class="string">&#x27;#innodb_redo&#x27;</span></span><br><span class="line"> binlog.000011   binlog.000038   binlog.000065  <span class="string">&#x27;#innodb_temp&#x27;</span></span><br><span class="line"> binlog.000012   binlog.000039   binlog.000066   mysql</span><br><span class="line"> binlog.000013   binlog.000040   binlog.000067   mysql.ibd</span><br><span class="line"> binlog.000014   binlog.000041   binlog.000068   performance_schema</span><br><span class="line"> binlog.000015   binlog.000042   binlog.000069   private_key.pem</span><br><span class="line"> binlog.000016   binlog.000043   binlog.000070   public_key.pem</span><br><span class="line"> binlog.000017   binlog.000044   binlog.000071   server-cert.pem</span><br><span class="line"> binlog.000018   binlog.000045   binlog.000072   server-key.pem</span><br><span class="line"> binlog.000019   binlog.000046   binlog.000073   sys</span><br><span class="line"> binlog.000020   binlog.000047   binlog.000074   undo_001</span><br><span class="line"> binlog.000021   binlog.000048   binlog.000075   undo_002</span><br><span class="line"> binlog.000022   binlog.000049   binlog.000076   wanko.pid</span><br><span class="line"> binlog.000023   binlog.000050   binlog.000077</span><br><span class="line">root@wanko:/var/lib/mysql<span class="comment"># cd akashi</span></span><br><span class="line">root@wanko:/var/lib/mysql/akashi<span class="comment"># ls -a</span></span><br><span class="line">.             customer_tmp.ibd       order_table.ibd      test2.ibd  test5.ibd</span><br><span class="line">..            customer_tmp_like.ibd  order_table_tmp.ibd  test3.ibd</span><br><span class="line">customer.ibd  member.ibd             test1.ibd            test4.ibd</span><br><span class="line">root@wanko:/var/lib/mysql/akashi<span class="comment"># file test1.ibd </span></span><br><span class="line">test1.ibd: OpenPGP Secret Key</span><br><span class="line">root@wanko:/var/lib/mysql/akashi<span class="comment"># file member.ibd </span></span><br><span class="line">member.ibd: data</span><br></pre></td></tr></table></figure><p>Memory 引擎特点：</p><ol><li>数据都存放在<strong>内存</strong>中，因此数据库重启后会丢失</li><li>支持表锁</li><li>支持 Hash 和 BTree 索引</li><li>不支持 Blob（大的二进制）和 Text（大的文本）字段</li></ol><p>Memory 引擎数据都放在内存中，支持 Hash 索引，因此它的查询速度最快。</p><p>一般使用 Memory 存放临时表。</p><p>临时表：在单个连接中可见，当连接断开时，临时表也将不复存在。</p><p><strong>临时表</strong>的创建：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_akashi  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> customer          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp_like <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">member</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table_tmp   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> temporary <span class="keyword">table</span> test1(id <span class="type">int</span>, age <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">20</span>));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_akashi  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> customer          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp_like <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">member</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table_tmp   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> test1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> test1 <span class="operator">|</span> <span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> `test1` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>临时表创建完成后，默认的引擎还是 InnoDB ，但是<code>show tables</code>看不到表的名字。还可以进行插入、更新、删除、查找：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> test1 <span class="keyword">values</span>(<span class="number">1</span>, <span class="number">20</span>, <span class="string">&#x27;hajimi&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+--------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> age  <span class="operator">|</span> name   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+--------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span> hajimi <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>创建<strong>存储引擎是 memory</strong> 的表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test3(id <span class="type">int</span>, age <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">20</span>)) ENGINE <span class="operator">=</span> memory;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_akashi  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> customer          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp_like <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">member</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table_tmp   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test3             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> test3;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> test3 <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test3` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>MEMORY <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>存储引擎是 memory 的表创建之后，可以进行正常的 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> test3 <span class="keyword">values</span>(<span class="number">1</span>, <span class="number">20</span>, <span class="string">&#x27;newbrush&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test3;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> age  <span class="operator">|</span> name     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span> newbrush <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>现在，直接关闭 terminal. 然后重启：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_akashi  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> customer          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_tmp_like <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">member</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table_tmp   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test3             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1;</span><br><span class="line">ERROR <span class="number">1146</span> (<span class="number">42</span>S02): <span class="keyword">Table</span> <span class="string">&#x27;akashi.test1&#x27;</span> doesn<span class="string">&#x27;t exist</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql&gt; show create table test3;</span></span><br><span class="line"><span class="string">+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="string">| Table | Create Table                                                                                                                                                                   |</span></span><br><span class="line"><span class="string">+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="string">| test3 | CREATE TABLE `test3` (</span></span><br><span class="line"><span class="string">  `id` int DEFAULT NULL,</span></span><br><span class="line"><span class="string">  `age` int DEFAULT NULL,</span></span><br><span class="line"><span class="string">  `name` varchar(20) DEFAULT NULL</span></span><br><span class="line"><span class="string">) ENGINE=MEMORY DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci |</span></span><br><span class="line"><span class="string">+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="string">1 row in set (0.00 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql&gt; select * from test3;</span></span><br><span class="line"><span class="string">+------+------+----------+</span></span><br><span class="line"><span class="string">| id   | age  | name     |</span></span><br><span class="line"><span class="string">+------+------+----------+</span></span><br><span class="line"><span class="string">|    1 |   20 | newbrush |</span></span><br><span class="line"><span class="string">+------+------+----------+</span></span><br><span class="line"><span class="string">1 row in set (0.00 sec)</span></span><br></pre></td></tr></table></figure><p>即：将会话关闭，存储引擎是 memory 的表，表及数据不会消失；但断电重启之后，表的结构还在，内容消失。</p><h2 id="MySQL-锁机制"><a href="#MySQL-锁机制" class="headerlink" title="MySQL 锁机制"></a>MySQL 锁机制</h2><p>原理可参考操作系统笔记中的 PV 操作。</p><h3 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h3><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。</p><p>MySQL 中不同的存储引擎支持不同的锁机制：</p><ul><li>MyISAM 和 MEMORY 存储引擎采用表级锁（table-level locking）</li><li>BDB 存储引擎采用页面锁（page-level locking），但也支持表级锁</li><li>InnoDB 存储引擎既支持行级锁（row-level locking），也支持表级锁。默认采用行级锁</li></ul><p>锁的分类，从对数据操作的粒度划分：</p><ul><li>表级锁：加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。</li><li>行级锁：加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</li></ul><p>锁的分类，从对数据操作的类型划分：</p><ul><li>读锁（共享锁）：同一份数据，多个读操作可以同时进行而互不影响。</li><li>写锁（排它锁）：当前操作没有完成之前，它会阻断其他读锁和写锁。</li></ul><h3 id="MyISAM-的表锁"><a href="#MyISAM-的表锁" class="headerlink" title="MyISAM 的表锁"></a>MyISAM 的表锁</h3><p>加锁：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lock <span class="keyword">table</span> 表名 read;   # 加读锁</span><br><span class="line"></span><br><span class="line">lock <span class="keyword">table</span> 表名 write;  # 加写锁</span><br></pre></td></tr></table></figure><p>MyISAM 在执行查询语句<code>SELECT</code>前，会自动给涉及的所有表加读锁；在执行更新操作<code>UPDATE</code>、<code>DELETE</code>、<code>INSERT</code>等前，会自动给涉及的表加写锁。这个过程不需要用户干预，因此，用户一般不需要直接用<code>LOCK TABLE</code>命令给 MyISAM 表显式加锁。</p><p>解锁：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlock tables;</span><br></pre></td></tr></table></figure><p>查看加锁的表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">open</span> tables;</span><br></pre></td></tr></table></figure><p>MyISAM 的表锁分为读锁（共享锁）和写锁（独占锁）。</p><p>给表加上读锁（写锁）有什么效果？</p><p>读锁（共享锁）：</p><ol><li>加了读锁的进程可以读加读锁的表，但不能读其他表。</li><li>加读锁的进程不能对这张表做写操作    。</li><li>其他进程可以读加读锁的表（因为是共享锁），也可以读其他表。</li><li>其他进程<code>update</code>加读锁的表会一直处于等待锁的状态，直到锁被释放后才会<code>update</code>成功。</li></ol><p>写锁（独占锁）：</p><ol><li>加锁进程可以对加锁的表做任何操作。</li><li>其他进程不能查询加锁的表，需等待锁释放。</li></ol><p>总结：<br>读锁阻塞写，但不堵塞读。写锁阻塞读和写。</p><h3 id="InnoDB-的行锁"><a href="#InnoDB-的行锁" class="headerlink" title="InnoDB 的行锁"></a>InnoDB 的行锁</h3><p>行级锁在 Mysql 中锁定粒度最细，能大大减少数据库的操作冲突。</p><p>用法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... LOCK <span class="keyword">IN</span> SHARE MODE;  # 读锁</span><br></pre></td></tr></table></figure><p>在查询语句后加<code>LOCK IN SHARE MODE</code>，Mysql 会对查询结果中的每行都加共享锁，当没有其他线程对查询结果集中的任何一行使用排他锁时，成功申请共享锁，否则被阻塞。其他线程可以读上了共享锁的表，且这些线程读的数据为同一版本。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;         # 写锁</span><br></pre></td></tr></table></figure><p>在查询语句后加<code>FOR UPDATE</code>，Mysql 会对查询结果中的每行都加排他锁，当没有其他线程对查询结果集中的任何一行使用排他锁时，成功申请排他锁，否则被阻塞。</p><center><p style="color: red";>- - - - - 演示 - - - - - </p></center><p>演示的时候，需使用事务。</p><p>terminal 1 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 2 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 1 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span> lock <span class="keyword">in</span> share mode;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 2 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>后略。</p><center><p style="color: red";>- - - - - 演示 END - - - - -</p></center><h3 id="InnoDB-的表锁"><a href="#InnoDB-的表锁" class="headerlink" title="InnoDB 的表锁"></a>InnoDB 的表锁</h3><p>InnoDB 还有两个表锁：</p><ul><li>意向共享锁（IS）：表示事务准备给数据行上共享锁，即一个数据行上共享锁前必须先取得该表的 IS锁。</li><li>意向排他锁（IX）：表示事务准备给数据行上排他锁，即一个数据行上排他锁前必须先取得该表的 IX锁。</li></ul><p>意向锁由 InnoDB 自动添加，不需用户干预。</p><h3 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h3><p>terminal 1 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Natasha  <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai   <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo   <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai       <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> zhuangzi <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> laozi    <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span>  <span class="number">120</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> Kafka    <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 2 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 1 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">4</span> <span class="keyword">and</span> id<span class="operator">&lt;</span><span class="number">8</span> lock <span class="keyword">in</span> share mode;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> huohuo <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> ai     <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+--------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>terminal 2 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span>(id, name, age, math) <span class="keyword">values</span>(<span class="number">6</span>, <span class="string">&#x27;silverwolf&#x27;</span>, <span class="number">16</span>, <span class="number">100</span>); </span><br><span class="line">ERROR <span class="number">1205</span> (HY000): Lock wait timeout exceeded; try restarting transaction</span><br></pre></td></tr></table></figure><h2 id="业务设计"><a href="#业务设计" class="headerlink" title="业务设计"></a>业务设计</h2><p>逻辑设计： 范式设计、反范式设计</p><p>物理设计： 命名规范、存储引擎选择、数据类型选择</p><h3 id="范式设计"><a href="#范式设计" class="headerlink" title="范式设计"></a>范式设计</h3><p>为建立冗余较小、结构合理的数据库，设计数据库时必须遵循一定的规则。在关系型数据库中这种<strong>规则</strong>就称为范式。要想设计一个结构合理的关系型数据库，必须满足一定的范式。</p><p>第一范式：</p><p><img src="https://bu.dusays.com/2024/01/26/65b3c0b0a0168.png" alt="61-43.png"></p><p>第二范式：</p><p><img src="https://bu.dusays.com/2024/01/26/65b3c23c6974e.jpeg" alt="61-44.jpeg"></p><p>第三范式：</p><p><img src="https://bu.dusays.com/2024/01/26/65b3c25d57721.jpeg" alt="61-45.jpeg"></p><p>范式化设计的优缺点：</p><ul><li>优点：<ol><li>可以尽量减少数据冗余</li><li>范式化的表通常比反范式化的表更小</li><li>范式化的数据库更新起来更快</li></ol></li><li>缺点：<ol><li>范式化的表，在查询的时候经常需要很多<code>join</code>关联,增加查询的代价。</li><li>更难进行索引优化 </li></ol></li></ul><p>完全符合范式化的设计有时并不能得到良好的 SQL 查询性能。</p><h3 id="反范式化设计"><a href="#反范式化设计" class="headerlink" title="反范式化设计"></a>反范式化设计</h3><p>反范式化设计，是出于性能的考虑，适当地违反范式设计的要求。</p><p>反范式化设计允许存在少量冗余，用空间换时间。</p><p>反范式化设计的优缺点：</p><ul><li>优点：<ol><li>可以减少表的关联</li><li>可以更好的进行索引优化</li></ol></li><li>缺点：<ol><li>存在数据冗余及数据维护异常</li><li>修改数据的成本更高</li></ol></li></ul><h3 id="物理设计"><a href="#物理设计" class="headerlink" title="物理设计"></a>物理设计</h3><p>不同的存储引擎有各自的特点，以适应不同的需求。如下图所示：</p><p><img src="https://bu.dusays.com/2024/01/26/65b3c9937a9da.png" alt="61-46.png"></p><p>为表中的字段选择合适的数据类型：</p><ul><li><strong>更小的通常更好</strong></li><li><strong>简单就好</strong><ul><li>简单数据类型的操作通常需要更少的 CPU 周期。比如：整形比字符操作代价更低。</li><li>用 MySQL 内建的类型而不是字符串来存储日期和时间。</li></ul></li><li><strong>尽量避免 NULL</strong><ul><li>可以为 <code>NULL</code> 是列的默认属性，通常情况下最好指定列为<code>NOT NULL</code>，除非真的需要存储 NULL 值。</li><li>如果查询中包含可为 NULL 的列，对 MySQL 来说更难优化，因为可以为 NULL 的列使得索引和值比较都更为复杂。</li><li>可为 NULL 的列会使用更多存储空间，在 MySQL 里需要特殊处理。</li></ul></li></ul><h2 id="索引再探"><a href="#索引再探" class="headerlink" title="索引再探"></a>索引再探</h2><center><p style="color: red";>- - - - - InnoDB - - - - -</p></center><p>InnoDB 以 主键/非主键 创建索引的一些细节：</p><p><img src="https://bu.dusays.com/2024/01/26/65b3d31e8b542.png" alt="61-47.png"></p><p><img src="https://bu.dusays.com/2024/01/26/65b3d31675ca4.png" alt="61-48.png"></p><p>回表：使用辅助索引查询时，若查询的列在辅助索引树上没有，那么就需要通过该条信息对应的主键，在主键索引树上继续查找。即在两个索引树上进行查找，磁盘 IO 增多，查询速度变慢。（尽量避免回表）</p><p>思考下面 SQL 语句的执行过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> citizen <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>不需要回表，该数据直接可以找到</span><br><span class="line"><span class="keyword">select</span> id_card <span class="keyword">from</span> citizen <span class="keyword">where</span> id_card <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> citizen <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> citizen <span class="keyword">where</span> id_card <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>; <span class="operator">/</span><span class="operator">/</span>回表</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> citizen <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> citizen <span class="keyword">where</span> id_card <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>; <span class="operator">/</span><span class="operator">/</span>回表</span><br></pre></td></tr></table></figure><p>索引覆盖：使用辅助索引查询时，查询的列在辅助索引树上命中。</p><center><p style="color: red";>- - - - - InnoDB END - - - - -</p></center><p><br></p><center><p style="color: red";>- - - - - MyISAM - - - - -</p></center><p>MyISAM 以 主键/非主键 创建的索引：</p><p><img src="https://bu.dusays.com/2024/01/27/65b3de790e4a9.png" alt="61-49.png"></p><p><img src="https://bu.dusays.com/2024/01/27/65b3de790a2a6.png" alt="61-50.png"></p><center><p style="color: red";>- - - - - MyISAM END - - - - -</p></center><h2 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h2><p>慢查询日志，记录了查询比较慢（执行时间长）的 SQL 语句。所有执行时间超过参数<code>long_query_time</code>的设定阈值的 SQL 语句，会被 mysql 记录。</p><p>优化数据库系统的性能，需要定位分析性能瓶颈。</p><p>慢查询日志有助于优化 SQL 语句。默认情况下，慢查询日志关闭，使用前须开启。若无调优需要，一般不建议启动，因为会带来性能上的影响。</p><p>查看慢查询日志是否启用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">Show</span> variables <span class="keyword">like</span> &quot;%slow_query_log&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name  <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------+</span></span><br><span class="line"><span class="operator">|</span> slow_query_log <span class="operator">|</span> OFF   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>或者这样查看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">Show</span> variables <span class="keyword">like</span> &quot;%slow%&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+-------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name               <span class="operator">|</span> <span class="keyword">Value</span>                         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+-------------------------------+</span></span><br><span class="line"><span class="operator">|</span> log_slow_admin_statements   <span class="operator">|</span> OFF                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_slow_extra              <span class="operator">|</span> OFF                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_slow_replica_statements <span class="operator">|</span> OFF                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_slow_slave_statements   <span class="operator">|</span> OFF                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slow_launch_time            <span class="operator">|</span> <span class="number">2</span>                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slow_query_log              <span class="operator">|</span> OFF                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slow_query_log_file         <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>wanko<span class="operator">-</span>slow.log <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+-------------------------------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>上面的路径可以寻找文件位置。</p><p>启用慢查询日志（只是临时生效，如果要永久生效，必须修改配置文件）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">Set</span> <span class="keyword">global</span> slow_query_log <span class="operator">=</span> <span class="keyword">on</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>查看时间阈值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> &quot;%long_query%&quot;;  </span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name   <span class="operator">|</span> <span class="keyword">Value</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> long_query_time <span class="operator">|</span> <span class="number">10.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec) </span><br></pre></td></tr></table></figure><p>调整时间阈值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">Set</span> <span class="keyword">global</span> long_query_time<span class="operator">=</span><span class="number">0.1</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> &quot;%long_query%&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name   <span class="operator">|</span> <span class="keyword">Value</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> long_query_time <span class="operator">|</span> <span class="number">10.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>发现<code>long_query_time</code>还没变，重启 mysql 再执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> &quot;%long_query%&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name   <span class="operator">|</span> <span class="keyword">Value</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span> long_query_time <span class="operator">|</span> <span class="number">0.100000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> &quot;%slow_query_log&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name  <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------+</span></span><br><span class="line"><span class="operator">|</span> slow_query_log <span class="operator">|</span> <span class="keyword">ON</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>查看慢查询 SQL 记录数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">Show</span> <span class="keyword">global</span> status <span class="keyword">like</span> <span class="string">&#x27;%slow_queries&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Slow_queries  <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a>执行计划</h2><h3 id="总揽"><a href="#总揽" class="headerlink" title="总揽"></a>总揽</h3><p><code>EXPLAIN</code>解释 SQL 语句的执行计划，即显示该 SQL 语句是怎么执行的。</p><p><code>DESC</code>命令也可以查看执行计划。</p><p>官方文档： <a href="https://dev.mysql.com/doc/refman/8.0/en/explain-output.html">https://dev.mysql.com/doc/refman/8.0/en/explain-output.html</a></p><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;explain | DESC | DESCRIBE&#125; + SQL</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">member</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">11</span> <span class="operator">|</span>    <span class="number">10.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>通过<code>EXPLAIN</code>，可以分析出以下结果：</p><ul><li>表的读取顺序</li><li>数据读取操作的操作类型</li><li>哪些索引可以使用</li><li>哪些索引被实际使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查询</li></ul><p><code>Explain</code>执行计划的输出内容：</p><table>  <tbody>    <tr>      <td><strong>列</strong></td>      <td><strong>含义</strong></td>    </tr>    <tr>      <td>id</td>      <td>执行计划的 id 标志</td>    </tr>    <tr>      <td>select_type</td>      <td>SELECT 的类型</td>    </tr>    <tr>      <td>table</td>      <td>输出记录的表</td>    </tr>    <tr>      <td>partitions</td>      <td>匹配的分区</td>    </tr>    <tr>      <td>type</td>      <td>JOIN的类型</td>    </tr>    <tr>      <td>possible_keys</td>      <td>优化器可能选择的索引</td>    </tr>    <tr>      <td>key</td>      <td>优化器实际选择的索引</td>    </tr>    <tr>      <td>key_len</td>      <td>使用索引的字节长度</td>    </tr>    <tr>      <td>ref</td>      <td>进行比较的索引列</td>    </tr>    <tr>      <td>rows</td>      <td>优化器预估的记录数量</td>    </tr>    <tr>      <td>filtered</td>      <td>根据条件过滤得到的记录的百分比</td>    </tr>    <tr>      <td>extra</td>      <td>额外的显示选项</td>    </tr>  </tbody>  <colgroup>    <col>    <col>  </colgroup></table><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p><img src="https://bu.dusays.com/2024/01/28/65b53dad46658.png" alt="61-51.png"></p><p><img src="https://bu.dusays.com/2024/01/28/65b53dad33790.png" alt="61-52.png"></p><p><img src="https://bu.dusays.com/2024/01/28/65b53dad2eee3.png" alt="61-53.png"></p><h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><p>官方文档： <a href="https://dev.mysql.com/doc/refman/8.0/en/explain-output.html#explain_select_type">https://dev.mysql.com/doc/refman/8.0/en/explain-output.html#explain_select_type</a></p><table>  <tbody>    <tr>      <td><strong>类型</strong></td>      <td><strong>描述</strong></td>    </tr>    <tr>      <td>SIMPLE</td>      <td>简单的 select 查询，查询中不包含子查询或者 UNION</td>    </tr>    <tr>      <td>PRIMARY</td>      <td>查询中若包含任何复杂的子部分，最外层查询则被标记为 PRIMARY</td>    </tr>    <tr>      <td>SUBQUERY</td>      <td>在 SELECT 或 WHERE 列表中包含了子查询</td>    </tr>    <tr>      <td>DERIVED</td>      <td>在 FROM 列表中包含的子查询将被标记为 DERIVED，MySQL 会递归执行这些子查询，把结果放在临时表里。</td>    </tr>    <tr>      <td>UNION</td>      <td>若第二个 SELECT 出现在 UNION 之后，则被标记为 UNION；若 UNION 包含在 FROM 子句的子查询中，外层 SELECT 将被标记为 DERIVED</td>    </tr>    <tr>      <td>UNION RESULT</td>      <td>从 UNION 表获取结果的 SELECT</td>    </tr>  </tbody>  <colgroup>    <col>    <col>  </colgroup></table><p><img src="https://bu.dusays.com/2024/01/28/65b632f68bb15.png" alt="61-54.png"></p><p><img src="https://bu.dusays.com/2024/01/28/65b6333ec99e7.png" alt="61-55.png"></p><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><div class="row"><iframe src="https://drive.google.com/file/d/1nW11NFAyRwTor8qzaa3zxyrz4HanoIX8/preview" style="width:100%; height:550px"></iframe></div><h3 id="possible-keys、key、key-len"><a href="#possible-keys、key、key-len" class="headerlink" title="possible_keys、key、key_len"></a>possible_keys、key、key_len</h3><p>possible_keys：表示查询过程中有可能用到的索引。</p><p>key：实际使用的索引，如果为 NULL ，则没有使用索引。</p><p>key_len：索引字段的最大可能长度。</p><p><img src="https://bu.dusays.com/2024/01/28/65b654d957ffd.png" alt="61-56.png"></p><p><img src="https://bu.dusays.com/2024/01/28/65b654d94ba34.png" alt="61-57.png"></p><p>与组合索引结合的情况：</p><p><img src="https://bu.dusays.com/2024/01/28/65b657e609a04.png" alt="61-58.png"></p><h3 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h3><p>包含不适合在其他列中显示但十分重要的额外信息。</p><table>  <tbody>    <tr>      <td><strong>值</strong></td>      <td><strong>描述</strong></td>    </tr>    <tr>      <td>Using filesort（尽量避免）</td>      <td>mysql 会对数据使用一个外部的排序，而不是按照表内的索引顺序读取。MySQL 中无法利用索引完成的排序操作称为“文件排序”。</td>    </tr>    <tr>      <td>Using temporary（尽量避免）</td>      <td>使用临时表。常见于排序 order by 和分组查询 group by.</td>    </tr>    <tr>      <td>USING index（ok）</td>      <td>使用覆盖索引</td>    </tr>    <tr>      <td>Using where</td>      <td>使用 where 过滤</td>    </tr>    <tr>      <td>Using join buffer</td>      <td>使用连接缓存</td>    </tr>    <tr>      <td>Impossible where</td>      <td>where 子句的值总是 false，不能用来获取任何元组</td>    </tr>  </tbody>  <colgroup>    <col>    <col>  </colgroup></table><h2 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h2><p>有时虽然建立了索引，但优化器并不会选择索引去查找数据，而是进行全表扫描。</p><p>一，对索引列进行运算：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">1</span>;    <span class="operator">/</span><span class="operator">/</span> ok</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t <span class="keyword">where</span> a <span class="operator">+</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">2</span>; <span class="operator">/</span><span class="operator">/</span> 不 ok</span><br></pre></td></tr></table></figure><p>二，组合索引中的情况，见上一张图。</p><p>三，使用不等号，会使索引失效：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> c1 <span class="operator">&lt;&gt;</span> <span class="string">&#x27;wuhan&#x27;</span>;</span><br></pre></td></tr></table></figure><p>考虑等价写法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> c1 <span class="operator">&gt;</span> <span class="string">&#x27;wuhan&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> c1 <span class="operator">&lt;</span> <span class="string">&#x27;wuhan&#x27;</span>;</span><br></pre></td></tr></table></figure><p>四，字符串类型加引号，不加导致索引失效：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> citizen <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> citizen <span class="keyword">where</span> name <span class="operator">=</span> <span class="number">123</span>;</span><br></pre></td></tr></table></figure><p>五，其它。</p><h2 id="实践规范"><a href="#实践规范" class="headerlink" title="实践规范"></a>实践规范</h2><p><strong>尽量使用 InnoDB 存储引擎。</strong><br>解读：<br>支持事务、行级锁、并发性能更好、CPU及内存缓存页优化使得资源利用率更高。</p><p><strong>禁止存储大文件或者大照片。</strong><br>解读：<br>为何要让数据库做它不擅长的事情？大文件和照片存储在文件系统，数据库里存 URI 多好。</p><p><strong>控制单表数据量，单表记录控制在千万级。</strong></p><p><strong>平衡范式与冗余，为提高效率可以牺牲范式设计，冗余数据。</strong></p><p><strong>表必须有主键，例如自增主键，推荐使用 UNSIGNED 整数为主键。</strong><br>解读：</p><ul><li>主键递增，数据行写入可以提高插入性能，可以避免 page 分裂，减少表碎片，提升空间和内存的使用；</li><li>主键要选择较短的数据类型，InnoDB 引擎普通索引都会保存主键的值，较短的数据类型可以有效的减少索引的磁盘空间，提高索引的缓存效率。</li></ul><p><strong>必须把字段定义为<code>NOT NULL</code>并且提供默认值。</strong><br>解读：</p><ul><li>null 的列使索引/索引统计/值比较都更加复杂，对 MySQL 来说更难优化；</li><li>null 这种类型 MySQL 内部需要进行特殊处理，增加数据库处理记录的复杂性；同等条件下，表中有较多空字段的时候，数据库的处理性能会降低很多；</li><li>null 值需要更多的存储空，无论是表还是索引中每行中的 null 的列都需要额外的空间来标识；</li><li>对 null 的处理时候，只能采用 is null 或 is not null，而不能采用 =、in、&lt;、&lt;&gt;、!=、not in 这些操作符号。如：where name != ‘shenjian’，如果存在 name 为 null 值的记录，查询结果就不会包含 name 为 null 值的记录。</li></ul><p><strong>禁止使用<code>TEXT</code>、<code>BLOB</code>类型。</strong><br>解读：<br>会浪费更多的磁盘和内存空间，非必要的大量的大字段查询会淘汰掉热数据，导致内存命中率急剧降低，影响数据库性能。</p><p><strong>根据业务区分使用<code>char</code>/<code>varchar</code>。</strong><br>解读：</p><ul><li>字段长度固定，或者长度近似的业务场景，适合使用 char，能够减少碎片，查询性能高；</li><li>字段长度相差较大，或者更新较少的业务场景，适合使用 varchar，能够减少空间。</li></ul><p><strong>单表索引建议控制在 5 个以内。</strong><br>解读：</p><ul><li>互联网高并发业务，太多索引会影响写性能；</li><li>生成执行计划时，如果索引太多，会降低性能，并可能导致 MySQL 选择不到最优索引；</li><li>异常复杂的查询需求，可以选择 ES 等更为适合的方式存储。</li></ul><p><strong>禁止在更新十分频繁、区分度不高的属性上建立索引。</strong><br>解读：</p><ul><li>更新会变更B+树，更新频繁的字段建立索引会大大降低数据库性能；</li><li>【性别】这种区分度不大的属性，建立索引是没有什么意义的，不能有效过滤数据，性能与全表扫描类似。</li></ul><p><strong>建立组合索引，必须把区分度高的字段放在前面。</strong><br>解读：能够更加有效的过滤数据。</p><p><strong>理解组合索引最左前缀原则，避免重复建设索引，如果建立了(a,b,c)，相当于建立了(a), (a,b), (a,b,c) .</strong></p><p><strong>禁止使用<code>SELECT *</code>，只获取必要的字段，需要显示说明列属性。</strong><br>解读：</p><ul><li>读取不需要的列会增加 CPU、IO、内存、网络带宽消耗；</li><li>不能有效的利用覆盖索引；</li><li>使用 SELECT * 容易在增加或者删除字段后出现程序 BUG .</li></ul><p><strong>SQL<code>WHERE</code>条件的顺序不一定需要按照索引的顺序。</strong><br>解读：比如一个联合索引是 name, age，查询的时候 WHERE 条件可以写成 age=10 and name=’张三’。</p><p><img src="https://s2.loli.net/2024/01/29/lZd8UVxG19vXHnI.jpg"></p><p><img src="https://bu.dusays.com/2024/01/29/65b7ade073490.png" alt="61-59.png"></p><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><div class="row"><iframe src="https://drive.google.com/file/d/1SsTDWzQC8p8lnqkvTzLeqlLHD2jcJl6W/preview" style="width:100%; height:550px"></iframe></div><p>注：上面的 PDF 中 <strong>（四）多主一从</strong> 箭头画反了。</p><p>MySQL 主从复制配置流程：</p><div class="row"><iframe src="https://drive.google.com/file/d/1tvU7DJ8yZDycVRuHtVxvBk8pixB2E4xP/preview" style="width:100%; height:550px"></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;数据库学习笔记。&lt;/p&gt;
&lt;h2 id=&quot;数据库的概念、分类&quot;&gt;&lt;a href=&quot;#数据库的概念、分类&quot; class=&quot;headerlink&quot; title=&quot;数据库的概念、分类&quot;&gt;&lt;/a&gt;数据库的概念、分类&lt;/h2&gt;&lt;p&gt;数据库的引入：&lt;br&gt;存储数据的结构或方式&lt;/p&gt;
</summary>
      
    
    
    
    <category term="计算机" scheme="https://loveofpeach.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="MySQL" scheme="https://loveofpeach.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>linux 基础</title>
    <link href="https://loveofpeach.github.io/posts/2259c81e.html"/>
    <id>https://loveofpeach.github.io/posts/2259c81e.html</id>
    <published>2024-01-01T11:17:08.000Z</published>
    <updated>2024-01-08T09:43:23.240Z</updated>
    
    <content type="html"><![CDATA[<p>在旧电脑上安装了 Ubuntu ，把 Windows 和其他文件一整个扬了的那种，有一种毁天灭地的美。</p><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>windows 有盘符的概念，如C盘，D盘，E盘等等，但是 Linux 没有盘符的概念。</p><p>Linux 的目录结构：所有的目录都是从根目录<code>/</code>开始。</p><p><img src="https://bu.dusays.com/2024/01/03/65955a1662cc1.png" alt="60-1.png"></p><h2 id="cd、pwd、cat"><a href="#cd、pwd、cat" class="headerlink" title="cd、pwd、cat"></a>cd、pwd、cat</h2><p>查看命令的方式，可以使用 <code>man  命令</code>。</p><p><code>pwd</code>命令：print name of current/working directory, 打印当前目录的名字。</p><p><code>.</code>代表当前目录，<code>..</code>代表上一级目录。</p><p>回到上一次的目录 <code>cd -</code></p><p><code>cat</code>命令：concatenate files and print on the standard output, 查看文件内容。<br>对于读小文件而言，是没有问题的，但是当文件的内容非常多的时候，cat起不到应有的作用。</p><h2 id="useradd、userdel"><a href="#useradd、userdel" class="headerlink" title="useradd、userdel"></a>useradd、userdel</h2><p><strong><code>useradd</code>命令</strong>：create a new user or update default new user information, 添加用户的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd test3  //创建的用户属于三无产品，没有密码，在/home目录下面没有对应的文件夹，shell不一样</span><br><span class="line"></span><br><span class="line">sudo  useradd -m  test4  -s /bin/bash  //-m指定了在/home目录创建对应文件夹 -s指定shell类型</span><br><span class="line"></span><br><span class="line">//给test4创建密码</span><br><span class="line">sudo passwd test4</span><br><span class="line"></span><br><span class="line">//账号切换的命令</span><br><span class="line">su  test4  #su + 账号名字</span><br><span class="line"></span><br><span class="line">用户切换的时候，展现出来的就是一个栈结构，先进后出。</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/ibk055Ku4LIBxz" alt="60-2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">wangdao@wangdao:~$ cat /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">.....</span><br><span class="line">gdm:x:121:125:Gnome Display Manager:/var/lib/gdm3:/bin/false</span><br><span class="line">wangdao:x:1000:1000:wangdao,,,:/home/wangdao:/bin/bash</span><br><span class="line">sshd:x:122:65534::/run/sshd:/usr/sbin/nologin</span><br><span class="line">mysql:x:123:127:MySQL Server,,,:/nonexistent:/bin/false</span><br><span class="line">test:x:1001:1001::/home/test:/bin/bash</span><br><span class="line">test2:x:1002:1002::/home/test2:/bin/sh</span><br><span class="line">test3:x:1003:1003::/home/test3:/bin/sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wangdao:x:1000:1000:wangdao,,,:/home/wangdao:/bin/bash</span><br><span class="line">test3:x:1003:1003::/home/test3:/bin/sh</span><br><span class="line"></span><br><span class="line">冒号是分隔符</span><br><span class="line">用户名  密码（x替代）  uid（用户id） gid（group id，组id）  用户对应的绝对路径  shell类型</span><br><span class="line">0  root    用户</span><br><span class="line">1~1000     系统用户</span><br><span class="line">1000之后    普通用户</span><br></pre></td></tr></table></figure><p><strong>注意：为了保证系统的安全性，不允许root用户直接进行登录。（root用户都是有的，因此知道账号）</strong></p><p><code>userdel</code>命令：delete a user account and related files, 删除用户以及用户所对应的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//-r选项可以删除用户以及用户对应的在/home下的文件夹，如果不加-r,就只会在/etc/passwd下面删除账号，不会删除/home的文件夹</span><br><span class="line">wangdao@wangdao:~$ sudo userdel test5 -r</span><br><span class="line">userdel: test5 mail spool (/var/mail/test5) not found</span><br></pre></td></tr></table></figure><h2 id="目录的创建与删除、tree"><a href="#目录的创建与删除、tree" class="headerlink" title="目录的创建与删除、tree"></a>目录的创建与删除、tree</h2><p><code>mkdir</code>命令：make directories, 创建文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir 20221230   //创建目录</span><br><span class="line">mkdir -p dir3/dir4/dir5 //创建多级目录可以加上-p,或者可以一级一级的创建</span><br></pre></td></tr></table></figure><p><code>rmdir</code>命令：remove empty directories, 删除空目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//如果目录不是空的，可以先进到内层目录，然后一级一级空目录的进行删除</span><br><span class="line">rmdir  dir1  //是空目录就可以直接删除</span><br><span class="line">rmdir dir1  //如果dir1里面还有目录就需要先进去，在一级一级删除</span><br></pre></td></tr></table></figure><p><code>tree</code>命令：打印目录的结构（安装与使用）：</p><p><img src="https://bu.dusays.com/2024/01/04/6596b357ca76a.png" alt="60-3.png"></p><h2 id="文件的创建"><a href="#文件的创建" class="headerlink" title="文件的创建"></a>文件的创建</h2><p>文件的创建命令：<code>touch</code>、<code>echo</code>、<code>cat</code>、<code>vi</code>/<code>vim</code></p><p><code>touch</code>：change file timestamps 改变时间戳（1970.1.1 0:0:0） ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch file   //可以创建空文件</span><br></pre></td></tr></table></figure><p><code>echo</code>: display a line of text 回音命令</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/MNXtX4NQmRpA6b" alt="60-4"></p><p>创建空文件：</p><p><img src="https://bu.dusays.com/2024/01/04/6596b7e12daa9.png" alt="60-5.png"></p><p><code>cat</code>：使用 ctrl+d 进行正常退出，ctrl+c 异常退出（中断）。</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/DBuJtpAiIH_Dfz" alt="60-6"></p><p><code>vi</code>/<code>vim</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim file4  //执行以下步骤，键盘左上角Esc，再按shift + :,再输入wq，再按enter</span><br></pre></td></tr></table></figure><h2 id="文件内容的查看"><a href="#文件内容的查看" class="headerlink" title="文件内容的查看"></a>文件内容的查看</h2><p><code>cat</code>、<code>head</code>、<code>tail</code>、<code>more</code>、<code>less</code></p><ul><li>head - output the first part of files 查看文件的前面一部分内容</li><li>tail - output the last part of files 查看文件的尾部内容</li><li>more - file perusal filter for crt viewing 查看文件里面的内容，可以一行行的查阅。</li><li>less - opposite of more</li></ul><h2 id="文件的拷贝、移动、删除"><a href="#文件的拷贝、移动、删除" class="headerlink" title="文件的拷贝、移动、删除"></a>文件的拷贝、移动、删除</h2><p><code>cp</code> - copy files and directories 拷贝文件或者文件夹（目录）</p><p>普通文件的拷贝：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cp  srcFile  destFile  //cp  源文件   目的文件</span><br><span class="line">cp file1  file2   </span><br><span class="line"></span><br><span class="line">//源文件与目的文件都存在的时候，最好加上-i选项，</span><br><span class="line">//可以进行提示，以免误操作（安全性的问题）</span><br><span class="line">cp -i file1  file2</span><br></pre></td></tr></table></figure><p>普通文件拷贝给目录文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp  file  dir</span><br><span class="line"></span><br><span class="line">如果dir中有file文件，就会直接覆盖；</span><br><span class="line">如果dir中没有file文件，就会创建一个file文件；</span><br><span class="line">如果dir中的file与源文件file的内容不一样，最好还是继续加上-i选项。</span><br></pre></td></tr></table></figure><p>目录拷贝给目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp  -r  dir1  dir2  // -r 表明这个拷贝过程是递归的</span><br></pre></td></tr></table></figure><p><code>mv</code> - move (rename) files</p><p>可以移动普通文件，也可以移动目录文件。<br>“文件”是泛指。在 Linux 中，一切皆文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv  源文件  目的文件   </span><br><span class="line">// mv进行移动的时候，源文件会被删除</span><br><span class="line">// mv也有常用的 -i -f 选项</span><br></pre></td></tr></table></figure><p><code>rm</code> - remove files or directories</p><p>删除普通文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm  file</span><br></pre></td></tr></table></figure><p>删除目录文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm  -fr dir</span><br><span class="line">//-f 是强制的意思，-r 是递归的意思</span><br></pre></td></tr></table></figure><p>删除所有的文件（普通文件、目录文件）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -fr  *</span><br><span class="line">//*星号是一个通配符，代表的是所有类型的文件，包括普通文件、目录文件</span><br></pre></td></tr></table></figure><p><strong>注意：<code>rm</code>命令在使用的时候，最好加上<code>-i</code>，可以起提示作用。</strong></p><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p><code>-a</code>选项，显示文件夹下面的所有文件，包括隐藏文件。在 Linux 中，以<code>.</code>开头的文件是隐藏文件。</p><p><code>-l</code>选项，显示文件夹下的文件的具体信息。</p><p><code>-h</code>选项，将文件大小换算成人类可读的。</p><p><img src="https://bu.dusays.com/2024/01/05/6596f0ef830c7.png" alt="60-7.png"></p><p><code>-i</code>选项，将文件对应的结点号展示出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">drwxrwxr-x 3 wangdao wangdao 4.0K 12月 31 10:58 .</span><br><span class="line">drwxrwxr-x 4 wangdao wangdao 4.0K 12月 30 21:13 ..</span><br><span class="line">drwxrwxr-x 2 wangdao wangdao 4.0K 12月 31 10:54 dir1</span><br><span class="line">-rw-rw-r-- 1 wangdao wangdao   12 12月 31 09:00 file</span><br><span class="line">-rw-rw-r-- 1 wangdao wangdao   12 12月 31 11:05 file2</span><br><span class="line">-rw-rw-r-- 1 wangdao wangdao    0 12月 31 10:58 .file3</span><br><span class="line">-rw-rw-r-- 1 wangdao wangdao 4.2M 12月 30 21:17 The_Holy_Bible.txt</span><br><span class="line"></span><br><span class="line">/*----------------------</span><br><span class="line">d rwx rwx r-x</span><br><span class="line">- rw- rw- r--</span><br><span class="line">第一列代表的是文件类型  d目录文件  -普通文件 等等</span><br><span class="line">r  读</span><br><span class="line">w  写</span><br><span class="line">x  可执行</span><br><span class="line">本用户   组用户   其他用户</span><br><span class="line">-----------------------*/</span><br></pre></td></tr></table></figure><h2 id="硬链接与软链接"><a href="#硬链接与软链接" class="headerlink" title="硬链接与软链接"></a>硬链接与软链接</h2><p><code>ln</code> - make links between files</p><p>硬链接的创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln  源文件   目的文件</span><br><span class="line">//源文件是已经存在的文件，目的文件是新创建的</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/y_eIKVhcPZco3N" alt="60-8" title="注意file和file5的 inode 号"></p><p>创建硬链接之后，相当于多创建了一个指向文件的指针。硬链接文件的 inode 号是一样的。修改任何一个文件，都会导致文件的内容发生改变。</p><p>软链接的创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s  源文件  目的文件</span><br></pre></td></tr></table></figure><p>创建软链接之后，相当于对源文件创建了一个快捷方式，源文件与目的文件 inode 号不一样。删除源文件则快捷方式会失效，但删除软链接文件，源文件不受影响。</p><h2 id="chmod、umask"><a href="#chmod、umask" class="headerlink" title="chmod、umask"></a>chmod、umask</h2><p><code>chmod</code> - change file mode bits 改变文件的访问权限</p><p><img src="https://bu.dusays.com/2024/01/05/6597b7259ebac.png" alt="60-9.png"></p><p>文字设定法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">u代表本用户   g代表组用户  o代表其他用户  a代表所有用户</span><br><span class="line">权限：r读权限   w写权限  x执行权限  -代表没有权限</span><br><span class="line">权限的增删  +代表增加权限   -代表去掉权限  =代表赋予某种权限</span><br><span class="line">chmod  u=r,g+r,o=x file7</span><br></pre></td></tr></table></figure><p>例子：</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/1eiYdFfQ0lFSfW" alt="60-10"></p><p>数字设定法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 以下为注释</span><br><span class="line">rwx rwx r-x</span><br><span class="line">111 111 101</span><br><span class="line">7   7   5</span><br><span class="line">2^2 + 2^1 + 2^0 = 7</span><br><span class="line">r = 4</span><br><span class="line">w = 2</span><br><span class="line">x = 1</span><br><span class="line">- = 0</span><br><span class="line">普通文件的权限一般就是664 rw-rw-r--</span><br></pre></td></tr></table></figure><p>用法示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[asdf@www.masswerk.at:2]$ pwd</span><br><span class="line">/home/asdf</span><br><span class="line">[asdf@www.masswerk.at:2]$ echo &quot;hello&quot; &gt; file1</span><br><span class="line">[asdf@www.masswerk.at:2]$ ls</span><br><span class="line">file1</span><br><span class="line">[asdf@www.masswerk.at:2]$ cat file1</span><br><span class="line">hello</span><br><span class="line">[asdf@www.masswerk.at:2]$ ll file1</span><br><span class="line">-rw-r-----  1  asdf      users            5  2024/01/05 23:12:07  file1</span><br><span class="line">[asdf@www.masswerk.at:2]$ chmod 775 file1</span><br><span class="line">[asdf@www.masswerk.at:2]$ ll file1</span><br><span class="line">-rwxrwxr-x  1  asdf      users            5  2024/01/05 23:12:07  file1</span><br></pre></td></tr></table></figure><blockquote><p>以下关于 umask 的内容转载自 <a href="https://www.coorw.com/3210.html">https://www.coorw.com/3210.html</a></p></blockquote><p>在 linux 系统中，我们创建一个新的文件或者目录的时候，这些新的文件或目录都会有默认的访问权限，umask命令与文件和目录的默认访问权限有关。</p><p><code>umask</code>为 Shell 内建命令，用于设置创建文件时的权限掩码。权限掩码由 3 个八进制数字组成，将 777（八进制）减掉权限掩码后，即可得到新建文件的默认权限。</p><p>命令格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umask [-p] [-S] [MODE]</span><br></pre></td></tr></table></figure><p>后不跟任何选项与参数单独执行 <code>umask</code>，则以八进制格式显示当前权限掩码。</p><p>选项说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-p [MODE]</span><br><span class="line">// 以八进制数字形式显示或设置权限掩码。</span><br><span class="line">// 当 MODE 没有提供时，显示当前权限掩码，为默认选项</span><br><span class="line"></span><br><span class="line">-S [MODE]</span><br><span class="line">// 以字符形式显示或设置新建文件的默认权限。</span><br></pre></td></tr></table></figure><p><strong>注意：出于安全的考虑，文件的执行权限不能通过权限掩码来设置，必须手工修改。</strong></p><p>常用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 设置权限掩码并查看</span><br><span class="line"></span><br><span class="line">#设置权限掩码</span><br><span class="line">umask 044</span><br><span class="line"></span><br><span class="line">#查看权限掩码</span><br><span class="line">umask</span><br><span class="line">044</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 以字符形式显示新建文件的默认权限</span><br><span class="line"></span><br><span class="line">umask -S</span><br><span class="line">u=rwx,g=rx,o=rx</span><br></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p><code>find</code>命令：查找文件。</p><p><img src="https://bu.dusays.com/2024/01/06/65982ed6a564e.png" alt="60-11.png"></p><p>按照名字进行查找：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find  路径（绝对路径或相对路径） -name  &quot;文件名字&quot;</span><br><span class="line"></span><br><span class="line">文件名字可以使用通配符</span><br><span class="line">* 代表任意个字符</span><br><span class="line">? 代表任意一个字符</span><br><span class="line">[] 代表一个范围，中括号是数字或字母，也可结合使用</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/gly_CGKT07Ma7-" alt="60-12"></p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>重定向输入<code>&lt;</code>，就是 stdin<br>重定向输出<code>&gt;</code>或<code>1&gt;</code>，就是 stdout<br>重定向的错误输出<code>2&gt;</code>，就是 stderr</p><p><img src="https://bu.dusays.com/2024/01/06/65983aa216bc8.png" alt="60-13.png"></p><p><strong>linux 一切皆文件</strong><br>文件句柄（门把手）<br>文件描述符 fd<br>可以将文件描述符看成是操作文件的指针</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/0X3oMLu-e6tnRi" alt="60-14"></p><p>追加模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;</span><br><span class="line">标准输出的追加，在原有基础上继续追加。</span><br><span class="line">示例：</span><br><span class="line">echo &quot;Fischl&quot; &gt;&gt; file1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2&gt;&gt;</span><br><span class="line">标准错误的追加</span><br></pre></td></tr></table></figure><p>例外：</p><p><img src="https://bu.dusays.com/2024/01/06/65984077834f3.png" alt="60-15.png"></p><h2 id="grep、正则表达式"><a href="#grep、正则表达式" class="headerlink" title="grep、正则表达式"></a>grep、正则表达式</h2><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~$ cat file1</span><br><span class="line">spider223man</span><br><span class="line">batman</span><br><span class="line">wanko@wanko:~$ cat file2</span><br><span class="line">super223man</span><br><span class="line">spider223man</span><br><span class="line">wanko@wanko:~$ grep -rn &quot;spider223man&quot; .</span><br><span class="line">./file2:2:spider223man</span><br><span class="line">./file1:1:spider223man</span><br></pre></td></tr></table></figure><p><code>-r</code>递归；<code>-n</code>显示行号。</p><p>正则表达式：</p><p><img src="https://bu.dusays.com/2024/01/07/659ab5e3bba37.png" alt="60-16.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~$ cat filetst</span><br><span class="line">grep</span><br><span class="line">Grep</span><br><span class="line">sleep</span><br><span class="line">how</span><br><span class="line">what</span><br><span class="line">how are you</span><br><span class="line"></span><br><span class="line">wanko@wanko:~$ grep -nE &quot;e&quot; filetst</span><br><span class="line">1:grep</span><br><span class="line">2:Grep</span><br><span class="line">3:sleep</span><br><span class="line">6:how are you</span><br><span class="line"></span><br><span class="line">wanko@wanko:~$ grep -nE &quot;ee&quot; filetst</span><br><span class="line">3:sleep</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~$ grep -nE &quot;e*&quot; filetst</span><br><span class="line">1:grep</span><br><span class="line">2:Grep</span><br><span class="line">3:sleep</span><br><span class="line">4:how</span><br><span class="line">5:what</span><br><span class="line">6:how are you</span><br><span class="line"></span><br><span class="line">wanko@wanko:~$ grep -nE &quot;ee*&quot; filetst</span><br><span class="line">1:grep</span><br><span class="line">2:Grep</span><br><span class="line">3:sleep</span><br><span class="line">6:how are you</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~$ grep -nE &quot;^s&quot; filetst</span><br><span class="line">3:sleep</span><br><span class="line">wanko@wanko:~$ grep -nE &quot;t$&quot; filetst</span><br><span class="line">5:what</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/VxkAMR9Wc3msK0" alt="60-17"></p><h2 id="vim-的使用"><a href="#vim-的使用" class="headerlink" title="vim 的使用"></a>vim 的使用</h2><blockquote><p>参考： <a href="https://oi-wiki.org/tools/editor/vim/">https://oi-wiki.org/tools/editor/vim/</a></p></blockquote><h3 id="插入模式-insert"><a href="#插入模式-insert" class="headerlink" title="插入模式 (insert)"></a>插入模式 (insert)</h3><p>从普通模式进到编辑模式：</p><ul><li>小写<code>i</code>，光标前插入</li><li>小写<code>a</code>，光标后插入</li><li>大写<code>I</code>，行首插入</li><li>大写<code>A</code>，行尾插入</li><li>小写<code>o</code>，下一行插入</li><li>大写<code>O</code>，上一行插入</li></ul><h3 id="普通模式-normal"><a href="#普通模式-normal" class="headerlink" title="普通模式 (normal)"></a>普通模式 (normal)</h3><p><code>u</code>是撤销的快捷键，作用是撤销上一次对文本的更改。</p><p><code>x</code>用于删除光标后的一个字符。</p><p><code>dd</code>删除一行。</p><p><code>gg</code>跳转到文本首行。</p><p><code>G</code>跳转到文本尾行。</p><p><code>$</code>移动到行尾，<code>^</code>移动到行首。</p><p><code>yy</code>+<code>p</code>：<code>yy</code>复制光标当前所在行，<code>p</code>将内容粘贴到光标的下一行去。</p><p><code>6</code>+<code>G</code>，跳转到第 6 行。</p><p><code>3</code>+<code>j</code>，向下移动 3 行。</p><p><code>ndG</code>：（<code>n</code>是数字）删除第n行到当前行的内容，左闭右闭。</p><h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><p><code>/待查单词</code>：<code>n</code>下一个，<code>N</code>上一个。</p><p><code>set nu</code>：显示行号。</p><p><code>s/待查找项/替换项</code>：默认单行第一个匹配项。</p><p><code>s/待查找项/替换项/g</code>：替换一行里所有的匹配项。</p><p><code>num1,num2s/待查找项/替换项/g</code>：将num1到num2（包含）行的匹配项进行替换。</p><ul><li>例子：<code>2,4s/and/kkk/g</code></li></ul><p><code>%s/待查找项/替换项/g</code>：全文替换。</p><h3 id="可视模式-visual"><a href="#可视模式-visual" class="headerlink" title="可视模式 (visual)"></a>可视模式 (visual)</h3><p>按<code>v</code>进入可视模式，多用于选中区域。按 <code>V</code>进入行可视模式，用于选中行。</p><p>按<code>Ctrl</code>+<code>v</code> 或 <code>Ctrl</code>+<code>q</code>进入块可视模式 (visual block)。</p><p>进入块可视模式后，按<code>I</code>或<code>A</code>进入插入模式（相当于 i 和 a），退出插入模式后对本行所做的改动将被应用到选中的每一行同一位置。常用于批量添加注释。</p><h3 id="安装-vimplus"><a href="#安装-vimplus" class="headerlink" title="安装 vimplus"></a>安装 vimplus</h3><p>没什么好说的： <a href="https://github.com/chxuan/vimplus">https://github.com/chxuan/vimplus</a></p><p>字体下载链接： <a href="https://www.nerdfonts.com/font-downloads">https://www.nerdfonts.com/font-downloads</a></p><p>感觉不咋地，最后还是卸了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在旧电脑上安装了 Ubuntu ，把 Windows 和其他文件一整个扬了的那种，有一种毁天灭地的美。&lt;/p&gt;
&lt;h2 id=&quot;文件系统&quot;&gt;&lt;a href=&quot;#文件系统&quot; class=&quot;headerlink&quot; title=&quot;文件系统&quot;&gt;&lt;/a&gt;文件系统&lt;/h2&gt;&lt;p&gt;win</summary>
      
    
    
    
    <category term="计算机" scheme="https://loveofpeach.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="linux" scheme="https://loveofpeach.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>2023 总结</title>
    <link href="https://loveofpeach.github.io/posts/ccc2b0d8.html"/>
    <id>https://loveofpeach.github.io/posts/ccc2b0d8.html</id>
    <published>2023-12-26T05:37:52.000Z</published>
    <updated>2024-04-21T09:41:07.749Z</updated>
    
    <content type="html"><![CDATA[<p>写总结似乎是个人博客圈的时髦，正好考研告一段落，我也得闲回顾这一整年发生的事。记忆确实是重要的东西，因此想要在还能拂去灰尘，将它们擦拭干净的时候记录下来。</p><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><center><i>你的人生一定会比别人活得麻烦</i></center><center><i>慵懒烦躁的无可救药</i></center><center><i>但那不是因为你有多优秀</i></center><center><i>而是因为你有多软弱</i></center><center><i>你这一辈子都要怀抱着这份软弱活下去</i></center><center><i>但愿你不要把这种麻烦</i></center><center><i>当作自己的生存价值</i></center><p><br></p><p>我还在北京瞎转的时候，总是要挤挤满了人的地铁。地铁上总是座无虚席，抓手也不剩几个，多数人站着只是因为他前后左右的人也是站着的而已。把人的躯干看成秆，脑袋便是穗。这黑色的麦田中，黄底黑字的抓手广告特别惹眼：</p><p><strong>BOSS 直聘 | 站着也能刷 BOSS 直聘了</strong></p><p>这些抓手会一排排地、有序地延伸下去，然后在连接的另一个车厢里拐个弯继续将整个列车串起来。这种景象十分有趣（amusing）：一根巨大的晾衣绳，将整个列车的人都晾了起来，列车起停，人们东倒西歪，就是一阵玄色的麦浪。</p><p>晚上洗完澡后，我一定会经过学校的快递站。这个时候一天的快递件差不多都被取走，员工们会把箱门打开准备明天的工作。</p><p>一排排、一列列、一箱箱的张开不同角度的门。</p><p>这些层层叠叠的形式将一丝诙谐蕴含其中，终于在大学生活快要结束的时候，为我带来了救赎。</p><blockquote><p>痛苦在一颗心中越积越多，就会在晴朗的一天像干草一样燃烧起来，放出一团无比欢乐的烈焰而统统燃尽。</p></blockquote><h2 id="祖母去世"><a href="#祖母去世" class="headerlink" title="祖母去世"></a>祖母去世</h2><p>祖母死了。</p><p>疫情放开后的年初，她在一个狂风大作的凌晨死了，我开车赶过去的时候，床头一个手机开着网易云音乐，已经在放般若波罗蜜多心经了（这玩意似乎不是死人的时候放的），一个有经验的约莫六十岁的男人扯掉她的造瘘袋，手忙脚乱地联系各种各样的人。</p><p>守夜那天晚上，人来之前，我和 F 及他的兄弟也没什么可说的。F 又扯到 M 的事上，当着祖母的面，最后得出结论：“你们要是跟和 M 在一块混的男的接触，就是认贼作父！”</p><p>丧事要到拂晓的时候才开始，在那之前，我睡在楼上的沙发上，试图回忆祖母这个概念。然而我并未与祖母生活过，以前的接触只能算是跟随 F 的探望，因此只能通过身边的人间接地了解。</p><p>M 和婆婆关系并不紧张，至少从我的视角来看是这样，这点似乎和很多家庭不一样。这位婆婆，也就是我的祖母，过的并不轻松。她嫁给了 G ，并给 G 生了三个儿子。G 是识字的，在 C 市尤其是农村，这个年纪的人识字就超过了很多人。有次我在看《水浒》，他凑过脑袋来把书合上看了眼封面，立即煞有介事地说：“少不看水浒…”。G 壮年时断断续续总有疾病缠身，因此很多事情都落在祖母的肩上。据说 G 曾靠着拼爹谋过一个好职位，看生产队的仓库，后来失了火，G 也就丢了这个工作。</p><p>当时 G 的家里穷，只能供一个上学，于是就让 F 去，最后读了个 C 市的二本师范，回到镇上教书。F 的青壮年时代，正是中国经济野蛮生长，遍地机会的时代。F 曾无数次和我吹嘘自己本来可以怎样：如果当初去了南京怎样，如果当时继续给镇上人家盖小二层怎样怎样。</p><p>F 的两个兄弟，其中一个老实巴交，因为不会用滴滴只能打上百块的出租车，最近的爱好是骂蓬佩奥，但幸运的是他的女儿比较厉害，初中的时候考过全县前几名，不过最近似乎厌学辍学中。F 的另一个兄弟 S 属于在深圳能当三和大神的水平，但是还要分出他两个哥哥的金钱和精力。最后 S 也离婚了，抛弃了自己的女儿，极少来往，后来又谈了两个，最近的一个自带女儿，他们的家庭教育也很崇尚威胁恐吓，甚至对外人也毫无自制，S 问 B 和我：“你们两个打一架，谁打的过谁？”，B 自谦地一笑：“那应该是我打的过”。这个没有血缘关系的小妹妹似乎很乐于见到我，喜欢往我身上扑，但是我对她的未来很悲观。某次年关，F 接到 S 的电话，立刻暴怒，厉声呵斥了一通，原来是 S 没钱过年，找 F 借点，挂掉电话后 F 又教训了我一番。</p><p>这些零碎的琐事，祖母都不是局外人。小学的时候，F 有一天晚上回来很晚（或者是没回来？记不清了），M 歇斯底里地怒了，将自己和 F 的照片一撕两半，大吵了一架，并且在电话里向婆婆哭诉。第二天我起来的时候，客厅桌上的玻璃碎了。</p><p>她在最后一年，还拉着我的手说：“去把你妈妈带回来好不好…你去求她，一定有用的…”，她落下泪来，一时没有主张。</p><p>是的，要失读者的望了，祖母并非一个可以向其寻求智慧的人，但情感上也无法苛求她做到更多。</p><p>疫情放开后，G 和祖母先后感染，G 痊愈后先回到家中，而祖母仍在医院。祖母回来之前，G 一直念叨，回来之后，就又回到之前的打骂状态——即使 G 是个瘫痪在床多年一直靠祖母照顾的人。</p><p>F 拒绝让 M 参加葬礼。</p><p>车队敲锣打鼓、惊天动地地出发，祖母的儿子们手执两个白色的纸棍，而孙辈则一红一白，这里的寓意似乎是，孙辈倒也不必过于悲伤，还须保留一点积极的心态。</p><p>火葬场业务繁忙，大概是由于无准备的疫情放开，死人太多的缘故，那阵子做白事的都赚翻了。</p><p>期间，只有两人因祖母的死难过，一个 G ，一个是 S ，怀念她的竟是两个最不肖的。G 瘫在楼上的床上大喊大叫要求见祖母一面，但是显然他的儿子们并不愿将他从二楼搬到一楼见一面祖母。</p><h2 id="最后的大学半年"><a href="#最后的大学半年" class="headerlink" title="最后的大学半年"></a>最后的大学半年</h2><p>新学期，和室友们去爬泰山。某个室友较胖被落在后面，但还是要坚持全程爬上山祈愿，我只好留在后面慢悠悠的走。</p><p>山顶很冷。</p><p>实习和毕业之前已经提过。</p><p>说实话，考研一战的时候我并无上岸的预期，因为当时能不能毕业都是问题。大三下学期，大家的选修课学分已经修满的时候，我大概只修了四五分，此外还有很多必修学分没有补上，另外大四一整年都在重修体育课。这实在是大学摆烂的恶果。</p><p>不过确有两个值得一提的课程，Python 和离散数学。Python 是选修课，离散数学是必修，因为当时有门必修课需要重修，但是课程改革后这门课被毙掉了，只能选一个外系的必修课替代，于是就选了离散数学。两门课的作业都被老师作为了优秀示范。Python 最后是优秀，离散数学最后拿了 80+/100 ，虽然没有预期的 90+ ，但对外系学生似乎也不错了：</p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/-luTUSJGESnTuX" alt="59-1"></p><p>这两门课让我捡起了一点信心，终于下定决心要准备考研了。虽然在之后被证明只是叶公好龙罢了。</p><h2 id="游戏戒退"><a href="#游戏戒退" class="headerlink" title="游戏戒退"></a>游戏戒退</h2><p>大学里摆烂的时候干什么了？主要是碎片化的信息和番剧游戏，另外读了可怜的十几本书大概。</p><p>碎片化信息和碎片化娱乐是注意力杀手，以至于到了后期我甚至无法看一个二十分钟的番剧视频——是的，哪怕是以娱乐为目的的视频，二十分钟集中注意力对我都是痛苦的。</p><p>我意识到需要改变，但必须“徐徐图之”，最后使用番剧和电影代替了碎片化信息的生态位。</p><p>按游玩时间排序，大概是王者荣耀，原神，Minecraft，和平精英，红警，以及和室友玩的战地之类的。王者是大学开始玩的，准备初试的时候还特地上王者号看了一眼邮件《再相见，真好！》，告诉我玩了 3300 个小时，并附 20 铭文碎片。</p><p>一战的时候游戏还没退，真就考研氛围组了，这次无论如何也要退了。</p><p>首先是王者荣耀，退这个坑应该是玩的腻了。虽然大学早期的时候我经常一个人单排，这个要是对匹配算法不服气的话是会上头的。但是后期基本都是和室友一块玩，一个人玩没意思，颇有点“年轻人的电子扑克”的意思，毕业之后自然退坑。</p><p>原神大概是今年四五月退的，退坑的方式比较奇怪。本想着退几天先，但在这没玩的几天里，我感觉自己与那边世界的联系愈发稀少，那里的时间变成一种与我无关的缓慢流动的黏稠物。但同时，主线和重要任务我还是随时可以体验，不去推进就永远在那里，世界好像被冻结封存起来。我就在这样一种破罐子破摔同时又有恃无恐的心态下弃游了。</p><p>Minecraft 的退坑就非常意外了，因为官方启动器出锅，我就退坑了。虽然了解到可以用第三方，例如 HMCL 之类的，但还是趁势退坑了。</p><p>枪战游戏苦手，没有室友带就不玩了，本身也没太大兴致。</p><p>崩铁甚至限时活动都没有，我就每个版本登录领一下十连抽。</p><p>另外还有一个崩坏三，这个主线差不多过了就退坑了。</p><p>如果硬要让我总结在游戏上的得失，其实也没有一个言之凿凿的结论，很难说没有游戏我就会变得更好或是更坏。游戏是转移注意力的方式，让我在思想上没有准备的时候对痛苦麻木一点。</p><h2 id="生日"><a href="#生日" class="headerlink" title="生日"></a>生日</h2><p>M 重组了自己的家庭，我也因此多了一个异父异母的亲妹妹。</p><p>我称她为“领域外的妹妹”，当然，只是我暗自这么称呼的，也许有机会可以征求她的意见。这么叫也许是为了将“异父异母的亲妹妹”这个名号简化的可爱一点。本博客的<a href="https://loveofpeach.github.io/posts/db1a1b2e.html"> 双曲线讲义 </a>其实就是领妹中考前给她写的讲义。</p><p>今年生日的时候，M 打电话让我和他们一家出去吃饭，打开车门的时候，领妹就坐在里面。</p><p>我们之前在我外婆家（可能现在也算是她外婆？）见过一面。她个子不高，留着齐肩短发，白色上衣，那时她正把床当桌子，蹲着写语文题。这就是一张很普通的现代床，中国很多家庭都有这种款式，只不过没有席梦思。外婆家是农村典型的三间两厨，几经装修，很多老物件都丢掉了。比如正屋进门就能看见的，拿着寿桃、额头硕大的寿星像，上面写着繁体的“福如东海水，寿比南山松”，另外其两侧八列（如果没记错的话）长幅挂画，上面大概是春夏秋冬，梅兰竹菊之类的。小时候正屋里面的长桌上还有一款古式的钟，每到正午就会 duang~ 地响几声，这个钟貌似还保存着。长桌的下面有一个小缸，以前每年外婆家都会做点豆瓣酱，我至今还记得自己掀开盖子闻豆瓣酱，回过头来发现外公半裸着上身，一手撑在草席上，一手摇着蒲扇看着我的神情。最后，还有一张中式的床，这张床现在仍在正屋西间使用，上面挂着偏粉色的红色的蚊帐，正对着长了两个角的老式电视机。不过，现在东间有了一个新的电视机。</p><p><img src="https://pic1.zhimg.com/80/v2-e25f3693f89ebf81c97cf1b994085be0_1440w.webp" alt="59-1dot5.webp" title="类似于这种"></p><p>领妹坐在车后座，前面是 M 和她的男人。</p><p>领妹还是留着一样的短发。这次见面，已是她中考结束之后，高中之前军训的日子。领妹是请假出来的，她披着一件雪白的外套，衬着里面墨绿的军训衣，车窗外的阳光照亮她的脖子，胸脯微微隆起形成好看的曲线，她的下身还穿着军训裤，我不记得她是否戴着眼镜。</p><p>沉默。</p><p>我把她放在车上的帽子往她那靠了靠。</p><p>“大学里就能攒一套房了吗？”领妹看了我一下，然后回过去稍微低下头，很认真地疑惑道。</p><p>“怎么可能。”</p><p>此时我并没有和 F 和 B 住在一起。我住在 C 市相对郊区的地方，F 和 B 住在 C 市的某个镇上。否则他们也不能正大光明地开着车来小区带我。</p><p>“那你房子哪来的呀？”</p><p>我稍加思索了一番，房子是 F 和 M 的，将来是留给 B 的，说 F 买的也不好（因为必然会加上称谓），说 M 买的也不好（考虑到领妹），说 F 和 M 一起买的也不合适（考虑到前面的司机）。就和领妹说，家里买的呗。</p><p>大一睡前扯淡的时候，当时还单身的室友表达了强烈的脱单欲望，于是我献计：大伙合起来到鹤岗买个超迷你的房子，然后在校园里找对象的时候就说自己已经买了房，没向家里要钱 balabala… </p><p>“嗯，我还以为大学里就能攒起一套房了呢。我觉得我应该攒不下来。”</p><p>我们还在到处溜达找吃饭的地的时候，M 和她的男人被一个热情的大姐拦下了，于是我们就去吃烤鱼。</p><p>四人桌，M 坐在我的左边，领妹坐在我的对面。我一般不在餐桌上找话题，于是这个艰巨的任务就交给两位社会人士了。</p><p>“你妹说以后人们可能会吃丸子，就沙发上一躺，吃着丸子。”</p><p>“毒品？”</p><p>“不是。就是把各种营养啊，各种味道的肉啊蔬菜之类的东西混在一起做成丸子。以后人们只要吃丸子就好了，很方便，也节省时间。”</p><p>“那不就是狗粮？”</p><p>“哈哈哈。。。确实嗷，那样就和狗粮差不多。”</p><p>我们吃的很慢，中途还因为水不断蒸发汤越来越咸加了几次汤。M 知道我喜欢吃鱼，但不知道唯独烤鱼除外——也许生鱼片也要排除，虽然我没吃过。总之，我们吃完就离开了。自动扶梯上，我和领妹间错一阶站在后面，我们现在一样高了。这时候，我就想，她一定要拿手比划过来，比划我们的身高了。她果然难掩笑意地把手伸过来，从自己的额头处水平地划到我的额头前方，露出小小的得意神情。</p><p>分别的时候，领妹坐在车里，探出视线来朝我摆手：“生日快乐。”</p><p>F 并未记得我的生日。</p><h2 id="二战的准备和失利"><a href="#二战的准备和失利" class="headerlink" title="二战的准备和失利"></a>二战的准备和失利</h2><p>一刻也没有为毕业多愁善感，接下来赶到战场的是——考研二战！</p><p>第一个月无论如何都睡不着，辗转反侧之后还是去医院开了艾司唑仑。这也为最后的失利埋下伏笔。</p><center><table>  <tbody>    <tr>      <td></td>      <td>态度</td>      <td>方法</td>      <td>信息差</td>      <td>知识</td>    </tr>    <tr>      <td>一战</td>      <td>敷衍</td>      <td>无</td>      <td>巨大</td>      <td>没学完</td>    </tr>    <tr>      <td>二战</td>      <td>勉强</td>      <td>有</td>      <td>仍有</td>      <td>充分</td>    </tr>  </tbody>  <colgroup>    <col style="width: 20%;">    <col style="width: 20%;">    <col style="width: 20%;">    <col style="width: 20%;">    <col style="width: 20%;">  </colgroup></table></center><p>自认知识准备还是充分的，李林模拟卷最后130，140的样子，张宇的，超越的卷子，做的结果也都在博客里了。</p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/G89VUf64Z0SQuk" alt="59-2"></p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/UKTo2Tqr5wcxL7" alt="59-3"></p><p>考数学的前一天晚上硬是睡不着觉，或许是几年前信息竞赛的时候被 F 打鼾弄得睡不着觉，留下了心理阴影，吃了 2.5 粒安眠药，平时只吃一颗。睡倒是睡着了，考试的时候晕晕乎乎，出现了很多 2^3=9 这类错误，平时能做出来的题都没有做出来。本来自己也是对自己千叮咛万嘱咐，第一问没做出来有时候不妨碍做第二问，但考场上就是没看。这样下来不知道能有几分。</p><p>专业课按 408 准备的，那么多功夫全白费了，到考前最后一天才发现咸鱼上有卖往年试题的。操作系统部分应该没什么，算法题我按自己的写法，不合题目要求也不知道能拿几分。这里确是输给信息差了。</p><p>政治没法估分，英语应该还是正常水平。</p><p>最后的结局恐怕能捞到一个非全就不错了。</p><p>去自习室的路上有一段路，路面上划了很多线，我骑着自行车路过的时候常常压着这些线玩，想象两边都是悬崖。</p><p>某夜十一点，等滴滴打车的时候，路灯下，十二月的雪洋洋洒洒：我竟从盛夏学到了大雪。</p><h2 id="第一台电脑"><a href="#第一台电脑" class="headerlink" title="第一台电脑"></a>第一台电脑</h2><p>是的，考研后买了我的第一台电脑。之前大学里都是用的 B 的二手电脑。</p><p>虽然不抱希望，还是要准备复试的。旧电脑开机都很卡顿了。</p><p>Redmibook，不到 5k.</p><h2 id="书，影视"><a href="#书，影视" class="headerlink" title="书，影视"></a>书，影视</h2><p>报菜名环节，只说一些能想起来的，不一定全。</p><p>书：</p><center><table>  <tbody>    <tr>      <td>书名</td>      <td>都柏林人</td>      <td>小径分岔的花园</td>      <td>对联趣谈</td>    </tr>  </tbody>  <colgroup>    <col style="width: 18.8889%;">    <col style="width: 23.6667%;">    <col style="width: 32.4444%;">    <col style="width: 25%;">  </colgroup></table></center><p>动漫：</p><center><table>  <tbody>    <tr>      <td>番名</td>      <td>备注</td>      <td>番名</td>      <td>备注</td>    </tr>    <tr>      <td>物语系列全部</td>      <td>按时间顺序二刷</td>      <td>龙与虎</td>      <td>二刷</td>    </tr>    <tr>      <td>名侦探柯南</td>      <td>主线部分</td>      <td>我推的孩子</td>      <td>有马佳奈谢谢</td>    </tr>    <tr>      <td>Spy Family</td>      <td>part2 中间弃之</td>      <td>灰色的果实</td>      <td></td>    </tr>    <tr>      <td>灰色的迷宫</td>      <td></td>      <td>灰色的乐园</td>      <td>打戏燃</td>    </tr>    <tr>      <td>药屋少女的呢喃</td>      <td>穿越到后宫的现代人</td>      <td>夏日重现</td>      <td>剧情节奏优秀</td>    </tr>    <tr>      <td>AI 电子基因</td>      <td>看4集弃了</td>      <td>变态王子与不笑猫</td>      <td>还行</td>    </tr>    <tr>      <td>四叠半神话大系</td>      <td>二刷</td>      <td>四叠半时光机布鲁斯</td>      <td>二刷</td>    </tr>  </tbody>  <colgroup>    <col>    <col>    <col>    <col>  </colgroup></table></center><p>电影 &amp; 剧：</p><center><table>  <tbody>    <tr>      <td>电影名</td>      <td>备注</td>      <td>电影名</td>      <td>备注</td>    </tr>    <tr>      <td>壳中少女（压缩）</td>      <td>好看</td>      <td>壳中少女（燃烧）</td>      <td>好看</td>    </tr>    <tr>      <td>壳中少女（排气）</td>      <td>好看</td>      <td>末代皇帝</td>      <td>好看</td>    </tr>    <tr>      <td>唐红的恋歌</td>      <td>也就那样</td>      <td>零的执行人</td>      <td>也就那样</td>    </tr>    <tr>      <td>绯色的子弹</td>      <td>也就那样</td>      <td>万圣夜的新娘</td>      <td>也就那样</td>    </tr>    <tr>      <td>黑铁的鱼影</td>      <td>柯哀狂喜</td>      <td>流浪地球</td>      <td>（第二部）</td>    </tr>    <tr>      <td>利兹与青鸟</td>      <td>非常好看</td>      <td>想哭的我戴上<br>了猫的面具</td>      <td>至今已觉不新鲜</td>    </tr>    <tr>      <td>我不是药王</td>      <td>嗯</td>      <td>处女泉</td>      <td></td>    </tr>    <tr>      <td>犬王</td>      <td>银幕上的摇滚</td>      <td>铃芽之旅</td>      <td>一般</td>    </tr>    <tr>      <td>龙猫</td>      <td>挺好</td>      <td>魔女宅急便</td>      <td>好看</td>    </tr>    <tr>      <td>起风了</td>      <td></td>      <td>闪电侠一、二</td>      <td>垃圾</td>    </tr>    <tr>      <td>江户川柯南失踪事件～史上最糟糕的两天～</td>      <td>挺好</td>      <td>盗钥匙的方法</td>      <td>挺好</td>    </tr>    <tr>      <td>美国商业大亨传奇</td>      <td>挺好</td>      <td>别当欧尼酱了</td>      <td>还行</td>    </tr>    <tr>      <td>致深爱你的那个我</td>      <td>好看</td>      <td>致我深爱的每个你</td>      <td>好看</td>    </tr>  </tbody>  <colgroup>    <col style="width: 22%;">    <col style="width: 28%;">    <col style="width: 22%;">    <col style="width: 28%;">  </colgroup></table></center><blockquote><p>战场原：阿良良木君还真在处理什么事情，而且这次看来还是相当棘手的。我虽然没有那个时候的经历，但从文字上看，这次应该超过了春假时的程度。<br>羽川翼：果然你也这么想？<br>战场原：嗯，但是呢，从特意发这种信息这一点来看还算有所长进。以前的他可是只会盯着眼前呢。<br>羽川翼：是啊。<br>战场原：不行，电话打不通。不过，他毕竟是男孩子，也不用那么担心。好吧，等他回来看我跟他炫耀和羽川同学一起洗澡的事。<br>羽川翼：这也谈不上有什么效果吧。<br>战场原：就说羽川同学的身体曲线是这样…这里又是这样…如何？<br>羽川翼：不许用手比比划划的！<br>战场原：但这么一来，你遇到的那只虎只能靠我们自己对付了。<br>羽川翼：虎？但是那只虎已经…<br>战场原：嗯，我也曾想过那老虎莫非就是火灾的原因。难道不是？火灾的原因已经调查清楚了么？<br>羽川翼：不，那个还不清楚…<br>战场原：是吗，那可能是我「抢跑」了。</p></blockquote><h2 id="2023-的结束"><a href="#2023-的结束" class="headerlink" title="2023 的结束"></a>2023 的结束</h2><p>高中同学 Z 早上微信发消息出去搓一顿，可惜我作息颠倒，回复时已是下午，此君明日还须上班。</p><p>月底，和领妹一家外去搓了一顿，而后去超市买东西。领妹推着购物车玩很像我之前，加速，再把整个人重心压在推车上。我实在也没什么可买的，最后拿了丹麦的曲奇饼和不二家的棒棒糖，回到住所后也不知道为啥要买这个棒棒糖。</p><p>Well, Let’s call it a year.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写总结似乎是个人博客圈的时髦，正好考研告一段落，我也得闲回顾这一整年发生的事。记忆确实是重要的东西，因此想要在还能拂去灰尘，将它们擦拭干净的时候记录下来。&lt;/p&gt;
&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;</summary>
      
    
    
    
    <category term="生活" scheme="https://loveofpeach.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>一类问题的新解法</title>
    <link href="https://loveofpeach.github.io/posts/f06381e8.html"/>
    <id>https://loveofpeach.github.io/posts/f06381e8.html</id>
    <published>2023-12-09T15:13:01.000Z</published>
    <updated>2023-12-25T09:07:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>一种考研数学中某类题型的新解法，与其背后的几何意义有关。目前各平台的考研博主中均未见到此类解法。</p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>若 $f(x)$ 在区间 $[a,b]$ 上连续，则积分上限的函数 $\Phi(x)=\int_{a}^{x} f(x)\, {\rm d}x$ 在 $[a,b]$ 上可导：</p><script type="math/tex; mode=display">\Phi'(x)=\frac{\rm d} { {\rm d}x}\int_a^x f(t){\rm d}t=f(x) \quad (x\in [a,b])</script><p>一般地，若 $f(t)$ 连续，$g(x)$ 和 $h(x)$ 可导，则：</p><script type="math/tex; mode=display">\frac{\rm d} { {\rm d}x}\int_{g(x)}^{h(x)}f(t){\rm d}t=f[h(x)]h'(x)-f[g(x)]g'(x)</script><p>上式可形成几何直观：</p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/_SlyQL8kzBX8PO" alt="58-1"></p><p>这里 $h$ 和 $g$ 可理解为从 $x\rightarrow t$ 的映射。积分变量为 $t$ ，不妨设 $g(x)&lt;h(x)$ ，对 $f(t)$ 从 $g(x)$ 到 $h(x)$ 积分，$\int_{g(x)}^{h(x)}f(t){\rm d}t$ 的几何意义即是上图中的阴影面积。那么 $\frac{ {\rm d} } { {\rm d}x}\int_{g(x)}^{h(x)}f(t){\rm d}t$即是阴影面积对 $x$ 的变化率。为此，我们考察当 $x$ 获得一个很小的增量 $\Delta x$ 时，阴影面积将如何变化：</p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/3uP9q5TP-67ltD" alt="58-2"></p><p>显然，阴影面积的变化为上图中紫色和绿色曲边梯形的面积变化（可正可负）之和。</p><p>当 $x$ 获得增量 $\Delta x$ 时，$h(x)$ 的增量为：</p><script type="math/tex; mode=display">\Delta y=h'(x)\Delta x+o(h'(x)\Delta x)</script><p>当 $\Delta y$ 很小时，绿色曲边梯形的高可用 $f[h(x)]$ 替代。</p><p>因此绿色面积为：</p><script type="math/tex; mode=display">f[h(x)][h'(x)\Delta x+o(h'(x)\Delta x)]</script><p>同理紫色面积为：</p><script type="math/tex; mode=display">f[g(x)][g'(x)\Delta x+o(g'(x)\Delta x)]</script><p>因为 $\int_{g(x)}^{h(x)}f(t){\rm d}t$ 是从 $g(x)$ 积到 $h(x)$ ，所以绿色面积<strong>贡献</strong>为正，紫色为负。当然，也可以从 N-L 公式的角度理解，记 $f(t)$ 原函数为 $F(t)$ ，则 $\int_{g(x)}^{h(x)}f(t){\rm d}t=[F(t)]_{g(x)}^{h(x)}$ ，由此可知紫色前应当加个负号：</p><script type="math/tex; mode=display">\begin{aligned}\Delta \int_{g(x)}^{h(x)}f(t){\rm d}t & = f[h(x)][h'(x)\Delta x+o(h'(x)\Delta x)] \\     & - f[g(x)][g'(x)\Delta x+o(g'(x)\Delta x)] \\\end{aligned}</script><p>对上式两边同除 $\Delta x$ ，再令 $\Delta x \rightarrow 0$ ，即得：</p><script type="math/tex; mode=display">\frac{ {\rm d} } { {\rm d}x}\int_{g(x)}^{h(x)}f(t){\rm d}t=f[h(x)]h'(x)-f[g(x)]g'(x)</script><h2 id="三维情形的拓展"><a href="#三维情形的拓展" class="headerlink" title="三维情形的拓展"></a>三维情形的拓展</h2><p>三维的情形其实我在 <a href="https://loveofpeach.github.io/posts/12839668.html">几何角度下的一个公式</a> 这篇文章中已经介绍了。</p><p>当时是我初学这块内容时，觉得同济书的证明过于吓人，试图从几何角度看看能不能建立直观，于是诞生了上面那篇文章。至于为什么是初学？因为大一疫情的时候在家摆烂，二重积分之后的高数一丁点没听。还好老师捞了一把没有挂高数。</p><h2 id="应试中的应用"><a href="#应试中的应用" class="headerlink" title="应试中的应用"></a>应试中的应用</h2><p>这类题目的特征是，它往往会要你对一个看起来不太能用求导做的积分做一些蜜汁操作。按照上面的思路，我们完全可以霸王硬求导 (′▽`〃)</p><p>是的，这里有一个 <a href="https://yanwenzi.fuhaoku.net/">颜文字网站</a> ，我并不会真的在心里默默地记了很多颜文字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">QAQ</span><br><span class="line">QwQ</span><br><span class="line">qwq</span><br><span class="line">qaq</span><br><span class="line">=_=</span><br><span class="line">:)</span><br></pre></td></tr></table></figure><h3 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h3><p>先来看一道典型例题。你可以在 <a href="https://loveofpeach.github.io/posts/55931ee1.html">数二强化</a> 下的<strong>超越模拟题23</strong> pdf 第四页找到它。</p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/9M8xf1ZlWt9Loz" alt="58-3"></p><p>看到这个形式，很容易想到洛必达：分母是 t 的函数，记为 $f(t)$ ，分子也是 t 的函数。现在的问题是如何对 $f(t)$ 求导：</p><p>让我们循着之前的思路，思考导函数最初的意义，即变化率。将题目中的积分区域画出来，其实就是要求阴影面积对 t 的变化率。</p><p>那么照着之前的推导，就是求被积函数在最外面的曲线上的积分。这提示我们使用曲线积分。</p><p>过程都在上面的图里面了。</p><h3 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h3><p>上面的题型足以应付多数情况了，但是有一种例外！在这种情况下，照搬例一做法会得到错误答案，这是因为例一的积分区域、要求关于哪个变量的变化率天然地满足了一个限制条件。若无此限制条件，做法上还需进行调整才是。</p><p>下面的例子也补充了例一推导中疏漏的一处：</p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/j4VCgle3qV4cr9" alt="58-4"></p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/1oe9wwnJ79lmqE" alt="58-5"></p><p>你可以在 <a href="https://loveofpeach.github.io/posts/55931ee1.html">数二强化</a> 下的<strong>李林六24</strong> pdf 第16、17页找到它。</p><p>分析都在图里面了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一种考研数学中某类题型的新解法，与其背后的几何意义有关。目前各平台的考研博主中均未见到此类解法。&lt;/p&gt;
&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;p&gt;若 $f(x)$ 在区间 $</summary>
      
    
    
    
    <category term="数学" scheme="https://loveofpeach.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="考研数学" scheme="https://loveofpeach.github.io/tags/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/"/>
    
    <category term="高数" scheme="https://loveofpeach.github.io/tags/%E9%AB%98%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>硬盘学习资料</title>
    <link href="https://loveofpeach.github.io/posts/a72e3cc4.html"/>
    <id>https://loveofpeach.github.io/posts/a72e3cc4.html</id>
    <published>2023-11-18T03:45:05.000Z</published>
    <updated>2023-12-09T15:23:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>夫藏舟于壑，藏山于泽，谓之固矣，然而夜半有力者负之而走，昧者不知也。</p></blockquote><p>前一阵子，电脑的忽然死机让我有点担心数据的安全。于是买了一块硬盘备份数据，但思来想去，还是大厂商的云端硬盘更为安全。至于 blog 本身资料的备份，也可以设为不公开，保存在云上。</p><p>这里先放一些以前的旧资料，它们一开始是在一块看起来就非常不可靠的 32GB U盘上，现在保存在移动硬盘上。</p><p>虽然这些资料我大多都没看过，不过总会有需要的人吧。</p><p><a href="https://drive.google.com/file/d/1cH2VcvhQzRgvIb0mBKcUVpbXokWIAMDz/view?usp=drive_link">2016冬令营课件.zip</a> ，这里面的 ppt 导出 pdf 会丢失动画效果，因此就直接一整个压缩了：</p><p><img src="https://bu.dusays.com/2023/11/18/655844e283b26.png" alt="57-1（2016冬令营课件）"></p><p>树上 DP ：</p><div class="row"><iframe src="https://drive.google.com/file/d/1aCLi1pQKX97j-ZzU3JapP6E6OUYF56sb/preview" style="width:100%; height:550px"></iframe></div><p>数论选讲：</p><div class="row"><iframe src="https://drive.google.com/file/d/1YAAzJjKKbFpgv5aGyK8atn8OwAOGBJ3w/preview" style="width:100%; height:550px"></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;夫藏舟于壑，藏山于泽，谓之固矣，然而夜半有力者负之而走，昧者不知也。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前一阵子，电脑的忽然死机让我有点担心数据的安全。于是买了一块硬盘备份数据，但思来想去，还是大厂商的云端硬盘更为安全。至于 blog 本身</summary>
      
    
    
    
    <category term="转载" scheme="https://loveofpeach.github.io/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
    <category term="动态规划" scheme="https://loveofpeach.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="数论" scheme="https://loveofpeach.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>《龙与虎》短评</title>
    <link href="https://loveofpeach.github.io/posts/79ab37ca.html"/>
    <id>https://loveofpeach.github.io/posts/79ab37ca.html</id>
    <published>2023-10-15T12:17:21.000Z</published>
    <updated>2023-10-28T16:16:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一次看《龙与虎》，大约是几年前。最近二刷完，总想写点什么，然而我在写点什么之前又总想看看别人的评论，最后总是以 “我想写的别人都写到了，而且更深、更广” 这样的结局潦草作罢。</p><p>下面是目前我看到的最好的分析文章了：</p><blockquote><p><a href="https://www.zhihu.com/question/23648757/answer/2030795324">怎么评价《龙与虎》这部动画？ - 黑色耳机线的回答 - 知乎</a></p></blockquote><p>还是说点自己的感想吧。也许在 Songbirds 的伴奏下，读者还能勉强对付我用生硬文字拼凑出来的零星思考。</p><html><center><head>    <meta charset="utf-8">    <title></title></head><body>    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="https://music.163.com/outchain/player?type=2&id=554242361&auto=0&height=66"></iframe></body></center></html><p>说到底，情感这种东西最重要的是共同的经历。我们只能遗憾地承认，放眼人海，很难说两个人是天造地设的一对，非君不可，在不同的世界线里（假设），因缘际会，难免目及旁人。</p><p>那么，对彼此特殊的部分也就是两人共同的经历和回忆了，这是别人无法拥有、也无法夺走的优势。</p><p>这也是为什么异地恋难以善终、极具考验——因为你缺席（absent）了。开心无法分享，痛苦独自承担，情感的维系要么是一种自我感动式的催眠、沉溺于一种对另一半的抽象感觉，要么是出于维护在分开之前就已然积累的深厚的共同经历——这已经证明了共同经历的重要性。每天视频电话煲，放下手机的时刻，是否有种欣喜之后的空洞、重又陷入孤独的焦灼和无奈？这个时候如果别人在场，又会如何？遇到困难的时候 TA 会依靠别人吗？阔别许久，是否会有同一性的混乱？这次见面，你又变了一点，下次见面又会变成什么样呢？会变成我不认识的样子吗？明明以前在一起的时候，别人都说你变了，我却不以为然地笑着，你就是你呀。但是分别了这么久，我喜欢的是过去的你，还是现在的你呢？那么我又如何呢？我变了吗，变了很多吗？变到失去你曾经喜欢的我的那些特质了吗？如果是的话，我岂不是一个夺走名字，继承记忆的鸠占鹊巢的冒牌货？</p><p>但尚可安慰的是，从共同经历的重要性出发，我们也算是有一条明路可走：建构意义，创造回忆。必须指出，<em>寂寞无聊是一种由单调引起的东西，生活老是千篇一律，漫长的时间就会缩短做一团</em>，这种缩做一团的时间在计算共同经历的时候权值会显得非常可怜吧？</p><p>以上只是我观察别人的异地恋的一些胡思乱想，一个母胎 solo 的人竟然能乱七八糟、纸上谈兵似的想了这么多关于恋爱方面的事，我不禁哑然失笑。这种在玻璃上描摹他人的行为，并用自己的想象填充细节，多少有点滑稽。</p><p>但是我的理论在《龙与虎》里得到了很好的体现不是吗？<del>虽然用动画来印证显得有点可笑。</del>当高须和大河在教室里被逼着表态的时候，他们再也不能对两人建立起的深厚羁绊视而不见——因为对方已经占据了视线的全部。</p><p>这也是《小王子》想要告诉我们的：</p><blockquote><p>我那朵玫瑰，别人以为她和你们一样，但她单独一朵就胜过你们全部。因为她是我浇灌的。因为她是我放在花罩中的。因为她是我用屏风保护起来的。因为她身上的毛毛虫是我除掉的。因为我倾听过她的哀怨，她的吹噓，有时甚至是她的沉默。因为她是我的玫瑰。</p></blockquote><p>我们不能用一句总结性的话高度概括一部动画，或是一部小说，一个人，那是一种傲慢，并将抹煞全部的故事性。但在这里，还请允许我斗胆一句，大河是在扭曲的家庭中长大，最终得到救赎的孩子。这是很好的故事，但观看结束之后，我如同几年前一样，也如同网上所说的 “看完《龙与虎》之后，人均抑郁一周” 那样，陷入了一种郁郁寡欢的情绪，我知道这是我的软弱，也许我还会像以前那样写下诸如 “我的精神长久地处于今宵酒醒何处的混沌状态，只不过映入眼帘的既不是杨柳岸，也没有晓风和残月” 这种病恹恹到令人发笑的中二句子，但最近几年，我终于明白，无论是否有他人的帮助和陪伴，作出改变的首先必须是自己——至少这次，让这种无谓的情绪快点结束吧。</p><p>我定好明天的机械闹钟，如是想。</p><p>你未来到此处时，此花与吾同归于寂；你来到此处时，则此花颜色一时明白起来。</p><p>什么时候我也能遇到这样的人呢。</p><p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.a322b2a206b49da0811aacf426758b05?rik=dAv0QHifXNRvyQ" alt="56-1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一次看《龙与虎》，大约是几年前。最近二刷完，总想写点什么，然而我在写点什么之前又总想看看别人的评论，最后总是以 “我想写的别人都写到了，而且更深、更广” 这样的结局潦草作罢。&lt;/p&gt;
&lt;p&gt;下面是目前我看到的最好的分析文章了：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a</summary>
      
    
    
    
    <category term="闲文" scheme="https://loveofpeach.github.io/categories/%E9%97%B2%E6%96%87/"/>
    
    
    <category term="acg" scheme="https://loveofpeach.github.io/tags/acg/"/>
    
  </entry>
  
  <entry>
    <title>OUTSIDER：从毛利兰到有马佳奈</title>
    <link href="https://loveofpeach.github.io/posts/578147a1.html"/>
    <id>https://loveofpeach.github.io/posts/578147a1.html</id>
    <published>2023-09-28T15:55:24.000Z</published>
    <updated>2023-12-28T13:28:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>毛利兰、约儿·佛杰、有马佳奈，这一类角色，她们的生活都被排除在剧情主线之外，但又是剧中的重要人物。这种割裂和冲突，部分原因可以归结于作者有意制造的党争，或者人物塑造的失策，<psw>“青山的本意是好的，人设表现的时候歪了”</psw>。不过我倾向于分析人物时不把作者的意志搬进来，而总是从剧情人物本身寻找解释，这样比较有趣。</p><p>作为对比，还须观察两个角色：灰原哀、战场原黑仪。灰原深度参与了剧情冲突的主线，而战场原在脱离非日常后，成为阿良良木历在非日常和日常之间游走的桥梁，在朋友需要的时候亦有亮眼表现。灰原和战场原是两个塑造非常成功、很有魅力的角色，<del>很符合大家对“现代女性”的想象</del>，<psw>原神🙏</psw></p><div class="note info flat"><p>文章包含博主的主观臆测和过度解读，没有考据，也不会详细介绍剧情。只是自娱自乐，或者供恰好看过《名侦探柯南》《Spy Family》《推しの子》《物语系列》的人打发时间。</p></div><p>兰最大的设定，空手道高手，其实在人物表现上是立不住的。她并没有给人一种高武力值应有的沉稳和外溢的安全感，这点可以和京极真对比。早期的时候，兰更像是一个“柯南报警器”，作用是看到命案现场用尖叫把柯南叫过来。后期似乎脱敏了，但兰的空手道功夫也仅仅限于在大局已定的时候帮助柯南收尾，制服暴走的犯人，起到一个锦上添花的作用（这个生态位还经常被其他角色替代），很少推动剧情的发展。再如兰的怕鬼设定，就更加可疑了。</p><p>这种脱离具体细节塑造和行为逻辑支撑的设定，只能叫做纸片人的“萌点”。比方说，在现实中你不可能真的期待一个手如柔荑、肤如凝脂的娇小妹子拿一把 AK47 突突敌人，但在二维世界里就可以：</p><p><img src="https://bu.dusays.com/2023/12/27/658bad8c339aa.png" alt="55-1.png"></p><p><img src="https://bu.dusays.com/2023/12/28/658d5d8e513cd.gif" alt="55-2.gif" title="不好意思其实我们原神是 3D 游戏"></p><p>因此兰的空手道设定也只是没有支撑的“萌点”而已，不能作为其“强大”的佐证。当然，这里需要对“勇气”和“强大”做出区分，强大并不是勇气的必要条件。兰当然有可贵的勇气。遗憾的是，虽然勇气在现实世界是稀缺的品质，但在二次元里却是一种泛滥的通货，尤其是《名柯》里，凡正面角色就没有一个没有勇气的。</p><p>事实上，毛利兰不仅不是一部分人想象的“强大独立的现代女性”，相反是一个典型的大和抚子式角色，空手道高手的设定落在她身上，在二维世界与现实世界微妙差异的作用下，甚至加强了她的“大和抚子性”。</p><blockquote><p>大和抚子：类似于中国人口中的“贤妻良母”、“贤内助”。</p></blockquote><p>早期的某一集中，一位普通男高路人向兰表白，遭到拒绝后仍纠缠不清，兰直接一拳（还是一腿忘了）砸弯了旁边的电灯柱，吓跑男高路人，而柯南在旁边目睹了全过程。</p><p>其实这个细节在传统男性视角下会非常有意思。兰的空手道功夫使她即使在外力下也可以保全自己的贞洁，这卸下了男性保护女性的义务，使他们放心，但她竟完全没有借着空手道，建立自己内心的秩序，在心理上划出缓冲区，保持一定的独立性。她还是那个将新一的半句话奉为圭臬，还是那个为犯人拉上窗帘，阻止警方狙击的人美歌甜小姐姐，没有自己的思考，很多时候表现为新一的依附。这种不平衡，即外在的强大和内心的弱小，势必会使自己沦为被依附者的武器，发挥物的功用。这种不平衡同样也表现在，心理上处于与自身外在力量不相称的对男方的守势的女性，会让传统观念的男性感觉自己占了便宜。当然，这里并不指新一，而是银幕外的观众。我确信大部分人不会想这么多，反而会认为想这么多的人脑子有病，心理阴暗，但他们一定潜意识里对这个细节感到满意。</p><p>在这种视角下，毛利兰简直比大和抚子还要大和抚子，还要贤惠，还要让人放心。</p><div class="note warning flat"><p>Spy Family 博主只看到了 Part2 的中间部分，因此只讨论在这之前的剧情。</p></div><p>与之非常类似的是 Spy Family 的约儿·佛杰。</p><p><img src="https://bu.dusays.com/2023/12/27/658bb5146539d.png" alt="55-3.png" title="我有一个住在澳门的威尼斯朋友"></p><p>约儿·佛杰设定上是一个杀手，组成家庭的初衷也是为了更好地执行暗杀的任务，但其所服务的组织、暗杀任务，只在第一话登场的时候提到。之后就完全掉线，约儿·佛杰成为 aniya 的保镖，时不时表现出一点病娇的属性：左手一把沾满红色液体的刀，右手提着渗出红色液体的手提包站在公寓面前，表情阴暗，让观众角色以为刚刚进行了可怖的暗杀——但是镜头一转，原来那红色液体是番茄汁，约儿·佛杰正打算去向同事请教如何做饭。</p><p>这完全就是“萌点”了好吧，<del>虽然我没发现哪里萌了。</del></p><p>而柯哀受欢迎的很大原因，在我看来，是因为，现代人在精神上是孤独的，这种孤独使他们幻想一种亲密无间的关系。</p><p><img src="https://bu.dusays.com/2023/12/27/658bba369c804.png" alt="55-4.png"></p><p>小时候读《三国》或是《三侠五义》的时候，常常能看到一个人拉着一个人的手倾诉衷肠的情节，“啊贤弟，愚兄以为…”这种，这要放在现代人身上鸡皮疙瘩早掉一地了。现代人的日常交流丢弃了严肃性，只在鲜少的场合，只对鲜少的个人流露真情（或者没有？），因此他们是孤独的。本博客就是一例，博主在日常生活中就没什么表达欲，国内社交平台近两年几乎没有发言，评论都不参与的那种。把表达欲倾泻在这个博客里倒是很好的做法，现今的社会环境，谁也不知道自己什么时候会因言获罪。</p><p>于是，<del>我们</del>柯哀党发现，CA 之间在新兰关系的粉色泡泡之上，还有一种稀缺可贵的特质，即消解孤独的互相信任、互相理解。</p><p>但距离感也不是越小越好的。如果两个人对对方的一切过往都知根知底，一切想法都了然于心，任何一丁点的情绪波动都能量子纠缠似的立刻察觉，那么完全可以说其实这两个人是一个人，一份意识在两具肉体里的备份。举例来说，甲试图安慰受伤的乙，但是因为二人心有灵犀，甲的想法，包括安慰的逻辑，甲视角下的事件，这些在产生的瞬间，乙必然也了解了。换言之，甲根本不需要进行这个安慰。由于思维同步，二人的生活经验也是共享的。那么甲在不在乙的身边又有什么影响呢？乙不还是一个人吗？</p><p><img src="https://bu.dusays.com/2023/12/27/658bc6097a109.png" alt="55-5.png"></p><p>因此亲密关系中的爱只能由他者提供，这个他者必然是与自己有所不同的。上面只是一个距离为零的极端情况，现时中自然是绝无可能的。再看看距离很小很小的次极端情况：阿良良木历和忍野忍。由于二次元的事您少管的原因，忍野忍被束缚在历的影子里，物理距离几乎为零，总是一致行动，一方也能感受到另一方的心理动摇，实际上这个设定是十分危险的。在后期的动画中，小忍会吃历的醋，但是在那较久之前，历和战场原办事的时候，按照“一方能感受到另一方的心理动摇”的设定，其实是细思极恐的。只是由于二人性格上的原因，忍野忍渴求爱而历恰好是个撞到小忍的博爱者，才能达到一种和谐的亲密关系。<psw>忍：只要你爱我并且愿意为我而死就行。历：我爱你并且愿意为你而死的同时也爱着别人。</psw></p><p>而 CA 之间的距离则是比较合适的，他们既有一致行动的紧密，也有分工配合的默契。一如《物语系列》中战场原和羽川翼的对话：“真的不去吗？” “嗯，既然他没有邀请我们去，说明暂时还没有这个必要，而且我们也有我们这边的事情要处理吧。” （大概是这么说的，记不太清）</p><p>《推しの子》中的有马佳奈则是比较特殊了，她有着灰原哀的头脑但是毛利兰的命运，主角出于“保护她不受伤害”的心理动机，将她排除在主线之外。哎，写到这就不想写了，好像也蛮对不住人家的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;毛利兰、约儿·佛杰、有马佳奈，这一类角色，她们的生活都被排除在剧情主线之外，但又是剧中的重要人物。这种割裂和冲突，部分原因可以归结于作者有意制造的党争，或者人物塑造的失策，&lt;psw&gt;“青山的本意是好的，人设表现的时候歪了”&lt;/psw&gt;。不过我倾向于分析人物时不把作者的意志搬</summary>
      
    
    
    
    <category term="闲文" scheme="https://loveofpeach.github.io/categories/%E9%97%B2%E6%96%87/"/>
    
    
    <category term="acg" scheme="https://loveofpeach.github.io/tags/acg/"/>
    
  </entry>
  
  <entry>
    <title>DS 强化</title>
    <link href="https://loveofpeach.github.io/posts/b161b9bb.html"/>
    <id>https://loveofpeach.github.io/posts/b161b9bb.html</id>
    <published>2023-09-26T03:18:48.000Z</published>
    <updated>2023-11-26T14:35:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/XARSSwlpuYvBRT" alt="54-1-1"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/GqgrAHwQHlbosT" alt="54-1-2"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/D_efmTaVAl-duO" alt="54-1-3"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/1QQpi9ysJ1Nv5c" alt="54-1-4"></p><h2 id="栈、队列、数组"><a href="#栈、队列、数组" class="headerlink" title="栈、队列、数组"></a>栈、队列、数组</h2><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/NrSkDGBxnjeYCV" alt="54-2-1"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/xILitM3Kx453zv" alt="54-2-2"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/JxdYxCt9AKvrM6" alt="54-2-3"></p><h2 id="树、二叉树"><a href="#树、二叉树" class="headerlink" title="树、二叉树"></a>树、二叉树</h2><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/RzR8jeFgUeYipb" alt="54-3-1"></p><p><img src="https://bu.dusays.com/2023/11/11/654f5806ef75e.jpg" alt="54-3-2.jpg"></p><p><img src="https://bu.dusays.com/2023/11/11/654f58066928c.jpg" alt="54-3-3.jpg"></p><p><img src="https://bu.dusays.com/2023/11/11/654f58051df1a.jpg" alt="54-3-4.jpg"></p><p><img src="https://bu.dusays.com/2023/11/11/654f58063ae3b.jpg" alt="54-3-5.jpg"></p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/KEIv6MGM5jy_mT" alt="54-4-1"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/5hprMCgLmVrw2G" alt="54-4-2"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/qNv7DAWXCywuCd" alt="54-4-3"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/dUxZT2sAUNn212" alt="54-4-4"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/DYyXamZAhp2Giw" alt="54-4-5"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/22ugockT4IRCqD" alt="54-4-6"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/gPXtK7Bis2cE5X" alt="54-4-7"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/dy0IS0V955L0AB" alt="54-4-8"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/JS_yqyvH_0u9Bj" alt="54-4-9"></p><p>因为王道的算法太麻烦了，不利于人脑模拟算法执行，所以针对 AOE，我给出一个基于 DAG 上动态规划的算法。</p><p>定义 $S_i$ 为顶点 i 到终点的最长路径长度，则：</p><script type="math/tex; mode=display">S_i= \begin{cases}\underset{(i,j)\in E}{\overset{}{\mathrm{MAX}}}(S_j+\mathrm{len}(i,j)) & i \ne \mathrm{end} \\0 &i=\mathrm{end}\end{cases}</script><p>显然这个算法的时间复杂度是 $O(|E|)$ 的，代码递归地写就可以。</p><p>那么找出关键路径就很方便了：</p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/0JPB2Pn2zQJ-aT" alt="54-4-9dot5"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/PsPTK3e4HJnh2T" alt="54-4-10"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/CX7B-2fwr6qhrx" alt="54-4-11"></p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/H91sedOcopFXM8" alt="54-5-1"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/vxuDjsATcmDc_o" alt="54-5-2"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/tnClkF0eEavuUC" alt="54-5-3"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/Lt_P3J6s3v2wFF" alt="54-5-4"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/sVKMLOLg6srvqt" alt="54-5-5"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/f_mAMTQPoqAHmz" alt="54-5-6"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/qwxBh2npMM69iw" alt="54-5-7"></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/jSO8eGujXq3doM" alt="54-6-1"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/XALx3u4WMch-zz" alt="54-6-2"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/pJSnHUqMVro-3m" alt="54-6-3"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/-NuOAU-Hme-KuF" alt="54-6-4"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/ncVQoXwLgBylw6" alt="54-6-5"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/zrCDvln51cV1wI" alt="54-6-6"></p><p>运用快排的划分思想：</p><div class="row"><iframe src="https://drive.google.com/file/d/1XhE73Op43g3JI2i6B73Ii-CNNPLKprC6/preview" style="width:100%; height:550px"></iframe></div><h2 id="结课测试"><a href="#结课测试" class="headerlink" title="结课测试"></a>结课测试</h2><div class="row"><iframe src="https://drive.google.com/file/d/1sJKVhNZCxQVLIVRd7cP3jG2Qh51VrhqC/preview" style="width:100%; height:550px"></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/XARSSw</summary>
      
    
    
    
    <category term="算法" scheme="https://loveofpeach.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构" scheme="https://loveofpeach.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
