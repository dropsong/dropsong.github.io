<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>loveofpeach&#39;s</title>
  
  <subtitle>tree hole</subtitle>
  <link href="https://loveofpeach.github.io/atom.xml" rel="self"/>
  
  <link href="https://loveofpeach.github.io/"/>
  <updated>2023-09-03T12:41:24.400Z</updated>
  <id>https://loveofpeach.github.io/</id>
  
  <author>
    <name>love of peach</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OS、DS 强化</title>
    <link href="https://loveofpeach.github.io/posts/64934ad2.html"/>
    <id>https://loveofpeach.github.io/posts/64934ad2.html</id>
    <published>2023-09-03T12:35:13.000Z</published>
    <updated>2023-09-03T12:41:24.400Z</updated>
    
    <content type="html"><![CDATA[<p>学完了再放出来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学完了再放出来。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="做题" scheme="https://loveofpeach.github.io/categories/%E5%81%9A%E9%A2%98/"/>
    
    
    <category term="OS" scheme="https://loveofpeach.github.io/tags/OS/"/>
    
    <category term="数据结构" scheme="https://loveofpeach.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数二强化</title>
    <link href="https://loveofpeach.github.io/posts/55931ee1.html"/>
    <id>https://loveofpeach.github.io/posts/55931ee1.html</id>
    <published>2023-08-22T03:37:17.000Z</published>
    <updated>2023-08-22T12:58:02.213Z</updated>
    
    <content type="html"><![CDATA[<p>跨考一下，不想继续本科专业了，换个专业学学。</p><h2 id="中值定理证明题"><a href="#中值定理证明题" class="headerlink" title="中值定理证明题"></a>中值定理证明题</h2><p><img src="https://bu.dusays.com/2023/08/22/64e42e6c6eb7c.jpg" alt="中值定理证明题-01.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6956c85.jpg" alt="中值定理证明题-02.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6be119f.jpg" alt="中值定理证明题-03.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6b10a5a.jpg" alt="中值定理证明题-04.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6b5e9f8.jpg" alt="中值定理证明题-05.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6c78073.jpg" alt="中值定理证明题-06.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6b8970f.jpg" alt="中值定理证明题-07.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6c364cc.jpg" alt="中值定理证明题-08.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e67b88a7.jpg" alt="中值定理证明题-09.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6c6e6eb.jpg" alt="中值定理证明题-10.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42f18e326c.jpg" alt="中值定理证明题-11.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;跨考一下，不想继续本科专业了，换个专业学学。&lt;/p&gt;
&lt;h2 id=&quot;中值定理证明题&quot;&gt;&lt;a href=&quot;#中值定理证明题&quot; class=&quot;headerlink&quot; title=&quot;中值定理证明题&quot;&gt;&lt;/a&gt;中值定理证明题&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://bu</summary>
      
    
    
    
    <category term="做题" scheme="https://loveofpeach.github.io/categories/%E5%81%9A%E9%A2%98/"/>
    
    
    <category term="数学" scheme="https://loveofpeach.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>俄罗斯方块</title>
    <link href="https://loveofpeach.github.io/posts/41a3284b.html"/>
    <id>https://loveofpeach.github.io/posts/41a3284b.html</id>
    <published>2023-08-20T11:57:04.000Z</published>
    <updated>2023-09-04T16:14:22.003Z</updated>
    
    <content type="html"><![CDATA[<p>咕咕咕。。。</p><p>在搞了在搞了。。。</p><p>真的没啥时间推进。。。</p><p>vscode 做项目有点不方便啊，再装 vs 有点麻烦。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;咕咕咕。。。&lt;/p&gt;
&lt;p&gt;在搞了在搞了。。。&lt;/p&gt;
&lt;p&gt;真的没啥时间推进。。。&lt;/p&gt;
&lt;p&gt;vscode 做项目有点不方便啊，再装 vs 有点麻烦。。。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="笔记" scheme="https://loveofpeach.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://loveofpeach.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>听《二泉》</title>
    <link href="https://loveofpeach.github.io/posts/bf733412.html"/>
    <id>https://loveofpeach.github.io/posts/bf733412.html</id>
    <published>2023-07-30T16:54:25.000Z</published>
    <updated>2023-09-04T16:09:06.153Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://tse2-mm.cn.bing.net/th/id/OIP-C.4JgaeLzyr2oAt-IPnCV-fAHaE8" alt="48-1" title="来自网络"></p><p>无锡某处的阿炳雕像曾给我留下深刻的印象。乍看上去，他好像并非哪里的伟人，竟是和芸芸众生一样，受难之后低下自己的头颅，满不在乎地继续生活。但他谦卑地戴上帽子，架着圆形的墨镜，支起二胡，撑开右臂，彷佛将要用磅礴无尽的力量推出弓时——历史于此刻凝固。</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?aid=44559834&bvid=BV1xb411a7hx&cid=78007090&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><p>有一些演奏会上的二泉映月，技巧高超，细节饱满丰富，还有很多其他乐器的伴奏，但是却不一定能像这个视频里的一样触动人心。</p><p>事实上，如果能“有幸”见到一个真正的靠着街头卖艺讨生活的人，你会更加深刻地认识到：人是被命运卷入其中的。</p><p>十几年前，C 市的路上还跑着数不清的人力三轮，市中心（现在已是旧城区）的街道边，或是唯一一家肯德基的门店前，常常能遇到这样的卖艺人。他们的技巧非常粗糙，甚至可以说是刚刚能把音发出来，有人的琴不知是不是自己做的，弦还打着结，一个非常简陋的，送别人都没人要的琴。然而就是这样的琴，拉出的二泉（也许还是和同行学的），却最能撬动人心设防的深处。因为那些演奏会上的二泉，太过从容，太过华丽，太过完美，也太过奢侈了。而这些街头的人，才构成了我们这个社会最真实的图景。</p><p>这种感情是人类共通的，德富芦花曾写道：</p><blockquote><p>呜呼，我本东西南北人。我曾经夜泊于赤马关外，和着潮声而慷慨悲歌；我曾经客旅于北越，夜闻离别之曲而悲泣。我曾经于月明风清之夜，耳听着中国海上的欸乃之声；又曾经在一个雪天的清晨，行进于南萨的道上，听赶马人的歌唱。这些都打动了我的心扉。而那街头的一片市声，却不能使我肝肠寸断。</p></blockquote><p>中国宣布全面脱贫的夏天，我在上海见过皮肤黝黑、赤裸着上身流浪乞讨的男人。蜗居北京的日子里，也遇到不少在北京西站负一层躺下休息的男女、孩子，也许我的境遇也只比他们好一点。</p><p>德富芦花在听 <i>Still sad music of humanity</i> 时，感受到无数不可名状的苦恼，无数的鲜血，无数的眼泪。</p><p>这固然是深刻的体会。而我在《二泉》中感受到的意趣，则与这两句诗大抵相同：</p><blockquote><p>春风桃李花开日，秋雨梧桐叶落时。<br>西宫南苑多秋草，落叶满阶红不扫。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://tse2-mm.cn.bing.net/th/id/OIP-C.4JgaeLzyr2oAt-IPnCV-fAHaE8&quot; alt=&quot;48-1&quot; title=&quot;来自网络&quot;&gt;&lt;/p&gt;
&lt;p&gt;无锡某处的阿炳雕像曾给我留下深刻的印象。乍看上去，他好</summary>
      
    
    
    
    <category term="闲文" scheme="https://loveofpeach.github.io/categories/%E9%97%B2%E6%96%87/"/>
    
    
    <category term="音乐" scheme="https://loveofpeach.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>算法题集子</title>
    <link href="https://loveofpeach.github.io/posts/53401ab0.html"/>
    <id>https://loveofpeach.github.io/posts/53401ab0.html</id>
    <published>2023-07-12T15:15:24.000Z</published>
    <updated>2023-07-23T04:25:00.600Z</updated>
    
    <content type="html"><![CDATA[<p>一道题开一篇文章实在浪费，于是决定以后零零散散做的题就放在这个集子里了。如果数量过多会考虑再开。</p><h2 id="JSOI2004-平衡点（模拟退火）"><a href="#JSOI2004-平衡点（模拟退火）" class="headerlink" title="JSOI2004 平衡点（模拟退火）"></a>JSOI2004 平衡点（模拟退火）</h2><p><strong>提交入口</strong></p><p><a href="https://www.luogu.com.cn/problem/P1337">https://www.luogu.com.cn/problem/P1337</a></p><p><strong>题目描述</strong></p><p>如图，有 $n$ 个重物，每个重物系在一条足够长的绳子上。</p><p>每条绳子自上而下穿过桌面上的洞，然后系在一起。图中 $x$ 处就是公共的绳结。假设绳子是完全弹性的（即不会造成能量损失），桌子足够高（重物不会垂到地上），且忽略所有的摩擦，求绳结 $x$ 最终平衡于何处。</p><p><strong>注意</strong>：桌面上的洞都比绳结 $x$ 小得多，所以即使某个重物特别重，绳结 $x$ 也不可能穿过桌面上的洞掉下来，最多是卡在某个洞口处。</p><p><img src="https://cdn.luogu.com.cn/upload/pic/148.png" alt="47-1"></p><p><strong>输入格式</strong></p><p>文件的第一行为一个正整数 $n$（$1\le n\le 1000$），表示重物和洞的数目。</p><p>接下来的 $n$ 行，每行是 $3$ 个整数 $x_i, y_i, w_i$，分别表示第 $i$ 个洞的坐标以及第 $i$ 个重物的重量。（$-10000\le x_i,y_i\le10000, 0&lt;w_i\le1000$）</p><p><strong>输出格式</strong></p><p>你的程序必须输出两个浮点数（保留小数点后三位），分别表示处于最终平衡状态时绳结 $x$ 的横坐标和纵坐标。两个数以一个空格隔开。</p><p><strong>样例输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">0 0 1</span><br><span class="line">0 2 1</span><br><span class="line">1 1 1</span><br></pre></td></tr></table></figure><p><strong>样例输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.577 1.000</span><br></pre></td></tr></table></figure><p><strong>分析</strong></p><p>待续。先贴代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN =<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,g[MAXN];</span><br><span class="line"><span class="type">double</span> minlen=DBL_MAX;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">double</span> a=<span class="number">0.0</span>, <span class="type">double</span> b=<span class="number">0.0</span>):<span class="built_in">x</span>(a),<span class="built_in">y</span>(b)&#123;&#125;</span><br><span class="line">&#125;P[MAXN];</span><br><span class="line">Point ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">Sqr</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;<span class="keyword">return</span> x*x;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">Rand</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">double</span>(<span class="built_in">rand</span>())/<span class="built_in">double</span>(RAND_MAX);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">dis</span><span class="params">(Point a,Point b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">Sqr</span>(a.x-b.x)+<span class="built_in">Sqr</span>(a.y-b.y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">accept</span><span class="params">(<span class="type">double</span> delta,<span class="type">double</span> temp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> delta&lt;<span class="number">0</span>||<span class="built_in">Rand</span>()&lt;<span class="built_in">exp</span>(-delta/temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">calc</span><span class="params">(Point origin)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        len+=<span class="built_in">dis</span>(origin,P[i])*g[i];</span><br><span class="line">    <span class="keyword">if</span>(len&lt;minlen)&#123;</span><br><span class="line">        ans=origin;</span><br><span class="line">        minlen=len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SA</span><span class="params">(Point ans0,<span class="type">double</span> T0,<span class="type">double</span> dec,<span class="type">double</span> end)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> temp=T0;</span><br><span class="line">    Point nowpos=ans0;</span><br><span class="line">    <span class="type">double</span> nowlen=<span class="built_in">calc</span>(nowpos);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(temp&gt;end)&#123;</span><br><span class="line">        Point nextpos=<span class="built_in">Point</span>(nowpos.x+temp*(<span class="built_in">Rand</span>()*<span class="number">2</span><span class="number">-1</span>),nowpos.y+temp*(<span class="built_in">Rand</span>()*<span class="number">2</span><span class="number">-1</span>));</span><br><span class="line">        <span class="type">double</span> nlen=<span class="built_in">calc</span>(nextpos);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">accept</span>(nlen-nowlen,temp))&#123;</span><br><span class="line">            nowpos=nextpos;</span><br><span class="line">            nowlen=nlen;</span><br><span class="line">        &#125;</span><br><span class="line">        temp*=dec;   <span class="comment">//dec为退火系数 </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123; <span class="comment">//精度维护</span></span><br><span class="line">        Point rnd=<span class="built_in">Point</span>(ans.x+temp*(<span class="built_in">Rand</span>()*<span class="number">2</span><span class="number">-1</span>),ans.y+temp*(<span class="built_in">Rand</span>()*<span class="number">2</span><span class="number">-1</span>));</span><br><span class="line">        <span class="built_in">calc</span>(rnd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    Point init;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%d&quot;</span>,&amp;P[i].x,&amp;P[i].y,&amp;g[i]);</span><br><span class="line">        init.x+=P[i].x;</span><br><span class="line">        init.y+=P[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    init.x/=n;</span><br><span class="line">    init.y/=n;</span><br><span class="line">    <span class="built_in">SA</span>(init,<span class="number">1e5</span>,<span class="number">1</span><span class="number">-1e-2</span>,<span class="number">1e-3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.3f %.3f\n&quot;</span>,ans.x,ans.y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有机化学之神偶尔会做作弊（tarjan-lca）"><a href="#有机化学之神偶尔会做作弊（tarjan-lca）" class="headerlink" title="有机化学之神偶尔会做作弊（tarjan, lca）"></a>有机化学之神偶尔会做作弊（tarjan, lca）</h2><p><strong>提交入口</strong></p><p><a href="https://www.luogu.com.cn/problem/P2783">https://www.luogu.com.cn/problem/P2783</a></p><p><strong>题意简述</strong></p><p>给你一个 $n$ 个点，$m$ 条边的无向图。把图中所有的环变为一个点，求变化后某两个点之间有多少个点。</p><p><strong>输入格式</strong></p><p>第一行两个整数 $n$，$m$。表示有 $n$ 个点，$m$ 根键。</p><p>接下来 $m$ 行每行两个整数 $u$，$v$ 表示 $u$ 号碳和 $v$ 号碳有一根键。</p><p>接下来一个整数 $tot$ 表示询问次数。</p><p>接下来 $tot$ 行每行两个整数，$a$，$b$ 表示询问的两个碳的编号。</p><p><strong>输出格式</strong></p><p>共 $tot$ 行，每行一个二进制数，表示答案。</p><p><strong>样例输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">2</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure><p><strong>样例输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><p>两个碳不成环。</p><p><strong>数据范围及约定</strong></p><p>对于 $100\%$ 的数据，$1&lt;n\le10 ^ 4$，$1&lt;m\le5\times 10 ^ 4$。</p><p><strong>分析</strong></p><p>先给出一份超时代码，82 pts.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a,b) ((a)&lt;(b)?(a):(b))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e4</span>+<span class="number">3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm=<span class="number">1e5</span>+<span class="number">3</span>;</span><br><span class="line"><span class="comment">// Edge_number in a general graph is twice that of a one-way graph</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,next;&#125;;</span><br><span class="line">Edge edge[maxm],edge2[maxm];</span><br><span class="line"><span class="type">int</span> head[maxn],dfn[maxn],low[maxn],stac[maxn],color[maxn];</span><br><span class="line"><span class="type">int</span> n,m,tot,num,top,cnt,tot_in_txt,lcafa[maxn][<span class="number">25</span>];</span><br><span class="line"><span class="type">int</span> head2[maxn],tot2,dep[maxn],max0;</span><br><span class="line"><span class="type">bool</span> ins[maxn];</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> topow[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">64</span>,<span class="number">128</span>,<span class="number">256</span>,<span class="number">512</span>,<span class="number">1024</span>,<span class="number">2048</span>,<span class="number">4096</span>,<span class="number">8192</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rd</span><span class="params">(<span class="type">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> w=x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||<span class="string">&#x27;9&#x27;</span>&lt;ch) w|=(ch==<span class="string">&#x27;-&#x27;</span>),ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="string">&#x27;0&#x27;</span>),ch=<span class="built_in">getchar</span>();</span><br><span class="line">    x=w?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    edge2[++tot2].v=y;</span><br><span class="line">    edge2[tot2].next=head2[x];</span><br><span class="line">    head2[x]=tot2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> from)</span></span>&#123;</span><br><span class="line">    low[x]=dfn[x]=++num;</span><br><span class="line">    stac[++top]=x; ins[x]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">        <span class="type">int</span> y=edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(y==from)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[y])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(y, x);</span><br><span class="line">            low[x]=<span class="built_in">MIN</span>(low[x],low[y]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ins[y])&#123;</span><br><span class="line">            low[x]=<span class="built_in">MIN</span>(low[x],dfn[y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[x]==low[x])&#123;</span><br><span class="line">        ++cnt; <span class="type">int</span> y;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            y=stac[top--]; ins[y]=<span class="literal">false</span>;</span><br><span class="line">            color[y]=cnt;</span><br><span class="line">        &#125;<span class="keyword">while</span>(x!=y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lcainit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=max0;i++)</span><br><span class="line">        <span class="keyword">if</span>(lcafa[x][i<span class="number">-1</span>])lcafa[x][i]=lcafa[lcafa[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head2[x];i;i=edge2[i].next)&#123;</span><br><span class="line">        <span class="type">int</span> y=edge2[i].v;</span><br><span class="line">        <span class="keyword">if</span>(y!=lcafa[x][<span class="number">0</span>])&#123;</span><br><span class="line">            lcafa[y][<span class="number">0</span>]=x;</span><br><span class="line">            dep[y]=dep[x]+<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">lcainit</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v])<span class="built_in">swap</span>(u,v);</span><br><span class="line">    <span class="type">int</span> delta=dep[u]-dep[v];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>; x&lt;=max0; x++)</span><br><span class="line">        <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;x)&amp;delta)u=lcafa[u][x];</span><br><span class="line">    <span class="keyword">if</span>(u==v)<span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=max0; ~x; x--)</span><br><span class="line">        <span class="keyword">if</span>(lcafa[u][x]!=lcafa[v][x])&#123;</span><br><span class="line">            u=lcafa[u][x];</span><br><span class="line">            v=lcafa[v][x];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> lcafa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">rd</span>(n); <span class="built_in">rd</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line">        <span class="built_in">rd</span>(x); <span class="built_in">rd</span>(y);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y);</span><br><span class="line">        <span class="built_in">addedge</span>(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rd</span>(tot_in_txt);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])<span class="built_in">tarjan</span>(i, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">1</span>;x&lt;=n;x++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">            <span class="type">int</span> y=edge[i].v;</span><br><span class="line">            <span class="keyword">if</span>(color[x]!=color[y])&#123;</span><br><span class="line">                <span class="built_in">addedge2</span>(color[x], color[y]);</span><br><span class="line">                <span class="built_in">addedge2</span>(color[y], color[x]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    max0=(<span class="type">int</span>)(<span class="built_in">log</span>(cnt)/<span class="built_in">log</span>(<span class="number">2</span>))+<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">lcainit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(tot_in_txt--)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        <span class="built_in">rd</span>(a); <span class="built_in">rd</span>(b);</span><br><span class="line">        <span class="type">int</span> k = <span class="built_in">lca</span>(color[a], color[b]);</span><br><span class="line">        <span class="type">int</span> temp = dep[color[a]] + dep[color[b]] - (dep[k]&lt;&lt;<span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> ans[<span class="number">15</span>] = <span class="string">&quot;00000000000000&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">13</span>; ~i; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp&gt;=topow[i])&#123;</span><br><span class="line">                ans[<span class="number">13</span>-i] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                temp -= topow[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ans[i]==<span class="string">&#x27;0&#x27;</span>) i++;</span><br><span class="line">        <span class="keyword">for</span>(; i&lt;=<span class="number">13</span>; i++)<span class="built_in">putchar</span>(ans[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="yLOI2022-枕万梦（排序）"><a href="#yLOI2022-枕万梦（排序）" class="headerlink" title="yLOI2022 枕万梦（排序）"></a>yLOI2022 枕万梦（排序）</h2><p><strong>提交入口</strong></p><p><a href="https://www.luogu.com.cn/problem/P9472">https://www.luogu.com.cn/problem/P9472</a></p><p><strong>题目描述</strong></p><p>天亮了，扶苏不敌困意，早早地进入了梦乡。在失去引力的梦里，扶苏遇到了好多串漂浮着的数列，它们的长度都相等，而且都是美妙的等比数列！出于本能，扶苏想要把这些数列按照字典序排序，可是在梦里扶苏失去了思考的能力，请你来帮帮她！</p><p>具体地，有 $n$ 个编号从 $1$ 到 $n$ 的数列 $a_1, a_2, \dots a_n$，每个数列的长度均为 $m + 1$。第 $i$ 个数列 $a_i$ 满足递推式 $a_{i,j} = a_{i,j - 1} \times i$，其中 $1 \leq j \leq m$。而扶苏会告诉你每个序列的首项 $a_{i,0}$，你需要帮助她把这些数列按字典序排序。</p><p><strong>输入格式</strong></p><p>输入的第一行是两个整数，依次表示 $n$ 和 $m$。<br>接下来 $n$ 行，每行一个整数，第 $i$ 行的整数表示数列 $a_i$ 的首项 $a_{i,0}$。</p><p><strong>输出格式</strong></p><p>输出一行 $n$ 个整数，第 $i$ 个整数表示字典序第 $i$ 小的数列的<strong>编号</strong>。</p><p><strong>样例 #1</strong></p><p><strong>样例输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 2</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>样例输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br></pre></td></tr></table></figure><p><strong>样例 #2</strong></p><p><strong>样例输入 #2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 3</span><br><span class="line">1</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><p><strong>样例输出 #2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br></pre></td></tr></table></figure><p><strong>样例 #3</strong></p><p><strong>样例输入 #3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 2</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>样例输出 #3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br></pre></td></tr></table></figure><p><strong>样例 #4</strong></p><p><strong>样例输入 #4</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">见附加文件中的 B4.in</span><br></pre></td></tr></table></figure><p><strong>样例输出 #4</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">见附加文件中的 B4.ans</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><p><strong>样例 1 解释</strong></p><p>共有两个数列，每个数列的长度均为 $2+1=3$。</p><p>对第一个数列 $a_1$：</p><ul><li>已知其首项 $a_{1,0} = 1$。</li><li>根据 $a_{i,j} = a_{i,j - 1} \times i$，取 $i=1,j = 1$ 可以得到 $a_{1,1} = a_{1,0} \times 1 = 1$。</li><li>根据 $a_{i,j} = a_{i,j - 1} \times i$，取 $i=1,j = 2$ 可以得到 $a_{1,2} = a_{1,1} \times 1= 1$。</li></ul><p>所以数列 $a_1$ 是 $1,1,1$。</p><p>对第二个数列 $a_2$：</p><ul><li>已知其首项 $a_{2,0} = 2$。</li><li>根据 $a_{i,j} = a_{i,j - 1} \times i$，取 $i=2,j = 1$ 可以得到 $a_{2,1} = a_{2,0} \times 2 = 2 \times 2 = 4$。</li><li>根据 $a_{i,j} = a_{i,j - 1} \times i$，取 $i=2,j = 2$ 可以得到 $a_{2,2} = a_{2,1} \times 2= 4 \times 2 = 8$。</li></ul><p>所以数列 $a_2$ 是 $2,4,8$。</p><p>比较字典序可得数列 $a_1$ 是字典序最小的数列。所以输出 $1$。</p><p><strong>样例 2 解释</strong></p><p>数列 $a_1$ 为 $1,1,1,1$，数列 $a_2$ 为 $-1, -2,-4,-8$。</p><p><strong>数据规模与约定</strong><br>本题共 $10$ 个测试点，各测试点信息如下表：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/08wnuome.png" alt="47-2"></p><p>特殊约定 A：保证 $a_{i,0}$ 均相等。<br>特殊约定 B：保证 $a_{i,0}$ 互不相等。</p><p>对全部的测试点，保证 $1 \leq n \leq 10^5$，$1 \leq m \leq 10^9$，$1 \leq |a_{i,0}| \leq 10^9$。</p><p><strong>提示</strong></p><p>对两个数列 $a_i, a_j$，按如下方式比较其字典序：</p><p>找到<strong>最小的</strong>满足 $a_{i,p} \neq a_{j, p}$ 的下标 $p$，比较 $a_{i, p}$ 和 $a_{j, p}$ 的大小：</p><ul><li>如果 $a_{i,p} &lt; a_{j, p}$，则称 $a_i$ 的字典序比 $a_j$ 的小。</li><li>如果 $a_{i,p} &gt; a_{j, p}$，则称 $a_i$ 的字典序比 $a_j$ 的大。</li></ul><p>可以证明，在本题的限制下，这样的 $p$ 一定存在。</p><p><strong>分析</strong></p><p>要求根据字典序排序。若两个数列第一个元素就不等，便可比较大小；若两个数列第一个元素相等，由数列定义，第二个元素必然不等，于是可比较大小。对于首元素为零的数列，整个数列都是零。由此得到下述做法：</p><p>对于两个不等的 $a_{i,0}$ , 升序排序。对于两个相等的 $a_{i,0}$ , 分正负两种情况：若 $a_{i,0}&gt;0$ , 则行数越大，位序靠后；若 $a_{i,0}&lt;0$ , 则行数越大，位序靠前。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">mnode</span>&#123;</span><br><span class="line">    LL mcontent;</span><br><span class="line">    LL mindex;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> mnode&amp; v)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mcontent != v.mcontent)</span><br><span class="line">            <span class="keyword">return</span> mcontent &lt; v.mcontent;</span><br><span class="line">        <span class="keyword">else</span>    </span><br><span class="line">            <span class="keyword">if</span>(mcontent &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> mindex &lt; v.mindex;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">return</span> mindex &gt; v.mindex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;marray[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        LL x; </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;x);</span><br><span class="line">        marray[i].mcontent = x;</span><br><span class="line">        marray[i].mindex = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(marray+<span class="number">1</span>, marray+<span class="number">1</span>+n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,marray[i].mindex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一道题开一篇文章实在浪费，于是决定以后零零散散做的题就放在这个集子里了。如果数量过多会考虑再开。&lt;/p&gt;
&lt;h2 id=&quot;JSOI2004-平衡点（模拟退火）&quot;&gt;&lt;a href=&quot;#JSOI2004-平衡点（模拟退火）&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="做题" scheme="https://loveofpeach.github.io/categories/%E5%81%9A%E9%A2%98/"/>
    
    
    <category term="tarjan" scheme="https://loveofpeach.github.io/tags/tarjan/"/>
    
    <category term="lca" scheme="https://loveofpeach.github.io/tags/lca/"/>
    
    <category term="模拟退火" scheme="https://loveofpeach.github.io/tags/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/"/>
    
  </entry>
  
  <entry>
    <title>数据结构应试笔记</title>
    <link href="https://loveofpeach.github.io/posts/7ccfe718.html"/>
    <id>https://loveofpeach.github.io/posts/7ccfe718.html</id>
    <published>2023-07-05T04:39:12.000Z</published>
    <updated>2023-09-05T02:27:26.515Z</updated>
    
    <content type="html"><![CDATA[<p>应试向的数据结构考试和实际写起代码来有很大区别。重复造轮子就不说了，更可怕的是，有时还需要应试者人脑模拟算法的执行过程。相对来说，对针对具体问题设计算法的考察较浅。</p><p>另外，有时王道书的代码风格奇特，我尽量改为了自己习惯的写法，这点需要特别注意。</p><p>本文中所有代码除非注明，均不保证能运行。</p><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>线性表：</p><ul><li>顺序存储<ul><li>顺序表</li></ul></li><li>链式存储<ul><li>单链表（指针实现）</li><li>双链表（指针实现）</li><li>循环链表（指针实现）</li><li>静态链表（借助数组实现）</li></ul></li></ul><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p>线性表的顺序存储类型描述为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MaxSize = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SqList</span>&#123;</span><br><span class="line">  ElemType data[MaxSize];</span><br><span class="line">  <span class="type">int</span> length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>动态分配：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> InitSize = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SeqList</span>&#123;</span><br><span class="line">  ElemType* data;</span><br><span class="line">  <span class="type">int</span> MaxSize, length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>C++ 的初始动态分配语句为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L.data = <span class="keyword">new</span> ElemType[InitSize];</span><br></pre></td></tr></table></figure><p><strong>注意：动态分配并不是链式存储，它同样属于顺序存储结构，物理结构没有变化，依然是随机存取方式，只是分配的空间大小可以在运行时动态决定。</strong></p><blockquote><p>例：17 页第 11 题。<br>顺序表的插入算法中，当 n 个空间已满时，可再申请增加分配 m 个空间，若申请失败，则说明系统没有（<strong>n + m 个连续</strong>）可分配的存储空间。</p></blockquote><p>顺序表的操作：插入、删除、按值查找。这部分的代码自己实现就行。</p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>单链表的描述：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  LNode* next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>动态分配：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LNode* p = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br></pre></td></tr></table></figure><p>要表示一个单链表时，需要一个头指针<code>L</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LNode* L;</span><br></pre></td></tr></table></figure><p>带头节点的单链表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LNode*&amp; L)</span></span>&#123;</span><br><span class="line">  L = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));  <span class="comment">//分配一个头节点</span></span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;    <span class="comment">//内存不足，分配失败</span></span><br><span class="line">  L-&gt;next = <span class="literal">NULL</span>;             <span class="comment">//头节点之后暂时还没有节点</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(LNode* L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">  LNode* L;</span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按位序插入（带头节点）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头节点编号为0，有数据的节点编号从1开始</span></span><br><span class="line"><span class="comment">//插入完成后新元素的位置为 i</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i, ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* p;  <span class="comment">//指向当前扫描到的节点</span></span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">//当前p指向的是第几个节点</span></span><br><span class="line">  p = L;  <span class="comment">//指向头节点</span></span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>) <span class="comment">//i值不合法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  s-&gt;data = e;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，若<code>i=1</code>，即是插在表头。</p><p>指定节点的后插操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextNode</span><span class="params">(LNode* p, ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  s-&gt;data = e;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，发现<strong>按位序插入（带头节点）</strong>的代码可以通过复用<strong>指定节点的后插操作</strong>的代码来简化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextNode</span><span class="params">(LNode* p, ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  s-&gt;data = e;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i, ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* p;  <span class="comment">//指向当前扫描到的节点</span></span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">//当前p指向的是第几个节点</span></span><br><span class="line">  p = L;  <span class="comment">//指向头节点</span></span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">InsertNextNode</span>(p, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定节点的前插操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//思路：使用后插，然后交换数据成员的内容</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertPreNode</span><span class="params">(LNode* p, ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>) <span class="comment">//内存分配失败，考试可以不写</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  s-&gt;data = p-&gt;data;</span><br><span class="line">  p-&gt;data = e;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按位序删除（带头节点）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i, ElemType &amp;e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* p;  <span class="comment">//指向当前扫描到的节点</span></span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">//当前p指向的是第几个节点</span></span><br><span class="line">  p = L;  <span class="comment">//指向头节点</span></span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123; <span class="comment">//循环找到第 i-1 个节点</span></span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)  <span class="comment">// i 值不合法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next==<span class="literal">NULL</span>) <span class="comment">//第i-1个节点之后已无其他节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* q = p-&gt;next; <span class="comment">//令q指向被删除节点</span></span><br><span class="line">  e = q-&gt;data; <span class="comment">//用e返回元素的值</span></span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/07/10/64abd587e3be8.png" alt="46-1.png" title="上面代码的图示"></p><p>指定节点的删除：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除指定节点 p</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteNode</span><span class="params">(LNode* p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* q = p-&gt;next;</span><br><span class="line">  p-&gt;data = p-&gt;next-&gt;data;</span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/07/10/64abdaced677a.png" alt="46-2.png"></p><p>注意上图中的代码有一个 bug，在边界情况（p 节点刚好是最后一个节点）下会产生错误。但是只是应试的话无所谓了，扣也最多一两分，甚至不扣。</p><p>单链表按位查找：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位查找，返回第i个元素的指针</span></span><br><span class="line"><span class="function">LNode* <span class="title">GetElem</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  LNode* p;  <span class="comment">//指向当前扫描到的节点</span></span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">//当前p指向的是第几个节点</span></span><br><span class="line">  p = L;  <span class="comment">//指向头节点</span></span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按值查找：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LNode* <span class="title">LocateElem</span><span class="params">(LNode*&amp; L, ElemType e)</span></span>&#123;</span><br><span class="line">  LNode* p = L-&gt;next;</span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;data!=e)</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：如果<code>ElemType</code>是一个<code>struct</code>，需要自己定义比较运算符。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ElemType</span>&#123;</span><br><span class="line">  <span class="type">int</span> a;</span><br><span class="line">  <span class="type">int</span> b; <span class="comment">//仅作举例 int</span></span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span> != (<span class="type">const</span> ElemType&amp; rhs);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> ElemType::<span class="keyword">operator</span> != (<span class="type">const</span> ElemType&amp; rhs)&#123;</span><br><span class="line">  <span class="built_in">return</span> (a!=rhs.a || b!=rhs.b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求表的长度：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">(LNode*&amp; L)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">  LNode* p = L;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    len++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尾插法建立单链表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LNode* <span class="title">List_TailInsert</span><span class="params">(LNode*&amp; L)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  L = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  LNode *s, *r=L;  <span class="comment">// r 指向最后一个元素</span></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123; <span class="comment">// 9999是退出值</span></span><br><span class="line">    s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    r-&gt;next = s;</span><br><span class="line">    r = s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  &#125;</span><br><span class="line">  r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>头插法建立单链表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//王道书的代码无法忍受，我自己写了。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">List_HeadInsert</span><span class="params">(LNode*&amp; L)</span></span>&#123;</span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123; <span class="comment">//9999 为退出值，当然也可以while(scanf(&quot;%d&quot;,&amp;x))&#123;&#125; ，看具体情况</span></span><br><span class="line">    <span class="built_in">InsertNextNode</span>(L, x);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结：单链表的全部操作"><a href="#总结：单链表的全部操作" class="headerlink" title="总结：单链表的全部操作"></a>总结：单链表的全部操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LNode*&amp; L)</span></span>&#123;</span><br><span class="line">  L = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));  <span class="comment">//分配一个头节点</span></span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;    <span class="comment">//内存不足，分配失败</span></span><br><span class="line">  L-&gt;next = <span class="literal">NULL</span>;             <span class="comment">//头节点之后暂时还没有节点</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(LNode* L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;  <span class="comment">//或者认为是 main() 函数也勉强可以</span></span><br><span class="line">  LNode* L;</span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextNode</span><span class="params">(LNode* p, ElemType e)</span></span>&#123; <span class="comment">//指定节点的后插操作</span></span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  s-&gt;data = e;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//思路：使用后插，然后交换数据成员的内容</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertPreNode</span><span class="params">(LNode* p, ElemType e)</span></span>&#123;  <span class="comment">//指定节点的前插操作</span></span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>) <span class="comment">//内存分配失败，考试可以不写</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  s-&gt;data = p-&gt;data;</span><br><span class="line">  p-&gt;data = e;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按位查找，返回第i个元素的指针</span></span><br><span class="line"><span class="function">LNode* <span class="title">GetElem</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  LNode* p;  <span class="comment">//指向当前扫描到的节点</span></span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">//当前p指向的是第几个节点</span></span><br><span class="line">  p = L;  <span class="comment">//指向头节点</span></span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LNode* <span class="title">LocateElem</span><span class="params">(LNode*&amp; L, ElemType e)</span></span>&#123; <span class="comment">//按值查找</span></span><br><span class="line">  LNode* p = L-&gt;next;</span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;data!=e)  <span class="comment">//注意细节，往上翻</span></span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入完成后新元素的位置为 i</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i, ElemType e)</span></span>&#123; <span class="comment">//按位序插入</span></span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* p = <span class="built_in">GetElem</span>(L, i<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">InsertNextNode</span>(p, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i, ElemType &amp;e)</span></span>&#123; <span class="comment">//按位序删除</span></span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* p = <span class="built_in">GetElem</span>(L, i<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)  <span class="comment">// i 值不合法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next==<span class="literal">NULL</span>) <span class="comment">//第i-1个节点之后已无其他节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* q = p-&gt;next; <span class="comment">//令q指向被删除节点</span></span><br><span class="line">  e = q-&gt;data; <span class="comment">//用e返回元素的值</span></span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除指定节点 p</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteNode</span><span class="params">(LNode* p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* q = p-&gt;next;</span><br><span class="line">  p-&gt;data = p-&gt;next-&gt;data;</span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">(LNode*&amp; L)</span></span>&#123; <span class="comment">//求表的长度</span></span><br><span class="line">  <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">  LNode* p = L;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    len++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LNode* <span class="title">List_TailInsert</span><span class="params">(LNode*&amp; L)</span></span>&#123; <span class="comment">//尾插法建立单链表</span></span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  L = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  LNode *s, *r=L;  <span class="comment">// r 指向最后一个元素</span></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123; <span class="comment">// 9999是退出值</span></span><br><span class="line">    s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    r-&gt;next = s;</span><br><span class="line">    r = s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  &#125;</span><br><span class="line">  r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">List_HeadInsert</span><span class="params">(LNode*&amp; L)</span></span>&#123; <span class="comment">//头插法建立单链表</span></span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123; <span class="comment">//9999 为退出值，当然也可以while(scanf(&quot;%d&quot;,&amp;x))&#123;&#125; ，看具体情况</span></span><br><span class="line">    <span class="built_in">InsertNextNode</span>(L, x);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><p>双链表的描述：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  DNode *pre, *next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitDList</span><span class="params">(DNode*&amp; L)</span></span>&#123;</span><br><span class="line">  L = (DNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));</span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//内存不足，分配失败</span></span><br><span class="line">  L-&gt;pre = <span class="literal">NULL</span>;</span><br><span class="line">  L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(DNode* L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">  DNode* L;</span><br><span class="line">  <span class="built_in">InitDList</span>(L);</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双链表的插入：</p><p><img src="https://bu.dusays.com/2023/07/13/64af6d656cba5.png" alt="46-3.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 p 节点之后插入 s 节点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertAfter</span><span class="params">(DNode* p, DNode* s)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span> || s==<span class="literal">NULL</span>) <span class="comment">//非法参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    p-&gt;next-&gt;pre = s;</span><br><span class="line">  s-&gt;pre = p;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双链表的删除和销毁：</p><p><img src="https://bu.dusays.com/2023/07/14/64b0ae3aa83d5.png" alt="46-4.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除 p 节点的后继节点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteAfter</span><span class="params">(DNode* p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  DNode* q = p-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(q==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(q-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    q-&gt;next-&gt;pre = p;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DestoryList</span><span class="params">(DNode*&amp; L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(L-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">DeleteAfter</span>(L);</span><br><span class="line">  <span class="built_in">free</span>(L);</span><br><span class="line">  L = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双链表的遍历：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后向遍历</span></span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">  <span class="comment">//do something on p</span></span><br><span class="line">  p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前向遍历</span></span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">  <span class="comment">//do something on p</span></span><br><span class="line">  p = p-&gt;pre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前向遍历（不处理头节点）</span></span><br><span class="line"><span class="keyword">while</span>(p-&gt;pre!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">  <span class="comment">//do something on p</span></span><br><span class="line">  p = p-&gt;pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p>循环单链表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LNode*&amp; L)</span></span>&#123;</span><br><span class="line">  L = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));  <span class="comment">//分配一个头节点</span></span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;    <span class="comment">//内存不足，分配失败</span></span><br><span class="line">  L-&gt;next = L;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(LNode* L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next==L)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isTail</span><span class="params">(LNode* L, LNode* p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next==L)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/07/15/64b1f2544dc77.png" alt="46-5.png"></p><p>具体代码可以自己实现，不再赘述。</p><p>循环双链表：</p><p><img src="https://bu.dusays.com/2023/07/15/64b1f39faa21e.png" alt="46-6.png"></p><p><img src="https://bu.dusays.com/2023/07/15/64b1f5e3b81a1.png" alt="46-7.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  DNode *pre, *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitDList</span><span class="params">(DNode*&amp; L)</span></span>&#123;</span><br><span class="line">  L = (DNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));</span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  L-&gt;pre = L;</span><br><span class="line">  L-&gt;next = L;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">  DNode* L;</span><br><span class="line">  <span class="built_in">InitDList</span>(L);</span><br><span class="line">  <span class="comment">//do something...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(DNode* L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next==L)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isTail</span><span class="params">(DNode* L, DNode* p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next==L)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后插操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 p 节点之后插入 s 节点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertAfter</span><span class="params">(DNode* p, DNode* s)</span></span>&#123;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next-&gt;pre = s;</span><br><span class="line">  s-&gt;pre = p;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除操作：</p><p><img src="https://bu.dusays.com/2023/07/15/64b1fbbd14de0.png" alt="46-8.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除 p 的后继节点 q</span></span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">q-&gt;next-&gt;pre = p;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br></pre></td></tr></table></figure><h3 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h3><p><img src="https://bu.dusays.com/2023/07/15/64b205c5c3f47.png" alt="46-9.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> Maxsize = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="type">int</span> next;  <span class="comment">//下一个元素的数组下标</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Node a[Maxsize];</span><br><span class="line">  <span class="comment">//do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/07/15/64b20bb881ba7.png" alt="46-10.png"></p><h2 id="栈、队列、数组"><a href="#栈、队列、数组" class="headerlink" title="栈、队列、数组"></a>栈、队列、数组</h2><p><del>这 tm 还要学？</del></p><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>顺序栈：代码自己实现。</p><p>共享栈：</p><p><img src="https://bu.dusays.com/2023/07/25/64bfeeb95d52e.jpg" alt="46-11.jpg"></p><p>链栈：通常采用<strong>不带头节点</strong>的单链表实现，所有操作在表头进行。</p><p><img src="https://bu.dusays.com/2023/07/25/64bff090644c8.png" alt="46-12.png" title="链栈"></p><p>队列：</p><p><img src="https://bu.dusays.com/2023/07/26/64bff2bc63399.jpg" alt="46-13.jpg"></p><p>循环队列：</p><p><img src="https://bu.dusays.com/2023/07/26/64c07a2fe98e8.jpg" alt="46-14.jpg"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MaxSize = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">myQueue</span>&#123;</span><br><span class="line">  ElemType data[MaxSize];</span><br><span class="line">  <span class="type">int</span> front, rear;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(myQueue&amp; qwq)</span></span>&#123; <span class="comment">//初始化</span></span><br><span class="line">  qwq.rear = qwq.front = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(myQueue qwq)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(qwq.rear==qwq.front) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">EnQueue</span><span class="params">(myQueue&amp; qwq, ElemType x)</span></span>&#123; <span class="comment">//入队</span></span><br><span class="line">  <span class="keyword">if</span>((qwq.rear+<span class="number">1</span>)%MaxSize==qwq.front)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">//队满则报错</span></span><br><span class="line">  qwq.data[qwq.rear] = x;</span><br><span class="line">  qwq.rear = (qwq.rear+<span class="number">1</span>) % MaxSize;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeQueue</span><span class="params">(myQueue&amp; qwq, ElemType&amp; x)</span></span>&#123;  <span class="comment">//出队</span></span><br><span class="line">  <span class="keyword">if</span>(qwq.rear==qwq.front) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//队空则报错</span></span><br><span class="line">  x = qwq.data[qwq.front];</span><br><span class="line">  qwq.front = (qwq.front+<span class="number">1</span>) % MaxSize;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>队列的链式存储（左开右闭？）：</p><p>通常采用<strong>带头节点</strong>的单链表。</p><p><img src="https://bu.dusays.com/2023/07/26/64c083cc0a7ad.png" alt="46-15.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LinkQueue</span>&#123;</span><br><span class="line">  LNode* front;</span><br><span class="line">  LNode* rear;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue&amp; qwq)</span></span>&#123;</span><br><span class="line">  qwq.front = qwq.rear = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode)); <span class="comment">//建立头节点</span></span><br><span class="line">  qwq.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">  LinkQueue qwq;  <span class="comment">//声明一个队列</span></span><br><span class="line">  <span class="built_in">InitQueue</span>(qwq);</span><br><span class="line">  <span class="comment">//do something...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(LinkQueue qwq)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(qwq.front==qwq.rear) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EnQueue</span><span class="params">(LinkQueue&amp; qwq, ElemType x)</span></span>&#123;  <span class="comment">//入队</span></span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNdoe));</span><br><span class="line">  s-&gt;data = x;</span><br><span class="line">  s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  qwq.rear-&gt;next = s;</span><br><span class="line">  qwq.rear = s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeQueue</span><span class="params">(LinkQueue&amp; qwq, ElemType&amp; x)</span></span>&#123; <span class="comment">//出队</span></span><br><span class="line">  <span class="keyword">if</span>(qwq.front==qwq.rear) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">//空队，失败</span></span><br><span class="line">  LNode* p = qwq.front-&gt;next;</span><br><span class="line">  x = p-&gt;data;</span><br><span class="line">  qwq.front-&gt;next = p-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(qwq.rear==p) qwq.rear = qwq.front;</span><br><span class="line">  <span class="built_in">free</span>(p);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p><strong>栈在括号匹配中的应用：</strong></p><p><img src="https://bu.dusays.com/2023/07/26/64c093105a785.png" alt="46-16.png"></p><p><strong>栈在表达式求值中的应用：</strong></p><p>Reverse Polish notation（逆波兰表达式 = 后缀表达式）</p><p>Polish notation（波兰表达式 = 前缀表达式）</p><p><img src="https://bu.dusays.com/2023/07/27/64c1d1a988b93.png" alt="46-17.png"></p><p><img src="https://bu.dusays.com/2023/07/27/64c1d4b2c6635.png" alt="46-18.png"></p><p><img src="https://bu.dusays.com/2023/07/27/64c1d98cf28ec.png" alt="46-18dot5.png"></p><p><img src="https://bu.dusays.com/2023/07/27/64c1d68c05225.png" alt="46-19.png"></p><p><img src="https://bu.dusays.com/2023/07/27/64c1daafecb11.png" alt="46-20.png"></p><p><img src="https://bu.dusays.com/2023/07/27/64c1de0b5e5cd.png" alt="46-21.png"></p><p>将<strong>中缀转后缀</strong>和<strong>后缀表达式求值</strong>两个算法结合起来：</p><p><img src="https://bu.dusays.com/2023/07/27/64c1e7130be48.png" alt="46-22.png"></p><h2 id="树、二叉树"><a href="#树、二叉树" class="headerlink" title="树、二叉树"></a>树、二叉树</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>有序树和无序树：</p><p><img src="https://bu.dusays.com/2023/07/30/64c5cea0b77e0.png" alt="46-23.png"></p><p><strong>注意：此课程中<code>度</code>的概念和离散数学中不同。</strong>（万恶的图论名词差异）</p><p><img src="https://bu.dusays.com/2023/07/30/64c5da5e65dc1.png" alt="46-24.png"></p><p>树的一些性质：（注意这里的“度数”是歧义概念）</p><ol><li>树中的节点数等于所有节点的度数之和加 1 </li><li>度为 m 的树中第 i 层上至多有 $m^{i-1}$ 个节点（$i\geqslant 1$）</li><li>高度为 h 的 m 叉树至多有 $\frac{m^h-1}{m-1}$ 个节点</li><li>具有 n 个节点的 m 叉树最小高度为 $\left \lceil \log_m(n(m-1)+1) \right \rceil$</li></ol><p>结论 4 的推导：</p><p>假设高度为 $h$ , 由结论3 ：</p><script type="math/tex; mode=display">\frac{m^{h-1}-1}{m-1}< n \leqslant \frac{m^h-1}{m-1}</script><script type="math/tex; mode=display">m^{h-1}<n(m-1)+1\leqslant m^h</script><script type="math/tex; mode=display">h-1<\log_m(n(m-1)+1)\leqslant h</script><script type="math/tex; mode=display">h_{\min}=\left \lceil \log_m(n(m-1)+1) \right \rceil</script><p>满二叉树、完全二叉树的性质：</p><p><img src="https://bu.dusays.com/2023/08/03/64ca86a48e788.png" alt="46-25.png"></p><p>二叉排序树：</p><p><img src="https://bu.dusays.com/2023/08/03/64ca884b17442.png" alt="46-26.png"></p><p>平衡二叉树：</p><p><img src="https://bu.dusays.com/2023/08/03/64ca899918de1.png" alt="46-27.png"></p><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><p>设非空二叉树中<code>度</code>（歧义概念）为 0、1、2 的节点个数分别为 n0、n1、n2 , 则 $n_0=n_2+1$ （叶子节点比二分枝节点多一个）。推导如下：</p><p>假设树中节点总数为 n , 则：</p><ul><li>$n = n_0 + n_1 + n_2$</li><li>$n = n_1 + 2n_2 + 1$</li></ul><p>具有 n 个（n&gt;0）节点的完全二叉树的高度 h 为 $\left \lceil \log_2(n+1) \right \rceil$ 或 $\left \lfloor \log_2n \right \rfloor +1$. （推导不难）</p><p>某个性质：</p><p><img src="https://bu.dusays.com/2023/08/03/64ca8fc557c02.png" alt="46-28.png"></p><h3 id="二叉树的存储"><a href="#二叉树的存储" class="headerlink" title="二叉树的存储"></a>二叉树的存储</h3><p>顺序存储（<strong>绝大多数情况下不会使用</strong>）：</p><p><img src="https://bu.dusays.com/2023/08/04/64cd1cbbed56f.png" alt="46-29.png"></p><p>完全二叉树的此种存储结构的操作：</p><p><img src="https://bu.dusays.com/2023/08/04/64cd1dc4cced1.png" alt="46-30.png"></p><p>对于非完全二叉树：</p><p><img src="https://bu.dusays.com/2023/08/04/64cd1f309b356.png" alt="46-31.png" title="丑陋的做法"></p><p>链式存储：</p><p><img src="https://bu.dusays.com/2023/08/04/64cd206123c45.png" alt="46-32.png"></p><p>代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ElemType</span>&#123;</span><br><span class="line">  <span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BinoTree</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  BinoTree* lchild;</span><br><span class="line">  BinoTree* rchild;</span><br><span class="line">  <span class="comment">//可以根据需要加上指向父节点的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一棵空树</span></span><br><span class="line">BinoTree* root = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入根节点</span></span><br><span class="line">root = (BinoTree*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BinoTree));</span><br><span class="line">root-&gt;data = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">root-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入新节点（例子）</span></span><br><span class="line">BinoTree* p = (BinoTree*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BinoTree));</span><br><span class="line">p-&gt;data = &#123;<span class="number">2</span>&#125;;</span><br><span class="line">p-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;lchild = p;</span><br></pre></td></tr></table></figure><p>上面代码对应的图：</p><p><img src="https://bu.dusays.com/2023/08/05/64cd2344bffb8.png" alt="46-33.png"></p><h3 id="先、中、后序遍历"><a href="#先、中、后序遍历" class="headerlink" title="先、中、后序遍历"></a>先、中、后序遍历</h3><ul><li><strong>先</strong>序遍历：<strong>根</strong>、左、右（<strong>N</strong>LR）</li><li><strong>中</strong>序遍历：左、<strong>根</strong>、右（L<strong>N</strong>R）</li><li><strong>后</strong>序遍历：左、右、<strong>根</strong>（LR<strong>N</strong>）</li></ul><p>例子：</p><p><img src="https://bu.dusays.com/2023/08/05/64cd286999c76.png" alt="46-34.png"></p><p>和表达式的联系：</p><p><img src="https://bu.dusays.com/2023/08/05/64cd298d710cc.png" alt="46-35.png"></p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">(BinoTree* T)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">visit</span>(T);             <span class="comment">//访问根节点</span></span><br><span class="line">    <span class="built_in">preOrder</span>(T-&gt;lchild);  <span class="comment">//访问左孩子</span></span><br><span class="line">    <span class="built_in">preOrder</span>(T-&gt;rchild);  <span class="comment">//访问右孩子</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrder</span><span class="params">(BinoTree* T)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">inOrder</span>(T-&gt;lchild);  <span class="comment">//访问左孩子</span></span><br><span class="line">    <span class="built_in">visit</span>(T);            <span class="comment">//访问根节点</span></span><br><span class="line">    <span class="built_in">inOrder</span>(T-&gt;rchild);  <span class="comment">//访问右孩子</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">(BinoTree* T)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">postOrder</span>(T-&gt;lchild);  <span class="comment">//访问左孩子</span></span><br><span class="line">    <span class="built_in">postOrder</span>(T-&gt;rchild);  <span class="comment">//访问右孩子</span></span><br><span class="line">    <span class="built_in">visit</span>(T);              <span class="comment">//访问根节点</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><p>其实就是 BFS 。</p><p><img src="https://bu.dusays.com/2023/08/07/64cff1caf36aa.png" alt="46-36.png"></p><p>执行算法：</p><ol><li>初始化一个辅助队列</li><li>根节点入队</li><li>若队列非空，弹队首，访问弹出的节点，并将其孩子（若有）入队</li><li>重复 3 直至队列为空</li></ol><p>伪代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：我使用了自己习惯的写法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">  queue&lt;node&gt; qwq;</span><br><span class="line">  node temp;</span><br><span class="line">  <span class="comment">//do something...</span></span><br><span class="line">  qwq.<span class="built_in">push</span>(temp);</span><br><span class="line">  <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>())&#123;</span><br><span class="line">    node head = qwq.<span class="built_in">front</span>(); <span class="comment">//取队首</span></span><br><span class="line">    qwq.<span class="built_in">pop</span>();               <span class="comment">//弹队首</span></span><br><span class="line">    <span class="comment">//do something...</span></span><br><span class="line">    qwq.<span class="built_in">push</span>((node)&#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个 BFS 剪枝的实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://www.luogu.com.cn/problem/P1126 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,sx,sy,ex,ey;</span><br><span class="line"><span class="type">char</span> face; <span class="type">bool</span> ok=<span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">53</span>][<span class="number">53</span>],ans;</span><br><span class="line"><span class="type">int</span> fx[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">53</span>][<span class="number">53</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="type">int</span> dir,step;</span><br><span class="line">    <span class="type">bool</span> chan;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">changedir</span><span class="params">(<span class="type">int</span> dirt,<span class="type">int</span> xia)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xia==<span class="number">0</span>)<span class="keyword">return</span> (dirt+<span class="number">1</span>)%<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(xia==<span class="number">233</span>)<span class="built_in">return</span> (dirt+<span class="number">2</span>)%<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">return</span> (dirt<span class="number">-1</span>+<span class="number">4</span>)%<span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">1</span>||x&gt;=n||y&lt;<span class="number">1</span>||y&gt;=m)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[x][y]||a[x+<span class="number">1</span>][y])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[x][y+<span class="number">1</span>]||a[x+<span class="number">1</span>][y+<span class="number">1</span>])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;node&gt; qwq;</span><br><span class="line">    node temp;</span><br><span class="line">    temp.x=sx;temp.y=sy;</span><br><span class="line">    <span class="keyword">if</span>(face==<span class="string">&#x27;E&#x27;</span>)temp.dir=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(face==<span class="string">&#x27;S&#x27;</span>)temp.dir=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(face==<span class="string">&#x27;W&#x27;</span>)temp.dir=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(face==<span class="string">&#x27;N&#x27;</span>)temp.dir=<span class="number">3</span>;</span><br><span class="line">    temp.step=<span class="number">0</span>; temp.chan=<span class="literal">false</span>;</span><br><span class="line">    qwq.<span class="built_in">push</span>(temp);</span><br><span class="line">    vis[temp.x][temp.y]=<span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node head=qwq.<span class="built_in">front</span>();</span><br><span class="line">        qwq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> nx=head.x+fx[head.dir][<span class="number">0</span>]*i;</span><br><span class="line">            <span class="type">int</span> ny=head.y+fx[head.dir][<span class="number">1</span>]*i;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">check</span>(nx,ny))<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(vis[nx][ny])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(nx==ex&amp;&amp;ny==ey)</span><br><span class="line">            &#123;</span><br><span class="line">                ans=head.step+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            qwq.<span class="built_in">push</span>((node)&#123;nx,ny,head.dir,head.step+<span class="number">1</span>,<span class="literal">false</span>&#125;);</span><br><span class="line">            vis[nx][ny]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(head.chan)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> dirti=<span class="built_in">changedir</span>(head.dir,<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> dirti2=<span class="built_in">changedir</span>(head.dir,<span class="number">1</span>);</span><br><span class="line">        qwq.<span class="built_in">push</span>((node)&#123;head.x,head.y,dirti,head.step+<span class="number">1</span>,<span class="literal">true</span>&#125;);</span><br><span class="line">        qwq.<span class="built_in">push</span>((node)&#123;head.x,head.y,dirti2,head.step+<span class="number">1</span>,<span class="literal">true</span>&#125;);</span><br><span class="line">        <span class="keyword">if</span>(ok)</span><br><span class="line">        &#123;</span><br><span class="line">            ok=<span class="literal">false</span>;</span><br><span class="line">            <span class="type">int</span> dirti3=<span class="built_in">changedir</span>(head.dir,<span class="number">233</span>);</span><br><span class="line">            qwq.<span class="built_in">push</span>((node)&#123;head.x,head.y,dirti3,head.step+<span class="number">2</span>,<span class="literal">true</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">    cin&gt;&gt;a[i][j];</span><br><span class="line">    cin&gt;&gt;sx&gt;&gt;sy&gt;&gt;ex&gt;&gt;ey&gt;&gt;face;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(sx==ex&amp;&amp;sy==ey)cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">bfs</span>())cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;-1&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意在树或者图中需要在具体的数据结构上实现 BFS ，例如链式前向星。</p><p>有必要给出应试代码，以下代码只适合二叉树：</p><p><img src="https://bu.dusays.com/2023/08/07/64cffa921914e.png" alt="46-37.png"></p><h3 id="由遍历序列构造二叉树"><a href="#由遍历序列构造二叉树" class="headerlink" title="由遍历序列构造二叉树"></a>由遍历序列构造二叉树</h3><p><strong>若只给出一棵二叉树的 前/中/后/层 序遍历序列中的一种，不能唯一确定一棵二叉树。</strong></p><p>由二叉树的遍历序列构造二叉树，需已知以下三种信息中的任一种：</p><ul><li>前序+中序 遍历序列</li><li>后序+中序 遍历序列</li><li>层序+中序 遍历序列</li></ul><p>由前序+中序遍历序列确定二叉树：</p><p><img src="https://bu.dusays.com/2023/08/07/64d06d5f516a2.png" alt="46-38.png"></p><p>由后序+中序遍历序列确定二叉树：</p><p><img src="https://bu.dusays.com/2023/08/07/64d06f71eb257.png" alt="46-39.png"></p><p>由层序+中序遍历序列确定二叉树：</p><p><img src="https://bu.dusays.com/2023/08/07/64d07112e74a7.png" alt="46-40.png"></p><p>补充说明：</p><p><img src="https://bu.dusays.com/2023/08/07/64d072c56670f.png" alt="46-41.png"></p><h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><p>问题的引入：</p><p><img src="https://bu.dusays.com/2023/08/08/64d2555c0a6a8.png" alt="46-42.png"></p><p>线索二叉树的概念：</p><p><img src="https://bu.dusays.com/2023/08/08/64d25759b60ca.png" alt="46-43.png"></p><p>线索二叉树的存储结构：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ThreadNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  TreadNode* lchild;</span><br><span class="line">  TreadNode* rchild;</span><br><span class="line">  <span class="type">bool</span> ltag, rtag;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// tag==0 , 表示指针指向孩子</span></span><br><span class="line"><span class="comment">// tag==1 , 表示指针是“线索”</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/08/64d259e53306c.png" alt="46-44.png"></p><p>先序线索二叉树：</p><p><img src="https://bu.dusays.com/2023/08/08/64d25b0b5f446.png" alt="46-45.png"></p><p>后序线索二叉树：</p><p><img src="https://bu.dusays.com/2023/08/08/64d25c19b03fd.png" alt="46-46.png"></p><p>中序线索化代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ThreadNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  TreadNode* lchild;</span><br><span class="line">  TreadNode* rchild;</span><br><span class="line">  <span class="type">bool</span> ltag, rtag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ThreadNode* pre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(ThreadNode* q)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(q-&gt;lchild==<span class="literal">NULL</span>)&#123; <span class="comment">//左子树为空，建立前驱线索</span></span><br><span class="line">    q-&gt;lchild = pre;</span><br><span class="line">    q-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(pre!=<span class="literal">NULL</span> &amp;&amp; pre-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    pre-&gt;rchild = q;</span><br><span class="line">    pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pre = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inThread</span><span class="params">(ThreadNode* T)</span></span>&#123; <span class="comment">//中序遍历二叉树，一边遍历一边线索化</span></span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">inThread</span>(T-&gt;lchild);  <span class="comment">//访问左孩子</span></span><br><span class="line">    <span class="built_in">visit</span>(T);             <span class="comment">//访问根节点</span></span><br><span class="line">    <span class="built_in">inThread</span>(T-&gt;rchild);  <span class="comment">//访问右孩子</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateInThread</span><span class="params">(ThreadNode* T)</span></span>&#123; <span class="comment">//最后调用这个函数即可</span></span><br><span class="line">  pre = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123; <span class="comment">//二叉树非空</span></span><br><span class="line">    <span class="built_in">inThread</span>(T);</span><br><span class="line">    <span class="keyword">if</span>(pre-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">      pre-&gt;rtag = <span class="number">1</span>; <span class="comment">//处理遍历的最后一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先序线索化代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ThreadNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  TreadNode* lchild;</span><br><span class="line">  TreadNode* rchild;</span><br><span class="line">  <span class="type">bool</span> ltag, rtag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ThreadNode* pre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(ThreadNode* q)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(q-&gt;lchild==<span class="literal">NULL</span>)&#123; <span class="comment">//左子树为空，建立前驱线索</span></span><br><span class="line">    q-&gt;lchild = pre;</span><br><span class="line">    q-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(pre!=<span class="literal">NULL</span> &amp;&amp; pre-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    pre-&gt;rchild = q;</span><br><span class="line">    pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pre = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preThread</span><span class="params">(ThreadNode* T)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">visit</span>(T);</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;ltag==<span class="number">0</span>)   <span class="comment">//防止原地转圈</span></span><br><span class="line">      <span class="built_in">preThread</span>(T-&gt;lchild);</span><br><span class="line">    <span class="built_in">preThread</span>(T-&gt;rchild);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreatePreThread</span><span class="params">(ThreadNode* T)</span></span>&#123;</span><br><span class="line">  pre = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">preThread</span>(T);</span><br><span class="line">    <span class="keyword">if</span>(pre-&gt;rchild==<span class="literal">NULL</span>)</span><br><span class="line">      pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后序线索化代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ThreadNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  TreadNode* lchild;</span><br><span class="line">  TreadNode* rchild;</span><br><span class="line">  <span class="type">bool</span> ltag, rtag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ThreadNode* pre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(ThreadNode* q)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(q-&gt;lchild==<span class="literal">NULL</span>)&#123; <span class="comment">//左子树为空，建立前驱线索</span></span><br><span class="line">    q-&gt;lchild = pre;</span><br><span class="line">    q-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(pre!=<span class="literal">NULL</span> &amp;&amp; pre-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    pre-&gt;rchild = q;</span><br><span class="line">    pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pre = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postThread</span><span class="params">(ThreadNode* T)</span></span>&#123; <span class="comment">//中序遍历二叉树，一边遍历一边线索化</span></span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">postThread</span>(T-&gt;lchild);  <span class="comment">//访问左孩子</span></span><br><span class="line">    <span class="built_in">postThread</span>(T-&gt;rchild);  <span class="comment">//访问右孩子</span></span><br><span class="line">    <span class="built_in">visit</span>(T);               <span class="comment">//访问根节点</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreatePostThread</span><span class="params">(ThreadNode* T)</span></span>&#123; <span class="comment">//最后调用这个函数即可</span></span><br><span class="line">  pre = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123; <span class="comment">//二叉树非空</span></span><br><span class="line">    <span class="built_in">postThread</span>(T);</span><br><span class="line">    <span class="keyword">if</span>(pre-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">      pre-&gt;rtag = <span class="number">1</span>; <span class="comment">//处理遍历的最后一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中序线索二叉树找中序后继：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ThreadNode* <span class="title">firstNode</span><span class="params">(ThreadNode* p)</span></span>&#123;</span><br><span class="line">  <span class="comment">//找到以p为根的子树中，第一个被中序遍历的节点</span></span><br><span class="line">  <span class="comment">//循环找到最左下节点（不一定是叶子节点）</span></span><br><span class="line">  <span class="keyword">while</span>(p-&gt;ltag==<span class="number">0</span>) p = p-&gt;lchild;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ThreadNode* <span class="title">nextNode</span><span class="params">(ThreadNode* p)</span></span>&#123;</span><br><span class="line">  <span class="comment">//在中序线索二叉树中找到节点p的后继节点</span></span><br><span class="line">  <span class="keyword">if</span>(p-&gt;rtag==<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">firstNode</span>(p-&gt;rchild);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrderScan</span><span class="params">(ThreadNode* T)</span></span>&#123;</span><br><span class="line">  <span class="comment">//对中序线索二叉树进行中序遍历</span></span><br><span class="line">  <span class="keyword">for</span>(ThreadNode* p=<span class="built_in">firstNode</span>(T); p!=<span class="literal">NULL</span>; p=<span class="built_in">nextNode</span>(p))&#123;</span><br><span class="line">    <span class="built_in">visit</span>(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中序线索二叉树找中序前驱思路（上面找后继的思路类似，不回头补了）：</p><p><img src="https://bu.dusays.com/2023/08/11/64d5c35930c85.png" alt="46-47.png"></p><p>中序线索二叉树找中序前驱代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ThreadNode* <span class="title">lastNode</span><span class="params">(ThreadNode* p)</span></span>&#123;</span><br><span class="line">  <span class="comment">//找到以p为根的子树中，最后一个被中序遍历的节点</span></span><br><span class="line">  <span class="comment">//循环找到最右下节点（不一定是叶子节点）</span></span><br><span class="line">  <span class="keyword">while</span>(p-&gt;rtag==<span class="number">0</span>) p = p-&gt;rchild;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ThreadNode* <span class="title">preNode</span><span class="params">(ThreadNode* p)</span></span>&#123;</span><br><span class="line">  <span class="comment">//在中序线索二叉树中找到节点p的前驱节点</span></span><br><span class="line">  <span class="keyword">if</span>(p-&gt;ltag==<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">lastNode</span>(p-&gt;lchild);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">revInOrderScan</span><span class="params">(ThreadNode* T)</span></span>&#123;</span><br><span class="line">  <span class="comment">//对中序线索二叉树进行逆向中序遍历</span></span><br><span class="line">  <span class="keyword">for</span>(ThreadNode* p=<span class="built_in">lastNode</span>(T); p!=<span class="literal">NULL</span>; p=<span class="built_in">preNode</span>(p))&#123;</span><br><span class="line">    <span class="built_in">visit</span>(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先序线索二叉树找先序后继：</p><p><img src="https://bu.dusays.com/2023/08/12/64d77c960c0db.png" alt="46-48.png"></p><p>先序线索二叉树找先序前驱：</p><p><img src="https://bu.dusays.com/2023/08/12/64d77e38e02e9.png" alt="46-49.png"></p><p>可以发现，按照之前的思路无法实现。但是，<strong>如果每个节点增加指向其父节点的指针</strong>，则可以有如下思路：</p><p><img src="https://bu.dusays.com/2023/08/12/64d7814d613db.png" alt="46-50.png"></p><p>后序线索二叉树找后序前驱：</p><p><img src="https://bu.dusays.com/2023/08/12/64d7851a3c4b8.png" alt="46-51.png"></p><p>后序线索二叉树找后序后继：</p><p><img src="https://bu.dusays.com/2023/08/12/64d786f38d68b.png" alt="46-52.png"></p><p>可以发现，按照之前的思路无法实现。但是，<strong>如果每个节点增加指向其父节点的指针</strong>，则可以有如下思路：</p><p><img src="https://bu.dusays.com/2023/08/12/64d78920217db.png" alt="46-53.png"></p><p>总结：</p><p><img src="https://bu.dusays.com/2023/08/12/64d78b5668b06.png" alt="46-54.png"></p><h3 id="树、森林"><a href="#树、森林" class="headerlink" title="树、森林"></a>树、森林</h3><p>孩子兄弟表示法（很怪，感觉不实用）：</p><p><img src="https://bu.dusays.com/2023/08/17/64de166bd22ae.png" alt="46-55.png"></p><p>树和二叉树的转化：</p><p><img src="https://bu.dusays.com/2023/08/17/64de166bec18b.png" alt="46-56.png"></p><p>森林和二叉树的转换：</p><p><img src="https://bu.dusays.com/2023/08/17/64de192903f92.png" alt="46-57.png"></p><p>树的遍历：先根遍历、后根遍历、层序遍历。</p><p><img src="https://bu.dusays.com/2023/08/17/64de23c944173.png" alt="46-58.png"></p><p>森林的遍历：先序遍历、中序遍历。</p><p><img src="https://bu.dusays.com/2023/08/17/64de2c050f3ac.png" alt="46-59.png"></p><p><strong>特别提醒：</strong> 以上只是一个应试的可选补充，熟悉 OI 代码直接在纸上写 OI 代码即可。例如树的遍历，采用链式前向星：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,w,next;&#125;edge[MAXM];</span><br><span class="line"><span class="type">int</span> tot,head[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].w=z;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问所有与 x 相接的点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">    <span class="type">int</span> y=edge[i].v;</span><br><span class="line">    <span class="comment">//do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树与二叉树的应用"><a href="#树与二叉树的应用" class="headerlink" title="树与二叉树的应用"></a>树与二叉树的应用</h3><p>Huffman树：<a href="https://loveofpeach.github.io/posts/9e22caea.html#Huffman%E6%A0%91">https://loveofpeach.github.io/posts/9e22caea.html#Huffman%E6%A0%91</a></p><p>性质：n 个叶子节点最终构成的 Huffman 树节点总数为 2n-1 .</p><p>Huffman 编码：</p><p><img src="https://bu.dusays.com/2023/08/22/64e418f094b72.png" alt="46-60.png"></p><p>并查集：<a href="https://loveofpeach.github.io/posts/9e22caea.html#%E5%B9%B6%E6%9F%A5%E9%9B%86">https://loveofpeach.github.io/posts/9e22caea.html#%E5%B9%B6%E6%9F%A5%E9%9B%86</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">10010</span>;</span><br><span class="line"><span class="type">int</span> uset[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">makeset</span><span class="params">(<span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)uset[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x!=uset[x])uset[x]=<span class="built_in">find</span>(uset[x]);</span><br><span class="line">    <span class="keyword">return</span> uset[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unionset</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x);</span><br><span class="line">    y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span>;</span><br><span class="line">    uset[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m; cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">makeset</span>(n+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> z,x,y;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;z,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(z==<span class="number">1</span>)<span class="built_in">unionset</span>(x,y);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(z==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Y\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;N\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>邻接矩阵的某个性质（建议配合离散数学食用）：</p><p><img src="https://bu.dusays.com/2023/08/22/64e421f6699fc.png" alt="46-61.png"></p><p>类似地，有：</p><p><img src="https://bu.dusays.com/2023/08/22/64e42bcc38418.png" alt="46-62.png"></p><p>邻接表法：</p><p><img src="https://bu.dusays.com/2023/08/24/64e6396f9356b.png" alt="46-63.png" title="丑陋的做法"></p><p>十字链表存储有向图，空间复杂度 $O(|V|+|E|)$</p><ul><li>只用于存储有向图</li><li>找到指定顶点的所有出边：顺着绿色线路找</li><li>找到指定顶点的所有入边：顺着橙色线路找</li></ul><p><img src="https://bu.dusays.com/2023/08/24/64e63bac84460.png" alt="46-64.png" title="非常丑陋的做法"></p><p>邻接多重表存储无向图，空间复杂度 $O(|V|+|E|)$</p><ul><li>只能用于存储无向图</li><li>删除边、删除节点等操作“很方便”</li></ul><p><img src="https://bu.dusays.com/2023/08/24/64e63eebc0175.png" alt="46-65.png" title="让人怀疑这个世界其实不算糟"></p><p><strong>我选择，链式前向星。希望阅卷老师能看懂。</strong></p><h3 id="图的基本操作"><a href="#图的基本操作" class="headerlink" title="图的基本操作"></a>图的基本操作</h3><p><code>Adjacent(G, x, y)</code> ：判断图 G 是否存在边<code>&lt;x,y&gt;</code>或<code>(x,y)</code></p><ul><li>无向图<ul><li>邻接矩阵时间复杂度 $O(1)$</li><li>邻接表时间复杂度 $O(1)\rightarrow O(|V|)$</li></ul></li><li>有向图<ul><li>邻接矩阵时间复杂度 $O(1)$</li><li>邻接表时间复杂度 $O(1)\rightarrow O(|V|)$</li></ul></li></ul><p><code>Neighbors(G, x)</code> ：列出图 G 中与节点 x 邻接的边</p><ul><li>无向图<ul><li>邻接矩阵时间复杂度 $O(|V|)$</li><li>邻接表时间复杂度 $O(1) \rightarrow O(|V|)$</li></ul></li><li>有向图<ul><li>邻接矩阵时间复杂度 $O(|V|)$</li><li>邻接表时间复杂度<ul><li>出边 $O(1) \rightarrow O(|V|)$</li><li>入边 $O(|E|)$</li></ul></li></ul></li></ul><p><code>InsertVertex(G, x)</code> ：在图 G 中插入顶点 x</p><ul><li>无向图和有向图时间复杂度相同<ul><li>邻接矩阵时间复杂度 $O(1)$</li><li>邻接表时间复杂度 $O(1)$</li></ul></li></ul><p><code>DeleteVertex(G, x)</code> ：从图 G 中删除顶点 x</p><ul><li>无向图<ul><li>邻接矩阵时间复杂度 $O(|V|)$</li><li>邻接表时间复杂度 $O(1) \rightarrow O(|E|)$</li></ul></li><li>有向图<ul><li>邻接矩阵时间复杂度 $O(|V|)$</li><li>邻接表时间复杂度<ul><li>删出边 $O(1) \rightarrow O(|V|)$</li><li>删入边 $O(|E|)$</li></ul></li></ul></li></ul><p><code>AddEdge(G, x, y)</code> ：加边</p><ul><li>无向图和有向图类似<ul><li>邻接矩阵 $O(1)$</li><li>邻接表 $O(1)$ （头插法）</li></ul></li></ul><p><code>FirstNeighbor(G, x)</code> ：求图 G 中顶点 x 的第一个邻接点，若有返回顶点号；若没有或者根本不存在 x ，返回 -1</p><ul><li>无向图<ul><li>邻接矩阵 $O(1) \rightarrow O(|V|)$</li><li>邻接表 $O(1)$</li></ul></li><li>有向图<ul><li>邻接矩阵 $O(1) \rightarrow O(|V|)$</li><li>邻接表<ul><li>找出边邻接点 $O(1)$</li><li>找入边邻接点 $O(1) \rightarrow O(|E|)$</li></ul></li></ul></li></ul><p><code>NextNeighbor(G, x, y)</code> ：假设图 G 中顶点 y 是顶点 x 的一个邻接点，返回除 y 外顶点 x 的下一个邻接点的顶点号，若 y 是 x 的最后一个邻接点，返回 -1</p><ul><li>无向图<ul><li>邻接矩阵 $O(1) \rightarrow O(|V|)$</li><li>邻接表 $O(1)$</li></ul></li><li>有向图类似</li></ul><p><code>Get_edge_value(G, x, y)</code> ：获取图 G 中边对应的权值。 $\quad$ <code>Set_edge_value(G, x, y, v)</code> ：设置图 G 中边对应的权值为 v</p><ul><li>与<code>Adjacent(G, x, y)</code>（判断是否存在边）雷同，核心在于找到边。因此时间复杂度为：<ul><li>邻接矩阵 $O(1)$</li><li>邻接表 $O(1) \rightarrow O(|V|)$</li></ul></li></ul><h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><p>一、BFS</p><p>对教科书代码留个印象：</p><p><img src="https://bu.dusays.com/2023/08/24/64e6d8e84767d.png" alt="46-66.png"></p><p>同一个图的邻接矩阵表示方式唯一，因此广度优先遍历序列唯一。同一个图的邻接表表示方式不唯一，因此广度优先遍历序列不唯一。</p><p>复杂度分析：</p><p><img src="https://bu.dusays.com/2023/08/24/64e6daaae2057.png" alt="46-67.png"></p><p>广度优先生成树：</p><p><img src="https://bu.dusays.com/2023/08/24/64e6dc2968673.png" alt="46-68.png"></p><p>广度优先生成森林：</p><p><img src="https://bu.dusays.com/2023/08/24/64e6dd5f89412.png" alt="46-69.png"></p><p>二、DFS</p><p>对教科书代码留个印象：</p><p><img src="https://bu.dusays.com/2023/08/26/64e8d5b469269.png" alt="46-70.png"></p><p>复杂度分析：</p><p><img src="https://bu.dusays.com/2023/08/26/64e8d5b438391.png" alt="46-71.png"></p><p>同一个图的邻接矩阵表示方式唯一，因此深度优先遍历序列唯一。同一个图的邻接表表示方式不唯一，因此深度优先遍历序列不唯一。</p><p>深度优先生成树、深度优先生成森林，与之前提到的类似，不再赘述。</p><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><p>一睹芳容：</p><p><img src="https://bu.dusays.com/2023/08/26/64e967557ab2a.png" alt="46-72.png"></p><p>Prim 算法的实现思想：</p><p><img src="https://bu.dusays.com/2023/08/26/64e96a53a97ec.png" alt="46-73.png"></p><p>下面给出 kruscal 代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//kruscal</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">200000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> u,v,w;&#125;edge[MAXM];</span><br><span class="line"><span class="type">int</span> uset[MAXN],n,m,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(uset[x]!=x)uset[x]=<span class="built_in">find</span>(uset[x]);</span><br><span class="line">    <span class="keyword">return</span> uset[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unionset</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x);</span><br><span class="line">    y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span>;</span><br><span class="line">    uset[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Edge x,Edge y)</span></span>&#123;<span class="keyword">return</span> x.w&lt;y.w;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        edge[i].u=x;</span><br><span class="line">        edge[i].v=y;</span><br><span class="line">        edge[i].w=z;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(edge+<span class="number">1</span>,edge+<span class="number">1</span>+m,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)uset[i]=i;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">find</span>(edge[i].u);</span><br><span class="line">        <span class="type">int</span> y=<span class="built_in">find</span>(edge[i].v);</span><br><span class="line">        <span class="keyword">if</span>(x==y)<span class="keyword">continue</span>;</span><br><span class="line">        ans+=edge[i].w;</span><br><span class="line">        <span class="built_in">unionset</span>(x,y);</span><br><span class="line">        <span class="keyword">if</span>(++cnt==n<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt&lt;n<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">&quot;orz&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h3><p>SPFA 算法（用于求单源最短路径）：</p><ul><li>AKA, 队列优化的 Bellman-Ford 算法</li><li><strong>允许图中存在负权边</strong></li><li><strong>不可求负环</strong>，可判断负环</li><li>在稀疏图上效率较高，时间复杂度 $O(km)$ , k 为较小的常数</li><li>在稠密图或<strong>特殊构造的</strong>网格图上，算法可能退化为 $O(nm)$</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPFA</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM 500010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 10010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,s,dis[MAXN];</span><br><span class="line"><span class="type">bool</span> inq[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,w,next;&#125;edge[MAXM];</span><br><span class="line"><span class="type">int</span> tot,head[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].w=z;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; qwq;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis[i]=INF;</span><br><span class="line">    </span><br><span class="line">    qwq.<span class="built_in">push</span>(s);</span><br><span class="line">    dis[s]=<span class="number">0</span>;inq[s]=<span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=qwq.<span class="built_in">front</span>();</span><br><span class="line">        qwq.<span class="built_in">pop</span>(); inq[x]=<span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">            <span class="type">int</span> y=edge[i].v;</span><br><span class="line">            <span class="keyword">if</span>(dis[y]&gt;dis[x]+edge[i].w)&#123;</span><br><span class="line">                dis[y]=dis[x]+edge[i].w;</span><br><span class="line">                <span class="keyword">if</span>(!inq[y])&#123;qwq.<span class="built_in">push</span>(y);inq[y]=<span class="literal">true</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">spfa</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">     <span class="keyword">if</span>(s==i)<span class="built_in">printf</span>(<span class="string">&quot;0 &quot;</span>);</span><br><span class="line">     <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dijkstra 算法（用于求单源最短路径）：</p><ul><li><strong>要求图的边权为正</strong></li><li>可以求环</li><li>时间复杂度：<ul><li>考试中可认为（也就是未优化的算法版本）复杂度是 $O(n^2)$</li><li>若用二叉堆（C++ STL <code>priority_queue</code>）维护 dist 数组，最终可以得到 $O((m+n)\log n)$ 的复杂度</li></ul></li></ul><p><img src="https://bu.dusays.com/2023/08/26/64e9769b23a1f.png" alt="46-74.png" title="Dijkstra算法执行流程"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dijkstra</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM 200010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF =<span class="number">2147483647</span>;</span><br><span class="line"><span class="type">int</span> n,m,s,dis[MAXN];</span><br><span class="line"><span class="type">bool</span> done[MAXN];</span><br><span class="line"><span class="type">int</span> tot,head[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,w,next;&#125;edge[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].w=z;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,dist;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node&amp; v)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dist&gt;v.dist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;node&gt; qwq;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis[i]=INF;</span><br><span class="line">    dis[s]=<span class="number">0</span>;</span><br><span class="line">    qwq.<span class="built_in">push</span>((node)&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node front=qwq.<span class="built_in">top</span>(); qwq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> u=front.u,dist=front.dist;</span><br><span class="line">        <span class="keyword">if</span>(done[u])<span class="keyword">continue</span>;</span><br><span class="line">        done[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> y=edge[i].v,z=edge[i].w;</span><br><span class="line">            <span class="keyword">if</span>(dis[u]+z&lt;dis[y])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[y]=dis[u]+z;</span><br><span class="line">                qwq.<span class="built_in">push</span>((node)&#123;y,dis[y]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line">    <span class="type">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dijkstra</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dijkstra 输出路径：</p><p><img src="https://bu.dusays.com/2023/08/26/64e9827b0392a.png" alt="46-75.png"></p><p>Floyd 算法：</p><ul><li><strong>允许图中存在负权边，不可求负环</strong></li><li>算法模板的提交入口：<a href="https://www.luogu.com.cn/problem/B3647">B3647 【模板】Floyd 算法</a></li><li>关于该算法及其相对深入点的情况，请参见：<a href="https://loveofpeach.github.io/posts/a050ca88.html">https://loveofpeach.github.io/posts/a050ca88.html</a></li></ul><p>喜闻乐见的人脑模拟算法执行：</p><p><img src="https://bu.dusays.com/2023/08/29/64ee0ac5517cd.png" alt="46-76.png"></p><p>找路径：</p><p><img src="https://bu.dusays.com/2023/08/29/64ee0abf6f76c.png" alt="46-77.png"></p><p>Floyd 代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a,b) ((a)&lt;(b)?(a):(b))</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">103</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">4503</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = (<span class="number">0x7fffffff</span>&gt;&gt;<span class="number">1</span>)<span class="number">-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dis[MAXN][MAXN],n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(i!=j)dis[i][j] = INF;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=m; i++)&#123;</span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x, &amp;y, &amp;z);</span><br><span class="line">        dis[x][y] = dis[y][x] = z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>; k&lt;=n; k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">                dis[i][j]=dis[j][i]=<span class="built_in">MIN</span>(dis[i][j], dis[i][k]+dis[k][j]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：</p><p><img src="https://bu.dusays.com/2023/08/29/64ee0d8965a41.png" alt="46-78.png"></p><h3 id="有向无环图描述表达式"><a href="#有向无环图描述表达式" class="headerlink" title="有向无环图描述表达式"></a>有向无环图描述表达式</h3><p>知识里的你，再弱小也是真的：</p><p><img src="https://bu.dusays.com/2023/08/29/64ee14e239368.png" alt="46-79.png"></p><p>看一眼真题：</p><p><img src="https://bu.dusays.com/2023/08/29/64ee14e2520f4.png" alt="46-80.png"></p><p>此类题目的解题方法：</p><p><img src="https://bu.dusays.com/2023/08/30/64ee196c42ca2.png" alt="46-81.png"></p><p>最后看一个特例：</p><p><img src="https://bu.dusays.com/2023/08/30/64ee1b3603714.png" alt="46-82.png"></p><p>从上面的特例（左）可以发现，允许重边；另外，可以画出的图不唯一。</p><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p>一个概念，AOV 网：</p><p><img src="https://bu.dusays.com/2023/08/31/64eff6c053039.png" alt="46-83.png"></p><p>拓扑排序是对有向无环图的所有顶点，生成一个线性的序列，来表达这个图的顶点之间的先后关系：</p><p><img src="https://bu.dusays.com/2023/08/31/64eff9c8520d5.png" alt="46-84.png"></p><p>通常使用 BFS 实现拓扑排序，流程如下：</p><ul><li>首先建立空队列，把所有入度为 0 的节点加入队列</li><li>从队列中取出一个节点，将从其出发的所有边删除。在编程上，即将边所连到的点入度减一，判断该边通向的节点是否入度变为 0 ，若是，则加入队列</li><li>重复以上步骤，直至队列中不剩下任何节点为止</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; qwq;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">topoSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">if</span>(inDegree[i] == <span class="number">0</span>) qwq.<span class="built_in">push</span>(i);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> v = qwq.<span class="built_in">front</span>();</span><br><span class="line">        qwq.<span class="built_in">pop</span>();</span><br><span class="line">        cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(list&lt;<span class="type">int</span>&gt;::iterator it = edge[v].<span class="built_in">begin</span>(); it != edges[v].<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            inDegree[*it]--;</span><br><span class="line">            <span class="keyword">if</span>(!inDegree[*it]) qwq.<span class="built_in">push</span>(*it);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于稍复杂的情况或使用链式前向星数据结构的代码，请参考：<a href="https://loveofpeach.github.io/posts/9e22caea.html#%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F">https://loveofpeach.github.io/posts/9e22caea.html#%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F</a></p><p>拓扑排序是对有向无环图而言的。如果需要判断图中是否存在环，则可以统计是否所有的顶点都入过队列，若存在未入过队的节点，代表图中存在环。</p><p>如果你愿意看王道的代码的话也不是不行：</p><p><img src="https://bu.dusays.com/2023/08/31/64f003a8de3c0.png" alt="46-85.png"></p><p>以上代码的时间复杂度为 $O(|V|+|E|)$ ，若采用邻接矩阵，则为 $O(|V|^2)$ .</p><p>逆拓扑排序：</p><p><img src="https://bu.dusays.com/2023/08/31/64f0067dc0b0c.png" alt="46-86.png"></p><p>逆拓扑排序代码实现：</p><p><img src="https://bu.dusays.com/2023/08/31/64f0089789bb4.png" alt="46-87.png"></p><p>以上代码中，无论从哪一个顶点出发进行 DFS 都可以得到正确输出。</p><h3 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h3><p>概念，AOE 网：</p><p><img src="https://bu.dusays.com/2023/08/31/64f051252b951.png" alt="46-88.png"></p><p>AOE 网两个简单的性质：</p><ul><li>仅有一个入度为 0 的顶点，称为“开始顶点（源点）”，它表示整个工程的开始</li><li>仅有一个出度为 0 的顶点，称为“结束顶点（汇点）”，它表示整个工程的结束</li></ul><p>从源点到汇点的有向路径可能有多条，所有路径中，具有最大路径长度的路径称为<strong>关键路径</strong>，而把关键路径上的活动称为<strong>关键活动</strong>。完成整个工程的最短时间就是关键路径的长度，若关键活动不能按时完成，则整个工程的完成时间就会延长。</p><p>算法思路：</p><p><img src="https://bu.dusays.com/2023/08/31/64f058e7418bf.png" alt="46-89.png"></p><p>大致实现思路：</p><p><img src="https://bu.dusays.com/2023/08/31/64f060147a4b7.png" alt="46-90.png"></p><p><strong>若缩短关键活动的时间，可以缩短工期。但当缩短到一定程度时，关键活动可能会变成非关键活动。</strong></p><p><strong>可能有多条关键路径，只提高一条关键路径上的关键活动速度并不一定能缩短整个工程的工期。</strong> 只有加快那些包括在所有关键路径上的关键活动才能缩短工期。</p><p>最后，贴一个看起来像关键路径、但其实可以用拓扑排序的题目：<a href="https://www.luogu.com.cn/problem/P1113">P1113 杂务</a></p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>查找长度：在查找运算中，需要对比关键字的次数称为查找长度。</p><p>平均查找长度（ASL, Average Search Length）：所有查找过程中，进行关键字的比较次数的平均值。</p><script type="math/tex; mode=display">ASL=\sum_{i=1}^nP_iC_i</script><p>上式中，n 为数据元素个数；$P_i$ 为查找第 i 个元素的概率；$C_i$ 为查找第 i 个元素的查找长度。</p><p>一般来说，题目中若无特别说明，<strong>默认查找任何一个元素的概率都相同</strong>。</p><h3 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h3><p>某个小技巧：</p><p><img src="https://bu.dusays.com/2023/08/31/64f09b159e8c4.png" alt="46-91.png"></p><p>查找判定树：</p><p><img src="https://bu.dusays.com/2023/08/31/64f09db162fef.png" alt="46-92.png"></p><h3 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h3><p>二分查找的实现细节需要特别注意，在某些特殊的情况下，不正确的写法会导致死循环或是其他的错误。王道的代码就是错误的。</p><p>我们直接来看正确的做法：总是将查找区间设为左闭右开的。以题目<a href="https://www.luogu.com.cn/problem/P1824">P1824 进击的奶牛</a>为例，该题的做法是二分答案，给出代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a,b,p[<span class="number">1000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>,pre=<span class="number">-1500000000</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i]-pre&gt;=x)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            pre=p[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;=b)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=a;i++)cin&gt;&gt;p[i];</span><br><span class="line">    <span class="built_in">sort</span>(p+<span class="number">1</span>,p+<span class="number">1</span>+a);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>,right=<span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">while</span>(right!=left+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid=(left+right)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid))left=mid;</span><br><span class="line">        <span class="keyword">else</span> right=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;left;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找效率分析：</p><p><img src="https://bu.dusays.com/2023/08/31/64f0ad4be6007.png" alt="46-93.png"></p><p>关于折半查找判定树：</p><ul><li>判定树节点关键字：左&lt;中&lt;右，满足二叉排序树的定义</li><li>失败节点：n+1 个（等于成功节点的空链域数量）</li></ul><p><img src="https://bu.dusays.com/2023/08/31/64f0b08c48a29.png" alt="46-94.png"></p><h3 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h3><p>特点：块内无序，块间有序。</p><p><img src="https://bu.dusays.com/2023/09/03/64f46e4111f9e.png" alt="46-95.png"></p><p><strong>分块查找</strong>，又称<strong>索引顺序查找</strong>，算法过程如下：</p><ul><li>在索引表中确定待查记录所属的分块（可顺序、可折半）</li><li>在块内顺序查找</li></ul><p>折半查找索引表的例子：</p><p><img src="https://bu.dusays.com/2023/09/03/64f473c641697.png" alt="46-96.png"></p><p><strong>以上是王道书的讲解，是丑陋并且有可能出错的。</strong> 但是为了应试，应当了解。如果采用我上面提到的折半查找的方式，查找索引表的方式会完全不同。</p><p>效率分析：</p><p><img src="https://bu.dusays.com/2023/09/03/64f479a1f0cc3.png" alt="46-97.png"></p><p>拓展思考：</p><p><img src="https://bu.dusays.com/2023/09/03/64f47c5b3d576.png" alt="46-98.png"></p><h3 id="二叉排序树（BST）"><a href="#二叉排序树（BST）" class="headerlink" title="二叉排序树（BST）"></a>二叉排序树（BST）</h3><p>定义：</p><p><img src="https://bu.dusays.com/2023/09/04/64f592d5bb9b2.png" alt="46-99.png"></p><p>查找：</p><p><img src="https://bu.dusays.com/2023/09/04/64f594ef62965.png" alt="46-100.png"></p><p>上面是非递归的实现，下面给出递归版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 王道的代码</span></span><br><span class="line"><span class="function">BSTNode* <span class="title">BSTsearch</span><span class="params">(BSTree T, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;   <span class="comment">//查找失败</span></span><br><span class="line">  <span class="keyword">if</span>(key==T-&gt;key)</span><br><span class="line">    <span class="keyword">return</span> T;      <span class="comment">//查找成功</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; T-&gt;key)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">BSTsearch</span>(T-&gt;lchild, key);  <span class="comment">//在左子树中查找</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">BSTsearch</span>(T-&gt;rchild, key);  <span class="comment">//在右子树中查找</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最坏空间复杂度为 O(h) ，h 为树的高度</span></span><br></pre></td></tr></table></figure><p>插入新节点：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5982c1e89f.png" alt="46-101.png"></p><p>构造：</p><p><img src="https://bu.dusays.com/2023/09/04/64f59a1b2d239.png" alt="46-102.png"></p><p>删除某一个节点：</p><ol><li>先找到目标节点</li><li>若被删除节点是叶子节点，则直接删除。不会破坏二叉排序树的性质。</li><li>若被删除节点只有一棵左子树或右子树，则让其子树替代之。依然可以保证二叉排序树的性质。</li><li>若被删除节点既有左子树，又有右子树。有两种方法：<ul><li>找到右子树中值最小的节点 p（即右子树中最左下的节点，该节点一定没有左子树），替代将被删除的节点。然后删除原来的节点 p（情况同第 3 步）.</li><li>找到左子树中值最大的节点 p（即左子树中最右下的节点，该节点一定没有右子树），替代将被删除的节点。然后删除原来的节点 p（情况同第 3 步）.</li></ul></li></ol><p>效率分析：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5a1523998f.png" alt="46-103.png"></p><h3 id="平衡二叉树（AVL）"><a href="#平衡二叉树（AVL）" class="headerlink" title="平衡二叉树（AVL）"></a>平衡二叉树（AVL）</h3><p>一些概念：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5a87785768.png" alt="46-104.png"></p><p>二叉排序树中插入新节点时如何保持平衡：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5a9b8ae563.png" alt="46-105.png"></p><p>调整最小不平衡子树：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5c7a563248.png" alt="46-106.png"></p><p>续图：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5cbee45a87.png" alt="46-107.png"></p><p><strong>总结：</strong></p><p><img src="https://bu.dusays.com/2023/09/04/64f5cd6a39610.png" alt="46-108.png"></p><p>一个小坑：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5cfd3759d3.png" alt="46-109.png"></p><p>练习题：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5d5ea4fd27.png" alt="46-110.png"></p><p>查找效率分析：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5db0f505d4.png" alt="46-111.png"></p><h3 id="平衡二叉树的删除"><a href="#平衡二叉树的删除" class="headerlink" title="平衡二叉树的删除"></a>平衡二叉树的删除</h3><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p><a href="https://www.bilibili.com/video/BV1b7411N798/?p=75">https://www.bilibili.com/video/BV1b7411N798/?p=75</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;应试向的数据结构考试和实际写起代码来有很大区别。重复造轮子就不说了，更可怕的是，有时还需要应试者人脑模拟算法的执行过程。相对来说，对针对具体问题设计算法的考察较浅。&lt;/p&gt;
&lt;p&gt;另外，有时王道书的代码风格奇特，我尽量改为了自己习惯的写法，这点需要特别注意。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="笔记" scheme="https://loveofpeach.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数据结构" scheme="https://loveofpeach.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>操作系统笔记</title>
    <link href="https://loveofpeach.github.io/posts/8ce3e425.html"/>
    <id>https://loveofpeach.github.io/posts/8ce3e425.html</id>
    <published>2023-07-04T11:20:21.000Z</published>
    <updated>2023-08-30T07:34:37.478Z</updated>
    
    <content type="html"><![CDATA[<p>写在前面：</p><p>虽然本笔记的大多数内容是王道的 PPT ，但也是有我的注释的！王道的课程真的很好，咸鱼学长讲课生动又仔细。每年的课件和视频都是有变化的，我这里把 PPT 贴出来只是自用，本文章禁止转载。最后附上王道的网站：<code>cskaoyan.com</code>。</p><h2 id="操作系统的概念、功能"><a href="#操作系统的概念、功能" class="headerlink" title="操作系统的概念、功能"></a>操作系统的概念、功能</h2><p><img src="https://bu.dusays.com/2023/07/05/64a44324547e0.jpg" alt="1.1_1_操作系统的概念、功能-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a4432483eb0.jpg" alt="1.1_1_操作系统的概念、功能-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324547e0.jpg" alt="1.1_1_操作系统的概念、功能-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324d01bd.jpg" alt="1.1_1_操作系统的概念、功能-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324d08ac.jpg" alt="1.1_1_操作系统的概念、功能-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324d8b36.jpg" alt="1.1_1_操作系统的概念、功能-6.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324b551f.jpg" alt="1.1_1_操作系统的概念、功能-7.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324b9a2a.jpg" alt="1.1_1_操作系统的概念、功能-8.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324d0322.jpg" alt="1.1_1_操作系统的概念、功能-9.jpg"></p><h2 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h2><p><img src="https://bu.dusays.com/2023/07/07/64a82fe52d101.jpg" alt="1.1_2_操作系统的特征-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a82fe5b5750.jpg" alt="1.1_2_操作系统的特征-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a82fe5b9d78.jpg" alt="1.1_2_操作系统的特征-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a82fe5bcbde.jpg" alt="1.1_2_操作系统的特征-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a82fe5b4c6d.jpg" alt="1.1_2_操作系统的特征-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a82fe578274.jpg" alt="1.1_2_操作系统的特征-6.jpg"></p><h2 id="操作系统的发展与分类"><a href="#操作系统的发展与分类" class="headerlink" title="操作系统的发展与分类"></a>操作系统的发展与分类</h2><p><img src="https://bu.dusays.com/2023/07/07/64a830c2a4ed2.jpg" alt="1.2_操作系统的发展与分类-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a830c2bfdf5.jpg" alt="1.2_操作系统的发展与分类-2.jpg"></p><p><img src="https://sway.office.com/s/Q7Yjq9XbLLQkbe4W/images/k9EbJY8-FjaT7k" alt="1.2_操作系统的发展与分类-3.jpg"></p><p><img src="https://sway.office.com/s/Q7Yjq9XbLLQkbe4W/images/gD1KB3tYw7ZAjj" alt="1.2_操作系统的发展与分类-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a830c2eccd2.jpg" alt="1.2_操作系统的发展与分类-5.jpg"></p><h2 id="操作系统的运行机制"><a href="#操作系统的运行机制" class="headerlink" title="操作系统的运行机制"></a>操作系统的运行机制</h2><p><img src="https://bu.dusays.com/2023/07/07/64a8333cd4ec7.jpg" alt="1.3_1_操作系统的运行机制-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333dbcf99.jpg" alt="1.3_1_操作系统的运行机制-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333dcc842.jpg" alt="1.3_1_操作系统的运行机制-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333dd9b65.jpg" alt="1.3_1_操作系统的运行机制-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333dd455c.jpg" alt="1.3_1_操作系统的运行机制-5.jpg"></p><p><img src="https://sway.office.com/s/Jl1DxGDSA3bPbLZV/images/SIGaZtzUVdPs2w" alt="1.3_1_操作系统的运行机制-6.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333d862fa.jpg" alt="1.3_1_操作系统的运行机制-7.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333d95a31.jpg" alt="1.3_1_操作系统的运行机制-8.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333dc241d.jpg" alt="1.3_1_操作系统的运行机制-9.jpg"></p><h2 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h2><p><img src="https://bu.dusays.com/2023/07/07/64a8352ec78c6.jpg" alt="1.3_2_中断和异常-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8352f028a8.jpg" alt="1.3_2_中断和异常-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8352f187ac.jpg" alt="1.3_2_中断和异常-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8352f1cffa.jpg" alt="1.3_2_中断和异常-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8352f18690.jpg" alt="1.3_2_中断和异常-5.jpg"></p><h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p><img src="https://bu.dusays.com/2023/07/09/64aa454c522ae.jpg" alt="1.3_3_系统调用-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa454d2d05d.jpg" alt="1.3_3_系统调用-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa454d776c2.jpg" alt="1.3_3_系统调用-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa454d743d2.jpg" alt="1.3_3_系统调用-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa454d2e520.jpg" alt="1.3_3_系统调用-5.jpg"></p><h2 id="操作系统体系结构（上）"><a href="#操作系统体系结构（上）" class="headerlink" title="操作系统体系结构（上）"></a>操作系统体系结构（上）</h2><p><img src="https://bu.dusays.com/2023/07/10/64ab8a6d6edc2.jpg" alt="1.4_1_操作系统体系结构（上）-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/10/64ab8a6eee344.jpg" alt="1.4_1_操作系统体系结构（上）-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/10/64ab8a6eeadbe.jpg" alt="1.4_1_操作系统体系结构（上）-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/10/64ab8a6eebc62.jpg" alt="1.4_1_操作系统体系结构（上）-4.jpg"></p><h2 id="操作系统体系结构（下）"><a href="#操作系统体系结构（下）" class="headerlink" title="操作系统体系结构（下）"></a>操作系统体系结构（下）</h2><p><img src="https://bu.dusays.com/2023/07/10/64ab8adb83bf9.jpg" alt="1.4_2_操作系统体系结构（下）-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/10/64ab8adc45f08.jpg" alt="1.4_2_操作系统体系结构（下）-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/10/64ab8adc55cfb.jpg" alt="1.4_2_操作系统体系结构（下）-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/10/64ab8adc641f6.jpg" alt="1.4_2_操作系统体系结构（下）-4.jpg"></p><h2 id="操作系统引导"><a href="#操作系统引导" class="headerlink" title="操作系统引导"></a>操作系统引导</h2><p><img src="https://bu.dusays.com/2023/07/11/64ad7796c9121.jpg" alt="1.5_操作系统引导-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/11/64ad779710c14.jpg" alt="1.5_操作系统引导-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/11/64ad779738205.jpg" alt="1.5_操作系统引导-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/11/64ad7798080f7.jpg" alt="1.5_操作系统引导-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/11/64ad7798a8964.jpg" alt="1.5_操作系统引导-5.jpg"></p><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p><img src="https://bu.dusays.com/2023/07/11/64ad7824ba99e.jpg" alt="1.6_虚拟机-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/11/64ad782a26cb9.jpg" alt="1.6_虚拟机-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/11/64ad7829c55a8.jpg" alt="1.6_虚拟机-3.jpg"></p><h2 id="进程的概念、组成、特征"><a href="#进程的概念、组成、特征" class="headerlink" title="进程的概念、组成、特征"></a>进程的概念、组成、特征</h2><p><img src="https://bu.dusays.com/2023/07/14/64b16d42df6f6.jpg" alt="2.1_1_进程的概念、组成、特征-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/14/64b16d4420d43.jpg" alt="2.1_1_进程的概念、组成、特征-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/14/64b16d445f1e2.jpg" alt="2.1_1_进程的概念、组成、特征-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/14/64b16d43d64b5.jpg" alt="2.1_1_进程的概念、组成、特征-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/14/64b16d445f1d5.jpg" alt="2.1_1_进程的概念、组成、特征-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/14/64b16d4455550.jpg" alt="2.1_1_进程的概念、组成、特征-6.jpg"></p><h2 id="进程的状态与转换、进程的组织"><a href="#进程的状态与转换、进程的组织" class="headerlink" title="进程的状态与转换、进程的组织"></a>进程的状态与转换、进程的组织</h2><p><img src="https://bu.dusays.com/2023/07/18/64b6b0377f45e.jpg" alt="2.1_2_进程的状态与转换、进程的组织-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b03d185f3.jpg" alt="2.1_2_进程的状态与转换、进程的组织-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b03d446a8.jpg" alt="2.1_2_进程的状态与转换、进程的组织-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b03e36aca.jpg" alt="2.1_2_进程的状态与转换、进程的组织-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b03ba9bf6.jpg" alt="2.1_2_进程的状态与转换、进程的组织-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b03a7f52a.jpg" alt="2.1_2_进程的状态与转换、进程的组织-6.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b03daf20c.jpg" alt="2.1_2_进程的状态与转换、进程的组织-7.jpg"></p><h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><p><img src="https://bu.dusays.com/2023/07/18/64b6b1091302c.jpg" alt="2.1_3_进程控制-01.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b1101a8ea.jpg" alt="2.1_3_进程控制-02.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11abdc1e.jpg" alt="2.1_3_进程控制-03.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11984d63.jpg" alt="2.1_3_进程控制-04.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11c1b6dc.jpg" alt="2.1_3_进程控制-05.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b118bfd43.jpg" alt="2.1_3_进程控制-06.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11aed02f.jpg" alt="2.1_3_进程控制-07.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11b8e7af.jpg" alt="2.1_3_进程控制-08.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11af32b5.jpg" alt="2.1_3_进程控制-09.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11c1d5a9.jpg" alt="2.1_3_进程控制-10.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b23a2fbaf.jpg" alt="2.1_3_进程控制-11.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b23a23499.jpg" alt="2.1_3_进程控制-12.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b23840709.jpg" alt="2.1_3_进程控制-13.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b23a4f16f.jpg" alt="2.1_3_进程控制-14.jpg"></p><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><p><img src="https://bu.dusays.com/2023/07/18/64b6b2a505bc1.jpg" alt="2.1_4_进程通信-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b215bce.jpg" alt="2.1_4_进程通信-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b6115a9.jpg" alt="2.1_4_进程通信-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b43bae7.jpg" alt="2.1_4_进程通信-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b4a14ec.jpg" alt="2.1_4_进程通信-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b2326ba.jpg" alt="2.1_4_进程通信-6.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b73a4a3.jpg" alt="2.1_4_进程通信-7.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b771bbb.jpg" alt="2.1_4_进程通信-8.jpg"></p><h2 id="线程的概念与特点"><a href="#线程的概念与特点" class="headerlink" title="线程的概念与特点"></a>线程的概念与特点</h2><p><img src="https://bu.dusays.com/2023/07/22/64bab2eaed5d6.jpg" alt="2.1_5_线程的概念与特点-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab2ed33304.jpg" alt="2.1_5_线程的概念与特点-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab2ee33afa.jpg" alt="2.1_5_线程的概念与特点-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab2ee0ffa0.jpg" alt="2.1_5_线程的概念与特点-4.jpg"></p><h2 id="线程的实现方式和多线程模型"><a href="#线程的实现方式和多线程模型" class="headerlink" title="线程的实现方式和多线程模型"></a>线程的实现方式和多线程模型</h2><p><img src="https://bu.dusays.com/2023/07/22/64bab3653e2ef.jpg" alt="2.1_6_线程的实现方式和多线程模型-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab36933bac.jpg" alt="2.1_6_线程的实现方式和多线程模型-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab369b5907.jpg" alt="2.1_6_线程的实现方式和多线程模型-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab36aee6df.jpg" alt="2.1_6_线程的实现方式和多线程模型-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab36b5eb73.jpg" alt="2.1_6_线程的实现方式和多线程模型-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab36ba01d8.jpg" alt="2.1_6_线程的实现方式和多线程模型-6.jpg"></p><h2 id="线程的状态与转换"><a href="#线程的状态与转换" class="headerlink" title="线程的状态与转换"></a>线程的状态与转换</h2><p><img src="https://bu.dusays.com/2023/07/22/64bab3e9a8eea.jpg" alt="2.1_7_线程的状态与转换-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab3e9ade73.jpg" alt="2.1_7_线程的状态与转换-2.jpg"></p><h2 id="调度的概念、层次"><a href="#调度的概念、层次" class="headerlink" title="调度的概念、层次"></a>调度的概念、层次</h2><p><img src="https://bu.dusays.com/2023/07/22/64bab47d1ba2e.jpg" alt="2.2_1_调度的概念、层次-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab47fe687c.jpg" alt="2.2_1_调度的概念、层次-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab480233a3.jpg" alt="2.2_1_调度的概念、层次-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab48179fd1.jpg" alt="2.2_1_调度的概念、层次-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab4817afa2.jpg" alt="2.2_1_调度的概念、层次-5.jpg"></p><h2 id="进程调度的时机、切换与过程、方式"><a href="#进程调度的时机、切换与过程、方式" class="headerlink" title="进程调度的时机、切换与过程、方式"></a>进程调度的时机、切换与过程、方式</h2><p><img src="https://bu.dusays.com/2023/07/25/64bfe9174853e.jpg" alt="2.2_2_进程调度的时机、切换与过程、方式-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe919e0cfb.jpg" alt="2.2_2_进程调度的时机、切换与过程、方式-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe9199e4ce.jpg" alt="2.2_2_进程调度的时机、切换与过程、方式-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe919379a5.jpg" alt="2.2_2_进程调度的时机、切换与过程、方式-4.jpg"></p><h2 id="调度器和闲逛进程"><a href="#调度器和闲逛进程" class="headerlink" title="调度器和闲逛进程"></a>调度器和闲逛进程</h2><p><img src="https://bu.dusays.com/2023/07/25/64bfe9a6d7493.jpg" alt="2.2_3_调度器和闲逛进程-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe9a6eecd9.jpg" alt="2.2_3_调度器和闲逛进程-2.jpg"></p><h2 id="调度算法的评价指标"><a href="#调度算法的评价指标" class="headerlink" title="调度算法的评价指标"></a>调度算法的评价指标</h2><p><img src="https://bu.dusays.com/2023/07/25/64bfe9f8e91ee.jpg" alt="2.2_4_调度算法的评价指标-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe9fab2ab2.jpg" alt="2.2_4_调度算法的评价指标-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe9fb803f9.jpg" alt="2.2_4_调度算法的评价指标-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe9fb6f622.jpg" alt="2.2_4_调度算法的评价指标-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe9fb13ab9.jpg" alt="2.2_4_调度算法的评价指标-5.jpg"></p><h2 id="调度算法-先来先服务、最短作业优先、最高响应比优先"><a href="#调度算法-先来先服务、最短作业优先、最高响应比优先" class="headerlink" title="调度算法_先来先服务、最短作业优先、最高响应比优先"></a>调度算法_先来先服务、最短作业优先、最高响应比优先</h2><p><img src="https://bu.dusays.com/2023/07/31/64c7d15e01779.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d165532df.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d1668c844.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d1680415a.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d162a5970.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d16340dbb.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-6.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d1691b775.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-7.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d16d93124.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-8.jpg"></p><h2 id="调度算法-时间片轮转、优先级、多级反馈队列"><a href="#调度算法-时间片轮转、优先级、多级反馈队列" class="headerlink" title="调度算法_时间片轮转、优先级、多级反馈队列"></a>调度算法_时间片轮转、优先级、多级反馈队列</h2><p><img src="https://bu.dusays.com/2023/07/31/64c7d366ccb64.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d3708cbe7.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d374b4d0e.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d374b4d22.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d37096c0c.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d36ed0237.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-6.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d3796adc7.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-7.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d37f4e581.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-8.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d38061328.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-9.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d37f4d362.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-10.jpg"></p><h2 id="调度算法-多级队列调度算法"><a href="#调度算法-多级队列调度算法" class="headerlink" title="调度算法_多级队列调度算法"></a>调度算法_多级队列调度算法</h2><p><img src="https://bu.dusays.com/2023/07/31/64c7d4a1ed339.jpg" alt="2.2_7_调度算法_多级队列调度算法-1.jpg"></p><h2 id="什么是进程同步、进程互斥"><a href="#什么是进程同步、进程互斥" class="headerlink" title="什么是进程同步、进程互斥"></a>什么是进程同步、进程互斥</h2><p><img src="https://bu.dusays.com/2023/08/03/64cb840b0c8ec.jpg" alt="2.3_1_什么是进程同步、进程互斥-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb840bbff0a.jpg" alt="2.3_1_什么是进程同步、进程互斥-2.jpg"></p><p><img src="https://s2.loli.net/2023/08/03/oigBhYQNt3K1aP8.jpg" alt="2.3_1_什么是进程同步、进程互斥-3.jpg"></p><p><img src="https://s2.loli.net/2023/08/03/MFfPRIKi9DzphNA.jpg" alt="2.3_1_什么是进程同步、进程互斥-4.jpg"></p><h2 id="进程互斥的软件实现方法"><a href="#进程互斥的软件实现方法" class="headerlink" title="进程互斥的软件实现方法"></a>进程互斥的软件实现方法</h2><p><img src="https://bu.dusays.com/2023/08/03/64cb86a5ce910.jpg" alt="2.3_2_进程互斥的软件实现方法-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb86a682577.jpg" alt="2.3_2_进程互斥的软件实现方法-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb86a787234.jpg" alt="2.3_2_进程互斥的软件实现方法-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb86a79dc41.jpg" alt="2.3_2_进程互斥的软件实现方法-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb86a7afb85.jpg" alt="2.3_2_进程互斥的软件实现方法-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb86a7889f6.jpg" alt="2.3_2_进程互斥的软件实现方法-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb86a82dd8c.jpg" alt="2.3_2_进程互斥的软件实现方法-7.jpg"></p><h2 id="进程互斥的硬件实现方法"><a href="#进程互斥的硬件实现方法" class="headerlink" title="进程互斥的硬件实现方法"></a>进程互斥的硬件实现方法</h2><p><img src="https://bu.dusays.com/2023/08/05/64ce452b3244f.jpg" alt="2.3_3_进程互斥的硬件实现方法-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce452bab5cb.jpg" alt="2.3_3_进程互斥的硬件实现方法-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce452c0f608.jpg" alt="2.3_3_进程互斥的硬件实现方法-3.jpg"></p><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p><img src="https://bu.dusays.com/2023/08/05/64ce45b92703d.jpg" alt="2.3_4_互斥锁-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce45b94c7a2.jpg" alt="2.3_4_互斥锁-2.jpg"></p><h2 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h2><p><img src="https://bu.dusays.com/2023/08/05/64ce471801e44.jpg" alt="2.3_5_信号量机制-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce471c405d6.jpg" alt="2.3_5_信号量机制-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce471b1d05a.jpg" alt="2.3_5_信号量机制-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce471d6043c.jpg" alt="2.3_5_信号量机制-4.jpg"></p><h2 id="用信号量实现进程互斥、同步、前驱关系"><a href="#用信号量实现进程互斥、同步、前驱关系" class="headerlink" title="用信号量实现进程互斥、同步、前驱关系"></a>用信号量实现进程互斥、同步、前驱关系</h2><p><img src="https://bu.dusays.com/2023/08/05/64ce4784a009c.jpg" alt="2.3_6_用信号量实现进程互斥、同步、前驱关系-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce47828f434.jpg" alt="2.3_6_用信号量实现进程互斥、同步、前驱关系-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce47840190d.jpg" alt="2.3_6_用信号量实现进程互斥、同步、前驱关系-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce4782ccad9.jpg" alt="2.3_6_用信号量实现进程互斥、同步、前驱关系-4.jpg"></p><h2 id="生产者-消费者问题"><a href="#生产者-消费者问题" class="headerlink" title="生产者-消费者问题"></a>生产者-消费者问题</h2><p><img src="https://bu.dusays.com/2023/08/05/64ce47f62aede.jpg" alt="2.3_7_生产者-消费者问题-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce47f1782a6.jpg" alt="2.3_7_生产者-消费者问题-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce47f6a1ee2.jpg" alt="2.3_7_生产者-消费者问题-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce47f9527d0.jpg" alt="2.3_7_生产者-消费者问题-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce47f582432.jpg" alt="2.3_7_生产者-消费者问题-5.jpg"></p><h2 id="多生产者-多消费者"><a href="#多生产者-多消费者" class="headerlink" title="多生产者-多消费者"></a>多生产者-多消费者</h2><p><img src="https://bu.dusays.com/2023/08/06/64cf23bf03ac7.jpg" alt="2.3_8_多生产者-多消费者-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf23c356499.jpg" alt="2.3_8_多生产者-多消费者-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf23c38200e.jpg" alt="2.3_8_多生产者-多消费者-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf23c391d95.jpg" alt="2.3_8_多生产者-多消费者-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf23c3a7524.jpg" alt="2.3_8_多生产者-多消费者-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf23c304cdc.jpg" alt="2.3_8_多生产者-多消费者-6.jpg"></p><h2 id="吸烟者问题"><a href="#吸烟者问题" class="headerlink" title="吸烟者问题"></a>吸烟者问题</h2><p><img src="https://bu.dusays.com/2023/08/06/64cf248663d78.jpg" alt="2.3_9_吸烟者问题-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf24891c382.jpg" alt="2.3_9_吸烟者问题-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf24883df3d.jpg" alt="2.3_9_吸烟者问题-3.jpg"></p><h2 id="读者-写者问题"><a href="#读者-写者问题" class="headerlink" title="读者-写者问题"></a>读者-写者问题</h2><p><img src="https://bu.dusays.com/2023/08/06/64cf24edc1293.jpg" alt="2.3_10_读者-写者问题-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf24eeae144.jpg" alt="2.3_10_读者-写者问题-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf24eed1cae.jpg" alt="2.3_10_读者-写者问题-3.jpg"></p><h2 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h2><p><img src="https://bu.dusays.com/2023/08/08/64d249dbbe37c.jpg" alt="2.3_11_哲学家进餐问题-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d249dc76e0b.jpg" alt="2.3_11_哲学家进餐问题-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d249dc93cea.jpg" alt="2.3_11_哲学家进餐问题-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d249dc6c15f.jpg" alt="2.3_11_哲学家进餐问题-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d249dc03a7f.jpg" alt="2.3_11_哲学家进餐问题-5.jpg"></p><h2 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h2><p><img src="https://bu.dusays.com/2023/08/08/64d24a7d2edf4.jpg" alt="2.3_12_管程-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24a7df1bc3.jpg" alt="2.3_12_管程-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24a7e6ab87.jpg" alt="2.3_12_管程-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24a7e380db.jpg" alt="2.3_12_管程-4.jpg"></p><h2 id="死锁的概念"><a href="#死锁的概念" class="headerlink" title="死锁的概念"></a>死锁的概念</h2><p><img src="https://bu.dusays.com/2023/08/08/64d24ae81102b.jpg" alt="2.4_1_死锁的概念-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24ae92546a.jpg" alt="2.4_1_死锁的概念-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24ae9c15b3.jpg" alt="2.4_1_死锁的概念-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24ae94f046.jpg" alt="2.4_1_死锁的概念-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24ae981209.jpg" alt="2.4_1_死锁的概念-5.jpg"></p><h2 id="死锁的处理策略—预防死锁"><a href="#死锁的处理策略—预防死锁" class="headerlink" title="死锁的处理策略—预防死锁"></a>死锁的处理策略—预防死锁</h2><p><img src="https://bu.dusays.com/2023/08/09/64d3b02ad4359.jpg" alt="2.4_2_死锁的处理策略—预防死锁-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b029d5054.jpg" alt="2.4_2_死锁的处理策略—预防死锁-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b02bb5e72.jpg" alt="2.4_2_死锁的处理策略—预防死锁-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0297fa0f.jpg" alt="2.4_2_死锁的处理策略—预防死锁-4.jpg"></p><h2 id="死锁的处理策略—避免死锁"><a href="#死锁的处理策略—避免死锁" class="headerlink" title="死锁的处理策略—避免死锁"></a>死锁的处理策略—避免死锁</h2><p><img src="https://bu.dusays.com/2023/08/09/64d3b0bebbfe6.jpg" alt="2.4_3_死锁的处理策略—避免死锁-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0ce223ff.jpg" alt="2.4_3_死锁的处理策略—避免死锁-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0ce6fefc.jpg" alt="2.4_3_死锁的处理策略—避免死锁-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0c7b9ce6.jpg" alt="2.4_3_死锁的处理策略—避免死锁-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0cfcdbd9.jpg" alt="2.4_3_死锁的处理策略—避免死锁-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0cc12e75.jpg" alt="2.4_3_死锁的处理策略—避免死锁-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0ca53c97.jpg" alt="2.4_3_死锁的处理策略—避免死锁-7.jpg"></p><h2 id="死锁的处理策略—死锁的检测与解除"><a href="#死锁的处理策略—死锁的检测与解除" class="headerlink" title="死锁的处理策略—死锁的检测与解除"></a>死锁的处理策略—死锁的检测与解除</h2><p><img src="https://bu.dusays.com/2023/08/09/64d3b1723982e.jpg" alt="2.4_4_死锁的处理策略—死锁的检测与解除-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b172bb8da.jpg" alt="2.4_4_死锁的处理策略—死锁的检测与解除-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b17663b79.jpg" alt="2.4_4_死锁的处理策略—死锁的检测与解除-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b174f15ca.jpg" alt="2.4_4_死锁的处理策略—死锁的检测与解除-4.jpg"></p><h2 id="内存的基础知识"><a href="#内存的基础知识" class="headerlink" title="内存的基础知识"></a>内存的基础知识</h2><p><img src="https://bu.dusays.com/2023/08/12/64d65e8385f35.jpg" alt="3.1_1_内存的基础知识-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e84a6968.jpg" alt="3.1_1_内存的基础知识-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e8435dff.jpg" alt="3.1_1_内存的基础知识-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e850eb5a.jpg" alt="3.1_1_内存的基础知识-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e867ce09.jpg" alt="3.1_1_内存的基础知识-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e866c713.jpg" alt="3.1_1_内存的基础知识-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e869fb04.jpg" alt="3.1_1_内存的基础知识-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e86d4373.jpg" alt="3.1_1_内存的基础知识-8.jpg"></p><p><img src="https://sway.office.com/s/kdoI85z1GGRvyVRu/images/5ud4zKm_7dpNZv" alt="3.1_1_内存的基础知识-9.jpg"></p><p><img src="https://sway.office.com/s/SGpu2MefI7MK1uBT/images/Efe_qAu19S1_D9" alt="3.1_1_内存的基础知识-10.jpg"></p><h2 id="内存管理的概念"><a href="#内存管理的概念" class="headerlink" title="内存管理的概念"></a>内存管理的概念</h2><p><img src="https://bu.dusays.com/2023/08/12/64d66038a65ef.jpg" alt="3.1_2_内存管理的概念-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d660397b64f.jpg" alt="3.1_2_内存管理的概念-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d6603a29c6a.jpg" alt="3.1_2_内存管理的概念-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d66039b54b7.jpg" alt="3.1_2_内存管理的概念-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d66039ea938.jpg" alt="3.1_2_内存管理的概念-5.jpg"></p><h2 id="覆盖与交换"><a href="#覆盖与交换" class="headerlink" title="覆盖与交换"></a>覆盖与交换</h2><p><img src="https://bu.dusays.com/2023/08/12/64d660cf6bbad.jpg" alt="3.1_3_覆盖与交换-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d660cfcc5d5.jpg" alt="3.1_3_覆盖与交换-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d660d0041c7.jpg" alt="3.1_3_覆盖与交换-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d660d067625.jpg" alt="3.1_3_覆盖与交换-4.jpg"></p><h2 id="连续分配管理方式"><a href="#连续分配管理方式" class="headerlink" title="连续分配管理方式"></a>连续分配管理方式</h2><p><img src="https://bu.dusays.com/2023/08/12/64d66181e5f32.jpg" alt="3.1_4_连续分配管理方式-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d66183a405c.jpg" alt="3.1_4_连续分配管理方式-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d661840c2b1.jpg" alt="3.1_4_连续分配管理方式-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d6618247e57.jpg" alt="3.1_4_连续分配管理方式-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d66182ca850.jpg" alt="3.1_4_连续分配管理方式-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d66183cdd31.jpg" alt="3.1_4_连续分配管理方式-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d661842f69b.jpg" alt="3.1_4_连续分配管理方式-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d66184a0d6b.jpg" alt="3.1_4_连续分配管理方式-8.jpg"></p><h2 id="动态分区分配算法"><a href="#动态分区分配算法" class="headerlink" title="动态分区分配算法"></a>动态分区分配算法</h2><p><img src="https://bu.dusays.com/2023/08/12/64d6622c0540e.jpg" alt="3.1_5_动态分区分配算法-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d6622ce8562.jpg" alt="3.1_5_动态分区分配算法-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d6622d31cd2.jpg" alt="3.1_5_动态分区分配算法-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d6622d6b860.jpg" alt="3.1_5_动态分区分配算法-4.jpg"></p><h2 id="基本分页存储管理的基本概念"><a href="#基本分页存储管理的基本概念" class="headerlink" title="基本分页存储管理的基本概念"></a>基本分页存储管理的基本概念</h2><p><img src="https://bu.dusays.com/2023/08/15/64da53960da97.jpg" alt="3.1_6_基本分页存储管理的基本概念-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da539d27213.jpg" alt="3.1_6_基本分页存储管理的基本概念-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da5393141ff.jpg" alt="3.1_6_基本分页存储管理的基本概念-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da5393804c3.jpg" alt="3.1_6_基本分页存储管理的基本概念-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da5394d3d19.jpg" alt="3.1_6_基本分页存储管理的基本概念-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da53a0953cb.jpg" alt="3.1_6_基本分页存储管理的基本概念-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da5398eb74c.jpg" alt="3.1_6_基本分页存储管理的基本概念-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da539b3874c.jpg" alt="3.1_6_基本分页存储管理的基本概念-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da53a0da25f.jpg" alt="3.1_6_基本分页存储管理的基本概念-9.jpg"></p><h2 id="基本地址变换机构"><a href="#基本地址变换机构" class="headerlink" title="基本地址变换机构"></a>基本地址变换机构</h2><p><img src="https://bu.dusays.com/2023/08/16/64dc9f505e783.jpg" alt="3.1_7_基本地址变换机构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dc9f50ab4cb.jpg" alt="3.1_7_基本地址变换机构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dced6dd9028.jpg" alt="3.1_7_基本地址变换机构-2dot5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dc9f572d936.jpg" alt="3.1_7_基本地址变换机构-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dc9f56b2981.jpg" alt="3.1_7_基本地址变换机构-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dc9f565baea.jpg" alt="3.1_7_基本地址变换机构-5.jpg"></p><h2 id="具有快表的地址变换机构"><a href="#具有快表的地址变换机构" class="headerlink" title="具有快表的地址变换机构"></a>具有快表的地址变换机构</h2><p><img src="https://bu.dusays.com/2023/08/16/64dcedf3bffbf.jpg" alt="3.1_8_具有快表的地址变换机构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcedf9cc451.jpg" alt="3.1_8_具有快表的地址变换机构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcedf8ebb7d.jpg" alt="3.1_8_具有快表的地址变换机构-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcedf7336da.jpg" alt="3.1_8_具有快表的地址变换机构-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcedf843c72.jpg" alt="3.1_8_具有快表的地址变换机构-5.jpg"></p><h2 id="两级页表"><a href="#两级页表" class="headerlink" title="两级页表"></a>两级页表</h2><p><img src="https://bu.dusays.com/2023/08/16/64dcee8858dca.jpg" alt="3.1_9_两级页表-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcee8ca1c81.jpg" alt="3.1_9_两级页表-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcee8e83aaa.jpg" alt="3.1_9_两级页表-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcee8c5d2b0.jpg" alt="3.1_9_两级页表-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcee915f724.jpg" alt="3.1_9_两级页表-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcee911b17f.jpg" alt="3.1_9_两级页表-6.jpg"></p><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p><img src="https://bu.dusays.com/2023/08/17/64dcfd619260d.jpg" alt="3.1_9dot5_补充说明-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/17/64dcfd6264a46.jpg" alt="3.1_9dot5_补充说明-2.jpg"></p><p><img src="https://sway.office.com/s/p4xi5cps3gCH9kEW/images/iG-XI8DPI9lOPn" alt="3.1_9dot5_补充说明-3.jpg"></p><h2 id="基本分段存储管理方式"><a href="#基本分段存储管理方式" class="headerlink" title="基本分段存储管理方式"></a>基本分段存储管理方式</h2><p><img src="https://bu.dusays.com/2023/08/18/64df5a1545b43.jpg" alt="3.1_10_基本分段存储管理方式-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a1632743.jpg" alt="3.1_10_基本分段存储管理方式-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a164e980.jpg" alt="3.1_10_基本分段存储管理方式-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a157f3f3.jpg" alt="3.1_10_基本分段存储管理方式-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a15d80da.jpg" alt="3.1_10_基本分段存储管理方式-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a164dae6.jpg" alt="3.1_10_基本分段存储管理方式-6.jpg"></p><h2 id="段页式管理方式"><a href="#段页式管理方式" class="headerlink" title="段页式管理方式"></a>段页式管理方式</h2><p><img src="https://bu.dusays.com/2023/08/18/64df5a907fdea.jpg" alt="3.1_11_段页式管理方式-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a9203158.jpg" alt="3.1_11_段页式管理方式-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a92ebc08.jpg" alt="3.1_11_段页式管理方式-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a9321f46.jpg" alt="3.1_11_段页式管理方式-4.jpg"></p><h2 id="虚拟内存的基本概念"><a href="#虚拟内存的基本概念" class="headerlink" title="虚拟内存的基本概念"></a>虚拟内存的基本概念</h2><p><img src="https://bu.dusays.com/2023/08/19/64e0e433a20e1.jpg" alt="3.2_1_虚拟内存的基本概念-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e433e4788.jpg" alt="3.2_1_虚拟内存的基本概念-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e43502a6d.jpg" alt="3.2_1_虚拟内存的基本概念-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e434e4752.jpg" alt="3.2_1_虚拟内存的基本概念-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e434d469f.jpg" alt="3.2_1_虚拟内存的基本概念-5.jpg"></p><h2 id="请求分页管理方式"><a href="#请求分页管理方式" class="headerlink" title="请求分页管理方式"></a>请求分页管理方式</h2><p><img src="https://bu.dusays.com/2023/08/19/64e0e4c016cfe.jpg" alt="3.2_2_请求分页管理方式-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e4c0b4422.jpg" alt="3.2_2_请求分页管理方式-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e4c03fb17.jpg" alt="3.2_2_请求分页管理方式-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e4c073d5f.jpg" alt="3.2_2_请求分页管理方式-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e4c11c53d.jpg" alt="3.2_2_请求分页管理方式-5.jpg"></p><h2 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h2><p><img src="https://bu.dusays.com/2023/08/19/64e0e5436e969.jpg" alt="3.2_3_页面置换算法-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e5451fde9.jpg" alt="3.2_3_页面置换算法-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e543e1c93.jpg" alt="3.2_3_页面置换算法-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e545976a1.jpg" alt="3.2_3_页面置换算法-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e544878dd.jpg" alt="3.2_3_页面置换算法-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e544ecf67.jpg" alt="3.2_3_页面置换算法-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e54742487.jpg" alt="3.2_3_页面置换算法-7.jpg"></p><h2 id="页面分配策略"><a href="#页面分配策略" class="headerlink" title="页面分配策略"></a>页面分配策略</h2><p><img src="https://bu.dusays.com/2023/08/22/64e4aae87bae7.jpg" alt="3.2_4_页面分配策略-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4aaeb38aae.jpg" alt="3.2_4_页面分配策略-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4aae9ae077.jpg" alt="3.2_4_页面分配策略-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4aaeb0133b.jpg" alt="3.2_4_页面分配策略-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4aaea237cf.jpg" alt="3.2_4_页面分配策略-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4aaeab9843.jpg" alt="3.2_4_页面分配策略-6.jpg"></p><h2 id="内存映射文件"><a href="#内存映射文件" class="headerlink" title="内存映射文件"></a>内存映射文件</h2><p><img src="https://bu.dusays.com/2023/08/22/64e4ab6fa2ee9.jpg" alt="3.2_5_内存映射文件-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4ab70c3a04.jpg" alt="3.2_5_内存映射文件-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4ab71c09a8.jpg" alt="3.2_5_内存映射文件-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4abe8c607d.jpg" alt="3.2_5_内存映射文件-4.jpg"></p><p><img src="https://sway.office.com/s/R1C5hAP7XVmGDbXk/images/2oFQvoo6_hxYKj" alt="3.2_5_内存映射文件-5.jpg"></p><h2 id="初识文件管理"><a href="#初识文件管理" class="headerlink" title="初识文件管理"></a>初识文件管理</h2><p><img src="https://bu.dusays.com/2023/08/24/64e73eff69f7f.jpg" alt="4.1_1_初识文件管理-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f0281dd6.jpg" alt="4.1_1_初识文件管理-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f01bcc53.jpg" alt="4.1_1_初识文件管理-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f00db021.jpg" alt="4.1_1_初识文件管理-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f028bde8.jpg" alt="4.1_1_初识文件管理-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f0272c82.jpg" alt="4.1_1_初识文件管理-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f00800d5.jpg" alt="4.1_1_初识文件管理-7.jpg"></p><h2 id="文件的逻辑结构"><a href="#文件的逻辑结构" class="headerlink" title="文件的逻辑结构"></a>文件的逻辑结构</h2><p><img src="https://bu.dusays.com/2023/08/24/64e73f8f7b012.jpg" alt="4.1_2_文件的逻辑结构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f9184a65.jpg" alt="4.1_2_文件的逻辑结构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f942c537.jpg" alt="4.1_2_文件的逻辑结构-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f92e3f79.jpg" alt="4.1_2_文件的逻辑结构-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8cde028e5b.jpg" alt="4.1_2_文件的逻辑结构-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f947e93e.jpg" alt="4.1_2_文件的逻辑结构-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f9296c7f.jpg" alt="4.1_2_文件的逻辑结构-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f93b3d23.jpg" alt="4.1_2_文件的逻辑结构-8.jpg"></p><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><p><img src="https://bu.dusays.com/2023/08/24/64e7400fd1015.jpg" alt="4.1_3_文件目录-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e74010abb34.jpg" alt="4.1_3_文件目录-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e740155713b.jpg" alt="4.1_3_文件目录-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e7401450ebf.jpg" alt="4.1_3_文件目录-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e740169dd3b.jpg" alt="4.1_3_文件目录-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e7401605584.jpg" alt="4.1_3_文件目录-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e74016c24f1.jpg" alt="4.1_3_文件目录-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e7401593030.jpg" alt="4.1_3_文件目录-8.jpg"></p><h2 id="文件的物理结构"><a href="#文件的物理结构" class="headerlink" title="文件的物理结构"></a>文件的物理结构</h2><p><img src="https://bu.dusays.com/2023/08/25/64e78860cfbc7.jpg" alt="4.1_4_文件的物理结构-01.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e788614896d.jpg" alt="4.1_4_文件的物理结构-02.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e788643d929.jpg" alt="4.1_4_文件的物理结构-03.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e788624532c.jpg" alt="4.1_4_文件的物理结构-04.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e788618a519.jpg" alt="4.1_4_文件的物理结构-05.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e7886312261.jpg" alt="4.1_4_文件的物理结构-06.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e78862bc759.jpg" alt="4.1_4_文件的物理结构-07.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e7886383cd4.jpg" alt="4.1_4_文件的物理结构-08.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e78862b94a4.jpg" alt="4.1_4_文件的物理结构-09.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e788640a530.jpg" alt="4.1_4_文件的物理结构-10.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e78922f15e4.jpg" alt="4.1_4_文件的物理结构-11.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e789269e35a.jpg" alt="4.1_4_文件的物理结构-12.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e7892709dd5.jpg" alt="4.1_4_文件的物理结构-13.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e789260d4f0.jpg" alt="4.1_4_文件的物理结构-14.jpg"></p><h2 id="逻辑结构-VS-物理结构"><a href="#逻辑结构-VS-物理结构" class="headerlink" title="逻辑结构 VS 物理结构"></a>逻辑结构 VS 物理结构</h2><p><img src="https://bu.dusays.com/2023/08/25/64e7896c10770.jpg" alt="4.1_5_逻辑结构VS物理结构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e78972b5bc6.jpg" alt="4.1_5_逻辑结构VS物理结构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e7897445790.jpg" alt="4.1_5_逻辑结构VS物理结构-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e7897420172.jpg" alt="4.1_5_逻辑结构VS物理结构-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e78970057e2.jpg" alt="4.1_5_逻辑结构VS物理结构-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e78971d73b2.jpg" alt="4.1_5_逻辑结构VS物理结构-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e7897423162.jpg" alt="4.1_5_逻辑结构VS物理结构-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e789728b6d4.jpg" alt="4.1_5_逻辑结构VS物理结构-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e789741efe4.jpg" alt="4.1_5_逻辑结构VS物理结构-9.jpg"></p><h2 id="文件存储空间管理"><a href="#文件存储空间管理" class="headerlink" title="文件存储空间管理"></a>文件存储空间管理</h2><p><img src="https://bu.dusays.com/2023/08/25/64e827716cc03.jpg" alt="4.1_6_文件存储空间管理-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e82772ced19.jpg" alt="4.1_6_文件存储空间管理-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e827763690e.jpg" alt="4.1_6_文件存储空间管理-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e82776339f4.jpg" alt="4.1_6_文件存储空间管理-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8277647989.jpg" alt="4.1_6_文件存储空间管理-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e827762bdac.jpg" alt="4.1_6_文件存储空间管理-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e82774756b8.jpg" alt="4.1_6_文件存储空间管理-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e827762a5a0.jpg" alt="4.1_6_文件存储空间管理-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8277636ff1.jpg" alt="4.1_6_文件存储空间管理-9.jpg"></p><h2 id="文件的基本操作"><a href="#文件的基本操作" class="headerlink" title="文件的基本操作"></a>文件的基本操作</h2><p><img src="https://bu.dusays.com/2023/08/25/64e82842c99e1.jpg" alt="4.1_7_文件的基本操作-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8284455e08.jpg" alt="4.1_7_文件的基本操作-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e82844c4f32.jpg" alt="4.1_7_文件的基本操作-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e82843c70bd.jpg" alt="4.1_7_文件的基本操作-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e82844c951f.jpg" alt="4.1_7_文件的基本操作-5.jpg"></p><h2 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h2><p><img src="https://bu.dusays.com/2023/08/25/64e828c0481da.jpg" alt="4.1_8_文件共享-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e828c1163fb.jpg" alt="4.1_8_文件共享-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e828c206e3a.jpg" alt="4.1_8_文件共享-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e828c18d1e2.jpg" alt="4.1_8_文件共享-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e828c1cee68.jpg" alt="4.1_8_文件共享-5.jpg"></p><h2 id="文件保护"><a href="#文件保护" class="headerlink" title="文件保护"></a>文件保护</h2><p><img src="https://bu.dusays.com/2023/08/25/64e8294942a88.jpg" alt="4.1_9_文件保护-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8294aa151d.jpg" alt="4.1_9_文件保护-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8294c74160.jpg" alt="4.1_9_文件保护-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8294ae92b3.jpg" alt="4.1_9_文件保护-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8294c475c5.jpg" alt="4.1_9_文件保护-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8294c618be.jpg" alt="4.1_9_文件保护-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8294c6a60e.jpg" alt="4.1_9_文件保护-7.jpg"></p><h2 id="补充说明-2"><a href="#补充说明-2" class="headerlink" title="补充说明 2"></a>补充说明 2</h2><p><img src="https://sway.office.com/s/spYzd7vE8sSW2u50/images/WUQwvOYCHgI3af" alt="4.2_1_没有这节-1.jpg"></p><p>对上面容易混淆的一部分内容粗略整理：</p><p>文件的逻辑结构：</p><ul><li>无结构文件</li><li>有结构文件<ul><li>顺序文件</li><li>索引文件</li><li>索引顺序文件、（进一步地，有）多级索引顺序文件</li></ul></li></ul><p>文件的物理结构（对<strong>非空闲磁盘块</strong>的管理）：</p><ul><li>连续分配</li><li>链接分配<ul><li>隐式链接</li><li>显式链接</li></ul></li><li>索引分配<ul><li>若索引表太大，则：<ul><li>链接方案</li><li>多层索引</li><li>混合索引</li></ul></li></ul></li></ul><p>文件存储空间管理（对<strong>空闲磁盘块</strong>的管理）：</p><ul><li>空闲表法</li><li>空闲链表法<ul><li>空闲盘块链</li><li>空闲盘区链</li></ul></li><li>位示图法</li><li>成组链接法</li></ul><p>具体细节可根据本文章目录快速查找。</p><h2 id="文件系统的层次结构"><a href="#文件系统的层次结构" class="headerlink" title="文件系统的层次结构"></a>文件系统的层次结构</h2><p><img src="https://bu.dusays.com/2023/08/28/64ec273619b30.jpg" alt="4.3_1_文件系统的层次结构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec27376ed52.jpg" alt="4.3_1_文件系统的层次结构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec27373281b.jpg" alt="4.3_1_文件系统的层次结构-3.jpg"></p><h2 id="文件系统的全局结构（布局）"><a href="#文件系统的全局结构（布局）" class="headerlink" title="文件系统的全局结构（布局）"></a>文件系统的全局结构（布局）</h2><p><img src="https://bu.dusays.com/2023/08/28/64ec27daac758.jpg" alt="4.3_2_文件系统的全局结构（布局）-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec27db12e81.jpg" alt="4.3_2_文件系统的全局结构（布局）-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec27db4fe42.jpg" alt="4.3_2_文件系统的全局结构（布局）-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec27db87e10.jpg" alt="4.3_2_文件系统的全局结构（布局）-4.jpg"></p><h2 id="虚拟文件系统"><a href="#虚拟文件系统" class="headerlink" title="虚拟文件系统"></a>虚拟文件系统</h2><p><img src="https://bu.dusays.com/2023/08/28/64ec28447a569.jpg" alt="4.3_3_虚拟文件系统-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec2845791c9.jpg" alt="4.3_3_虚拟文件系统-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec2845e0e90.jpg" alt="4.3_3_虚拟文件系统-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec2846b5c31.jpg" alt="4.3_3_虚拟文件系统-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec2845c8cad.jpg" alt="4.3_3_虚拟文件系统-5.jpg"></p><h2 id="IO设备的基本概念和分类"><a href="#IO设备的基本概念和分类" class="headerlink" title="IO设备的基本概念和分类"></a>IO设备的基本概念和分类</h2><p><img src="https://bu.dusays.com/2023/08/28/64ecbd8984d96.jpg" alt="5.1_1_IO设备的基本概念和分类-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbd8a86b5f.jpg" alt="5.1_1_IO设备的基本概念和分类-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbd8b201dd.jpg" alt="5.1_1_IO设备的基本概念和分类-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbd8ae989d.jpg" alt="5.1_1_IO设备的基本概念和分类-4.jpg"></p><h2 id="IO控制器"><a href="#IO控制器" class="headerlink" title="IO控制器"></a>IO控制器</h2><p><img src="https://bu.dusays.com/2023/08/28/64ecbe1f1b07e.jpg" alt="5.1_2_IO控制器-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe21e2578.jpg" alt="5.1_2_IO控制器-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe236d4b3.jpg" alt="5.1_2_IO控制器-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe2074ea4.jpg" alt="5.1_2_IO控制器-4.jpg"></p><h2 id="IO控制方式"><a href="#IO控制方式" class="headerlink" title="IO控制方式"></a>IO控制方式</h2><p><img src="https://bu.dusays.com/2023/08/28/64ecbe889d639.jpg" alt="5.1_3_IO控制方式-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe8c9564e.jpg" alt="5.1_3_IO控制方式-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe8ee3f9f.jpg" alt="5.1_3_IO控制方式-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe8b999a6.jpg" alt="5.1_3_IO控制方式-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe8d826dc.jpg" alt="5.1_3_IO控制方式-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe8dbb194.jpg" alt="5.1_3_IO控制方式-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe8cb1255.jpg" alt="5.1_3_IO控制方式-7.jpg"></p><h2 id="IO软件层次结构"><a href="#IO软件层次结构" class="headerlink" title="IO软件层次结构"></a>IO软件层次结构</h2><p><img src="https://bu.dusays.com/2023/08/28/64ecbf04043e9.jpg" alt="5.1_4_IO软件层次结构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf0906aae.jpg" alt="5.1_4_IO软件层次结构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf05aa4e6.jpg" alt="5.1_4_IO软件层次结构-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf04d519e.jpg" alt="5.1_4_IO软件层次结构-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf0621015.jpg" alt="5.1_4_IO软件层次结构-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf07b76d2.jpg" alt="5.1_4_IO软件层次结构-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf05d6cad.jpg" alt="5.1_4_IO软件层次结构-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf08ceddc.jpg" alt="5.1_4_IO软件层次结构-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf0a35723.jpg" alt="5.1_4_IO软件层次结构-9.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf0542a65.jpg" alt="5.1_4_IO软件层次结构-10.jpg"></p><h2 id="输入输出应用程序接口和驱动程序接口"><a href="#输入输出应用程序接口和驱动程序接口" class="headerlink" title="输入输出应用程序接口和驱动程序接口"></a>输入输出应用程序接口和驱动程序接口</h2><p><img src="https://bu.dusays.com/2023/08/28/64ecbfde74e9e.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfe097285.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfdee8b91.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfe0a0176.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfe00de44.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfe07be21.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfdf69c02.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfdf389e6.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfe0afaf5.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-9.jpg"></p><h2 id="IO核心子系统"><a href="#IO核心子系统" class="headerlink" title="IO核心子系统"></a>IO核心子系统</h2><p><img src="https://bu.dusays.com/2023/08/28/64ecc07ba02ec.jpg" alt="5.2_1_IO核心子系统-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecc07be2202.jpg" alt="5.2_1_IO核心子系统-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecc07c2295e.jpg" alt="5.2_1_IO核心子系统-3.jpg"></p><h2 id="假脱机技术"><a href="#假脱机技术" class="headerlink" title="假脱机技术"></a>假脱机技术</h2><p><img src="https://bu.dusays.com/2023/08/29/64ede22d799ea.jpg" alt="5.2_2_假脱机技术-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede22f974d4.jpg" alt="5.2_2_假脱机技术-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede230d2bf1.jpg" alt="5.2_2_假脱机技术-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede22f5128a.jpg" alt="5.2_2_假脱机技术-4.jpg"></p><p><img src="https://sway.office.com/s/spYzd7vE8sSW2u50/images/9XGWMTqZ_M13vT" alt="5.2_2_假脱机技术-5.jpg"></p><p><img src="https://sway.office.com/s/spYzd7vE8sSW2u50/images/vgbtxoYOINMfHY" alt="5.2_2_假脱机技术-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede231292a8.jpg" alt="5.2_2_假脱机技术-7.jpg"></p><h2 id="设备的分配与回收"><a href="#设备的分配与回收" class="headerlink" title="设备的分配与回收"></a>设备的分配与回收</h2><p><img src="https://bu.dusays.com/2023/08/29/64ede3859b08f.jpg" alt="5.2_3_设备的分配与回收-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede38779e54.jpg" alt="5.2_3_设备的分配与回收-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede3875bebb.jpg" alt="5.2_3_设备的分配与回收-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede388a96d1.jpg" alt="5.2_3_设备的分配与回收-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede387259c6.jpg" alt="5.2_3_设备的分配与回收-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede3867bf75.jpg" alt="5.2_3_设备的分配与回收-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede38852f47.jpg" alt="5.2_3_设备的分配与回收-7.jpg"></p><p><img src="https://sway.office.com/s/spYzd7vE8sSW2u50/images/bQaqiGl08kdRUZ" alt="5.2_3_设备的分配与回收-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede3890070f.jpg" alt="5.2_3_设备的分配与回收-9.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede3890a03c.jpg" alt="5.2_3_设备的分配与回收-10.jpg"></p><h2 id="缓冲区管理"><a href="#缓冲区管理" class="headerlink" title="缓冲区管理"></a>缓冲区管理</h2><p><img src="https://bu.dusays.com/2023/08/29/64ede5ab5b649.jpg" alt="5.2_4_缓冲区管理-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5af1163d.jpg" alt="5.2_4_缓冲区管理-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5af1a04b.jpg" alt="5.2_4_缓冲区管理-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5afe4bd0.jpg" alt="5.2_4_缓冲区管理-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5acb8adf.jpg" alt="5.2_4_缓冲区管理-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5afa7d4f.jpg" alt="5.2_4_缓冲区管理-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5ab8ba7d.jpg" alt="5.2_4_缓冲区管理-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5adc1f77.jpg" alt="5.2_4_缓冲区管理-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5aff1ffc.jpg" alt="5.2_4_缓冲区管理-9.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5ad7e6b0.jpg" alt="5.2_4_缓冲区管理-10.jpg"></p><h2 id="磁盘的结构"><a href="#磁盘的结构" class="headerlink" title="磁盘的结构"></a>磁盘的结构</h2><p><img src="https://bu.dusays.com/2023/08/30/64eeeed613925.jpg" alt="5.3_1_磁盘的结构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeeed7707fd.jpg" alt="5.3_1_磁盘的结构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeeed7c2642.jpg" alt="5.3_1_磁盘的结构-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeeed8c65c6.jpg" alt="5.3_1_磁盘的结构-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeeed895fb9.jpg" alt="5.3_1_磁盘的结构-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeeed8171e3.jpg" alt="5.3_1_磁盘的结构-6.jpg"></p><h2 id="磁盘调度算法"><a href="#磁盘调度算法" class="headerlink" title="磁盘调度算法"></a>磁盘调度算法</h2><p><img src="https://bu.dusays.com/2023/08/30/64eeef46df3f4.jpg" alt="5.3_2_磁盘调度算法-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeef48eb4cd.jpg" alt="5.3_2_磁盘调度算法-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeef4ab6363.jpg" alt="5.3_2_磁盘调度算法-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeef4a6b52a.jpg" alt="5.3_2_磁盘调度算法-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeef4a8978d.jpg" alt="5.3_2_磁盘调度算法-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeef4a8e0a9.jpg" alt="5.3_2_磁盘调度算法-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeef48b6be9.jpg" alt="5.3_2_磁盘调度算法-7.jpg"></p><h2 id="减少磁盘延迟时间的方法"><a href="#减少磁盘延迟时间的方法" class="headerlink" title="减少磁盘延迟时间的方法"></a>减少磁盘延迟时间的方法</h2><p><img src="https://bu.dusays.com/2023/08/30/64eeefd73b683.jpg" alt="5.3_3_减少磁盘延迟时间的方法-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeefd730e5d.jpg" alt="5.3_3_减少磁盘延迟时间的方法-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeefd801a74.jpg" alt="5.3_3_减少磁盘延迟时间的方法-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeefd7a1548.jpg" alt="5.3_3_减少磁盘延迟时间的方法-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeefd6bfcc7.jpg" alt="5.3_3_减少磁盘延迟时间的方法-5.jpg"></p><h2 id="磁盘的管理"><a href="#磁盘的管理" class="headerlink" title="磁盘的管理"></a>磁盘的管理</h2><p><img src="https://bu.dusays.com/2023/08/30/64eef07bb971c.jpg" alt="5.3_4_磁盘的管理-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef07e336dc.jpg" alt="5.3_4_磁盘的管理-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef080c4891.jpg" alt="5.3_4_磁盘的管理-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef07f8b560.jpg" alt="5.3_4_磁盘的管理-4.jpg"></p><h2 id="固态硬盘SSD"><a href="#固态硬盘SSD" class="headerlink" title="固态硬盘SSD"></a>固态硬盘SSD</h2><p><img src="https://bu.dusays.com/2023/08/30/64eef0e8c4c50.jpg" alt="5.3_5_固态硬盘SSD-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef0ea2b7f3.jpg" alt="5.3_5_固态硬盘SSD-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef0e958845.jpg" alt="5.3_5_固态硬盘SSD-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef0e9b8e6b.jpg" alt="5.3_5_固态硬盘SSD-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef0ea13539.jpg" alt="5.3_5_固态硬盘SSD-5.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写在前面：&lt;/p&gt;
&lt;p&gt;虽然本笔记的大多数内容是王道的 PPT ，但也是有我的注释的！王道的课程真的很好，咸鱼学长讲课生动又仔细。每年的课件和视频都是有变化的，我这里把 PPT 贴出来只是自用，本文章禁止转载。最后附上王道的网站：&lt;code&gt;cskaoyan.com&lt;/c</summary>
      
    
    
    
    <category term="笔记" scheme="https://loveofpeach.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="OS" scheme="https://loveofpeach.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Graduation</title>
    <link href="https://loveofpeach.github.io/posts/368869f3.html"/>
    <id>https://loveofpeach.github.io/posts/368869f3.html</id>
    <published>2023-06-30T17:32:43.000Z</published>
    <updated>2023-09-05T01:51:24.540Z</updated>
    
    <content type="html"><![CDATA[<p>毕业了，很难受。</p><p>我惊讶于这份难受。在相当的一段时间里，我以为自己已经枯死，再难有感情上的波动。</p><p>大家陆陆续续的离开宿舍，奔赴各自的前程，我们还会笑嘻嘻在先走的室友留下的东西里淘金。</p><p>“哟，这还有个去年顺的大白 cos 服呢。”</p><p>“继承！”</p><p>我本是倒数第二个离开的，可是最后一位室友还是和我一起离开了，说自己一个人多待几个小时也是难受，不如一起走。</p><p>拍照，拉闸，断电。</p><p>以前我总是调侃『仰天大笑出门去，我辈岂是 XX（校名）人』，路上却无言。</p><p>今天在某人的空间里看到毕业留念的照片，心里一咯噔，才后知后觉地发现，好像错过了重要的人。</p><p>挺可爱的女孩子。交集不多，大一的活动接触过几次，后来逐渐沦为点赞之交。似乎在某节人满为患专业课上，她坐在我的右边。但除此之外没有别的相关记忆，当时我被愤怒和绝望冲昏了头脑，在想别的事情。</p><p>某次补考的考场上，监考报到她名字时，才发现她就坐在我后面（补考考场见？.jpg），竟一时分辨不出样貌。这倒也不奇怪，本来也没常照面，忘了长相也很正常。或许是我自己在心里勾勒出了一个可能陪伴我的人，我为自己强加于人的期待感到惭愧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;毕业了，很难受。&lt;/p&gt;
&lt;p&gt;我惊讶于这份难受。在相当的一段时间里，我以为自己已经枯死，再难有感情上的波动。&lt;/p&gt;
&lt;p&gt;大家陆陆续续的离开宿舍，奔赴各自的前程，我们还会笑嘻嘻在先走的室友留下的东西里淘金。&lt;/p&gt;
&lt;p&gt;“哟，这还有个去年顺的大白 cos 服呢。”&lt;/</summary>
      
    
    
    
    <category term="生活" scheme="https://loveofpeach.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="慢就业" scheme="https://loveofpeach.github.io/tags/%E6%85%A2%E5%B0%B1%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>电力负荷预测笔记</title>
    <link href="https://loveofpeach.github.io/posts/420347ac.html"/>
    <id>https://loveofpeach.github.io/posts/420347ac.html</id>
    <published>2023-06-29T05:10:16.000Z</published>
    <updated>2023-06-30T16:31:04.218Z</updated>
    
    <content type="html"><![CDATA[<p>并非我的笔记，以前问人要的。</p><p><img src="https://bu.dusays.com/2023/06/29/649d157187de7.jpg" alt="电力负荷预测笔记-01.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d157250197.jpg" alt="电力负荷预测笔记-02.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d157263621.jpg" alt="电力负荷预测笔记-03.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d15728c7b8.jpg" alt="电力负荷预测笔记-04.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d15727b4e2.jpg" alt="电力负荷预测笔记-05.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d157250edb.jpg" alt="电力负荷预测笔记-06.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d15728b623.jpg" alt="电力负荷预测笔记-07.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d15727a742.jpg" alt="电力负荷预测笔记-08.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d15728b49b.jpg" alt="电力负荷预测笔记-09.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d157283a09.jpg" alt="电力负荷预测笔记-10.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160aa1eea.jpg" alt="电力负荷预测笔记-11.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160aa0863.jpg" alt="电力负荷预测笔记-12.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160aa49ad.jpg" alt="电力负荷预测笔记-13.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160aab3e1.jpg" alt="电力负荷预测笔记-14.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160aa106e.jpg" alt="电力负荷预测笔记-15.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160aad5e7.jpg" alt="电力负荷预测笔记-16.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160ab41f8.jpg" alt="电力负荷预测笔记-17.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;并非我的笔记，以前问人要的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bu.dusays.com/2023/06/29/649d157187de7.jpg&quot; alt=&quot;电力负荷预测笔记-01.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bu.du</summary>
      
    
    
    
    <category term="笔记" scheme="https://loveofpeach.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="负荷预测" scheme="https://loveofpeach.github.io/tags/%E8%B4%9F%E8%8D%B7%E9%A2%84%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>生活在树上</title>
    <link href="https://loveofpeach.github.io/posts/67769661.html"/>
    <id>https://loveofpeach.github.io/posts/67769661.html</id>
    <published>2023-06-16T01:58:44.000Z</published>
    <updated>2023-09-04T16:09:33.872Z</updated>
    
    <content type="html"><![CDATA[<p>今天早上又睡到了十点，为了不被朝阳拥抱，我特意选了一处荫凉的枝桠。</p><p>树友已经有起枝的了，抖着腿在打地下城。我不明白地下城有什么好玩的，我只是望文生义地觉得，他只要纵身一跃，就能跳到地下。但那可不是什么好主意——地下有可怖的鸟雀。</p><p>这些鸟雀虽不如外面的鸟雀那么有攻击性，却也不是好惹的：它们在读大学，等它们念完了大学，又是鸟界社会的生力军。我看着蹦蹦跳跳、鸟头攒动的赶第二节课的鸟流，如是想。</p><p>我拆开铜锣烧的包装，就着农夫山泉对付下去。这些都是昨天晚饭后去树超买的，为的是午饭前不至于饿着肚子，也不至于太饱吃不下午饭。我曾听人言，此树百货大树有一位职员，每天在林间飞跃通勤两个半小时——就像东瀛鸟洲的忍鸟那样，以致天天早上不吃东西，得了胃癌，年纪轻轻就去世了，坠到地面去，被大学鸟——大概是医学鸟捡了去，“树人虽蠢五脏俱全”，从此不知所踪。</p><p>历史学者会告诉我们，遥远的过去，人们在大地上行走。但一场变故之后，千山鸟飞绝，万径人踪灭，我们生活在了树上。倘若说更古的时候，猿猴从树上下到地面是生存的选择，那么我们再回到树上也没什么可耻的吧，都是为了生存。</p><p>鸟生们终于上完了第二节课，熙熙攘攘蹦回宿舍。这是一个人和鸟都会担心蛋的炎热天气，不过树上的生活总还有些荫蔽，不似蒸腾着暑气的地面。我饶有兴致地看着这些鸟雀，在蹦进宿舍阴影边缘的时候，它们就像是果冻一样被吸了进去，并发出短促的“嗖”的音效。说是宿舍，也就是鸽子笼般似的，这帮大学鸟们过的也不滋润。宿舍前的台阶上陈列着一些外卖，这些鸟生们就用喙叼着塑料袋的提嘴，扑棱着翅膀一摇一晃地回各自的鸽子笼。</p><p>“傻逼xx，食堂吔排骨去，晚了就只能喝树上贵粥了。”树友发话。</p><p>据说，人类曾培育过一种叫做“羊猪熊”的树上动物，作为肉料来源。但羊猪熊自诞生起就散发出令人肃然起敬的气场，最后成为一种宗教式的神秘动物，受很多人的膜拜。因此人类至今花费相当成本在树上养殖着传统动物。</p><p>树上贵粥的前身叫“爱唠嗑地”，一家很受欢迎的连锁餐饮，尤以好喝的粥闻名树界，原本不在此树集团旗下。后来此树集团认为非我树类其心必异，接管了爱唠嗑地在此树治下的业务，并抬高了粥的售价，于是收获恶名“树上贵粥”。</p><p>“树上贵粥，狗都不吃。走吧。”</p><p>我还是因午觉错过了这些鸟生们下午上课的光景，难以想象它们顶着毒辣太阳出笼的心情。</p><p>很好的月亮，很好的夜。</p><p>鸟生们一丝不挂、成群结队地踱去洗浴场，用我的八倍镜可以看清它们的每一根初级飞羽。泥浴是这些鸟生们一天中最闲适的时候，洗完澡就该上笼休息，明天继续奋斗了。</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?aid=811838805&bvid=BV1f34y1E7UP&cid=727854836&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><p>临近鸟生宿舍关门的时候，一只可爱的雀儿衔着张纸，左瞧右瞧，把纸放在了我们树的树洞里。看来是把这个树洞当作它的树洞了，看看上面写了啥：喳喳喳喳叽叽叽，叽叽叽叽喳喳喳，看不懂，算了，还是放回去吧。</p><p>我爬回自己的枝桠，摸出手机，往树干上一靠，这可是老祖宗留下的宝贝。那些鸟雀最近都不怎么出去，它们的消遣会不会是叫翅机呢？或者叫喙机？不能吧，我笑了，那眼睛要瞎的。</p><p>不早了，该睡了。</p><p>“降维打击！”，啪，血绒花于手心绽放，生活在树上，是要处理好蚊子问题的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天早上又睡到了十点，为了不被朝阳拥抱，我特意选了一处荫凉的枝桠。&lt;/p&gt;
&lt;p&gt;树友已经有起枝的了，抖着腿在打地下城。我不明白地下城有什么好玩的，我只是望文生义地觉得，他只要纵身一跃，就能跳到地下。但那可不是什么好主意——地下有可怖的鸟雀。&lt;/p&gt;
&lt;p&gt;这些鸟雀虽不如外</summary>
      
    
    
    
    <category term="闲文" scheme="https://loveofpeach.github.io/categories/%E9%97%B2%E6%96%87/"/>
    
    
    <category term="谵妄" scheme="https://loveofpeach.github.io/tags/%E8%B0%B5%E5%A6%84/"/>
    
  </entry>
  
  <entry>
    <title>Fourier Stuff</title>
    <link href="https://loveofpeach.github.io/posts/7f212daa.html"/>
    <id>https://loveofpeach.github.io/posts/7f212daa.html</id>
    <published>2023-06-05T14:04:34.000Z</published>
    <updated>2023-08-16T10:13:39.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>方程 $z^n=1\quad (n=1,2,3,\cdots)$ 的复数根 $z$ 为 <strong>$n$ 次单位根</strong><a href="#bib1" id="bib1ref"><sup>[1]</sup></a>。</p><p>下面求解该方程。</p><p>已知欧拉公式<a href="#bib2" id="bib2ref"><sup>[2]</sup></a>：</p><script type="math/tex; mode=display">e^{i\pi}+1=0</script><p>则：</p><script type="math/tex; mode=display">(e^{i\pi})^2=(-1)^2</script><script type="math/tex; mode=display">e^{2i\pi}=1</script><p>两边作 $k$ 次方：</p><script type="math/tex; mode=display">e^{i2k\pi}=1</script><p>再取 $n$ 次根，得：</p><script type="math/tex; mode=display">\sqrt[n]{1}=e^{i2\pi \frac{k}{n}}=\cos 2\pi \frac{k}{n}+i\sin 2\pi \frac{k}{n}</script><p>由三角函数的周期性易知，其根有 $n$ 个，分别是 $k$ 取 $0,1,2,\cdots ,n-1$</p><p>即，单位的 $n$ 次根有 $n$ 个：</p><script type="math/tex; mode=display">e^{\frac{2\pi ki}{n}} \quad (k=0,1,2,\cdots ,n-1)</script><p>单位的 $n$ 次根以乘法构成 $n$ 阶循环群，生成元是 <strong>$n$ 次本原单位根</strong>。$n$ 次本原单位根是 $e^{\frac{2\pi ki}{n}}$ ，其中 $k$ 和 $n$ 互质。因此由欧拉函数定义，$n$ 次本原单位根数目为欧拉函数 $\varphi (n)$ .</p><p>例子：</p><ul><li>一次单位根有一个：$1$</li><li>二次单位根有两个：$+1$ 和 $-1$ ，只有 $-1$ 是本原根</li><li>三次单位根是（除 1 外都是本原根）：<script type="math/tex; mode=display">\{1,\frac{-1+\sqrt{3}i}{2},\frac{-1-\sqrt{3}i}{2}\}</script></li><li>四次单位根是：$\{1,+i,-1,-i\}$ ，其中 $+i$ 和 $-i$ 是本原根</li></ul><p>当 $n$ 不小于 2 时，n 次单位根总和为 0 .</p><script type="math/tex; mode=display">\sum\limits_{k=0}^{n-1}e^{\frac{2\pi ki}{n}}=\frac{e^{\frac{2\pi kni}{n}}-1}{e^{\frac{2\pi i}{n}}-1}=\frac{1-1}{e^{\frac{2\pi i}{n}}-1}=0</script><p>该结果在复平面上是显然的。</p><h2 id="FFT-多项式乘法"><a href="#FFT-多项式乘法" class="headerlink" title="FFT 多项式乘法"></a>FFT 多项式乘法</h2><p>部分内容参考自视频 <a href="https://www.youtube.com/watch?v=h7apO7q16V0&amp;ab_channel=Reducible">The Fast Fourier Transform (FFT): Most Ingenious Algorithm Ever?</a> 只有生肉，没有找到较好的翻译版本。因此使用了部分英语表述。这个视频在记法上有一些蛊惑人心的地方，我就按照自己的习惯来了。</p><p>问题引入：我们试图计算两个多项式的乘积。朴素的做法是使用乘法的分配律在 $O(n^2)$ 时间内完成。现在需要寻找更高效的算法。</p><p>为此引入 Polynomial Representation 的另一种方法：value representation.</p><p>Coefficient Representation :</p><script type="math/tex; mode=display">P(x)=p_0+p_1x+p_2x^2+\cdots p_dx^d</script><script type="math/tex; mode=display">\begin{matrix} \underbrace{[p_0,p_1,\cdots ,p_d]} \\ {\scriptstyle\text{Coefficient Representation}} \end{matrix}</script><p>Value Representation :</p><script type="math/tex; mode=display">\begin{matrix} \underbrace{\{(x_0,P(x_0)),(x_1,P(x_1)),\cdots ,(x_d,P(x_d))\}} \\ {\scriptstyle\text{Value Representation}} \end{matrix}</script><p>两者之间的关系：</p><p>$(d+1)$ points uniquely define a degree $d$ polynomial.</p><p>$e.g.$</p><script type="math/tex; mode=display">\{(-1,0),(0,1),(1,0),(2,1)\}</script><p>Corresponds to</p><script type="math/tex; mode=display">P(x)=\frac{2}{3}x^3-x^2-\frac{2}{3}x+1</script><p>$Proof.$</p><script type="math/tex; mode=display">\begin{bmatrix}P(x_0)  \\P(x_1)  \\\vdots  \\P(x_d)  \end{bmatrix}=\begin{bmatrix}1  & x_0  & x_0^2  & \cdots  & x_0^d  \\1  & x_1  & x_1^2  & \cdots  & x_1^d  \\\vdots & \vdots & \vdots & \ddots & \vdots \\1  & x_d  &x_d^2  & \cdots & x_d^d\end{bmatrix}\begin{bmatrix}p_0  \\p_1  \\\vdots  \\p_d  \end{bmatrix}</script><p>Clearly, the determinant of the matrix above is the Vandermonde determinant.</p><p>Since the chosen values of $x_i (i=0,1,2,\cdots ,d)$ are distinct from each other, the Vandermonde determinant is non-zero.</p><script type="math/tex; mode=display">\det \begin{pmatrix}\begin{bmatrix}1  & x_0  & x_0^2  & \cdots  & x_0^d  \\1  & x_1  & x_1^2  & \cdots  & x_1^d  \\\vdots & \vdots & \vdots & \ddots & \vdots \\1  & x_d  &x_d^2  & \cdots & x_d^d\end{bmatrix}\end{pmatrix}=\prod_{0\leqslant j<i\leqslant d}(x_i-x_j)\neq 0</script><p>Therefore, the matrix is invertible, and the equation has a unique solution.</p><p>Hence, a bijection is established between the value representation and the coefficient representation of the polynomial through this matrix. $(d+1)$ points uniquely define a degree $d$ polynomial.</p><p>■</p><p>有了两个多项式的 value representation ，就可以很容易地计算出这两个多项式的乘积的 value representation.</p><p>整个过程的大致思路如下：</p><p><img src="https://bu.dusays.com/2023/06/06/647ef11d64daf.jpg" alt="41-1.jpg"></p><p>首先考虑 Coeff 到 Value 的转换。</p><p>我们尝试计算 n-1 次多项式 $P(x)$ 在</p><script type="math/tex; mode=display">x=\pm x_1,\pm x_2,\cdots ,\pm x_{n/2}</script><p>处的值，寻找能减少计算量的思路。</p><p>将 $P(x)$ 按项的次数奇偶分类：</p><script type="math/tex; mode=display">P(x)=P_e(x^2)+xP_o(x^2)</script><p>得到 $P_e(x)$ 和 $P_o(x)$ . 于是：</p><script type="math/tex; mode=display">P(\pm a)=P_e(a^2)\pm aP_o(a^2)</script><p>于是问题转化为求 $P_e(x)$ 和 $P_o(x)$ 在 $a^2$ 处的值，这个过程似乎可以递归地进行。而且这两个多项式的次数比原来下降了一半。看起来很 nice .</p><p>而问题是，进入第二层递归时，我们的采样点就不是相反数对了。递归失败。</p><p>以上尝试给出了有益的思路，接下来为了制造相反数对，考虑将数域拓展到复数。</p><p>在下图中，任一节点的值的平方等于父节点的值：</p><p><img src="https://bu.dusays.com/2023/06/06/647efb554cffa.png" alt="41-2.png"></p><p>满足我们想要的性质。注意这里为方便原理展示对采样点数目 $n$ 作了限制：$n=2^k,k\in \mathbb{N}$ . 同时这也是对多项式次数的限制。</p><p>依据在前置知识中的结论，单位根在复平面中如下所示：</p><p><img src="https://bu.dusays.com/2023/06/06/647efeaed5e9e.png" alt="41-3.png"></p><p>并且，由相关性质，可以得到相反数对：</p><p><img src="https://bu.dusays.com/2023/06/06/647effba57508.png" alt="41-4.png"></p><script type="math/tex; mode=display">\omega ^{j+n/2}=-\omega ^j</script><p>下面总结一下算法的流程。</p><p>为求出 n-1 次多项式 $P(x)$ 的 value representation ，需要计算其在</p><script type="math/tex; mode=display">x=\omega ^0,\omega ^1,\cdots ,\omega ^{n-1} \quad | \quad \omega =e^{\frac{2\pi i}{n}}</script><p>处的值。为了减少计算量，将 $P(x)$ 按项的次数奇偶分类：</p><script type="math/tex; mode=display">P(x)=P_e(x^2)+xP_o(x^2)</script><p>由是发现需要求解 $P_e(x)$ 和 $P_o(x)$ 在</p><script type="math/tex; mode=display">\omega ^0,\omega ^2,\omega ^4, \cdots ,\omega ^{n-2}</script><p>处的值。这个过程可以递归地完成。</p><blockquote><p>注意这里就是原视频蛊惑人心的地方，UP主在记法上的不严谨可能会导致理解上的困难。$P_e(x)$ 和 $P_o(x)$ 是将公式 $P(x)=P_e(x^2)+xP_o(x^2)$ 右侧的多项式 $P_e(x^2)$ 和 $P_o(x^2)$ 看作 $x^2$ 的函数用 $x$ 改写得到的。</p></blockquote><p>假设递归成功，就得到了 $P_e(x)$ 和 $P_o(x)$ 的 value representation . 记数组（从 0 开始编号）：</p><script type="math/tex; mode=display">y_e[...]=[P_e(\omega ^0),P_e(\omega ^2),\cdots ,P_e(\omega ^{n-2})]</script><script type="math/tex; mode=display">y_o[...]=[P_o(\omega ^0),P_o(\omega ^2),\cdots ,P_o(\omega ^{n-2})]</script><p>现在要做的是，由此得到原来的多项式的 value representation .</p><p>在上面得到的公式</p><script type="math/tex; mode=display">P(\pm a)=P_e(a^2)\pm aP_o(a^2)</script><p>中，令 $a=\omega ^j$ 得：</p><script type="math/tex; mode=display">P(\pm \omega ^j)=P_e(\omega ^{2j})\pm \omega ^jP_o(\omega ^{2j})</script><p>再由 $\omega ^{j+n/2}=-\omega ^j$ 得：</p><script type="math/tex; mode=display">P(\omega ^j)=P_e(\omega ^{2j})+ \omega ^jP_o(\omega ^{2j})</script><script type="math/tex; mode=display">P(\omega ^{j+n/2})=P_e(\omega ^{2j})- \omega ^jP_o(\omega ^{2j})</script><script type="math/tex; mode=display">j\in \{0,1,\cdots ,\frac{n}{2}-1 \}</script><p>又因为</p><script type="math/tex; mode=display">y_e[j]=P_e(\omega ^{2j})</script><script type="math/tex; mode=display">y_o[j]=P_o(\omega ^{2j})</script><p>于是</p><script type="math/tex; mode=display">P(\omega ^j)=y_e[j]+ \omega ^jy_o[j]</script><script type="math/tex; mode=display">P(\omega ^{j+n/2})=y_e[j]- \omega ^jy_o[j]</script><script type="math/tex; mode=display">j\in \{0,1,\cdots ,\frac{n}{2}-1 \}</script><p>最后返回该层多项式的 value representation 即可。</p><p>伪代码如下：</p><p><img src="https://bu.dusays.com/2023/06/06/647f4c3a1ba34.png" alt="41-5.png"></p><p>返回看下图 41-1.jpg ，还需要完成 Value 到 Coeff 的转换。</p><p>在之前的式子中：</p><script type="math/tex; mode=display">\begin{bmatrix}P(x_0)  \\P(x_1)  \\\vdots  \\P(x_{n-1})  \end{bmatrix}=\begin{bmatrix}1  & x_0  & x_0^2  & \cdots  & x_0^{n-1}  \\1  & x_1  & x_1^2  & \cdots  & x_1^{n-1}  \\\vdots & \vdots & \vdots & \ddots & \vdots \\1  & x_{n-1}  &x_{n-1}^2  & \cdots & x_{n-1}^{n-1}\end{bmatrix}\begin{bmatrix}p_0  \\p_1  \\\vdots  \\p_{n-1}  \end{bmatrix}</script><p>令 $x_k=\omega ^k\quad \mathrm{where}\quad \omega =e^{\frac{2\pi i}{n}}$</p><script type="math/tex; mode=display">\begin{bmatrix}P(\omega ^0)  \\P(\omega ^1)  \\P(\omega ^2)  \\\vdots  \\P(\omega ^{n-1})  \end{bmatrix}=\begin{bmatrix}1  & 1  & 1  & \cdots  & 1  \\1  & \omega  & \omega ^2  & \cdots  & \omega ^{n-1}  \\1  & \omega ^2  & \omega ^4  & \cdots  & \omega ^{2(n-1)}  \\\vdots & \vdots & \vdots & \ddots & \vdots \\1  & \omega ^{n-1}  & \omega ^{2(n-1)}  & \cdots & \omega ^{(n-1)(n-1)}\end{bmatrix}\begin{bmatrix}p_0  \\p_1  \\p_2  \\\vdots  \\p_{n-1}  \end{bmatrix}</script><p>上式中的矩阵被称为 <strong>Discrete Fourier Transform (DFT) matrix</strong></p><script type="math/tex; mode=display">\begin{bmatrix}p_0  \\p_1  \\p_2  \\\vdots  \\p_{n-1}  \end{bmatrix}=\begin{bmatrix}1  & 1  & 1  & \cdots  & 1  \\1  & \omega  & \omega ^2  & \cdots  & \omega ^{n-1}  \\1  & \omega ^2  & \omega ^4  & \cdots  & \omega ^{2(n-1)}  \\\vdots & \vdots & \vdots & \ddots & \vdots \\1  & \omega ^{n-1}  & \omega ^{2(n-1)}  & \cdots & \omega ^{(n-1)(n-1)}\end{bmatrix}^{-1}\begin{bmatrix}P(\omega ^0)  \\P(\omega ^1)  \\P(\omega ^2)  \\\vdots  \\P(\omega ^{n-1})  \end{bmatrix}</script><p>求出矩阵的逆：</p><script type="math/tex; mode=display">\begin{bmatrix}p_0  \\p_1  \\p_2  \\\vdots  \\p_{n-1}  \end{bmatrix}=\frac{1}{n}\begin{bmatrix}1  & 1  & 1  & \cdots  & 1  \\1  & \omega ^{-1} & \omega ^{-2}  & \cdots  & \omega ^{-(n-1)}  \\1  & \omega ^{-2}  & \omega ^{-4}  & \cdots  & \omega ^{-2(n-1)}  \\\vdots & \vdots & \vdots & \ddots & \vdots \\1  & \omega ^{-(n-1)}  & \omega ^{-2(n-1)}  & \cdots & \omega ^{-(n-1)(n-1)}\end{bmatrix}\begin{bmatrix}P(\omega ^0)  \\P(\omega ^1)  \\P(\omega ^2)  \\\vdots  \\P(\omega ^{n-1})  \end{bmatrix}</script><p>这个时候简直是 amazing 啊，上面这个矩阵和之前的那个矩阵形式几乎一样，那么我们在代码上只需要少量改动。</p><p>Every $\omega$ in original matrix is now $\frac{1}{n}\omega ^{-1}$ .</p><p>伪代码：</p><p><img src="https://bu.dusays.com/2023/06/07/647ff63a072b2.png" alt="41-6.png"></p><p>至此已分析完算法的原理部分。</p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>欲知后事如何 …</p><hr><p><a id="bib1" href="#bib1ref"><sup>[1]</sup></a> 参考自<a href="https://zh.wikipedia.org/zh-cn/%E5%8D%95%E4%BD%8D%E6%A0%B9">维基百科 - 单位根</a> （已备份）</p><p><a id="bib2" href="#bib2ref"><sup>[2]</sup></a> 相关推导见 <a href="https://loveofpeach.github.io/posts/1b45ac71.html">SeriesNote</a> 函数的幂级数展开式的应用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h2&gt;&lt;p&gt;方程 $z^n=1&#92;quad (n=1,2,3,&#92;cdots)$ 的复数根 $z$ 为 &lt;strong&gt;$n$ 次单位根&lt;/</summary>
      
    
    
    
    <category term="笔记" scheme="https://loveofpeach.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数学" scheme="https://loveofpeach.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="FFT" scheme="https://loveofpeach.github.io/tags/FFT/"/>
    
  </entry>
  
  <entry>
    <title>暂为今日所作</title>
    <link href="https://loveofpeach.github.io/posts/4c71d97e.html"/>
    <id>https://loveofpeach.github.io/posts/4c71d97e.html</id>
    <published>2023-06-04T04:44:08.000Z</published>
    <updated>2023-09-04T16:12:03.495Z</updated>
    
    <content type="html"><![CDATA[<p>去年期末封校那阵子，有一类人的心态特别有意思。</p><p>概括下学校的情况。学校每天covid新增比全市数据多一截，每天排队捅喉咙，三餐配送蔬菜炖肉沫，越往后越不新鲜，一股怪味。学生只能呆在自己的宿舍楼层，没有澡洗。某老师还一拍脑门，把厕所的地漏堵了，厕所里的具体情况就不细说了。彼时供暖公司又歇了菜，贴在暖气片上暖手都够呛，冬夜里只有蚊子与人作伴。</p><p>然而，在这种连释迦牟尼都无法释然的环境里，竟还是有人愿意苦中作乐，声称自己占了学校便宜：每天的饭钱。</p><p>有这么一种经典的桥段：一位德高望重的老师傅，手下一队弟子。某天一弟子犯了个小错误，这师傅暴跳如雷，当着众人的面，给这位倒霉蛋来了一下子。弟子赶忙认错：师傅打的有理，这事确是弟子的不是。</p><p>我常想，就算那弟子确实有过，但若是无心之举，也没有造成严重后果，就至于挨这一巴掌吗？而更奇怪的是，为什么弟子要说师傅打的有理呢？一方面他要表现出一个认错的态度，希望暂消了师傅的火气。另一方面，这话也是说给其他弟子和他自己听的。如果在众人面前假装自己的判断是错在自己、师傅占理，自己挨打就是应该的，那么面子就保住了。因为如果他不这么说，就等同于认为师傅的做法是过火的、野蛮的，但可惜自己又不能拿师傅怎么样，就只能给大伙留下一个弱小无力的形象。</p><p>假装认同、假装满意，然后面子保住了，不是吗？</p><p>学校配的菜又不要我们钱，今天还有个油鸡腿呢。</p><p>每天白吃白住，出了学校哪找去。</p><p>但匪夷所思的是，解封之后酒吧舞的又恰恰是这群人。</p><p>也许向师傅赔不是的人更加精明，也无可厚非。但我还是更喜欢另一种人。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;去年期末封校那阵子，有一类人的心态特别有意思。&lt;/p&gt;
&lt;p&gt;概括下学校的情况。学校每天covid新增比全市数据多一截，每天排队捅喉咙，三餐配送蔬菜炖肉沫，越往后越不新鲜，一股怪味。学生只能呆在自己的宿舍楼层，没有澡洗。某老师还一拍脑门，把厕所的地漏堵了，厕所里的具体情况就</summary>
      
    
    
    
    <category term="闲文" scheme="https://loveofpeach.github.io/categories/%E9%97%B2%E6%96%87/"/>
    
    
    <category term="诡辩" scheme="https://loveofpeach.github.io/tags/%E8%AF%A1%E8%BE%A9/"/>
    
  </entry>
  
  <entry>
    <title>Perlin Noise</title>
    <link href="https://loveofpeach.github.io/posts/c70d4622.html"/>
    <id>https://loveofpeach.github.io/posts/c70d4622.html</id>
    <published>2023-05-28T02:39:16.000Z</published>
    <updated>2023-06-29T05:08:05.432Z</updated>
    
    <content type="html"><![CDATA[<p>柏林噪声算法常用于程序生成随机内容，在游戏、电影等领域应用广泛。</p><p>本文的目标是使用 Python 生成如下的图像，由这个图像出发可以实现很多效果<a href="#bib1" id="bib1ref"><sup>[1]</sup></a>。</p><p><img src="https://bu.dusays.com/2023/05/28/64730c66b04a8.jpg" alt="39-1.jpg" title="16*16个晶格，每个晶格25*25像素"></p><p>虽然柏林噪声算法有一个改进版本<a href="#bib2" id="bib2ref"><sup>[2]</sup></a>，但本文仍是基于旧原理的实现。</p><p>很多时候，我们并不是想要这样的随机：</p><p><img src="https://bu.dusays.com/2023/05/28/647319bcc890f.png" alt="39-2.png"></p><p>我们需要更平滑的随机，就像本文第一张图片那样。</p><p>39-1.jpg（第一张图片）是一张灰度图，可以将其每个像素的灰度值映射为数值，用二维坐标索引，就得到一个三维的曲面（如果你愿意忽略它是离散的的话）。显然 39-1.jpg 就像是杂乱的水面，而 39-2.png 就是钉床了（虽然由于钉子非常密集躺上去应该还不至于当场去世）。</p><p>Perlin 的做法是：</p><p>在网格上生成图片，每个小格子称为“晶格”。首先，在格点上生成一个随机的梯度向量。对于晶格内的点，作由四个晶格格点到自身的向量，这些向量与对应的四个梯度向量作点积，得到格点上的四个数值，那么对于此晶格内的点，噪声值就是这四个数值的双线性插值<a href="#bib3" id="bib3ref"><sup>[3]</sup></a>。此外，你可能需要一个 $fade$ 函数使图像更平滑。</p><p>But wait … , why it even works ?</p><p>一个可能的解释：</p><p><img src="https://bu.dusays.com/2023/06/29/649d117929aee.webp" alt="39-2dot5.webp"></p><p>对此我也不是很清楚。虽然这大致和梯度的几何意义有关（想象一下那个三维曲面），但是还是有一些细节不能理解。等以后搞明白了再说。</p><p>OK，原理介绍完了，缝一个简陋的代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_gradient_field</span>(<span class="params">m, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    np.random.rand()是NumPy库中的一个函数</span></span><br><span class="line"><span class="string">    用于生成一个具有指定维度的随机数数组</span></span><br><span class="line"><span class="string">    此例中会生成一个形状为(m, n, 2)的三维数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    gradient_field = np.random.rand(m, n, <span class="number">2</span>)*<span class="number">2</span>-<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> gradient_field</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfade</span>(<span class="params">x</span>)-&gt;<span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> x*x*x*(x*(x*<span class="number">6</span>-<span class="number">15</span>)+<span class="number">10</span>)  <span class="comment"># 可能是自作多情的优化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lerp</span>(<span class="params">t, fa, fb</span>):  <span class="comment"># 线性插值</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>-t) * fa + t * fb</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">single_point_noise</span>(<span class="params">x, y, dx, dy, gradient_field</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    x, y 为晶格编号</span></span><br><span class="line"><span class="string">    dx, dy 相对坐标</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    x0 = <span class="built_in">int</span>(x)  <span class="comment"># 梯度向量编号</span></span><br><span class="line">    y0 = <span class="built_in">int</span>(y)</span><br><span class="line">    x1 = x0 + <span class="number">1</span></span><br><span class="line">    y1 = y0 + <span class="number">1</span>  <span class="comment"># 笛卡尔坐标系的坐标记法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算格点处的噪声值</span></span><br><span class="line">    gradient00 = np.dot(gradient_field[y0, x0], [dx, dy])</span><br><span class="line">    gradient01 = np.dot(gradient_field[y1, x0], [dx, dy - <span class="number">1</span>])</span><br><span class="line">    gradient10 = np.dot(gradient_field[y0, x1], [dx - <span class="number">1</span>, dy])</span><br><span class="line">    gradient11 = np.dot(gradient_field[y1, x1], [dx - <span class="number">1</span>, dy - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    u = myfade(dx)</span><br><span class="line">    v = myfade(dy)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 双线性插值</span></span><br><span class="line">    x_interpolation = lerp(u, gradient00, gradient10)</span><br><span class="line">    y_interpolation = lerp(u, gradient01, gradient11)</span><br><span class="line">    noise_value = lerp(v, x_interpolation, y_interpolation)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> noise_value</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill_block</span>(<span class="params">x, y</span>):  <span class="comment"># 需要离散化处理</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, l+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, l+<span class="number">1</span>):</span><br><span class="line">            mymap[y*l+j][x*l+i] = single_point_noise(x, y, (i-<span class="number">0.5</span>)/l, (j-<span class="number">0.5</span>)/l, ggf)</span><br><span class="line"></span><br><span class="line">x=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;输入晶格横向个数：&quot;</span>))</span><br><span class="line">y=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;输入晶格纵向个数：&quot;</span>))</span><br><span class="line">l=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;输入每个晶格的像素数(l*l): &quot;</span>))</span><br><span class="line">mymap = np.zeros([y*l+<span class="number">5</span>, x*l+<span class="number">5</span>], dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"><span class="comment"># 边界冗余5像素防止数组越界</span></span><br><span class="line"></span><br><span class="line">ggf = generate_gradient_field(x+<span class="number">2</span>, y+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">        fill_block(i, j)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出时去除冗余像素</span></span><br><span class="line">imageio.imwrite(<span class="string">&quot;D:\mypycode\perlinnoise\\testpic1.jpg&quot;</span>, mymap[:y*l, :x*l])</span><br></pre></td></tr></table></figure><p>再放一张输出结果：</p><p><img src="https://bu.dusays.com/2023/05/28/64732691a958c.jpg" alt="39-3.jpg" title="20*20晶格，每个晶格32*32像素"></p><p>顺带一提，这种噪音图会引起博主的轻微不适，原因不明。</p><p>我们假设，图片一共被划分为 $x\cdot y$ 个晶格，横向 $x$ 个，纵向 $y$ 个。每个晶格是 $l\cdot l$ 像素的正方形。</p><p>向量场格点从 $0$ 开始编号，横：$0,1,2,\cdots ,x$ ；纵：$0,1,2,\cdots ,y$ .</p><p>晶格从 $0$ 开始编号，$(0,0),(0,1),\cdots ,(0,x-1);\cdots$</p><p>对于每个晶格，处理过程是类似的：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">        fill_block(i, j)</span><br></pre></td></tr></table></figure><p>每个晶格里面，需要填充每个像素的噪声值。如何计算这个噪声值，上文已经提过。</p><p>其中，<code>single_point_noise</code>函数是在连续意义下的单位正方形中计算点的噪声值，而在生成图片时，却是离散的像素点。这里我直接简单粗暴地使用像素点的几何中心坐标，传值到<code>single_point_noise</code>函数中。另外，由于是单位正方形，所以值要除以 $l$ .</p><p>在此基础上，有一个简单的拓展：如果在时间维度上插值，就可以制作出三维的情形，或是动态变化的二维柏林噪声——这两者是一回事。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_gradient_field</span>(<span class="params">m, n, p</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    np.random.rand()是NumPy库中的一个函数</span></span><br><span class="line"><span class="string">    用于生成一个具有指定维度的随机数数组</span></span><br><span class="line"><span class="string">    此例中会生成一个形状为(m, n, p, 3)的四维数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    gradient_field = np.random.rand(m, n, p, <span class="number">3</span>)*<span class="number">2</span>-<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> gradient_field</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfade</span>(<span class="params">x</span>)-&gt;<span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> x*x*x*(x*(x*<span class="number">6</span>-<span class="number">15</span>)+<span class="number">10</span>)  <span class="comment"># 可能是画蛇添足的优化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lerp</span>(<span class="params">t, fa, fb</span>):  <span class="comment"># 线性插值</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>-t) * fa + t * fb</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">single_point_noise</span>(<span class="params">x, y, t, dx, dy, dt, gradient_field</span>):</span><br><span class="line">    x0 = <span class="built_in">int</span>(x)  <span class="comment"># 梯度向量编号</span></span><br><span class="line">    y0 = <span class="built_in">int</span>(y)</span><br><span class="line">    t0 = <span class="built_in">int</span>(t)</span><br><span class="line">    x1 = x0 + <span class="number">1</span></span><br><span class="line">    y1 = y0 + <span class="number">1</span>  <span class="comment"># 笛卡尔坐标系的坐标记法</span></span><br><span class="line">    t1 = t0 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算格点处的噪声值</span></span><br><span class="line">    gradient000 = np.dot(gradient_field[y0, x0, t0], [dx, dy, dt])</span><br><span class="line">    gradient010 = np.dot(gradient_field[y1, x0, t0], [dx, dy-<span class="number">1</span>, dt])</span><br><span class="line">    gradient100 = np.dot(gradient_field[y0, x1, t0], [dx-<span class="number">1</span>, dy, dt])</span><br><span class="line">    gradient110 = np.dot(gradient_field[y1, x1, t0], [dx-<span class="number">1</span>, dy -<span class="number">1</span>, dt])</span><br><span class="line">    gradient001 = np.dot(gradient_field[y0, x0, t1], [dx, dy, dt-<span class="number">1</span>])</span><br><span class="line">    gradient011 = np.dot(gradient_field[y1, x0, t1], [dx, dy-<span class="number">1</span>, dt-<span class="number">1</span>])</span><br><span class="line">    gradient101 = np.dot(gradient_field[y0, x1, t1], [dx-<span class="number">1</span>, dy, dt-<span class="number">1</span>])</span><br><span class="line">    gradient111 = np.dot(gradient_field[y1, x1, t1], [dx-<span class="number">1</span>, dy -<span class="number">1</span>, dt-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    u = myfade(dx)</span><br><span class="line">    v = myfade(dy)</span><br><span class="line">    w = myfade(dt)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 三线性插值</span></span><br><span class="line">    x_interpolation0 = lerp(u, gradient000, gradient100)</span><br><span class="line">    y_interpolation0 = lerp(u, gradient010, gradient110)</span><br><span class="line">    noise_value0 = lerp(v, x_interpolation0, y_interpolation0)</span><br><span class="line">    x_interpolation1 = lerp(u, gradient001, gradient101)</span><br><span class="line">    y_interpolation1 = lerp(u, gradient011, gradient111)</span><br><span class="line">    noise_value1 = lerp(v, x_interpolation1, y_interpolation1)</span><br><span class="line">    noise_value = lerp(w, noise_value0, noise_value1)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> noise_value</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill_block</span>(<span class="params">x, y, t</span>):  <span class="comment"># 需要离散化处理</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, l+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, l+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, l+<span class="number">1</span>):</span><br><span class="line">                mymap[y*l+j][x*l+i][t*l+k] = single_point_noise(x, y, t, (i-<span class="number">0.5</span>)/l, (j-<span class="number">0.5</span>)/l, (k-<span class="number">0.5</span>)/l, ggf)</span><br><span class="line"></span><br><span class="line">x=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;输入晶格横向个数：&quot;</span>))</span><br><span class="line">y=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;输入晶格纵向个数：&quot;</span>))</span><br><span class="line">t=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;输入时间晶格个数：&quot;</span>))</span><br><span class="line">l=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;输入每个晶格的像素数(l*l): &quot;</span>))</span><br><span class="line">mymap = np.zeros([y*l+<span class="number">5</span>, x*l+<span class="number">5</span>, t*l+<span class="number">5</span>], dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"><span class="comment"># 边界冗余5像素防止数组越界</span></span><br><span class="line"></span><br><span class="line">ggf = generate_gradient_field(x+<span class="number">2</span>, y+<span class="number">2</span>, t+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">            fill_block(i, j, k)</span><br><span class="line"></span><br><span class="line">output_folder = <span class="string">&quot;D:\mypycode\perlinnoise\\timeaxis\\&quot;</span>  <span class="comment"># 输出文件夹的路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t*l+<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># 提取灰度图像</span></span><br><span class="line">    gray_image = mymap[:, :, t]</span><br><span class="line">    gray_image = gray_image[:y*l, :x*l]  <span class="comment"># 去除冗余像素</span></span><br><span class="line"></span><br><span class="line">    output_path = <span class="string">f&quot;<span class="subst">&#123;output_folder&#125;</span>gray_image_<span class="subst">&#123;t&#125;</span>.png&quot;</span>  <span class="comment"># 输出文件的路径和文件名</span></span><br><span class="line">    imageio.imwrite(output_path, gray_image)</span><br></pre></td></tr></table></figure><p>将得到的图片转为 GIF（博客中的 PythonNote 有提），最终输出结果如下：</p><p><img src="https://bu.dusays.com/2023/05/29/64743480920d5.gif" alt="39-4.gif"></p><p>这个动图看起来动静似乎不明显，这是因为设置了t=1 ，过大的话计算量太大。将 t 再稍微放大点，gif 的时间间隔缩短点，效果就会好很多。</p><p>在拓展维度时，代码的编写很大程度上是出于对某种统一形式的信仰——这代码就该这么写，而不需要考察其细节。在编写代码的时候，我甚至没有查找三线性插值是如何进行的。</p><p>最后的 tip : 上面代码的输出文件名可能不太好，因为在合成 gif 时，顺序可能是按严格的字典序排的。我是最后手动修改了文件名，反正也不多，就没有改代码了，因为很讨厌处理字符串。</p><p><img src="https://bu.dusays.com/2023/05/29/647436d5ddf7d.png" alt="39-5.png"></p><p>记录一下最近看的感觉不错的电影，因为实在没必要开个新文章写这些：壳中少女、末代皇帝。另外在看我推，目前看着还行。</p><hr><p><a id="bib1" href="#bib1ref"><sup>[1]</sup></a> <a href="https://www.youtube.com/watch?v=sChQCdbLdHE&amp;ab_channel=SimonDev">The Absurd Usefulness of Noise in Game Development</a></p><p><a id="bib2" href="#bib2ref"><sup>[2]</sup></a> <a href="https://mrl.cs.nyu.edu/~perlin/paper445.pdf">Ken Perlin’s SIGGRAPH 2002 paper: Improving Noise</a> （已备份）</p><p><a id="bib3" href="#bib3ref"><sup>[3]</sup></a> <a href="https://zh.wikipedia.org/wiki/%E5%8F%8C%E7%BA%BF%E6%80%A7%E6%8F%92%E5%80%BC">维基百科 双线性插值</a> （已备份）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;柏林噪声算法常用于程序生成随机内容，在游戏、电影等领域应用广泛。&lt;/p&gt;
&lt;p&gt;本文的目标是使用 Python 生成如下的图像，由这个图像出发可以实现很多效果&lt;a href=&quot;#bib1&quot; id=&quot;bib1ref&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;i</summary>
      
    
    
    
    <category term="笔记" scheme="https://loveofpeach.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="OpenCV" scheme="https://loveofpeach.github.io/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>双曲线讲义</title>
    <link href="https://loveofpeach.github.io/posts/db1a1b2e.html"/>
    <id>https://loveofpeach.github.io/posts/db1a1b2e.html</id>
    <published>2023-05-13T14:36:01.000Z</published>
    <updated>2023-07-04T16:12:48.348Z</updated>
    
    <content type="html"><![CDATA[<p>最近有在沉迷新游戏啦，是吼游verse的《斯鞑瑞幺》哦！超治愈的银河喜剧耶拜托！</p><p><img src="https://bu.dusays.com/2023/05/13/645fa78c0aeca.jpg" alt="38-1.jpg" title="纯·简·拉基兹德"></p><p>最赞的 BGM 就是《喧哗》啦。（由于一些问题导致手机端无法显示播放器）</p><html><center><head>    <meta charset="utf-8">    <title></title></head><body>    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="https://music.163.com/outchain/player?type=2&id=2045807071&auto=0&height=66"></iframe></body></center></html><p>说回正题，最近在试着做初中数学的讲义，因为领域外的妹妹要中考忽然问我相关的问题。</p><iframe frameBorder="0" width="100%" height="100%" style="min-width: 300px; min-height:500px" src="https://www.mathcha.io/editor/Bwv9YhBDtnquWrvdy6fvVwJ4qteWdo11F2m1O1o?embedded=true" ></iframe><p>不得不说 mathcha 真好用，还能保存为 pdf 备份。</p><p><img src="https://bu.dusays.com/2023/05/15/6462452d88125.gif" alt="gougouss.gif"></p><p>要准备答辩了，枯 /(ㄒoㄒ)/~~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近有在沉迷新游戏啦，是吼游verse的《斯鞑瑞幺》哦！超治愈的银河喜剧耶拜托！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bu.dusays.com/2023/05/13/645fa78c0aeca.jpg&quot; alt=&quot;38-1.jpg&quot; title=&quot;纯·简·拉</summary>
      
    
    
    
    <category term="做题" scheme="https://loveofpeach.github.io/categories/%E5%81%9A%E9%A2%98/"/>
    
    
    <category term="初中数学" scheme="https://loveofpeach.github.io/tags/%E5%88%9D%E4%B8%AD%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Minecraft with Python</title>
    <link href="https://loveofpeach.github.io/posts/2afe57ff.html"/>
    <id>https://loveofpeach.github.io/posts/2afe57ff.html</id>
    <published>2023-04-22T10:18:56.000Z</published>
    <updated>2023-07-21T16:24:12.054Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Python 游玩我的世界。</p><p>参考资料来源：各种网络资料和《零基础学 Minecraft 编程》，人民邮电出版社。</p><p><img src="https://bu.dusays.com/2023/04/24/6446a33de7053.png" alt="37-0.png" title="图书的两位作者"></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>环境配置教程：<a href="https://www.bilibili.com/video/BV1FG4y1X7SQ">https://www.bilibili.com/video/BV1FG4y1X7SQ</a></p><p>注意在安装 java -jar BuildTools.jar 的时候会打印一大大大坨信息，整个过程大约6分钟，需要梯子。出现如下信息则表示成功：</p><p><img src="https://bu.dusays.com/2023/04/22/6443b4148bdaa.png" alt="37-1.png"></p><p>启动服务器：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:\mcserver</span><br><span class="line">java <span class="literal">-Xms1024M</span> <span class="literal">-Xmx1024M</span> <span class="literal">-jar</span> spigot<span class="literal">-1</span>.<span class="number">19.4</span>.jar</span><br></pre></td></tr></table></figure><p>多人游戏，服务器地址<code>127.0.0.1</code>。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">op username   <span class="comment"># 给权限</span></span><br></pre></td></tr></table></figure><p>这个时候就可以使用作弊码了。作弊码附在文章末尾。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hellofrompy.py</span></span><br><span class="line"><span class="keyword">from</span> mcpi.minecraft <span class="keyword">import</span> Minecraft</span><br><span class="line"><span class="keyword">import</span> mcpi.block <span class="keyword">as</span> block</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;连接MC...&#x27;</span>)</span><br><span class="line">    mc = Minecraft.create()</span><br><span class="line"></span><br><span class="line">    mc.postToChat(<span class="string">&quot;hello frome Python&quot;</span>)</span><br><span class="line">    x, y, z = mc.player.getTilePos()</span><br><span class="line">    <span class="built_in">print</span>(x, y, z)</span><br><span class="line">    mc.setBlocks(x, y, z+<span class="number">5</span>, x, y, z+<span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="生成方块"><a href="#生成方块" class="headerlink" title="生成方块"></a>生成方块</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?aid=805023718&bvid=BV1sy4y157nH&cid=395365414&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><script type="math/tex; mode=display">{\scriptstyle\text{摧毁和放置方块教程}}</script><p>Minecraft 坐标信息：</p><ul><li>正东：x轴正方向</li><li>正南：z轴正方向</li><li>正上：y轴正方向</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 16blocks.py</span></span><br><span class="line"><span class="keyword">from</span> mcpi.minecraft <span class="keyword">import</span> Minecraft</span><br><span class="line"><span class="keyword">import</span> mcpi.block <span class="keyword">as</span> block</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 连接到 MC</span></span><br><span class="line">    mc = Minecraft.create()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 得到角色当前位置</span></span><br><span class="line">    x, y, z = mc.player.getTilePos()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 羊毛</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        mc.setBlock(x+<span class="number">3</span>, y, z+i, <span class="number">35</span>, i)</span><br><span class="line">        <span class="comment"># 35是羊毛的代号，0是白色</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>) <span class="comment"># 加个延时以演示</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://bu.dusays.com/2023/04/22/6443b414ed5ce.png" alt="37-2.png"></p><p>采用更多层循环以生成平面和立体。</p><p>多个方块同时放置的函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mc.setBlocks(x1, y1, z1, x2, y2, z2, blockid, someindex)</span><br></pre></td></tr></table></figure><p><code>(x1, y1, z1)</code>和<code>(x2, y2, z2)</code>对应一个长方体的两个对角顶点。根据这两个顶点我们可以绘制出一个由指定方块组成的长方体。</p><p>想要一个空心的？缩小一圈用<code>air</code>方块填充。</p><h2 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h2><p>实时显示玩家的位置：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># showpos.py</span></span><br><span class="line"><span class="keyword">from</span> mcpi.minecraft <span class="keyword">import</span> Minecraft</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">mc = Minecraft.create()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    pos = mc.player.getTilePos()</span><br><span class="line">    mc.postToChat(<span class="string">&quot;x=&quot;</span>+<span class="built_in">str</span>(pos.x)+<span class="string">&quot; y=&quot;</span>+<span class="built_in">str</span>(pos.y)+<span class="string">&quot; z=&quot;</span>+<span class="built_in">str</span>(pos.z))</span><br></pre></td></tr></table></figure><p>注意：若坐标错误，需输入<code>/setworldspawn 0 0 0</code>。</p><p>玩家进入某一区域，超过3秒弹出：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bump2sky.py</span></span><br><span class="line"><span class="keyword">from</span> mcpi.minecraft <span class="keyword">import</span> Minecraft</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">x1 = <span class="number">60</span>   <span class="comment"># y = 80</span></span><br><span class="line">x2 = <span class="number">63</span></span><br><span class="line">z1 = -<span class="number">17</span></span><br><span class="line">z2 = -<span class="number">15</span></span><br><span class="line">infield = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bump2sky</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        y += <span class="number">0.90</span>*t</span><br><span class="line">        mc.player.setPos(x+<span class="number">5</span>, y, z)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">mc = Minecraft.create()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    pos = mc.player.getTilePos()</span><br><span class="line">    <span class="keyword">if</span> pos.x&gt;=x1 <span class="keyword">and</span> pos.x&lt;=x2 <span class="keyword">and</span> pos.z&gt;=z1 <span class="keyword">and</span> pos.z&lt;=z2:</span><br><span class="line">        mc.postToChat(<span class="string">&quot;warnning&quot;</span>)</span><br><span class="line">        infield += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        infield = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> infield &gt; <span class="number">3</span>:</span><br><span class="line">        mc.postToChat(<span class="string">&quot;too slow!&quot;</span>)</span><br><span class="line">        bump2sky(pos.x, pos.y, pos.z)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://bu.dusays.com/2023/04/22/6443ec0d959ae.gif" alt="37-3.gif"></p><h2 id="绘制任意图像"><a href="#绘制任意图像" class="headerlink" title="绘制任意图像"></a>绘制任意图像</h2><p>知道了如何生成方块，就知道了如何绘制任意图像。</p><p><img src="https://bu.dusays.com/2023/04/27/644a0c520dc14.png" alt="37-4.png"></p><p>对于一张图片，如果我们能根据每一个像素点的 RGB 值找到对应颜色的 Minecraft 方块，就有可能在游戏中绘制该图像。</p><p>然而，并不是所有颜色都可以找到对应的 Minecraft 方块。对于找不到的颜色，我们希望有一个替代颜色，这个颜色应当在人眼视觉上相近。</p><p>为此，我们需要一个寻找相近颜色的算法。</p><p>已经知道，颜色可用 RGB 表示，是否相近的 RGB 值表示的颜色在视觉上相似呢？答案是否定的。但可喜可贺，还是有以 RGB 值计算颜色距离的公式（具体参考<a href="https://www.compuphase.com/cmetric.htm">此链接（该内容已备份）</a>）：</p><script type="math/tex; mode=display">\bar{r}=\frac{C_{1,R}+C_{2,R}}{2}</script><script type="math/tex; mode=display">\Delta R=C_{1,R}-C_{2,R}</script><script type="math/tex; mode=display">\Delta G=C_{1,G}-C_{2,G}</script><script type="math/tex; mode=display">\Delta B=C_{1,B}-C_{2,B}</script><script type="math/tex; mode=display">\Delta C=\sqrt{(2+\frac{\bar{r}}{256})\times \Delta R^{2}+4\Delta G^2+(2+\frac{255-\bar{r}}{256})\times \Delta B^2}</script><p>可以根据以上公式编写代码计算两个颜色的距离。不过，我们采用另一种更好的方案。</p><blockquote><p>CIEDE2000算法是CIE（国际照明委员会）于2000年提出的，它是Delta E算法的改进版本。CIEDE2000算法考虑了人眼感知颜色的非线性特性，并将颜色差异分解为亮度、色相和饱和度三个因素，从而更准确地计算颜色之间的相似度。CIEDE2000算法还考虑了颜色对比度的影响，因此在低对比度颜色之间的比较中表现更好。</p></blockquote><p>这个算法已经封装好了，安装 colormath 库：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install colormath</span><br></pre></td></tr></table></figure><p>使用此库需要初步了解颜色空间，并大致知道一些函数接受什么，返回什么，做了什么。</p><blockquote><p>「动态类型一时爽，代码重构火葬场。」</p></blockquote><p>colormath 官方文档：</p><ul><li><a href="https://python-colormath.readthedocs.io/en/latest/delta_e.html">https://python-colormath.readthedocs.io/en/latest/delta_e.html</a></li></ul><p>注意，如果提示：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: module <span class="string">&#x27;numpy&#x27;</span> has no attribute <span class="string">&#x27;asscalar&#x27;</span>. Did you mean: <span class="string">&#x27;isscalar&#x27;</span>? </span><br></pre></td></tr></table></figure><p>这是因为：</p><ul><li>numpy的版本过高，需要降版本（高情商）</li><li>numpy你真就不考虑历史兼容呗（低情商）</li></ul><p>降版本的命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall numpy</span><br><span class="line">pip install <span class="literal">-U</span> numpy==<span class="number">1.22</span>.<span class="number">4</span></span><br></pre></td></tr></table></figure><p>OK，颜色替代的问题解决了。但我们还缺一个映射方案。我们需要将颜色编码映射到具体的 Minecraft 方块的编号上。这方面的资料找起来比较麻烦。我直接给出链接：</p><ul><li><a href="https://www.minecraftinfo.com/idlist.htm">https://www.minecraftinfo.com/idlist.htm</a></li><li><a href="https://minecraft-ids.grahamedgecombe.com/">https://minecraft-ids.grahamedgecombe.com/</a></li><li><a href="https://www.stuffaboutcode.com/p/minecraft-api-reference.html">https://www.stuffaboutcode.com/p/minecraft-api-reference.html</a></li></ul><p>以上链接只是名字到编号的映射，我们总不能用眼睛看出物品的颜色编码吧？因此需要配合颜色到名字的映射表（该内容已备份）：</p><ul><li><a href="https://glow.lanzouo.com/iAret0mc0nyh">https://glow.lanzouo.com/iAret0mc0nyh</a></li></ul><p>注意有些方块是不能用的，它可能是个半砖，可能会随重力掉落，可能会自爆（例如仙人掌，不过仙人掌另有它用，之后再说），甚至可能根本不是一个方块。为了准确性，还需要在游戏里对比，这个比对过程是痛苦的，为了让世界 no more pain，我决定贴出初步整理的映射表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">ffffff,80</span><br><span class="line">dcdcdc,35</span><br><span class="line">dcd9d3,155</span><br><span class="line">d5c98c,216</span><br><span class="line">909090,42</span><br><span class="line">faee4d,41</span><br><span class="line">b0a836,19:1</span><br><span class="line">c5c52c,19</span><br><span class="line">2c4199,35:11</span><br><span class="line">8d909e,82</span><br><span class="line">4f4f4f,1:6</span><br><span class="line">848484,35:8</span><br><span class="line">6db015,35:5</span><br><span class="line">d06d8e,35:6</span><br><span class="line">414141,35:7</span><br><span class="line">ffc125,35:4</span><br><span class="line">ba6d2c,35:1</span><br><span class="line">9941ba,35:2</span><br><span class="line">6699d8,35:3</span><br><span class="line">486c98,251:3</span><br><span class="line">416d84,35:9</span><br><span class="line">6d3699,35:10</span><br><span class="line">58412c,35:12</span><br><span class="line">586d2c,35:13</span><br><span class="line">842c2c,35:14</span><br><span class="line">151515,35:15</span><br><span class="line">4b3f26,5:5</span><br><span class="line">7b663e,25</span><br><span class="line">4fbcb7,57</span><br><span class="line">8a8adc,79</span><br><span class="line">667f33,251:13</span><br></pre></td></tr></table></figure><p>这个映射表非常粗糙，如果希望有更丰富的色彩表现，请手动修改之。</p><p>注意：一些魔改的<code>mcpi</code>版本并不需要此映射表，而可以直接使用物品名称。但是这种<code>mcpi</code>版本与本文不兼容，也不与《零基础学 Minecraft 编程》兼容。更重要的，它们主要是通过某盘传播（而不是pip安装），如果你和我一样抵制某盘，不想在上面花钱，尽量不要倒向这个版本。</p><p>下面放出完整代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://loveofpeach.github.io/posts/2afe57ff.html</span></span><br><span class="line"><span class="keyword">from</span> colormath.color_objects <span class="keyword">import</span> sRGBColor, LabColor</span><br><span class="line"><span class="keyword">from</span> colormath.color_diff <span class="keyword">import</span> delta_e_cie2000</span><br><span class="line"><span class="keyword">from</span> colormath <span class="keyword">import</span> color_conversions</span><br><span class="line"><span class="keyword">from</span> imageio <span class="keyword">import</span> imread</span><br><span class="line"><span class="keyword">from</span> mcpi.minecraft <span class="keyword">import</span> Minecraft</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rgb2hex</span>(<span class="params">red, green, blue</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回一个 HexColorString</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;:02x&#125;&#123;:02x&#125;&#123;:02x&#125;&#x27;</span>.<span class="built_in">format</span>(red, green, blue)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex2lab</span>(<span class="params">hx</span>):</span><br><span class="line">    color_srbg = sRGBColor.new_from_rgb_hex(hx)</span><br><span class="line">    color_lab = color_conversions.convert_color(color_srbg, LabColor)</span><br><span class="line">    <span class="keyword">return</span> color_lab</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">closest_color</span>(<span class="params">hexStr</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    接受一个 HexColorString</span></span><br><span class="line"><span class="string">    返回列表中与该颜色最接近的颜色</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> hexStr <span class="keyword">in</span> colorhave: <span class="keyword">return</span> colorhave[hexStr]</span><br><span class="line"></span><br><span class="line">    closest_color = <span class="literal">None</span></span><br><span class="line">    closest_distance = <span class="literal">None</span></span><br><span class="line">    labStr = hex2lab(hexStr)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> color_code, color_name <span class="keyword">in</span> colorhave.items():</span><br><span class="line">        color_c = hex2lab(color_code)</span><br><span class="line">        distance = delta_e_cie2000(labStr, color_c)</span><br><span class="line">        <span class="keyword">if</span> closest_distance <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> distance &lt; closest_distance:</span><br><span class="line">            closest_distance = distance</span><br><span class="line">            closest_color = color_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> closest_color</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wip</span>(<span class="params">r, g, b</span>):</span><br><span class="line">    s = closest_color(rgb2hex(r, g, b))</span><br><span class="line">    tmpls = []</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;:&#x27;</span> <span class="keyword">in</span> s:</span><br><span class="line">        tmpls.append(<span class="built_in">eval</span>(s.split(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>]))</span><br><span class="line">        tmpls.append(<span class="built_in">eval</span>(s.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmpls.append(<span class="built_in">eval</span>(s))</span><br><span class="line">    <span class="keyword">return</span> tmpls</span><br><span class="line"></span><br><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;D:\mypycode\mccode\colormap.txt&quot;</span>)</span><br><span class="line">ls = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    line = line.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    ls.append(line.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">fo.close()</span><br><span class="line"></span><br><span class="line">colorhave = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ls)):</span><br><span class="line">    colorhave[ls[i][<span class="number">0</span>]] = ls[i][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">im = imread(<span class="string">&#x27;D:\mypycode\imageiostuff\\rmdpic.jpg&#x27;</span>)</span><br><span class="line">h, w, _ = im.shape</span><br><span class="line"></span><br><span class="line">mc = Minecraft.create()</span><br><span class="line">x0, y0, z0 = mc.player.getTilePos()</span><br><span class="line">x0 += <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        r, g, b = im[y][x]</span><br><span class="line">        flagls = wip(r, g, b)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(flagls)==<span class="number">1</span>:</span><br><span class="line">            mc.setBlock(x0+x, y0+h-y, z0, flagls[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mc.setBlock(x0+x, y0+h-y, z0, flagls[<span class="number">0</span>], flagls[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>一个简单的优化是：把最相近颜色存储起来。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://loveofpeach.github.io/posts/2afe57ff.html</span></span><br><span class="line"><span class="keyword">from</span> colormath.color_objects <span class="keyword">import</span> sRGBColor, LabColor</span><br><span class="line"><span class="keyword">from</span> colormath.color_diff <span class="keyword">import</span> delta_e_cie2000</span><br><span class="line"><span class="keyword">from</span> colormath <span class="keyword">import</span> color_conversions</span><br><span class="line"><span class="keyword">from</span> imageio.v2 <span class="keyword">import</span> imread</span><br><span class="line"><span class="keyword">from</span> mcpi.minecraft <span class="keyword">import</span> Minecraft</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rgb2hex</span>(<span class="params">red, green, blue</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回一个 HexColorString</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;:02x&#125;&#123;:02x&#125;&#123;:02x&#125;&#x27;</span>.<span class="built_in">format</span>(red, green, blue)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex2lab</span>(<span class="params">hx</span>):</span><br><span class="line">    color_srbg = sRGBColor.new_from_rgb_hex(hx)</span><br><span class="line">    color_lab = color_conversions.convert_color(color_srbg, LabColor)</span><br><span class="line">    <span class="keyword">return</span> color_lab</span><br><span class="line"></span><br><span class="line">closestcolor = &#123;&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">closest_color</span>(<span class="params">hexStr</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    接受一个 HexColorString</span></span><br><span class="line"><span class="string">    返回列表中与该颜色最接近的颜色</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> hexStr <span class="keyword">in</span> colorhave: <span class="keyword">return</span> colorhave[hexStr]</span><br><span class="line">    <span class="keyword">if</span> hexStr <span class="keyword">in</span> closestcolor: <span class="keyword">return</span> closestcolor[hexStr]</span><br><span class="line"></span><br><span class="line">    closest_color = <span class="literal">None</span></span><br><span class="line">    closest_distance = <span class="literal">None</span></span><br><span class="line">    labStr = hex2lab(hexStr)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> color_code, color_name <span class="keyword">in</span> colorhave.items():</span><br><span class="line">        color_c = hex2lab(color_code)</span><br><span class="line">        distance = delta_e_cie2000(labStr, color_c)</span><br><span class="line">        <span class="keyword">if</span> closest_distance <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> distance &lt; closest_distance:</span><br><span class="line">            closest_distance = distance</span><br><span class="line">            closest_color = color_name</span><br><span class="line"></span><br><span class="line">    closestcolor[hexStr] = closest_color</span><br><span class="line">    <span class="keyword">return</span> closestcolor[hexStr]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wip</span>(<span class="params">r, g, b</span>):</span><br><span class="line">    s = closest_color(rgb2hex(r, g, b))</span><br><span class="line">    tmpls = []</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;:&#x27;</span> <span class="keyword">in</span> s:</span><br><span class="line">        tmpls.append(<span class="built_in">eval</span>(s.split(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>]))</span><br><span class="line">        tmpls.append(<span class="built_in">eval</span>(s.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmpls.append(<span class="built_in">eval</span>(s))</span><br><span class="line">    <span class="keyword">return</span> tmpls</span><br><span class="line"></span><br><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;D:\mypycode\mccode\colormap.txt&quot;</span>)</span><br><span class="line">ls = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    line = line.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    ls.append(line.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">fo.close()</span><br><span class="line"></span><br><span class="line">colorhave = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ls)):</span><br><span class="line">    colorhave[ls[i][<span class="number">0</span>]] = ls[i][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">im = imread(<span class="string">&#x27;D:\mypycode\imageiostuff\delisha2.jpg&#x27;</span>)</span><br><span class="line">h, w, _ = im.shape</span><br><span class="line"></span><br><span class="line">mc = Minecraft.create()</span><br><span class="line">x0, y0, z0 = mc.player.getTilePos()</span><br><span class="line">x0 += <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        r, g, b = im[y][x]</span><br><span class="line">        flagls = wip(r, g, b)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(flagls)==<span class="number">1</span>:</span><br><span class="line">            mc.setBlock(x0+x, y0+h-y, z0, flagls[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mc.setBlock(x0+x, y0+h-y, z0, flagls[<span class="number">0</span>], flagls[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>当然，更好的方案是在命令中传入要绘制的图片，而不是每次绘制都要手动修改代码。</p><p>看一下效果（图片太大了两边加载不出来）：</p><p><img src="https://bu.dusays.com/2023/04/25/6447aec98ff19.png" alt="37-5.png"></p><p>作为对比，给出原图：</p><p><img src="https://bu.dusays.com/2023/04/25/6447ba4dc9e3e.jpg" alt="37-5dot5.jpg" title="高240 宽430"></p><p>头发的细节：</p><p><img src="https://bu.dusays.com/2023/04/25/6447af2f62c6f.png" alt="37-6.png"></p><p>考虑如下生成的图片：</p><p><img src="https://bu.dusays.com/2023/04/27/644a0e6e316c1.png" alt="37-7.png"></p><p>我们希望只保留这个谜之柴犬，那么可以在数据文件中添加仙人掌的记录。因仙人掌自爆的特性，只会留下柴犬本犬：</p><p><img src="https://bu.dusays.com/2023/04/27/644a0e6e1742c.png" alt="37-8.png"></p><p>对于更大的图片，可能需要在平坦的世界绘制，或者铺在地上。对于像素更高的图片，可能需要事先压缩，或者转换为像素画形式。普通图片转换为像素画形式可以使用 Python 实现，不再赘述。</p><p><img src="https://bu.dusays.com/2023/05/31/647728ea3511b.png" alt="37-9.png" title="ΤΗΙ ΚΑΛΛΙΣΤΗΙ"></p><p>从上图可以看出，这个颜色映射表还是非常简陋的。但我没耐心再一个个地比对了。</p><h2 id="作弊码"><a href="#作弊码" class="headerlink" title="作弊码"></a>作弊码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/gamerule doDaylightCycle false  # 永久白天</span><br><span class="line">/gamemode creative               # 创造 </span><br><span class="line">/gamemode survival               # 生存</span><br><span class="line">/gamemode adventure              # 冒险</span><br><span class="line">/gamemode spectator              # 旁观</span><br><span class="line">/spawnpoint                      # 重生点设置为当前位置</span><br><span class="line">/seed                            # 种子</span><br><span class="line">/give username minecraft:diamond_ore 64      # 钻石</span><br><span class="line">/give username minecraft:emerald_block 64    # 绿宝石</span><br><span class="line">/tp username &#123;x&#125; &#123;y&#125; &#123;z&#125;                     # 传送</span><br><span class="line">/time set 0                                  # morning 6</span><br><span class="line">/time set 9500                               # noon</span><br><span class="line">/time set 12000                              # 黄昏</span><br><span class="line">/xp &#123;int&#125;                                    # 给经验</span><br><span class="line">/effect username &#123;type&#125; &#123;time&#125; &#123;level&#125;       # 给药</span><br><span class="line">/gamerule keepInventory true                 # 死亡不掉落</span><br><span class="line">/summon minecraft:zombie                     # 召唤僵尸</span><br><span class="line">/setblock &#123;x&#125; &#123;y&#125; &#123;z&#125; minecraft:redstone     # 设置红石方块</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用 Python 游玩我的世界。&lt;/p&gt;
&lt;p&gt;参考资料来源：各种网络资料和《零基础学 Minecraft 编程》，人民邮电出版社。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bu.dusays.com/2023/04/24/6446a33de7053.png&quot; </summary>
      
    
    
    
    <category term="杂" scheme="https://loveofpeach.github.io/categories/%E6%9D%82/"/>
    
    
    <category term="Python" scheme="https://loveofpeach.github.io/tags/Python/"/>
    
    <category term="Minecraft" scheme="https://loveofpeach.github.io/tags/Minecraft/"/>
    
  </entry>
  
  <entry>
    <title>2304 - select</title>
    <link href="https://loveofpeach.github.io/posts/985e3562.html"/>
    <id>https://loveofpeach.github.io/posts/985e3562.html</id>
    <published>2023-04-07T15:26:28.000Z</published>
    <updated>2023-05-03T03:13:52.080Z</updated>
    
    <content type="html"><![CDATA[<p>在网上常常能遇到一些有价值的分享，不记录下来有些可惜。因此打算每个月精选一些内容，以备遗忘。文字内容可转载的会贴出来，视频则给出链接并作简要描述。</p><p>选取某内容不代表赞成其全部观点。</p><hr><p><strong>【视频】 经济机器是怎样运行的 (时长30分钟) Ray Dalio</strong></p><p>中文版 <a href="https://www.youtube.com/watch?v=rFV7wdEX-Mo">https://www.youtube.com/watch?v=rFV7wdEX-Mo</a></p><p>英文原版 <a href="https://www.youtube.com/watch?v=PHe0bXAIuk0">https://www.youtube.com/watch?v=PHe0bXAIuk0</a></p><p>短小精悍的经济学科普。</p><p>从三个因素出发，生产率的提高、短期债务周期、长期债务周期，介绍了一个经济模型。有助于了解我们在过去、当前的处境，以及未来可能的发展方向。</p><p><strong>【文本】 如何评价汤浅政明的《心理游戏》？</strong></p><p>作者：Icarus<br>链接：<a href="https://www.zhihu.com/answer/2587227017">https://www.zhihu.com/answer/2587227017</a></p><p>浅析汤浅政明-心灵游戏 我们该以什么样的姿态面对社会?</p><p>从《乒乓》开始接触汤浅政明，今天看到了他的早期作品，有感而发，若有不足，还请见谅。</p><p>心灵游戏是一部关于心理学和社会学的作品，其中夹杂了很多汤浅自己对于生命，对于生活的独到见解。</p><p>打开百科上对心灵游戏 这部汤浅早期作品的介绍，可以看到这部作品的一个引子。主人公是一个年轻的漫画家，暗恋一个女同学长达十一年之久，但因为种种原因在初中告白后虽然得到了回应，却没有后续发展，属于一个现实中很常见的，被扼杀掉的青春萌芽。后女主因混蛋老爸而被黑社会威胁强奸，男主被开枪爆菊，复活后带着女主和女主姐姐逃亡，然后……掉进了一只鲸鱼的肚子里（典型的汤浅风格，跳脱的思维，狂野的想象力，在全篇显露无疑）。</p><p>其实是掉进鲸鱼肚子里也好，其他的什么也好，最主要的是给主人公们一个密闭的环境，也渐渐地引出想要表达的主题。在遇到老爷爷后，三人饱餐了好几顿（满足食欲，基本需求）此时老爷爷告诉他们：不好意思，但是你们出不去了。三人在绝望崩溃三天后开始逐渐接受事实（人是社会性动物，所以一开始的表现也很正常），因为无需与外界交流，也逐渐展现真我（姐姐把头发剃短，后来的老爷爷涂上口红，似乎是汤浅在暗示心理性别与生理性别不同，也许并没有那么严格的界限），并且满足了性欲（汤浅在全篇有很多关于性的暗示，男主与女主是最直白的一段，女主的姐姐在玩气球时同时展现了女性（乳房）和男性（阴茎）的性征，也再次验证汤浅的思想。在这样一个与世隔绝的环境中，主角们产生了很多愉快的体验。</p><p>然而即使如此，当在面临逃出去，回归社会与留下来，愉快地享受当下并接受死亡时，以乐观的主角为首，主角们还是选择了前者。需要注意，三人在真实世界中的生活都算不上幸福，两姐妹不用说，因为混蛋老爸欠了一屁股债，还被黑社会的人追杀；男主虽然是大学生，但是也同时过着打工发传单这样的生活，并没有多少尊严。从这一点来看，三个人在马斯洛需求层次中都排在下层的位置。而对于老爷爷来说，自己因为可笑的自尊曾经选了一条错误的道路，如果真的能重新回到正常社会，那么则需要赎回自己的罪孽。就是这四个人，在面对是否能逃生并回归社会这样的考验时，迸发出了强烈的力量（奋力奔跑着逃离鲸鱼大嘴这一段，刻画的力度十分到位，给汤浅点赞）；并且在（也许只是幻想的。在结尾，画面的转变十分的迅速，每个主人公有各种不同的未来展现给观众，也正所谓一体多面，也象征着未来的不确定性。富有艺术天赋的姐姐可能会去上艺校，也许会被家里人因为没钱而拒绝；老爷爷有可能因为孤独而死，去回转寿司店工作，也有可能接受同性爱人的表白迎来第二春；放弃游泳的妹妹也许会成为一名普通的白领，也有可能会去转向马拉松运动，甚至是开始缝纫, 或是出一本料理书籍。当男主纵身一跃回归蓝天下时，这些无穷无尽的可能性出现在他的脑海里。确实，如果从来没有试着融入过这个社会，一切不好的可能都会消失，但同理，那些闪烁着的未来也同样消弭于无形了不是吗？</p><p>结尾处有这样一个看似与全篇无关的片段。一栋楼的建造过程，有设计者，实施者，与住户，每个人都是社会的一份子。我们被社会所影响，将来又注定要影响社会，哪怕是以再微弱的形式。这次我感觉自己读懂了汤浅。哪怕再卑微，心灵上受到过再多的挫折，也不能封闭自我，与世界隔离。汤浅确实是个创作的奇才。他让主角们真实地经历了一场九死一生的大冒险，然后突然领悟，豁然开朗。而又在最后的最后让女主在最后一秒踏进了车厢，黑社会没有来得及跟上来。仿佛一切都没有发生过。这才是我们大多数人生活的现状，我们很幸运又很不幸运地平凡着，没有经历过什么大风大浪。那么就在这样的情形下，我们是否还有勇气向理想进发，哪怕会遭人嘲笑？还是选择继续做一个与社会隔绝的人，没有失败，也没有成功？在我看来，这便是汤浅给我们的一局心灵游戏。</p><p><strong>【视频】 The Fast Fourier Transform (FFT): Most Ingenious Algorithm Ever?</strong></p><p><a href="https://www.youtube.com/watch?v=h7apO7q16V0">https://www.youtube.com/watch?v=h7apO7q16V0</a></p><p>一个能知其所以然的介绍 Fast Fourier Transform 的视频，相对来说易于理解。</p><p><strong>【文本】 如何评价漫画《绝望先生》？</strong></p><p>作者：Kalinka<br>链接：<a href="https://www.zhihu.com/answer/40643204">https://www.zhihu.com/answer/40643204</a></p><p>我们也许可以理解这部作品讲述的是；一位贵公子身旁经过一位女高中生，在擦肩而过时，突然女子的帽子被风吹掉了，贵公子看到了赶紧过去捡，他们的位置发生了位移，导致那位女高中生被车撞到，女高中生医治无效死亡后，身份信息下面写着器官全部捐献，看到这些的贵公子很心痛，他认为应该是自己被撞死。所以为了让良心得到安慰，找来一大帮人包括被捐助者，雇佣他们每天“上课”超度那位女高中生。七年了，每天都有一位捐献者负责扮演女高中生与他对话，直到有一段时间所有扮演者都发生了人格障碍，镜子前的她们都成了那名女高中生，那位贵公子也发现自己爱上了那位已经死去的人，他草草解散了那些顾来的人，然后跑到一个荒无人烟的小岛上尝试和其他人接触，并忘记七年里发生的一切。然而教室里也只剩下那些被捐助者，她们也爱上了这位曾经的老师，她们的每一部分都属于那位女高中生，她们决定披上婚纱奔向小岛和他结婚。</p><p>贵公子在小岛上差不多快从痛苦中解脱时，她们来了……高喊着先生，老师，穿着婚纱一起唱着那位女高中生生前喜爱的歌，他看到此情此景明白自己爱上那个人已成事实。于是他为了和她在一起选择了跳海自杀，完。</p><p>这是一部好作品，个人认为作者在表面上来戏谑讽刺当时日本社会以及亚洲地区的各种社会事件，实际上是为了掩盖人物内心的绝望。</p><p>而这也许就像现实生活中，我们平时为忘记一些不愉快的事所做的一样。三四十人坐在一间教室侃大山，就是为了忘记曾经那位援助他们的女高中生。</p><p>但从系色望的角度讲，他的性格集合了所有绝望少女的绝望特征。想死必须活，想活必须死，一切事情都是反着来，真的令人绝望透顶。当他绝望时便会出现希望，当他有希望时便会出现绝望。</p><p>从作品里看，其实可符香和变形记的人物塑造虽然有异曲同工之妙，但人物结局却又截然不同。变形记的主人公格里高尔变成了甲虫，本作女主变成了由一个人变成了十二个人（十二个人都认为自己是可符香），变形记的主人公被家人排斥，而可符香被其他人所接纳，但他们都有一个共同点就是贫穷，而且这两部作品中阐述的思想有一个共通点 ，即万恶的资本主义制度下 ，如果你没有用就会被社会遗弃，就会被身边人忽视，如果你有用那么你就会被社会接纳就会被身边人重视。</p><p>人人为自己，上帝为大家。生既为恶，死既为善。也许是这个作品的主旨吧。</p><p><strong>【文本】 如何评价新房昭之监督的动画？</strong></p><p>作者：水莲寺弥生<br>链接：<a href="https://www.zhihu.com/answer/99593520">https://www.zhihu.com/answer/99593520</a></p><p>日人评论如下：</p><blockquote><p>実写、文字だけなどの静止画のカットを多用する演出、同一スタッフ（声優含む）での作品作りなどが特徴。<br>文字カット・静止画の挿入や画面作りには、市川崑や鈴木清順ら日本映画監督からの影響が色濃く見られる。また、実相寺昭雄の演出に類似する点（斜めの画面、光のハレーション、カメラと人物の間に机などを配置するなど）が見受けられるが、本人は実相寺作品を殆ど観たことが無いという。<br>その独特の美的感覚は、大正・昭和初期の浪漫文学の末裔とも取れる。<br><a href="https://dic.pixiv.net/a/%E6%96%B0%E6%88%BF%E6%98%AD%E4%B9%8B">新房昭之 (しんぼうあきゆき)とは【ピクシブ百科事典】</a></p></blockquote><p>即新房爱用静止画、同一staff团体，受市川昆和铃木清顺影响深。其手法近乎实相寺昭雄（倾斜画面、光晕、人物与机位配置等），虽然新房本人说他几乎没看过实相寺昭雄的电影。</p><p>新房的美感被认为继承了大正与昭和初期浪漫文学的传统。不管他本人愿不愿意承认，他的美学都无法与这份日本的时代美学割裂开。不止一位老师推荐我看铃木清顺的大正浪漫三部曲《阳炎座》《梦二》《流浪者之歌》去帮助理解新房。</p><p>随便放几张铃木清顺和实相寺昭雄的电影截图给大家感受一下：</p><p><img src="https://pica.zhimg.com/78e9f03c7d141733824a5acb7db7f330_720w.jpg" alt="36-1" title="（铃木清顺《暗黑街美女》）"></p><p><img src="https://pic1.zhimg.com/a0b038ec0cedd6242f09c24d9ff81973_720w.jpg" alt="36-2"></p><p><img src="https://picx.zhimg.com/a43e6ff831c54a66e1ea14ae88079f08_720w.jpg" alt="36-3" title="（铃木《手枪歌剧》）"></p><p><img src="https://pica.zhimg.com/a4438c1467d2531dd823771a5bfe1921_720w.jpg" alt="36-4" title="（铃木《肉体之门》）"></p><p><img src="https://picx.zhimg.com/e5ee63d21953f4fdff92731186e67a4f_720w.jpg" alt="36-5" title="（实相寺昭雄《曼陀罗》）"></p><p>新房本人前后期的作品显然也存在脉络上的关系。大波老师曾经说过：「我在楼里推荐他人多看看珂赛特的肖像来帮助理解叛逆的物语，不仅仅是情死、戏中戏这些共通的日本情结，更是因为后者视觉上的种种不可解之处，乃至颓废的基调，都让人联想到十年前的新房……可以一看再看的生命力之源，就在于这种层层叠叠的形式。」</p><p>这段话非常精准地抽取出了从《珂赛特的肖像》到《叛逆的物语》中一条不断的伏线。物语系列中这条伏线亦无处不在。《花物语》中的寂寂水影、空荡剧场、无限复制的物件、少女视线若无其事的转移；《凭物语》中斧乃木余接茫然自失的漫游；《囮物語》中千石从湿漉漉液体中缓缓拈起猩红蛇莓，使你想起古老的渎神崇拜、慢慢燃烧的火，这份在迟缓中发酵的错乱感教人发狂。</p><p>视觉上艳丽的不可解、永远处于酩酊态一般的浊烂青春期、思考的无意义，最终只能落入无赖派的归化。这难道不正是昭和日本的侧影吗？大正浪漫和昭和浪漫的怀念者不能不被新房吸引，看他的动画，可能除了「层层叠叠的形式」之外什么也得不到。然而这种除形式外一切皆属虚无的体验，正是存在之实感的前提。正如相米慎二那句台词：</p><p>「死は生に先行するんだ、死は生きることの前提なんだ。」</p><p>欣赏几张魔性的千石抚子：</p><p><img src="https://picx.zhimg.com/c88f7be93377e49b3af0fdf859b68b1b_720w.jpg" alt="36-6"></p><p><img src="https://picx.zhimg.com/fe554cfd3f3ab875bb54a670418a44b2_720w.jpg" alt="36-7"></p><p><img src="https://pic1.zhimg.com/72da7f974b45a5ab92a1f3931cb98255_720w.jpg" alt="36-8"></p><p><img src="https://pica.zhimg.com/1868ceea889fd9e1e61f9579ffbb95aa_720w.jpg" alt="36-9"></p><p>【文本】 The real Mao Zedong in Lu Xun’s eyes</p><p><a href="https://u.osu.edu/mclc/2016/05/25/the-real-mao-zedong-in-lu-xuns-eyes/">https://u.osu.edu/mclc/2016/05/25/the-real-mao-zedong-in-lu-xuns-eyes/</a></p><p>一篇关于鲁迅的文章，关于他如何成为旗帜，又如何远去的故事。来自 Ohio State University 网站，毕竟国内网站应该是不太能贴这些的。</p><p>【文本】 latex 用法</p><p>含有一种特殊用法： <a href="https://zhuanlan.zhihu.com/p/578873088">https://zhuanlan.zhihu.com/p/578873088</a></p><p>较全版本： <a href="https://www.cnblogs.com/1024th/p/11623258.html">https://www.cnblogs.com/1024th/p/11623258.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在网上常常能遇到一些有价值的分享，不记录下来有些可惜。因此打算每个月精选一些内容，以备遗忘。文字内容可转载的会贴出来，视频则给出链接并作简要描述。&lt;/p&gt;
&lt;p&gt;选取某内容不代表赞成其全部观点。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;【视频】 经济机器是怎样运行的 (时长</summary>
      
    
    
    
    <category term="转载" scheme="https://loveofpeach.github.io/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
    <category term="select" scheme="https://loveofpeach.github.io/tags/select/"/>
    
  </entry>
  
  <entry>
    <title>turtle 绘制锅巴</title>
    <link href="https://loveofpeach.github.io/posts/47c25c56.html"/>
    <id>https://loveofpeach.github.io/posts/47c25c56.html</id>
    <published>2023-03-17T12:43:47.000Z</published>
    <updated>2023-04-23T09:06:58.620Z</updated>
    
    <content type="html"><![CDATA[<p>本来想画兰那罗的，但是太复杂了。还是锅巴好画。</p><p>调参真的痛苦。</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># guoba.py</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> tu</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guoba_ellipse</span>(<span class="params">a, b, n=<span class="number">500</span>, x=<span class="number">0</span>, y=<span class="number">0</span>, alpha=<span class="number">360</span>, sangle=<span class="number">0</span>, workangle=<span class="number">360</span>, myflag=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制椭圆</span></span><br><span class="line"><span class="string">    a:长半轴长度</span></span><br><span class="line"><span class="string">    b:短半轴长度</span></span><br><span class="line"><span class="string">    n:越大越趋近椭圆</span></span><br><span class="line"><span class="string">    x:几何中心x坐标</span></span><br><span class="line"><span class="string">    y:几何中心y坐标</span></span><br><span class="line"><span class="string">    alpha:椭圆旋转的角度</span></span><br><span class="line"><span class="string">    sangle:开始绘制点与椭圆长半轴正方向的夹角（角度）</span></span><br><span class="line"><span class="string">    workangle:绘制一部分椭圆（角度），默认为整个椭圆</span></span><br><span class="line"><span class="string">    myflag:判断是否仅需要调整画笔位置</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    alpha = (<span class="number">2</span>*math.pi/<span class="number">360</span>)*alpha  <span class="comment"># 角度制换算弧度值</span></span><br><span class="line">    sangle = (<span class="number">2</span>*math.pi/<span class="number">360</span>)*sangle</span><br><span class="line">    workangle = (<span class="number">2</span>*math.pi/<span class="number">360</span>)*workangle</span><br><span class="line">    theta = sangle</span><br><span class="line">    <span class="comment"># 参数方程，旋转的部分按旋转矩阵推导：</span></span><br><span class="line">    start_point = (a*math.cos(theta)*math.cos(alpha) - b*math.sin(theta)*math.sin(alpha) + x,</span><br><span class="line">                   a*math.cos(theta)*math.sin(alpha) + b*math.sin(theta)*math.cos(alpha) + y)</span><br><span class="line">    tu.penup()</span><br><span class="line">    tu.setpos(start_point)  <span class="comment"># 初始位置</span></span><br><span class="line">    <span class="keyword">if</span> myflag:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    tu.pendown()</span><br><span class="line">    microtheta = <span class="number">2</span> * math.pi / n  <span class="comment"># 将2pi弧度n等分</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        theta = sangle + (i+<span class="number">1</span>)*microtheta  <span class="comment"># 弧度增加</span></span><br><span class="line">        <span class="keyword">if</span> (theta-sangle) &gt; workangle:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        next_point = (a*math.cos(theta)*math.cos(alpha) - b*math.sin(theta)*math.sin(alpha) + x,</span><br><span class="line">                      a*math.cos(theta)*math.sin(alpha) + b*math.sin(theta)*math.cos(alpha) + y)</span><br><span class="line">        tu.setpos(next_point)</span><br><span class="line">    tu.penup()</span><br><span class="line"></span><br><span class="line">tu.setup(<span class="number">700</span>,<span class="number">700</span>)</span><br><span class="line">tu.speed(<span class="number">10</span>)</span><br><span class="line">tu.delay(<span class="number">0</span>)</span><br><span class="line">tu.pensize(<span class="number">25</span>)</span><br><span class="line">tu.colormode(<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">tu.pencolor((<span class="number">255</span>,<span class="number">193</span>,<span class="number">37</span>))</span><br><span class="line">tu.fillcolor((<span class="number">255</span>,<span class="number">193</span>,<span class="number">37</span>))</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">250</span>, <span class="number">210</span>, <span class="number">500</span>, <span class="number">0</span>, -<span class="number">70</span>, <span class="number">360</span>, -<span class="number">45</span>, <span class="number">270</span>) <span class="comment"># 脸</span></span><br><span class="line">tu.pendown()</span><br><span class="line">tu.setpos(<span class="number">179</span>, -<span class="number">220</span>)</span><br><span class="line">tu.end_fill()</span><br><span class="line"></span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">75</span>, <span class="number">70</span>, <span class="number">500</span>, <span class="number">160</span>, <span class="number">150</span>, -<span class="number">30</span>) <span class="comment"># 右耳朵</span></span><br><span class="line">tu.end_fill()</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">80</span>, <span class="number">77</span>, <span class="number">500</span>, -<span class="number">160</span>, <span class="number">150</span>, <span class="number">45</span>) <span class="comment"># 左耳朵</span></span><br><span class="line">tu.end_fill()</span><br><span class="line"></span><br><span class="line">tu.fillcolor((<span class="number">205</span>, <span class="number">155</span>, <span class="number">29</span>)) <span class="comment"># 画笔颜色忘换了。参数调好就别动，效果一样</span></span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">50</span>, <span class="number">45</span>, <span class="number">500</span>, <span class="number">165</span>, <span class="number">140</span>, -<span class="number">33</span>) <span class="comment"># 右耳朵内部</span></span><br><span class="line">tu.end_fill()</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">53</span>, <span class="number">47</span>, <span class="number">500</span>, -<span class="number">155</span>, <span class="number">140</span>, <span class="number">30</span>) <span class="comment"># 左耳朵内部</span></span><br><span class="line">tu.end_fill()</span><br><span class="line"></span><br><span class="line">tu.pensize(<span class="number">15</span>)</span><br><span class="line">tu.pencolor((<span class="number">238</span>, <span class="number">121</span>, <span class="number">66</span>))</span><br><span class="line">tu.fillcolor((<span class="number">238</span>, <span class="number">121</span>, <span class="number">66</span>))</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">45</span>, <span class="number">48</span>, <span class="number">500</span>, -<span class="number">165</span>, -<span class="number">45</span>, <span class="number">0</span>) <span class="comment"># 左腮红</span></span><br><span class="line">tu.end_fill()</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">30</span>, <span class="number">50</span>, <span class="number">500</span>, <span class="number">170</span>, -<span class="number">45</span>, <span class="number">15</span>) <span class="comment"># 右腮红</span></span><br><span class="line">tu.end_fill()</span><br><span class="line"></span><br><span class="line">tu.pensize(<span class="number">5</span>)</span><br><span class="line">tu.pencolor((<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment"># ------------------------ 眼  罩 ------------------------#</span></span><br><span class="line">guoba_ellipse(<span class="number">280</span>, <span class="number">185</span>, <span class="number">500</span>, -<span class="number">5</span>, <span class="number">107</span>, <span class="number">2</span>, -<span class="number">121</span>, <span class="number">62</span>, <span class="literal">True</span>)  <span class="comment">#</span></span><br><span class="line">tu.fillcolor((<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))                                   <span class="comment">#</span></span><br><span class="line">tu.begin_fill()                                           <span class="comment">#</span></span><br><span class="line">guoba_ellipse(<span class="number">280</span>, <span class="number">185</span>, <span class="number">500</span>, -<span class="number">5</span>, <span class="number">107</span>, <span class="number">2</span>, -<span class="number">121</span>, <span class="number">62</span>)        <span class="comment">#</span></span><br><span class="line">tu.seth(<span class="number">25</span>)                                               <span class="comment">#      </span></span><br><span class="line">tu.pendown()                                              <span class="comment">#</span></span><br><span class="line">tu.circle(<span class="number">55</span>, <span class="number">210</span>)                                        <span class="comment">#</span></span><br><span class="line">tu.penup()                                                <span class="comment">#</span></span><br><span class="line">tu.setpos(-<span class="number">145</span>, -<span class="number">55</span>)                                      <span class="comment">#    </span></span><br><span class="line">tu.pendown()                                              <span class="comment">#</span></span><br><span class="line">tu.seth(<span class="number">157</span>)                                              <span class="comment">#</span></span><br><span class="line">tu.circle(-<span class="number">55</span>, <span class="number">210</span>)                                       <span class="comment">#</span></span><br><span class="line">guoba_ellipse(<span class="number">120</span>, <span class="number">80</span>, <span class="number">500</span>, -<span class="number">5</span>, <span class="number">95</span>, -<span class="number">1</span>, -<span class="number">135</span>, <span class="number">90</span>)         <span class="comment">#</span></span><br><span class="line">tu.end_fill()                                             <span class="comment">#</span></span><br><span class="line">tu.pendown()                                              <span class="comment">#</span></span><br><span class="line">tu.setpos(-<span class="number">145</span>, -<span class="number">55</span>)                                      <span class="comment">#</span></span><br><span class="line"><span class="comment"># ------------------------ 眼  罩 ------------------------#</span></span><br><span class="line"></span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">22</span>, <span class="number">15</span>, <span class="number">300</span>, -<span class="number">105</span>, <span class="number">105</span>, <span class="number">25</span>)  <span class="comment"># 左眉毛</span></span><br><span class="line">tu.end_fill()</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">18</span>, <span class="number">10</span>, <span class="number">300</span>, <span class="number">130</span>, <span class="number">100</span>, -<span class="number">36</span>)  <span class="comment"># 右眉毛</span></span><br><span class="line">tu.end_fill()</span><br><span class="line"></span><br><span class="line">tu.pencolor((<span class="number">255</span>, <span class="number">255</span>, <span class="number">224</span>))</span><br><span class="line">tu.fillcolor((<span class="number">255</span>, <span class="number">255</span>, <span class="number">224</span>))</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">80</span>, <span class="number">45</span>, <span class="number">500</span>, -<span class="number">5</span>, <span class="number">65</span>) <span class="comment"># 额头白色部分</span></span><br><span class="line">tu.end_fill()</span><br><span class="line">tu.pencolor((<span class="number">255</span>,<span class="number">193</span>,<span class="number">37</span>))</span><br><span class="line">tu.fillcolor((<span class="number">255</span>,<span class="number">193</span>,<span class="number">37</span>))</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">50</span>, <span class="number">31</span>, <span class="number">400</span>, -<span class="number">5</span>, <span class="number">50</span>) <span class="comment"># 额头黄色部分</span></span><br><span class="line">tu.end_fill()</span><br><span class="line"></span><br><span class="line">tu.pencolor((<span class="number">255</span>, <span class="number">250</span>, <span class="number">250</span>))</span><br><span class="line">tu.fillcolor((<span class="number">255</span>, <span class="number">250</span>, <span class="number">250</span>))</span><br><span class="line">guoba_ellipse(<span class="number">21</span>, <span class="number">35</span>, <span class="number">400</span>, -<span class="number">115</span>, -<span class="number">8</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">360</span>, <span class="literal">True</span>)</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">21</span>, <span class="number">35</span>, <span class="number">400</span>, -<span class="number">115</span>, -<span class="number">8</span>, <span class="number">7</span>) <span class="comment"># 左眼白</span></span><br><span class="line">tu.end_fill()</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">20</span>, <span class="number">33.5</span>, <span class="number">500</span>, <span class="number">120</span>, <span class="number">0</span>, <span class="number">4</span>)  <span class="comment"># 右眼白</span></span><br><span class="line">tu.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------- 胡 子 --------------------------#</span></span><br><span class="line">tu.pencolor((<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))                              <span class="comment">#</span></span><br><span class="line">tu.fillcolor((<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))                             <span class="comment">#</span></span><br><span class="line">tu.begin_fill()                                           <span class="comment">#</span></span><br><span class="line">guoba_ellipse(<span class="number">85</span>, <span class="number">20</span>, <span class="number">500</span>, <span class="number">5</span>, -<span class="number">60</span>, <span class="number">0</span>)                     <span class="comment">#</span></span><br><span class="line">tu.end_fill()                                             <span class="comment">#</span></span><br><span class="line">guoba_ellipse(<span class="number">85</span>, <span class="number">20</span>, <span class="number">500</span>, <span class="number">5</span>, -<span class="number">60</span>, <span class="number">0</span>, <span class="number">140</span>, <span class="number">360</span>, <span class="literal">True</span>)     <span class="comment">#</span></span><br><span class="line">tu.seth(-<span class="number">170</span>)                                             <span class="comment">#</span></span><br><span class="line">tu.begin_fill()                                           <span class="comment">#</span></span><br><span class="line">tu.circle(<span class="number">60</span>)                                             <span class="comment">#</span></span><br><span class="line">tu.end_fill()                                             <span class="comment">#</span></span><br><span class="line">guoba_ellipse(<span class="number">85</span>, <span class="number">20</span>, <span class="number">500</span>, <span class="number">5</span>, -<span class="number">60</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">360</span>, <span class="literal">True</span>)      <span class="comment">#</span></span><br><span class="line">tu.seth(-<span class="number">10</span>)                                              <span class="comment">#</span></span><br><span class="line">tu.begin_fill()                                           <span class="comment">#</span></span><br><span class="line">tu.circle(-<span class="number">60</span>)                                            <span class="comment">#</span></span><br><span class="line">tu.end_fill()                                             <span class="comment">#</span></span><br><span class="line">tu.penup()                                                <span class="comment">#</span></span><br><span class="line"><span class="comment"># ----------------------- 胡 子 --------------------------#</span></span><br><span class="line"></span><br><span class="line">tu.pencolor((<span class="number">255</span>, <span class="number">160</span>, <span class="number">122</span>))</span><br><span class="line">tu.fillcolor((<span class="number">255</span>, <span class="number">160</span>, <span class="number">122</span>))</span><br><span class="line">tu.begin_fill()</span><br><span class="line">guoba_ellipse(<span class="number">80</span>, <span class="number">50</span>, <span class="number">500</span>, <span class="number">4</span>, -<span class="number">37</span>, -<span class="number">8</span>, -<span class="number">120</span>, <span class="number">35</span>)  <span class="comment">#鼻子</span></span><br><span class="line">guoba_ellipse(<span class="number">80</span>, <span class="number">50</span>, <span class="number">500</span>, <span class="number">13</span>, -<span class="number">31</span>, <span class="number">30</span>, -<span class="number">115</span>, <span class="number">30</span>)</span><br><span class="line">tu.pendown()</span><br><span class="line">tu.setpos(-<span class="number">39.5</span>, -<span class="number">73</span>)</span><br><span class="line">tu.end_fill()</span><br><span class="line"></span><br><span class="line">tu.pencolor((<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">tu.pensize(<span class="number">2</span>)</span><br><span class="line">guoba_ellipse(<span class="number">4.2</span>, <span class="number">7</span>, <span class="number">400</span>, -<span class="number">115</span>, -<span class="number">8</span>, <span class="number">7</span>) <span class="comment"># 左眼珠</span></span><br><span class="line">guoba_ellipse(<span class="number">4</span>, <span class="number">6.7</span>, <span class="number">500</span>, <span class="number">120</span>, <span class="number">0</span>, <span class="number">4</span>)   <span class="comment"># 右眼珠</span></span><br><span class="line">tu.penup()</span><br><span class="line">tu.setpos(<span class="number">690</span>,<span class="number">690</span>)</span><br><span class="line">tu.done()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本来想画兰那罗的，但是太复杂了。还是锅巴好画。&lt;/p&gt;
&lt;p&gt;调参真的痛苦。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="做题" scheme="https://loveofpeach.github.io/categories/%E5%81%9A%E9%A2%98/"/>
    
    
    <category term="turtle" scheme="https://loveofpeach.github.io/tags/turtle/"/>
    
    <category term="Python" scheme="https://loveofpeach.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>PythonNote</title>
    <link href="https://loveofpeach.github.io/posts/7b6f8cd.html"/>
    <id>https://loveofpeach.github.io/posts/7b6f8cd.html</id>
    <published>2023-03-07T14:53:45.000Z</published>
    <updated>2023-06-07T02:20:39.993Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>Ctrl</code>+<code>f</code>输入“实例”以搜索样例代码。</p><h2 id="Python-课程概述"><a href="#Python-课程概述" class="headerlink" title="Python 课程概述"></a>Python 课程概述</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例：hello world</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;hello, world&quot;</span>)</span><br><span class="line">hello, world</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=<span class="built_in">input</span>(<span class="string">&#x27;input your name: &#x27;</span>)</span><br><span class="line"><span class="built_in">input</span> your name: ldq</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(name,<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">ldq hello world</span><br></pre></td></tr></table></figure><p><strong>print() - python 内置函数</strong></p><ul><li><code>dir(_builtins_)</code></li><li><code>len(dir(_builtins_))</code></li><li><code>help(print)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(<span class="built_in">print</span>)</span><br><span class="line">Help on built-<span class="keyword">in</span> function <span class="built_in">print</span> <span class="keyword">in</span> module builtins:</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(...)</span><br><span class="line">    <span class="built_in">print</span>(value, ..., sep=<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;\n&#x27;</span>, file=sys.stdout, flush=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    Prints the values to a stream, <span class="keyword">or</span> to sys.stdout by default.</span><br><span class="line">    <span class="type">Optional</span> keyword arguments:</span><br><span class="line">    file:  a file-like <span class="built_in">object</span> (stream); defaults to the current sys.stdout.</span><br><span class="line">    sep:   string inserted between values, default a space.</span><br><span class="line">    end:   string appended after the last value, default a newline.</span><br><span class="line">    flush: whether to forcibly flush the stream.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/03/08/6407ef0e37efa.png" alt="34-1.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(<span class="built_in">input</span>)</span><br><span class="line">Help on built-<span class="keyword">in</span> function <span class="built_in">input</span> <span class="keyword">in</span> module builtins:</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>(prompt=<span class="literal">None</span>, /)</span><br><span class="line">    Read a string <span class="keyword">from</span> standard <span class="built_in">input</span>.  The trailing newline <span class="keyword">is</span> stripped.</span><br><span class="line"></span><br><span class="line">    The prompt string, <span class="keyword">if</span> given, <span class="keyword">is</span> printed to standard output without a</span><br><span class="line">    trailing newline before reading <span class="built_in">input</span>.</span><br><span class="line"></span><br><span class="line">    If the user hits EOF (*nix: Ctrl-D, Windows: Ctrl-Z+Return), <span class="keyword">raise</span> EOFError.</span><br><span class="line">    On *nix systems, readline <span class="keyword">is</span> used <span class="keyword">if</span> available.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Python-基本语法元素"><a href="#Python-基本语法元素" class="headerlink" title="Python 基本语法元素"></a>Python 基本语法元素</h2><p>交互式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r=<span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>area=<span class="number">3.1415</span>*r*r</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(r,area)</span><br><span class="line"><span class="number">25</span> <span class="number">1963.4375000000002</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;r=%2d,area=%.2f&quot;</span>%(r,area))</span><br><span class="line">r=<span class="number">25</span>,area=<span class="number">1963.44</span></span><br></pre></td></tr></table></figure><p>文件式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例：圆面积的计算</span></span><br><span class="line">r = <span class="number">25</span></span><br><span class="line">area = <span class="number">3.1415</span> * r * r</span><br><span class="line"><span class="built_in">print</span>(r,area)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r=&quot;</span>,r,<span class="string">&quot;area=&quot;</span>,area)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r=%2d,area=%.2f&quot;</span>%(r,area))</span><br></pre></td></tr></table></figure><p>保存为文件并运行，输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">25</span> <span class="number">1963.4375000000002</span></span><br><span class="line">r= <span class="number">25</span> area= <span class="number">1963.4375000000002</span></span><br><span class="line">r=<span class="number">25</span>,area=<span class="number">1963.44</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/03/08/6407f373bbc6a.png" alt="34-2.png"></p><p><strong>import math</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">r = <span class="number">25</span></span><br><span class="line">area = math.pi * r * r</span><br><span class="line"><span class="built_in">print</span>(r,area)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r=&quot;</span>,r,<span class="string">&quot;area=&quot;</span>,area)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r=%2d,area=%.2f&quot;</span>%(r,area))</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">25</span> <span class="number">1963.4954084936207</span></span><br><span class="line">r= <span class="number">25</span> area= <span class="number">1963.4954084936207</span></span><br><span class="line">r=<span class="number">25</span>,area=<span class="number">1963.50</span></span><br></pre></td></tr></table></figure><p><code>import</code>：python 保留字，引用函数库</p><p><code>math</code>：python 中内置的标准库</p><ul><li><code>math.pi</code> $\quad$ 常量值</li><li><code>math.pow(x,y)</code> $\quad$ 返回 x 的 y 次幂</li><li><code>math.sqrt(x)</code> $\quad$ 求 x 的平方根</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例：同切圆绘制</span></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.pensize(<span class="number">2</span>)</span><br><span class="line">turtle.circle(<span class="number">10</span>)</span><br><span class="line">turtle.circle(<span class="number">40</span>)</span><br><span class="line">turtle.circle(<span class="number">80</span>)</span><br><span class="line">turtle.circle(<span class="number">160</span>)</span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> pensize </span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> circle</span><br><span class="line">pensize(<span class="number">2</span>)</span><br><span class="line">circle(<span class="number">10</span>)</span><br><span class="line">circle(<span class="number">40</span>)</span><br><span class="line">circle(<span class="number">80</span>)</span><br><span class="line">circle(<span class="number">160</span>)</span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/03/08/640832a82b715.png" alt="34-3.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例：温度转换</span></span><br><span class="line"><span class="comment"># 这是一条性感的注释</span></span><br><span class="line">TempStr = <span class="built_in">input</span>(<span class="string">&quot;请输入带有符号的温度值：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> TempStr[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]:</span><br><span class="line">    C = (<span class="built_in">eval</span>(TempStr[<span class="number">0</span>:-<span class="number">1</span>])-<span class="number">32</span>)/<span class="number">1.8</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;转换后的温度是&#123;:.2f&#125;C&quot;</span>.<span class="built_in">format</span>(C))</span><br><span class="line"><span class="keyword">elif</span> TempStr[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]:</span><br><span class="line">    F = <span class="number">1.8</span>*<span class="built_in">eval</span>(TempStr[<span class="number">0</span>:-<span class="number">1</span>])+<span class="number">32</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;转换后的温度是&#123;:.2f&#125;F&quot;</span>.<span class="built_in">format</span>(F))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入格式错误&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多</span></span><br><span class="line"><span class="string">    行</span></span><br><span class="line"><span class="string">        注</span></span><br><span class="line"><span class="string">            释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>在 python 中，缩进是语法的一部分，缩进不正确程序运行错误。<strong>长度一致：</strong> 程序内一致即可，一般用 4 个空格或 1 个<code>TAB</code>。</p><p>变量的命名：</p><p><img src="https://bu.dusays.com/2023/03/10/640adc07a10af.png" alt="34-4.png"></p><p><img src="https://bu.dusays.com/2023/03/10/640add42a0744.png" alt="34-5.png"></p><p>数据类型：</p><ul><li>整数类型：<code>10011101</code></li><li>字符串类型：<code>&quot;10,011,101&quot;</code></li><li>列表类型：<code>[10, 011, 101]</code></li></ul><p>字符串，由0个或多个字符组成的有序字符序列：</p><ul><li>字符串由一对单引号或一对双引号或一对三引号表示<ul><li><code>&quot;请输入带有符号的温度值: &quot;</code>或者   <code>&#39;C&#39;</code>或者<code>&#39;&#39;&#39;C&#39;&#39;&#39;</code>（<a href="https://blog.csdn.net/woainishifu/article/details/76105667">？详见该内容（网页内容已备份）</a>，另外，虽然三个单引号可以用于表示多行字符串和多行注释，但它们不会相互干扰或冲突。）</li></ul></li><li>字符串是字符的有序序列，可以对其中的字符进行索引<ul><li><code>&quot;请&quot;</code>是<code>&quot;请输入带有符号的温度值: &quot;</code>的第0个字符（这个中文字符串暂且存疑）</li></ul></li></ul><p><img src="https://bu.dusays.com/2023/03/10/640ae1191ede7.png" alt="34-6.png"></p><p><img src="https://bu.dusays.com/2023/03/10/640ae1da7d012.png" alt="34-7.png" title="左闭右开，谢谢"></p><script type="math/tex; mode=display">examples</script><p>提取最后N个字符：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>letter = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letter[-<span class="number">3</span>:]</span><br><span class="line"><span class="string">&#x27;xyz&#x27;</span></span><br></pre></td></tr></table></figure><p>从开头到结尾，step为N：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>letter[::<span class="number">5</span>]</span><br><span class="line"><span class="string">&#x27;afkpuz&#x27;</span></span><br></pre></td></tr></table></figure></p><p>将字符串倒转(reverse)， 通过设置步长为负数：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>letter[::-<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;zyxwvutsrqponmlkjihgfedcba&#x27;</span></span><br></pre></td></tr></table></figure></p><p>列表类型，由 0 个或多个数据组成的有序序列：</p><ul><li>列表使用<code>[]</code>表示，采用<code>,</code>分隔各元素<ul><li><code>[&#39;F&#39;,&#39;f&#39;]</code>表示两个元素<code>&#39;F&#39;</code>和<code>&#39;f&#39;</code></li></ul></li><li>使用保留字<code>in</code>判断一个元素是否在列表中<ul><li><code>TempStr[-1] in [&#39;C&#39;,&#39;c&#39;]</code>判断前者是否与列表中某个元素相同</li></ul></li></ul><p><code>eval()</code>，去掉参数最外侧引号并执行余下语句的函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;x = <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>( <span class="string">&#x27;3 * x&#x27;</span> )</span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;pow(2,2)&#x27;</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;2 + 2&#x27;</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n=<span class="number">81</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&quot;n + 4&quot;</span>)</span><br><span class="line"><span class="number">85</span></span><br></pre></td></tr></table></figure><p>一些其他的例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;&quot;1+2&quot;&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;1+2&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;print(&quot;hello&quot;)&#x27;</span>)</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p><code>r = eval(input(&quot;input r=&quot;))</code>，如果键盘输入数值<code>5</code>，x 值是<strong>数字</strong><code>5</code>。</p><p><code>print()</code>中格式化输出：字符串的<code>format()</code>方法</p><h2 id="Python-基本图形绘制"><a href="#Python-基本图形绘制" class="headerlink" title="Python 基本图形绘制"></a>Python 基本图形绘制</h2><p>turtle 库是 python 语言的标准库之一。</p><p><img src="https://bu.dusays.com/2023/03/16/641278e679ff7.png" alt="34-8.png"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.goto(<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">turtle.goto(<span class="number">100</span>,-<span class="number">100</span>)</span><br><span class="line">turtle.goto(-<span class="number">100</span>,-<span class="number">100</span>)</span><br><span class="line">turtle.goto(-<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">turtle.goto(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/03/16/64127bcf5dbbf.png" alt="34-9.png" title="上面代码的结果及在结果上的注释"></p><p><img src="https://bu.dusays.com/2023/03/16/641283e87235a.png" alt="34-10.png"></p><p><img src="https://bu.dusays.com/2023/03/16/6412872ade8a5.png" alt="34-11.png" title="角度坐标体系"></p><p><img src="https://bu.dusays.com/2023/03/16/6412877ca20c7.png" alt="34-12.png"></p><p>色彩模式：</p><p><img src="https://bu.dusays.com/2023/03/16/641288e5c6f50.png" alt="34-13.png"></p><p><img src="https://bu.dusays.com/2023/03/16/64128d50b787f.png" alt="34-14.png"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例：蟒蛇绘制</span></span><br><span class="line"><span class="comment"># PythonDraw.py</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> tu</span><br><span class="line">tu.setup(<span class="number">650</span>,<span class="number">350</span>,<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line">tu.penup()</span><br><span class="line">tu.fd(-<span class="number">250</span>)</span><br><span class="line">tu.pendown()</span><br><span class="line">tu.pensize(<span class="number">25</span>)</span><br><span class="line">tu.seth(-<span class="number">40</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    tu.pencolor(<span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">    tu.circle(<span class="number">40</span>,<span class="number">80</span>)</span><br><span class="line">    tu.pencolor(<span class="string">&quot;gold&quot;</span>)</span><br><span class="line">    tu.circle(-<span class="number">40</span>,<span class="number">80</span>)</span><br><span class="line">tu.circle(<span class="number">40</span>,<span class="number">80</span>/<span class="number">2</span>)</span><br><span class="line">tu.fd(<span class="number">40</span>)</span><br><span class="line">tu.circle(<span class="number">32</span>,<span class="number">180</span>)</span><br><span class="line">tu.fd(<span class="number">40</span>*<span class="number">2</span>/<span class="number">3</span>)</span><br><span class="line">tu.done()</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/03/16/6412b0c9cad96.png" alt="34-15.png"></p><p>画笔控制函数：</p><ul><li><code>turtle.penup()</code>，别名<code>turtle.pu()</code><ul><li>抬起画笔，海龟在飞行</li></ul></li><li><code>turtle.pendown()</code>，别名<code>turtle.pd()</code><ul><li>落下画笔，海龟在爬行</li></ul></li><li>画笔操作后一直有效，一般成对出现。</li><li><code>turtle.pensize(width)</code>，别名<code>turtle.width(width)</code><ul><li>画笔宽度，海龟的腰围</li></ul></li><li><code>turtle.pencolor(color)</code>，<code>color</code>为颜色字符串或 rgb 值<ul><li>画笔颜色，海龟在涂装</li></ul></li><li>画笔设置后一直有效，直到下次重新设置</li></ul><p><img src="https://bu.dusays.com/2023/03/16/6412b42be072b.png" alt="34-16.png" title="fd()和circle()"></p><p><img src="https://bu.dusays.com/2023/03/16/6412b521db5fe.png" alt="34-17.png" title="seth(angle)和left(angle)、right(angle)"></p><p><img src="https://bu.dusays.com/2023/03/16/6412b654e6734.png" alt="34-18.png" title="range()：左闭右开，万岁"></p><p>循环语句：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello: &quot;</span>,i)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    运行结果：</span></span><br><span class="line"><span class="string">hello:  0</span></span><br><span class="line"><span class="string">hello:  1</span></span><br><span class="line"><span class="string">hello:  2</span></span><br><span class="line"><span class="string">hello:  3</span></span><br><span class="line"><span class="string">hello:  4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p><img src="https://bu.dusays.com/2023/03/23/641c24293c847.png" alt="34-19.png" title="不同进制的表示形式"></p><p>浮点数取值范围和小数精度存在限制，但常规计算可忽略。取值范围数量级约为$-10^{307}$~$10^{308}$，精度数量级$10^{-16}$ .</p><p>浮点数运算存在不确定尾数，不是 bug：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0.1</span>+<span class="number">0.3</span></span><br><span class="line"><span class="number">0.4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0.1</span>+<span class="number">0.2</span></span><br><span class="line"><span class="number">0.30000000000000004</span></span><br></pre></td></tr></table></figure><p>这是因为二进制表示小数，有时可以无限接近，但不完全相同。</p><p><code>round(x,d)</code>：对 x 四舍五入，d 是小数截取位数。不确定尾数一般发生在$10^{-16}$左右，<code>round()</code>十分有效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0.1</span>+<span class="number">0.2</span>==<span class="number">0.3</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">round</span>(<span class="number">0.1</span>+<span class="number">0.2</span>,<span class="number">1</span>)==<span class="number">0.3</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>科学计数法和 C++ 类似。</p><p>复数类型：<code>z.real</code>获得实部，<code>z.imag</code>获得虚部。</p><p>Python中的<code>x/y</code>带有小数部分。Python中的<code>x//y</code>，效果同 C++ 中的<code>x/y</code>。</p><p><code>x ** y</code>幂运算，$x^y$，其中$y$可以是小数。</p><p><img src="https://bu.dusays.com/2023/03/23/641c5827cec07.png" alt="34-20.png" title="各种函数"></p><p>查看类型、判断是否类型一致：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="number">3</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="number">3.3</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;float&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>((<span class="number">3</span>,))</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>([<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="number">3</span>,<span class="built_in">int</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="number">3.5</span>,<span class="built_in">int</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="built_in">list</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>比较运算符与 C++ 一致。</p><p>逻辑运算：<code>and</code>，<code>or</code>，<code>not</code> .</p><p><code>math</code>库 4 个数学常数：</p><ul><li><code>math.pi</code>，圆周率</li><li><code>math.e</code>，自然对数</li><li><code>math.inf</code>，正无穷大。负无穷大记为<code>-math.inf</code></li><li><code>math.nan</code>，非浮点数标记，NaN（Not a Number）</li></ul><p><img src="https://bu.dusays.com/2023/03/23/641c5d7da1e91.png" alt="34-21.png" title="16个数值表示函数"></p><p><img src="https://bu.dusays.com/2023/03/23/641c5d7d9f266.png" alt="34-22.png" title="8个幂对数函数 &amp; pow()的区别"></p><p><img src="https://bu.dusays.com/2023/03/23/641c5e88e9e1c.png" alt="34-23.png" title="16个三角函数"></p><p><img src="https://bu.dusays.com/2023/03/23/641c5f07d7dd3.png" alt="34-24.png" title="4个特殊高等函数"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例：自适应simpson</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>)-&gt;<span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> math.<span class="built_in">pow</span>(<span class="number">1</span>+<span class="number">1</span>/x, x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simpson</span>(<span class="params">l,r</span>)-&gt;<span class="built_in">float</span>:</span><br><span class="line">    mid = (l+r)/<span class="number">2.0</span></span><br><span class="line">    <span class="keyword">return</span> (f(l)+<span class="number">4</span>*f(mid)+f(r))/<span class="number">6.0</span>*(r-l)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">asr</span>(<span class="params">l, r, eps, S, cnt</span>)-&gt;<span class="built_in">float</span>:</span><br><span class="line">    mid =(l+r)/<span class="number">2.0</span></span><br><span class="line">    s1 = simpson(l, mid)</span><br><span class="line">    s2 = simpson(mid, r)</span><br><span class="line">    <span class="keyword">if</span> (math.fabs(s1+s2-S)&lt;=<span class="number">15</span>*eps <span class="keyword">and</span> cnt&lt;=<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> s1+s2+(s1+s2-S)/<span class="number">15.0</span></span><br><span class="line">    <span class="keyword">return</span> asr(l, mid, eps/<span class="number">2</span>, s1, cnt-<span class="number">1</span>) + asr(mid, r, eps/<span class="number">2</span>, s2, cnt-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">l, r, eps</span>)-&gt;<span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> asr(l, r, eps, simpson(l,r), <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">x = (<span class="built_in">float</span>)(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">format</span>(calc(<span class="number">0.0000000000001</span>, x, <span class="number">1e-8</span>),<span class="string">&#x27;.8f&#x27;</span>))</span><br></pre></td></tr></table></figure><p>字符串操作符：</p><ul><li><code>x + y</code>，连接两个字符串 x 和 y</li><li><code>n * x</code>或<code>x * n</code>，复制 n 次字符串 x</li><li><code>x in S</code>，如果 x 是 S 的子串，返回<code>True</code></li></ul><p><img src="https://bu.dusays.com/2023/03/23/641c60cd3198c.png" alt="34-25.png" title="字符串处理函数"></p><p>Python 字符串中每个字符都是 Unicode 编码字符。</p><p><img src="https://bu.dusays.com/2023/03/23/641c61aa723f4.png" alt="34-26.png" title="Unicode例子"></p><p>字符串处理方法：</p><ul><li>“方法”在编程中是一个专有名词</li><li>“方法”特指<code>&lt;a&gt;.&lt;b&gt;()</code>风格中的函数<code>&lt;b&gt;()</code></li><li>方法本身也是函数，但与<code>&lt;a&gt;</code>有关，<code>&lt;a&gt;.&lt;b&gt;()</code>风格使用</li><li>字符串或字符串变量是<code>&lt;a&gt;</code>，存在一些可用方法</li></ul><p><img src="https://bu.dusays.com/2023/03/23/641c6322b990e.png" alt="34-27.png"></p><p><img src="https://bu.dusays.com/2023/03/23/641c6322c0616.png" alt="34-28.png"></p><p>输入 3 个数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">b = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">C = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">a,b,C = <span class="built_in">eval</span>(<span class="built_in">input</span>()) <span class="comment"># 输入：3,4,5</span></span><br><span class="line">a,b,C = <span class="built_in">map</span>(<span class="built_in">eval</span>, <span class="built_in">input</span>().split()) <span class="comment"># 输入：3 4 5</span></span><br></pre></td></tr></table></figure><p><code>map(func, *iterables)</code>：上网查。</p><p><img src="https://bu.dusays.com/2023/03/23/641c65ea5fd9a.png" alt="34-29.png"></p><p><code>format()</code>方法：更多用法请上网查。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;ldq&#x27;</span></span><br><span class="line">age = <span class="number">24</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我叫%s，今年%d岁&#x27;</span> % (name, age))</span><br><span class="line"><span class="comment"># 输出：我叫ldq，今年24岁</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我叫&#123;0&#125;，今年&#123;1&#125;岁&#x27;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"><span class="comment"># 输出：我叫ldq，今年24岁</span></span><br></pre></td></tr></table></figure><h2 id="程序的控制结构"><a href="#程序的控制结构" class="headerlink" title="程序的控制结构"></a>程序的控制结构</h2><p>异常处理：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例1</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数：&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(num**<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入不是整数&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例2</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数：&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(num**<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span> NameError:  <span class="comment"># 标注异常类型后，仅响应此类异常</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入不是整数&quot;</span>)</span><br></pre></td></tr></table></figure><p>异常处理的高级使用：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># &lt;语句块1&gt;</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="comment"># &lt;语句块2&gt;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># &lt;语句块3&gt;     # 不发生异常时会执行</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># &lt;语句块4&gt;     # 一定执行</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/03/29/6424312971850.png" alt="34-30.png" title="实例：计算 BMI"></p><p>循环结构：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello:&quot;</span>,i)</span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line">hello: <span class="number">1</span></span><br><span class="line">hello: <span class="number">3</span></span><br><span class="line">hello: <span class="number">5</span></span><br></pre></td></tr></table></figure><p>字符串遍历循环：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&quot;Python123&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(c, end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line">P,y,t,h,o,n,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br></pre></td></tr></table></figure><p>列表遍历循环：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> [<span class="number">123</span>, <span class="string">&quot;PY&quot;</span>, <span class="number">456</span>]:</span><br><span class="line">    <span class="built_in">print</span>(item, end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line"><span class="number">123</span>,PY,<span class="number">456</span>,</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/03/29/642434baa3f28.png" alt="34-31.png" title="文件遍历循环"></p><p><img src="https://bu.dusays.com/2023/03/29/64243601ae2cd.png" alt="34-32.png" title="循环与 else"></p><p>使用<code>random</code>库： <code>import random</code></p><p>基本随机数函数：<code>seed()</code>、<code>random()</code></p><p>扩展随机数函数：<code>randint()</code>、<code>getrandbits()</code>、<code>uniform()</code>、<code>randrange()</code>、<code>choice()</code>、<code>shuffle()</code></p><p><img src="https://bu.dusays.com/2023/03/29/64243a6c24b2b.png" alt="34-33.png"></p><p><img src="https://bu.dusays.com/2023/03/29/64243a6c24b6f.png" alt="34-34.png"></p><p><img src="https://bu.dusays.com/2023/03/29/64243a2b5bea7.png" alt="34-35.png"></p><p><img src="https://bu.dusays.com/2023/03/29/64243b250ffba.png" alt="34-36.png" title="蒙特卡罗计算 pi"></p><h2 id="函数和代码复用"><a href="#函数和代码复用" class="headerlink" title="函数和代码复用"></a>函数和代码复用</h2><p>可变参数传递：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fact</span>(<span class="params">n, *b</span>):</span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        s *= i</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> b:</span><br><span class="line">        s *= item</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>函数调用时，参数可以按照位置或名称方式传递。（歪门邪道，少用）</p><p><img src="https://bu.dusays.com/2023/03/30/642557ee7c259.png" alt="34-37.png" title="多个返回值"></p><p><img src="https://bu.dusays.com/2023/03/30/642558d11ca32.png" alt="34-38.png" title="global 保留字"></p><p><img src="https://bu.dusays.com/2023/03/30/6425596a240c3.png" alt="34-39.png" title="未创建的组合数据类型的局部变量"></p><p><img src="https://bu.dusays.com/2023/03/30/64255a210481e.png" alt="34-40.png"></p><p><code>lambda</code>函数：</p><ul><li>一种匿名函数</li><li>使用<code>lambda</code>保留字定义，函数名是返回结果</li><li><code>lambda</code>函数用于定义简单的、能在一行内表示的函数</li><li>主要用作一些特定函数或方法的参数</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="keyword">lambda</span> x,y : x+y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">10</span>,<span class="number">15</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="keyword">lambda</span> : <span class="string">&quot;lambda函数&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(f())</span><br><span class="line"><span class="keyword">lambda</span>函数</span><br></pre></td></tr></table></figure><p>【实例】七段数码管绘制：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle, time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawGap</span>():   <span class="comment">#绘制数码管间隔</span></span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawLine</span>(<span class="params">draw</span>):   <span class="comment">#绘制单段数码管</span></span><br><span class="line">    drawGap()</span><br><span class="line">    turtle.pendown() <span class="keyword">if</span> draw <span class="keyword">else</span> turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">40</span>)</span><br><span class="line">    drawGap()</span><br><span class="line">    turtle.right(<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawDigit</span>(<span class="params">digit</span>): <span class="comment">#根据数字绘制七段数码管</span></span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    turtle.left(<span class="number">90</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    turtle.left(<span class="number">180</span>)</span><br><span class="line">    turtle.penup() <span class="comment">#为绘制后续数字确定位置</span></span><br><span class="line">    turtle.fd(<span class="number">20</span>)  <span class="comment">#为绘制后续数字确定位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawDate</span>(<span class="params">date</span>):   <span class="comment">#data为日期，格式为 &#x27;%Y-%m=%d+&#x27; </span></span><br><span class="line">    turtle.pencolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> date:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            turtle.write(<span class="string">&#x27;年&#x27;</span>,font=(<span class="string">&quot;Arial&quot;</span>, <span class="number">18</span>, <span class="string">&quot;normal&quot;</span>))</span><br><span class="line">            turtle.pencolor(<span class="string">&quot;green&quot;</span>)</span><br><span class="line">            turtle.fd(<span class="number">40</span>)</span><br><span class="line">        <span class="keyword">elif</span> i == <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">            turtle.write(<span class="string">&#x27;月&#x27;</span>,font=(<span class="string">&quot;Arial&quot;</span>, <span class="number">18</span>, <span class="string">&quot;normal&quot;</span>))</span><br><span class="line">            turtle.pencolor(<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">            turtle.fd(<span class="number">40</span>)</span><br><span class="line">        <span class="keyword">elif</span> i == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            turtle.write(<span class="string">&#x27;日&#x27;</span>,font=(<span class="string">&quot;Arial&quot;</span>, <span class="number">18</span>, <span class="string">&quot;normal&quot;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            drawDigit(<span class="built_in">eval</span>(i)) </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    turtle.speed(<span class="number">10</span>)</span><br><span class="line">    turtle.delay(<span class="number">0</span>)</span><br><span class="line">    turtle.setup(<span class="number">800</span>, <span class="number">350</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(-<span class="number">300</span>)</span><br><span class="line">    turtle.pensize(<span class="number">5</span>)</span><br><span class="line">    drawDate(time.strftime(<span class="string">&#x27;%Y-%m=%d+&#x27;</span>,time.gmtime()))</span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">    turtle.done()</span><br><span class="line"></span><br><span class="line">main() </span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://bu.dusays.com/2023/03/30/64259516bf237.png" alt="34-41.png"></p><p>【实例】修正如下的绘制奥运五环的程序，将五环绘制部分代码改为用循环实现，提示（每个圆的坐标点、颜色可以选用组合数据类型保持）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.speed(<span class="number">10</span>)</span><br><span class="line">turtle.delay(<span class="number">0</span>)</span><br><span class="line">turtle.width(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">turtle.color(<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">120</span>, <span class="number">0</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">240</span>, <span class="number">0</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">60</span>, -<span class="number">50</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">180</span>, -<span class="number">50</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">&quot;green&quot;</span>)</span><br><span class="line">turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">40</span>, -<span class="number">100</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.write(<span class="string">&quot;Beijing 2022&quot;</span>, font=(<span class="string">&quot;微软雅⿊&quot;</span>, <span class="number">20</span>, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line">turtle.hideturtle()</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><p>【解答】这里写点字只是因为不想看起来不舒服。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.speed(<span class="number">10</span>)</span><br><span class="line">turtle.delay(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">rings = [&#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;position&#x27;</span>: (<span class="number">0</span>, <span class="number">0</span>)&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;position&#x27;</span>: (<span class="number">120</span>, <span class="number">0</span>)&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;position&#x27;</span>: (<span class="number">240</span>, <span class="number">0</span>)&#125;,   </span><br><span class="line">         &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;position&#x27;</span>: (<span class="number">60</span>, -<span class="number">50</span>)&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;position&#x27;</span>: (<span class="number">180</span>, -<span class="number">50</span>)&#125;]</span><br><span class="line"></span><br><span class="line">turtle.width(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ring <span class="keyword">in</span> rings:</span><br><span class="line">    turtle.color(ring[<span class="string">&#x27;color&#x27;</span>])</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(ring[<span class="string">&#x27;position&#x27;</span>])</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">40</span>, -<span class="number">100</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.write(<span class="string">&quot;Beijing 2022&quot;</span>, font=(<span class="string">&quot;微软雅⿊&quot;</span>, <span class="number">20</span>, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line">turtle.hideturtle()</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/04/04/642c358ecfadd.png" alt="34-42.png" title="上面代码的运行结果"></p><p>【实例】修正绘制奥运五环的程序，将五环绘制部分代码改为用函数实现，提示（可以通过参数传每个圆的坐标点、颜色值）</p><p>【解答】没什么可分析的。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.speed(<span class="number">10</span>)</span><br><span class="line">turtle.delay(<span class="number">0</span>)</span><br><span class="line">turtle.width(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_circle</span>(<span class="params">x, y, color</span>):</span><br><span class="line">    turtle.color(color)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(x, y)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">draw_circle(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">draw_circle(<span class="number">120</span>, <span class="number">0</span>, <span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">draw_circle(<span class="number">240</span>, <span class="number">0</span>, <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">draw_circle(<span class="number">60</span>, -<span class="number">50</span>, <span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">draw_circle(<span class="number">180</span>, -<span class="number">50</span>, <span class="string">&#x27;green&#x27;</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">40</span>, -<span class="number">100</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.write(<span class="string">&quot;Beijing 2022&quot;</span>, font=(<span class="string">&quot;微软雅⿊&quot;</span>, <span class="number">20</span>, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line">turtle.hideturtle()</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><h2 id="组合数据类型"><a href="#组合数据类型" class="headerlink" title="组合数据类型"></a>组合数据类型</h2><p>集合类型的定义：</p><ul><li>与数学中集合的概念一致</li><li>集合元素不可更改，不能是可变数据类型</li><li>用<code>&#123;&#125;</code>表示，元素间用逗号分隔</li><li>建立集合类型用<code>&#123;&#125;</code>或<code>set()</code></li><li>建立空集合类型，必须用<code>set()</code></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>A = &#123;<span class="string">&quot;python&quot;</span>, <span class="number">123</span>, (<span class="string">&quot;python&quot;</span>,<span class="number">123</span>)&#125;  <span class="comment">#使用&#123;&#125;建立集合</span></span><br><span class="line">&#123;<span class="number">123</span>, <span class="string">&#x27;python&#x27;</span>, (<span class="string">&#x27;python&#x27;</span>, <span class="number">123</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B = <span class="built_in">set</span>(<span class="string">&quot;pypy123&quot;</span>)         <span class="comment">#使用set()建立集合</span></span><br><span class="line">&#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;y&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>C = &#123;<span class="string">&quot;python&quot;</span>, <span class="number">123</span>, <span class="string">&quot;python&quot;</span>,<span class="number">123</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;python&#x27;</span>, <span class="number">123</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/04/08/64316240ad465.png" alt="34-43.png" title="集合操作符"></p><p><img src="https://bu.dusays.com/2023/04/08/64316444c5ab4.png" alt="34-44.png" title="集合处理方法"></p><p>包含关系比较：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;p&quot;</span> <span class="keyword">in</span> &#123;<span class="string">&quot;p&quot;</span>, <span class="string">&quot;y&quot;</span> , <span class="number">123</span>&#125;</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">&quot;p&quot;</span>, <span class="string">&quot;y&quot;</span>&#125; &gt;= &#123;<span class="string">&quot;p&quot;</span>, <span class="string">&quot;y&quot;</span> , <span class="number">123</span>&#125;</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>数据去重，集合类型所有元素无重复：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;p&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="number">123</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">set</span>(ls)    <span class="comment"># 利用了集合无重复元素的特点</span></span><br><span class="line">&#123;<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="number">123</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lt = <span class="built_in">list</span>(s)   <span class="comment"># 还可以将集合转换为列表</span></span><br><span class="line">[<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="number">123</span>]</span><br></pre></td></tr></table></figure><p>序列类型定义（序列是具有先后关系的一组元素<br>）：</p><ul><li>序列是一维元素向量，元素类型可以不同</li><li>类似数学元素序列： s0, s1, … , sn-1</li><li>元素间由序号引导，通过下标访问序列的特定元素</li></ul><p><strong>序列是一个基类类型。</strong> 序列类型 -&gt; 字符串类型、元组类型、列表类型。</p><p><img src="https://bu.dusays.com/2023/04/08/64316c066cd4c.png" alt="34-45.png"></p><p><img src="https://bu.dusays.com/2023/04/08/64316d6695050.png" alt="34-46.png" title="序列类型通用操作符"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 序列类型操作实例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;python&quot;</span>, <span class="number">123</span>, <span class="string">&quot;.io&quot;</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls[::-<span class="number">1</span>]</span><br><span class="line">[<span class="string">&#x27;.io&#x27;</span>, <span class="number">123</span>, <span class="string">&#x27;python&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&quot;python123.io&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::-<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;oi.321nohtyp&#x27;</span></span><br><span class="line">&gt;&gt;&gt;Print(ls)</span><br><span class="line">[<span class="string">&#x27;python’,123,&#x27;</span>.io’]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;python&quot;</span>, <span class="number">123</span>, <span class="string">&quot;.io&quot;</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(ls)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&quot;python123.io&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(s)</span><br><span class="line"><span class="string">&#x27;y&#x27;</span></span><br></pre></td></tr></table></figure><p>元组类型定义（元组是序列类型的一种扩展，继承了序列类型的全部通用操作）：</p><ul><li>使用小括号<code>()</code>或<code>tuple()</code>创建，元素间用逗号分隔</li><li>可以使用或不使用小括号</li><li>一旦创建就不能被修改</li><li>没有特殊操作（增删改）</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>creature = <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;tiger&quot;</span>, <span class="string">&quot;human&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>creature</span><br><span class="line">(<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="string">&#x27;human&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>creature[::-<span class="number">1</span>]</span><br><span class="line">(<span class="string">&#x27;human&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>creature</span><br><span class="line">(<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="string">&#x27;human&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>color = (<span class="number">0x001100</span>, <span class="string">&quot;blue&quot;</span>, creature)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>color[-<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;tiger&#x27;</span></span><br></pre></td></tr></table></figure><p>列表类型定义（列表是序列类型的一种扩展，十分常用）：</p><ul><li>列表是一种序列类型，创建后可以随意被修改</li><li>使用方括号<code>[]</code>或<code>list()</code>创建，元素间用逗号分隔</li><li>列表中各元素类型可以不同，无长度限制</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;tiger&quot;</span>, <span class="number">1024</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls</span><br><span class="line">[<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="number">1024</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lt = ls</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lt</span><br><span class="line">[<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="number">1024</span>] </span><br></pre></td></tr></table></figure><p>方括号<code>[]</code>真正创建一个列表，赋值仅传递引用。</p><p><img src="https://bu.dusays.com/2023/04/09/643233b43a725.png" alt="34-47.png" title="列表类型操作函数和方法"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;tiger&quot;</span>, <span class="number">1024</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls[<span class="number">1</span>:<span class="number">2</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="string">&#x27;cat&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="number">1024</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> ls[::<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="string">&#x27;tiger&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls*<span class="number">2</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="string">&#x27;tiger&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;tiger&quot;</span>, <span class="number">1024</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls.append(<span class="number">1234</span>)</span><br><span class="line">[<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="number">1024</span>, <span class="number">1234</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls.insert(<span class="number">3</span>, <span class="string">&quot;human&quot;</span>)</span><br><span class="line">[<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="string">&#x27;human&#x27;</span>, <span class="number">1024</span>, <span class="number">1234</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls.reverse()</span><br><span class="line">[<span class="number">1234</span>, <span class="number">1024</span>, <span class="string">&#x27;human&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>]</span><br></pre></td></tr></table></figure><p>如果不希望数据被程序所改变，转换成元组类型:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;tiger&quot;</span>, <span class="number">1024</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lt = <span class="built_in">tuple</span>(ls)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lt</span><br><span class="line">(<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="number">1024</span>)</span><br></pre></td></tr></table></figure><p>【实例】 基本统计值计算</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CalStatisticsV1.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getNum</span>():       <span class="comment">#获取用户不定长度的输入</span></span><br><span class="line">    nums = []</span><br><span class="line">    iNumStr = <span class="built_in">input</span>(<span class="string">&quot;请输入数字(回车退出): &quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> iNumStr != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        nums.append(<span class="built_in">eval</span>(iNumStr))</span><br><span class="line">        iNumStr = <span class="built_in">input</span>(<span class="string">&quot;请输入数字(回车退出): &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mean</span>(<span class="params">numbers</span>):  <span class="comment">#计算平均值</span></span><br><span class="line">    s = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">        s = s + num</span><br><span class="line">    <span class="keyword">return</span> s / <span class="built_in">len</span>(numbers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dev</span>(<span class="params">numbers, mean</span>):  <span class="comment">#计算标准差</span></span><br><span class="line">    sdev = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">        sdev = sdev + (num - mean)**<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(sdev / (<span class="built_in">len</span>(numbers)-<span class="number">1</span>), <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">median</span>(<span class="params">numbers</span>):    <span class="comment">#计算中位数</span></span><br><span class="line">    numbers.sort()    <span class="comment"># sorted(numbers)</span></span><br><span class="line">    size = <span class="built_in">len</span>(numbers)</span><br><span class="line">    <span class="keyword">if</span> size % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        med = (numbers[size//<span class="number">2</span>-<span class="number">1</span>] + numbers[size//<span class="number">2</span>])/<span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        med = numbers[size//<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> med</span><br><span class="line"></span><br><span class="line">n =  getNum() </span><br><span class="line">m =  mean(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;平均值:&#123;&#125;,标准差:&#123;:.2&#125;,中位数:&#123;&#125;.&quot;</span>.<span class="built_in">format</span>(m, dev(n,m),median(n))) </span><br></pre></td></tr></table></figure><p>注意：在上面的代码中，两条排序语句的运行结果不一样。</p><p>这是因为：</p><ul><li><code>sorted()</code>是<code>Python</code>内置函数，它接受一个可迭代对象（如列表）作为参数，返回一个新的排好序的列表，原来的列表不会被修改。</li><li><code>list.sort()</code>是列表对象的方法，它对原列表进行排序，不返回新的列表，而是直接修改原来的列表。</li></ul><p>【作业】 代码补全 - 奥运五环</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawCircle</span>(<span class="params">x,y,color</span>):</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(x, y)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.color(color)</span><br><span class="line">    turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.width(<span class="number">10</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">##1</span></span><br><span class="line">drawCircle(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">drawCircle(<span class="number">120</span>,<span class="number">0</span>,<span class="string">&quot;black&quot;</span>)</span><br><span class="line">drawCircle(<span class="number">240</span>,<span class="number">0</span>,<span class="string">&quot;red&quot;</span>)</span><br><span class="line">drawCircle(<span class="number">60</span>,-<span class="number">50</span>,<span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">drawCircle(<span class="number">180</span>,-<span class="number">50</span>,<span class="string">&quot;green&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##2</span></span><br><span class="line"><span class="comment">##xs = [0, 120, 240, 60, 180]</span></span><br><span class="line"><span class="comment">##ys = [0, 0, 0, -50, -50]</span></span><br><span class="line"><span class="comment">##colors = [&#x27;blue&#x27;, &#x27;black&#x27;, &#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;]</span></span><br><span class="line"><span class="comment">##for i in range(5):</span></span><br><span class="line"><span class="comment">##补全    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">##3</span></span><br><span class="line"><span class="comment">##coords = [(0,0),(120,0),(240,0),(60,-50),(180,-50)]</span></span><br><span class="line"><span class="comment">##colors = [&quot;blue&quot;,&quot;black&quot;,&quot;red&quot;,&quot;yellow&quot;,&quot;green&quot;]</span></span><br><span class="line"><span class="comment">##for i in range(5):</span></span><br><span class="line"><span class="comment">##补全    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">##4</span></span><br><span class="line"><span class="comment">##circles = [</span></span><br><span class="line"><span class="comment">##    (0, 0, &quot;blue&quot;),</span></span><br><span class="line"><span class="comment">##    (120, 0, &quot;black&quot;),</span></span><br><span class="line"><span class="comment">##    (240, 0, &quot;red&quot;),</span></span><br><span class="line"><span class="comment">##    (60, -50, &quot;yellow&quot;),</span></span><br><span class="line"><span class="comment">##    (180, -50, &quot;green&quot;)</span></span><br><span class="line"><span class="comment">##]</span></span><br><span class="line"><span class="comment">##for circle in circles:</span></span><br><span class="line"><span class="comment">##补全</span></span><br><span class="line">    </span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">40</span>, -<span class="number">100</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.write(<span class="string">&quot;Beijing 2022&quot;</span>, font=(<span class="string">&quot;微软雅⿊&quot;</span>, <span class="number">20</span>, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line">turtle.hideturtle()</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><p>2中补全的代码为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drawCircle(xs[i], ys[i], colors[i])</span><br></pre></td></tr></table></figure><p>3中补全的代码为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drawCircle(coords[i][<span class="number">0</span>], coords[i][<span class="number">1</span>], colors[i])</span><br></pre></td></tr></table></figure><p>4中补全的代码为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drawCircle(circle[<span class="number">0</span>], circle[<span class="number">1</span>], circle[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>以上代码均通过测试。</p><p>字典类型定义（字典类型是“映射”的体现）：</p><ul><li>键值对：键是数据索引的扩展</li><li>字典是键值对的集合，键值对之间无序</li><li>采用大括号<code>&#123;&#125;</code>和<code>dict()</code>创建，键值对用冒号<code>:</code>表示</li><li><code>&#123;&lt;键1&gt;:&lt;值1&gt;, &lt;键2&gt;:&lt;值2&gt;, … , &lt;键n&gt;:&lt;值n&gt;&#125;</code></li></ul><p>在字典变量中，通过键获得值：</p><ul><li><code>&lt;字典变量&gt; = &#123;&lt;键1&gt;:&lt;值1&gt;, … , &lt;键n&gt;:&lt;值n&gt;&#125;</code></li><li><code>&lt;值&gt; = &lt;字典变量&gt;[&lt;键&gt;]</code></li><li><code>&lt;字典变量&gt;[&lt;键&gt;] = &lt;值&gt;</code></li><li><code>[]</code>用来向字典变量中索引或增加元素</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&quot;中国&quot;</span>:<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;美国&quot;</span>:<span class="string">&quot;华盛顿&quot;</span>, <span class="string">&quot;法国&quot;</span>:<span class="string">&quot;巴黎&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d </span><br><span class="line">&#123;<span class="string">&#x27;中国&#x27;</span>: <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>: <span class="string">&#x27;华盛顿&#x27;</span>, <span class="string">&#x27;法国&#x27;</span>: <span class="string">&#x27;巴黎&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&quot;中国&quot;</span>]</span><br><span class="line"><span class="string">&#x27;北京&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>de = &#123;&#125; ; <span class="built_in">type</span>(de)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p><code>type(x)</code>：返回变量x的类型。</p><p><img src="https://bu.dusays.com/2023/04/10/6433fbf041ce4.png" alt="34-48.png" title="字典类型操作函数和方法"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&quot;中国&quot;</span>:<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;美国&quot;</span>:<span class="string">&quot;华盛顿&quot;</span>, <span class="string">&quot;法国&quot;</span>:<span class="string">&quot;巴黎&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;中国&quot;</span> <span class="keyword">in</span> d </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.keys()</span><br><span class="line">dict_keys([<span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;法国&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.values()</span><br><span class="line">dict_values([<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;华盛顿&#x27;</span>, <span class="string">&#x27;巴黎&#x27;</span>])</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&quot;中国&quot;</span>:<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;美国&quot;</span>:<span class="string">&quot;华盛顿&quot;</span>, <span class="string">&quot;法国&quot;</span>:<span class="string">&quot;巴黎&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;伊斯兰堡&quot;</span>)</span><br><span class="line"><span class="string">&#x27;北京&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">&quot;巴基斯坦&quot;</span>,<span class="string">&quot;伊斯兰堡&quot;</span>)</span><br><span class="line"><span class="string">&#x27;伊斯兰堡&#x27;</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.popitem()</span><br><span class="line">(<span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;华盛顿&#x27;</span>)</span><br></pre></td></tr></table></figure><p>字典类型应用场景，元素遍历：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="keyword">for</span> (k,v) <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d.keys():</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> d.values():</span><br></pre></td></tr></table></figure><p>【作业】 课程成绩统计</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">score_type_in</span>():    <span class="comment"># 获取用户不定长度的输入</span></span><br><span class="line">    nums = []</span><br><span class="line">    iNumStr = <span class="built_in">input</span>(<span class="string">&quot;请输入0-100的整数(回车退出): &quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> iNumStr != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        nums.append(<span class="built_in">eval</span>(iNumStr))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span>(<span class="built_in">isinstance</span>(nums[-<span class="number">1</span>],<span class="built_in">int</span>)) <span class="keyword">or</span> nums[-<span class="number">1</span>]&lt;<span class="number">0</span> <span class="keyword">or</span> nums[-<span class="number">1</span>]&gt;<span class="number">100</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入非法&quot;</span>)</span><br><span class="line">            <span class="keyword">del</span> nums[-<span class="number">1</span>]</span><br><span class="line">        iNumStr = <span class="built_in">input</span>(<span class="string">&quot;请输入0-100的整数(回车退出): &quot;</span>)</span><br><span class="line">    nums.sort()</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mean</span>(<span class="params">numbers</span>):  <span class="comment"># 计算平均值</span></span><br><span class="line">    s = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">        s = s + num</span><br><span class="line">    <span class="keyword">return</span> s / <span class="built_in">len</span>(numbers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">abcde_label</span>(<span class="params">numbers</span>):  <span class="comment"># 打等级</span></span><br><span class="line">    label_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> score <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="keyword">if</span> score &gt;= <span class="number">90</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;优&quot;</span>] = label_dict.get(<span class="string">&quot;优&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> score &gt;= <span class="number">80</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;良&quot;</span>] = label_dict.get(<span class="string">&quot;良&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> score &gt;= <span class="number">70</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;中&quot;</span>] = label_dict.get(<span class="string">&quot;中&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> score &gt;= <span class="number">60</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;及格&quot;</span>] = label_dict.get(<span class="string">&quot;及格&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;不及格&quot;</span>] = label_dict.get(<span class="string">&quot;不及格&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> label_dict</span><br><span class="line"></span><br><span class="line">real_score = score_type_in()</span><br><span class="line"><span class="built_in">print</span>(real_score)</span><br><span class="line"><span class="built_in">print</span>(mean(real_score))</span><br><span class="line"><span class="built_in">print</span>(abcde_label(real_score))</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/04/14/64396a781777b.png" alt="34-48dot5.png" title="上面代码测试结果"></p><h2 id="jieba-库的使用"><a href="#jieba-库的使用" class="headerlink" title="jieba 库的使用"></a>jieba 库的使用</h2><p>安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jieba</span><br></pre></td></tr></table></figure><p>jieba 分词的三种模式：</p><ul><li>精确模式：把文本精确的切分开，不存在冗余单词</li><li>全模式：把文本中所有可能的词语都扫描出来，有冗余</li><li>搜索引擎模式：在精确模式基础上，对长词再次切分</li></ul><p><img src="https://bu.dusays.com/2023/04/10/64341085a6a39.png" alt="34-49.png"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;/&quot;</span>.join(jieba.lcut(<span class="string">&quot;中国是一个伟大的国家&quot;</span>)))</span><br></pre></td></tr></table></figure><p>命令、打印信息及输出结果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\arrogance&gt; python <span class="literal">-u</span> <span class="string">&quot;d:\mypycode\tmp.py&quot;</span></span><br><span class="line">Building prefix dict from the default dictionary ...</span><br><span class="line">Loading model from cache C:\Users\ARROGA~<span class="number">1</span>\AppData\Local\Temp\jieba.cache</span><br><span class="line">Loading model cost <span class="number">0.618</span> seconds.</span><br><span class="line">Prefix dict has been built successfully.</span><br><span class="line">中国/是/一个/伟大/的/国家</span><br></pre></td></tr></table></figure><p>注意：如果找不到 jieba ，可能是路径的问题。在命令行中修改路径，然后运行即可。</p><p>【实例】 文本词频统计</p><p>资料：</p><ul><li>英文文本：Hamlet             分析词频<br><a href="https://python123.io/resources/pye/hamlet.txt">https://python123.io/resources/pye/hamlet.txt</a></li><li>中文文本：《三国演义》    分析人物<br><a href="https://python123.io/resources/pye/threekingdoms.txt">https://python123.io/resources/pye/threekingdoms.txt</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CalHamletV1.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getText</span>():    <span class="comment"># 文本去噪及归一化</span></span><br><span class="line">    txt = <span class="built_in">open</span>(<span class="string">&quot;D:\mypycode\hamletcnt\hamlet.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line">    txt = txt.lower()</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">&#x27;!&quot;#$%&amp;()*+,-./:;&lt;=&gt;?@[\\]^_‘&#123;|&#125;~&#x27;</span>:</span><br><span class="line">        txt = txt.replace(ch, <span class="string">&quot; &quot;</span>) </span><br><span class="line">    <span class="keyword">return</span> txt</span><br><span class="line"></span><br><span class="line">hamletTxt = getText()</span><br><span class="line">words  = hamletTxt.split()</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:            </span><br><span class="line">    counts[word] = counts.get(word,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">items = <span class="built_in">list</span>(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    word, count = items[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="built_in">format</span>(word, count))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">the        1138</span><br><span class="line">and         965</span><br><span class="line">to          754</span><br><span class="line">of          669</span><br><span class="line">you         550</span><br><span class="line">i           542</span><br><span class="line">a           542</span><br><span class="line">my          514</span><br><span class="line">hamlet      462</span><br><span class="line">in          436</span><br></pre></td></tr></table></figure><p>代码解释：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">items.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>ChatGPT :</p><blockquote><p>这行Python代码使用了列表对象的sort()方法，根据列表中每个元素的第二个值（也就是下标为1的元素）进行降序排序。<br>lambda表达式创建了一个匿名函数，它取一个参数x并返回x[1]，也就是列表中每个元素的第二个值。<br>reverse=True参数指定了要按降序排序，也就是从大到小排序。如果没有指定该参数，sort()方法默认使用升序排序，也就是从小到大排序。<br>综上所述，这行代码的作用是对列表对象items按照其元素的第二个值进行降序排序。</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CalThreeKingdomsV1.py</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">txt = <span class="built_in">open</span>(<span class="string">&quot;D:\mypycode\\threekingdomscnt\\threekingdoms.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>).read()</span><br><span class="line">words = jieba.lcut(txt)</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(word) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:            </span><br><span class="line">        counts[word] = counts.get(word,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">items = <span class="built_in">list</span>(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    word, count = items[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="built_in">format</span>(word, count))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">曹操          953</span><br><span class="line">孔明          836</span><br><span class="line">将军          772</span><br><span class="line">却说          656</span><br><span class="line">玄德          585</span><br><span class="line">关公          510</span><br><span class="line">丞相          491</span><br><span class="line">二人          469</span><br><span class="line">不可          440</span><br><span class="line">荆州          425</span><br><span class="line">玄德曰         390</span><br><span class="line">孔明曰         390</span><br><span class="line">不能          384</span><br><span class="line">如此          378</span><br><span class="line">张飞          358</span><br></pre></td></tr></table></figure><p>以上只是词频统计，并不是人物出场统计，需要进一步优化：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CalThreeKingdomsV2.py</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">txt = <span class="built_in">open</span>(<span class="string">&quot;D:\mypycode\\threekingdomscnt\\threekingdoms.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>).read()</span><br><span class="line">excludes = &#123;<span class="string">&quot;将军&quot;</span>,<span class="string">&quot;却说&quot;</span>,<span class="string">&quot;荆州&quot;</span>,<span class="string">&quot;二人&quot;</span>,<span class="string">&quot;不可&quot;</span>,<span class="string">&quot;不能&quot;</span>,<span class="string">&quot;如此&quot;</span>&#125;</span><br><span class="line">words = jieba.lcut(txt)</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(word) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> word == <span class="string">&quot;诸葛亮&quot;</span> <span class="keyword">or</span> word == <span class="string">&quot;孔明曰&quot;</span>:</span><br><span class="line">        rword = <span class="string">&quot;孔明&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> word == <span class="string">&quot;关公&quot;</span> <span class="keyword">or</span> word == <span class="string">&quot;云长&quot;</span>:</span><br><span class="line">        rword = <span class="string">&quot;关羽&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> word == <span class="string">&quot;玄德&quot;</span> <span class="keyword">or</span> word == <span class="string">&quot;玄德曰&quot;</span>:</span><br><span class="line">        rword = <span class="string">&quot;刘备&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> word == <span class="string">&quot;孟德&quot;</span> <span class="keyword">or</span> word == <span class="string">&quot;丞相&quot;</span>:</span><br><span class="line">        rword = <span class="string">&quot;曹操&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rword = word</span><br><span class="line">    counts[rword] = counts.get(rword,<span class="number">0</span>) + <span class="number">1</span> </span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> excludes:</span><br><span class="line">    <span class="keyword">del</span> counts[word]</span><br><span class="line">items = <span class="built_in">list</span>(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    word, count = items[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="built_in">format</span>(word, count))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">曹操         1451</span><br><span class="line">孔明         1383</span><br><span class="line">刘备         1252</span><br><span class="line">关羽          784</span><br><span class="line">张飞          358</span><br><span class="line">商议          344</span><br><span class="line">如何          338</span><br><span class="line">主公          331</span><br><span class="line">军士          317</span><br><span class="line">吕布          300</span><br></pre></td></tr></table></figure><h2 id="文件和数据格式化"><a href="#文件和数据格式化" class="headerlink" title="文件和数据格式化"></a>文件和数据格式化</h2><p>文本文件（文件是数据的抽象和集合）：</p><ul><li>由单一特定编码组成的文件，如 UTF-8 编码</li><li>由于存在编码，也被看成是存储着的长字符串</li><li>适用于例如：<code>.txt</code>文件、<code>.py</code>文件等</li></ul><p>二进制文件：</p><ul><li>直接由比特0和1组成，没有统一字符编码</li><li>一般存在二进制0和1的组织结构，即文件格式</li><li>适用于例如：<code>.png</code>文件、<code>.avi</code>文件等</li></ul><p>文本形式打开文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># f.txt文件保存:  &quot;中国是个伟大的国家!&quot;</span></span><br><span class="line">tf = <span class="built_in">open</span>(<span class="string">&quot;f.txt&quot;</span>, <span class="string">&quot;rt&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(tf.readline())</span><br><span class="line">tf.close()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;</span><br><span class="line">中国是个伟大的国家!</span><br></pre></td></tr></table></figure><p>二进制形式打开文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># f.txt文件保存:  &quot;中国是个伟大的国家!&quot;</span></span><br><span class="line">bf = <span class="built_in">open</span>(<span class="string">&quot;f.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(bf.readline())</span><br><span class="line">bf.close()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;</span><br><span class="line">b&#x27;\xd6\xd0\xb9\xfa\xca\xc7\xb8\xf6\xce\xb0\xb4\xf3\xb5\xc4\xb9\xfa\xbc\xd2\xa3\xa1&#x27;</span><br></pre></td></tr></table></figure><p>文件的打开：</p><p><img src="https://bu.dusays.com/2023/04/18/643ea0577ddad.png" alt="34-50.png"></p><p><img src="https://bu.dusays.com/2023/04/18/643ea0e849f50.png" alt="34-51.png" title="文件的打开模式"></p><p>文件的关闭：</p><p><img src="https://bu.dusays.com/2023/04/18/643ea1ca98324.png" alt="34-52.png"></p><p>文件内容的读取：</p><p><img src="https://bu.dusays.com/2023/04/18/643ea2a92777d.png" alt="34-53.png"></p><p>文件的全文本操作：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历全文本：方法一</span></span><br><span class="line"><span class="comment"># 一次读出，统一处理</span></span><br><span class="line">fname = <span class="built_in">input</span>(<span class="string">&quot;请输入要打开的文件名称:&quot;</span>)</span><br><span class="line">file = <span class="built_in">open</span>(fname,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">txt = file.read()</span><br><span class="line"><span class="comment"># 对全文txt字符串进行处理</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历全文本：方法二</span></span><br><span class="line"><span class="comment"># 按数量读出，逐步处理</span></span><br><span class="line">fname = <span class="built_in">input</span>(<span class="string">&quot;请输入要打开的文件名称:&quot;</span>)</span><br><span class="line">file = <span class="built_in">open</span>(fname,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">txt = file.read(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">while</span> txt != <span class="string">&quot;&quot;</span>:</span><br><span class="line">    <span class="comment">#对txt（长度为size的字符串）进行处理</span></span><br><span class="line">    txt = file.read(<span class="number">2</span>)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>文件的逐行操作：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逐行遍历文件：方法一</span></span><br><span class="line"><span class="comment"># 分行读出，分行处理</span></span><br><span class="line">fname = <span class="built_in">input</span>(<span class="string">&quot;请输入要打开的文件名称:&quot;</span>)</span><br><span class="line">file = <span class="built_in">open</span>(fname,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">line = file.readline().strip()</span><br><span class="line"><span class="keyword">while</span> (line):</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">    line = file.readline().strip()</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逐行遍历文件：方法二</span></span><br><span class="line"><span class="comment"># 一次读出，分行处理</span></span><br><span class="line">fname = <span class="built_in">input</span>(<span class="string">&quot;请输入要打开的文件名称:&quot;</span>)</span><br><span class="line">file = <span class="built_in">open</span>(fname,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">lines = file.readlines()       <span class="comment">#list</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逐行遍历文件：方法三</span></span><br><span class="line"><span class="comment"># 分行读入，逐行处理</span></span><br><span class="line">fname = <span class="built_in">input</span>(<span class="string">&quot;请输入要打开的文件名称:&quot;</span>)</span><br><span class="line">fo = <span class="built_in">open</span>(fname,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><p>数据的文件写入：</p><p><img src="https://bu.dusays.com/2023/04/18/643ea7fa845f3.png" alt="34-54.png"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>)</span><br><span class="line">ls = [<span class="string">&quot;中国&quot;</span>, <span class="string">&quot;法国&quot;</span>, <span class="string">&quot;美国&quot;</span>]</span><br><span class="line">fo.writelines(ls)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">fo.close()</span><br><span class="line"><span class="comment"># 该程序没有任何输出</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>)</span><br><span class="line">ls = [<span class="string">&quot;中国&quot;</span>, <span class="string">&quot;法国&quot;</span>, <span class="string">&quot;美国&quot;</span>]</span><br><span class="line">fo.writelines(ls)</span><br><span class="line">fo.seek(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><p>上面代码的输出结果：（打印信息和文件中内容一样，都没有换行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">中国法国美国</span><br></pre></td></tr></table></figure><p>【作业】 课程成绩统计2（从文本文件读入）</p><p>数据文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">23.5</span><br><span class="line">23</span><br><span class="line">432</span><br><span class="line">23</span><br><span class="line">45</span><br><span class="line">65</span><br><span class="line">78</span><br><span class="line">96</span><br><span class="line">100</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">-1</span><br><span class="line">23</span><br><span class="line">2</span><br><span class="line">87</span><br><span class="line">q</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scoresFromFile</span>():</span><br><span class="line">    nums = []</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;D:\mypycode\作业-课程成绩统计2\\thedata.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        line = line.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> line == <span class="string">&quot;q&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> nums</span><br><span class="line">        nums.append(<span class="built_in">eval</span>(line))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span>(<span class="built_in">isinstance</span>(nums[-<span class="number">1</span>], <span class="built_in">int</span>)) <span class="keyword">or</span> nums[-<span class="number">1</span>]&lt;<span class="number">0</span> <span class="keyword">or</span> nums[-<span class="number">1</span>]&gt;<span class="number">100</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;第&#123;&#125;行数据非法，将被略去&quot;</span>.<span class="built_in">format</span>(cnt))</span><br><span class="line">            <span class="keyword">del</span> nums[-<span class="number">1</span>]</span><br><span class="line">    nums.sort()</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mean</span>(<span class="params">numbers</span>):  <span class="comment"># 计算平均值</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> numbers:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    s = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">        s = s + num</span><br><span class="line">    <span class="keyword">return</span> s / <span class="built_in">len</span>(numbers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">abcde_label</span>(<span class="params">numbers</span>):  <span class="comment"># 打等级</span></span><br><span class="line">    label_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> score <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="keyword">if</span> score &gt;= <span class="number">90</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;优&quot;</span>] = label_dict.get(<span class="string">&quot;优&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> score &gt;= <span class="number">80</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;良&quot;</span>] = label_dict.get(<span class="string">&quot;良&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> score &gt;= <span class="number">70</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;中&quot;</span>] = label_dict.get(<span class="string">&quot;中&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> score &gt;= <span class="number">60</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;及格&quot;</span>] = label_dict.get(<span class="string">&quot;及格&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            label_dict[<span class="string">&quot;不及格&quot;</span>] = label_dict.get(<span class="string">&quot;不及格&quot;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> label_dict</span><br><span class="line"></span><br><span class="line">real_score = scoresFromFile()</span><br><span class="line"><span class="built_in">print</span>(real_score)</span><br><span class="line"><span class="built_in">print</span>(mean(real_score))</span><br><span class="line"><span class="built_in">print</span>(abcde_label(real_score))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第1行数据非法，将被略去</span><br><span class="line">第3行数据非法，将被略去</span><br><span class="line">第12行数据非法，将被略去</span><br><span class="line">[23, 23, 45, 65, 78, 96, 100, 1, 0, 23, 2, 87]</span><br><span class="line">45.25</span><br><span class="line">&#123;&#x27;不及格&#x27;: 7, &#x27;及格&#x27;: 1, &#x27;中&#x27;: 1, &#x27;优&#x27;: 2, &#x27;良&#x27;: 1&#125;</span><br></pre></td></tr></table></figure><p>【实例】 自动轨迹绘制</p><p>需求：根据脚本来绘制图形。数据给出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">300,0,144,1,0,0</span><br><span class="line">300,0,144,0,1,0</span><br><span class="line">300,0,144,0,0,1</span><br><span class="line">300,0,144,1,1,0</span><br><span class="line">300,0,108,0,1,1</span><br><span class="line">184,0,72,1,0,1</span><br><span class="line">184,0,72,0,0,0</span><br><span class="line">184,0,72,0,0,0</span><br><span class="line">184,0,72,0,0,0</span><br><span class="line">184,1,72,1,0,1</span><br><span class="line">184,1,72,0,0,0</span><br><span class="line">184,1,72,0,0,0</span><br><span class="line">184,1,72,0,0,0</span><br><span class="line">184,1,72,0,0,0</span><br><span class="line">184,1,720,0,0,0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/04/18/643eaf7da3cb0.png" alt="34-55" title="预期结果"></p><p><img src="https://bu.dusays.com/2023/04/18/643eb1d51ff35.png" alt="34-56.png" title="数据接口定义"></p><p>下面给出代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#AutoTraceDraw.py</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line">t.title(<span class="string">&#x27;自动轨迹绘制&#x27;</span>)</span><br><span class="line">t.setup(<span class="number">800</span>, <span class="number">600</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#数据读取</span></span><br><span class="line">datals = []</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;D:\mypycode\AutoTraceDrawData.txt&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    line = line.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    datals.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">eval</span>, line.split(<span class="string">&quot;,&quot;</span>))))</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment">#自动绘制</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(datals)):</span><br><span class="line">    t.pencolor(datals[i][<span class="number">3</span>],datals[i][<span class="number">4</span>],datals[i][<span class="number">5</span>])</span><br><span class="line">    t.fd(datals[i][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> datals[i][<span class="number">1</span>]:</span><br><span class="line">        t.right(datals[i][<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t.left(datals[i][<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">t.done()</span><br></pre></td></tr></table></figure><p>第 11、12 行的代码解释（ChatGPT）：</p><blockquote><p>这两行代码的作用是读取文件中的每一行数据，将其中的换行符（\n）替换为空字符串（””），然后将字符串按照逗号（,）分隔，将每个子字符串转换为相应的数据类型（比如整数、浮点数等），最后将转换后的数据存储到一个列表（datals）中。<br>具体来说，第一行代码使用<code>replace()</code>方法将字符串中的 \n 替换为空字符串 “”，这是因为在文件中每行数据的末尾通常会包含一个换行符。第二行代码使用<code>split()</code>方法将字符串按照逗号分隔，得到一个子字符串列表。然后，<code>map()</code>函数将列表中的每个子字符串转换为相应的数据类型，比如使用<code>eval()</code>函数将字符串转换为数值类型。最后，<code>list()</code>函数将转换后的数据列表转换为一个普通列表，并将其添加到 datals 列表中。</p></blockquote><p><code>filter(function，iterable)</code>：过滤，根据指定的函数对指定的可迭代对象进行过滤。</p><ul><li>参数：函数，可迭代对象<ul><li>对 iterable 中的每个元素判断是否符合特定条件，保留结果为真的元素，舍弃结果为假的元素</li><li>None：不调用任何函数，只对可迭代对象中的元素本身判断真假</li></ul></li><li>函数值：一个迭代器<ul><li>如果要转换为列表，可以使用<code>list()</code>来转换</li></ul></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;gradesintlist =[<span class="number">78</span>, <span class="number">98</span>, <span class="number">90</span>, <span class="number">87</span>]</span><br><span class="line">&gt;&gt;&gt;result=</span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x:x&gt;=<span class="number">80</span>,gradesintlist))</span><br><span class="line">[<span class="number">98</span>,<span class="number">90</span>,<span class="number">87</span>]</span><br></pre></td></tr></table></figure><p>高维数据：仅利用最基本的二元关系展示数据间的复杂结构。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;firstName&quot;</span> : <span class="string">&quot;Tian&quot;</span> ,</span><br><span class="line">   <span class="string">&quot;lastName&quot;</span>  : <span class="string">&quot;Song&quot;</span> ,</span><br><span class="line">   <span class="string">&quot;address&quot;</span>   : &#123;</span><br><span class="line">                   <span class="string">&quot;streetAddr&quot;</span> : <span class="string">&quot;中关村南大街5号&quot;</span> ,</span><br><span class="line">                   <span class="string">&quot;city&quot;</span>       : <span class="string">&quot;北京市&quot;</span> ,</span><br><span class="line">                   <span class="string">&quot;zipcode&quot;</span>    : <span class="string">&quot;100081&quot;</span> </span><br><span class="line">                 &#125; ,</span><br><span class="line">   <span class="string">&quot;professional&quot;</span> : [<span class="string">&quot;Computer Networking&quot;</span> , <span class="string">&quot;Security&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从空格分隔的文件中读入数据：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需读入的数据为：中国 美国 日本 德国 法国 英国 意大利</span></span><br><span class="line">txt = <span class="built_in">open</span>(fname).read()</span><br><span class="line">ls = txt.split()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls</span><br><span class="line">[<span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;日本&#x27;</span>, <span class="string">&#x27;德国&#x27;</span>, <span class="string">&#x27;法国&#x27;</span>, <span class="string">&#x27;英国&#x27;</span>, <span class="string">&#x27;意大利&#x27;</span>]</span><br></pre></td></tr></table></figure><p>从特殊符号$分隔的文件中读入数据：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需读入的数据为：中国$美国$日本$德国$法国$英国$意大利</span></span><br><span class="line">txt = <span class="built_in">open</span>(fname).read()</span><br><span class="line">ls = txt.split(<span class="string">&quot;$&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls</span><br><span class="line">[<span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;日本&#x27;</span>, <span class="string">&#x27;德国&#x27;</span>, <span class="string">&#x27;法国&#x27;</span>, <span class="string">&#x27;英国&#x27;</span>, <span class="string">&#x27;意大利&#x27;</span>]</span><br></pre></td></tr></table></figure><p>采用空格分隔方式将数据写入文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;日本&#x27;</span>]</span><br><span class="line">f = <span class="built_in">open</span>(fname, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27; &#x27;</span>.join(ls))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>采用特殊分隔方式将数据写入文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;日本&#x27;</span>]</span><br><span class="line">f = <span class="built_in">open</span>(fname, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27;$&#x27;</span>.join(ls))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>二维数据的表示（使用列表类型）：</p><ul><li>使用两层for循环遍历每个元素</li><li>外层列表中每个元素可以对应一行，也可以对应一列</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[  [<span class="number">3.1398</span>, <span class="number">3.1349</span>, <span class="number">3.1376</span>], </span><br><span class="line">   [<span class="number">3.1413</span>, <span class="number">3.1404</span>, <span class="number">3.1401</span>]  ]</span><br></pre></td></tr></table></figure><p>CSV数据存储格式（CSV：Comma-Separated Values）：</p><ul><li>国际通用的一二维数据存储格式，一般.csv扩展名</li><li>每行一个一维数据，采用逗号分隔，<strong>无空行</strong></li><li>Excel和一般编辑软件都可以读入或另存为csv文件</li><li>如果某个元素缺失，逗号仍要保留</li><li>二维数据的表头可以作为数据存储，也可以另行存储</li><li>逗号为英文半角逗号，<strong>逗号与数据之间无额外空格</strong></li></ul><p><img src="https://bu.dusays.com/2023/04/20/6440ee6ea347c.png" alt="34-57.png"></p><p>二维数据的存储：</p><ul><li>按行存或者按列存都可以，具体由程序决定</li><li>一般索引习惯：<code>ls[row][column]</code>，先行后列</li><li>根据一般习惯，外层列表每个元素是一行，按行存</li></ul><p>从CSV格式的文件中读入数据：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fo = <span class="built_in">open</span>(fname)</span><br><span class="line">ls = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    line = line.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    ls.append(line.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><p>将数据写入CSV格式的文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls = [[], [], []]    <span class="comment"># 二维列表</span></span><br><span class="line">f = <span class="built_in">open</span>(fname, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ls:</span><br><span class="line">    f.write(<span class="string">&#x27;,&#x27;</span>.join(item) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>二维数据的逐一处理（采用二层循环）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>], [<span class="number">5</span>,<span class="number">6</span>]] <span class="comment"># 二维列表</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> ls:</span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> row:</span><br><span class="line">         <span class="built_in">print</span>(column)</span><br></pre></td></tr></table></figure><h2 id="wordcloud、imageio及其他"><a href="#wordcloud、imageio及其他" class="headerlink" title="wordcloud、imageio及其他"></a>wordcloud、imageio及其他</h2><p>安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install wordcloud</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/04/20/644124b932fd5.png" alt="34-58.png" title="wordcloud库常规方法"></p><p>文本转为词云的过程：</p><ol><li>分隔: 以空格分隔单词</li><li>统计: 单词出现次数并过滤</li><li>字体: 根据统计配置字号</li><li>布局: 颜色环境尺寸</li></ol><p><img src="https://bu.dusays.com/2023/04/20/6441281f7f3b5.png" alt="34-59.png" title="配置对象参数"></p><p>英文例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line">txt = <span class="string">&quot;life is short, you need python&quot;</span></span><br><span class="line">w = wordcloud.WordCloud(background_color = <span class="string">&quot;white&quot;</span>)</span><br><span class="line">w.generate(txt)</span><br><span class="line">w.to_file(<span class="string">&quot;D:\mypycode\mywordcloud\\test1img.png&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://bu.dusays.com/2023/04/20/64412cc32f2eb.png" alt="34-60"></p><p>中文例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba </span><br><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line">txt = <span class="string">&quot;程序设计语言是计算机能够理解和\</span></span><br><span class="line"><span class="string">识别用户操作意图的一种交互体系，它按照\</span></span><br><span class="line"><span class="string">特定规则组织计算机指令，使计算机能够自\</span></span><br><span class="line"><span class="string">动进行各种运算处理。&quot;</span></span><br><span class="line">w = wordcloud.WordCloud( width=<span class="number">1000</span>,\</span><br><span class="line">    font_path=<span class="string">&quot;msyh.ttc&quot;</span>,height=<span class="number">700</span>)</span><br><span class="line">w.generate(<span class="string">&quot; &quot;</span>.join(jieba.lcut(txt)))</span><br><span class="line">w.to_file(<span class="string">&quot;D:\mypycode\mywordcloud\pywcloud.png&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://bu.dusays.com/2023/04/20/64412e98ebea2.png" alt="34-61.png"></p><p>【实例】 有形状的词云</p><p>代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line"><span class="keyword">from</span> imageio <span class="keyword">import</span> imread</span><br><span class="line">mk = imread(<span class="string">&quot;D:\mypycode\mywordcloud\guoba.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;D:\mypycode\\threekingdomscnt\\threekingdoms.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">t = f.read()</span><br><span class="line">f.close()</span><br><span class="line">ls = jieba.lcut(t)</span><br><span class="line">txt = <span class="string">&quot; &quot;</span>.join(ls)</span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">&#x27;!&quot;#——$%&amp;（。），()*+,-./:;；&lt;：《》、=&gt;?？@[\\]^_‘&#123;|&#125;~！“”&#x27;</span>:</span><br><span class="line">    txt = txt.replace(ch, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">w = wordcloud.WordCloud(font_path=<span class="string">&quot;msyh.ttc&quot;</span>, mask=mk, width=<span class="number">1000</span>, height=<span class="number">700</span>, background_color=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">w.generate(txt)</span><br><span class="line">w.to_file(<span class="string">&quot;D:\mypycode\mywordcloud\\test3img.png&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果（<a href="https://loveofpeach.github.io/posts/47c25c56.html">这个图形是我之前用 Python 代码生成的</a>）：</p><p><img src="https://bu.dusays.com/2023/04/20/644144525c992.png" alt="34-62.png"></p><p>在上面的例子中，用到了<code>imageio</code>。下面简单介绍之。</p><p>安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install imageio</span><br></pre></td></tr></table></figure><p>官方文档：<a href="https://imageio.readthedocs.io/en/stable/examples.html">https://imageio.readthedocs.io/en/stable/examples.html</a></p><p>图片的保存：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> imageio <span class="keyword">import</span> imread,imsave</span><br><span class="line"></span><br><span class="line">im = imread(<span class="string">&#x27;D:\mypycode\imageiostuff\Lumine.png&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(im.shape)</span><br><span class="line">imsave(<span class="string">&#x27;D:\mypycode\imageiostuff\Lumine_copy.png&#x27;</span>,im)</span><br></pre></td></tr></table></figure><p>输出结果1（打印信息，在terminal中显示。warning已略去）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1910, 987, 4)</span><br></pre></td></tr></table></figure><p>输出结果2（在对应目录下可以找到 Lumine_copy.png）：</p><p><img src="https://bu.dusays.com/2023/04/20/64414dfe3c9e2.png" alt="34-63.png" title="Lumine_copy.png"></p><p><code>shape</code>里的1910,987，指的是图片的像素，高度是1910像素，宽度是987像素。</p><p><code>shape</code>里还剩下一个4，指的是颜色通道。</p><p>png 图片比 jpg 多了一个 Alpha 通道， 一个 RGB 颜色模型的真彩图形，用由红、绿、蓝三个色彩信息通道合成的，每个通道用了8位色彩深度，共计24位，包含了所有彩色信息。为实现图形的透明效果，png 图片采取在图形文件的处理与存储中附加上另一个8位信息的方法，这个附加的代表图形中各个素点透明度的通道信息就被叫做 Alpha 通道。</p><p>这里的<code>im</code>是<code>numpy.ndarray</code>，即上面的代码，我们使用 imageio 把一个图片转换成一个多维数组。把一张图片，转换为了数字格式。</p><p>以下只是我个人的理解，好像有那么一点道理，反正能说服我自己。不保证正确（不如说如果正确那还真是巧了）：</p><p><img src="https://bu.dusays.com/2023/04/21/64424e8256524.png" alt="34-63dot5.png"></p><p>图片的修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> imageio <span class="keyword">import</span> imread,imsave,imwrite</span><br><span class="line"></span><br><span class="line">im = imread(<span class="string">&#x27;D:\mypycode\imageiostuff\Lumine.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">im_r = im.copy()</span><br><span class="line">im_g = im.copy()</span><br><span class="line">im_b = im.copy()</span><br><span class="line">im_a = im.copy()</span><br><span class="line"></span><br><span class="line">im_r[:,:,<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">im_r[:,:,<span class="number">2</span>] = <span class="number">0</span></span><br><span class="line">imsave(<span class="string">&#x27;D:\mypycode\imageiostuff\Lumine_r.png&#x27;</span>,im_r)</span><br><span class="line"></span><br><span class="line">im_g[:,:,<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">im_g[:,:,<span class="number">2</span>] = <span class="number">0</span></span><br><span class="line">imsave(<span class="string">&#x27;D:\mypycode\imageiostuff\Lumine_g.png&#x27;</span>,im_g)</span><br><span class="line"></span><br><span class="line">im_b[:,:,<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">im_b[:,:,<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">imwrite(<span class="string">&#x27;D:\mypycode\imageiostuff\Lumine_b.png&#x27;</span>,im_b)</span><br><span class="line"><span class="comment"># imwrite 和 imsave 似乎效果一样</span></span><br><span class="line"></span><br><span class="line">im_a[:,:,<span class="number">3</span>] = <span class="number">0.5</span>*<span class="number">255</span>  <span class="comment"># 将 alpha 通道值设置为半透明</span></span><br><span class="line">imsave(<span class="string">&#x27;D:\mypycode\imageiostuff\Lumine_a.png&#x27;</span>,im_a)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/04/20/64415e9b07a2e.png" alt="34-64.png" title="上面代码的输出结果"></p><p>注意：将一个图像保存为具有透明度的 PNG 格式时，必须将 alpha 通道的值归一化为<code>[0, 255]</code>范围内。因此，将一个 alpha 通道的值设置为 0.5 并不会生效。需要将其乘以 255，以将其值转换为<code>[0, 255]</code>范围中。</p><p>图片压缩。例如，我们需要压缩如下的图片：</p><p><img src="https://bu.dusays.com/2023/04/21/64422102087e2.jpeg" alt="34-65.jpeg" title="LLPaimon.jpeg"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> imageio <span class="keyword">import</span> imread,imwrite</span><br><span class="line"></span><br><span class="line">im = imread(<span class="string">&#x27;D:\mypycode\imageiostuff\LLPaimon.jpeg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">imwrite(<span class="string">&#x27;D:\mypycode\imageiostuff\LLPaimon_25.jpeg&#x27;</span>,im,quality=<span class="number">25</span>)</span><br><span class="line">imwrite(<span class="string">&#x27;D:\mypycode\imageiostuff\LLPaimon_50.jpeg&#x27;</span>,im,quality=<span class="number">50</span>)</span><br><span class="line">imwrite(<span class="string">&#x27;D:\mypycode\imageiostuff\LLPaimon_75.jpeg&#x27;</span>,im,quality=<span class="number">75</span>)</span><br><span class="line">imwrite(<span class="string">&#x27;D:\mypycode\imageiostuff\LLPaimon_100.jpeg&#x27;</span>,im,quality=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/04/21/644224a997399.png" alt="34-66.png" title="上面代码的输出结果"></p><p>注意：在上面的例子中，我们压缩了 jpg/jpeg 文件，但若要压缩 png 文件，不能依葫芦画瓢简单地改一下文件名就行（至少目前的 imageio 版本是这样）。可能相关的讨论：</p><p><a href="https://stackoverflow.com/questions/35859140/remove-transparency-alpha-from-any-image-using-pil">https://stackoverflow.com/questions/35859140/remove-transparency-alpha-from-any-image-using-pil</a></p><p>将多个PNG图片转为GIF。代码（改编自<a href="https://cloud.tencent.com/developer/article/1468285">这里</a>）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_gif</span>(<span class="params">source, name, myduration</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成gif的函数，原始图片仅支持png</span></span><br><span class="line"><span class="string">    source: 为png图片列表（排好序）</span></span><br><span class="line"><span class="string">    name: 生成的文件名称</span></span><br><span class="line"><span class="string">    myduration: 每张图片之间的时间间隔</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    frames = []  <span class="comment"># 读入缓冲区</span></span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> source:</span><br><span class="line">        frames.append(imageio.imread(img))</span><br><span class="line">    imageio.mimsave(name, frames, <span class="string">&#x27;GIF&#x27;</span>, duration=myduration)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;done&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">or_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    or_path: 目标的文件夹</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    path = os.chdir(or_path)</span><br><span class="line">    pic_list = os.listdir()</span><br><span class="line">    gif_name = <span class="built_in">input</span>(<span class="string">&quot;Name the target file (end with .gif) :&quot;</span>)</span><br><span class="line">    duration_time = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;Give the duration_time (0.5 recommended) :&quot;</span>))</span><br><span class="line">    create_gif(pic_list, gif_name, duration_time)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parm_list = sys.argv</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(parm_list) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Please enter the folder you want to process !&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        main(parm_list[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>考虑如下图片：</p><p><img src="https://bu.dusays.com/2023/04/21/644262aa55b7b.png" alt="34-67.png"></p><p>运行上面的代码：</p><p><img src="https://bu.dusays.com/2023/04/21/644262aa39cd8.png" alt="34-68.png"></p><p>最终效果：</p><p><img src="https://bu.dusays.com/2023/04/21/644262ac167b5.gif" alt="34-69.gif" title="keqing_e.gif"></p><h2 id="第三方库与计算生态概览"><a href="#第三方库与计算生态概览" class="headerlink" title="第三方库与计算生态概览"></a>第三方库与计算生态概览</h2><h3 id="Python第三方库安装"><a href="#Python第三方库安装" class="headerlink" title="Python第三方库安装"></a>Python第三方库安装</h3><p>pip 安装方法：略。</p><p>文件安装方法（有些第三方库用 pip 可以下载，但无法安装？）：</p><ul><li>pip下载后可得到可执行文件(pip)、源代码</li><li>源代码则需要编译再安装</li><li>如果操作系统没有编译环境，虽能下载但不能安装</li><li>可以直接下载编译后的版本用于安装吗？</li></ul><p><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p><p>实例：安装 wordcloud 库</p><ul><li>步骤1：在UCI页面上搜索wordcloud</li><li>步骤2：下载对应版本的文件放入pip路径</li><li>步骤3：使用pip install &lt;文件名&gt;安装</li></ul><p>集成安装方法（结合特定 Python 开发工具的批量安装）：</p><ul><li>Anaconda 网址：<a href="https://www.continuum.io">https://www.continuum.io</a></li><li>支持近800个第三方库</li><li>包含多个主流工具</li><li>适合数据计算领域开发</li></ul><h3 id="Python社区"><a href="#Python社区" class="headerlink" title="Python社区"></a>Python社区</h3><p>Python社区：</p><ul><li>13万个第三方库 <a href="https://pypi.org/">https://pypi.org/</a></li></ul><p>实例：开发与区块链相关的程序</p><ul><li>第1步：在 pypi.org 搜索 blockchain</li><li>第2步：挑选适合开发目标的第三方库作为基础</li><li>第3步：完成自己需要的功能</li></ul><h3 id="程序设计模式"><a href="#程序设计模式" class="headerlink" title="程序设计模式"></a>程序设计模式</h3><p><img src="https://bu.dusays.com/2023/04/28/644b8e1713b7e.png" alt="34-69.png" title="自顶向下"></p><p>模块化设计：</p><ul><li>通过函数或对象封装将程序划分为模块及模块间的表达</li><li>具体包括：主程序、子程序和子程序间关系</li><li>分而治之：一种分而治之、分层抽象、体系化的设计思想</li><li>紧耦合：两个部分之间交流很多，无法独立存在</li><li>松耦合：两个部分之间交流较少，可以独立存在</li><li>模块内部紧耦合、模块之间松耦合</li></ul><p>配置化设计：</p><ul><li>引擎+配置：程序执行和配置分离，将可选参数配置化</li><li>将程序开发变成配置文件编写，扩展功能而不修改程序</li><li>关键在于接口设计，清晰明了、灵活可扩展</li></ul><h3 id="Python的第三方库"><a href="#Python的第三方库" class="headerlink" title="Python的第三方库"></a>Python的第三方库</h3><h4 id="从数据处理到人工智能"><a href="#从数据处理到人工智能" class="headerlink" title="从数据处理到人工智能"></a>从数据处理到人工智能</h4><p><strong>Numpy</strong>：表达N维数组的最基础库</p><p><strong>Pandas</strong>：Python 数据分析高层次应用库</p><ul><li>提供了简单易用的数据结构和数据分析工具</li><li>理解数据类型与索引的关系，操作索引即操作数据</li><li>Python最主要的数据分析功能库，基于Numpy开发</li></ul><p><strong>SciPy</strong>：数学、科学和工程计算功能库</p><ul><li>提供了一批数学算法及工程数据运算功能</li><li>类似Matlab，可用于如傅里叶变换、信号处理等应用</li><li>Python最主要的科学计算功能库，基于Numpy开发</li></ul><p><strong>Matplotlib</strong>：高质量的二维数据可视化功能库</p><ul><li>提供了超过100种数据可视化展示效果</li><li>通过matplotlib.pyplot子库调用各可视化效果</li><li>Python最主要的数据可视化功能库，基于Numpy开发</li></ul><p><img src="https://bu.dusays.com/2023/04/28/644b930eae457.png" alt="34-70.png"></p><p><strong>Seaborn</strong>：统计类数据可视化功能库</p><ul><li>提供了一批高层次的统计类数据可视化展示效果</li><li>主要展示数据间分布、分类和线性关系等内容</li><li>基于Matplotlib开发，支持Numpy和Pandas</li></ul><p><strong>Mayavi</strong>：三维科学数据可视化功能库</p><ul><li>提供了一批简单易用的3D科学计算数据可视化展示效果</li><li>目前版本是Mayavi2，三维可视化最主要的第三方库</li><li>支持Numpy、TVTK、Traits、Envisage等第三方库</li></ul><p><img src="https://bu.dusays.com/2023/04/28/644b93c0f01a8.png" alt="34-71.png"></p><p><strong>PyPDF2</strong>：用来处理pdf文件的工具集</p><ul><li>提供了一批处理PDF文件的计算功能</li><li>支持获取信息、分隔/整合文件、加密解密等</li><li>完全Python语言实现，不需要额外依赖，功能稳定</li><li><a href="http://mstamy2.github.io/PyPDF2">http://mstamy2.github.io/PyPDF2</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyPDF2 <span class="keyword">import</span> PdfFileReader, PdfFileMerger</span><br><span class="line">merger = PdfFileMerger()</span><br><span class="line">input1 = <span class="built_in">open</span>(<span class="string">&quot;document1.pdf&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">input2 = <span class="built_in">open</span>(<span class="string">&quot;document2.pdf&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">merger.append(fileobj = input1, pages = (<span class="number">0</span>,<span class="number">3</span>))</span><br><span class="line">merger.merge(position = <span class="number">2</span>, fileobj = input2, pages = (<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">output = <span class="built_in">open</span>(<span class="string">&quot;document-output.pdf&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">merger.write(output)</span><br></pre></td></tr></table></figure><p><strong>NLTK</strong>：自然语言文本处理第三方库</p><ul><li>提供了一批简单易用的自然语言文本处理功能</li><li>支持语言文本分类、标记、语法句法、语义分析等</li><li>最优秀的Python自然语言处理库</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> treebank</span><br><span class="line">t = treebank.parsed_sents(<span class="string">&#x27;wsj_0001.mrg&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">t.draw()</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/04/28/644b96cc7854f.png" alt="34-72.png"></p><p><strong>Python-docx</strong>：创建或更新Microsoft Word文件的第三方库</p><ul><li>提供创建或更新.doc .docx等文件的计算功能</li><li>增加并配置段落、图片、表格、文字等，功能全面</li><li><a href="http://python-docx.readthedocs.io/en/latest/index.html">http://python-docx.readthedocs.io/en/latest/index.html</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line">document = Document()</span><br><span class="line">document.add_heading(<span class="string">&#x27;Document Title&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">p = document.add_paragraph(<span class="string">&#x27;A plain paragraph having some &#x27;</span>)</span><br><span class="line">document.add_page_break()</span><br><span class="line">document.save(<span class="string">&#x27;demo.docx&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>Scikit-learn</strong>：机器学习方法工具集</p><ul><li>提供一批统一化的机器学习方法功能接口</li><li>提供聚类、分类、回归、强化学习等计算功能</li><li>机器学习最基本且最优秀的Python第三方库</li></ul><p><strong>TensorFlow</strong>：AlphaGo背后的机器学习计算框架</p><ul><li>谷歌公司推动的开源机器学习框架</li><li>将数据流图作为基础，图节点代表运算，边代表张量</li><li>应用机器学习方法的一种方式，支撑谷歌人工智能应用</li><li><a href="https://www.tensorflow.org/">https://www.tensorflow.org/</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line">res = sess.run(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;result:&#x27;</span>, res)</span><br></pre></td></tr></table></figure><p><strong>MXNet</strong>：基于神经网络的深度学习计算框架</p><ul><li>提供可扩展的神经网络及深度学习计算功能</li><li>可用于自动驾驶、机器翻译、语音识别等众多领域</li><li>Python最重要的深度学习计算框架</li><li><a href="https://mxnet.incubator.apache.org/">https://mxnet.incubator.apache.org/</a></li></ul><h4 id="从Web解析到网络空间"><a href="#从Web解析到网络空间" class="headerlink" title="从Web解析到网络空间"></a>从Web解析到网络空间</h4><p><strong>Requests</strong>: 最友好的网络爬虫功能库</p><ul><li>提供了简单易用的类HTTP协议网络爬虫功能</li><li>支持连接池、SSL、Cookies、HTTP(S)代理等</li><li>Python最主要的页面级网络爬虫功能库</li><li><a href="http://www.python-requests.org/">http://www.python-requests.org/</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://api.github.com/user&#x27;</span>,\</span><br><span class="line">                 auth=(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>))</span><br><span class="line">r.status_code</span><br><span class="line">r.headers[<span class="string">&#x27;content-type&#x27;</span>]</span><br><span class="line">r.encoding</span><br><span class="line">r.text</span><br></pre></td></tr></table></figure><p><strong>Scrapy</strong>: 优秀的网络爬虫框架</p><ul><li>提供了构建网络爬虫系统的框架功能，功能半成品</li><li>支持批量和定时网页爬取、提供数据处理流程等</li><li>Python最主要且最专业的网络爬虫框架</li><li><a href="https://scrapy.org">https://scrapy.org</a></li></ul><p><strong>pyspider</strong>：强大的Web页面爬取系统</p><ul><li>提供了完整的网页爬取系统构建功能</li><li>支持数据库后端、消息队列、优先级、分布式架构等</li><li>Python重要的网络爬虫类第三方库</li><li><a href="http://docs.pyspider.org">http://docs.pyspider.org</a></li></ul><p><strong>Beautiful Soup</strong>：HTML和XML的解析库</p><ul><li>提供了解析HTML和XML等Web信息的功能</li><li>又名beautifulsoup4或bs4，可以加载多种解析引擎</li><li>常与网络爬虫库搭配使用，如Scrapy、requests等</li><li><a href="https://www.crummy.com/software/BeautifulSoup/bs4">https://www.crummy.com/software/BeautifulSoup/bs4</a></li></ul><p><img src="https://bu.dusays.com/2023/04/28/644ba8fac1da8.png" alt="34-73.png"></p><p><strong>Re</strong>：正则表达式解析和处理功能库</p><ul><li>提供了定义和解析正则表达式的一批通用功能</li><li>可用于各类场景，包括定点的Web信息提取</li><li>Python最主要的标准库之一，无需安装</li><li><a href="https://docs.python.org/3.6/library/re.html">https://docs.python.org/3.6/library/re.html</a></li></ul><p><strong>Python-Goose</strong>：提取文章类型Web页面的功能库</p><ul><li>提供了对Web页面中文章信息/视频等元数据的提取功能</li><li>针对特定类型Web页面，应用覆盖面较广</li><li>Python最主要的Web信息提取库</li><li><a href="https://github.com/grangier/python-goose">https://github.com/grangier/python-goose</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> goose <span class="keyword">import</span> Goose</span><br><span class="line">url = <span class="string">&#x27;http://www.elmundo.es/elmundo/2012/10/28/espana/1351388909.html&#x27;</span></span><br><span class="line">g = Goose(&#123;<span class="string">&#x27;use_meta_language&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;target_language&#x27;</span>:<span class="string">&#x27;es&#x27;</span>&#125;)</span><br><span class="line">article = g.extract(url=url)</span><br><span class="line">article.cleaned_text[:<span class="number">150</span>]</span><br></pre></td></tr></table></figure><p><strong>Django</strong>：最流行的Web应用框架</p><ul><li>提供了构建Web系统的基本应用框架</li><li>MTV模式：模型(model)、模板(Template)、视图(Views)</li><li>Python最重要的Web应用框架，略微复杂的应用框架</li><li><a href="https://www.djangoproject.com">https://www.djangoproject.com</a></li></ul><p><strong>Pyramid</strong>：规模适中的Web应用框架</p><ul><li>提供了简单方便构建Web系统的应用框架</li><li>不大不小，规模适中，适合快速构建并适度扩展类应用</li><li>Python产品级Web应用框架，起步简单可扩展性好</li><li><a href="https://trypyramid.com/">https://trypyramid.com/</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10行左右Hello Word程序</span></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"><span class="keyword">from</span> pyramid.config <span class="keyword">import</span> Configurator</span><br><span class="line"><span class="keyword">from</span> pyramid.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> Response(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> Configurator() <span class="keyword">as</span> config:</span><br><span class="line">        config.add_route(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        config.add_view(hello_world, route_name=<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">        app = config.make_wsgi_app()</span><br><span class="line">    server = make_server(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">6543</span>, app)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><p><strong>Flask</strong>：Web应用开发微框架</p><ul><li>提供了最简单构建Web系统的应用框架</li><li>特点是：简单、规模小、快速</li><li>Django &gt; Pyramid &gt; Flask</li><li><a href="http://flask.pocoo.org">http://flask.pocoo.org</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>WeRoBot</strong>：微信公众号开发框架</p><ul><li>提供了解析微信服务器消息及反馈消息的功能</li><li>建立微信机器人的重要技术手段</li><li><a href="https://github.com/offu/WeRoBot">https://github.com/offu/WeRoBot</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对微信每个消息反馈一个Hello World</span></span><br><span class="line"><span class="keyword">import</span> werobot</span><br><span class="line">robot = werobot.WeRoBot(token=<span class="string">&#x27;tokenhere&#x27;</span>)</span><br><span class="line"><span class="meta">@robot.handler</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>aip</strong>：百度AI开放平台接口</p><ul><li>提供了访问百度AI服务的Python功能接口</li><li>语音、人脸、OCR、NLP、知识图谱、图像搜索等领域</li><li>Python百度AI应用的最主要方式</li><li><a href="https://github.com/Baidu-AIP/python-sdk">https://github.com/Baidu-AIP/python-sdk</a></li></ul><p><strong>MyQR</strong>：二维码生成第三方库</p><ul><li>提供了生成二维码的系列功能</li><li>基本二维码、艺术二维码和动态二维码</li><li><a href="https://github.com/sylnsfar/qrcode">https://github.com/sylnsfar/qrcode</a></li></ul><h4 id="从人机交互到艺术设计"><a href="#从人机交互到艺术设计" class="headerlink" title="从人机交互到艺术设计"></a>从人机交互到艺术设计</h4><p><strong>PyQt5</strong>：Qt开发框架的Python接口</p><ul><li>提供了创建Qt5程序的Python API接口</li><li>Qt是非常成熟的跨平台桌面应用开发系统，完备GUI</li><li>推荐的Python GUI开发第三方库</li><li><a href="https://www.riverbankcomputing.com/software/pyqt">https://www.riverbankcomputing.com/software/pyqt</a></li></ul><p><strong>wxPython</strong>：跨平台GUI开发框架</p><ul><li>提供了专用于Python的跨平台GUI开发框架</li><li><a href="https://www.wxpython.org">https://www.wxpython.org</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line">app = wx.App(<span class="literal">False</span>)</span><br><span class="line">frame = wx.Frame(<span class="literal">None</span>, wx.ID_ANY, <span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">frame.Show(<span class="literal">True</span>)</span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><p><strong>PyGObject</strong>：使用GTK+开发GUI的功能库</p><ul><li>提供了整合GTK+、WebKitGTK+等库的功能</li><li>GTK+：跨平台的一种用户图形界面GUI框架</li><li>实例：Anaconda采用该库构建GUI</li><li><a href="https://pygobject.readthedocs.io">https://pygobject.readthedocs.io</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gi</span><br><span class="line">gi.require_version(<span class="string">&quot;Gtk&quot;</span>, <span class="string">&quot;3.0&quot;</span>)</span><br><span class="line"><span class="keyword">from</span> gi.repository <span class="keyword">import</span> Gtk</span><br><span class="line">window = Gtk.Window(title=<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">window.show()</span><br><span class="line">window.connect(<span class="string">&quot;destroy&quot;</span>, Gtk.main_quit)</span><br><span class="line">Gtk.main()</span><br></pre></td></tr></table></figure><p><strong>PyGame</strong>：简单的游戏开发功能库</p><ul><li>提供了基于SDL的简单游戏开发功能及实现引擎</li><li>理解游戏对外部输入的响应机制及角色构建和交互机制</li><li>Python游戏入门最主要的第三方库</li><li><a href="http://www.pygame.org">http://www.pygame.org</a></li></ul><p><strong>Panda3D</strong>：开源、跨平台的3D渲染和游戏开发库</p><ul><li>一个3D游戏引擎，提供Python和C++两种接口</li><li>支持很多先进特性：法线贴图、光泽贴图、卡通渲染等</li><li>由迪士尼和卡尼基梅隆大学共同开发</li><li><a href="http://www.panda3d.org">http://www.panda3d.org</a></li></ul><p><strong>cocos2d</strong>：构建2D游戏和图形界面交互式应用的框架</p><ul><li>提供了基于OpenGL的游戏开发图形渲染功能</li><li>支持GPU加速，采用树形结构分层管理游戏对象类型</li><li>适用于2D专业级游戏开发</li><li><a href="http://python.cocos2d.org/">http://python.cocos2d.org/</a></li></ul><p><strong>VR Zero</strong>：在树莓派上开发VR应用的Python库</p><ul><li>提供大量与VR开发相关的功能</li><li>针对树莓派的VR开发库，支持设备小型化，配置简单化</li><li>非常适合初学者实践VR开发及应用</li><li><a href="https://github.com/WayneKeenan/python-vrzero">https://github.com/WayneKeenan/python-vrzero</a></li></ul><p><strong>pyovr</strong>：Oculus Rift的Python开发接口</p><ul><li>针对Oculus VR设备的Python开发库</li><li>基于成熟的VR设备，提供全套文档，工业级应用设备</li><li>Python+虚拟现实领域探索的一种思路</li><li><a href="https://github.com/cmbruns/pyovr">https://github.com/cmbruns/pyovr</a></li></ul><p><strong>Vizard</strong>：基于Python的通用VR开发引擎</p><ul><li>专业的企业级虚拟现实开发引擎</li><li>提供详细的官方文档</li><li>支持多种主流的VR硬件设备，具有一定通用性</li><li><a href="http://www.worldviz.com/vizard-virtual-reality-software">http://www.worldviz.com/vizard-virtual-reality-software</a></li></ul><p><strong>Quads</strong>：迭代的艺术</p><ul><li>对图片进行四分迭代，形成像素风</li><li>可以生成动图或静图图像</li><li>简单易用，具有很高展示度</li><li><a href="https://github.com/fogleman/Quads">https://github.com/fogleman/Quads</a></li></ul><p><strong>ascii_art</strong>：ASCII艺术库</p><ul><li>将普通图片转为ASCII艺术风格</li><li>输出可以是纯文本或彩色文本</li><li>可采用图片格式输出</li><li><a href="https://github.com/jontonsoup4/ascii_art">https://github.com/jontonsoup4/ascii_art</a></li></ul><p><img src="https://bu.dusays.com/2023/04/28/644bb4019cb8c.png" alt="34-74.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;f&lt;/code&gt;输入“实例”以搜索样例代码。&lt;/p&gt;
&lt;h2 id=&quot;Python-课程概述&quot;&gt;&lt;a href=&quot;#Python-课程概述&quot; class=&quot;headerlink&quot; title=&quot;Python 课程概述&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="笔记" scheme="https://loveofpeach.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Python" scheme="https://loveofpeach.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>离散数学笔记</title>
    <link href="https://loveofpeach.github.io/posts/de63d40a.html"/>
    <id>https://loveofpeach.github.io/posts/de63d40a.html</id>
    <published>2023-03-03T02:16:02.000Z</published>
    <updated>2023-08-19T15:57:52.087Z</updated>
    
    <content type="html"><![CDATA[<p>先贴作业，笔记在后面。</p><h2 id="离散作业-1"><a href="#离散作业-1" class="headerlink" title="离散作业 1"></a>离散作业 1</h2><p><img src="https://bu.dusays.com/2023/03/18/6415bbb5ded66.jpg" alt="离散作业1-1.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bbb60d6a3.jpg" alt="离散作业1-2.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bbb61e3ab.jpg" alt="离散作业1-3.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bbb629498.jpg" alt="离散作业1-4.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bbb62ae6b.jpg" alt="离散作业1-5.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bbb622e60.jpg" alt="离散作业1-6.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bbb60d82a.jpg" alt="离散作业1-7.jpg"></p><h2 id="离散作业-2"><a href="#离散作业-2" class="headerlink" title="离散作业 2"></a>离散作业 2</h2><p><img src="https://bu.dusays.com/2023/03/18/6415bf98970ea.jpg" alt="离散作业2-1.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bc6f17645.jpg" alt="离散作业2-2.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bc6f0f3ad.jpg" alt="离散作业2-3.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bc6f31276.jpg" alt="离散作业2-4.jpg"></p><p><img src="https://bu.dusays.com/2023/03/18/6415bc6f32e07.jpg" alt="离散作业2-5.jpg"></p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>Pure love but limited.</p><p>博主的分析思路：（有点民科的感觉有木有OvO）</p><p><img src="https://bu.dusays.com/2023/03/22/641a87e0913e6.jpg" alt="33-1.jpg"></p><p><img src="https://bu.dusays.com/2023/03/22/641a89929c2ba.jpg" alt="33-2.jpg"></p><p>上面这种思路或许可以给出构造解。</p><p><strong>注意：证明有误。在修了，目前有点思路。</strong></p><p>老师的解答：</p><p>设有 $m$ 个小伙 $b_1,b_2,\cdots ,b_m$ ，有 $n$ 个姑娘 $g_1,g_2,\cdots ,g_n$. 设和第 $i$ 个小伙 $b_i$ 跳过舞的姑娘的集合为 $G_i$ ，其中 $i=1,2,\cdots ,m$. </p><p>对 $G_1,G_2,\cdots ,G_m$ 有两种情况：</p><p>$\mathcal{A}:$</p><p>存在 $1\leqslant i&lt;j\leqslant m$ ，使得 $G_i\nsubseteq G_j$ 且 $G_j\nsubseteq G_i$ .</p><p>于是存在 $g_k\in G_i$ 但 $g_k\notin G_j$ ；存在 $g_l\in G_j$ 但 $g_l\notin G_i$ .</p><p>这样对于小伙 $b_i,b_j$ 和姑娘 $g_k,g_l$ 结论成立 .</p><p>$\mathcal{B}:$</p><p>对任意 $1\leqslant i&lt;j\leqslant m$ ，要么 $G_i\subseteq G_j$ ，要么 $G_j\subseteq G_i$ .</p><p>于是可以按照 $\subseteq$ 排序：</p><script type="math/tex; mode=display">G_{(1)}\subseteq G_{(2)}\subseteq \cdots \subseteq G_{(m)}\subset \{g_1,g_2,\cdots ,g_n\}</script><p>这与题设矛盾。</p><p>综上，结论得证。</p><h2 id="离散作业-3"><a href="#离散作业-3" class="headerlink" title="离散作业 3"></a>离散作业 3</h2><p><img src="https://sway.office.com/s/z5mcBNnQTQa3XoNi/images/c_UYsLcNPqtSpT" alt="离散作业3-1.jpg"></p><p><img src="https://bu.dusays.com/2023/04/23/6444f22f9883e.jpg" alt="离散作业3-2.jpg"></p><p><img src="https://bu.dusays.com/2023/04/23/6444f22fb79af.jpg" alt="离散作业3-3.jpg"></p><p><img src="https://bu.dusays.com/2023/04/23/6444f22fb8bb4.jpg" alt="离散作业3-4.jpg"></p><p><img src="https://bu.dusays.com/2023/04/23/6444f22fc3eb6.jpg" alt="离散作业3-5.jpg"></p><p><img src="https://bu.dusays.com/2023/04/23/6444f22fb0e0a.jpg" alt="离散作业3-6.jpg"></p><p><img src="https://bu.dusays.com/2023/04/23/6444f22fb60a9.jpg" alt="离散作业3-7.jpg"></p><p><img src="https://bu.dusays.com/2023/04/23/6444f22fba0f3.jpg" alt="离散作业3-8.jpg"></p><p><img src="https://bu.dusays.com/2023/04/23/6444f22fb2005.jpg" alt="离散作业3-9.jpg"></p><p><img src="https://bu.dusays.com/2023/04/23/6444f46978bf4.jpg" alt="离散作业3-10.jpg"></p><h2 id="离散作业-4"><a href="#离散作业-4" class="headerlink" title="离散作业 4"></a>离散作业 4</h2><p><img src="https://bu.dusays.com/2023/05/19/64678d33d5f88.jpg" alt="离散作业4-1.jpg"></p><p><img src="https://bu.dusays.com/2023/05/19/64678d33d3db0.jpg" alt="离散作业4-2.jpg"></p><p><img src="https://bu.dusays.com/2023/05/19/64678d33d33de.jpg" alt="离散作业4-3.jpg"></p><p><img src="https://bu.dusays.com/2023/05/19/64678d33adb33.jpg" alt="离散作业4-4.jpg"></p><p><img src="https://bu.dusays.com/2023/05/19/64678d33da38e.jpg" alt="离散作业4-5.jpg"></p><p><img src="https://bu.dusays.com/2023/05/19/64678d33cd9e9.jpg" alt="离散作业4-6.jpg"></p><p><img src="https://bu.dusays.com/2023/05/19/64678d33cb730.jpg" alt="离散作业4-7.jpg"></p><h2 id="离散作业-5"><a href="#离散作业-5" class="headerlink" title="离散作业 5"></a>离散作业 5</h2><p><img src="https://sway.office.com/s/eh3ChgaA3F5nLkWe/images/tJUFjF0PJfYhX8" alt="离散作业5-1.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648348d2da7f0.jpg" alt="离散作业5-2.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648348d2da9fc.jpg" alt="离散作业5-3.jpg"></p><p><img src="https://sway.office.com/s/JH0VebJZPXo1Gbga/images/ESvLfP9UzH4h1-" alt="离散作业5-4.jpg"></p><h2 id="命题逻辑"><a href="#命题逻辑" class="headerlink" title="命题逻辑"></a>命题逻辑</h2><p><img src="https://bu.dusays.com/2023/04/14/643914864b51a.jpg" alt="离散数学（上）-01.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643914870c603.jpg" alt="离散数学（上）-02.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391486ccf15.jpg" alt="离散数学（上）-03.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391486bdc7e.jpg" alt="离散数学（上）-04.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391486e3b61.jpg" alt="离散数学（上）-05.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391487212b8.jpg" alt="离散数学（上）-06.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643914870c2d2.jpg" alt="离散数学（上）-07.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/6439148717542.jpg" alt="离散数学（上）-08.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643914871e9e0.jpg" alt="离散数学（上）-09.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643914872e21c.jpg" alt="离散数学（上）-10.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391694766e5.jpg" alt="离散数学（上）-11.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643916949cb46.jpg" alt="离散数学（上）-12.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391694827b5.jpg" alt="离散数学（上）-13.jpg"></p><p><img src="https://sway.office.com/s/r9EjTYbJPDef3mPK/images/t7T-URoVrRRlcE" alt="离散数学（上）-14.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643916949f534.jpg" alt="离散数学（上）-15.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/6439169491d55.jpg" alt="离散数学（上）-16.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/6439169497307.jpg" alt="离散数学（上）-17.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/6439169497049.jpg" alt="离散数学（上）-18.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391694712c9.jpg" alt="离散数学（上）-19.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/6439169497835.jpg" alt="离散数学（上）-20.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/6439174199658.jpg" alt="离散数学（上）-21.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917416a3ea.jpg" alt="离散数学（上）-22.jpg"></p><h2 id="谓词逻辑"><a href="#谓词逻辑" class="headerlink" title="谓词逻辑"></a>谓词逻辑</h2><p><img src="https://bu.dusays.com/2023/04/14/64391741bcf26.jpg" alt="离散数学（上）-23.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391741d68f0.jpg" alt="离散数学（上）-24.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391741cd4a1.jpg" alt="离散数学（上）-25.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391741f0ff3.jpg" alt="离散数学（上）-26.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/6439174219a3c.jpg" alt="离散数学（上）-27.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/6439174204fb7.jpg" alt="离散数学（上）-28.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/6439174205709.jpg" alt="离散数学（上）-29.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917421dc77.jpg" alt="离散数学（上）-30.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917dc529b8.jpg" alt="离散数学（上）-31.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917dbbb4d1.jpg" alt="离散数学（上）-32.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917dc7d000.jpg" alt="离散数学（上）-33.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917dd8e7af.jpg" alt="离散数学（上）-34.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917dde5546.jpg" alt="离散数学（上）-35.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917ddcb754.jpg" alt="离散数学（上）-36.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917ddee78a.jpg" alt="离散数学（上）-37.jpg"></p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p><img src="https://bu.dusays.com/2023/04/14/643917de04649.jpg" alt="离散数学（上）-38.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917de03f29.jpg" alt="离散数学（上）-39.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643917ddbf742.jpg" alt="离散数学（上）-40.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643918cb3cfc2.jpg" alt="离散数学（上）-41.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643918cb4a009.jpg" alt="离散数学（上）-42.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643918cb54575.jpg" alt="离散数学（上）-43.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643918cb4a03d.jpg" alt="离散数学（上）-44.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643918cb5043b.jpg" alt="离散数学（上）-45.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643918cb5456b.jpg" alt="离散数学（上）-46.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643918cb58b7c.jpg" alt="离散数学（上）-47.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643918cb550ff.jpg" alt="离散数学（上）-48.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/643918cb554ef.jpg" alt="离散数学（上）-49.jpg"></p><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p><img src="https://bu.dusays.com/2023/04/14/643918cb59106.jpg" alt="离散数学（上）-50.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f1df65.jpg" alt="离散数学（上）-51.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f1e002.jpg" alt="离散数学（上）-52.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f2dd7b.jpg" alt="离散数学（上）-53.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f2c203.jpg" alt="离散数学（上）-54.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f2a9b6.jpg" alt="离散数学（上）-55.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f2a11b.jpg" alt="离散数学（上）-56.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f2fe05.jpg" alt="离散数学（上）-57.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f2db03.jpg" alt="离散数学（上）-58.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f2f21d.jpg" alt="离散数学（上）-59.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391a0f2fe16.jpg" alt="离散数学（上）-60.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac172ea7.jpg" alt="离散数学（上）-61.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac185567.jpg" alt="离散数学（上）-62.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac17a580.jpg" alt="离散数学（上）-63.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac183ae4.jpg" alt="离散数学（上）-64.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac193daa.jpg" alt="离散数学（上）-65.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac193953.jpg" alt="离散数学（上）-66.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac19d6a5.jpg" alt="离散数学（上）-67.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac192d8e.jpg" alt="离散数学（上）-68.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac19b803.jpg" alt="离散数学（上）-69.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391ac197829.jpg" alt="离散数学（上）-70.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391b2526520.jpg" alt="离散数学（上）-71.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391b252653a.jpg" alt="离散数学（上）-72.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391b253097b.jpg" alt="离散数学（上）-73.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391b253abee.jpg" alt="离散数学（上）-74.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391b253b325.jpg" alt="离散数学（上）-75.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391b2527917.jpg" alt="离散数学（上）-76.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391b253c776.jpg" alt="离散数学（上）-77.jpg"></p><p><img src="https://bu.dusays.com/2023/04/14/64391b25354d2.jpg" alt="离散数学（上）-78.jpg"></p><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p><img src="https://bu.dusays.com/2023/06/09/648294e777089.jpg" alt="离散数学（下）-01.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648294e8649ea.jpg" alt="离散数学（下）-02.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648294e8093bf.jpg" alt="离散数学（下）-03.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648294e860264.jpg" alt="离散数学（下）-04.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648294e880072.jpg" alt="离散数学（下）-05.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648294e887b07.jpg" alt="离散数学（下）-06.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648294e87244d.jpg" alt="离散数学（下）-07.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648294e81eee3.jpg" alt="离散数学（下）-08.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648294e84efb5.jpg" alt="离散数学（下）-09.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648294e84c0fc.jpg" alt="离散数学（下）-10.jpg"></p><h2 id="无穷集合"><a href="#无穷集合" class="headerlink" title="无穷集合"></a>无穷集合</h2><p><img src="https://bu.dusays.com/2023/06/09/648295a51f19b.jpg" alt="离散数学（下）-11.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648295a572f31.jpg" alt="离散数学（下）-12.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648295a579812.jpg" alt="离散数学（下）-13.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648295a55ea8d.jpg" alt="离散数学（下）-14.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648295a5b2bfc.jpg" alt="离散数学（下）-15.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648295a5ccd7b.jpg" alt="离散数学（下）-16.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648295a58bcbf.jpg" alt="离散数学（下）-17.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648295a5cd656.jpg" alt="离散数学（下）-18.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648295a5cb7da.jpg" alt="离散数学（下）-19.jpg"></p><h2 id="抽象代数"><a href="#抽象代数" class="headerlink" title="抽象代数"></a>抽象代数</h2><p>这部分是最难理解的，在课堂上跟思路非常耗神。</p><p><img src="https://bu.dusays.com/2023/06/09/648295a5d1107.jpg" alt="离散数学（下）-20.jpg"></p><p><img src="https://sway.office.com/s/NekKUQjiespCFCX9/images/s66lOsCQh31r8t" alt="离散数学（下）-21.jpg"></p><p><img src="https://sway.office.com/s/hUY2LEaqiA7pjT3u/images/j-iZvTJwi58a6w" alt="离散数学（下）-22.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482962fbdef6.jpg" alt="离散数学（下）-23.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482963004d36.jpg" alt="离散数学（下）-24.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482962fe7c68.jpg" alt="离散数学（下）-25.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482963014693.jpg" alt="离散数学（下）-26.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482963026a33.jpg" alt="离散数学（下）-27.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482963028d1c.jpg" alt="离散数学（下）-28.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482963021aba.jpg" alt="离散数学（下）-29.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648296302e3f3.jpg" alt="离散数学（下）-30.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648296cc471ca.jpg" alt="离散数学（下）-31.jpg"></p><p><img src="https://sway.office.com/s/zuHoPErcKK6c80Jm/images/_i0OewB_qbSwGZ" alt="离散数学（下）-32.jpg"></p><p><img src="https://sway.office.com/s/wh4D3JlhTO8BZ7BK/images/RCRsqluWLXgyw-" alt="离散数学（下）-33.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648296cc3e9b4.jpg" alt="离散数学（下）-34.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648296ccb721f.jpg" alt="离散数学（下）-35.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648296cccd5b8.jpg" alt="离散数学（下）-36.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648296ccc29cf.jpg" alt="离散数学（下）-37.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648296cccc437.jpg" alt="离散数学（下）-38.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648296ccb83b2.jpg" alt="离散数学（下）-39.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648296cc6a26d.jpg" alt="离散数学（下）-40.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482973550a77.jpg" alt="离散数学（下）-41.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297355073d.jpg" alt="离散数学（下）-42.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/64829735503ec.jpg" alt="离散数学（下）-43.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482973550465.jpg" alt="离散数学（下）-44.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/64829735914cc.jpg" alt="离散数学（下）-45.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/64829735ac6cf.jpg" alt="离散数学（下）-46.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482973576a98.jpg" alt="离散数学（下）-47.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/64829735ae6b2.jpg" alt="离散数学（下）-48.jpg"></p><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><p>老熟人了。</p><p><img src="https://bu.dusays.com/2023/06/09/64829735aa11f.jpg" alt="离散数学（下）-49.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297357ddfe.jpg" alt="离散数学（下）-50.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297a683b79.jpg" alt="离散数学（下）-51.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297a70d88f.jpg" alt="离散数学（下）-52.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297a683b4e.jpg" alt="离散数学（下）-53.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297a7087cb.jpg" alt="离散数学（下）-54.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297a729dcf.jpg" alt="离散数学（下）-55.jpg"></p><p><img src="https://s2.loli.net/2023/07/09/IbdVauCqQk92jXv.jpg" alt="离散数学（下）-56.jpg"></p><p><img src="https://sway.office.com/s/i01L4UPeSH0tltva/images/CPgK7LVTNmvFZm" alt="离散数学（下）-57.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297a749b88.jpg" alt="离散数学（下）-58.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297a73073f.jpg" alt="离散数学（下）-59.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297a739bd9.jpg" alt="离散数学（下）-60.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297fccae22.jpg" alt="离散数学（下）-61.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297fccaead.jpg" alt="离散数学（下）-62.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297fe2d847.jpg" alt="离散数学（下）-63.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297feb94c1.jpg" alt="离散数学（下）-64.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297feec6ba.jpg" alt="离散数学（下）-65.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297ff1af88.jpg" alt="离散数学（下）-66.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297ff85616.jpg" alt="离散数学（下）-67.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297ff92832.jpg" alt="离散数学（下）-68.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297ff67337.jpg" alt="离散数学（下）-69.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648297ff86126.jpg" alt="离散数学（下）-70.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482985157dfe.jpg" alt="离散数学（下）-71.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648298516d06e.jpg" alt="离散数学（下）-72.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648298525e234.jpg" alt="离散数学（下）-73.jpg"></p><p>打问号的地方就是没看懂的地方。这一段有点奇怪，比如那一串点是拓扑排序排好的还是无所谓的呢？可能我的思路进入了莫名其妙的地方。</p><p><img src="https://bu.dusays.com/2023/06/09/6482985241fce.jpg" alt="离散数学（下）-74.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/6482985322903.jpg" alt="离散数学（下）-75.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648298531b1ac.jpg" alt="离散数学（下）-76.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/64829853511ed.jpg" alt="离散数学（下）-77.jpg"></p><p><img src="https://sway.office.com/s/wh4D3JlhTO8BZ7BK/images/3o7uDPamIv-_L3" alt="离散数学（下）-78.jpg"></p><p><img src="https://bu.dusays.com/2023/06/09/648298532ddfc.jpg" alt="离散数学（下）-79.jpg"></p><p><img src="https://sway.office.com/s/Awl6oMEljgXAtBdc/images/_QzjeAg3zP_4oX" alt="离散数学（下）-80.jpg"></p><p><img src="https://sway.office.com/s/GOJYEjZgAwWau86Y/images/PxflwWxSTe79aV" alt="离散数学（下）-81.jpg"></p><p><img src="https://sway.office.com/s/du8OjFzPkOfqtGHS/images/p1bxBwrLXVR4zi" alt="离散数学（下）-82.jpg"></p><p><img src="https://sway.office.com/s/TNhgvZjyfJXU7knv/images/RfyI5q3Glw9FMm" alt="离散数学（下）-83.jpg"></p><h2 id="后日谈"><a href="#后日谈" class="headerlink" title="后日谈"></a>后日谈</h2><p>前几节课都是听的线上，我根据声音脑补这是个穿着灰白上衣的瘦高老头，墙上斑驳的石灰一样。结果去了线下，才发现是个头发浓密的青年人，裹一挂蓝色的冲锋衣。有点失望。</p><p>总的来说，这老师讲的还可以。虽然可以说是念 PPT，但他 PPT 写的不错，条理清晰，比教科书好多了。草草翻了翻教科书：跟着这玩意学简直是灾难。</p><p>笔记里除了一个打红色问号的地方，其他证明都跟着推了一遍。</p><p>课程学完已是学期末尾，将要准备答辩。工作的话没有找到，毕竟这专业真的是难就业，摆烂三年多绩点难看，大环境又如此糟糕。当然，找一个达不到个税起征点的工作应该还是能行的，虽然入学的时候觉得学校不行，尤其是录到一个野鸡专业，但除开顶尖的一些人，大多数学生就业还是仰仗学校的名字的。然而，读书这么多年，出来收入和家里小学毕业的打工人差不多，多少还是有点不平衡。</p><p>天气异常炎热，草坪上的洒水管边总会聚几只乘凉的鸟雀。大学颓废的日子里想通了一些问题，但似乎也丢掉了一些对自己的勇气。</p><p>二零二三年六月九日。</p><p>极限毕业了。在教务系统的截止日期前，我催着老师批自己的卷子。这次考试似乎是整个系一张卷子，不同老师批改不同部分，虽然还有题没出分，总归是够及格分了。赶紧开了一张成绩证明，找教务处做了课程替代，把之前挂掉的某门课程改革毙掉的课程替代了。</p><p>临走时，老师朝我挥手：</p><p>“祝你顺利。”</p><p>二零二三年六月二十六日。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先贴作业，笔记在后面。&lt;/p&gt;
&lt;h2 id=&quot;离散作业-1&quot;&gt;&lt;a href=&quot;#离散作业-1&quot; class=&quot;headerlink&quot; title=&quot;离散作业 1&quot;&gt;&lt;/a&gt;离散作业 1&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://bu.dusays.com/202</summary>
      
    
    
    
    <category term="笔记" scheme="https://loveofpeach.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="离散数学" scheme="https://loveofpeach.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>SeriesNote</title>
    <link href="https://loveofpeach.github.io/posts/1b45ac71.html"/>
    <id>https://loveofpeach.github.io/posts/1b45ac71.html</id>
    <published>2023-02-28T12:32:06.000Z</published>
    <updated>2023-05-31T11:18:16.935Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://bu.dusays.com/2023/05/31/64772a140bf1c.jpg" alt="无穷级数-01.jpg"></p><h2 id="一些概念和性质"><a href="#一些概念和性质" class="headerlink" title="一些概念和性质"></a>一些概念和性质</h2><p><img src="https://bu.dusays.com/2023/05/31/64772a14283c0.jpg" alt="无穷级数-02.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772a1435017.jpg" alt="无穷级数-03.jpg"></p><h2 id="常项级数的审敛法"><a href="#常项级数的审敛法" class="headerlink" title="常项级数的审敛法"></a>常项级数的审敛法</h2><p><img src="https://bu.dusays.com/2023/05/31/64772a142c3f0.jpg" alt="无穷级数-04.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772a1423121.jpg" alt="无穷级数-05.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772a14329e3.jpg" alt="无穷级数-06.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772a142e1a3.jpg" alt="无穷级数-07.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772a1408547.jpg" alt="无穷级数-08.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772a14233e6.jpg" alt="无穷级数-09.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772a1428bba.jpg" alt="无穷级数-10.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772ab7028d1.jpg" alt="无穷级数-11.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772ab7014c7.jpg" alt="无穷级数-12.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772ab6f1352.jpg" alt="无穷级数-13.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772ab6f34a7.jpg" alt="无穷级数-14.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772ab711941.jpg" alt="无穷级数-15.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772ab71349f.jpg" alt="无穷级数-16.jpg"></p><p>【例题】判断级数敛散性 $\sum\limits_{n=1}^\infty \frac{2n+1}{n^4+4n^2}$</p><p>【解 1】 由于 $\lim\limits_{n\to \infty}\frac{\frac{2n+1}{n^4+4n^2}}{1/n^3}=\lim\limits_{n\to \infty}\frac{2n^4+n^3}{n^4+4n^2}=2$ ，而 $\sum\limits_{n=1}^\infty \frac{1}{n^3}$ 收敛，故原级数收敛。</p><p>【解 2】 由于 $\frac{2n+1}{n^4+4n^2}&lt;\frac{2n+n}{n^4}=\frac{3}{n^3}$ ，而 $\sum\limits_{n=1}^\infty \frac{3}{n^3}$ 是收敛的 p 级数，故原级数收敛。</p><p>【例题】判断级数敛散性 $\sum\limits_{n=2}^\infty \frac{1}{\ln^{10}n}$</p><p>【解】 令 $u_n=\frac{1}{\ln^{10}n}$ ，$v_n=\frac{1}{n}$ ，由于 $\lim\limits_{n\to \infty}\frac{u_n}{v_n}=\lim\limits_{n\to \infty}\frac{n}{\ln^{10}n}$ ，而：</p><script type="math/tex; mode=display">\lim\limits_{x\to +\infty}\frac{x}{\ln^{10}x}=\lim\limits_{x\to +\infty}\frac{1}{10\cdot \ln^{9}x\cdot \frac{1}{x}}=\cdots =\lim\limits_{x\to +\infty}\frac{x}{10!}=+\infty</script><p>因此根据海涅定理可知，$\lim\limits_{n\to \infty}\frac{u_n}{v_n}=+\infty$ ，故原级数发散。</p><h2 id="幂级数"><a href="#幂级数" class="headerlink" title="幂级数"></a>幂级数</h2><p><img src="https://bu.dusays.com/2023/05/31/64772ab70d449.jpg" alt="无穷级数-17.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772ab7131bf.jpg" alt="无穷级数-18.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772ab70c92c.jpg" alt="无穷级数-19.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772ab714441.jpg" alt="无穷级数-20.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772b5a1c93b.jpg" alt="无穷级数-21.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772b5a5327d.jpg" alt="无穷级数-22.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772b5a7d3f2.jpg" alt="无穷级数-23.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772b5a56bda.jpg" alt="无穷级数-24.jpg"></p><p>【例题】 求幂级数 $\sum\limits_{n=1}^\infty (-1)^{n-1}\frac{x^{2n-1}}{2n-1}$ 的收敛域及和函数.</p><p>【解】 第一问过程略。该幂级数的收敛域为 $[-1,1]$ .</p><p>设幂级数的和函数为 $S(x)$ ，即 $S(x)=\sum\limits_{n=1}^\infty (-1)^{n-1}\frac{x^{2n-1}}{2n-1}$ ，对幂级数逐项微分，有：</p><script type="math/tex; mode=display">\begin{aligned}S'(x) & = \sum\limits_{n=1}^\infty [(-1)^{n-1}\frac{x^{2n-1}}{2n-1}]'=\sum\limits_{n=1}^\infty (-1)^{n-1}x^{2n-2} \\     & = \sum\limits_{n=0}^\infty (-1)^nx^{2n}=\sum\limits_{n=0}^\infty (-x^2)^n=\frac{1}{1+x^2} \\\end{aligned}</script><p>上式两边从 0 到 $x$ 积分得</p><script type="math/tex; mode=display">S(x)-S(0)=\int_{0}^{x} S'(x)\, {\rm d}x=\int_{0}^{x} \frac{1}{1+x^2}\, {\rm d}x</script><p>注意到 $S(0)=0$ ，有</p><script type="math/tex; mode=display">S(x)-S(0)=\arctan x|_{0}^{x}=\arctan x</script><p>因此该级数的和函数为$S(x)=\arctan x ,x\in [-1,1]$ .</p><p>【例】 一个奇怪的技巧：</p><script type="math/tex; mode=display">\sum\limits_{n=1}^\infty (-1)^nx^{2n-1}=(-x)\sum\limits_{n=1}^\infty (-x^2)^{n-1}=-\frac{x}{1+x^2}</script><p>【例题】 求常数项级数 $\sum\limits_{n=1}^\infty (-1)^{n-1}\frac{1}{3^n(2n-1)}$ 的和</p><p>【解】 构造幂级数 $\sum\limits_{n=1}^\infty (-1)^{n-1}\frac{x^{2n-1}}{2n-1}$ ，并设幂级数的和函数为 $S(x)$ ，即</p><script type="math/tex; mode=display">S(x)=\sum\limits_{n=1}^\infty (-1)^{n-1}\frac{x^{2n-1}}{2n-1}</script><p>由上面题目知：</p><script type="math/tex; mode=display">S(x)=\arctan x , x\in [-1,1]</script><p>因此</p><script type="math/tex; mode=display">\begin{aligned}\sum\limits_{n=1}^\infty (-1)^{n-1}\frac{1}{3^n(2n-1)} & = \frac{1}{\sqrt{3}}\sum\limits_{n=1}^\infty (-1)^{n-1}\frac{(\frac{1}{\sqrt{3}})^{2n-1}}{2n-1}=\frac{1}{\sqrt{3}}S(\frac{1}{\sqrt{3}}) \\     & = \frac{1}{\sqrt{3}}\arctan (\frac{1}{\sqrt{3}})=\frac{\sqrt{3}}{18}\pi \\\end{aligned}</script><h2 id="函数展开成幂级数"><a href="#函数展开成幂级数" class="headerlink" title="函数展开成幂级数"></a>函数展开成幂级数</h2><p><img src="https://bu.dusays.com/2023/05/31/64772b5a79774.jpg" alt="无穷级数-25.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772b5a6c8ff.jpg" alt="无穷级数-26.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772b5a80a04.jpg" alt="无穷级数-27.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772b5a80acb.jpg" alt="无穷级数-28.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772b5a6e2c0.jpg" alt="无穷级数-29.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772b5a7a231.jpg" alt="无穷级数-30.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772beae517f.jpg" alt="无穷级数-31.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772beae939a.jpg" alt="无穷级数-32.jpg"></p><p>【例题】将 $f(x)=(1+x)e^x$ 展开成 $x$ 的幂级数</p><p>【解】 由于 $f(x)=e^x+xe^x$ ，而 $e^x=\sum\limits_{n=0}^\infty \frac{x^n}{n!}$ ，$x\in R$ ，所以</p><center>（技巧：写开）</center><script type="math/tex; mode=display">\begin{aligned}f(x) & = \sum\limits_{n=0}^\infty \frac{x^n}{n!}+x\sum\limits_{n=0}^\infty \frac{x^n}{n!} \\     & = 1+\frac{x}{1!}+\frac{x^2}{2!}+\frac{x^3}{3!}+\cdots +x(1+\frac{x}{1!}+\frac{x^2}{2!}+\frac{x^3}{3!}+\cdots) \\     & = 1+(\frac{1}{1!}+1)x+(\frac{1}{2!}+\frac{1}{1!})x^2+(\frac{1}{3!}+\frac{1}{2!})x^3+\cdots \\     & = 1+\sum\limits_{n=1}^\infty \frac{n+1}{n!}x^n ,\quad x\in (-\infty,\infty) \\\end{aligned}</script><h2 id="函数的幂级数展开式的应用"><a href="#函数的幂级数展开式的应用" class="headerlink" title="函数的幂级数展开式的应用"></a>函数的幂级数展开式的应用</h2><p><img src="https://bu.dusays.com/2023/05/31/64772beaecc42.jpg" alt="无穷级数-33.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772beb0e911.jpg" alt="无穷级数-34.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772beb05a1e.jpg" alt="无穷级数-35.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772beb0c8b1.jpg" alt="无穷级数-36.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772beb0ffb4.jpg" alt="无穷级数-37.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772beb13b83.jpg" alt="无穷级数-38.jpg"></p><p>【例题】 试求函数项级数 $\sum\limits_{n=1}^\infty [\frac{x(x+n)}{n+1}]^n$ 的绝对收敛域</p><p>【解】 记 $u_n(x)=[\frac{x(x+n)}{n+1}]^n$ ，由于</p><script type="math/tex; mode=display">u_n(x)=x^n\cdot (1+\frac{x-1}{n+1})^n</script><p>显然当 $|x|&gt;1$ 时，$\lim\limits_{n\to \infty}u_n(x)=\infty$ ，故级数发散；当 $x=1$ 时，$u_n(x)=1$ ，级数发散；当 $x=-1$ 时，$u_n(x)=(-1)^n(1-\frac{2}{n+1})^n$ ，由于</p><script type="math/tex; mode=display">\lim\limits_{n\to \infty}|u_n(x)|=\lim\limits_{n\to \infty}(1-\frac{2}{n+1})^n=e^{-\frac{1}{2}}\neq 0</script><p>因此级数发散；当 $|x|&lt;1$ 时，由于</p><script type="math/tex; mode=display">\lim\limits_{n\to \infty}\sqrt[n]{|u_n(x)|}=\lim\limits_{n\to \infty}(|x|\cdot |1+\frac{x-1}{n+1}|)=|x|<1</script><p>故级数绝对收敛，从而函数项级数 $\sum\limits_{n=1}^\infty [\frac{x(x+n)}{n+1}]^n$ 的绝对收敛域为 $(-1,1)$ .</p><h2 id="傅里叶级数"><a href="#傅里叶级数" class="headerlink" title="傅里叶级数"></a>傅里叶级数</h2><p><img src="https://bu.dusays.com/2023/05/31/64772beb153a8.jpg" alt="无穷级数-39.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772beb15979.jpg" alt="无穷级数-40.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c7402702.jpg" alt="无穷级数-41.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c7423132.jpg" alt="无穷级数-42.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c7408f6f.jpg" alt="无穷级数-43.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c741cbfb.jpg" alt="无穷级数-44.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c742f838.jpg" alt="无穷级数-45.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c742c19d.jpg" alt="无穷级数-46.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c74279f2.jpg" alt="无穷级数-47.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c742b6f5.jpg" alt="无穷级数-48.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c74247f5.jpg" alt="无穷级数-49.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772c74160dd.jpg" alt="无穷级数-50.jpg"></p><h2 id="一般周期函数的傅里叶级数"><a href="#一般周期函数的傅里叶级数" class="headerlink" title="一般周期函数的傅里叶级数"></a>一般周期函数的傅里叶级数</h2><p><img src="https://bu.dusays.com/2023/05/31/64772cd197983.jpg" alt="无穷级数-51.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772cd1951e9.jpg" alt="无穷级数-52.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772cd19537f.jpg" alt="无穷级数-53.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772cd19526b.jpg" alt="无穷级数-54.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772cd194e67.jpg" alt="无穷级数-55.jpg"></p><p><img src="https://bu.dusays.com/2023/05/31/64772cd199832.jpg" alt="无穷级数-56.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://bu.dusays.com/2023/05/31/64772a140bf1c.jpg&quot; alt=&quot;无穷级数-01.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一些概念和性质&quot;&gt;&lt;a href=&quot;#一些概念和性质&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="笔记" scheme="https://loveofpeach.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="级数" scheme="https://loveofpeach.github.io/tags/%E7%BA%A7%E6%95%B0/"/>
    
  </entry>
  
</feed>
